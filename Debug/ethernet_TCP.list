
ethernet_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014170  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee0  08014340  08014340  00024340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017220  08017220  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08017220  08017220  00027220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017228  08017228  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017228  08017228  00027228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801722c  0801722c  0002722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08017230  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006dd8  200001f8  08017424  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006fd0  08017424  00036fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d59  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000608e  00000000  00000000  00061f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a10  00000000  00000000  00068010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  00069a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000331d7  00000000  00000000  0006b368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022afb  00000000  00000000  0009e53f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102c93  00000000  00000000  000c103a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c3ccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007918  00000000  00000000  001c3d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014328 	.word	0x08014328

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08014328 	.word	0x08014328

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b972 	b.w	8000f18 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	4688      	mov	r8, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14b      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4615      	mov	r5, r2
 8000c5e:	d967      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0720 	rsb	r7, r2, #32
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c72:	4095      	lsls	r5, r2
 8000c74:	ea47 0803 	orr.w	r8, r7, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c84:	fa1f fc85 	uxth.w	ip, r5
 8000c88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	fb07 f10c 	mul.w	r1, r7, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9e:	f080 811b 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8118 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca8:	3f02      	subs	r7, #2
 8000caa:	442b      	add	r3, r5
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x290>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	442c      	add	r4, r5
 8000cd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cdc:	eba4 040c 	sub.w	r4, r4, ip
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	4639      	mov	r1, r7
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xbe>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80eb 	beq.w	8000ed2 <__udivmoddi4+0x286>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000d02:	4638      	mov	r0, r7
 8000d04:	4639      	mov	r1, r7
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f783 	clz	r7, r3
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d147      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd0>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80fa 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	4698      	mov	r8, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa0>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xe8>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 808f 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3e:	1b49      	subs	r1, r1, r5
 8000d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d44:	fa1f f885 	uxth.w	r8, r5
 8000d48:	2701      	movs	r7, #1
 8000d4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb08 f10c 	mul.w	r1, r8, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1a59      	subs	r1, r3, r1
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x14c>
 8000d88:	192c      	adds	r4, r5, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x14a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80b6 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e79f      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000da2:	f1c7 0c20 	rsb	ip, r7, #32
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db0:	fa01 f407 	lsl.w	r4, r1, r7
 8000db4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc6:	0c2c      	lsrs	r4, r5, #16
 8000dc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dcc:	fa1f fa8e 	uxth.w	sl, lr
 8000dd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	fa02 f207 	lsl.w	r2, r2, r7
 8000dde:	fa00 f107 	lsl.w	r1, r0, r7
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1e 0303 	adds.w	r3, lr, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	f080 8087 	bcs.w	8000efe <__udivmoddi4+0x2b2>
 8000df0:	429c      	cmp	r4, r3
 8000df2:	f240 8084 	bls.w	8000efe <__udivmoddi4+0x2b2>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4473      	add	r3, lr
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1e 0404 	adds.w	r4, lr, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	d26b      	bcs.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e1e:	45a2      	cmp	sl, r4
 8000e20:	d969      	bls.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4474      	add	r4, lr
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	454c      	cmp	r4, r9
 8000e34:	46c2      	mov	sl, r8
 8000e36:	464b      	mov	r3, r9
 8000e38:	d354      	bcc.n	8000ee4 <__udivmoddi4+0x298>
 8000e3a:	d051      	beq.n	8000ee0 <__udivmoddi4+0x294>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2c8>
 8000e40:	ebb1 050a 	subs.w	r5, r1, sl
 8000e44:	eb64 0403 	sbc.w	r4, r4, r3
 8000e48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	40fc      	lsrs	r4, r7
 8000e50:	ea4c 0505 	orr.w	r5, ip, r5
 8000e54:	e9c6 5400 	strd	r5, r4, [r6]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f703 	lsr.w	r7, r0, r3
 8000e64:	4095      	lsls	r5, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e72:	4338      	orrs	r0, r7
 8000e74:	0c01      	lsrs	r1, r0, #16
 8000e76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7a:	fa1f f885 	uxth.w	r8, r5
 8000e7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb07 f308 	mul.w	r3, r7, r8
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x256>
 8000e92:	1869      	adds	r1, r5, r1
 8000e94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e98:	d22f      	bcs.n	8000efa <__udivmoddi4+0x2ae>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d92d      	bls.n	8000efa <__udivmoddi4+0x2ae>
 8000e9e:	3f02      	subs	r7, #2
 8000ea0:	4429      	add	r1, r5
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	b281      	uxth	r1, r0
 8000ea6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eaa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb00 f308 	mul.w	r3, r0, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x27e>
 8000eba:	1869      	adds	r1, r5, r1
 8000ebc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec0:	d217      	bcs.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d915      	bls.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4429      	add	r1, r5
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed0:	e73b      	b.n	8000d4a <__udivmoddi4+0xfe>
 8000ed2:	4637      	mov	r7, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e709      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed8:	4607      	mov	r7, r0
 8000eda:	e6e7      	b.n	8000cac <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000ee0:	4541      	cmp	r1, r8
 8000ee2:	d2ab      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eec:	3801      	subs	r0, #1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	e7a4      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	e7e9      	b.n	8000eca <__udivmoddi4+0x27e>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	e795      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efa:	4667      	mov	r7, ip
 8000efc:	e7d1      	b.n	8000ea2 <__udivmoddi4+0x256>
 8000efe:	4681      	mov	r9, r0
 8000f00:	e77c      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0x14c>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	442b      	add	r3, r5
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	4638      	mov	r0, r7
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xda>
 8000f14:	4637      	mov	r7, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa0>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <cJSON_GetStringValue>:
{
    return (const char*) (global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item) 
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsString(item)) 
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f001 fb4e 	bl	80025c6 <cJSON_IsString>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <cJSON_GetStringValue+0x18>
    {
        return NULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	e001      	b.n	8000f38 <cJSON_GetStringValue+0x1c>
    }

    return item->valuestring;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <cJSON_GetNumberValue>:

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item) 
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item)) 
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 fb25 	bl	8002598 <cJSON_IsNumber>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	4c06      	ldr	r4, [pc, #24]	; (8000f74 <cJSON_GetNumberValue+0x34>)
 8000f5a:	e002      	b.n	8000f62 <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000f62:	ec44 3b17 	vmov	d7, r3, r4
}
 8000f66:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6a:	eef0 0a67 	vmov.f32	s1, s15
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}
 8000f74:	7ff80000 	.word	0x7ff80000

08000f78 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <case_insensitive_strcmp+0x16>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e05e      	b.n	8001050 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d10d      	bne.n	8000fb6 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e058      	b.n	8001050 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e052      	b.n	8001050 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	f010 fc94 	bl	80118e8 <__locale_ctype_ptr>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d103      	bne.n	8000fda <case_insensitive_strcmp+0x62>
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f103 0420 	add.w	r4, r3, #32
 8000fd8:	e000      	b.n	8000fdc <case_insensitive_strcmp+0x64>
 8000fda:	7bfc      	ldrb	r4, [r7, #15]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	73bb      	strb	r3, [r7, #14]
 8000fe2:	f010 fc81 	bl	80118e8 <__locale_ctype_ptr>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d102      	bne.n	8000ffe <case_insensitive_strcmp+0x86>
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	3320      	adds	r3, #32
 8000ffc:	e000      	b.n	8001000 <case_insensitive_strcmp+0x88>
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	429c      	cmp	r4, r3
 8001002:	d0cc      	beq.n	8000f9e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	737b      	strb	r3, [r7, #13]
 800100a:	f010 fc6d 	bl	80118e8 <__locale_ctype_ptr>
 800100e:	4602      	mov	r2, r0
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	3301      	adds	r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d103      	bne.n	8001028 <case_insensitive_strcmp+0xb0>
 8001020:	7b7b      	ldrb	r3, [r7, #13]
 8001022:	f103 0420 	add.w	r4, r3, #32
 8001026:	e000      	b.n	800102a <case_insensitive_strcmp+0xb2>
 8001028:	7b7c      	ldrb	r4, [r7, #13]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	733b      	strb	r3, [r7, #12]
 8001030:	f010 fc5a 	bl	80118e8 <__locale_ctype_ptr>
 8001034:	4602      	mov	r2, r0
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <case_insensitive_strcmp+0xd4>
 8001046:	7b3b      	ldrb	r3, [r7, #12]
 8001048:	3320      	adds	r3, #32
 800104a:	e000      	b.n	800104e <case_insensitive_strcmp+0xd6>
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	1ae3      	subs	r3, r4, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001070:	2300      	movs	r3, #0
 8001072:	e015      	b.n	80010a0 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff f8d5 	bl	8000224 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	4798      	blx	r3
 8001088:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001090:	2300      	movs	r3, #0
 8001092:	e005      	b.n	80010a0 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f010 fc64 	bl	8011966 <memcpy>

    return copy;
 800109e:	68bb      	ldr	r3, [r7, #8]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2028      	movs	r0, #40	; 0x28
 80010b6:	4798      	blx	r3
 80010b8:	60f8      	str	r0, [r7, #12]
    if (node)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010c0:	2228      	movs	r2, #40	; 0x28
 80010c2:	2100      	movs	r1, #0
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f010 fc59 	bl	801197c <memset>
    }

    return node;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010e0:	e037      	b.n	8001152 <cJSON_Delete+0x7e>
    {
        next = item->next;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d108      	bne.n	8001106 <cJSON_Delete+0x32>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffe7 	bl	80010d4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <cJSON_Delete+0x52>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <cJSON_Delete+0x8c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6912      	ldr	r2, [r2, #16]
 8001122:	4610      	mov	r0, r2
 8001124:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <cJSON_Delete+0x72>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <cJSON_Delete+0x8c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6a12      	ldr	r2, [r2, #32]
 8001142:	4610      	mov	r0, r2
 8001144:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <cJSON_Delete+0x8c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
        item = next;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1c4      	bne.n	80010e2 <cJSON_Delete+0xe>
    }
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000

08001164 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001168:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	0000      	movs	r0, r0
	...

08001178 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b099      	sub	sp, #100	; 0x64
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f04f 0400 	mov.w	r4, #0
 800118a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800118e:	2300      	movs	r3, #0
 8001190:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001192:	f7ff ffe7 	bl	8001164 <get_decimal_point>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <parse_number+0x36>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <parse_number+0x3a>
    {
        return false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e104      	b.n	80013bc <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011b6:	e09f      	b.n	80012f8 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c2:	440b      	add	r3, r1
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3b2b      	subs	r3, #43	; 0x2b
 80011ca:	2b3a      	cmp	r3, #58	; 0x3a
 80011cc:	f200 80a4 	bhi.w	8001318 <parse_number+0x1a0>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <parse_number+0x60>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080012c5 	.word	0x080012c5
 80011dc:	08001319 	.word	0x08001319
 80011e0:	080012c5 	.word	0x080012c5
 80011e4:	080012e3 	.word	0x080012e3
 80011e8:	08001319 	.word	0x08001319
 80011ec:	080012c5 	.word	0x080012c5
 80011f0:	080012c5 	.word	0x080012c5
 80011f4:	080012c5 	.word	0x080012c5
 80011f8:	080012c5 	.word	0x080012c5
 80011fc:	080012c5 	.word	0x080012c5
 8001200:	080012c5 	.word	0x080012c5
 8001204:	080012c5 	.word	0x080012c5
 8001208:	080012c5 	.word	0x080012c5
 800120c:	080012c5 	.word	0x080012c5
 8001210:	080012c5 	.word	0x080012c5
 8001214:	08001319 	.word	0x08001319
 8001218:	08001319 	.word	0x08001319
 800121c:	08001319 	.word	0x08001319
 8001220:	08001319 	.word	0x08001319
 8001224:	08001319 	.word	0x08001319
 8001228:	08001319 	.word	0x08001319
 800122c:	08001319 	.word	0x08001319
 8001230:	08001319 	.word	0x08001319
 8001234:	08001319 	.word	0x08001319
 8001238:	08001319 	.word	0x08001319
 800123c:	08001319 	.word	0x08001319
 8001240:	080012c5 	.word	0x080012c5
 8001244:	08001319 	.word	0x08001319
 8001248:	08001319 	.word	0x08001319
 800124c:	08001319 	.word	0x08001319
 8001250:	08001319 	.word	0x08001319
 8001254:	08001319 	.word	0x08001319
 8001258:	08001319 	.word	0x08001319
 800125c:	08001319 	.word	0x08001319
 8001260:	08001319 	.word	0x08001319
 8001264:	08001319 	.word	0x08001319
 8001268:	08001319 	.word	0x08001319
 800126c:	08001319 	.word	0x08001319
 8001270:	08001319 	.word	0x08001319
 8001274:	08001319 	.word	0x08001319
 8001278:	08001319 	.word	0x08001319
 800127c:	08001319 	.word	0x08001319
 8001280:	08001319 	.word	0x08001319
 8001284:	08001319 	.word	0x08001319
 8001288:	08001319 	.word	0x08001319
 800128c:	08001319 	.word	0x08001319
 8001290:	08001319 	.word	0x08001319
 8001294:	08001319 	.word	0x08001319
 8001298:	08001319 	.word	0x08001319
 800129c:	08001319 	.word	0x08001319
 80012a0:	08001319 	.word	0x08001319
 80012a4:	08001319 	.word	0x08001319
 80012a8:	08001319 	.word	0x08001319
 80012ac:	08001319 	.word	0x08001319
 80012b0:	08001319 	.word	0x08001319
 80012b4:	08001319 	.word	0x08001319
 80012b8:	08001319 	.word	0x08001319
 80012bc:	08001319 	.word	0x08001319
 80012c0:	080012c5 	.word	0x080012c5
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6899      	ldr	r1, [r3, #8]
 80012cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ce:	440b      	add	r3, r1
 80012d0:	4413      	add	r3, r2
 80012d2:	7819      	ldrb	r1, [r3, #0]
 80012d4:	f107 0208 	add.w	r2, r7, #8
 80012d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012da:	4413      	add	r3, r2
 80012dc:	460a      	mov	r2, r1
 80012de:	701a      	strb	r2, [r3, #0]
                break;
 80012e0:	e007      	b.n	80012f2 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 80012e2:	f107 0208 	add.w	r2, r7, #8
 80012e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e8:	4413      	add	r3, r2
 80012ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80012ee:	701a      	strb	r2, [r3, #0]
                break;
 80012f0:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80012f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f4:	3301      	adds	r3, #1
 80012f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fa:	2b3e      	cmp	r3, #62	; 0x3e
 80012fc:	d80e      	bhi.n	800131c <parse_number+0x1a4>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <parse_number+0x1a4>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130a:	441a      	add	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	f4ff af51 	bcc.w	80011b8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001316:	e001      	b.n	800131c <parse_number+0x1a4>
                goto loop_end;
 8001318:	bf00      	nop
 800131a:	e000      	b.n	800131e <parse_number+0x1a6>
loop_end:
 800131c:	bf00      	nop
    number_c_string[i] = '\0';
 800131e:	f107 0208 	add.w	r2, r7, #8
 8001322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001324:	4413      	add	r3, r2
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800132a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f011 faa3 	bl	8012880 <strtod>
 800133a:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800133e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	429a      	cmp	r2, r3
 8001346:	d101      	bne.n	800134c <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8001348:	2300      	movs	r3, #0
 800134a:	e037      	b.n	80013bc <parse_number+0x244>
    }

    item->valuedouble = number;
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001352:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001356:	a31d      	add	r3, pc, #116	; (adr r3, 80013cc <parse_number+0x254>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001360:	f7ff fc00 	bl	8000b64 <__aeabi_dcmpge>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	e015      	b.n	80013a0 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <parse_number+0x250>)
 800137a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800137e:	f7ff fbe7 	bl	8000b50 <__aeabi_dcmple>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	e006      	b.n	80013a0 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8001392:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001396:	f7ff fbf9 	bl	8000b8c <__aeabi_d2iz>
 800139a:	4602      	mov	r2, r0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2208      	movs	r2, #8
 80013a4:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013ac:	4611      	mov	r1, r2
 80013ae:	f107 0208 	add.w	r2, r7, #8
 80013b2:	1a8a      	subs	r2, r1, r2
 80013b4:	441a      	add	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	609a      	str	r2, [r3, #8]
    return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3764      	adds	r7, #100	; 0x64
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	f3af 8000 	nop.w
 80013c8:	c1e00000 	.word	0xc1e00000
 80013cc:	ffc00000 	.word	0xffc00000
 80013d0:	41dfffff 	.word	0x41dfffff
 80013d4:	00000000 	.word	0x00000000

080013d8 <cJSON_SetNumberHelper>:

/* don't ask me, but the original cJSON_SetNumberValue returns an integer or double */
CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	ed87 0b00 	vstr	d0, [r7]
    if (number >= INT_MAX)
 80013e4:	a31b      	add	r3, pc, #108	; (adr r3, 8001454 <cJSON_SetNumberHelper+0x7c>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ee:	f7ff fbb9 	bl	8000b64 <__aeabi_dcmpge>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <cJSON_SetNumberHelper+0x2a>
    {
        object->valueint = INT_MAX;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	e015      	b.n	800142e <cJSON_SetNumberHelper+0x56>
    }
    else if (number <= (double)INT_MIN)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <cJSON_SetNumberHelper+0x78>)
 8001408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800140c:	f7ff fba0 	bl	8000b50 <__aeabi_dcmple>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <cJSON_SetNumberHelper+0x48>
    {
        object->valueint = INT_MIN;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	e006      	b.n	800142e <cJSON_SetNumberHelper+0x56>
    }
    else
    {
        object->valueint = (int)number;
 8001420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001424:	f7ff fbb2 	bl	8000b8c <__aeabi_d2iz>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	615a      	str	r2, [r3, #20]
    }

    return object->valuedouble = number;
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001434:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800143e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001442:	eeb0 0a47 	vmov.f32	s0, s14
 8001446:	eef0 0a67 	vmov.f32	s1, s15
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	c1e00000 	.word	0xc1e00000
 8001454:	ffc00000 	.word	0xffc00000
 8001458:	41dfffff 	.word	0x41dfffff

0800145c <cJSON_SetValuestring>:

CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    char *copy = NULL;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
    /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */
    if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <cJSON_SetValuestring+0x26>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <cJSON_SetValuestring+0x2a>
    {
        return NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	e02b      	b.n	80014de <cJSON_SetValuestring+0x82>
    }
    if (strlen(valuestring) <= strlen(object->valuestring))
 8001486:	6838      	ldr	r0, [r7, #0]
 8001488:	f7fe fecc 	bl	8000224 <strlen>
 800148c:	4604      	mov	r4, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe fec6 	bl	8000224 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	429c      	cmp	r4, r3
 800149c:	d808      	bhi.n	80014b0 <cJSON_SetValuestring+0x54>
    {
        strcpy(object->valuestring, valuestring);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f010 fbc0 	bl	8011c2a <strcpy>
        return object->valuestring;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	e016      	b.n	80014de <cJSON_SetValuestring+0x82>
    }
    copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);
 80014b0:	490d      	ldr	r1, [pc, #52]	; (80014e8 <cJSON_SetValuestring+0x8c>)
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f7ff fdd0 	bl	8001058 <cJSON_strdup>
 80014b8:	60f8      	str	r0, [r7, #12]
    if (copy == NULL)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <cJSON_SetValuestring+0x68>
    {
        return NULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e00c      	b.n	80014de <cJSON_SetValuestring+0x82>
    }
    if (object->valuestring != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <cJSON_SetValuestring+0x7a>
    {
        cJSON_free(object->valuestring);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f88f 	bl	80025f4 <cJSON_free>
    }
    object->valuestring = copy;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	611a      	str	r2, [r3, #16]

    return copy;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000000 	.word	0x20000000

080014ec <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e04c      	b.n	800159c <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b2f      	cmp	r3, #47	; 0x2f
 800150c:	d90f      	bls.n	800152e <parse_hex4+0x42>
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b39      	cmp	r3, #57	; 0x39
 8001518:	d809      	bhi.n	800152e <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	3b30      	subs	r3, #48	; 0x30
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e02d      	b.n	800158a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b40      	cmp	r3, #64	; 0x40
 8001538:	d90f      	bls.n	800155a <parse_hex4+0x6e>
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b46      	cmp	r3, #70	; 0x46
 8001544:	d809      	bhi.n	800155a <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	3b37      	subs	r3, #55	; 0x37
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e017      	b.n	800158a <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b60      	cmp	r3, #96	; 0x60
 8001564:	d90f      	bls.n	8001586 <parse_hex4+0x9a>
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4413      	add	r3, r2
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b66      	cmp	r3, #102	; 0x66
 8001570:	d809      	bhi.n	8001586 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	3b57      	subs	r3, #87	; 0x57
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e001      	b.n	800158a <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e00c      	b.n	80015a4 <parse_hex4+0xb8>
        }

        if (i < 3)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d802      	bhi.n	8001596 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d9af      	bls.n	8001502 <parse_hex4+0x16>
        }
    }

    return h;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	f340 80b7 	ble.w	800175a <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	3302      	adds	r3, #2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff7b 	bl	80014ec <parse_hex4>
 80015f6:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80015fe:	d304      	bcc.n	800160a <utf16_literal_to_utf8+0x5a>
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001606:	f0c0 80aa 	bcc.w	800175e <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001610:	d337      	bcc.n	8001682 <utf16_literal_to_utf8+0xd2>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001618:	d233      	bcs.n	8001682 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	3306      	adds	r3, #6
 800161e:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001624:	230c      	movs	r3, #12
 8001626:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b05      	cmp	r3, #5
 8001632:	f340 8096 	ble.w	8001762 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b5c      	cmp	r3, #92	; 0x5c
 800163c:	f040 8093 	bne.w	8001766 <utf16_literal_to_utf8+0x1b6>
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b75      	cmp	r3, #117	; 0x75
 8001648:	f040 808d 	bne.w	8001766 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3302      	adds	r3, #2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff4b 	bl	80014ec <parse_hex4>
 8001656:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800165e:	f0c0 8082 	bcc.w	8001766 <utf16_literal_to_utf8+0x1b6>
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001668:	d27d      	bcs.n	8001766 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	029a      	lsls	r2, r3, #10
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <utf16_literal_to_utf8+0x1c8>)
 8001670:	4013      	ands	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001678:	4313      	orrs	r3, r2
 800167a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001680:	e004      	b.n	800168c <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001682:	2306      	movs	r3, #6
 8001684:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	2b7f      	cmp	r3, #127	; 0x7f
 8001690:	d803      	bhi.n	800169a <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001698:	e01f      	b.n	80016da <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a0:	d206      	bcs.n	80016b0 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	f887 3020 	strb.w	r3, [r7, #32]
 80016ae:	e014      	b.n	80016da <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b6:	d206      	bcs.n	80016c6 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80016be:	23e0      	movs	r3, #224	; 0xe0
 80016c0:	f887 3020 	strb.w	r3, [r7, #32]
 80016c4:	e009      	b.n	80016da <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80016cc:	d24d      	bcs.n	800176a <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80016ce:	2304      	movs	r3, #4
 80016d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80016d4:	23f0      	movs	r3, #240	; 0xf0
 80016d6:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80016da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016de:	3b01      	subs	r3, #1
 80016e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016e4:	e015      	b.n	8001712 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6819      	ldr	r1, [r3, #0]
 80016f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016f8:	440b      	add	r3, r1
 80016fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800170c:	3b01      	subs	r3, #1
 800170e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001712:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e5      	bne.n	80016e6 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800171a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800171e:	2b01      	cmp	r3, #1
 8001720:	d909      	bls.n	8001736 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	b2d9      	uxtb	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800172e:	430a      	orrs	r2, r1
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	e007      	b.n	8001746 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800174e:	441a      	add	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001754:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001758:	e009      	b.n	800176e <utf16_literal_to_utf8+0x1be>
        goto fail;
 800175a:	bf00      	nop
 800175c:	e006      	b.n	800176c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800175e:	bf00      	nop
 8001760:	e004      	b.n	800176c <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8001762:	bf00      	nop
 8001764:	e002      	b.n	800176c <utf16_literal_to_utf8+0x1bc>

fail:
 8001766:	bf00      	nop
 8001768:	e000      	b.n	800176c <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800176a:	bf00      	nop
    return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	000ffc00 	.word	0x000ffc00

0800177c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	3301      	adds	r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	3301      	adds	r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b22      	cmp	r3, #34	; 0x22
 80017b8:	f040 816c 	bne.w	8001a94 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80017c4:	e018      	b.n	80017f8 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b5c      	cmp	r3, #92	; 0x5c
 80017cc:	d111      	bne.n	80017f2 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	3301      	adds	r3, #1
 80017d2:	461a      	mov	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f080 8159 	bcs.w	8001a98 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
                input_end++;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	3301      	adds	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	3301      	adds	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	461a      	mov	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d203      	bcs.n	8001812 <parse_string+0x96>
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b22      	cmp	r3, #34	; 0x22
 8001810:	d1d9      	bne.n	80017c6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	461a      	mov	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	f080 813b 	bcs.w	8001a9c <parse_string+0x320>
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b22      	cmp	r3, #34	; 0x22
 800182c:	f040 8136 	bne.w	8001a9c <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	6811      	ldr	r1, [r2, #0]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	6892      	ldr	r2, [r2, #8]
 800183a:	440a      	add	r2, r1
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	461a      	mov	r2, r3
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	3201      	adds	r2, #1
 800184e:	4610      	mov	r0, r2
 8001850:	4798      	blx	r3
 8001852:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8122 	beq.w	8001aa0 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001860:	e0fc      	b.n	8001a5c <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b5c      	cmp	r3, #92	; 0x5c
 8001868:	d008      	beq.n	800187c <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	1c53      	adds	r3, r2, #1
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1c59      	adds	r1, r3, #1
 8001874:	60f9      	str	r1, [r7, #12]
 8001876:	7812      	ldrb	r2, [r2, #0]
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	e0ef      	b.n	8001a5c <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800187c:	2302      	movs	r3, #2
 800187e:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	f340 810c 	ble.w	8001aa4 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3301      	adds	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	3b22      	subs	r3, #34	; 0x22
 8001894:	2b53      	cmp	r3, #83	; 0x53
 8001896:	f200 8107 	bhi.w	8001aa8 <parse_string+0x32c>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <parse_string+0x124>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	08001a2d 	.word	0x08001a2d
 80018a4:	08001aa9 	.word	0x08001aa9
 80018a8:	08001aa9 	.word	0x08001aa9
 80018ac:	08001aa9 	.word	0x08001aa9
 80018b0:	08001aa9 	.word	0x08001aa9
 80018b4:	08001aa9 	.word	0x08001aa9
 80018b8:	08001aa9 	.word	0x08001aa9
 80018bc:	08001aa9 	.word	0x08001aa9
 80018c0:	08001aa9 	.word	0x08001aa9
 80018c4:	08001aa9 	.word	0x08001aa9
 80018c8:	08001aa9 	.word	0x08001aa9
 80018cc:	08001aa9 	.word	0x08001aa9
 80018d0:	08001aa9 	.word	0x08001aa9
 80018d4:	08001a2d 	.word	0x08001a2d
 80018d8:	08001aa9 	.word	0x08001aa9
 80018dc:	08001aa9 	.word	0x08001aa9
 80018e0:	08001aa9 	.word	0x08001aa9
 80018e4:	08001aa9 	.word	0x08001aa9
 80018e8:	08001aa9 	.word	0x08001aa9
 80018ec:	08001aa9 	.word	0x08001aa9
 80018f0:	08001aa9 	.word	0x08001aa9
 80018f4:	08001aa9 	.word	0x08001aa9
 80018f8:	08001aa9 	.word	0x08001aa9
 80018fc:	08001aa9 	.word	0x08001aa9
 8001900:	08001aa9 	.word	0x08001aa9
 8001904:	08001aa9 	.word	0x08001aa9
 8001908:	08001aa9 	.word	0x08001aa9
 800190c:	08001aa9 	.word	0x08001aa9
 8001910:	08001aa9 	.word	0x08001aa9
 8001914:	08001aa9 	.word	0x08001aa9
 8001918:	08001aa9 	.word	0x08001aa9
 800191c:	08001aa9 	.word	0x08001aa9
 8001920:	08001aa9 	.word	0x08001aa9
 8001924:	08001aa9 	.word	0x08001aa9
 8001928:	08001aa9 	.word	0x08001aa9
 800192c:	08001aa9 	.word	0x08001aa9
 8001930:	08001aa9 	.word	0x08001aa9
 8001934:	08001aa9 	.word	0x08001aa9
 8001938:	08001aa9 	.word	0x08001aa9
 800193c:	08001aa9 	.word	0x08001aa9
 8001940:	08001aa9 	.word	0x08001aa9
 8001944:	08001aa9 	.word	0x08001aa9
 8001948:	08001aa9 	.word	0x08001aa9
 800194c:	08001aa9 	.word	0x08001aa9
 8001950:	08001aa9 	.word	0x08001aa9
 8001954:	08001aa9 	.word	0x08001aa9
 8001958:	08001aa9 	.word	0x08001aa9
 800195c:	08001aa9 	.word	0x08001aa9
 8001960:	08001aa9 	.word	0x08001aa9
 8001964:	08001aa9 	.word	0x08001aa9
 8001968:	08001aa9 	.word	0x08001aa9
 800196c:	08001aa9 	.word	0x08001aa9
 8001970:	08001aa9 	.word	0x08001aa9
 8001974:	08001aa9 	.word	0x08001aa9
 8001978:	08001aa9 	.word	0x08001aa9
 800197c:	08001aa9 	.word	0x08001aa9
 8001980:	08001aa9 	.word	0x08001aa9
 8001984:	08001aa9 	.word	0x08001aa9
 8001988:	08001a2d 	.word	0x08001a2d
 800198c:	08001aa9 	.word	0x08001aa9
 8001990:	08001aa9 	.word	0x08001aa9
 8001994:	08001aa9 	.word	0x08001aa9
 8001998:	08001aa9 	.word	0x08001aa9
 800199c:	08001aa9 	.word	0x08001aa9
 80019a0:	080019f1 	.word	0x080019f1
 80019a4:	08001aa9 	.word	0x08001aa9
 80019a8:	08001aa9 	.word	0x08001aa9
 80019ac:	08001aa9 	.word	0x08001aa9
 80019b0:	080019fd 	.word	0x080019fd
 80019b4:	08001aa9 	.word	0x08001aa9
 80019b8:	08001aa9 	.word	0x08001aa9
 80019bc:	08001aa9 	.word	0x08001aa9
 80019c0:	08001aa9 	.word	0x08001aa9
 80019c4:	08001aa9 	.word	0x08001aa9
 80019c8:	08001aa9 	.word	0x08001aa9
 80019cc:	08001aa9 	.word	0x08001aa9
 80019d0:	08001a09 	.word	0x08001a09
 80019d4:	08001aa9 	.word	0x08001aa9
 80019d8:	08001aa9 	.word	0x08001aa9
 80019dc:	08001aa9 	.word	0x08001aa9
 80019e0:	08001a15 	.word	0x08001a15
 80019e4:	08001aa9 	.word	0x08001aa9
 80019e8:	08001a21 	.word	0x08001a21
 80019ec:	08001a3b 	.word	0x08001a3b
            {
                case 'b':
                    *output_pointer++ = '\b';
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60fa      	str	r2, [r7, #12]
 80019f6:	2208      	movs	r2, #8
 80019f8:	701a      	strb	r2, [r3, #0]
                    break;
 80019fa:	e02b      	b.n	8001a54 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60fa      	str	r2, [r7, #12]
 8001a02:	220c      	movs	r2, #12
 8001a04:	701a      	strb	r2, [r3, #0]
                    break;
 8001a06:	e025      	b.n	8001a54 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60fa      	str	r2, [r7, #12]
 8001a0e:	220a      	movs	r2, #10
 8001a10:	701a      	strb	r2, [r3, #0]
                    break;
 8001a12:	e01f      	b.n	8001a54 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60fa      	str	r2, [r7, #12]
 8001a1a:	220d      	movs	r2, #13
 8001a1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001a1e:	e019      	b.n	8001a54 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	60fa      	str	r2, [r7, #12]
 8001a26:	2209      	movs	r2, #9
 8001a28:	701a      	strb	r2, [r3, #0]
                    break;
 8001a2a:	e013      	b.n	8001a54 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60fa      	str	r2, [r7, #12]
 8001a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a34:	7852      	ldrb	r2, [r2, #1]
 8001a36:	701a      	strb	r2, [r3, #0]
                    break;
 8001a38:	e00c      	b.n	8001a54 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6a39      	ldr	r1, [r7, #32]
 8001a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a44:	f7ff fdb4 	bl	80015b0 <utf16_literal_to_utf8>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d02c      	beq.n	8001aac <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001a52:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	4413      	add	r3, r2
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f4ff aefe 	bcc.w	8001862 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	609a      	str	r2, [r3, #8]

    return true;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e01e      	b.n	8001ad2 <parse_string+0x356>
        goto fail;
 8001a94:	bf00      	nop
 8001a96:	e00a      	b.n	8001aae <parse_string+0x332>
                    goto fail;
 8001a98:	bf00      	nop
 8001a9a:	e008      	b.n	8001aae <parse_string+0x332>

fail:
 8001a9c:	bf00      	nop
 8001a9e:	e006      	b.n	8001aae <parse_string+0x332>
            goto fail; /* allocation failure */
 8001aa0:	bf00      	nop
 8001aa2:	e004      	b.n	8001aae <parse_string+0x332>
                goto fail;
 8001aa4:	bf00      	nop
 8001aa6:	e002      	b.n	8001aae <parse_string+0x332>
                    goto fail;
 8001aa8:	bf00      	nop
 8001aaa:	e000      	b.n	8001aae <parse_string+0x332>
                        goto fail;
 8001aac:	bf00      	nop
    if (output != NULL)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	69f8      	ldr	r0, [r7, #28]
 8001aba:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <buffer_skip_whitespace+0x16>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e02c      	b.n	8001b50 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <buffer_skip_whitespace+0x2c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d306      	bcc.n	8001b16 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	e021      	b.n	8001b50 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00d      	beq.n	8001b38 <buffer_skip_whitespace+0x5c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d207      	bcs.n	8001b38 <buffer_skip_whitespace+0x5c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d9e9      	bls.n	8001b0c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d104      	bne.n	8001b4e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <skip_utf8_bom+0x1e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <skip_utf8_bom+0x1e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <skip_utf8_bom+0x22>
    {
        return NULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e01c      	b.n	8001bb8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d018      	beq.n	8001bb6 <skip_utf8_bom+0x5a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d211      	bcs.n	8001bb6 <skip_utf8_bom+0x5a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <skip_utf8_bom+0x64>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f010 f84a 	bl	8011c3a <strncmp>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d104      	bne.n	8001bb6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	1cda      	adds	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	08014374 	.word	0x08014374

08001bc4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e00c      	b.n	8001bf4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7fe fb22 	bl	8000224 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	6979      	ldr	r1, [r7, #20]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f805 	bl	8001bfc <cJSON_ParseWithLengthOpts>
 8001bf2:	4603      	mov	r3, r0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	; 0x38
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <cJSON_ParseWithLengthOpts+0x128>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001c28:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <cJSON_ParseWithLengthOpts+0x128>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d042      	beq.n	8001cba <cJSON_ParseWithLengthOpts+0xbe>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d03f      	beq.n	8001cba <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001c46:	4a38      	ldr	r2, [pc, #224]	; (8001d28 <cJSON_ParseWithLengthOpts+0x12c>)
 8001c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001c52:	4835      	ldr	r0, [pc, #212]	; (8001d28 <cJSON_ParseWithLengthOpts+0x12c>)
 8001c54:	f7ff fa28 	bl	80010a8 <cJSON_New_Item>
 8001c58:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d02e      	beq.n	8001cbe <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff79 	bl	8001b5c <skip_utf8_bom>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff35 	bl	8001adc <buffer_skip_whitespace>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c78:	f000 f866 	bl	8001d48 <parse_value>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01f      	beq.n	8001cc2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff25 	bl	8001adc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001c92:	6a3a      	ldr	r2, [r7, #32]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d20f      	bcs.n	8001cba <cJSON_ParseWithLengthOpts+0xbe>
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	e02f      	b.n	8001d1a <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001cba:	bf00      	nop
 8001cbc:	e002      	b.n	8001cc4 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001cbe:	bf00      	nop
 8001cc0:	e000      	b.n	8001cc4 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001cc2:	bf00      	nop
    if (item != NULL)
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ccc:	f7ff fa02 	bl	80010d4 <cJSON_Delete>
    }

    if (value != NULL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d020      	beq.n	8001d18 <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d202      	bcs.n	8001cec <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e005      	b.n	8001cf8 <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	441a      	add	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <cJSON_ParseWithLengthOpts+0x128>)
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d14:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3738      	adds	r7, #56	; 0x38
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000214 	.word	0x20000214
 8001d28:	20000000 	.word	0x20000000

08001d2c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff43 	bl	8001bc4 <cJSON_ParseWithOpts>
 8001d3e:	4603      	mov	r3, r0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <parse_value+0x18>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <parse_value+0x1c>
    {
        return false; /* no input */
 8001d60:	2300      	movs	r3, #0
 8001d62:	e0d2      	b.n	8001f0a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01d      	beq.n	8001da6 <parse_value+0x5e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	1d1a      	adds	r2, r3, #4
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d816      	bhi.n	8001da6 <parse_value+0x5e>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	2204      	movs	r2, #4
 8001d84:	4963      	ldr	r1, [pc, #396]	; (8001f14 <parse_value+0x1cc>)
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00f ff57 	bl	8011c3a <strncmp>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	1d1a      	adds	r2, r3, #4
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	609a      	str	r2, [r3, #8]
        return true;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0b1      	b.n	8001f0a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01d      	beq.n	8001de8 <parse_value+0xa0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	1d5a      	adds	r2, r3, #5
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d816      	bhi.n	8001de8 <parse_value+0xa0>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	4954      	ldr	r1, [pc, #336]	; (8001f18 <parse_value+0x1d0>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00f ff36 	bl	8011c3a <strncmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	1d5a      	adds	r2, r3, #5
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	609a      	str	r2, [r3, #8]
        return true;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e090      	b.n	8001f0a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <parse_value+0xe8>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	1d1a      	adds	r2, r3, #4
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d819      	bhi.n	8001e30 <parse_value+0xe8>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	2204      	movs	r2, #4
 8001e08:	4944      	ldr	r1, [pc, #272]	; (8001f1c <parse_value+0x1d4>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00f ff15 	bl	8011c3a <strncmp>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	1d1a      	adds	r2, r3, #4
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	609a      	str	r2, [r3, #8]
        return true;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e06c      	b.n	8001f0a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d013      	beq.n	8001e5e <parse_value+0x116>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d20d      	bcs.n	8001e5e <parse_value+0x116>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b22      	cmp	r3, #34	; 0x22
 8001e50:	d105      	bne.n	8001e5e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001e52:	6839      	ldr	r1, [r7, #0]
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fc91 	bl	800177c <parse_string>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	e055      	b.n	8001f0a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <parse_value+0x164>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d21d      	bcs.n	8001eac <parse_value+0x164>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b2d      	cmp	r3, #45	; 0x2d
 8001e7e:	d00f      	beq.n	8001ea0 <parse_value+0x158>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b2f      	cmp	r3, #47	; 0x2f
 8001e8e:	d90d      	bls.n	8001eac <parse_value+0x164>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b39      	cmp	r3, #57	; 0x39
 8001e9e:	d805      	bhi.n	8001eac <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff f968 	bl	8001178 <parse_number>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	e02e      	b.n	8001f0a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d013      	beq.n	8001eda <parse_value+0x192>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d20d      	bcs.n	8001eda <parse_value+0x192>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b5b      	cmp	r3, #91	; 0x5b
 8001ecc:	d105      	bne.n	8001eda <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f825 	bl	8001f20 <parse_array>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	e017      	b.n	8001f0a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <parse_value+0x1c0>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d20d      	bcs.n	8001f08 <parse_value+0x1c0>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b7b      	cmp	r3, #123	; 0x7b
 8001efa:	d105      	bne.n	8001f08 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001efc:	6839      	ldr	r1, [r7, #0]
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8d2 	bl	80020a8 <parse_object>
 8001f04:	4603      	mov	r3, r0
 8001f06:	e000      	b.n	8001f0a <parse_value+0x1c2>
    }

    return false;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	0801434c 	.word	0x0801434c
 8001f18:	08014378 	.word	0x08014378
 8001f1c:	08014380 	.word	0x08014380

08001f20 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f3a:	d301      	bcc.n	8001f40 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e0af      	b.n	80020a0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b5b      	cmp	r3, #91	; 0x5b
 8001f58:	f040 8094 	bne.w	8002084 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f7ff fdb8 	bl	8001adc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <parse_array+0x6e>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d207      	bcs.n	8001f8e <parse_array+0x6e>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b5d      	cmp	r3, #93	; 0x5d
 8001f8c:	d061      	beq.n	8002052 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <parse_array+0x80>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d305      	bcc.n	8001fac <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	609a      	str	r2, [r3, #8]
        goto fail;
 8001faa:	e072      	b.n	8002092 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	3310      	adds	r3, #16
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f874 	bl	80010a8 <cJSON_New_Item>
 8001fc0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05f      	beq.n	8002088 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e007      	b.n	8001fe8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	f7ff fd72 	bl	8001adc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ff8:	6839      	ldr	r1, [r7, #0]
 8001ffa:	6938      	ldr	r0, [r7, #16]
 8001ffc:	f7ff fea4 	bl	8001d48 <parse_value>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d042      	beq.n	800208c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002006:	6838      	ldr	r0, [r7, #0]
 8002008:	f7ff fd68 	bl	8001adc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <parse_array+0x10e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d207      	bcs.n	800202e <parse_array+0x10e>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b2c      	cmp	r3, #44	; 0x2c
 800202c:	d0c3      	beq.n	8001fb6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d02d      	beq.n	8002090 <parse_array+0x170>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	d227      	bcs.n	8002090 <parse_array+0x170>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b5d      	cmp	r3, #93	; 0x5d
 800204e:	d11f      	bne.n	8002090 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002050:	e000      	b.n	8002054 <parse_array+0x134>
        goto success;
 8002052:	bf00      	nop
    input_buffer->depth--;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <parse_array+0x14a>
        head->prev = current_item;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	609a      	str	r2, [r3, #8]

    return true;
 8002080:	2301      	movs	r3, #1
 8002082:	e00d      	b.n	80020a0 <parse_array+0x180>
        goto fail;
 8002084:	bf00      	nop
 8002086:	e004      	b.n	8002092 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002088:	bf00      	nop
 800208a:	e002      	b.n	8002092 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <parse_array+0x172>

fail:
 8002090:	bf00      	nop
    if (head != NULL)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002098:	6978      	ldr	r0, [r7, #20]
 800209a:	f7ff f81b 	bl	80010d4 <cJSON_Delete>
    }

    return false;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c2:	d301      	bcc.n	80020c8 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80020c4:	2300      	movs	r3, #0
 80020c6:	e0e6      	b.n	8002296 <parse_object+0x1ee>
    }
    input_buffer->depth++;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80d0 	beq.w	800227a <parse_object+0x1d2>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	f080 80c9 	bcs.w	800227a <parse_object+0x1d2>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b7b      	cmp	r3, #123	; 0x7b
 80020f6:	f040 80c0 	bne.w	800227a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002104:	6838      	ldr	r0, [r7, #0]
 8002106:	f7ff fce9 	bl	8001adc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <parse_object+0x86>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	d208      	bcs.n	800212e <parse_object+0x86>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b7d      	cmp	r3, #125	; 0x7d
 800212a:	f000 808d 	beq.w	8002248 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <parse_object+0x98>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d305      	bcc.n	800214c <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	609a      	str	r2, [r3, #8]
        goto fail;
 800214a:	e09d      	b.n	8002288 <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3310      	adds	r3, #16
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ffa4 	bl	80010a8 <cJSON_New_Item>
 8002160:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 808a 	beq.w	800227e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e007      	b.n	800218a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	f7ff fca1 	bl	8001adc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	6938      	ldr	r0, [r7, #16]
 800219e:	f7ff faed 	bl	800177c <parse_string>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d06c      	beq.n	8002282 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f7ff fc97 	bl	8001adc <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d05b      	beq.n	800227a <parse_object+0x1d2>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d255      	bcs.n	800227a <parse_object+0x1d2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b3a      	cmp	r3, #58	; 0x3a
 80021dc:	d14d      	bne.n	800227a <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f7ff fc77 	bl	8001adc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6938      	ldr	r0, [r7, #16]
 80021f2:	f7ff fda9 	bl	8001d48 <parse_value>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d044      	beq.n	8002286 <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80021fc:	6838      	ldr	r0, [r7, #0]
 80021fe:	f7ff fc6d 	bl	8001adc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <parse_object+0x17c>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <parse_object+0x17c>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b2c      	cmp	r3, #44	; 0x2c
 8002222:	d098      	beq.n	8002156 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d027      	beq.n	800227a <parse_object+0x1d2>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d221      	bcs.n	800227a <parse_object+0x1d2>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4413      	add	r3, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b7d      	cmp	r3, #125	; 0x7d
 8002244:	d119      	bne.n	800227a <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 8002246:	e000      	b.n	800224a <parse_object+0x1a2>
        goto success; /* empty object */
 8002248:	bf00      	nop
    input_buffer->depth--;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <parse_object+0x1b8>
        head->prev = current_item;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	609a      	str	r2, [r3, #8]
    return true;
 8002276:	2301      	movs	r3, #1
 8002278:	e00d      	b.n	8002296 <parse_object+0x1ee>

fail:
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <parse_object+0x1e0>
            goto fail; /* allocation failure */
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <parse_object+0x1e0>
            goto fail; /* failed to parse name */
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 8002286:	bf00      	nop
    if (head != NULL)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <parse_object+0x1ec>
    {
        cJSON_Delete(head);
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7fe ff20 	bl	80010d4 <cJSON_Delete>
    }

    return false;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <get_object_item+0x1c>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <get_object_item+0x20>
    {
        return NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e033      	b.n	8002326 <get_object_item+0x88>
    }

    current_element = object->child;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d017      	beq.n	80022fa <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80022ca:	e002      	b.n	80022d2 <get_object_item+0x34>
        {
            current_element = current_element->next;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01c      	beq.n	8002312 <get_object_item+0x74>
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <get_object_item+0x74>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4619      	mov	r1, r3
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	f7fd ff92 	bl	8000210 <strcmp>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ec      	bne.n	80022cc <get_object_item+0x2e>
 80022f2:	e00e      	b.n	8002312 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <get_object_item+0x74>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4619      	mov	r1, r3
 8002306:	68b8      	ldr	r0, [r7, #8]
 8002308:	f7fe fe36 	bl	8000f78 <case_insensitive_strcmp>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <get_object_item+0x82>
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <get_object_item+0x86>
        return NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <get_object_item+0x88>
    }

    return current_element;
 8002324:	697b      	ldr	r3, [r7, #20]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002338:	2201      	movs	r2, #1
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ffae 	bl	800229e <get_object_item>
 8002342:	4603      	mov	r3, r0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	605a      	str	r2, [r3, #4]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <add_item_to_array+0x22>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <add_item_to_array+0x22>
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d101      	bne.n	8002394 <add_item_to_array+0x26>
    {
        return false;
 8002390:	2300      	movs	r3, #0
 8002392:	e02e      	b.n	80023f2 <add_item_to_array+0x84>
    }

    child = array->child;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	609a      	str	r2, [r3, #8]
        item->prev = item;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e01d      	b.n	80023f0 <add_item_to_array+0x82>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <add_item_to_array+0x6a>
        {
            suffix_object(child->prev, item);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ffc2 	bl	800234c <suffix_object>
            array->child->prev = item;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	e00e      	b.n	80023f0 <add_item_to_array+0x82>
        }
        else
        {
            while (child->next)
            {
                child = child->next;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
            while (child->next)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f8      	bne.n	80023d2 <add_item_to_array+0x64>
            }
            suffix_object(child, item);
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff ffb2 	bl	800234c <suffix_object>
            array->child->prev = item;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <add_item_to_object+0x30>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d006      	beq.n	8002440 <add_item_to_object+0x30>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <add_item_to_object+0x30>
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	d101      	bne.n	8002444 <add_item_to_object+0x34>
    {
        return false;
 8002440:	2300      	movs	r3, #0
 8002442:	e036      	b.n	80024b2 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800244a:	68b8      	ldr	r0, [r7, #8]
 800244c:	f7ff ffd5 	bl	80023fa <cast_away_const>
 8002450:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	e00e      	b.n	800247c <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	68b8      	ldr	r0, [r7, #8]
 8002462:	f7fe fdf9 	bl	8001058 <cJSON_strdup>
 8002466:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <add_item_to_object+0x62>
        {
            return false;
 800246e:	2300      	movs	r3, #0
 8002470:	e01f      	b.n	80024b2 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800247a:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <add_item_to_object+0x8c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6a12      	ldr	r2, [r2, #32]
 8002498:	4610      	mov	r0, r2
 800249a:	4798      	blx	r3
    }

    item->string = new_key;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff ff5f 	bl	800236e <add_item_to_array>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 80024ca:	ed97 0b00 	vldr	d0, [r7]
 80024ce:	f000 f81b 	bl	8002508 <cJSON_CreateNumber>
 80024d2:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80024d4:	2300      	movs	r3, #0
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <cJSON_AddNumberToObject+0x44>)
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff ff96 	bl	8002410 <add_item_to_object>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	e003      	b.n	80024f6 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7fe fdf0 	bl	80010d4 <cJSON_Delete>
    return NULL;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000
 8002504:	00000000 	.word	0x00000000

08002508 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002512:	481f      	ldr	r0, [pc, #124]	; (8002590 <cJSON_CreateNumber+0x88>)
 8002514:	f7fe fdc8 	bl	80010a8 <cJSON_New_Item>
 8002518:	60f8      	str	r0, [r7, #12]
    if(item)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02c      	beq.n	800257a <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2208      	movs	r2, #8
 8002524:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	e9d7 3400 	ldrd	r3, r4, [r7]
 800252c:	e9c2 3406 	strd	r3, r4, [r2, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8002530:	a315      	add	r3, pc, #84	; (adr r3, 8002588 <cJSON_CreateNumber+0x80>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800253a:	f7fe fb13 	bl	8000b64 <__aeabi_dcmpge>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800254a:	615a      	str	r2, [r3, #20]
 800254c:	e015      	b.n	800257a <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <cJSON_CreateNumber+0x8c>)
 8002554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002558:	f7fe fafa 	bl	8000b50 <__aeabi_dcmple>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002568:	615a      	str	r2, [r3, #20]
 800256a:	e006      	b.n	800257a <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800256c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002570:	f7fe fb0c 	bl	8000b8c <__aeabi_d2iz>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	f3af 8000 	nop.w
 8002588:	ffc00000 	.word	0xffc00000
 800258c:	41dfffff 	.word	0x41dfffff
 8002590:	20000000 	.word	0x20000000
 8002594:	c1e00000 	.word	0xc1e00000

08002598 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <cJSON_IsNumber+0x12>
    {
        return false;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e007      	b.n	80025ba <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <cJSON_IsString+0x12>
    {
        return false;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e007      	b.n	80025e8 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b10      	cmp	r3, #16
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <cJSON_free+0x18>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000

08002610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
 8002624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <MX_GPIO_Init+0x130>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a45      	ldr	r2, [pc, #276]	; (8002740 <MX_GPIO_Init+0x130>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <MX_GPIO_Init+0x130>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800263e:	4b40      	ldr	r3, [pc, #256]	; (8002740 <MX_GPIO_Init+0x130>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <MX_GPIO_Init+0x130>)
 8002644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <MX_GPIO_Init+0x130>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <MX_GPIO_Init+0x130>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a39      	ldr	r2, [pc, #228]	; (8002740 <MX_GPIO_Init+0x130>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <MX_GPIO_Init+0x130>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b34      	ldr	r3, [pc, #208]	; (8002740 <MX_GPIO_Init+0x130>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <MX_GPIO_Init+0x130>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <MX_GPIO_Init+0x130>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <MX_GPIO_Init+0x130>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <MX_GPIO_Init+0x130>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <MX_GPIO_Init+0x130>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <MX_GPIO_Init+0x130>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a27      	ldr	r2, [pc, #156]	; (8002740 <MX_GPIO_Init+0x130>)
 80026a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b25      	ldr	r3, [pc, #148]	; (8002740 <MX_GPIO_Init+0x130>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80026b6:	2200      	movs	r2, #0
 80026b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80026bc:	4821      	ldr	r0, [pc, #132]	; (8002744 <MX_GPIO_Init+0x134>)
 80026be:	f002 f883 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	4820      	ldr	r0, [pc, #128]	; (8002748 <MX_GPIO_Init+0x138>)
 80026c8:	f002 f87e 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80026cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_GPIO_Init+0x13c>)
 80026d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	481b      	ldr	r0, [pc, #108]	; (8002750 <MX_GPIO_Init+0x140>)
 80026e2:	f001 fec7 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80026e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80026ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	4619      	mov	r1, r3
 80026fe:	4811      	ldr	r0, [pc, #68]	; (8002744 <MX_GPIO_Init+0x134>)
 8002700:	f001 feb8 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002704:	2340      	movs	r3, #64	; 0x40
 8002706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	4619      	mov	r1, r3
 800271a:	480b      	ldr	r0, [pc, #44]	; (8002748 <MX_GPIO_Init+0x138>)
 800271c:	f001 feaa 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_GPIO_Init+0x138>)
 8002734:	f001 fe9e 	bl	8004474 <HAL_GPIO_Init>

}
 8002738:	bf00      	nop
 800273a:	3730      	adds	r7, #48	; 0x30
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400
 8002748:	40021800 	.word	0x40021800
 800274c:	10110000 	.word	0x10110000
 8002750:	40020800 	.word	0x40020800
 8002754:	00000000 	.word	0x00000000

08002758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275e:	f000 fdb0 	bl	80032c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002762:	f000 f85f 	bl	8002824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002766:	f7ff ff53 	bl	8002610 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800276a:	f000 fc83 	bl	8003074 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800276e:	f000 fcf5 	bl	800315c <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8002772:	f004 f919 	bl	80069a8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8002776:	f000 f8ed 	bl	8002954 <tcp_echoserver_init>

  cJSON * root = cJSON_Parse(js);
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <main+0xa8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fad4 	bl	8001d2c <cJSON_Parse>
 8002784:	60f8      	str	r0, [r7, #12]

  cJSON *format = cJSON_GetObjectItemCaseSensitive(root, "user");
 8002786:	491f      	ldr	r1, [pc, #124]	; (8002804 <main+0xac>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fdd0 	bl	800232e <cJSON_GetObjectItemCaseSensitive>
 800278e:	60b8      	str	r0, [r7, #8]
  cJSON *format1 = cJSON_GetObjectItemCaseSensitive(root, "admin");
 8002790:	491d      	ldr	r1, [pc, #116]	; (8002808 <main+0xb0>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fdcb 	bl	800232e <cJSON_GetObjectItemCaseSensitive>
 8002798:	6078      	str	r0, [r7, #4]
 dd= cJSON_GetStringValue(format);
 800279a:	68b8      	ldr	r0, [r7, #8]
 800279c:	f7fe fbbe 	bl	8000f1c <cJSON_GetStringValue>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <main+0xb4>)
 80027a4:	601a      	str	r2, [r3, #0]
 e = cJSON_GetNumberValue(format1);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fbca 	bl	8000f40 <cJSON_GetNumberValue>
 80027ac:	eeb0 7a40 	vmov.f32	s14, s0
 80027b0:	eef0 7a60 	vmov.f32	s15, s1
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <main+0xb8>)
 80027b6:	ed83 7b00 	vstr	d7, [r3]
 cJSON_SetValuestring(format, "sdff");
 80027ba:	4916      	ldr	r1, [pc, #88]	; (8002814 <main+0xbc>)
 80027bc:	68b8      	ldr	r0, [r7, #8]
 80027be:	f7fe fe4d 	bl	800145c <cJSON_SetValuestring>
 cJSON_SetNumberHelper(format1, 56);
 80027c2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80027f0 <main+0x98>
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fe06 	bl	80013d8 <cJSON_SetNumberHelper>
 cJSON_AddNumberToObject(root, "test", 345);
 80027cc:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80027f8 <main+0xa0>
 80027d0:	4911      	ldr	r1, [pc, #68]	; (8002818 <main+0xc0>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7ff fe72 	bl	80024bc <cJSON_AddNumberToObject>



 rendered = cJSON_GetStringValue(root);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7fe fb9f 	bl	8000f1c <cJSON_GetStringValue>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <main+0xc4>)
 80027e2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 80027e4:	480e      	ldr	r0, [pc, #56]	; (8002820 <main+0xc8>)
 80027e6:	f004 fcbb 	bl	8007160 <ethernetif_input>
	      sys_check_timeouts();
 80027ea:	f00c fba3 	bl	800ef34 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80027ee:	e7f9      	b.n	80027e4 <main+0x8c>
 80027f0:	00000000 	.word	0x00000000
 80027f4:	404c0000 	.word	0x404c0000
 80027f8:	00000000 	.word	0x00000000
 80027fc:	40759000 	.word	0x40759000
 8002800:	2000000c 	.word	0x2000000c
 8002804:	080143a8 	.word	0x080143a8
 8002808:	080143b0 	.word	0x080143b0
 800280c:	2000021c 	.word	0x2000021c
 8002810:	200004a8 	.word	0x200004a8
 8002814:	080143b8 	.word	0x080143b8
 8002818:	080143c0 	.word	0x080143c0
 800281c:	200004b0 	.word	0x200004b0
 8002820:	20000940 	.word	0x20000940

08002824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0b4      	sub	sp, #208	; 0xd0
 8002828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800282e:	2230      	movs	r2, #48	; 0x30
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f00f f8a2 	bl	801197c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002838:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	2284      	movs	r2, #132	; 0x84
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f00f f893 	bl	801197c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002856:	f002 f919 	bl	8004a8c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <SystemClock_Config+0x114>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a36      	ldr	r2, [pc, #216]	; (8002938 <SystemClock_Config+0x114>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <SystemClock_Config+0x114>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <SystemClock_Config+0x118>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <SystemClock_Config+0x118>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <SystemClock_Config+0x118>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800288e:	2301      	movs	r3, #1
 8002890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028aa:	2304      	movs	r3, #4
 80028ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80028b0:	2348      	movs	r3, #72	; 0x48
 80028b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028b6:	2302      	movs	r3, #2
 80028b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80028bc:	2303      	movs	r3, #3
 80028be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 f8f0 	bl	8004aac <HAL_RCC_OscConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80028d2:	f000 f837 	bl	8002944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d6:	230f      	movs	r3, #15
 80028d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fb79 	bl	8004ff4 <HAL_RCC_ClockConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002908:	f000 f81c 	bl	8002944 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <SystemClock_Config+0x11c>)
 800290e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002910:	2300      	movs	r3, #0
 8002912:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002914:	2300      	movs	r3, #0
 8002916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fd60 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800292a:	f000 f80b 	bl	8002944 <Error_Handler>
  }
}
 800292e:	bf00      	nop
 8002930:	37d0      	adds	r7, #208	; 0xd0
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	00200100 	.word	0x00200100

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <tcp_echoserver_init>:
 * @brief: Init echo server
 * @param: none
 * @ret: none
 */
void tcp_echoserver_init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Create new connection control block */
  tcp_echoserver_pcb = tcp_new();
 8002958:	f007 fd2e 	bl	800a3b8 <tcp_new>
 800295c:	4602      	mov	r2, r0
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <tcp_echoserver_init+0x5c>)
 8002960:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <tcp_echoserver_init+0x5c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <tcp_echoserver_init+0x58>
  {
    if (tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, SERVER_TCP_PORT) == ERR_OK)
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <tcp_echoserver_init+0x5c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f640 5205 	movw	r2, #3333	; 0xd05
 8002972:	4910      	ldr	r1, [pc, #64]	; (80029b4 <tcp_echoserver_init+0x60>)
 8002974:	4618      	mov	r0, r3
 8002976:	f006 fc7f 	bl	8009278 <tcp_bind>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10f      	bne.n	80029a0 <tcp_echoserver_init+0x4c>
    {
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <tcp_echoserver_init+0x5c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	21ff      	movs	r1, #255	; 0xff
 8002986:	4618      	mov	r0, r3
 8002988:	f006 fd2e 	bl	80093e8 <tcp_listen_with_backlog>
 800298c:	4602      	mov	r2, r0
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <tcp_echoserver_init+0x5c>)
 8002990:	601a      	str	r2, [r3, #0]
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <tcp_echoserver_init+0x5c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4908      	ldr	r1, [pc, #32]	; (80029b8 <tcp_echoserver_init+0x64>)
 8002998:	4618      	mov	r0, r3
 800299a:	f007 fd8d 	bl	800a4b8 <tcp_accept>
    {
      /* Set selected element free, clear all settings for it */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 800299e:	e005      	b.n	80029ac <tcp_echoserver_init+0x58>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <tcp_echoserver_init+0x5c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	2001      	movs	r0, #1
 80029a8:	f005 f8d0 	bl	8007b4c <memp_free>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000220 	.word	0x20000220
 80029b4:	08016f04 	.word	0x08016f04
 80029b8:	080029bd 	.word	0x080029bd

080029bc <tcp_echoserver_accept>:
 * @param  newpcb: pointer to new made connection
 * @param  err: not used
 * @retval err_t: error status
 */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	71fb      	strb	r3, [r7, #7]
  /* Unused arguments to prevent warnings */
  (void)arg;
  (void)err;

  /* Set priority for new connection */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80029ca:	2101      	movs	r1, #1
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f007 fb01 	bl	8009fd4 <tcp_setprio>

  /* allocate structure with info about tcp connection */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80029d2:	200c      	movs	r0, #12
 80029d4:	f004 ff00 	bl	80077d8 <mem_malloc>
 80029d8:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01f      	beq.n	8002a20 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2200      	movs	r2, #0
 80029f0:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]

    /* Pass structure data do new connection */
    tcp_arg(newpcb, es);
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	68b8      	ldr	r0, [r7, #8]
 80029fc:	f007 fce4 	bl	800a3c8 <tcp_arg>

    /* prepare to receive data */
    tcp_recv(newpcb, tcp_echoserver_recv);
 8002a00:	490d      	ldr	r1, [pc, #52]	; (8002a38 <tcp_echoserver_accept+0x7c>)
 8002a02:	68b8      	ldr	r0, [r7, #8]
 8002a04:	f007 fcf2 	bl	800a3ec <tcp_recv>

    /* if error ocure then tha t callback will be */
    tcp_err(newpcb, tcp_echoserver_error);
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <tcp_echoserver_accept+0x80>)
 8002a0a:	68b8      	ldr	r0, [r7, #8]
 8002a0c:	f007 fd32 	bl	800a474 <tcp_err>

    /* waits for connection */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	490b      	ldr	r1, [pc, #44]	; (8002a40 <tcp_echoserver_accept+0x84>)
 8002a14:	68b8      	ldr	r0, [r7, #8]
 8002a16:	f007 fd67 	bl	800a4e8 <tcp_poll>

    ret_err = ERR_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
 8002a1e:	e005      	b.n	8002a2c <tcp_echoserver_accept+0x70>
  }
  else
  {
    /* Close connection */
    tcp_echoserver_connection_close(newpcb, es);
 8002a20:	6939      	ldr	r1, [r7, #16]
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	f000 f9fa 	bl	8002e1c <tcp_echoserver_connection_close>
    /* return error */
    ret_err = ERR_MEM;
 8002a28:	23ff      	movs	r3, #255	; 0xff
 8002a2a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8002a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	08002a45 	.word	0x08002a45
 8002a3c:	08002bb9 	.word	0x08002bb9
 8002a40:	08002bdd 	.word	0x08002bdd

08002a44 <tcp_echoserver_recv>:
 * @param  tpcb: pointer to connection data
 * @param  p: pointer to buffer that conteins data
 * @retval err_t: error status
 */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  ed=es;
 8002a52:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <tcp_echoserver_recv+0x15c>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6013      	str	r3, [r2, #0]
  err_t ret_err;
  uint16_t i;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <tcp_echoserver_recv+0x26>
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <tcp_echoserver_recv+0x160>)
 8002a60:	22a6      	movs	r2, #166	; 0xa6
 8002a62:	4951      	ldr	r1, [pc, #324]	; (8002ba8 <tcp_echoserver_recv+0x164>)
 8002a64:	4851      	ldr	r0, [pc, #324]	; (8002bac <tcp_echoserver_recv+0x168>)
 8002a66:	f00f f839 	bl	8011adc <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]

  /* If buffer is empty */
  if (p == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <tcp_echoserver_recv+0x5e>
  {
    /* Close connection */
    es->state = ES_CLOSING;
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2203      	movs	r2, #3
 8002a78:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <tcp_echoserver_recv+0x48>
    {
       /* Close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	68b8      	ldr	r0, [r7, #8]
 8002a86:	f000 f9c9 	bl	8002e1c <tcp_echoserver_connection_close>
 8002a8a:	e007      	b.n	8002a9c <tcp_echoserver_recv+0x58>
    }
    else
    {
      /* Callback function used when data was received */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8002a8c:	4948      	ldr	r1, [pc, #288]	; (8002bb0 <tcp_echoserver_recv+0x16c>)
 8002a8e:	68b8      	ldr	r0, [r7, #8]
 8002a90:	f007 fcce 	bl	800a430 <tcp_sent>

      /* Send data back to server */
      tcp_echoserver_send(tpcb, es);
 8002a94:	69b9      	ldr	r1, [r7, #24]
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f000 f8f8 	bl	8002c8c <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e078      	b.n	8002b94 <tcp_echoserver_recv+0x150>
  }
  else if(err != ERR_OK)
 8002aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <tcp_echoserver_recv+0x7e>
  {
	/* Error occure, clear buffer  */
    if (p != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <tcp_echoserver_recv+0x78>
    {
      es->p = NULL;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f005 fe42 	bl	8008740 <pbuf_free>
    }
    ret_err = err;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e068      	b.n	8002b94 <tcp_echoserver_recv+0x150>
  }
  else if(es->state == ES_ACCEPTED)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d123      	bne.n	8002b12 <tcp_echoserver_recv+0xce>
  {
	/* connection accept, first data received, chunk in p->payload */
    es->state = ES_RECEIVED;
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]

    /* write data to structuce*/
    es->p = p;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]


    for(i=0;i<sizze;i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	83bb      	strh	r3, [r7, #28]
 8002ada:	e006      	b.n	8002aea <tcp_echoserver_recv+0xa6>
    	dane1[i]=0;
 8002adc:	8bbb      	ldrh	r3, [r7, #28]
 8002ade:	4a35      	ldr	r2, [pc, #212]	; (8002bb4 <tcp_echoserver_recv+0x170>)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<sizze;i++)
 8002ae4:	8bbb      	ldrh	r3, [r7, #28]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	83bb      	strh	r3, [r7, #28]
 8002aea:	8bbb      	ldrh	r3, [r7, #28]
 8002aec:	2bff      	cmp	r3, #255	; 0xff
 8002aee:	d9f5      	bls.n	8002adc <tcp_echoserver_recv+0x98>


    sprintf(dane1, "%s",(char *)p->payload);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4619      	mov	r1, r3
 8002af6:	482f      	ldr	r0, [pc, #188]	; (8002bb4 <tcp_echoserver_recv+0x170>)
 8002af8:	f00f f897 	bl	8011c2a <strcpy>



    tcp_sent(tpcb, tcp_echoserver_sent);
 8002afc:	492c      	ldr	r1, [pc, #176]	; (8002bb0 <tcp_echoserver_recv+0x16c>)
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f007 fc96 	bl	800a430 <tcp_sent>

    /* Send data */
    tcp_echoserver_send(tpcb, es);
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	68b8      	ldr	r0, [r7, #8]
 8002b08:	f000 f8c0 	bl	8002c8c <tcp_echoserver_send>

    ret_err = ERR_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e040      	b.n	8002b94 <tcp_echoserver_recv+0x150>
  }
  else if (es->state == ES_RECEIVED)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d11b      	bne.n	8002b52 <tcp_echoserver_recv+0x10e>
  {
	/* All data received */
    if(es->p == NULL)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <tcp_echoserver_recv+0xfa>
    {
      es->p = p;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]



      sprintf(dane1, "%s",(char *)p->payload);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4821      	ldr	r0, [pc, #132]	; (8002bb4 <tcp_echoserver_recv+0x170>)
 8002b30:	f00f f87b 	bl	8011c2a <strcpy>

      tcp_echoserver_send(tpcb, es);
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f000 f8a8 	bl	8002c8c <tcp_echoserver_send>
 8002b3c:	e006      	b.n	8002b4c <tcp_echoserver_recv+0x108>
    else
    {
      struct pbuf *ptr;

      /* chain two to the end of what we recv'ed previously */
      ptr = es->p;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6978      	ldr	r0, [r7, #20]
 8002b48:	f005 ff12 	bl	8008970 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e020      	b.n	8002b94 <tcp_echoserver_recv+0x150>
  }
  else if(es->state == ES_CLOSING)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d10e      	bne.n	8002b78 <tcp_echoserver_recv+0x134>
  {
    //odd case, remote side closing twice, free all trash data
    tcp_recved(tpcb, p->tot_len);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	891b      	ldrh	r3, [r3, #8]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68b8      	ldr	r0, [r7, #8]
 8002b62:	f006 fd57 	bl	8009614 <tcp_recved>
    es->p = NULL;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f005 fde7 	bl	8008740 <pbuf_free>
    ret_err = ERR_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e00d      	b.n	8002b94 <tcp_echoserver_recv+0x150>
  }
  else
  {
    //unkown es->state, trash data
    tcp_recved(tpcb, p->tot_len);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	891b      	ldrh	r3, [r3, #8]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f006 fd48 	bl	8009614 <tcp_recved>
    es->p = NULL;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f005 fdd8 	bl	8008740 <pbuf_free>
    ret_err = ERR_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8002b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200004a0 	.word	0x200004a0
 8002ba4:	080143e4 	.word	0x080143e4
 8002ba8:	08014408 	.word	0x08014408
 8002bac:	08014414 	.word	0x08014414
 8002bb0:	08002c3d 	.word	0x08002c3d
 8002bb4:	200003a0 	.word	0x200003a0

08002bb8 <tcp_echoserver_error>:
 * @param  arg: pass structure data
 * @param  err: not used
 * @retval none
 */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  (void)err;

  es = (struct tcp_echoserver_struct *)arg;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <tcp_echoserver_error+0x1c>
  {
    /* free structure */
    mem_free(es);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f004 fc9c 	bl	800750c <mem_free>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <tcp_echoserver_poll>:
 * @param  arg: pass structure data
 * @param  tcp_pcb: pointer to data structure
 * @retval err_t: error status
 */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;


  es = (struct tcp_echoserver_struct *)arg;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8002bf8:	490f      	ldr	r1, [pc, #60]	; (8002c38 <tcp_echoserver_poll+0x5c>)
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f007 fc18 	bl	800a430 <tcp_sent>
      /* There is data in pbuf, chain try to send it */
      tcp_echoserver_send(tpcb, es);
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6838      	ldr	r0, [r7, #0]
 8002c04:	f000 f842 	bl	8002c8c <tcp_echoserver_send>
 8002c08:	e007      	b.n	8002c1a <tcp_echoserver_poll+0x3e>
    }
    else
    {
       /* No data in chain */
      if(es->state == ES_CLOSING)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d103      	bne.n	8002c1a <tcp_echoserver_poll+0x3e>
      {
        /* Close connection */
        tcp_echoserver_connection_close(tpcb, es);
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	6838      	ldr	r0, [r7, #0]
 8002c16:	f000 f901 	bl	8002e1c <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	e004      	b.n	8002c2a <tcp_echoserver_poll+0x4e>
  }
  else
  {
	/* Aborts the connection by sending a RST (reset) segment to the remote host */
    tcp_abort(tpcb);
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f006 fb1d 	bl	8009260 <tcp_abort>
    ret_err = ERR_ABRT;
 8002c26:	23f3      	movs	r3, #243	; 0xf3
 8002c28:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	08002c3d 	.word	0x08002c3d

08002c3c <tcp_echoserver_sent>:
 * @param  tcp_pcb: pointer to data structure
 * @param  len: data length
 * @retval err_t: error status
 */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  (void)len;

  es = (struct tcp_echoserver_struct *)arg;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <tcp_echoserver_sent+0x32>
  {
    /* data still in buffer */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8002c5c:	490a      	ldr	r1, [pc, #40]	; (8002c88 <tcp_echoserver_sent+0x4c>)
 8002c5e:	68b8      	ldr	r0, [r7, #8]
 8002c60:	f007 fbe6 	bl	800a430 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	68b8      	ldr	r0, [r7, #8]
 8002c68:	f000 f810 	bl	8002c8c <tcp_echoserver_send>
 8002c6c:	e007      	b.n	8002c7e <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* No data to send close connection */
    if(es->state == ES_CLOSING)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d103      	bne.n	8002c7e <tcp_echoserver_sent+0x42>
    {
      tcp_echoserver_connection_close(tpcb, es);
 8002c76:	6979      	ldr	r1, [r7, #20]
 8002c78:	68b8      	ldr	r0, [r7, #8]
 8002c7a:	f000 f8cf 	bl	8002e1c <tcp_echoserver_connection_close>
    }
  }
  return ERR_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	08002c3d 	.word	0x08002c3d

08002c8c <tcp_echoserver_send>:
 * @retval err_t: error status
 */

#define USART_COPY 1
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	6018      	str	r0, [r3, #0]
 8002c98:	463b      	mov	r3, r7
 8002c9a:	6019      	str	r1, [r3, #0]
  struct pbuf *ptr;

#if USART_COPY == 1
  char dane[256] = {0};
 8002c9c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f00e fe67 	bl	801197c <memset>
  char buffer[256] = {0};
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f00e fe5e 	bl	801197c <memset>
#endif

  err_t wr_err = ERR_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

  /* tcp_sndbuf - returns number of bytes in space that is avaliable in output queue */
  while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 8002cc6:	e08e      	b.n	8002de6 <tcp_echoserver_send+0x15a>
  {
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8002cc8:	463b      	mov	r3, r7
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

#if USART_COPY == 1
    sprintf(dane, "%s",(char *)ptr->payload);
 8002cd2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00e ffa3 	bl	8011c2a <strcpy>
    for(uint8_t i = 0; i<ptr->len; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 8002cea:	e00e      	b.n	8002d0a <tcp_echoserver_send+0x7e>
    {
    	buffer[i] = dane[i];
 8002cec:	f897 2216 	ldrb.w	r2, [r7, #534]	; 0x216
 8002cf0:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002cf4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002cf8:	5c89      	ldrb	r1, [r1, r2]
 8002cfa:	f107 020c 	add.w	r2, r7, #12
 8002cfe:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i<ptr->len; i++)
 8002d00:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002d04:	3301      	adds	r3, #1
 8002d06:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 8002d0a:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002d14:	895b      	ldrh	r3, [r3, #10]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3e8      	bcc.n	8002cec <tcp_echoserver_send+0x60>
    }

    /* Close connection */
    if(buffer[0] == 'E' && buffer[1] == 'N' && buffer[2] == 'D') {
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b45      	cmp	r3, #69	; 0x45
 8002d22:	d10f      	bne.n	8002d44 <tcp_echoserver_send+0xb8>
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	785b      	ldrb	r3, [r3, #1]
 8002d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8002d2c:	d10a      	bne.n	8002d44 <tcp_echoserver_send+0xb8>
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	789b      	ldrb	r3, [r3, #2]
 8002d34:	2b44      	cmp	r3, #68	; 0x44
 8002d36:	d105      	bne.n	8002d44 <tcp_echoserver_send+0xb8>
    	tcp_echoserver_connection_close(tpcb, es);
 8002d38:	463a      	mov	r2, r7
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	6811      	ldr	r1, [r2, #0]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	f000 f86c 	bl	8002e1c <tcp_echoserver_connection_close>
    }
#endif

    //wr_err = tcp_write(tpcb, buffereth, strlen(buffereth), 1);
    //wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
    wr_err = tcp_write(tpcb, rendered, strlen(rendered), 1);
 8002d44:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <tcp_echoserver_send+0x18c>)
 8002d46:	681c      	ldr	r4, [r3, #0]
 8002d48:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <tcp_echoserver_send+0x18c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fa69 	bl	8000224 <strlen>
 8002d52:	4603      	mov	r3, r0
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	1d38      	adds	r0, r7, #4
 8002d58:	2301      	movs	r3, #1
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	6800      	ldr	r0, [r0, #0]
 8002d5e:	f00a fa6f 	bl	800d240 <tcp_write>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

    /* Clear data */
    memset(dane, 0x00, sizeof(dane));
 8002d68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f00e fe02 	bl	801197c <memset>

    if (wr_err == ERR_OK)
 8002d78:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d128      	bne.n	8002dd2 <tcp_echoserver_send+0x146>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8002d80:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002d84:	895b      	ldrh	r3, [r3, #10]
 8002d86:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8002d8a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	463b      	mov	r3, r7
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8002d96:	463b      	mov	r3, r7
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <tcp_echoserver_send+0x120>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8002da0:	463b      	mov	r3, r7
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f005 fd6a 	bl	8008880 <pbuf_ref>

      /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8002dac:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 8002db0:	f005 fcc6 	bl	8008740 <pbuf_free>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
      }
      while(freed == 0);
 8002dba:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f4      	beq.n	8002dac <tcp_echoserver_send+0x120>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8002dc2:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	4611      	mov	r1, r2
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	f006 fc22 	bl	8009614 <tcp_recved>
 8002dd0:	e009      	b.n	8002de6 <tcp_echoserver_send+0x15a>
   }
   else if(wr_err == ERR_MEM)
 8002dd2:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d104      	bne.n	8002de6 <tcp_echoserver_send+0x15a>
   {
     /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8002ddc:	463b      	mov	r3, r7
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002de4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 8002de6:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <tcp_echoserver_send+0x182>
 8002dee:	463b      	mov	r3, r7
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <tcp_echoserver_send+0x182>
 8002df8:	463b      	mov	r3, r7
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	895a      	ldrh	r2, [r3, #10]
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f67f af5d 	bls.w	8002cc8 <tcp_echoserver_send+0x3c>
   }
   else { }
  }
}
 8002e0e:	bf00      	nop
 8002e10:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	200004b0 	.word	0x200004b0

08002e1c <tcp_echoserver_connection_close>:
 * @param  *es: struct with data
 * @retval none
 */

static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  //remove all callbacks
  tcp_arg(tpcb, NULL);
 8002e26:	2100      	movs	r1, #0
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f007 facd 	bl	800a3c8 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8002e2e:	2100      	movs	r1, #0
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f007 fafd 	bl	800a430 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8002e36:	2100      	movs	r1, #0
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f007 fad7 	bl	800a3ec <tcp_recv>
  tcp_err(tpcb, NULL);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f007 fb17 	bl	800a474 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f007 fb4c 	bl	800a4e8 <tcp_poll>

  /* free structure */
  if (es != NULL)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8002e56:	6838      	ldr	r0, [r7, #0]
 8002e58:	f004 fb58 	bl	800750c <mem_free>
  }

  /* Connection close */
  tcp_close(tpcb);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f006 f915 	bl	800908c <tcp_close>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_MspInit+0x44>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800

08002eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 fa18 	bl	800333c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e00a      	b.n	8002f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f22:	f3af 8000 	nop.w
 8002f26:	4601      	mov	r1, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	b2ca      	uxtb	r2, r1
 8002f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbf0      	blt.n	8002f22 <_read+0x12>
	}

return len;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e009      	b.n	8002f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf1      	blt.n	8002f5c <_write+0x12>
	}
	return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_close>:

int _close(int file)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
	return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002faa:	605a      	str	r2, [r3, #4]
	return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <_isatty>:

int _isatty(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <_sbrk+0x50>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x16>
		heap_end = &end;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <_sbrk+0x50>)
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <_sbrk+0x54>)
 8003000:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <_sbrk+0x50>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <_sbrk+0x50>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	466a      	mov	r2, sp
 8003012:	4293      	cmp	r3, r2
 8003014:	d905      	bls.n	8003022 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <_sbrk+0x58>)
 8003018:	220c      	movs	r2, #12
 800301a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	e006      	b.n	8003030 <_sbrk+0x44>
	}

	heap_end += incr;
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <_sbrk+0x50>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <_sbrk+0x50>)
 800302c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800302e:	68fb      	ldr	r3, [r7, #12]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	20000224 	.word	0x20000224
 8003040:	20006fd0 	.word	0x20006fd0
 8003044:	20006fcc 	.word	0x20006fcc

08003048 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <SystemInit+0x28>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <SystemInit+0x28>)
 8003054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SystemInit+0x28>)
 800305e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003062:	609a      	str	r2, [r3, #8]
#endif
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <MX_USART3_UART_Init+0x58>)
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <MX_USART3_UART_Init+0x5c>)
 800307c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <MX_USART3_UART_Init+0x58>)
 8003080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003084:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <MX_USART3_UART_Init+0x58>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <MX_USART3_UART_Init+0x58>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <MX_USART3_UART_Init+0x58>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <MX_USART3_UART_Init+0x58>)
 800309a:	220c      	movs	r2, #12
 800309c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <MX_USART3_UART_Init+0x58>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <MX_USART3_UART_Init+0x58>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <MX_USART3_UART_Init+0x58>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <MX_USART3_UART_Init+0x58>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030b6:	4805      	ldr	r0, [pc, #20]	; (80030cc <MX_USART3_UART_Init+0x58>)
 80030b8:	f002 fd82 	bl	8005bc0 <HAL_UART_Init>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030c2:	f7ff fc3f 	bl	8002944 <Error_Handler>
  }

}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200004b4 	.word	0x200004b4
 80030d0:	40004800 	.word	0x40004800

080030d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	; (8003150 <HAL_UART_MspInit+0x7c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d128      	bne.n	8003148 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_UART_MspInit+0x80>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_UART_MspInit+0x80>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_UART_MspInit+0x80>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_UART_MspInit+0x80>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_UART_MspInit+0x80>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_UART_MspInit+0x80>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003138:	2307      	movs	r3, #7
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <HAL_UART_MspInit+0x84>)
 8003144:	f001 f996 	bl	8004474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40004800 	.word	0x40004800
 8003154:	40023800 	.word	0x40023800
 8003158:	40020c00 	.word	0x40020c00

0800315c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003166:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316a:	2206      	movs	r2, #6
 800316c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003170:	2202      	movs	r2, #2
 8003172:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800317c:	2202      	movs	r2, #2
 800317e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003182:	2201      	movs	r2, #1
 8003184:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800318e:	2200      	movs	r2, #0
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003194:	2201      	movs	r2, #1
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031a0:	f001 fb2b 	bl	80047fa <HAL_PCD_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031aa:	f7ff fbcb 	bl	8002944 <Error_Handler>
  }

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000534 	.word	0x20000534

080031b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d8:	d141      	bne.n	800325e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80031f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80031f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003204:	230a      	movs	r3, #10
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4817      	ldr	r0, [pc, #92]	; (800326c <HAL_PCD_MspInit+0xb4>)
 8003210:	f001 f930 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4619      	mov	r1, r3
 8003228:	4810      	ldr	r0, [pc, #64]	; (800326c <HAL_PCD_MspInit+0xb4>)
 800322a:	f001 f923 	bl	8004474 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	6353      	str	r3, [r2, #52]	; 0x34
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_PCD_MspInit+0xb0>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800325e:	bf00      	nop
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40020000 	.word	0x40020000

08003270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003274:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003276:	e003      	b.n	8003280 <LoopCopyDataInit>

08003278 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800327a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800327c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800327e:	3104      	adds	r1, #4

08003280 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003280:	480b      	ldr	r0, [pc, #44]	; (80032b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003284:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003286:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003288:	d3f6      	bcc.n	8003278 <CopyDataInit>
  ldr  r2, =_sbss
 800328a:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800328c:	e002      	b.n	8003294 <LoopFillZerobss>

0800328e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800328e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003290:	f842 3b04 	str.w	r3, [r2], #4

08003294 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003296:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003298:	d3f9      	bcc.n	800328e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800329a:	f7ff fed5 	bl	8003048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800329e:	f00e faff 	bl	80118a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a2:	f7ff fa59 	bl	8002758 <main>
  bx  lr    
 80032a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032a8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80032ac:	08017230 	.word	0x08017230
  ldr  r0, =_sdata
 80032b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032b4:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80032b8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80032bc:	20006fd0 	.word	0x20006fd0

080032c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC_IRQHandler>

080032c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f000 f92c 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032cc:	2000      	movs	r0, #0
 80032ce:	f000 f805 	bl	80032dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032d2:	f7ff fdcb 	bl	8002e6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_InitTick+0x54>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x58>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f939 	bl	8003572 <HAL_SYSTICK_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00e      	b.n	8003328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d80a      	bhi.n	8003326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f000 f90f 	bl	800353a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800331c:	4a06      	ldr	r2, [pc, #24]	; (8003338 <HAL_InitTick+0x5c>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000010 	.word	0x20000010
 8003334:	20000018 	.word	0x20000018
 8003338:	20000014 	.word	0x20000014

0800333c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_IncTick+0x20>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x24>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4413      	add	r3, r2
 800334c:	4a04      	ldr	r2, [pc, #16]	; (8003360 <HAL_IncTick+0x24>)
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000018 	.word	0x20000018
 8003360:	20000938 	.word	0x20000938

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000938 	.word	0x20000938

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d005      	beq.n	80033a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_Delay+0x40>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a2:	bf00      	nop
 80033a4:	f7ff ffde 	bl	8003364 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d8f7      	bhi.n	80033a4 <HAL_Delay+0x28>
  {
  }
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000018 	.word	0x20000018

080033c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <__NVIC_SetPriorityGrouping+0x40>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <__NVIC_SetPriorityGrouping+0x40>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00
 8003404:	05fa0000 	.word	0x05fa0000

08003408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff47 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff5c 	bl	8003408 <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff8e 	bl	8003478 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffb0 	bl	80034e0 <SysTick_Config>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800359c:	4ba9      	ldr	r3, [pc, #676]	; (8003844 <HAL_ETH_Init+0x2b8>)
 800359e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e183      	b.n	80038ba <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f003 fb1a 	bl	8006c00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_ETH_Init+0x2bc>)
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	4a9d      	ldr	r2, [pc, #628]	; (8003848 <HAL_ETH_Init+0x2bc>)
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d6:	6453      	str	r3, [r2, #68]	; 0x44
 80035d8:	4b9b      	ldr	r3, [pc, #620]	; (8003848 <HAL_ETH_Init+0x2bc>)
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80035e4:	4b99      	ldr	r3, [pc, #612]	; (800384c <HAL_ETH_Init+0x2c0>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a98      	ldr	r2, [pc, #608]	; (800384c <HAL_ETH_Init+0x2c0>)
 80035ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80035f0:	4b96      	ldr	r3, [pc, #600]	; (800384c <HAL_ETH_Init+0x2c0>)
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4994      	ldr	r1, [pc, #592]	; (800384c <HAL_ETH_Init+0x2c0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003614:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003616:	f7ff fea5 	bl	8003364 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800361c:	e011      	b.n	8003642 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800361e:	f7ff fea1 	bl	8003364 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800362c:	d909      	bls.n	8003642 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2203      	movs	r2, #3
 8003632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e13b      	b.n	80038ba <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e4      	bne.n	800361e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f023 031c 	bic.w	r3, r3, #28
 8003662:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003664:	f001 fe8a 	bl	800537c <HAL_RCC_GetHCLKFreq>
 8003668:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4a78      	ldr	r2, [pc, #480]	; (8003850 <HAL_ETH_Init+0x2c4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d908      	bls.n	8003684 <HAL_ETH_Init+0xf8>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4a77      	ldr	r2, [pc, #476]	; (8003854 <HAL_ETH_Init+0x2c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d804      	bhi.n	8003684 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e027      	b.n	80036d4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	4a73      	ldr	r2, [pc, #460]	; (8003854 <HAL_ETH_Init+0x2c8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d908      	bls.n	800369e <HAL_ETH_Init+0x112>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	4a72      	ldr	r2, [pc, #456]	; (8003858 <HAL_ETH_Init+0x2cc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d804      	bhi.n	800369e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f043 030c 	orr.w	r3, r3, #12
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	e01a      	b.n	80036d4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4a6d      	ldr	r2, [pc, #436]	; (8003858 <HAL_ETH_Init+0x2cc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d903      	bls.n	80036ae <HAL_ETH_Init+0x122>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	4a6c      	ldr	r2, [pc, #432]	; (800385c <HAL_ETH_Init+0x2d0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d911      	bls.n	80036d2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4a6a      	ldr	r2, [pc, #424]	; (800385c <HAL_ETH_Init+0x2d0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d908      	bls.n	80036c8 <HAL_ETH_Init+0x13c>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4a69      	ldr	r2, [pc, #420]	; (8003860 <HAL_ETH_Init+0x2d4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d804      	bhi.n	80036c8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e005      	b.n	80036d4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f043 0310 	orr.w	r3, r3, #16
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e000      	b.n	80036d4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80036d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80036dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb9a 	bl	8003e1c <HAL_ETH_WritePHYRegister>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80036f2:	6939      	ldr	r1, [r7, #16]
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fc27 	bl	8003f48 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0d9      	b.n	80038ba <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003706:	20ff      	movs	r0, #255	; 0xff
 8003708:	f7ff fe38 	bl	800337c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a7 	beq.w	8003864 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003716:	f7ff fe25 	bl	8003364 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	461a      	mov	r2, r3
 8003722:	2101      	movs	r1, #1
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fb11 	bl	8003d4c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800372a:	f7ff fe1b 	bl	8003364 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d90f      	bls.n	800375c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003740:	6939      	ldr	r1, [r7, #16]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fc00 	bl	8003f48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0ae      	b.n	80038ba <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0da      	beq.n	800371c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800376a:	2100      	movs	r1, #0
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fb55 	bl	8003e1c <HAL_ETH_WritePHYRegister>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800377c:	6939      	ldr	r1, [r7, #16]
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fbe2 	bl	8003f48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800378c:	2301      	movs	r3, #1
 800378e:	e094      	b.n	80038ba <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003790:	f7ff fde8 	bl	8003364 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003796:	f107 030c 	add.w	r3, r7, #12
 800379a:	461a      	mov	r2, r3
 800379c:	2101      	movs	r1, #1
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fad4 	bl	8003d4c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80037a4:	f7ff fdde 	bl	8003364 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d90f      	bls.n	80037d6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80037ba:	6939      	ldr	r1, [r7, #16]
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fbc3 	bl	8003f48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e071      	b.n	80038ba <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0da      	beq.n	8003796 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	461a      	mov	r2, r3
 80037e6:	211f      	movs	r1, #31
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 faaf 	bl	8003d4c <HAL_ETH_ReadPHYRegister>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80037f8:	6939      	ldr	r1, [r7, #16]
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fba4 	bl	8003f48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003808:	2301      	movs	r3, #1
 800380a:	e056      	b.n	80038ba <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e002      	b.n	8003826 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	e037      	b.n	80038a8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e032      	b.n	80038a8 <HAL_ETH_Init+0x31c>
 8003842:	bf00      	nop
 8003844:	03938700 	.word	0x03938700
 8003848:	40023800 	.word	0x40023800
 800384c:	40013800 	.word	0x40013800
 8003850:	01312cff 	.word	0x01312cff
 8003854:	02160ebf 	.word	0x02160ebf
 8003858:	039386ff 	.word	0x039386ff
 800385c:	05f5e0ff 	.word	0x05f5e0ff
 8003860:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003874:	4313      	orrs	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	2100      	movs	r1, #0
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 facd 	bl	8003e1c <HAL_ETH_WritePHYRegister>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800388c:	6939      	ldr	r1, [r7, #16]
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fb5a 	bl	8003f48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e00c      	b.n	80038ba <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80038a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80038a4:	f7ff fd6a 	bl	800337c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80038a8:	6939      	ldr	r1, [r7, #16]
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fb4c 	bl	8003f48 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop

080038c4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ETH_DMATxDescListInit+0x20>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e052      	b.n	800398a <HAL_ETH_DMATxDescListInit+0xc6>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e030      	b.n	8003962 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	015b      	lsls	r3, r3, #5
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	4413      	add	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003910:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	461a      	mov	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	d208      	bcs.n	8003956 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3301      	adds	r3, #1
 8003948:	015b      	lsls	r3, r3, #5
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4413      	add	r3, r2
 800394e:	461a      	mov	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e002      	b.n	800395c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	3301      	adds	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3ca      	bcc.n	8003900 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f241 0310 	movw	r3, #4112	; 0x1010
 8003974:	440b      	add	r3, r1
 8003976:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003996:	b480      	push	{r7}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_ETH_DMARxDescListInit+0x20>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e056      	b.n	8003a64 <HAL_ETH_DMARxDescListInit+0xce>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e034      	b.n	8003a3c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039e2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80039ea:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	461a      	mov	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d208      	bcs.n	8003a30 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3301      	adds	r3, #1
 8003a22:	015b      	lsls	r3, r3, #5
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4413      	add	r3, r2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e002      	b.n	8003a36 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d3c6      	bcc.n	80039d2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	f241 030c 	movw	r3, #4108	; 0x100c
 8003a4e:	440b      	add	r3, r1
 8003a50:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_ETH_TransmitFrame+0x24>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e0cd      	b.n	8003c30 <HAL_ETH_TransmitFrame+0x1c0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0b8      	b.n	8003c30 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	da09      	bge.n	8003adc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2212      	movs	r2, #18
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0a9      	b.n	8003c30 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d915      	bls.n	8003b12 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	4a54      	ldr	r2, [pc, #336]	; (8003c3c <HAL_ETH_TransmitFrame+0x1cc>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_ETH_TransmitFrame+0x1cc>)
 8003af6:	fba3 1302 	umull	r1, r3, r3, r2
 8003afa:	0a9b      	lsrs	r3, r3, #10
 8003afc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e001      	b.n	8003b16 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d11c      	bne.n	8003b56 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003b2a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003b36:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b46:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b54:	e04b      	b.n	8003bee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	e044      	b.n	8003be6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b6a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b80:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b8a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d116      	bne.n	8003bc4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ba4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_ETH_TransmitFrame+0x1d0>)
 8003baa:	fb02 f203 	mul.w	r2, r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003bb6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003bc2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bd2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	3301      	adds	r3, #1
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3b6      	bcc.n	8003b5c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f241 0314 	movw	r3, #4116	; 0x1014
 8003bf6:	4413      	add	r3, r2
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c0a:	4413      	add	r3, r2
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	f241 0304 	movw	r3, #4100	; 0x1004
 8003c18:	4413      	add	r3, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	ac02b00b 	.word	0xac02b00b
 8003c40:	fffffa0c 	.word	0xfffffa0c

08003c44 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_ETH_GetReceivedFrame+0x1a>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e070      	b.n	8003d40 <HAL_ETH_GetReceivedFrame+0xfc>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db5a      	blt.n	8003d2e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d030      	beq.n	8003ce8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d103      	bne.n	8003ca0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003cb4:	3b04      	subs	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e02b      	b.n	8003d40 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28
 8003d16:	e00a      	b.n	8003d2e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	460b      	mov	r3, r1
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b82      	cmp	r3, #130	; 0x82
 8003d6c:	d101      	bne.n	8003d72 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e050      	b.n	8003e14 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2282      	movs	r2, #130	; 0x82
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 031c 	and.w	r3, r3, #28
 8003d88:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8a1b      	ldrh	r3, [r3, #16]
 8003d8e:	02db      	lsls	r3, r3, #11
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	019b      	lsls	r3, r3, #6
 8003d9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003dbe:	f7ff fad1 	bl	8003364 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003dc4:	e015      	b.n	8003df2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003dc6:	f7ff facd 	bl	8003364 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d309      	bcc.n	8003dea <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e014      	b.n	8003e14 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e4      	bne.n	8003dc6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	460b      	mov	r3, r1
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b42      	cmp	r3, #66	; 0x42
 8003e3c:	d101      	bne.n	8003e42 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e04e      	b.n	8003ee0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2242      	movs	r2, #66	; 0x42
 8003e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 031c 	and.w	r3, r3, #28
 8003e58:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8a1b      	ldrh	r3, [r3, #16]
 8003e5e:	02db      	lsls	r3, r3, #11
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003e68:	897b      	ldrh	r3, [r7, #10]
 8003e6a:	019b      	lsls	r3, r3, #6
 8003e6c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f043 0302 	orr.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003e98:	f7ff fa64 	bl	8003364 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e9e:	e015      	b.n	8003ecc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003ea0:	f7ff fa60 	bl	8003364 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d309      	bcc.n	8003ec4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e00d      	b.n	8003ee0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e4      	bne.n	8003ea0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_ETH_Start+0x16>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e01f      	b.n	8003f3e <HAL_ETH_Start+0x56>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa1c 	bl	800434c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa36 	bl	8004386 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa80 	bl	8004420 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fa4d 	bl	80043c0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa62 	bl	80043f0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0b0      	sub	sp, #192	; 0xc0
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f64:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003f76:	2300      	movs	r3, #0
 8003f78:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f92:	663b      	str	r3, [r7, #96]	; 0x60
 8003f94:	e001      	b.n	8003f9a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f9e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004006:	2300      	movs	r3, #0
 8004008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800401c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004020:	4bab      	ldr	r3, [pc, #684]	; (80042d0 <ETH_MACDMAConfig+0x388>)
 8004022:	4013      	ands	r3, r2
 8004024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004028:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800402a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800402c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004030:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004034:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800403a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800403c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800403e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004042:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004048:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800404a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800404c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800404e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004050:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004054:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004058:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800405a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800405c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800405e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004070:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800407c:	2001      	movs	r0, #1
 800407e:	f7ff f97d 	bl	800337c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800408a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800408c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800408e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004090:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004092:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004094:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800409a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800409c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80040a0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80040a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80040a6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80040a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80040ac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80040b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80040b8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80040ba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80040c6:	2001      	movs	r0, #1
 80040c8:	f7ff f958 	bl	800337c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040d4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040de:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80040e8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80040f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040f8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80040fc:	4013      	ands	r3, r2
 80040fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004106:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800410c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800410e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004112:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004118:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800411a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800411e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004124:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004126:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004138:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004144:	2001      	movs	r0, #1
 8004146:	f7ff f919 	bl	800337c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004152:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004154:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004158:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800416e:	2001      	movs	r0, #1
 8004170:	f7ff f904 	bl	800337c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800417c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004186:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800418c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004190:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800419e:	2300      	movs	r3, #0
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80041a2:	2304      	movs	r3, #4
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80041a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80041ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041bc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041c6:	2300      	movs	r3, #0
 80041c8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80041d2:	4413      	add	r3, r2
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80041da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041de:	4b3d      	ldr	r3, [pc, #244]	; (80042d4 <ETH_MACDMAConfig+0x38c>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80041e6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80041e8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80041ea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80041ec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80041ee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80041f0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80041f2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80041f4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80041f6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80041f8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80041fa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80041fc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80041fe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004202:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004206:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004208:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f241 0318 	movw	r3, #4120	; 0x1018
 800421a:	4413      	add	r3, r2
 800421c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004220:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f241 0318 	movw	r3, #4120	; 0x1018
 800422a:	4413      	add	r3, r2
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004232:	2001      	movs	r0, #1
 8004234:	f7ff f8a2 	bl	800337c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004240:	4413      	add	r3, r2
 8004242:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004246:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800424c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004250:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004254:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004258:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800425e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004262:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800426c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004270:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004280:	2001      	movs	r0, #1
 8004282:	f7ff f87b 	bl	800337c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004292:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10d      	bne.n	80042b8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80042a4:	4413      	add	r3, r2
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6811      	ldr	r1, [r2, #0]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <ETH_MACDMAConfig+0x390>)
 80042ae:	431a      	orrs	r2, r3
 80042b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80042b4:	440b      	add	r3, r1
 80042b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	461a      	mov	r2, r3
 80042be:	2100      	movs	r1, #0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f80b 	bl	80042dc <ETH_MACAddressConfig>
}
 80042c6:	bf00      	nop
 80042c8:	37c0      	adds	r7, #192	; 0xc0
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	ff20810f 	.word	0xff20810f
 80042d4:	f8de3f23 	.word	0xf8de3f23
 80042d8:	00010040 	.word	0x00010040

080042dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3305      	adds	r3, #5
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	3204      	adds	r2, #4
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <ETH_MACAddressConfig+0x68>)
 80042fe:	4413      	add	r3, r2
 8004300:	461a      	mov	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3303      	adds	r3, #3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	061a      	lsls	r2, r3, #24
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3302      	adds	r3, #2
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3301      	adds	r3, #1
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4313      	orrs	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <ETH_MACAddressConfig+0x6c>)
 800432e:	4413      	add	r3, r2
 8004330:	461a      	mov	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40028040 	.word	0x40028040
 8004348:	40028044 	.word	0x40028044

0800434c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0208 	orr.w	r2, r2, #8
 8004366:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004370:	2001      	movs	r0, #1
 8004372:	f7ff f803 	bl	800337c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0204 	orr.w	r2, r2, #4
 80043a0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043aa:	2001      	movs	r0, #1
 80043ac:	f7fe ffe6 	bl	800337c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80043d0:	4413      	add	r3, r2
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6811      	ldr	r1, [r2, #0]
 80043d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80043dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80043e0:	440b      	add	r3, r1
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8004400:	4413      	add	r3, r2
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6811      	ldr	r1, [r2, #0]
 8004408:	f043 0202 	orr.w	r2, r3, #2
 800440c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004410:	440b      	add	r3, r1
 8004412:	601a      	str	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	f241 0318 	movw	r3, #4120	; 0x1018
 8004434:	4413      	add	r3, r2
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6811      	ldr	r1, [r2, #0]
 800443c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004440:	f241 0318 	movw	r3, #4120	; 0x1018
 8004444:	440b      	add	r3, r1
 8004446:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004450:	4413      	add	r3, r2
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004456:	2001      	movs	r0, #1
 8004458:	f7fe ff90 	bl	800337c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f241 0318 	movw	r3, #4120	; 0x1018
 8004466:	440b      	add	r3, r1
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004486:	2300      	movs	r3, #0
 8004488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e175      	b.n	8004780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004494:	2201      	movs	r2, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	f040 8164 	bne.w	800477a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d00b      	beq.n	80044d2 <HAL_GPIO_Init+0x5e>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d007      	beq.n	80044d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c6:	2b11      	cmp	r3, #17
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b12      	cmp	r3, #18
 80044d0:	d130      	bne.n	8004534 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	2203      	movs	r2, #3
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 0201 	and.w	r2, r3, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	2203      	movs	r2, #3
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x100>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b12      	cmp	r3, #18
 8004572:	d123      	bne.n	80045bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	08da      	lsrs	r2, r3, #3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3208      	adds	r2, #8
 800457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	220f      	movs	r2, #15
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	08da      	lsrs	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3208      	adds	r2, #8
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	2203      	movs	r2, #3
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0203 	and.w	r2, r3, #3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80be 	beq.w	800477a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_GPIO_Init+0x320>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	4a64      	ldr	r2, [pc, #400]	; (8004794 <HAL_GPIO_Init+0x320>)
 8004604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004608:	6453      	str	r3, [r2, #68]	; 0x44
 800460a:	4b62      	ldr	r3, [pc, #392]	; (8004794 <HAL_GPIO_Init+0x320>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004616:	4a60      	ldr	r2, [pc, #384]	; (8004798 <HAL_GPIO_Init+0x324>)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	089b      	lsrs	r3, r3, #2
 800461c:	3302      	adds	r3, #2
 800461e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004622:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	220f      	movs	r2, #15
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a57      	ldr	r2, [pc, #348]	; (800479c <HAL_GPIO_Init+0x328>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d037      	beq.n	80046b2 <HAL_GPIO_Init+0x23e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a56      	ldr	r2, [pc, #344]	; (80047a0 <HAL_GPIO_Init+0x32c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_GPIO_Init+0x23a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a55      	ldr	r2, [pc, #340]	; (80047a4 <HAL_GPIO_Init+0x330>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02b      	beq.n	80046aa <HAL_GPIO_Init+0x236>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a54      	ldr	r2, [pc, #336]	; (80047a8 <HAL_GPIO_Init+0x334>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d025      	beq.n	80046a6 <HAL_GPIO_Init+0x232>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a53      	ldr	r2, [pc, #332]	; (80047ac <HAL_GPIO_Init+0x338>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01f      	beq.n	80046a2 <HAL_GPIO_Init+0x22e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a52      	ldr	r2, [pc, #328]	; (80047b0 <HAL_GPIO_Init+0x33c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d019      	beq.n	800469e <HAL_GPIO_Init+0x22a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a51      	ldr	r2, [pc, #324]	; (80047b4 <HAL_GPIO_Init+0x340>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_GPIO_Init+0x226>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a50      	ldr	r2, [pc, #320]	; (80047b8 <HAL_GPIO_Init+0x344>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00d      	beq.n	8004696 <HAL_GPIO_Init+0x222>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4f      	ldr	r2, [pc, #316]	; (80047bc <HAL_GPIO_Init+0x348>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <HAL_GPIO_Init+0x21e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4e      	ldr	r2, [pc, #312]	; (80047c0 <HAL_GPIO_Init+0x34c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_GPIO_Init+0x21a>
 800468a:	2309      	movs	r3, #9
 800468c:	e012      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 800468e:	230a      	movs	r3, #10
 8004690:	e010      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 8004692:	2308      	movs	r3, #8
 8004694:	e00e      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 8004696:	2307      	movs	r3, #7
 8004698:	e00c      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 800469a:	2306      	movs	r3, #6
 800469c:	e00a      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 800469e:	2305      	movs	r3, #5
 80046a0:	e008      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 80046a2:	2304      	movs	r3, #4
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_Init+0x240>
 80046b2:	2300      	movs	r3, #0
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f002 0203 	and.w	r2, r2, #3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4093      	lsls	r3, r2
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046c4:	4934      	ldr	r1, [pc, #208]	; (8004798 <HAL_GPIO_Init+0x324>)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <HAL_GPIO_Init+0x350>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f6:	4a33      	ldr	r2, [pc, #204]	; (80047c4 <HAL_GPIO_Init+0x350>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_GPIO_Init+0x350>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004720:	4a28      	ldr	r2, [pc, #160]	; (80047c4 <HAL_GPIO_Init+0x350>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <HAL_GPIO_Init+0x350>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800474a:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <HAL_GPIO_Init+0x350>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004750:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <HAL_GPIO_Init+0x350>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_GPIO_Init+0x350>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b0f      	cmp	r3, #15
 8004784:	f67f ae86 	bls.w	8004494 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004788:	bf00      	nop
 800478a:	3724      	adds	r7, #36	; 0x24
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40023800 	.word	0x40023800
 8004798:	40013800 	.word	0x40013800
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40020800 	.word	0x40020800
 80047a8:	40020c00 	.word	0x40020c00
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40021400 	.word	0x40021400
 80047b4:	40021800 	.word	0x40021800
 80047b8:	40021c00 	.word	0x40021c00
 80047bc:	40022000 	.word	0x40022000
 80047c0:	40022400 	.word	0x40022400
 80047c4:	40013c00 	.word	0x40013c00

080047c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	807b      	strh	r3, [r7, #2]
 80047d4:	4613      	mov	r3, r2
 80047d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047d8:	787b      	ldrb	r3, [r7, #1]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047e4:	e003      	b.n	80047ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	041a      	lsls	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	619a      	str	r2, [r3, #24]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fc:	b08f      	sub	sp, #60	; 0x3c
 80047fe:	af0a      	add	r7, sp, #40	; 0x28
 8004800:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e116      	b.n	8004a3a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fe fcc6 	bl	80031b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2203      	movs	r2, #3
 8004830:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f001 fe54 	bl	80064f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	603b      	str	r3, [r7, #0]
 8004856:	687e      	ldr	r6, [r7, #4]
 8004858:	466d      	mov	r5, sp
 800485a:	f106 0410 	add.w	r4, r6, #16
 800485e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004866:	e894 0003 	ldmia.w	r4, {r0, r1}
 800486a:	e885 0003 	stmia.w	r5, {r0, r1}
 800486e:	1d33      	adds	r3, r6, #4
 8004870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004872:	6838      	ldr	r0, [r7, #0]
 8004874:	f001 fde8 	bl	8006448 <USB_CoreInit>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0d7      	b.n	8004a3a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fe42 	bl	800651a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
 800489a:	e04a      	b.n	8004932 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	333d      	adds	r3, #61	; 0x3d
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	333c      	adds	r3, #60	; 0x3c
 80048c0:	7bfa      	ldrb	r2, [r7, #15]
 80048c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	b298      	uxth	r0, r3
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3342      	adds	r3, #66	; 0x42
 80048d8:	4602      	mov	r2, r0
 80048da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	333f      	adds	r3, #63	; 0x3f
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	3344      	adds	r3, #68	; 0x44
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3348      	adds	r3, #72	; 0x48
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	3350      	adds	r3, #80	; 0x50
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	3301      	adds	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d3af      	bcc.n	800489c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	e044      	b.n	80049cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004954:	2200      	movs	r2, #0
 8004956:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004984:	7bfa      	ldrb	r2, [r7, #15]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800499a:	7bfa      	ldrb	r2, [r7, #15]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3301      	adds	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d3b5      	bcc.n	8004942 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	687e      	ldr	r6, [r7, #4]
 80049de:	466d      	mov	r5, sp
 80049e0:	f106 0410 	add.w	r4, r6, #16
 80049e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80049f4:	1d33      	adds	r3, r6, #4
 80049f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049f8:	6838      	ldr	r0, [r7, #0]
 80049fa:	f001 fdb9 	bl	8006570 <USB_DevInit>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e014      	b.n	8004a3a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d102      	bne.n	8004a2e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f80b 	bl	8004a44 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 ff6b 	bl	800690e <USB_DevDisconnect>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	10000003 	.word	0x10000003

08004a8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9a:	6013      	str	r3, [r2, #0]
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40007000 	.word	0x40007000

08004aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e291      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8087 	beq.w	8004bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ad0:	4b96      	ldr	r3, [pc, #600]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d00c      	beq.n	8004af6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004adc:	4b93      	ldr	r3, [pc, #588]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d112      	bne.n	8004b0e <HAL_RCC_OscConfig+0x62>
 8004ae8:	4b90      	ldr	r3, [pc, #576]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af4:	d10b      	bne.n	8004b0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af6:	4b8d      	ldr	r3, [pc, #564]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d06c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x130>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d168      	bne.n	8004bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e26b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x7a>
 8004b18:	4b84      	ldr	r3, [pc, #528]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a83      	ldr	r2, [pc, #524]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e02e      	b.n	8004b84 <HAL_RCC_OscConfig+0xd8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x9c>
 8004b2e:	4b7f      	ldr	r3, [pc, #508]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a7e      	ldr	r2, [pc, #504]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a7b      	ldr	r2, [pc, #492]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0xd8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0xc0>
 8004b52:	4b76      	ldr	r3, [pc, #472]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a75      	ldr	r2, [pc, #468]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a72      	ldr	r2, [pc, #456]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0xd8>
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6e      	ldr	r2, [pc, #440]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6b      	ldr	r2, [pc, #428]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fe fbea 	bl	8003364 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fe fbe6 	bl	8003364 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e21f      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0xe8>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fbd6 	bl	8003364 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fe fbd2 	bl	8003364 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e20b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x110>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d069      	beq.n	8004cbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bea:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b4d      	ldr	r3, [pc, #308]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d11c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x190>
 8004c02:	4b4a      	ldr	r3, [pc, #296]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x17a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e1df      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	493d      	ldr	r1, [pc, #244]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	e040      	b.n	8004cbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d023      	beq.n	8004c8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c44:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a38      	ldr	r2, [pc, #224]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fe fb88 	bl	8003364 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fe fb84 	bl	8003364 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e1bd      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4929      	ldr	r1, [pc, #164]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
 8004c8a:	e018      	b.n	8004cbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe fb64 	bl	8003364 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fe fb60 	bl	8003364 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e199      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d038      	beq.n	8004d3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d019      	beq.n	8004d06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd2:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fe fb41 	bl	8003364 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce6:	f7fe fb3d 	bl	8003364 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e176      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x23a>
 8004d04:	e01a      	b.n	8004d3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <HAL_RCC_OscConfig+0x280>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fe fb27 	bl	8003364 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fe fb23 	bl	8003364 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d903      	bls.n	8004d30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e15c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
 8004d2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b91      	ldr	r3, [pc, #580]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ee      	bne.n	8004d1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a4 	beq.w	8004e92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4a:	4b8b      	ldr	r3, [pc, #556]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	4b88      	ldr	r3, [pc, #544]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a87      	ldr	r2, [pc, #540]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
 8004d62:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d72:	4b82      	ldr	r3, [pc, #520]	; (8004f7c <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d118      	bne.n	8004db0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d7e:	4b7f      	ldr	r3, [pc, #508]	; (8004f7c <HAL_RCC_OscConfig+0x4d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a7e      	ldr	r2, [pc, #504]	; (8004f7c <HAL_RCC_OscConfig+0x4d0>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8a:	f7fe faeb 	bl	8003364 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fe fae7 	bl	8003364 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b64      	cmp	r3, #100	; 0x64
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e120      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da4:	4b75      	ldr	r3, [pc, #468]	; (8004f7c <HAL_RCC_OscConfig+0x4d0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x31a>
 8004db8:	4b6f      	ldr	r3, [pc, #444]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a6e      	ldr	r2, [pc, #440]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e02d      	b.n	8004e22 <HAL_RCC_OscConfig+0x376>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x33c>
 8004dce:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a69      	ldr	r2, [pc, #420]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b67      	ldr	r3, [pc, #412]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a66      	ldr	r2, [pc, #408]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	e01c      	b.n	8004e22 <HAL_RCC_OscConfig+0x376>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d10c      	bne.n	8004e0a <HAL_RCC_OscConfig+0x35e>
 8004df0:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a60      	ldr	r2, [pc, #384]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004df6:	f043 0304 	orr.w	r3, r3, #4
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a5d      	ldr	r2, [pc, #372]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	e00b      	b.n	8004e22 <HAL_RCC_OscConfig+0x376>
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a5a      	ldr	r2, [pc, #360]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
 8004e16:	4b58      	ldr	r3, [pc, #352]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a57      	ldr	r2, [pc, #348]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e1c:	f023 0304 	bic.w	r3, r3, #4
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fe fa9b 	bl	8003364 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fe fa97 	bl	8003364 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0ce      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e48:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ee      	beq.n	8004e32 <HAL_RCC_OscConfig+0x386>
 8004e54:	e014      	b.n	8004e80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fe fa85 	bl	8003364 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fe fa81 	bl	8003364 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0b8      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e74:	4b40      	ldr	r3, [pc, #256]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ee      	bne.n	8004e5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d105      	bne.n	8004e92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e86:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	4a3b      	ldr	r2, [pc, #236]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80a4 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d06b      	beq.n	8004f80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d149      	bne.n	8004f44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a30      	ldr	r2, [pc, #192]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fa52 	bl	8003364 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fe fa4e 	bl	8003364 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e087      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed6:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69da      	ldr	r2, [r3, #28]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	4313      	orrs	r3, r2
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fe fa22 	bl	8003364 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fe fa1e 	bl	8003364 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e057      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x478>
 8004f42:	e04f      	b.n	8004fe4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fe fa08 	bl	8003364 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fe fa04 	bl	8003364 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e03d      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <HAL_RCC_OscConfig+0x4cc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x4ac>
 8004f76:	e035      	b.n	8004fe4 <HAL_RCC_OscConfig+0x538>
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCC_OscConfig+0x544>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d028      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d121      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d11a      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d111      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0d0      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800500c:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d910      	bls.n	800503c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501a:	4b67      	ldr	r3, [pc, #412]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 020f 	bic.w	r2, r3, #15
 8005022:	4965      	ldr	r1, [pc, #404]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b63      	ldr	r3, [pc, #396]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0b8      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d020      	beq.n	800508a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005054:	4b59      	ldr	r3, [pc, #356]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a58      	ldr	r2, [pc, #352]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 800505a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800505e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800506c:	4b53      	ldr	r3, [pc, #332]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	4a52      	ldr	r2, [pc, #328]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005078:	4b50      	ldr	r3, [pc, #320]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	494d      	ldr	r1, [pc, #308]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d040      	beq.n	8005118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	4b47      	ldr	r3, [pc, #284]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d115      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e07f      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e073      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c6:	4b3d      	ldr	r3, [pc, #244]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e06b      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d6:	4b39      	ldr	r3, [pc, #228]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4936      	ldr	r1, [pc, #216]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fe f93c 	bl	8003364 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f0:	f7fe f938 	bl	8003364 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e053      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 020c 	and.w	r2, r3, #12
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	429a      	cmp	r2, r3
 8005116:	d1eb      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d210      	bcs.n	8005148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 020f 	bic.w	r2, r3, #15
 800512e:	4922      	ldr	r1, [pc, #136]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b20      	ldr	r3, [pc, #128]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e032      	b.n	80051ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005154:	4b19      	ldr	r3, [pc, #100]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4916      	ldr	r1, [pc, #88]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	490e      	ldr	r1, [pc, #56]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005186:	f000 f821 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 800518a:	4601      	mov	r1, r0
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <HAL_RCC_ClockConfig+0x1cc>)
 8005198:	5cd3      	ldrb	r3, [r2, r3]
 800519a:	fa21 f303 	lsr.w	r3, r1, r3
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1d0>)
 80051a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051a2:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_RCC_ClockConfig+0x1d4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe f898 	bl	80032dc <HAL_InitTick>

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40023c00 	.word	0x40023c00
 80051bc:	40023800 	.word	0x40023800
 80051c0:	08016e1c 	.word	0x08016e1c
 80051c4:	20000010 	.word	0x20000010
 80051c8:	20000014 	.word	0x20000014

080051cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	2300      	movs	r3, #0
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e2:	4b63      	ldr	r3, [pc, #396]	; (8005370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d007      	beq.n	80051fe <HAL_RCC_GetSysClockFreq+0x32>
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d008      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x38>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 80b4 	bne.w	8005360 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b5e      	ldr	r3, [pc, #376]	; (8005374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051fa:	60bb      	str	r3, [r7, #8]
      break;
 80051fc:	e0b3      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fe:	4b5e      	ldr	r3, [pc, #376]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005200:	60bb      	str	r3, [r7, #8]
      break;
 8005202:	e0b0      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005204:	4b5a      	ldr	r3, [pc, #360]	; (8005370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800520e:	4b58      	ldr	r3, [pc, #352]	; (8005370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d04a      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521a:	4b55      	ldr	r3, [pc, #340]	; (8005370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	099b      	lsrs	r3, r3, #6
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	ea03 0501 	and.w	r5, r3, r1
 8005230:	ea04 0602 	and.w	r6, r4, r2
 8005234:	4629      	mov	r1, r5
 8005236:	4632      	mov	r2, r6
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	0154      	lsls	r4, r2, #5
 8005242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005246:	014b      	lsls	r3, r1, #5
 8005248:	4619      	mov	r1, r3
 800524a:	4622      	mov	r2, r4
 800524c:	1b49      	subs	r1, r1, r5
 800524e:	eb62 0206 	sbc.w	r2, r2, r6
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	0194      	lsls	r4, r2, #6
 800525c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005260:	018b      	lsls	r3, r1, #6
 8005262:	1a5b      	subs	r3, r3, r1
 8005264:	eb64 0402 	sbc.w	r4, r4, r2
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	00e2      	lsls	r2, r4, #3
 8005272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005276:	00d9      	lsls	r1, r3, #3
 8005278:	460b      	mov	r3, r1
 800527a:	4614      	mov	r4, r2
 800527c:	195b      	adds	r3, r3, r5
 800527e:	eb44 0406 	adc.w	r4, r4, r6
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	0262      	lsls	r2, r4, #9
 800528c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005290:	0259      	lsls	r1, r3, #9
 8005292:	460b      	mov	r3, r1
 8005294:	4614      	mov	r4, r2
 8005296:	4618      	mov	r0, r3
 8005298:	4621      	mov	r1, r4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f04f 0400 	mov.w	r4, #0
 80052a0:	461a      	mov	r2, r3
 80052a2:	4623      	mov	r3, r4
 80052a4:	f7fb fcba 	bl	8000c1c <__aeabi_uldivmod>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e049      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	f04f 0400 	mov.w	r4, #0
 80052ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	ea03 0501 	and.w	r5, r3, r1
 80052c6:	ea04 0602 	and.w	r6, r4, r2
 80052ca:	4629      	mov	r1, r5
 80052cc:	4632      	mov	r2, r6
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	f04f 0400 	mov.w	r4, #0
 80052d6:	0154      	lsls	r4, r2, #5
 80052d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052dc:	014b      	lsls	r3, r1, #5
 80052de:	4619      	mov	r1, r3
 80052e0:	4622      	mov	r2, r4
 80052e2:	1b49      	subs	r1, r1, r5
 80052e4:	eb62 0206 	sbc.w	r2, r2, r6
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	0194      	lsls	r4, r2, #6
 80052f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052f6:	018b      	lsls	r3, r1, #6
 80052f8:	1a5b      	subs	r3, r3, r1
 80052fa:	eb64 0402 	sbc.w	r4, r4, r2
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800530c:	00d9      	lsls	r1, r3, #3
 800530e:	460b      	mov	r3, r1
 8005310:	4614      	mov	r4, r2
 8005312:	195b      	adds	r3, r3, r5
 8005314:	eb44 0406 	adc.w	r4, r4, r6
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	02a2      	lsls	r2, r4, #10
 8005322:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005326:	0299      	lsls	r1, r3, #10
 8005328:	460b      	mov	r3, r1
 800532a:	4614      	mov	r4, r2
 800532c:	4618      	mov	r0, r3
 800532e:	4621      	mov	r1, r4
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f04f 0400 	mov.w	r4, #0
 8005336:	461a      	mov	r2, r3
 8005338:	4623      	mov	r3, r4
 800533a:	f7fb fc6f 	bl	8000c1c <__aeabi_uldivmod>
 800533e:	4603      	mov	r3, r0
 8005340:	460c      	mov	r4, r1
 8005342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	3301      	adds	r3, #1
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	60bb      	str	r3, [r7, #8]
      break;
 800535e:	e002      	b.n	8005366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005362:	60bb      	str	r3, [r7, #8]
      break;
 8005364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005366:	68bb      	ldr	r3, [r7, #8]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	00f42400 	.word	0x00f42400
 8005378:	007a1200 	.word	0x007a1200

0800537c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <HAL_RCC_GetHCLKFreq+0x14>)
 8005382:	681b      	ldr	r3, [r3, #0]
}
 8005384:	4618      	mov	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	20000010 	.word	0x20000010

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005398:	f7ff fff0 	bl	800537c <HAL_RCC_GetHCLKFreq>
 800539c:	4601      	mov	r1, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0a9b      	lsrs	r3, r3, #10
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4a03      	ldr	r2, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	08016e2c 	.word	0x08016e2c

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053c0:	f7ff ffdc 	bl	800537c <HAL_RCC_GetHCLKFreq>
 80053c4:	4601      	mov	r1, r0
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	0b5b      	lsrs	r3, r3, #13
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4a03      	ldr	r2, [pc, #12]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d2:	5cd3      	ldrb	r3, [r2, r3]
 80053d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40023800 	.word	0x40023800
 80053e0:	08016e2c 	.word	0x08016e2c

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d012      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800540c:	4b69      	ldr	r3, [pc, #420]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4a68      	ldr	r2, [pc, #416]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005416:	6093      	str	r3, [r2, #8]
 8005418:	4b66      	ldr	r3, [pc, #408]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	4964      	ldr	r1, [pc, #400]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005422:	4313      	orrs	r3, r2
 8005424:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800543e:	4b5d      	ldr	r3, [pc, #372]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	4959      	ldr	r1, [pc, #356]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800546a:	2301      	movs	r3, #1
 800546c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d017      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800547a:	4b4e      	ldr	r3, [pc, #312]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005480:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	494a      	ldr	r1, [pc, #296]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005498:	d101      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 808b 	beq.w	80055de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c8:	4b3a      	ldr	r3, [pc, #232]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	4a39      	ldr	r2, [pc, #228]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	6413      	str	r3, [r2, #64]	; 0x40
 80054d4:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054e0:	4b35      	ldr	r3, [pc, #212]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a34      	ldr	r2, [pc, #208]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ec:	f7fd ff3a 	bl	8003364 <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f4:	f7fd ff36 	bl	8003364 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	; 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e355      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d035      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	d02e      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005530:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553e:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005546:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005550:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005552:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005558:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d114      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fd fefe 	bl	8003364 <HAL_GetTick>
 8005568:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fd fefa 	bl	8003364 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e317      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559a:	d111      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055aa:	400b      	ands	r3, r1
 80055ac:	4901      	ldr	r1, [pc, #4]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
 80055b2:	e00b      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40007000 	.word	0x40007000
 80055bc:	0ffffcff 	.word	0x0ffffcff
 80055c0:	4bb0      	ldr	r3, [pc, #704]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4aaf      	ldr	r2, [pc, #700]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055ca:	6093      	str	r3, [r2, #8]
 80055cc:	4bad      	ldr	r3, [pc, #692]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	49aa      	ldr	r1, [pc, #680]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d010      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055ea:	4ba6      	ldr	r3, [pc, #664]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	4aa4      	ldr	r2, [pc, #656]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055fa:	4ba2      	ldr	r3, [pc, #648]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	499f      	ldr	r1, [pc, #636]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005618:	4b9a      	ldr	r3, [pc, #616]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005626:	4997      	ldr	r1, [pc, #604]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800563a:	4b92      	ldr	r3, [pc, #584]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005648:	498e      	ldr	r1, [pc, #568]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565c:	4b89      	ldr	r3, [pc, #548]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566a:	4986      	ldr	r1, [pc, #536]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800567e:	4b81      	ldr	r3, [pc, #516]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	497d      	ldr	r1, [pc, #500]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a0:	4b78      	ldr	r3, [pc, #480]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f023 0203 	bic.w	r2, r3, #3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	4975      	ldr	r1, [pc, #468]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056c2:	4b70      	ldr	r3, [pc, #448]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f023 020c 	bic.w	r2, r3, #12
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d0:	496c      	ldr	r1, [pc, #432]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056e4:	4b67      	ldr	r3, [pc, #412]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	4964      	ldr	r1, [pc, #400]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005706:	4b5f      	ldr	r3, [pc, #380]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	495b      	ldr	r1, [pc, #364]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005728:	4b56      	ldr	r3, [pc, #344]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	4953      	ldr	r1, [pc, #332]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800574a:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005758:	494a      	ldr	r1, [pc, #296]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	4942      	ldr	r1, [pc, #264]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800578e:	4b3d      	ldr	r3, [pc, #244]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	4939      	ldr	r1, [pc, #228]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057b0:	4b34      	ldr	r3, [pc, #208]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057be:	4931      	ldr	r1, [pc, #196]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d011      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e0:	4928      	ldr	r1, [pc, #160]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f0:	d101      	bne.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057f2:	2301      	movs	r3, #1
 80057f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005802:	2301      	movs	r3, #1
 8005804:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005820:	4918      	ldr	r1, [pc, #96]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005844:	490f      	ldr	r1, [pc, #60]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d005      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800585a:	f040 80d8 	bne.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a08      	ldr	r2, [pc, #32]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586a:	f7fd fd7b 	bl	8003364 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005872:	f7fd fd77 	bl	8003364 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d903      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e196      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005884:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005888:	4b6c      	ldr	r3, [pc, #432]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ee      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d021      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11d      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058a8:	4b64      	ldr	r3, [pc, #400]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ae:	0c1b      	lsrs	r3, r3, #16
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058b6:	4b61      	ldr	r3, [pc, #388]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058bc:	0e1b      	lsrs	r3, r3, #24
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	019a      	lsls	r2, r3, #6
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	041b      	lsls	r3, r3, #16
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	071b      	lsls	r3, r3, #28
 80058dc:	4957      	ldr	r1, [pc, #348]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x516>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d02e      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590e:	d129      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005910:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005924:	0f1b      	lsrs	r3, r3, #28
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	019a      	lsls	r2, r3, #6
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	061b      	lsls	r3, r3, #24
 800593e:	431a      	orrs	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	071b      	lsls	r3, r3, #28
 8005944:	493d      	ldr	r1, [pc, #244]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800594c:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800594e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005952:	f023 021f 	bic.w	r2, r3, #31
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	3b01      	subs	r3, #1
 800595c:	4937      	ldr	r1, [pc, #220]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01d      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005970:	4b32      	ldr	r3, [pc, #200]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005976:	0e1b      	lsrs	r3, r3, #24
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800597e:	4b2f      	ldr	r3, [pc, #188]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005984:	0f1b      	lsrs	r3, r3, #28
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	019a      	lsls	r2, r3, #6
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	431a      	orrs	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	431a      	orrs	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	071b      	lsls	r3, r3, #28
 80059a4:	4925      	ldr	r1, [pc, #148]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d011      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	019a      	lsls	r2, r3, #6
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	071b      	lsls	r3, r3, #28
 80059d4:	4919      	ldr	r1, [pc, #100]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059dc:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e8:	f7fd fcbc 	bl	8003364 <HAL_GetTick>
 80059ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059f0:	f7fd fcb8 	bl	8003364 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0d7      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	f040 80cd 	bne.w	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a22:	f7fd fc9f 	bl	8003364 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a2a:	f7fd fc9b 	bl	8003364 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b64      	cmp	r3, #100	; 0x64
 8005a36:	d903      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0ba      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005a3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a40:	4b5e      	ldr	r3, [pc, #376]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a4c:	d0ed      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d02e      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d12a      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a76:	4b51      	ldr	r3, [pc, #324]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a84:	4b4d      	ldr	r3, [pc, #308]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	0f1b      	lsrs	r3, r3, #28
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	019a      	lsls	r2, r3, #6
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	061b      	lsls	r3, r3, #24
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	071b      	lsls	r3, r3, #28
 8005aaa:	4944      	ldr	r1, [pc, #272]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ab2:	4b42      	ldr	r3, [pc, #264]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	493d      	ldr	r1, [pc, #244]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d022      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae0:	d11d      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	0e1b      	lsrs	r3, r3, #24
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005af0:	4b32      	ldr	r3, [pc, #200]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	0f1b      	lsrs	r3, r3, #28
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	019a      	lsls	r2, r3, #6
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	071b      	lsls	r3, r3, #28
 8005b16:	4929      	ldr	r1, [pc, #164]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d028      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	0e1b      	lsrs	r3, r3, #24
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	0c1b      	lsrs	r3, r3, #16
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	019a      	lsls	r2, r3, #6
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	431a      	orrs	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	071b      	lsls	r3, r3, #28
 8005b5e:	4917      	ldr	r1, [pc, #92]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4911      	ldr	r1, [pc, #68]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b88:	f7fd fbec 	bl	8003364 <HAL_GetTick>
 8005b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b90:	f7fd fbe8 	bl	8003364 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	; 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e007      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bae:	d1ef      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800

08005bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e040      	b.n	8005c54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fd fa76 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f82c 	bl	8005c5c <UART_SetConfig>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e022      	b.n	8005c54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 faca 	bl	80061b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fb51 	bl	80062f4 <UART_CheckIdleState>
 8005c52:	4603      	mov	r3, r0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4bb1      	ldr	r3, [pc, #708]	; (8005f50 <UART_SetConfig+0x2f4>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a9f      	ldr	r2, [pc, #636]	; (8005f54 <UART_SetConfig+0x2f8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d121      	bne.n	8005d20 <UART_SetConfig+0xc4>
 8005cdc:	4b9e      	ldr	r3, [pc, #632]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d816      	bhi.n	8005d18 <UART_SetConfig+0xbc>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x94>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d01 	.word	0x08005d01
 8005cf4:	08005d0d 	.word	0x08005d0d
 8005cf8:	08005d07 	.word	0x08005d07
 8005cfc:	08005d13 	.word	0x08005d13
 8005d00:	2301      	movs	r3, #1
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e151      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d06:	2302      	movs	r3, #2
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e14e      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e14b      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d12:	2308      	movs	r3, #8
 8005d14:	77fb      	strb	r3, [r7, #31]
 8005d16:	e148      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	77fb      	strb	r3, [r7, #31]
 8005d1c:	bf00      	nop
 8005d1e:	e144      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a8d      	ldr	r2, [pc, #564]	; (8005f5c <UART_SetConfig+0x300>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d134      	bne.n	8005d94 <UART_SetConfig+0x138>
 8005d2a:	4b8b      	ldr	r3, [pc, #556]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d30:	f003 030c 	and.w	r3, r3, #12
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d829      	bhi.n	8005d8c <UART_SetConfig+0x130>
 8005d38:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0xe4>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d75 	.word	0x08005d75
 8005d44:	08005d8d 	.word	0x08005d8d
 8005d48:	08005d8d 	.word	0x08005d8d
 8005d4c:	08005d8d 	.word	0x08005d8d
 8005d50:	08005d81 	.word	0x08005d81
 8005d54:	08005d8d 	.word	0x08005d8d
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005d8d 	.word	0x08005d8d
 8005d60:	08005d7b 	.word	0x08005d7b
 8005d64:	08005d8d 	.word	0x08005d8d
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005d87 	.word	0x08005d87
 8005d74:	2300      	movs	r3, #0
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e117      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	77fb      	strb	r3, [r7, #31]
 8005d7e:	e114      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d80:	2304      	movs	r3, #4
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e111      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d86:	2308      	movs	r3, #8
 8005d88:	77fb      	strb	r3, [r7, #31]
 8005d8a:	e10e      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	bf00      	nop
 8005d92:	e10a      	b.n	8005faa <UART_SetConfig+0x34e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a71      	ldr	r2, [pc, #452]	; (8005f60 <UART_SetConfig+0x304>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d120      	bne.n	8005de0 <UART_SetConfig+0x184>
 8005d9e:	4b6e      	ldr	r3, [pc, #440]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d00f      	beq.n	8005dcc <UART_SetConfig+0x170>
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d802      	bhi.n	8005db6 <UART_SetConfig+0x15a>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <UART_SetConfig+0x164>
 8005db4:	e010      	b.n	8005dd8 <UART_SetConfig+0x17c>
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d005      	beq.n	8005dc6 <UART_SetConfig+0x16a>
 8005dba:	2b30      	cmp	r3, #48	; 0x30
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x176>
 8005dbe:	e00b      	b.n	8005dd8 <UART_SetConfig+0x17c>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e0f1      	b.n	8005faa <UART_SetConfig+0x34e>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e0ee      	b.n	8005faa <UART_SetConfig+0x34e>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e0eb      	b.n	8005faa <UART_SetConfig+0x34e>
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e0e8      	b.n	8005faa <UART_SetConfig+0x34e>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	bf00      	nop
 8005dde:	e0e4      	b.n	8005faa <UART_SetConfig+0x34e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5f      	ldr	r2, [pc, #380]	; (8005f64 <UART_SetConfig+0x308>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d120      	bne.n	8005e2c <UART_SetConfig+0x1d0>
 8005dea:	4b5b      	ldr	r3, [pc, #364]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d00f      	beq.n	8005e18 <UART_SetConfig+0x1bc>
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d802      	bhi.n	8005e02 <UART_SetConfig+0x1a6>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <UART_SetConfig+0x1b0>
 8005e00:	e010      	b.n	8005e24 <UART_SetConfig+0x1c8>
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d005      	beq.n	8005e12 <UART_SetConfig+0x1b6>
 8005e06:	2bc0      	cmp	r3, #192	; 0xc0
 8005e08:	d009      	beq.n	8005e1e <UART_SetConfig+0x1c2>
 8005e0a:	e00b      	b.n	8005e24 <UART_SetConfig+0x1c8>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e0cb      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e0c8      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e0c5      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e0c2      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	bf00      	nop
 8005e2a:	e0be      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a4d      	ldr	r2, [pc, #308]	; (8005f68 <UART_SetConfig+0x30c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d124      	bne.n	8005e80 <UART_SetConfig+0x224>
 8005e36:	4b48      	ldr	r3, [pc, #288]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e44:	d012      	beq.n	8005e6c <UART_SetConfig+0x210>
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d802      	bhi.n	8005e52 <UART_SetConfig+0x1f6>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <UART_SetConfig+0x204>
 8005e50:	e012      	b.n	8005e78 <UART_SetConfig+0x21c>
 8005e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e56:	d006      	beq.n	8005e66 <UART_SetConfig+0x20a>
 8005e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5c:	d009      	beq.n	8005e72 <UART_SetConfig+0x216>
 8005e5e:	e00b      	b.n	8005e78 <UART_SetConfig+0x21c>
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e0a1      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e66:	2302      	movs	r3, #2
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e09e      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e09b      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e72:	2308      	movs	r3, #8
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e098      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	bf00      	nop
 8005e7e:	e094      	b.n	8005faa <UART_SetConfig+0x34e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a39      	ldr	r2, [pc, #228]	; (8005f6c <UART_SetConfig+0x310>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d124      	bne.n	8005ed4 <UART_SetConfig+0x278>
 8005e8a:	4b33      	ldr	r3, [pc, #204]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e98:	d012      	beq.n	8005ec0 <UART_SetConfig+0x264>
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d802      	bhi.n	8005ea6 <UART_SetConfig+0x24a>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <UART_SetConfig+0x258>
 8005ea4:	e012      	b.n	8005ecc <UART_SetConfig+0x270>
 8005ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eaa:	d006      	beq.n	8005eba <UART_SetConfig+0x25e>
 8005eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eb0:	d009      	beq.n	8005ec6 <UART_SetConfig+0x26a>
 8005eb2:	e00b      	b.n	8005ecc <UART_SetConfig+0x270>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e077      	b.n	8005faa <UART_SetConfig+0x34e>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e074      	b.n	8005faa <UART_SetConfig+0x34e>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e071      	b.n	8005faa <UART_SetConfig+0x34e>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e06e      	b.n	8005faa <UART_SetConfig+0x34e>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	bf00      	nop
 8005ed2:	e06a      	b.n	8005faa <UART_SetConfig+0x34e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <UART_SetConfig+0x314>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d124      	bne.n	8005f28 <UART_SetConfig+0x2cc>
 8005ede:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eec:	d012      	beq.n	8005f14 <UART_SetConfig+0x2b8>
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	d802      	bhi.n	8005efa <UART_SetConfig+0x29e>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <UART_SetConfig+0x2ac>
 8005ef8:	e012      	b.n	8005f20 <UART_SetConfig+0x2c4>
 8005efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efe:	d006      	beq.n	8005f0e <UART_SetConfig+0x2b2>
 8005f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f04:	d009      	beq.n	8005f1a <UART_SetConfig+0x2be>
 8005f06:	e00b      	b.n	8005f20 <UART_SetConfig+0x2c4>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e04d      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e04a      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f14:	2304      	movs	r3, #4
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e047      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e044      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f20:	2310      	movs	r3, #16
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	bf00      	nop
 8005f26:	e040      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <UART_SetConfig+0x318>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d139      	bne.n	8005fa6 <UART_SetConfig+0x34a>
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <UART_SetConfig+0x2fc>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f40:	d027      	beq.n	8005f92 <UART_SetConfig+0x336>
 8005f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f46:	d817      	bhi.n	8005f78 <UART_SetConfig+0x31c>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <UART_SetConfig+0x32a>
 8005f4c:	e027      	b.n	8005f9e <UART_SetConfig+0x342>
 8005f4e:	bf00      	nop
 8005f50:	efff69f3 	.word	0xefff69f3
 8005f54:	40011000 	.word	0x40011000
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	40004400 	.word	0x40004400
 8005f60:	40004800 	.word	0x40004800
 8005f64:	40004c00 	.word	0x40004c00
 8005f68:	40005000 	.word	0x40005000
 8005f6c:	40011400 	.word	0x40011400
 8005f70:	40007800 	.word	0x40007800
 8005f74:	40007c00 	.word	0x40007c00
 8005f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f7c:	d006      	beq.n	8005f8c <UART_SetConfig+0x330>
 8005f7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f82:	d009      	beq.n	8005f98 <UART_SetConfig+0x33c>
 8005f84:	e00b      	b.n	8005f9e <UART_SetConfig+0x342>
 8005f86:	2300      	movs	r3, #0
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e00e      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e00b      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f92:	2304      	movs	r3, #4
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e008      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e005      	b.n	8005faa <UART_SetConfig+0x34e>
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	bf00      	nop
 8005fa4:	e001      	b.n	8005faa <UART_SetConfig+0x34e>
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb2:	d17f      	bne.n	80060b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005fb4:	7ffb      	ldrb	r3, [r7, #31]
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d85c      	bhi.n	8006074 <UART_SetConfig+0x418>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x364>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08006025 	.word	0x08006025
 8005fcc:	08006075 	.word	0x08006075
 8005fd0:	0800603d 	.word	0x0800603d
 8005fd4:	08006075 	.word	0x08006075
 8005fd8:	08006075 	.word	0x08006075
 8005fdc:	08006075 	.word	0x08006075
 8005fe0:	0800605d 	.word	0x0800605d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7ff f9d6 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	005a      	lsls	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	61bb      	str	r3, [r7, #24]
        break;
 8006002:	e03a      	b.n	800607a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7ff f9da 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8006008:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	005a      	lsls	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	b29b      	uxth	r3, r3
 8006020:	61bb      	str	r3, [r7, #24]
        break;
 8006022:	e02a      	b.n	800607a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	085a      	lsrs	r2, r3, #1
 800602a:	4b5f      	ldr	r3, [pc, #380]	; (80061a8 <UART_SetConfig+0x54c>)
 800602c:	4413      	add	r3, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6852      	ldr	r2, [r2, #4]
 8006032:	fbb3 f3f2 	udiv	r3, r3, r2
 8006036:	b29b      	uxth	r3, r3
 8006038:	61bb      	str	r3, [r7, #24]
        break;
 800603a:	e01e      	b.n	800607a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603c:	f7ff f8c6 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 8006040:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	005a      	lsls	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	fbb2 f3f3 	udiv	r3, r2, r3
 8006056:	b29b      	uxth	r3, r3
 8006058:	61bb      	str	r3, [r7, #24]
        break;
 800605a:	e00e      	b.n	800607a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	b29b      	uxth	r3, r3
 8006070:	61bb      	str	r3, [r7, #24]
        break;
 8006072:	e002      	b.n	800607a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	75fb      	strb	r3, [r7, #23]
        break;
 8006078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d916      	bls.n	80060ae <UART_SetConfig+0x452>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006086:	d212      	bcs.n	80060ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f023 030f 	bic.w	r3, r3, #15
 8006090:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	b29a      	uxth	r2, r3
 800609e:	897b      	ldrh	r3, [r7, #10]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	897a      	ldrh	r2, [r7, #10]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e070      	b.n	8006190 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
 80060b2:	e06d      	b.n	8006190 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	2b08      	cmp	r3, #8
 80060b8:	d859      	bhi.n	800616e <UART_SetConfig+0x512>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x464>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	08006103 	.word	0x08006103
 80060c8:	08006121 	.word	0x08006121
 80060cc:	0800616f 	.word	0x0800616f
 80060d0:	08006139 	.word	0x08006139
 80060d4:	0800616f 	.word	0x0800616f
 80060d8:	0800616f 	.word	0x0800616f
 80060dc:	0800616f 	.word	0x0800616f
 80060e0:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7ff f956 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80060e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	085a      	lsrs	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	441a      	add	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e038      	b.n	8006174 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006102:	f7ff f95b 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8006106:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	085a      	lsrs	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	fbb2 f3f3 	udiv	r3, r2, r3
 800611a:	b29b      	uxth	r3, r3
 800611c:	61bb      	str	r3, [r7, #24]
        break;
 800611e:	e029      	b.n	8006174 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	085a      	lsrs	r2, r3, #1
 8006126:	4b21      	ldr	r3, [pc, #132]	; (80061ac <UART_SetConfig+0x550>)
 8006128:	4413      	add	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6852      	ldr	r2, [r2, #4]
 800612e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006132:	b29b      	uxth	r3, r3
 8006134:	61bb      	str	r3, [r7, #24]
        break;
 8006136:	e01d      	b.n	8006174 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006138:	f7ff f848 	bl	80051cc <HAL_RCC_GetSysClockFreq>
 800613c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	085a      	lsrs	r2, r3, #1
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	441a      	add	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	b29b      	uxth	r3, r3
 8006152:	61bb      	str	r3, [r7, #24]
        break;
 8006154:	e00e      	b.n	8006174 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	b29b      	uxth	r3, r3
 800616a:	61bb      	str	r3, [r7, #24]
        break;
 800616c:	e002      	b.n	8006174 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
        break;
 8006172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	d908      	bls.n	800618c <UART_SetConfig+0x530>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006180:	d204      	bcs.n	800618c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	e001      	b.n	8006190 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800619c:	7dfb      	ldrb	r3, [r7, #23]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	01e84800 	.word	0x01e84800
 80061ac:	00f42400 	.word	0x00f42400

080061b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01a      	beq.n	80062c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ae:	d10a      	bne.n	80062c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]
  }
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006302:	f7fd f82f 	bl	8003364 <HAL_GetTick>
 8006306:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b08      	cmp	r3, #8
 8006314:	d10e      	bne.n	8006334 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006316:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f814 	bl	8006352 <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e00a      	b.n	800634a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	4613      	mov	r3, r2
 8006360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006362:	e05d      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636a:	d059      	beq.n	8006420 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636c:	f7fc fffa 	bl	8003364 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	429a      	cmp	r2, r3
 800637a:	d302      	bcc.n	8006382 <UART_WaitOnFlagUntilTimeout+0x30>
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11b      	bne.n	80063ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006390:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e042      	b.n	8006440 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02b      	beq.n	8006420 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d123      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e00f      	b.n	8006440 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	d092      	beq.n	8006364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006448:	b084      	sub	sp, #16
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	f107 001c 	add.w	r0, r7, #28
 8006456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b01      	cmp	r3, #1
 800645e:	d120      	bne.n	80064a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	4b20      	ldr	r3, [pc, #128]	; (80064f4 <USB_CoreInit+0xac>)
 8006472:	4013      	ands	r3, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006486:	2b01      	cmp	r3, #1
 8006488:	d105      	bne.n	8006496 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa52 	bl	8006940 <USB_CoreReset>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e010      	b.n	80064c4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa46 	bl	8006940 <USB_CoreReset>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10b      	bne.n	80064e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f043 0206 	orr.w	r2, r3, #6
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ee:	b004      	add	sp, #16
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	ffbdffbf 	.word	0xffbdffbf

080064f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 0201 	bic.w	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d106      	bne.n	8006546 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	e00b      	b.n	800655e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	e001      	b.n	800655e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e003      	b.n	8006566 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800655e:	2032      	movs	r0, #50	; 0x32
 8006560:	f7fc ff0c 	bl	800337c <HAL_Delay>

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006570:	b084      	sub	sp, #16
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800657e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e009      	b.n	80065a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3340      	adds	r3, #64	; 0x40
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3301      	adds	r3, #1
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	2b0e      	cmp	r3, #14
 80065a8:	d9f2      	bls.n	8006590 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d11c      	bne.n	80065ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f043 0302 	orr.w	r3, r3, #2
 80065c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	e005      	b.n	80065f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065fc:	461a      	mov	r2, r3
 80065fe:	2300      	movs	r3, #0
 8006600:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006608:	4619      	mov	r1, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006610:	461a      	mov	r2, r3
 8006612:	680b      	ldr	r3, [r1, #0]
 8006614:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	2b01      	cmp	r3, #1
 800661a:	d10c      	bne.n	8006636 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f959 	bl	80068dc <USB_SetDevSpeed>
 800662a:	e018      	b.n	800665e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800662c:	2101      	movs	r1, #1
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f954 	bl	80068dc <USB_SetDevSpeed>
 8006634:	e013      	b.n	800665e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	2b03      	cmp	r3, #3
 800663a:	d10c      	bne.n	8006656 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006642:	2100      	movs	r1, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f949 	bl	80068dc <USB_SetDevSpeed>
 800664a:	e008      	b.n	800665e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800664c:	2101      	movs	r1, #1
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f944 	bl	80068dc <USB_SetDevSpeed>
 8006654:	e003      	b.n	800665e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006656:	2103      	movs	r1, #3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f93f 	bl	80068dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800665e:	2110      	movs	r1, #16
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8f3 	bl	800684c <USB_FlushTxFifo>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f911 	bl	8006898 <USB_FlushRxFifo>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	461a      	mov	r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e043      	b.n	8006732 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c0:	d118      	bne.n	80066f4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	461a      	mov	r2, r3
 80066d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	e013      	b.n	8006706 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	461a      	mov	r2, r3
 80066ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e008      	b.n	8006706 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	461a      	mov	r2, r3
 8006702:	2300      	movs	r3, #0
 8006704:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	461a      	mov	r2, r3
 8006726:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800672a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d3b7      	bcc.n	80066aa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e043      	b.n	80067c8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006756:	d118      	bne.n	800678a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	461a      	mov	r2, r3
 800676c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e013      	b.n	800679c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	461a      	mov	r2, r3
 8006782:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e008      	b.n	800679c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006796:	461a      	mov	r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	461a      	mov	r2, r3
 80067aa:	2300      	movs	r3, #0
 80067ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	461a      	mov	r2, r3
 80067bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3301      	adds	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d3b7      	bcc.n	8006740 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f043 0210 	orr.w	r2, r3, #16
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699a      	ldr	r2, [r3, #24]
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <USB_DevInit+0x2d4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f043 0208 	orr.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d105      	bne.n	8006834 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <USB_DevInit+0x2d8>)
 800682e:	4313      	orrs	r3, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006840:	b004      	add	sp, #16
 8006842:	4770      	bx	lr
 8006844:	803c3800 	.word	0x803c3800
 8006848:	40000004 	.word	0x40000004

0800684c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	019b      	lsls	r3, r3, #6
 800685e:	f043 0220 	orr.w	r2, r3, #32
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a09      	ldr	r2, [pc, #36]	; (8006894 <USB_FlushTxFifo+0x48>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e006      	b.n	8006886 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b20      	cmp	r3, #32
 8006882:	d0f0      	beq.n	8006866 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	00030d40 	.word	0x00030d40

08006898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2210      	movs	r2, #16
 80068a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <USB_FlushRxFifo+0x40>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d901      	bls.n	80068bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e006      	b.n	80068ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d0f0      	beq.n	80068aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	00030d40 	.word	0x00030d40

080068dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068fc:	4313      	orrs	r3, r2
 80068fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006928:	f043 0302 	orr.w	r3, r3, #2
 800692c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800692e:	2003      	movs	r0, #3
 8006930:	f7fc fd24 	bl	800337c <HAL_Delay>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3301      	adds	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <USB_CoreReset+0x64>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e01b      	b.n	8006996 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	daf2      	bge.n	800694c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f043 0201 	orr.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <USB_CoreReset+0x64>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d901      	bls.n	8006988 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e006      	b.n	8006996 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b01      	cmp	r3, #1
 8006992:	d0f0      	beq.n	8006976 <USB_CoreReset+0x36>

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	00030d40 	.word	0x00030d40

080069a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	  IP_ADDRESS[0] = IP_ADDR0;
 80069ae:	4b8b      	ldr	r3, [pc, #556]	; (8006bdc <MX_LWIP_Init+0x234>)
 80069b0:	22c0      	movs	r2, #192	; 0xc0
 80069b2:	701a      	strb	r2, [r3, #0]
	  IP_ADDRESS[1] = IP_ADDR1;
 80069b4:	4b89      	ldr	r3, [pc, #548]	; (8006bdc <MX_LWIP_Init+0x234>)
 80069b6:	22a8      	movs	r2, #168	; 0xa8
 80069b8:	705a      	strb	r2, [r3, #1]
	  IP_ADDRESS[2] = IP_ADDR2;
 80069ba:	4b88      	ldr	r3, [pc, #544]	; (8006bdc <MX_LWIP_Init+0x234>)
 80069bc:	2200      	movs	r2, #0
 80069be:	709a      	strb	r2, [r3, #2]
	  IP_ADDRESS[3] = IP_ADDR3;
 80069c0:	4b86      	ldr	r3, [pc, #536]	; (8006bdc <MX_LWIP_Init+0x234>)
 80069c2:	2206      	movs	r2, #6
 80069c4:	70da      	strb	r2, [r3, #3]
	  NETMASK_ADDRESS[0] = NETMASK_ADDR0;
 80069c6:	4b86      	ldr	r3, [pc, #536]	; (8006be0 <MX_LWIP_Init+0x238>)
 80069c8:	22ff      	movs	r2, #255	; 0xff
 80069ca:	701a      	strb	r2, [r3, #0]
	  NETMASK_ADDRESS[1] = NETMASK_ADDR1;
 80069cc:	4b84      	ldr	r3, [pc, #528]	; (8006be0 <MX_LWIP_Init+0x238>)
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	705a      	strb	r2, [r3, #1]
	  NETMASK_ADDRESS[2] = NETMASK_ADDR2;
 80069d2:	4b83      	ldr	r3, [pc, #524]	; (8006be0 <MX_LWIP_Init+0x238>)
 80069d4:	22ff      	movs	r2, #255	; 0xff
 80069d6:	709a      	strb	r2, [r3, #2]
	  NETMASK_ADDRESS[3] = NETMASK_ADDR3;
 80069d8:	4b81      	ldr	r3, [pc, #516]	; (8006be0 <MX_LWIP_Init+0x238>)
 80069da:	2200      	movs	r2, #0
 80069dc:	70da      	strb	r2, [r3, #3]
	  GATEWAY_ADDRESS[0] = GW_ADDR0;
 80069de:	4b81      	ldr	r3, [pc, #516]	; (8006be4 <MX_LWIP_Init+0x23c>)
 80069e0:	22c0      	movs	r2, #192	; 0xc0
 80069e2:	701a      	strb	r2, [r3, #0]
	  GATEWAY_ADDRESS[1] = GW_ADDR1;
 80069e4:	4b7f      	ldr	r3, [pc, #508]	; (8006be4 <MX_LWIP_Init+0x23c>)
 80069e6:	22a8      	movs	r2, #168	; 0xa8
 80069e8:	705a      	strb	r2, [r3, #1]
	  GATEWAY_ADDRESS[2] = GW_ADDR2;
 80069ea:	4b7e      	ldr	r3, [pc, #504]	; (8006be4 <MX_LWIP_Init+0x23c>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	709a      	strb	r2, [r3, #2]
	  GATEWAY_ADDRESS[3] = GW_ADDR3;
 80069f0:	4b7c      	ldr	r3, [pc, #496]	; (8006be4 <MX_LWIP_Init+0x23c>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80069f6:	f000 fc36 	bl	8007266 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80069fa:	4b78      	ldr	r3, [pc, #480]	; (8006bdc <MX_LWIP_Init+0x234>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	061a      	lsls	r2, r3, #24
 8006a00:	4b76      	ldr	r3, [pc, #472]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	041b      	lsls	r3, r3, #16
 8006a06:	431a      	orrs	r2, r3
 8006a08:	4b74      	ldr	r3, [pc, #464]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a0a:	789b      	ldrb	r3, [r3, #2]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	4a72      	ldr	r2, [pc, #456]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a12:	78d2      	ldrb	r2, [r2, #3]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	061a      	lsls	r2, r3, #24
 8006a18:	4b70      	ldr	r3, [pc, #448]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	0619      	lsls	r1, r3, #24
 8006a1e:	4b6f      	ldr	r3, [pc, #444]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	4319      	orrs	r1, r3
 8006a26:	4b6d      	ldr	r3, [pc, #436]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a28:	789b      	ldrb	r3, [r3, #2]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	496b      	ldr	r1, [pc, #428]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a30:	78c9      	ldrb	r1, [r1, #3]
 8006a32:	430b      	orrs	r3, r1
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	4b67      	ldr	r3, [pc, #412]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	0619      	lsls	r1, r3, #24
 8006a42:	4b66      	ldr	r3, [pc, #408]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	4319      	orrs	r1, r3
 8006a4a:	4b64      	ldr	r3, [pc, #400]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a4c:	789b      	ldrb	r3, [r3, #2]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	430b      	orrs	r3, r1
 8006a52:	4962      	ldr	r1, [pc, #392]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a54:	78c9      	ldrb	r1, [r1, #3]
 8006a56:	430b      	orrs	r3, r1
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	4b5e      	ldr	r3, [pc, #376]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	0619      	lsls	r1, r3, #24
 8006a66:	4b5d      	ldr	r3, [pc, #372]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	4319      	orrs	r1, r3
 8006a6e:	4b5b      	ldr	r3, [pc, #364]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	430b      	orrs	r3, r1
 8006a76:	4959      	ldr	r1, [pc, #356]	; (8006bdc <MX_LWIP_Init+0x234>)
 8006a78:	78c9      	ldrb	r1, [r1, #3]
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	0e1b      	lsrs	r3, r3, #24
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	4a59      	ldr	r2, [pc, #356]	; (8006be8 <MX_LWIP_Init+0x240>)
 8006a82:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006a84:	4b56      	ldr	r3, [pc, #344]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	061a      	lsls	r2, r3, #24
 8006a8a:	4b55      	ldr	r3, [pc, #340]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	4b53      	ldr	r3, [pc, #332]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006a94:	789b      	ldrb	r3, [r3, #2]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	4a51      	ldr	r2, [pc, #324]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006a9c:	78d2      	ldrb	r2, [r2, #3]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	061a      	lsls	r2, r3, #24
 8006aa2:	4b4f      	ldr	r3, [pc, #316]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	0619      	lsls	r1, r3, #24
 8006aa8:	4b4d      	ldr	r3, [pc, #308]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	4319      	orrs	r1, r3
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006ab2:	789b      	ldrb	r3, [r3, #2]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	4949      	ldr	r1, [pc, #292]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006aba:	78c9      	ldrb	r1, [r1, #3]
 8006abc:	430b      	orrs	r3, r1
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	4b46      	ldr	r3, [pc, #280]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	0619      	lsls	r1, r3, #24
 8006acc:	4b44      	ldr	r3, [pc, #272]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	4319      	orrs	r1, r3
 8006ad4:	4b42      	ldr	r3, [pc, #264]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006ad6:	789b      	ldrb	r3, [r3, #2]
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	430b      	orrs	r3, r1
 8006adc:	4940      	ldr	r1, [pc, #256]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006ade:	78c9      	ldrb	r1, [r1, #3]
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	0619      	lsls	r1, r3, #24
 8006af0:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	4319      	orrs	r1, r3
 8006af8:	4b39      	ldr	r3, [pc, #228]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006afa:	789b      	ldrb	r3, [r3, #2]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	430b      	orrs	r3, r1
 8006b00:	4937      	ldr	r1, [pc, #220]	; (8006be0 <MX_LWIP_Init+0x238>)
 8006b02:	78c9      	ldrb	r1, [r1, #3]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	0e1b      	lsrs	r3, r3, #24
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	4a38      	ldr	r2, [pc, #224]	; (8006bec <MX_LWIP_Init+0x244>)
 8006b0c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006b0e:	4b35      	ldr	r3, [pc, #212]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	061a      	lsls	r2, r3, #24
 8006b14:	4b33      	ldr	r3, [pc, #204]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	4b31      	ldr	r3, [pc, #196]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b1e:	789b      	ldrb	r3, [r3, #2]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	4313      	orrs	r3, r2
 8006b24:	4a2f      	ldr	r2, [pc, #188]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b26:	78d2      	ldrb	r2, [r2, #3]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	061a      	lsls	r2, r3, #24
 8006b2c:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	0619      	lsls	r1, r3, #24
 8006b32:	4b2c      	ldr	r3, [pc, #176]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	4319      	orrs	r1, r3
 8006b3a:	4b2a      	ldr	r3, [pc, #168]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	430b      	orrs	r3, r1
 8006b42:	4928      	ldr	r1, [pc, #160]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b44:	78c9      	ldrb	r1, [r1, #3]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	0619      	lsls	r1, r3, #24
 8006b56:	4b23      	ldr	r3, [pc, #140]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	4319      	orrs	r1, r3
 8006b5e:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b60:	789b      	ldrb	r3, [r3, #2]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	430b      	orrs	r3, r1
 8006b66:	491f      	ldr	r1, [pc, #124]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b68:	78c9      	ldrb	r1, [r1, #3]
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	0a1b      	lsrs	r3, r3, #8
 8006b6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b72:	431a      	orrs	r2, r3
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	0619      	lsls	r1, r3, #24
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	4319      	orrs	r1, r3
 8006b82:	4b18      	ldr	r3, [pc, #96]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b84:	789b      	ldrb	r3, [r3, #2]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	4916      	ldr	r1, [pc, #88]	; (8006be4 <MX_LWIP_Init+0x23c>)
 8006b8c:	78c9      	ldrb	r1, [r1, #3]
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	0e1b      	lsrs	r3, r3, #24
 8006b92:	4313      	orrs	r3, r2
 8006b94:	4a16      	ldr	r2, [pc, #88]	; (8006bf0 <MX_LWIP_Init+0x248>)
 8006b96:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006b98:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <MX_LWIP_Init+0x24c>)
 8006b9a:	9302      	str	r3, [sp, #8]
 8006b9c:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <MX_LWIP_Init+0x250>)
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <MX_LWIP_Init+0x248>)
 8006ba6:	4a11      	ldr	r2, [pc, #68]	; (8006bec <MX_LWIP_Init+0x244>)
 8006ba8:	490f      	ldr	r1, [pc, #60]	; (8006be8 <MX_LWIP_Init+0x240>)
 8006baa:	4814      	ldr	r0, [pc, #80]	; (8006bfc <MX_LWIP_Init+0x254>)
 8006bac:	f001 f800 	bl	8007bb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006bb0:	4812      	ldr	r0, [pc, #72]	; (8006bfc <MX_LWIP_Init+0x254>)
 8006bb2:	f001 f9ad 	bl	8007f10 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006bb6:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <MX_LWIP_Init+0x254>)
 8006bb8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006bc8:	480c      	ldr	r0, [pc, #48]	; (8006bfc <MX_LWIP_Init+0x254>)
 8006bca:	f001 f9b1 	bl	8007f30 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006bce:	e002      	b.n	8006bd6 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8006bd0:	480a      	ldr	r0, [pc, #40]	; (8006bfc <MX_LWIP_Init+0x254>)
 8006bd2:	f001 fa19 	bl	8008008 <netif_set_down>
}
 8006bd6:	bf00      	nop
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000978 	.word	0x20000978
 8006be0:	20000974 	.word	0x20000974
 8006be4:	2000093c 	.word	0x2000093c
 8006be8:	20000970 	.word	0x20000970
 8006bec:	2000097c 	.word	0x2000097c
 8006bf0:	20000980 	.word	0x20000980
 8006bf4:	080116f5 	.word	0x080116f5
 8006bf8:	080071a1 	.word	0x080071a1
 8006bfc:	20000940 	.word	0x20000940

08006c00 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08e      	sub	sp, #56	; 0x38
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a4e      	ldr	r2, [pc, #312]	; (8006d58 <HAL_ETH_MspInit+0x158>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	f040 8096 	bne.w	8006d50 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006c24:	4b4d      	ldr	r3, [pc, #308]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	4a4c      	ldr	r2, [pc, #304]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c30:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c38:	623b      	str	r3, [r7, #32]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	4b47      	ldr	r3, [pc, #284]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	4a46      	ldr	r2, [pc, #280]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c46:	6313      	str	r3, [r2, #48]	; 0x30
 8006c48:	4b44      	ldr	r3, [pc, #272]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4b41      	ldr	r3, [pc, #260]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	4a40      	ldr	r2, [pc, #256]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c60:	4b3e      	ldr	r3, [pc, #248]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c6c:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	4a3a      	ldr	r2, [pc, #232]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c72:	f043 0304 	orr.w	r3, r3, #4
 8006c76:	6313      	str	r3, [r2, #48]	; 0x30
 8006c78:	4b38      	ldr	r3, [pc, #224]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c84:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	4a34      	ldr	r2, [pc, #208]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c90:	4b32      	ldr	r3, [pc, #200]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c9c:	4b2f      	ldr	r3, [pc, #188]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	4a2e      	ldr	r2, [pc, #184]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006ca2:	f043 0302 	orr.w	r3, r3, #2
 8006ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca8:	4b2c      	ldr	r3, [pc, #176]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006cb4:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	4a28      	ldr	r2, [pc, #160]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc0:	4b26      	ldr	r3, [pc, #152]	; (8006d5c <HAL_ETH_MspInit+0x15c>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006ccc:	2332      	movs	r3, #50	; 0x32
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006cdc:	230b      	movs	r3, #11
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	481e      	ldr	r0, [pc, #120]	; (8006d60 <HAL_ETH_MspInit+0x160>)
 8006ce8:	f7fd fbc4 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006cec:	2386      	movs	r3, #134	; 0x86
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006cfc:	230b      	movs	r3, #11
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d04:	4619      	mov	r1, r3
 8006d06:	4817      	ldr	r0, [pc, #92]	; (8006d64 <HAL_ETH_MspInit+0x164>)
 8006d08:	f7fd fbb4 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d12:	2302      	movs	r3, #2
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d1e:	230b      	movs	r3, #11
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d26:	4619      	mov	r1, r3
 8006d28:	480f      	ldr	r0, [pc, #60]	; (8006d68 <HAL_ETH_MspInit+0x168>)
 8006d2a:	f7fd fba3 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006d2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d34:	2302      	movs	r3, #2
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d40:	230b      	movs	r3, #11
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4808      	ldr	r0, [pc, #32]	; (8006d6c <HAL_ETH_MspInit+0x16c>)
 8006d4c:	f7fd fb92 	bl	8004474 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d50:	bf00      	nop
 8006d52:	3738      	adds	r7, #56	; 0x38
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40028000 	.word	0x40028000
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	40020800 	.word	0x40020800
 8006d64:	40020000 	.word	0x40020000
 8006d68:	40020400 	.word	0x40020400
 8006d6c:	40021800 	.word	0x40021800

08006d70 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006d7c:	4b49      	ldr	r3, [pc, #292]	; (8006ea4 <low_level_init+0x134>)
 8006d7e:	4a4a      	ldr	r2, [pc, #296]	; (8006ea8 <low_level_init+0x138>)
 8006d80:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006d82:	4b48      	ldr	r3, [pc, #288]	; (8006ea4 <low_level_init+0x134>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006d88:	4b46      	ldr	r3, [pc, #280]	; (8006ea4 <low_level_init+0x134>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006d96:	23e1      	movs	r3, #225	; 0xe1
 8006d98:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006da2:	2300      	movs	r3, #0
 8006da4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006da6:	4a3f      	ldr	r2, [pc, #252]	; (8006ea4 <low_level_init+0x134>)
 8006da8:	f107 0308 	add.w	r3, r7, #8
 8006dac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006dae:	4b3d      	ldr	r3, [pc, #244]	; (8006ea4 <low_level_init+0x134>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006db4:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <low_level_init+0x134>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006dba:	4b3a      	ldr	r3, [pc, #232]	; (8006ea4 <low_level_init+0x134>)
 8006dbc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006dc0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006dc2:	4838      	ldr	r0, [pc, #224]	; (8006ea4 <low_level_init+0x134>)
 8006dc4:	f7fc fbe2 	bl	800358c <HAL_ETH_Init>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d108      	bne.n	8006de4 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006dd8:	f043 0304 	orr.w	r3, r3, #4
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006de4:	2304      	movs	r3, #4
 8006de6:	4a31      	ldr	r2, [pc, #196]	; (8006eac <low_level_init+0x13c>)
 8006de8:	4931      	ldr	r1, [pc, #196]	; (8006eb0 <low_level_init+0x140>)
 8006dea:	482e      	ldr	r0, [pc, #184]	; (8006ea4 <low_level_init+0x134>)
 8006dec:	f7fc fd6a 	bl	80038c4 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006df0:	2304      	movs	r3, #4
 8006df2:	4a30      	ldr	r2, [pc, #192]	; (8006eb4 <low_level_init+0x144>)
 8006df4:	4930      	ldr	r1, [pc, #192]	; (8006eb8 <low_level_init+0x148>)
 8006df6:	482b      	ldr	r0, [pc, #172]	; (8006ea4 <low_level_init+0x134>)
 8006df8:	f7fc fdcd 	bl	8003996 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2206      	movs	r2, #6
 8006e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006e04:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <low_level_init+0x134>)
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	781a      	ldrb	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006e10:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <low_level_init+0x134>)
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	785a      	ldrb	r2, [r3, #1]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006e1c:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <low_level_init+0x134>)
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	789a      	ldrb	r2, [r3, #2]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006e28:	4b1e      	ldr	r3, [pc, #120]	; (8006ea4 <low_level_init+0x134>)
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	78da      	ldrb	r2, [r3, #3]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006e34:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <low_level_init+0x134>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	791a      	ldrb	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006e40:	4b18      	ldr	r3, [pc, #96]	; (8006ea4 <low_level_init+0x134>)
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	795a      	ldrb	r2, [r3, #5]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006e52:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006e5a:	f043 030a 	orr.w	r3, r3, #10
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006e66:	480f      	ldr	r0, [pc, #60]	; (8006ea4 <low_level_init+0x134>)
 8006e68:	f7fd f83e 	bl	8003ee8 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006e6c:	f107 0310 	add.w	r3, r7, #16
 8006e70:	461a      	mov	r2, r3
 8006e72:	211d      	movs	r1, #29
 8006e74:	480b      	ldr	r0, [pc, #44]	; (8006ea4 <low_level_init+0x134>)
 8006e76:	f7fc ff69 	bl	8003d4c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f043 030b 	orr.w	r3, r3, #11
 8006e80:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	461a      	mov	r2, r3
 8006e86:	211d      	movs	r1, #29
 8006e88:	4806      	ldr	r0, [pc, #24]	; (8006ea4 <low_level_init+0x134>)
 8006e8a:	f7fc ffc7 	bl	8003e1c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006e8e:	f107 0310 	add.w	r3, r7, #16
 8006e92:	461a      	mov	r2, r3
 8006e94:	211d      	movs	r1, #29
 8006e96:	4803      	ldr	r0, [pc, #12]	; (8006ea4 <low_level_init+0x134>)
 8006e98:	f7fc ff58 	bl	8003d4c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20002254 	.word	0x20002254
 8006ea8:	40028000 	.word	0x40028000
 8006eac:	2000229c 	.word	0x2000229c
 8006eb0:	20000984 	.word	0x20000984
 8006eb4:	20000a04 	.word	0x20000a04
 8006eb8:	200021d4 	.word	0x200021d4

08006ebc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	; 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006ec6:	4b4b      	ldr	r3, [pc, #300]	; (8006ff4 <low_level_output+0x138>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006ede:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <low_level_output+0x138>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	623b      	str	r3, [r7, #32]
 8006eec:	e05a      	b.n	8006fa4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da03      	bge.n	8006efe <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006ef6:	23f8      	movs	r3, #248	; 0xf8
 8006ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006efc:	e05c      	b.n	8006fb8 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	895b      	ldrh	r3, [r3, #10]
 8006f02:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006f08:	e02f      	b.n	8006f6a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	18d0      	adds	r0, r2, r3
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	18d1      	adds	r1, r2, r3
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	f00a fd20 	bl	8011966 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da03      	bge.n	8006f3c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006f34:	23f8      	movs	r3, #248	; 0xf8
 8006f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006f3a:	e03d      	b.n	8006fb8 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006f4c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006f58:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006f64:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d8c8      	bhi.n	8006f0a <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	18d0      	adds	r0, r2, r3
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f00a fcec 	bl	8011966 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	623b      	str	r3, [r7, #32]
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1a1      	bne.n	8006eee <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006faa:	6979      	ldr	r1, [r7, #20]
 8006fac:	4811      	ldr	r0, [pc, #68]	; (8006ff4 <low_level_output+0x138>)
 8006fae:	f7fc fd5f 	bl	8003a70 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <low_level_output+0x138>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f241 0314 	movw	r3, #4116	; 0x1014
 8006fc0:	4413      	add	r3, r2
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00d      	beq.n	8006fe8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <low_level_output+0x138>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	f241 0314 	movw	r3, #4116	; 0x1014
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <low_level_output+0x138>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	f241 0304 	movw	r3, #4100	; 0x1004
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3728      	adds	r7, #40	; 0x28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20002254 	.word	0x20002254

08006ff8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08c      	sub	sp, #48	; 0x30
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800701c:	484f      	ldr	r0, [pc, #316]	; (800715c <low_level_input+0x164>)
 800701e:	f7fc fe11 	bl	8003c44 <HAL_ETH_GetReceivedFrame>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <low_level_input+0x34>
  
    return NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	e092      	b.n	8007152 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800702c:	4b4b      	ldr	r3, [pc, #300]	; (800715c <low_level_input+0x164>)
 800702e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007030:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007032:	4b4a      	ldr	r3, [pc, #296]	; (800715c <low_level_input+0x164>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800703e:	89fb      	ldrh	r3, [r7, #14]
 8007040:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007044:	4619      	mov	r1, r3
 8007046:	2000      	movs	r0, #0
 8007048:	f001 f89a 	bl	8008180 <pbuf_alloc>
 800704c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d04b      	beq.n	80070ec <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007054:	4b41      	ldr	r3, [pc, #260]	; (800715c <low_level_input+0x164>)
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
 8007062:	e040      	b.n	80070e6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	895b      	ldrh	r3, [r3, #10]
 8007068:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800706e:	e021      	b.n	80070b4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	18d0      	adds	r0, r2, r3
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	18d1      	adds	r1, r2, r3
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	461a      	mov	r2, r3
 8007088:	f00a fc6d 	bl	8011966 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4413      	add	r3, r2
 800709e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80070a2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80070ae:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80070be:	4293      	cmp	r3, r2
 80070c0:	d8d6      	bhi.n	8007070 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	18d0      	adds	r0, r2, r3
 80070ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	4619      	mov	r1, r3
 80070d4:	f00a fc47 	bl	8011966 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4413      	add	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1bb      	bne.n	8007064 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <low_level_input+0x164>)
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	e00b      	b.n	8007110 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3301      	adds	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	4b12      	ldr	r3, [pc, #72]	; (800715c <low_level_input+0x164>)
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	d3ee      	bcc.n	80070f8 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800711a:	4b10      	ldr	r3, [pc, #64]	; (800715c <low_level_input+0x164>)
 800711c:	2200      	movs	r2, #0
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8007120:	4b0e      	ldr	r3, [pc, #56]	; (800715c <low_level_input+0x164>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	f241 0314 	movw	r3, #4116	; 0x1014
 8007128:	4413      	add	r3, r2
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00d      	beq.n	8007150 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <low_level_input+0x164>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	f241 0314 	movw	r3, #4116	; 0x1014
 800713c:	4413      	add	r3, r2
 800713e:	2280      	movs	r2, #128	; 0x80
 8007140:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <low_level_input+0x164>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f241 0308 	movw	r3, #4104	; 0x1008
 800714a:	4413      	add	r3, r2
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007152:	4618      	mov	r0, r3
 8007154:	3730      	adds	r7, #48	; 0x30
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20002254 	.word	0x20002254

08007160 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff ff45 	bl	8006ff8 <low_level_input>
 800716e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d010      	beq.n	8007198 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	4798      	blx	r3
 8007180:	4603      	mov	r3, r0
 8007182:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8007184:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f001 fad7 	bl	8008740 <pbuf_free>
    p = NULL;    
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	e000      	b.n	800719a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007198:	bf00      	nop
  }
}
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <ethernetif_init+0x1c>
 80071ae:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <ethernetif_init+0x48>)
 80071b0:	f240 2211 	movw	r2, #529	; 0x211
 80071b4:	490d      	ldr	r1, [pc, #52]	; (80071ec <ethernetif_init+0x4c>)
 80071b6:	480e      	ldr	r0, [pc, #56]	; (80071f0 <ethernetif_init+0x50>)
 80071b8:	f00a fc90 	bl	8011adc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2273      	movs	r2, #115	; 0x73
 80071c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2274      	movs	r2, #116	; 0x74
 80071c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <ethernetif_init+0x54>)
 80071d0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a08      	ldr	r2, [pc, #32]	; (80071f8 <ethernetif_init+0x58>)
 80071d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fdc9 	bl	8006d70 <low_level_init>

  return ERR_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	0801443c 	.word	0x0801443c
 80071ec:	08014458 	.word	0x08014458
 80071f0:	08014468 	.word	0x08014468
 80071f4:	0800fbc5 	.word	0x0800fbc5
 80071f8:	08006ebd 	.word	0x08006ebd

080071fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007200:	f7fc f8b0 	bl	8003364 <HAL_GetTick>
 8007204:	4603      	mov	r3, r0
}
 8007206:	4618      	mov	r0, r3
 8007208:	bd80      	pop	{r7, pc}

0800720a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	4603      	mov	r3, r0
 8007212:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	b21a      	sxth	r2, r3
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	0a1b      	lsrs	r3, r3, #8
 800721e:	b29b      	uxth	r3, r3
 8007220:	b21b      	sxth	r3, r3
 8007222:	4313      	orrs	r3, r2
 8007224:	b21b      	sxth	r3, r3
 8007226:	b29b      	uxth	r3, r3
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	061a      	lsls	r2, r3, #24
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	0e1b      	lsrs	r3, r3, #24
 8007258:	4313      	orrs	r3, r2
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007270:	f000 f8d4 	bl	800741c <mem_init>
  memp_init();
 8007274:	f000 fbda 	bl	8007a2c <memp_init>
  pbuf_init();
  netif_init();
 8007278:	f000 fc92 	bl	8007ba0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800727c:	f007 fe9c 	bl	800efb8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007280:	f001 fcfc 	bl	8008c7c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007284:	f007 fe10 	bl	800eea8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007288:	bf00      	nop
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <ptr_to_mem+0x20>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	4413      	add	r3, r2
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000228 	.word	0x20000228

080072b4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a05      	ldr	r2, [pc, #20]	; (80072d4 <mem_to_ptr+0x20>)
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	b29b      	uxth	r3, r3
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000228 	.word	0x20000228

080072d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80072d8:	b590      	push	{r4, r7, lr}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80072e0:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <plug_holes+0x120>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d206      	bcs.n	80072f8 <plug_holes+0x20>
 80072ea:	4b44      	ldr	r3, [pc, #272]	; (80073fc <plug_holes+0x124>)
 80072ec:	f240 12df 	movw	r2, #479	; 0x1df
 80072f0:	4943      	ldr	r1, [pc, #268]	; (8007400 <plug_holes+0x128>)
 80072f2:	4844      	ldr	r0, [pc, #272]	; (8007404 <plug_holes+0x12c>)
 80072f4:	f00a fbf2 	bl	8011adc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80072f8:	4b43      	ldr	r3, [pc, #268]	; (8007408 <plug_holes+0x130>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d306      	bcc.n	8007310 <plug_holes+0x38>
 8007302:	4b3e      	ldr	r3, [pc, #248]	; (80073fc <plug_holes+0x124>)
 8007304:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007308:	4940      	ldr	r1, [pc, #256]	; (800740c <plug_holes+0x134>)
 800730a:	483e      	ldr	r0, [pc, #248]	; (8007404 <plug_holes+0x12c>)
 800730c:	f00a fbe6 	bl	8011adc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	791b      	ldrb	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <plug_holes+0x4e>
 8007318:	4b38      	ldr	r3, [pc, #224]	; (80073fc <plug_holes+0x124>)
 800731a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800731e:	493c      	ldr	r1, [pc, #240]	; (8007410 <plug_holes+0x138>)
 8007320:	4838      	ldr	r0, [pc, #224]	; (8007404 <plug_holes+0x12c>)
 8007322:	f00a fbdb 	bl	8011adc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800732e:	d906      	bls.n	800733e <plug_holes+0x66>
 8007330:	4b32      	ldr	r3, [pc, #200]	; (80073fc <plug_holes+0x124>)
 8007332:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007336:	4937      	ldr	r1, [pc, #220]	; (8007414 <plug_holes+0x13c>)
 8007338:	4832      	ldr	r0, [pc, #200]	; (8007404 <plug_holes+0x12c>)
 800733a:	f00a fbcf 	bl	8011adc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff ffa4 	bl	8007290 <ptr_to_mem>
 8007348:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	429a      	cmp	r2, r3
 8007350:	d024      	beq.n	800739c <plug_holes+0xc4>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d120      	bne.n	800739c <plug_holes+0xc4>
 800735a:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <plug_holes+0x130>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	429a      	cmp	r2, r3
 8007362:	d01b      	beq.n	800739c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007364:	4b2c      	ldr	r3, [pc, #176]	; (8007418 <plug_holes+0x140>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	429a      	cmp	r2, r3
 800736c:	d102      	bne.n	8007374 <plug_holes+0x9c>
      lfree = mem;
 800736e:	4a2a      	ldr	r2, [pc, #168]	; (8007418 <plug_holes+0x140>)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	881a      	ldrh	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007384:	d00a      	beq.n	800739c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ff80 	bl	8007290 <ptr_to_mem>
 8007390:	4604      	mov	r4, r0
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff ff8e 	bl	80072b4 <mem_to_ptr>
 8007398:	4603      	mov	r3, r0
 800739a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff ff75 	bl	8007290 <ptr_to_mem>
 80073a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d01f      	beq.n	80073f0 <plug_holes+0x118>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	791b      	ldrb	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11b      	bne.n	80073f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <plug_holes+0x140>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d102      	bne.n	80073c8 <plug_holes+0xf0>
      lfree = pmem;
 80073c2:	4a15      	ldr	r2, [pc, #84]	; (8007418 <plug_holes+0x140>)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	881a      	ldrh	r2, [r3, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073d8:	d00a      	beq.n	80073f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff ff56 	bl	8007290 <ptr_to_mem>
 80073e4:	4604      	mov	r4, r0
 80073e6:	68b8      	ldr	r0, [r7, #8]
 80073e8:	f7ff ff64 	bl	80072b4 <mem_to_ptr>
 80073ec:	4603      	mov	r3, r0
 80073ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd90      	pop	{r4, r7, pc}
 80073f8:	20000228 	.word	0x20000228
 80073fc:	08014490 	.word	0x08014490
 8007400:	080144c0 	.word	0x080144c0
 8007404:	080144d8 	.word	0x080144d8
 8007408:	2000022c 	.word	0x2000022c
 800740c:	08014500 	.word	0x08014500
 8007410:	0801451c 	.word	0x0801451c
 8007414:	08014538 	.word	0x08014538
 8007418:	20000230 	.word	0x20000230

0800741c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007422:	4b18      	ldr	r3, [pc, #96]	; (8007484 <mem_init+0x68>)
 8007424:	3303      	adds	r3, #3
 8007426:	f023 0303 	bic.w	r3, r3, #3
 800742a:	461a      	mov	r2, r3
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <mem_init+0x6c>)
 800742e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007430:	4b15      	ldr	r3, [pc, #84]	; (8007488 <mem_init+0x6c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800743c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800744a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800744e:	f7ff ff1f 	bl	8007290 <ptr_to_mem>
 8007452:	4602      	mov	r2, r0
 8007454:	4b0d      	ldr	r3, [pc, #52]	; (800748c <mem_init+0x70>)
 8007456:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <mem_init+0x70>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <mem_init+0x70>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007468:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800746a:	4b08      	ldr	r3, [pc, #32]	; (800748c <mem_init+0x70>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007472:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <mem_init+0x6c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a05      	ldr	r2, [pc, #20]	; (8007490 <mem_init+0x74>)
 800747a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800747c:	bf00      	nop
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20003a84 	.word	0x20003a84
 8007488:	20000228 	.word	0x20000228
 800748c:	2000022c 	.word	0x2000022c
 8007490:	20000230 	.word	0x20000230

08007494 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ff09 	bl	80072b4 <mem_to_ptr>
 80074a2:	4603      	mov	r3, r0
 80074a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fef0 	bl	8007290 <ptr_to_mem>
 80074b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff feea 	bl	8007290 <ptr_to_mem>
 80074bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074c6:	d818      	bhi.n	80074fa <mem_link_valid+0x66>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	885b      	ldrh	r3, [r3, #2]
 80074cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074d0:	d813      	bhi.n	80074fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80074d6:	8afa      	ldrh	r2, [r7, #22]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d004      	beq.n	80074e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	8afa      	ldrh	r2, [r7, #22]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d109      	bne.n	80074fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80074e6:	4b08      	ldr	r3, [pc, #32]	; (8007508 <mem_link_valid+0x74>)
 80074e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d006      	beq.n	80074fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	8afa      	ldrh	r2, [r7, #22]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d001      	beq.n	80074fe <mem_link_valid+0x6a>
    return 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <mem_link_valid+0x6c>
  }
  return 1;
 80074fe:	2301      	movs	r3, #1
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	2000022c 	.word	0x2000022c

0800750c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04c      	beq.n	80075b4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <mem_free+0xb0>)
 8007526:	f240 2273 	movw	r2, #627	; 0x273
 800752a:	4925      	ldr	r1, [pc, #148]	; (80075c0 <mem_free+0xb4>)
 800752c:	4825      	ldr	r0, [pc, #148]	; (80075c4 <mem_free+0xb8>)
 800752e:	f00a fad5 	bl	8011adc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007532:	e040      	b.n	80075b6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3b08      	subs	r3, #8
 8007538:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800753a:	4b23      	ldr	r3, [pc, #140]	; (80075c8 <mem_free+0xbc>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	429a      	cmp	r2, r3
 8007542:	d306      	bcc.n	8007552 <mem_free+0x46>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f103 020c 	add.w	r2, r3, #12
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <mem_free+0xc0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	429a      	cmp	r2, r3
 8007550:	d907      	bls.n	8007562 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007552:	4b1a      	ldr	r3, [pc, #104]	; (80075bc <mem_free+0xb0>)
 8007554:	f240 227f 	movw	r2, #639	; 0x27f
 8007558:	491d      	ldr	r1, [pc, #116]	; (80075d0 <mem_free+0xc4>)
 800755a:	481a      	ldr	r0, [pc, #104]	; (80075c4 <mem_free+0xb8>)
 800755c:	f00a fabe 	bl	8011adc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007560:	e029      	b.n	80075b6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	791b      	ldrb	r3, [r3, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d107      	bne.n	800757a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800756a:	4b14      	ldr	r3, [pc, #80]	; (80075bc <mem_free+0xb0>)
 800756c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007570:	4918      	ldr	r1, [pc, #96]	; (80075d4 <mem_free+0xc8>)
 8007572:	4814      	ldr	r0, [pc, #80]	; (80075c4 <mem_free+0xb8>)
 8007574:	f00a fab2 	bl	8011adc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007578:	e01d      	b.n	80075b6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff ff8a 	bl	8007494 <mem_link_valid>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007586:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <mem_free+0xb0>)
 8007588:	f240 2295 	movw	r2, #661	; 0x295
 800758c:	4912      	ldr	r1, [pc, #72]	; (80075d8 <mem_free+0xcc>)
 800758e:	480d      	ldr	r0, [pc, #52]	; (80075c4 <mem_free+0xb8>)
 8007590:	f00a faa4 	bl	8011adc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007594:	e00f      	b.n	80075b6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800759c:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <mem_free+0xd0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d202      	bcs.n	80075ac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80075a6:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <mem_free+0xd0>)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7ff fe93 	bl	80072d8 <plug_holes>
 80075b2:	e000      	b.n	80075b6 <mem_free+0xaa>
    return;
 80075b4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	08014490 	.word	0x08014490
 80075c0:	08014564 	.word	0x08014564
 80075c4:	080144d8 	.word	0x080144d8
 80075c8:	20000228 	.word	0x20000228
 80075cc:	2000022c 	.word	0x2000022c
 80075d0:	08014588 	.word	0x08014588
 80075d4:	080145a4 	.word	0x080145a4
 80075d8:	080145cc 	.word	0x080145cc
 80075dc:	20000230 	.word	0x20000230

080075e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80075ec:	887b      	ldrh	r3, [r7, #2]
 80075ee:	3303      	adds	r3, #3
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80075f8:	8bfb      	ldrh	r3, [r7, #30]
 80075fa:	2b0b      	cmp	r3, #11
 80075fc:	d801      	bhi.n	8007602 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80075fe:	230c      	movs	r3, #12
 8007600:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007602:	8bfb      	ldrh	r3, [r7, #30]
 8007604:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007608:	d803      	bhi.n	8007612 <mem_trim+0x32>
 800760a:	8bfa      	ldrh	r2, [r7, #30]
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	429a      	cmp	r2, r3
 8007610:	d201      	bcs.n	8007616 <mem_trim+0x36>
    return NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	e0cc      	b.n	80077b0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007616:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <mem_trim+0x1d8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d304      	bcc.n	800762a <mem_trim+0x4a>
 8007620:	4b66      	ldr	r3, [pc, #408]	; (80077bc <mem_trim+0x1dc>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d306      	bcc.n	8007638 <mem_trim+0x58>
 800762a:	4b65      	ldr	r3, [pc, #404]	; (80077c0 <mem_trim+0x1e0>)
 800762c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007630:	4964      	ldr	r1, [pc, #400]	; (80077c4 <mem_trim+0x1e4>)
 8007632:	4865      	ldr	r0, [pc, #404]	; (80077c8 <mem_trim+0x1e8>)
 8007634:	f00a fa52 	bl	8011adc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007638:	4b5f      	ldr	r3, [pc, #380]	; (80077b8 <mem_trim+0x1d8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d304      	bcc.n	800764c <mem_trim+0x6c>
 8007642:	4b5e      	ldr	r3, [pc, #376]	; (80077bc <mem_trim+0x1dc>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d301      	bcc.n	8007650 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	e0af      	b.n	80077b0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3b08      	subs	r3, #8
 8007654:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007656:	69b8      	ldr	r0, [r7, #24]
 8007658:	f7ff fe2c 	bl	80072b4 <mem_to_ptr>
 800765c:	4603      	mov	r3, r0
 800765e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	8afb      	ldrh	r3, [r7, #22]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b08      	subs	r3, #8
 800766c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800766e:	8bfa      	ldrh	r2, [r7, #30]
 8007670:	8abb      	ldrh	r3, [r7, #20]
 8007672:	429a      	cmp	r2, r3
 8007674:	d906      	bls.n	8007684 <mem_trim+0xa4>
 8007676:	4b52      	ldr	r3, [pc, #328]	; (80077c0 <mem_trim+0x1e0>)
 8007678:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800767c:	4953      	ldr	r1, [pc, #332]	; (80077cc <mem_trim+0x1ec>)
 800767e:	4852      	ldr	r0, [pc, #328]	; (80077c8 <mem_trim+0x1e8>)
 8007680:	f00a fa2c 	bl	8011adc <iprintf>
  if (newsize > size) {
 8007684:	8bfa      	ldrh	r2, [r7, #30]
 8007686:	8abb      	ldrh	r3, [r7, #20]
 8007688:	429a      	cmp	r2, r3
 800768a:	d901      	bls.n	8007690 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	e08f      	b.n	80077b0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007690:	8bfa      	ldrh	r2, [r7, #30]
 8007692:	8abb      	ldrh	r3, [r7, #20]
 8007694:	429a      	cmp	r2, r3
 8007696:	d101      	bne.n	800769c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	e089      	b.n	80077b0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fdf5 	bl	8007290 <ptr_to_mem>
 80076a6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	791b      	ldrb	r3, [r3, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d13f      	bne.n	8007730 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076b8:	d106      	bne.n	80076c8 <mem_trim+0xe8>
 80076ba:	4b41      	ldr	r3, [pc, #260]	; (80077c0 <mem_trim+0x1e0>)
 80076bc:	f240 22f5 	movw	r2, #757	; 0x2f5
 80076c0:	4943      	ldr	r1, [pc, #268]	; (80077d0 <mem_trim+0x1f0>)
 80076c2:	4841      	ldr	r0, [pc, #260]	; (80077c8 <mem_trim+0x1e8>)
 80076c4:	f00a fa0a 	bl	8011adc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80076ce:	8afa      	ldrh	r2, [r7, #22]
 80076d0:	8bfb      	ldrh	r3, [r7, #30]
 80076d2:	4413      	add	r3, r2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3308      	adds	r3, #8
 80076d8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80076da:	4b3e      	ldr	r3, [pc, #248]	; (80077d4 <mem_trim+0x1f4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d106      	bne.n	80076f2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80076e4:	89fb      	ldrh	r3, [r7, #14]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fdd2 	bl	8007290 <ptr_to_mem>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b39      	ldr	r3, [pc, #228]	; (80077d4 <mem_trim+0x1f4>)
 80076f0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80076f2:	89fb      	ldrh	r3, [r7, #14]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7ff fdcb 	bl	8007290 <ptr_to_mem>
 80076fa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2200      	movs	r2, #0
 8007700:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	89ba      	ldrh	r2, [r7, #12]
 8007706:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	8afa      	ldrh	r2, [r7, #22]
 800770c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	89fa      	ldrh	r2, [r7, #14]
 8007712:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800771c:	d047      	beq.n	80077ae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fdb4 	bl	8007290 <ptr_to_mem>
 8007728:	4602      	mov	r2, r0
 800772a:	89fb      	ldrh	r3, [r7, #14]
 800772c:	8053      	strh	r3, [r2, #2]
 800772e:	e03e      	b.n	80077ae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007730:	8bfb      	ldrh	r3, [r7, #30]
 8007732:	f103 0214 	add.w	r2, r3, #20
 8007736:	8abb      	ldrh	r3, [r7, #20]
 8007738:	429a      	cmp	r2, r3
 800773a:	d838      	bhi.n	80077ae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800773c:	8afa      	ldrh	r2, [r7, #22]
 800773e:	8bfb      	ldrh	r3, [r7, #30]
 8007740:	4413      	add	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	3308      	adds	r3, #8
 8007746:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007750:	d106      	bne.n	8007760 <mem_trim+0x180>
 8007752:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <mem_trim+0x1e0>)
 8007754:	f240 3216 	movw	r2, #790	; 0x316
 8007758:	491d      	ldr	r1, [pc, #116]	; (80077d0 <mem_trim+0x1f0>)
 800775a:	481b      	ldr	r0, [pc, #108]	; (80077c8 <mem_trim+0x1e8>)
 800775c:	f00a f9be 	bl	8011adc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007760:	89fb      	ldrh	r3, [r7, #14]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fd94 	bl	8007290 <ptr_to_mem>
 8007768:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800776a:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <mem_trim+0x1f4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d202      	bcs.n	800777a <mem_trim+0x19a>
      lfree = mem2;
 8007774:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <mem_trim+0x1f4>)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2200      	movs	r2, #0
 800777e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	881a      	ldrh	r2, [r3, #0]
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	8afa      	ldrh	r2, [r7, #22]
 800778c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	89fa      	ldrh	r2, [r7, #14]
 8007792:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800779c:	d007      	beq.n	80077ae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fd74 	bl	8007290 <ptr_to_mem>
 80077a8:	4602      	mov	r2, r0
 80077aa:	89fb      	ldrh	r3, [r7, #14]
 80077ac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80077ae:	687b      	ldr	r3, [r7, #4]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000228 	.word	0x20000228
 80077bc:	2000022c 	.word	0x2000022c
 80077c0:	08014490 	.word	0x08014490
 80077c4:	08014600 	.word	0x08014600
 80077c8:	080144d8 	.word	0x080144d8
 80077cc:	08014618 	.word	0x08014618
 80077d0:	08014638 	.word	0x08014638
 80077d4:	20000230 	.word	0x20000230

080077d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <mem_malloc+0x14>
    return NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e0d9      	b.n	80079a0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	3303      	adds	r3, #3
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80077f8:	8bbb      	ldrh	r3, [r7, #28]
 80077fa:	2b0b      	cmp	r3, #11
 80077fc:	d801      	bhi.n	8007802 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80077fe:	230c      	movs	r3, #12
 8007800:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007802:	8bbb      	ldrh	r3, [r7, #28]
 8007804:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007808:	d803      	bhi.n	8007812 <mem_malloc+0x3a>
 800780a:	8bba      	ldrh	r2, [r7, #28]
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	429a      	cmp	r2, r3
 8007810:	d201      	bcs.n	8007816 <mem_malloc+0x3e>
    return NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	e0c4      	b.n	80079a0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007816:	4b64      	ldr	r3, [pc, #400]	; (80079a8 <mem_malloc+0x1d0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fd4a 	bl	80072b4 <mem_to_ptr>
 8007820:	4603      	mov	r3, r0
 8007822:	83fb      	strh	r3, [r7, #30]
 8007824:	e0b4      	b.n	8007990 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007826:	8bfb      	ldrh	r3, [r7, #30]
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff fd31 	bl	8007290 <ptr_to_mem>
 800782e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	791b      	ldrb	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 80a4 	bne.w	8007982 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	8bfb      	ldrh	r3, [r7, #30]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	f1a3 0208 	sub.w	r2, r3, #8
 8007848:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800784a:	429a      	cmp	r2, r3
 800784c:	f0c0 8099 	bcc.w	8007982 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	8bfb      	ldrh	r3, [r7, #30]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f1a3 0208 	sub.w	r2, r3, #8
 800785e:	8bbb      	ldrh	r3, [r7, #28]
 8007860:	3314      	adds	r3, #20
 8007862:	429a      	cmp	r2, r3
 8007864:	d333      	bcc.n	80078ce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007866:	8bfa      	ldrh	r2, [r7, #30]
 8007868:	8bbb      	ldrh	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	b29b      	uxth	r3, r3
 800786e:	3308      	adds	r3, #8
 8007870:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007872:	8a7b      	ldrh	r3, [r7, #18]
 8007874:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007878:	d106      	bne.n	8007888 <mem_malloc+0xb0>
 800787a:	4b4c      	ldr	r3, [pc, #304]	; (80079ac <mem_malloc+0x1d4>)
 800787c:	f240 3287 	movw	r2, #903	; 0x387
 8007880:	494b      	ldr	r1, [pc, #300]	; (80079b0 <mem_malloc+0x1d8>)
 8007882:	484c      	ldr	r0, [pc, #304]	; (80079b4 <mem_malloc+0x1dc>)
 8007884:	f00a f92a 	bl	8011adc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007888:	8a7b      	ldrh	r3, [r7, #18]
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fd00 	bl	8007290 <ptr_to_mem>
 8007890:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	881a      	ldrh	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8bfa      	ldrh	r2, [r7, #30]
 80078a4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	8a7a      	ldrh	r2, [r7, #18]
 80078aa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2201      	movs	r2, #1
 80078b0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80078ba:	d00b      	beq.n	80078d4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fce5 	bl	8007290 <ptr_to_mem>
 80078c6:	4602      	mov	r2, r0
 80078c8:	8a7b      	ldrh	r3, [r7, #18]
 80078ca:	8053      	strh	r3, [r2, #2]
 80078cc:	e002      	b.n	80078d4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2201      	movs	r2, #1
 80078d2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80078d4:	4b34      	ldr	r3, [pc, #208]	; (80079a8 <mem_malloc+0x1d0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d127      	bne.n	800792e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80078de:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <mem_malloc+0x1d0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80078e4:	e005      	b.n	80078f2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff fcd0 	bl	8007290 <ptr_to_mem>
 80078f0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <mem_malloc+0x12c>
 80078fa:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <mem_malloc+0x1e0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	d1f0      	bne.n	80078e6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007904:	4a28      	ldr	r2, [pc, #160]	; (80079a8 <mem_malloc+0x1d0>)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800790a:	4b27      	ldr	r3, [pc, #156]	; (80079a8 <mem_malloc+0x1d0>)
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b2a      	ldr	r3, [pc, #168]	; (80079b8 <mem_malloc+0x1e0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d00b      	beq.n	800792e <mem_malloc+0x156>
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <mem_malloc+0x1d0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	791b      	ldrb	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d006      	beq.n	800792e <mem_malloc+0x156>
 8007920:	4b22      	ldr	r3, [pc, #136]	; (80079ac <mem_malloc+0x1d4>)
 8007922:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007926:	4925      	ldr	r1, [pc, #148]	; (80079bc <mem_malloc+0x1e4>)
 8007928:	4822      	ldr	r0, [pc, #136]	; (80079b4 <mem_malloc+0x1dc>)
 800792a:	f00a f8d7 	bl	8011adc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800792e:	8bba      	ldrh	r2, [r7, #28]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	4413      	add	r3, r2
 8007934:	3308      	adds	r3, #8
 8007936:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <mem_malloc+0x1e0>)
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	4293      	cmp	r3, r2
 800793c:	d906      	bls.n	800794c <mem_malloc+0x174>
 800793e:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <mem_malloc+0x1d4>)
 8007940:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007944:	491e      	ldr	r1, [pc, #120]	; (80079c0 <mem_malloc+0x1e8>)
 8007946:	481b      	ldr	r0, [pc, #108]	; (80079b4 <mem_malloc+0x1dc>)
 8007948:	f00a f8c8 	bl	8011adc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d006      	beq.n	8007964 <mem_malloc+0x18c>
 8007956:	4b15      	ldr	r3, [pc, #84]	; (80079ac <mem_malloc+0x1d4>)
 8007958:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800795c:	4919      	ldr	r1, [pc, #100]	; (80079c4 <mem_malloc+0x1ec>)
 800795e:	4815      	ldr	r0, [pc, #84]	; (80079b4 <mem_malloc+0x1dc>)
 8007960:	f00a f8bc 	bl	8011adc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d006      	beq.n	800797c <mem_malloc+0x1a4>
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <mem_malloc+0x1d4>)
 8007970:	f240 32be 	movw	r2, #958	; 0x3be
 8007974:	4914      	ldr	r1, [pc, #80]	; (80079c8 <mem_malloc+0x1f0>)
 8007976:	480f      	ldr	r0, [pc, #60]	; (80079b4 <mem_malloc+0x1dc>)
 8007978:	f00a f8b0 	bl	8011adc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	3308      	adds	r3, #8
 8007980:	e00e      	b.n	80079a0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007982:	8bfb      	ldrh	r3, [r7, #30]
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fc83 	bl	8007290 <ptr_to_mem>
 800798a:	4603      	mov	r3, r0
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007990:	8bfa      	ldrh	r2, [r7, #30]
 8007992:	8bbb      	ldrh	r3, [r7, #28]
 8007994:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007998:	429a      	cmp	r2, r3
 800799a:	f4ff af44 	bcc.w	8007826 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000230 	.word	0x20000230
 80079ac:	08014490 	.word	0x08014490
 80079b0:	08014638 	.word	0x08014638
 80079b4:	080144d8 	.word	0x080144d8
 80079b8:	2000022c 	.word	0x2000022c
 80079bc:	0801464c 	.word	0x0801464c
 80079c0:	08014668 	.word	0x08014668
 80079c4:	08014698 	.word	0x08014698
 80079c8:	080146c8 	.word	0x080146c8

080079cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	3303      	adds	r3, #3
 80079e2:	f023 0303 	bic.w	r3, r3, #3
 80079e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	e011      	b.n	8007a12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	4413      	add	r3, r2
 8007a0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	885b      	ldrh	r3, [r3, #2]
 8007a16:	461a      	mov	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	dbe7      	blt.n	80079ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007a1e:	bf00      	nop
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a32:	2300      	movs	r3, #0
 8007a34:	80fb      	strh	r3, [r7, #6]
 8007a36:	e009      	b.n	8007a4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <memp_init+0x30>)
 8007a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff ffc3 	bl	80079cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	80fb      	strh	r3, [r7, #6]
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d9f2      	bls.n	8007a38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	08016ea0 	.word	0x08016ea0

08007a60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d012      	beq.n	8007a9c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d006      	beq.n	8007a98 <do_memp_malloc_pool+0x38>
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <do_memp_malloc_pool+0x48>)
 8007a8c:	f240 1219 	movw	r2, #281	; 0x119
 8007a90:	4906      	ldr	r1, [pc, #24]	; (8007aac <do_memp_malloc_pool+0x4c>)
 8007a92:	4807      	ldr	r0, [pc, #28]	; (8007ab0 <do_memp_malloc_pool+0x50>)
 8007a94:	f00a f822 	bl	8011adc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e000      	b.n	8007a9e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	080146ec 	.word	0x080146ec
 8007aac:	0801471c 	.word	0x0801471c
 8007ab0:	08014740 	.word	0x08014740

08007ab4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d908      	bls.n	8007ad6 <memp_malloc+0x22>
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <memp_malloc+0x3c>)
 8007ac6:	f240 1257 	movw	r2, #343	; 0x157
 8007aca:	490a      	ldr	r1, [pc, #40]	; (8007af4 <memp_malloc+0x40>)
 8007acc:	480a      	ldr	r0, [pc, #40]	; (8007af8 <memp_malloc+0x44>)
 8007ace:	f00a f805 	bl	8011adc <iprintf>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e008      	b.n	8007ae8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4a08      	ldr	r2, [pc, #32]	; (8007afc <memp_malloc+0x48>)
 8007ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff ffbe 	bl	8007a60 <do_memp_malloc_pool>
 8007ae4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	080146ec 	.word	0x080146ec
 8007af4:	0801477c 	.word	0x0801477c
 8007af8:	08014740 	.word	0x08014740
 8007afc:	08016ea0 	.word	0x08016ea0

08007b00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d006      	beq.n	8007b22 <do_memp_free_pool+0x22>
 8007b14:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <do_memp_free_pool+0x40>)
 8007b16:	f240 126d 	movw	r2, #365	; 0x16d
 8007b1a:	490a      	ldr	r1, [pc, #40]	; (8007b44 <do_memp_free_pool+0x44>)
 8007b1c:	480a      	ldr	r0, [pc, #40]	; (8007b48 <do_memp_free_pool+0x48>)
 8007b1e:	f009 ffdd 	bl	8011adc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007b38:	bf00      	nop
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	080146ec 	.word	0x080146ec
 8007b44:	0801479c 	.word	0x0801479c
 8007b48:	08014740 	.word	0x08014740

08007b4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	2b08      	cmp	r3, #8
 8007b5c:	d907      	bls.n	8007b6e <memp_free+0x22>
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <memp_free+0x44>)
 8007b60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007b64:	490b      	ldr	r1, [pc, #44]	; (8007b94 <memp_free+0x48>)
 8007b66:	480c      	ldr	r0, [pc, #48]	; (8007b98 <memp_free+0x4c>)
 8007b68:	f009 ffb8 	bl	8011adc <iprintf>
 8007b6c:	e00c      	b.n	8007b88 <memp_free+0x3c>

  if (mem == NULL) {
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d008      	beq.n	8007b86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	4a09      	ldr	r2, [pc, #36]	; (8007b9c <memp_free+0x50>)
 8007b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff ffbe 	bl	8007b00 <do_memp_free_pool>
 8007b84:	e000      	b.n	8007b88 <memp_free+0x3c>
    return;
 8007b86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	080146ec 	.word	0x080146ec
 8007b94:	080147bc 	.word	0x080147bc
 8007b98:	08014740 	.word	0x08014740
 8007b9c:	08016ea0 	.word	0x08016ea0

08007ba0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007ba4:	bf00      	nop
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <netif_add+0x26>
 8007bc4:	4b56      	ldr	r3, [pc, #344]	; (8007d20 <netif_add+0x170>)
 8007bc6:	f240 1227 	movw	r2, #295	; 0x127
 8007bca:	4956      	ldr	r1, [pc, #344]	; (8007d24 <netif_add+0x174>)
 8007bcc:	4856      	ldr	r0, [pc, #344]	; (8007d28 <netif_add+0x178>)
 8007bce:	f009 ff85 	bl	8011adc <iprintf>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e09f      	b.n	8007d16 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d108      	bne.n	8007bee <netif_add+0x3e>
 8007bdc:	4b50      	ldr	r3, [pc, #320]	; (8007d20 <netif_add+0x170>)
 8007bde:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007be2:	4952      	ldr	r1, [pc, #328]	; (8007d2c <netif_add+0x17c>)
 8007be4:	4850      	ldr	r0, [pc, #320]	; (8007d28 <netif_add+0x178>)
 8007be6:	f009 ff79 	bl	8011adc <iprintf>
 8007bea:	2300      	movs	r3, #0
 8007bec:	e093      	b.n	8007d16 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007bf4:	4b4e      	ldr	r3, [pc, #312]	; (8007d30 <netif_add+0x180>)
 8007bf6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007bfe:	4b4c      	ldr	r3, [pc, #304]	; (8007d30 <netif_add+0x180>)
 8007c00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007c08:	4b49      	ldr	r3, [pc, #292]	; (8007d30 <netif_add+0x180>)
 8007c0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4a44      	ldr	r2, [pc, #272]	; (8007d34 <netif_add+0x184>)
 8007c22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a3a      	ldr	r2, [r7, #32]
 8007c36:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8007c38:	4b3f      	ldr	r3, [pc, #252]	; (8007d38 <netif_add+0x188>)
 8007c3a:	781a      	ldrb	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c46:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f914 	bl	8007e7c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <netif_add+0xb4>
    return NULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	e058      	b.n	8007d16 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c6a:	2bff      	cmp	r3, #255	; 0xff
 8007c6c:	d103      	bne.n	8007c76 <netif_add+0xc6>
        netif->num = 0;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007c7a:	4b30      	ldr	r3, [pc, #192]	; (8007d3c <netif_add+0x18c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	e02b      	b.n	8007cda <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d106      	bne.n	8007c98 <netif_add+0xe8>
 8007c8a:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <netif_add+0x170>)
 8007c8c:	f240 128b 	movw	r2, #395	; 0x18b
 8007c90:	492b      	ldr	r1, [pc, #172]	; (8007d40 <netif_add+0x190>)
 8007c92:	4825      	ldr	r0, [pc, #148]	; (8007d28 <netif_add+0x178>)
 8007c94:	f009 ff22 	bl	8011adc <iprintf>
        num_netifs++;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2bff      	cmp	r3, #255	; 0xff
 8007ca2:	dd06      	ble.n	8007cb2 <netif_add+0x102>
 8007ca4:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <netif_add+0x170>)
 8007ca6:	f240 128d 	movw	r2, #397	; 0x18d
 8007caa:	4926      	ldr	r1, [pc, #152]	; (8007d44 <netif_add+0x194>)
 8007cac:	481e      	ldr	r0, [pc, #120]	; (8007d28 <netif_add+0x178>)
 8007cae:	f009 ff15 	bl	8011adc <iprintf>
        if (netif2->num == netif->num) {
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d108      	bne.n	8007cd4 <netif_add+0x124>
          netif->num++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cc8:	3301      	adds	r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8007cd2:	e005      	b.n	8007ce0 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1d0      	bne.n	8007c82 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1be      	bne.n	8007c64 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cec:	2bfe      	cmp	r3, #254	; 0xfe
 8007cee:	d103      	bne.n	8007cf8 <netif_add+0x148>
    netif_num = 0;
 8007cf0:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <netif_add+0x188>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e006      	b.n	8007d06 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cfe:	3301      	adds	r3, #1
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <netif_add+0x188>)
 8007d04:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <netif_add+0x18c>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007d0e:	4a0b      	ldr	r2, [pc, #44]	; (8007d3c <netif_add+0x18c>)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007d14:	68fb      	ldr	r3, [r7, #12]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	080147d8 	.word	0x080147d8
 8007d24:	0801486c 	.word	0x0801486c
 8007d28:	08014828 	.word	0x08014828
 8007d2c:	08014888 	.word	0x08014888
 8007d30:	08016f04 	.word	0x08016f04
 8007d34:	0800806d 	.word	0x0800806d
 8007d38:	20000258 	.word	0x20000258
 8007d3c:	20006fa0 	.word	0x20006fa0
 8007d40:	080148ac 	.word	0x080148ac
 8007d44:	080148c0 	.word	0x080148c0

08007d48 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f002 fd6d 	bl	800a834 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f007 fab5 	bl	800f2cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <netif_do_set_ipaddr+0x20>
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <netif_do_set_ipaddr+0x88>)
 8007d80:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007d84:	491c      	ldr	r1, [pc, #112]	; (8007df8 <netif_do_set_ipaddr+0x8c>)
 8007d86:	481d      	ldr	r0, [pc, #116]	; (8007dfc <netif_do_set_ipaddr+0x90>)
 8007d88:	f009 fea8 	bl	8011adc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <netif_do_set_ipaddr+0x34>
 8007d92:	4b18      	ldr	r3, [pc, #96]	; (8007df4 <netif_do_set_ipaddr+0x88>)
 8007d94:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007d98:	4917      	ldr	r1, [pc, #92]	; (8007df8 <netif_do_set_ipaddr+0x8c>)
 8007d9a:	4818      	ldr	r0, [pc, #96]	; (8007dfc <netif_do_set_ipaddr+0x90>)
 8007d9c:	f009 fe9e 	bl	8011adc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3304      	adds	r3, #4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d01c      	beq.n	8007de8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3304      	adds	r3, #4
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff ffbf 	bl	8007d48 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <netif_do_set_ipaddr+0x6a>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	e000      	b.n	8007dd8 <netif_do_set_ipaddr+0x6c>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007ddc:	2101      	movs	r1, #1
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f8d2 	bl	8007f88 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	080147d8 	.word	0x080147d8
 8007df8:	080148f0 	.word	0x080148f0
 8007dfc:	08014828 	.word	0x08014828

08007e00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3308      	adds	r3, #8
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d00a      	beq.n	8007e30 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <netif_do_set_netmask+0x26>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	e000      	b.n	8007e28 <netif_do_set_netmask+0x28>
 8007e26:	2300      	movs	r3, #0
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	330c      	adds	r3, #12
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d00a      	beq.n	8007e6e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <netif_do_set_gw+0x26>
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	e000      	b.n	8007e66 <netif_do_set_gw+0x28>
 8007e64:	2300      	movs	r3, #0
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007e98:	4b1c      	ldr	r3, [pc, #112]	; (8007f0c <netif_set_addr+0x90>)
 8007e9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ea2:	4b1a      	ldr	r3, [pc, #104]	; (8007f0c <netif_set_addr+0x90>)
 8007ea4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007eac:	4b17      	ldr	r3, [pc, #92]	; (8007f0c <netif_set_addr+0x90>)
 8007eae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <netif_set_addr+0x42>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <netif_set_addr+0x46>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <netif_set_addr+0x48>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d006      	beq.n	8007eda <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff49 	bl	8007d6c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7ff ff8e 	bl	8007e00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff ffa8 	bl	8007e3e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007ef4:	f107 0310 	add.w	r3, r7, #16
 8007ef8:	461a      	mov	r2, r3
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f7ff ff35 	bl	8007d6c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007f02:	bf00      	nop
 8007f04:	3720      	adds	r7, #32
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	08016f04 	.word	0x08016f04

08007f10 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007f18:	4a04      	ldr	r2, [pc, #16]	; (8007f2c <netif_set_default+0x1c>)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	20006fa4 	.word	0x20006fa4

08007f30 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d107      	bne.n	8007f4e <netif_set_up+0x1e>
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <netif_set_up+0x4c>)
 8007f40:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007f44:	490e      	ldr	r1, [pc, #56]	; (8007f80 <netif_set_up+0x50>)
 8007f46:	480f      	ldr	r0, [pc, #60]	; (8007f84 <netif_set_up+0x54>)
 8007f48:	f009 fdc8 	bl	8011adc <iprintf>
 8007f4c:	e013      	b.n	8007f76 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10c      	bne.n	8007f76 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007f62:	f043 0301 	orr.w	r3, r3, #1
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007f6e:	2103      	movs	r1, #3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f809 	bl	8007f88 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	080147d8 	.word	0x080147d8
 8007f80:	08014960 	.word	0x08014960
 8007f84:	08014828 	.word	0x08014828

08007f88 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <netif_issue_reports+0x20>
 8007f9a:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <netif_issue_reports+0x74>)
 8007f9c:	f240 326d 	movw	r2, #877	; 0x36d
 8007fa0:	4917      	ldr	r1, [pc, #92]	; (8008000 <netif_issue_reports+0x78>)
 8007fa2:	4818      	ldr	r0, [pc, #96]	; (8008004 <netif_issue_reports+0x7c>)
 8007fa4:	f009 fd9a 	bl	8011adc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01e      	beq.n	8007ff4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007fbc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d017      	beq.n	8007ff4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d013      	beq.n	8007ff6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00e      	beq.n	8007ff6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007fde:	f003 0308 	and.w	r3, r3, #8
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f008 f8d7 	bl	80101a0 <etharp_request>
 8007ff2:	e000      	b.n	8007ff6 <netif_issue_reports+0x6e>
    return;
 8007ff4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	080147d8 	.word	0x080147d8
 8008000:	0801497c 	.word	0x0801497c
 8008004:	08014828 	.word	0x08014828

08008008 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d107      	bne.n	8008026 <netif_set_down+0x1e>
 8008016:	4b12      	ldr	r3, [pc, #72]	; (8008060 <netif_set_down+0x58>)
 8008018:	f240 329b 	movw	r2, #923	; 0x39b
 800801c:	4911      	ldr	r1, [pc, #68]	; (8008064 <netif_set_down+0x5c>)
 800801e:	4812      	ldr	r0, [pc, #72]	; (8008068 <netif_set_down+0x60>)
 8008020:	f009 fd5c 	bl	8011adc <iprintf>
 8008024:	e019      	b.n	800805a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d012      	beq.n	800805a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	b2da      	uxtb	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f007 fc61 	bl	800f91c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	080147d8 	.word	0x080147d8
 8008064:	080149a0 	.word	0x080149a0
 8008068:	08014828 	.word	0x08014828

0800806c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008078:	f06f 030b 	mvn.w	r3, #11
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d013      	beq.n	80080c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <netif_get_by_index+0x48>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	e00c      	b.n	80080ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080a6:	3301      	adds	r3, #1
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	79fa      	ldrb	r2, [r7, #7]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d101      	bne.n	80080b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	e006      	b.n	80080c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1ef      	bne.n	80080a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20006fa0 	.word	0x20006fa0

080080d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <pbuf_free_ooseq+0x38>)
 80080dc:	2200      	movs	r2, #0
 80080de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <pbuf_free_ooseq+0x3c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	e00a      	b.n	80080fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 fbdd 	bl	800a8b0 <tcp_free_ooseq>
      return;
 80080f6:	e005      	b.n	8008104 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f1      	bne.n	80080e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20006fa8 	.word	0x20006fa8
 8008110:	20006fb0 	.word	0x20006fb0

08008114 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <pbuf_pool_is_empty+0x14>)
 800811a:	2201      	movs	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800811e:	bf00      	nop
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20006fa8 	.word	0x20006fa8

0800812c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4611      	mov	r1, r2
 8008138:	461a      	mov	r2, r3
 800813a:	460b      	mov	r3, r1
 800813c:	80fb      	strh	r3, [r7, #6]
 800813e:	4613      	mov	r3, r2
 8008140:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	88ba      	ldrh	r2, [r7, #4]
 8008158:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800815a:	8b3b      	ldrh	r3, [r7, #24]
 800815c:	b2da      	uxtb	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	7f3a      	ldrb	r2, [r7, #28]
 8008166:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2201      	movs	r2, #1
 800816c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	73da      	strb	r2, [r3, #15]
}
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08c      	sub	sp, #48	; 0x30
 8008184:	af02      	add	r7, sp, #8
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
 800818a:	460b      	mov	r3, r1
 800818c:	80bb      	strh	r3, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008196:	887b      	ldrh	r3, [r7, #2]
 8008198:	2b41      	cmp	r3, #65	; 0x41
 800819a:	d00b      	beq.n	80081b4 <pbuf_alloc+0x34>
 800819c:	2b41      	cmp	r3, #65	; 0x41
 800819e:	dc02      	bgt.n	80081a6 <pbuf_alloc+0x26>
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d007      	beq.n	80081b4 <pbuf_alloc+0x34>
 80081a4:	e0c2      	b.n	800832c <pbuf_alloc+0x1ac>
 80081a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80081aa:	d00b      	beq.n	80081c4 <pbuf_alloc+0x44>
 80081ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081b0:	d070      	beq.n	8008294 <pbuf_alloc+0x114>
 80081b2:	e0bb      	b.n	800832c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80081b4:	887a      	ldrh	r2, [r7, #2]
 80081b6:	88bb      	ldrh	r3, [r7, #4]
 80081b8:	4619      	mov	r1, r3
 80081ba:	2000      	movs	r0, #0
 80081bc:	f000 f8d2 	bl	8008364 <pbuf_alloc_reference>
 80081c0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80081c2:	e0bd      	b.n	8008340 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80081cc:	88bb      	ldrh	r3, [r7, #4]
 80081ce:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081d0:	2008      	movs	r0, #8
 80081d2:	f7ff fc6f 	bl	8007ab4 <memp_malloc>
 80081d6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80081de:	f7ff ff99 	bl	8008114 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <pbuf_alloc+0x6e>
            pbuf_free(p);
 80081e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081ea:	f000 faa9 	bl	8008740 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e0a7      	b.n	8008342 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80081f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80081f4:	3303      	adds	r3, #3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f023 0303 	bic.w	r3, r3, #3
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008202:	b29b      	uxth	r3, r3
 8008204:	8b7a      	ldrh	r2, [r7, #26]
 8008206:	4293      	cmp	r3, r2
 8008208:	bf28      	it	cs
 800820a:	4613      	movcs	r3, r2
 800820c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800820e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008210:	3310      	adds	r3, #16
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4413      	add	r3, r2
 8008216:	3303      	adds	r3, #3
 8008218:	f023 0303 	bic.w	r3, r3, #3
 800821c:	4618      	mov	r0, r3
 800821e:	89f9      	ldrh	r1, [r7, #14]
 8008220:	8b7a      	ldrh	r2, [r7, #26]
 8008222:	2300      	movs	r3, #0
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	887b      	ldrh	r3, [r7, #2]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	460b      	mov	r3, r1
 800822c:	4601      	mov	r1, r0
 800822e:	6938      	ldr	r0, [r7, #16]
 8008230:	f7ff ff7c 	bl	800812c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d006      	beq.n	800824e <pbuf_alloc+0xce>
 8008240:	4b42      	ldr	r3, [pc, #264]	; (800834c <pbuf_alloc+0x1cc>)
 8008242:	f240 1201 	movw	r2, #257	; 0x101
 8008246:	4942      	ldr	r1, [pc, #264]	; (8008350 <pbuf_alloc+0x1d0>)
 8008248:	4842      	ldr	r0, [pc, #264]	; (8008354 <pbuf_alloc+0x1d4>)
 800824a:	f009 fc47 	bl	8011adc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800824e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008250:	3303      	adds	r3, #3
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800825a:	d106      	bne.n	800826a <pbuf_alloc+0xea>
 800825c:	4b3b      	ldr	r3, [pc, #236]	; (800834c <pbuf_alloc+0x1cc>)
 800825e:	f240 1203 	movw	r2, #259	; 0x103
 8008262:	493d      	ldr	r1, [pc, #244]	; (8008358 <pbuf_alloc+0x1d8>)
 8008264:	483b      	ldr	r0, [pc, #236]	; (8008354 <pbuf_alloc+0x1d4>)
 8008266:	f009 fc39 	bl	8011adc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
 8008274:	e002      	b.n	800827c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008280:	8b7a      	ldrh	r2, [r7, #26]
 8008282:	89fb      	ldrh	r3, [r7, #14]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800828c:	8b7b      	ldrh	r3, [r7, #26]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d19e      	bne.n	80081d0 <pbuf_alloc+0x50>
      break;
 8008292:	e055      	b.n	8008340 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008296:	3303      	adds	r3, #3
 8008298:	b29b      	uxth	r3, r3
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	b29a      	uxth	r2, r3
 80082a0:	88bb      	ldrh	r3, [r7, #4]
 80082a2:	3303      	adds	r3, #3
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f023 0303 	bic.w	r3, r3, #3
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	4413      	add	r3, r2
 80082ae:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80082b0:	8b3b      	ldrh	r3, [r7, #24]
 80082b2:	3310      	adds	r3, #16
 80082b4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082b6:	8b3a      	ldrh	r2, [r7, #24]
 80082b8:	88bb      	ldrh	r3, [r7, #4]
 80082ba:	3303      	adds	r3, #3
 80082bc:	f023 0303 	bic.w	r3, r3, #3
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d306      	bcc.n	80082d2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80082c4:	8afa      	ldrh	r2, [r7, #22]
 80082c6:	88bb      	ldrh	r3, [r7, #4]
 80082c8:	3303      	adds	r3, #3
 80082ca:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d201      	bcs.n	80082d6 <pbuf_alloc+0x156>
        return NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e035      	b.n	8008342 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80082d6:	8afb      	ldrh	r3, [r7, #22]
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fa7d 	bl	80077d8 <mem_malloc>
 80082de:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <pbuf_alloc+0x16a>
        return NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	e02b      	b.n	8008342 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80082ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082ec:	3310      	adds	r3, #16
 80082ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f0:	4413      	add	r3, r2
 80082f2:	3303      	adds	r3, #3
 80082f4:	f023 0303 	bic.w	r3, r3, #3
 80082f8:	4618      	mov	r0, r3
 80082fa:	88b9      	ldrh	r1, [r7, #4]
 80082fc:	88ba      	ldrh	r2, [r7, #4]
 80082fe:	2300      	movs	r3, #0
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	887b      	ldrh	r3, [r7, #2]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	460b      	mov	r3, r1
 8008308:	4601      	mov	r1, r0
 800830a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800830c:	f7ff ff0e 	bl	800812c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <pbuf_alloc+0x1be>
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <pbuf_alloc+0x1cc>)
 800831e:	f240 1223 	movw	r2, #291	; 0x123
 8008322:	490e      	ldr	r1, [pc, #56]	; (800835c <pbuf_alloc+0x1dc>)
 8008324:	480b      	ldr	r0, [pc, #44]	; (8008354 <pbuf_alloc+0x1d4>)
 8008326:	f009 fbd9 	bl	8011adc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800832a:	e008      	b.n	800833e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <pbuf_alloc+0x1cc>)
 800832e:	f240 1227 	movw	r2, #295	; 0x127
 8008332:	490b      	ldr	r1, [pc, #44]	; (8008360 <pbuf_alloc+0x1e0>)
 8008334:	4807      	ldr	r0, [pc, #28]	; (8008354 <pbuf_alloc+0x1d4>)
 8008336:	f009 fbd1 	bl	8011adc <iprintf>
      return NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	e001      	b.n	8008342 <pbuf_alloc+0x1c2>
      break;
 800833e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008342:	4618      	mov	r0, r3
 8008344:	3728      	adds	r7, #40	; 0x28
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	08014a08 	.word	0x08014a08
 8008350:	08014a38 	.word	0x08014a38
 8008354:	08014a68 	.word	0x08014a68
 8008358:	08014a90 	.word	0x08014a90
 800835c:	08014ac4 	.word	0x08014ac4
 8008360:	08014af0 	.word	0x08014af0

08008364 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
 8008370:	4613      	mov	r3, r2
 8008372:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008374:	883b      	ldrh	r3, [r7, #0]
 8008376:	2b41      	cmp	r3, #65	; 0x41
 8008378:	d009      	beq.n	800838e <pbuf_alloc_reference+0x2a>
 800837a:	883b      	ldrh	r3, [r7, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d006      	beq.n	800838e <pbuf_alloc_reference+0x2a>
 8008380:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <pbuf_alloc_reference+0x5c>)
 8008382:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008386:	490f      	ldr	r1, [pc, #60]	; (80083c4 <pbuf_alloc_reference+0x60>)
 8008388:	480f      	ldr	r0, [pc, #60]	; (80083c8 <pbuf_alloc_reference+0x64>)
 800838a:	f009 fba7 	bl	8011adc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800838e:	2007      	movs	r0, #7
 8008390:	f7ff fb90 	bl	8007ab4 <memp_malloc>
 8008394:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	e00b      	b.n	80083b8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80083a0:	8879      	ldrh	r1, [r7, #2]
 80083a2:	887a      	ldrh	r2, [r7, #2]
 80083a4:	2300      	movs	r3, #0
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	883b      	ldrh	r3, [r7, #0]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	460b      	mov	r3, r1
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff febb 	bl	800812c <pbuf_init_alloced_pbuf>
  return p;
 80083b6:	68fb      	ldr	r3, [r7, #12]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	08014a08 	.word	0x08014a08
 80083c4:	08014b0c 	.word	0x08014b0c
 80083c8:	08014a68 	.word	0x08014a68

080083cc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af02      	add	r7, sp, #8
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
 80083d8:	460b      	mov	r3, r1
 80083da:	81bb      	strh	r3, [r7, #12]
 80083dc:	4613      	mov	r3, r2
 80083de:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80083e4:	8a7b      	ldrh	r3, [r7, #18]
 80083e6:	3303      	adds	r3, #3
 80083e8:	f023 0203 	bic.w	r2, r3, #3
 80083ec:	89bb      	ldrh	r3, [r7, #12]
 80083ee:	441a      	add	r2, r3
 80083f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d901      	bls.n	80083fa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e018      	b.n	800842c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008400:	8a7b      	ldrh	r3, [r7, #18]
 8008402:	3303      	adds	r3, #3
 8008404:	f023 0303 	bic.w	r3, r3, #3
 8008408:	6a3a      	ldr	r2, [r7, #32]
 800840a:	4413      	add	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e001      	b.n	8008414 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	89b9      	ldrh	r1, [r7, #12]
 8008418:	89ba      	ldrh	r2, [r7, #12]
 800841a:	2302      	movs	r3, #2
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	897b      	ldrh	r3, [r7, #10]
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	460b      	mov	r3, r1
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	f7ff fe81 	bl	800812c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800842a:	687b      	ldr	r3, [r7, #4]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d106      	bne.n	8008454 <pbuf_realloc+0x20>
 8008446:	4b3a      	ldr	r3, [pc, #232]	; (8008530 <pbuf_realloc+0xfc>)
 8008448:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800844c:	4939      	ldr	r1, [pc, #228]	; (8008534 <pbuf_realloc+0x100>)
 800844e:	483a      	ldr	r0, [pc, #232]	; (8008538 <pbuf_realloc+0x104>)
 8008450:	f009 fb44 	bl	8011adc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	891b      	ldrh	r3, [r3, #8]
 8008458:	887a      	ldrh	r2, [r7, #2]
 800845a:	429a      	cmp	r2, r3
 800845c:	d264      	bcs.n	8008528 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	891a      	ldrh	r2, [r3, #8]
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008468:	887b      	ldrh	r3, [r7, #2]
 800846a:	817b      	strh	r3, [r7, #10]
  q = p;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008470:	e018      	b.n	80084a4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	895b      	ldrh	r3, [r3, #10]
 8008476:	897a      	ldrh	r2, [r7, #10]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	891a      	ldrh	r2, [r3, #8]
 8008480:	893b      	ldrh	r3, [r7, #8]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <pbuf_realloc+0x70>
 8008496:	4b26      	ldr	r3, [pc, #152]	; (8008530 <pbuf_realloc+0xfc>)
 8008498:	f240 12af 	movw	r2, #431	; 0x1af
 800849c:	4927      	ldr	r1, [pc, #156]	; (800853c <pbuf_realloc+0x108>)
 800849e:	4826      	ldr	r0, [pc, #152]	; (8008538 <pbuf_realloc+0x104>)
 80084a0:	f009 fb1c 	bl	8011adc <iprintf>
  while (rem_len > q->len) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	895b      	ldrh	r3, [r3, #10]
 80084a8:	897a      	ldrh	r2, [r7, #10]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d8e1      	bhi.n	8008472 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	7b1b      	ldrb	r3, [r3, #12]
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d122      	bne.n	8008500 <pbuf_realloc+0xcc>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	895b      	ldrh	r3, [r3, #10]
 80084be:	897a      	ldrh	r2, [r7, #10]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d01d      	beq.n	8008500 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	7b5b      	ldrb	r3, [r3, #13]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d117      	bne.n	8008500 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	461a      	mov	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	b29a      	uxth	r2, r3
 80084dc:	897b      	ldrh	r3, [r7, #10]
 80084de:	4413      	add	r3, r2
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4619      	mov	r1, r3
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7ff f87b 	bl	80075e0 <mem_trim>
 80084ea:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <pbuf_realloc+0xcc>
 80084f2:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <pbuf_realloc+0xfc>)
 80084f4:	f240 12bd 	movw	r2, #445	; 0x1bd
 80084f8:	4911      	ldr	r1, [pc, #68]	; (8008540 <pbuf_realloc+0x10c>)
 80084fa:	480f      	ldr	r0, [pc, #60]	; (8008538 <pbuf_realloc+0x104>)
 80084fc:	f009 faee 	bl	8011adc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	897a      	ldrh	r2, [r7, #10]
 8008504:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	895a      	ldrh	r2, [r3, #10]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f910 	bl	8008740 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e000      	b.n	800852a <pbuf_realloc+0xf6>
    return;
 8008528:	bf00      	nop

}
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	08014a08 	.word	0x08014a08
 8008534:	08014b20 	.word	0x08014b20
 8008538:	08014a68 	.word	0x08014a68
 800853c:	08014b38 	.word	0x08014b38
 8008540:	08014b50 	.word	0x08014b50

08008544 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d106      	bne.n	8008566 <pbuf_add_header_impl+0x22>
 8008558:	4b2b      	ldr	r3, [pc, #172]	; (8008608 <pbuf_add_header_impl+0xc4>)
 800855a:	f240 12df 	movw	r2, #479	; 0x1df
 800855e:	492b      	ldr	r1, [pc, #172]	; (800860c <pbuf_add_header_impl+0xc8>)
 8008560:	482b      	ldr	r0, [pc, #172]	; (8008610 <pbuf_add_header_impl+0xcc>)
 8008562:	f009 fabb 	bl	8011adc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <pbuf_add_header_impl+0x30>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008572:	d301      	bcc.n	8008578 <pbuf_add_header_impl+0x34>
    return 1;
 8008574:	2301      	movs	r3, #1
 8008576:	e043      	b.n	8008600 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <pbuf_add_header_impl+0x3e>
    return 0;
 800857e:	2300      	movs	r3, #0
 8008580:	e03e      	b.n	8008600 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	891a      	ldrh	r2, [r3, #8]
 800858a:	8a7b      	ldrh	r3, [r7, #18]
 800858c:	4413      	add	r3, r2
 800858e:	b29b      	uxth	r3, r3
 8008590:	8a7a      	ldrh	r2, [r7, #18]
 8008592:	429a      	cmp	r2, r3
 8008594:	d901      	bls.n	800859a <pbuf_add_header_impl+0x56>
    return 1;
 8008596:	2301      	movs	r3, #1
 8008598:	e032      	b.n	8008600 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	7b1b      	ldrb	r3, [r3, #12]
 800859e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80085a0:	8a3b      	ldrh	r3, [r7, #16]
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00c      	beq.n	80085c4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	425b      	negs	r3, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3310      	adds	r3, #16
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d20d      	bcs.n	80085dc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e01d      	b.n	8008600 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d006      	beq.n	80085d8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	425b      	negs	r3, r3
 80085d2:	4413      	add	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]
 80085d6:	e001      	b.n	80085dc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80085d8:	2301      	movs	r3, #1
 80085da:	e011      	b.n	8008600 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	895a      	ldrh	r2, [r3, #10]
 80085e6:	8a7b      	ldrh	r3, [r7, #18]
 80085e8:	4413      	add	r3, r2
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	891a      	ldrh	r2, [r3, #8]
 80085f4:	8a7b      	ldrh	r3, [r7, #18]
 80085f6:	4413      	add	r3, r2
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	811a      	strh	r2, [r3, #8]


  return 0;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	08014a08 	.word	0x08014a08
 800860c:	08014b6c 	.word	0x08014b6c
 8008610:	08014a68 	.word	0x08014a68

08008614 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800861e:	2200      	movs	r2, #0
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff ff8e 	bl	8008544 <pbuf_add_header_impl>
 8008628:	4603      	mov	r3, r0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <pbuf_remove_header+0x1e>
 8008644:	4b20      	ldr	r3, [pc, #128]	; (80086c8 <pbuf_remove_header+0x94>)
 8008646:	f240 224b 	movw	r2, #587	; 0x24b
 800864a:	4920      	ldr	r1, [pc, #128]	; (80086cc <pbuf_remove_header+0x98>)
 800864c:	4820      	ldr	r0, [pc, #128]	; (80086d0 <pbuf_remove_header+0x9c>)
 800864e:	f009 fa45 	bl	8011adc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <pbuf_remove_header+0x2c>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865e:	d301      	bcc.n	8008664 <pbuf_remove_header+0x30>
    return 1;
 8008660:	2301      	movs	r3, #1
 8008662:	e02c      	b.n	80086be <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <pbuf_remove_header+0x3a>
    return 0;
 800866a:	2300      	movs	r3, #0
 800866c:	e027      	b.n	80086be <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	895b      	ldrh	r3, [r3, #10]
 8008676:	89fa      	ldrh	r2, [r7, #14]
 8008678:	429a      	cmp	r2, r3
 800867a:	d908      	bls.n	800868e <pbuf_remove_header+0x5a>
 800867c:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <pbuf_remove_header+0x94>)
 800867e:	f240 2255 	movw	r2, #597	; 0x255
 8008682:	4914      	ldr	r1, [pc, #80]	; (80086d4 <pbuf_remove_header+0xa0>)
 8008684:	4812      	ldr	r0, [pc, #72]	; (80086d0 <pbuf_remove_header+0x9c>)
 8008686:	f009 fa29 	bl	8011adc <iprintf>
 800868a:	2301      	movs	r3, #1
 800868c:	e017      	b.n	80086be <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	441a      	add	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	895a      	ldrh	r2, [r3, #10]
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	891a      	ldrh	r2, [r3, #8]
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	08014a08 	.word	0x08014a08
 80086cc:	08014b6c 	.word	0x08014b6c
 80086d0:	08014a68 	.word	0x08014a68
 80086d4:	08014b78 	.word	0x08014b78

080086d8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
 80086e4:	4613      	mov	r3, r2
 80086e6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80086e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da08      	bge.n	8008702 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80086f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086f4:	425b      	negs	r3, r3
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff ff9b 	bl	8008634 <pbuf_remove_header>
 80086fe:	4603      	mov	r3, r0
 8008700:	e007      	b.n	8008712 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008702:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008706:	787a      	ldrb	r2, [r7, #1]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff ff1a 	bl	8008544 <pbuf_add_header_impl>
 8008710:	4603      	mov	r3, r0
  }
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008726:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800872a:	2201      	movs	r2, #1
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7ff ffd2 	bl	80086d8 <pbuf_header_impl>
 8008734:	4603      	mov	r3, r0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10b      	bne.n	8008766 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d106      	bne.n	8008762 <pbuf_free+0x22>
 8008754:	4b38      	ldr	r3, [pc, #224]	; (8008838 <pbuf_free+0xf8>)
 8008756:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800875a:	4938      	ldr	r1, [pc, #224]	; (800883c <pbuf_free+0xfc>)
 800875c:	4838      	ldr	r0, [pc, #224]	; (8008840 <pbuf_free+0x100>)
 800875e:	f009 f9bd 	bl	8011adc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008762:	2300      	movs	r3, #0
 8008764:	e063      	b.n	800882e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800876a:	e05c      	b.n	8008826 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	7b9b      	ldrb	r3, [r3, #14]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <pbuf_free+0x42>
 8008774:	4b30      	ldr	r3, [pc, #192]	; (8008838 <pbuf_free+0xf8>)
 8008776:	f240 22f1 	movw	r2, #753	; 0x2f1
 800877a:	4932      	ldr	r1, [pc, #200]	; (8008844 <pbuf_free+0x104>)
 800877c:	4830      	ldr	r0, [pc, #192]	; (8008840 <pbuf_free+0x100>)
 800877e:	f009 f9ad 	bl	8011adc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7b9b      	ldrb	r3, [r3, #14]
 8008786:	3b01      	subs	r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	739a      	strb	r2, [r3, #14]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	7b9b      	ldrb	r3, [r3, #14]
 8008792:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008794:	7dbb      	ldrb	r3, [r7, #22]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d143      	bne.n	8008822 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7b1b      	ldrb	r3, [r3, #12]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7b5b      	ldrb	r3, [r3, #13]
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <pbuf_free+0x90>
 80087c2:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <pbuf_free+0xf8>)
 80087c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80087c8:	491f      	ldr	r1, [pc, #124]	; (8008848 <pbuf_free+0x108>)
 80087ca:	481d      	ldr	r0, [pc, #116]	; (8008840 <pbuf_free+0x100>)
 80087cc:	f009 f986 	bl	8011adc <iprintf>
        pc->custom_free_function(p);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
 80087d8:	e01d      	b.n	8008816 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d104      	bne.n	80087ea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	2008      	movs	r0, #8
 80087e4:	f7ff f9b2 	bl	8007b4c <memp_free>
 80087e8:	e015      	b.n	8008816 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d104      	bne.n	80087fa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	2007      	movs	r0, #7
 80087f4:	f7ff f9aa 	bl	8007b4c <memp_free>
 80087f8:	e00d      	b.n	8008816 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <pbuf_free+0xc8>
          mem_free(p);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7fe fe83 	bl	800750c <mem_free>
 8008806:	e006      	b.n	8008816 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008808:	4b0b      	ldr	r3, [pc, #44]	; (8008838 <pbuf_free+0xf8>)
 800880a:	f240 320f 	movw	r2, #783	; 0x30f
 800880e:	490f      	ldr	r1, [pc, #60]	; (800884c <pbuf_free+0x10c>)
 8008810:	480b      	ldr	r0, [pc, #44]	; (8008840 <pbuf_free+0x100>)
 8008812:	f009 f963 	bl	8011adc <iprintf>
        }
      }
      count++;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	3301      	adds	r3, #1
 800881a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	607b      	str	r3, [r7, #4]
 8008820:	e001      	b.n	8008826 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d19f      	bne.n	800876c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	08014a08 	.word	0x08014a08
 800883c:	08014b6c 	.word	0x08014b6c
 8008840:	08014a68 	.word	0x08014a68
 8008844:	08014b98 	.word	0x08014b98
 8008848:	08014bb0 	.word	0x08014bb0
 800884c:	08014bd4 	.word	0x08014bd4

08008850 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800885c:	e005      	b.n	800886a <pbuf_clen+0x1a>
    ++len;
 800885e:	89fb      	ldrh	r3, [r7, #14]
 8008860:	3301      	adds	r3, #1
 8008862:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f6      	bne.n	800885e <pbuf_clen+0xe>
  }
  return len;
 8008870:	89fb      	ldrh	r3, [r7, #14]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d010      	beq.n	80088b0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7b9b      	ldrb	r3, [r3, #14]
 8008892:	3301      	adds	r3, #1
 8008894:	b2da      	uxtb	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7b9b      	ldrb	r3, [r3, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <pbuf_ref+0x30>
 80088a2:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <pbuf_ref+0x38>)
 80088a4:	f240 3242 	movw	r2, #834	; 0x342
 80088a8:	4904      	ldr	r1, [pc, #16]	; (80088bc <pbuf_ref+0x3c>)
 80088aa:	4805      	ldr	r0, [pc, #20]	; (80088c0 <pbuf_ref+0x40>)
 80088ac:	f009 f916 	bl	8011adc <iprintf>
  }
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	08014a08 	.word	0x08014a08
 80088bc:	08014be8 	.word	0x08014be8
 80088c0:	08014a68 	.word	0x08014a68

080088c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <pbuf_cat+0x16>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d107      	bne.n	80088ea <pbuf_cat+0x26>
 80088da:	4b20      	ldr	r3, [pc, #128]	; (800895c <pbuf_cat+0x98>)
 80088dc:	f240 325a 	movw	r2, #858	; 0x35a
 80088e0:	491f      	ldr	r1, [pc, #124]	; (8008960 <pbuf_cat+0x9c>)
 80088e2:	4820      	ldr	r0, [pc, #128]	; (8008964 <pbuf_cat+0xa0>)
 80088e4:	f009 f8fa 	bl	8011adc <iprintf>
 80088e8:	e034      	b.n	8008954 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e00a      	b.n	8008906 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	891a      	ldrh	r2, [r3, #8]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	891b      	ldrh	r3, [r3, #8]
 80088f8:	4413      	add	r3, r2
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	891a      	ldrh	r2, [r3, #8]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	895b      	ldrh	r3, [r3, #10]
 8008916:	429a      	cmp	r2, r3
 8008918:	d006      	beq.n	8008928 <pbuf_cat+0x64>
 800891a:	4b10      	ldr	r3, [pc, #64]	; (800895c <pbuf_cat+0x98>)
 800891c:	f240 3262 	movw	r2, #866	; 0x362
 8008920:	4911      	ldr	r1, [pc, #68]	; (8008968 <pbuf_cat+0xa4>)
 8008922:	4810      	ldr	r0, [pc, #64]	; (8008964 <pbuf_cat+0xa0>)
 8008924:	f009 f8da 	bl	8011adc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d006      	beq.n	800893e <pbuf_cat+0x7a>
 8008930:	4b0a      	ldr	r3, [pc, #40]	; (800895c <pbuf_cat+0x98>)
 8008932:	f240 3263 	movw	r2, #867	; 0x363
 8008936:	490d      	ldr	r1, [pc, #52]	; (800896c <pbuf_cat+0xa8>)
 8008938:	480a      	ldr	r0, [pc, #40]	; (8008964 <pbuf_cat+0xa0>)
 800893a:	f009 f8cf 	bl	8011adc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	891a      	ldrh	r2, [r3, #8]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	891b      	ldrh	r3, [r3, #8]
 8008946:	4413      	add	r3, r2
 8008948:	b29a      	uxth	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	08014a08 	.word	0x08014a08
 8008960:	08014bfc 	.word	0x08014bfc
 8008964:	08014a68 	.word	0x08014a68
 8008968:	08014c34 	.word	0x08014c34
 800896c:	08014c64 	.word	0x08014c64

08008970 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ffa1 	bl	80088c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	f7ff ff7c 	bl	8008880 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	2300      	movs	r3, #0
 80089a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d008      	beq.n	80089ba <pbuf_copy+0x2a>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <pbuf_copy+0x2a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	891a      	ldrh	r2, [r3, #8]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	891b      	ldrh	r3, [r3, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d209      	bcs.n	80089ce <pbuf_copy+0x3e>
 80089ba:	4b57      	ldr	r3, [pc, #348]	; (8008b18 <pbuf_copy+0x188>)
 80089bc:	f240 32ca 	movw	r2, #970	; 0x3ca
 80089c0:	4956      	ldr	r1, [pc, #344]	; (8008b1c <pbuf_copy+0x18c>)
 80089c2:	4857      	ldr	r0, [pc, #348]	; (8008b20 <pbuf_copy+0x190>)
 80089c4:	f009 f88a 	bl	8011adc <iprintf>
 80089c8:	f06f 030f 	mvn.w	r3, #15
 80089cc:	e09f      	b.n	8008b0e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	895b      	ldrh	r3, [r3, #10]
 80089d2:	461a      	mov	r2, r3
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	1ad2      	subs	r2, r2, r3
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	895b      	ldrh	r3, [r3, #10]
 80089dc:	4619      	mov	r1, r3
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1acb      	subs	r3, r1, r3
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d306      	bcc.n	80089f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	895b      	ldrh	r3, [r3, #10]
 80089ea:	461a      	mov	r2, r3
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	e005      	b.n	8008a00 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	895b      	ldrh	r3, [r3, #10]
 80089f8:	461a      	mov	r2, r3
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	18d0      	adds	r0, r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4619      	mov	r1, r3
 8008a14:	f008 ffa7 	bl	8011966 <memcpy>
    offset_to += len;
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	895b      	ldrh	r3, [r3, #10]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d906      	bls.n	8008a42 <pbuf_copy+0xb2>
 8008a34:	4b38      	ldr	r3, [pc, #224]	; (8008b18 <pbuf_copy+0x188>)
 8008a36:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008a3a:	493a      	ldr	r1, [pc, #232]	; (8008b24 <pbuf_copy+0x194>)
 8008a3c:	4838      	ldr	r0, [pc, #224]	; (8008b20 <pbuf_copy+0x190>)
 8008a3e:	f009 f84d 	bl	8011adc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	895b      	ldrh	r3, [r3, #10]
 8008a46:	461a      	mov	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d906      	bls.n	8008a5c <pbuf_copy+0xcc>
 8008a4e:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <pbuf_copy+0x188>)
 8008a50:	f240 32da 	movw	r2, #986	; 0x3da
 8008a54:	4934      	ldr	r1, [pc, #208]	; (8008b28 <pbuf_copy+0x198>)
 8008a56:	4832      	ldr	r0, [pc, #200]	; (8008b20 <pbuf_copy+0x190>)
 8008a58:	f009 f840 	bl	8011adc <iprintf>
    if (offset_from >= p_from->len) {
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	895b      	ldrh	r3, [r3, #10]
 8008a60:	461a      	mov	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d304      	bcc.n	8008a72 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	895b      	ldrh	r3, [r3, #10]
 8008a76:	461a      	mov	r2, r3
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d114      	bne.n	8008aa8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10c      	bne.n	8008aa8 <pbuf_copy+0x118>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d009      	beq.n	8008aa8 <pbuf_copy+0x118>
 8008a94:	4b20      	ldr	r3, [pc, #128]	; (8008b18 <pbuf_copy+0x188>)
 8008a96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008a9a:	4924      	ldr	r1, [pc, #144]	; (8008b2c <pbuf_copy+0x19c>)
 8008a9c:	4820      	ldr	r0, [pc, #128]	; (8008b20 <pbuf_copy+0x190>)
 8008a9e:	f009 f81d 	bl	8011adc <iprintf>
 8008aa2:	f06f 030f 	mvn.w	r3, #15
 8008aa6:	e032      	b.n	8008b0e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d013      	beq.n	8008ad6 <pbuf_copy+0x146>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	895a      	ldrh	r2, [r3, #10]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	891b      	ldrh	r3, [r3, #8]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d10d      	bne.n	8008ad6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <pbuf_copy+0x146>
 8008ac2:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <pbuf_copy+0x188>)
 8008ac4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8008ac8:	4919      	ldr	r1, [pc, #100]	; (8008b30 <pbuf_copy+0x1a0>)
 8008aca:	4815      	ldr	r0, [pc, #84]	; (8008b20 <pbuf_copy+0x190>)
 8008acc:	f009 f806 	bl	8011adc <iprintf>
 8008ad0:	f06f 0305 	mvn.w	r3, #5
 8008ad4:	e01b      	b.n	8008b0e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d013      	beq.n	8008b04 <pbuf_copy+0x174>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	895a      	ldrh	r2, [r3, #10]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	891b      	ldrh	r3, [r3, #8]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d10d      	bne.n	8008b04 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <pbuf_copy+0x174>
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <pbuf_copy+0x188>)
 8008af2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008af6:	490e      	ldr	r1, [pc, #56]	; (8008b30 <pbuf_copy+0x1a0>)
 8008af8:	4809      	ldr	r0, [pc, #36]	; (8008b20 <pbuf_copy+0x190>)
 8008afa:	f008 ffef 	bl	8011adc <iprintf>
 8008afe:	f06f 0305 	mvn.w	r3, #5
 8008b02:	e004      	b.n	8008b0e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f47f af61 	bne.w	80089ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	08014a08 	.word	0x08014a08
 8008b1c:	08014cb0 	.word	0x08014cb0
 8008b20:	08014a68 	.word	0x08014a68
 8008b24:	08014ce0 	.word	0x08014ce0
 8008b28:	08014cf8 	.word	0x08014cf8
 8008b2c:	08014d14 	.word	0x08014d14
 8008b30:	08014d24 	.word	0x08014d24

08008b34 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	461a      	mov	r2, r3
 8008b42:	460b      	mov	r3, r1
 8008b44:	80fb      	strh	r3, [r7, #6]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <pbuf_copy_partial+0x36>
 8008b58:	4b2b      	ldr	r3, [pc, #172]	; (8008c08 <pbuf_copy_partial+0xd4>)
 8008b5a:	f240 420a 	movw	r2, #1034	; 0x40a
 8008b5e:	492b      	ldr	r1, [pc, #172]	; (8008c0c <pbuf_copy_partial+0xd8>)
 8008b60:	482b      	ldr	r0, [pc, #172]	; (8008c10 <pbuf_copy_partial+0xdc>)
 8008b62:	f008 ffbb 	bl	8011adc <iprintf>
 8008b66:	2300      	movs	r3, #0
 8008b68:	e04a      	b.n	8008c00 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d108      	bne.n	8008b82 <pbuf_copy_partial+0x4e>
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <pbuf_copy_partial+0xd4>)
 8008b72:	f240 420b 	movw	r2, #1035	; 0x40b
 8008b76:	4927      	ldr	r1, [pc, #156]	; (8008c14 <pbuf_copy_partial+0xe0>)
 8008b78:	4825      	ldr	r0, [pc, #148]	; (8008c10 <pbuf_copy_partial+0xdc>)
 8008b7a:	f008 ffaf 	bl	8011adc <iprintf>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e03e      	b.n	8008c00 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e034      	b.n	8008bf2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008b88:	88bb      	ldrh	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00a      	beq.n	8008ba4 <pbuf_copy_partial+0x70>
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	895b      	ldrh	r3, [r3, #10]
 8008b92:	88ba      	ldrh	r2, [r7, #4]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d305      	bcc.n	8008ba4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	895b      	ldrh	r3, [r3, #10]
 8008b9c:	88ba      	ldrh	r2, [r7, #4]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	80bb      	strh	r3, [r7, #4]
 8008ba2:	e023      	b.n	8008bec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	895a      	ldrh	r2, [r3, #10]
 8008ba8:	88bb      	ldrh	r3, [r7, #4]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008bae:	8b3a      	ldrh	r2, [r7, #24]
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d901      	bls.n	8008bba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008bba:	8b7b      	ldrh	r3, [r7, #26]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	18d0      	adds	r0, r2, r3
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	88bb      	ldrh	r3, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	8b3a      	ldrh	r2, [r7, #24]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	f008 fecb 	bl	8011966 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008bd0:	8afa      	ldrh	r2, [r7, #22]
 8008bd2:	8b3b      	ldrh	r3, [r7, #24]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008bd8:	8b7a      	ldrh	r2, [r7, #26]
 8008bda:	8b3b      	ldrh	r3, [r7, #24]
 8008bdc:	4413      	add	r3, r2
 8008bde:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008be0:	88fa      	ldrh	r2, [r7, #6]
 8008be2:	8b3b      	ldrh	r3, [r7, #24]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	61fb      	str	r3, [r7, #28]
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <pbuf_copy_partial+0xca>
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1c4      	bne.n	8008b88 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008bfe:	8afb      	ldrh	r3, [r7, #22]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	08014a08 	.word	0x08014a08
 8008c0c:	08014d50 	.word	0x08014d50
 8008c10:	08014a68 	.word	0x08014a68
 8008c14:	08014d70 	.word	0x08014d70

08008c18 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	603a      	str	r2, [r7, #0]
 8008c22:	71fb      	strb	r3, [r7, #7]
 8008c24:	460b      	mov	r3, r1
 8008c26:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	8919      	ldrh	r1, [r3, #8]
 8008c2c:	88ba      	ldrh	r2, [r7, #4]
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff faa5 	bl	8008180 <pbuf_alloc>
 8008c36:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <pbuf_clone+0x2a>
    return NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e011      	b.n	8008c66 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fea3 	bl	8008990 <pbuf_copy>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008c4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <pbuf_clone+0x4c>
 8008c56:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <pbuf_clone+0x58>)
 8008c58:	f240 5224 	movw	r2, #1316	; 0x524
 8008c5c:	4905      	ldr	r1, [pc, #20]	; (8008c74 <pbuf_clone+0x5c>)
 8008c5e:	4806      	ldr	r0, [pc, #24]	; (8008c78 <pbuf_clone+0x60>)
 8008c60:	f008 ff3c 	bl	8011adc <iprintf>
  return q;
 8008c64:	68fb      	ldr	r3, [r7, #12]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	08014a08 	.word	0x08014a08
 8008c74:	08014e7c 	.word	0x08014e7c
 8008c78:	08014a68 	.word	0x08014a68

08008c7c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008c80:	f008 ff44 	bl	8011b0c <rand>
 8008c84:	4603      	mov	r3, r0
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	4b01      	ldr	r3, [pc, #4]	; (8008c9c <tcp_init+0x20>)
 8008c96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008c98:	bf00      	nop
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	2000001a 	.word	0x2000001a

08008ca0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7d1b      	ldrb	r3, [r3, #20]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d105      	bne.n	8008cbc <tcp_free+0x1c>
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <tcp_free+0x2c>)
 8008cb2:	22d4      	movs	r2, #212	; 0xd4
 8008cb4:	4906      	ldr	r1, [pc, #24]	; (8008cd0 <tcp_free+0x30>)
 8008cb6:	4807      	ldr	r0, [pc, #28]	; (8008cd4 <tcp_free+0x34>)
 8008cb8:	f008 ff10 	bl	8011adc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	f7fe ff44 	bl	8007b4c <memp_free>
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	08014f08 	.word	0x08014f08
 8008cd0:	08014f38 	.word	0x08014f38
 8008cd4:	08014f4c 	.word	0x08014f4c

08008cd8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7d1b      	ldrb	r3, [r3, #20]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d105      	bne.n	8008cf4 <tcp_free_listen+0x1c>
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <tcp_free_listen+0x2c>)
 8008cea:	22df      	movs	r2, #223	; 0xdf
 8008cec:	4906      	ldr	r1, [pc, #24]	; (8008d08 <tcp_free_listen+0x30>)
 8008cee:	4807      	ldr	r0, [pc, #28]	; (8008d0c <tcp_free_listen+0x34>)
 8008cf0:	f008 fef4 	bl	8011adc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	2002      	movs	r0, #2
 8008cf8:	f7fe ff28 	bl	8007b4c <memp_free>
}
 8008cfc:	bf00      	nop
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	08014f08 	.word	0x08014f08
 8008d08:	08014f74 	.word	0x08014f74
 8008d0c:	08014f4c 	.word	0x08014f4c

08008d10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008d14:	f001 f852 	bl	8009dbc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008d18:	4b07      	ldr	r3, [pc, #28]	; (8008d38 <tcp_tmr+0x28>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <tcp_tmr+0x28>)
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <tcp_tmr+0x28>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008d30:	f000 fd06 	bl	8009740 <tcp_slowtmr>
  }
}
 8008d34:	bf00      	nop
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000259 	.word	0x20000259

08008d3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <tcp_remove_listener+0x1c>
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <tcp_remove_listener+0x48>)
 8008d4e:	22ff      	movs	r2, #255	; 0xff
 8008d50:	490d      	ldr	r1, [pc, #52]	; (8008d88 <tcp_remove_listener+0x4c>)
 8008d52:	480e      	ldr	r0, [pc, #56]	; (8008d8c <tcp_remove_listener+0x50>)
 8008d54:	f008 fec2 	bl	8011adc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e00a      	b.n	8008d74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d102      	bne.n	8008d6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1f1      	bne.n	8008d5e <tcp_remove_listener+0x22>
    }
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	08014f08 	.word	0x08014f08
 8008d88:	08014f90 	.word	0x08014f90
 8008d8c:	08014f4c 	.word	0x08014f4c

08008d90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <tcp_listen_closed+0x1c>
 8008d9e:	4b14      	ldr	r3, [pc, #80]	; (8008df0 <tcp_listen_closed+0x60>)
 8008da0:	f240 1211 	movw	r2, #273	; 0x111
 8008da4:	4913      	ldr	r1, [pc, #76]	; (8008df4 <tcp_listen_closed+0x64>)
 8008da6:	4814      	ldr	r0, [pc, #80]	; (8008df8 <tcp_listen_closed+0x68>)
 8008da8:	f008 fe98 	bl	8011adc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	7d1b      	ldrb	r3, [r3, #20]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d006      	beq.n	8008dc2 <tcp_listen_closed+0x32>
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <tcp_listen_closed+0x60>)
 8008db6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008dba:	4910      	ldr	r1, [pc, #64]	; (8008dfc <tcp_listen_closed+0x6c>)
 8008dbc:	480e      	ldr	r0, [pc, #56]	; (8008df8 <tcp_listen_closed+0x68>)
 8008dbe:	f008 fe8d 	bl	8011adc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e00b      	b.n	8008de0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008dc8:	4a0d      	ldr	r2, [pc, #52]	; (8008e00 <tcp_listen_closed+0x70>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ffb1 	bl	8008d3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d9f0      	bls.n	8008dc8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	08014f08 	.word	0x08014f08
 8008df4:	08014fb8 	.word	0x08014fb8
 8008df8:	08014f4c 	.word	0x08014f4c
 8008dfc:	08014fc4 	.word	0x08014fc4
 8008e00:	08016edc 	.word	0x08016edc

08008e04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008e04:	b5b0      	push	{r4, r5, r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af04      	add	r7, sp, #16
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <tcp_close_shutdown+0x20>
 8008e16:	4b61      	ldr	r3, [pc, #388]	; (8008f9c <tcp_close_shutdown+0x198>)
 8008e18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008e1c:	4960      	ldr	r1, [pc, #384]	; (8008fa0 <tcp_close_shutdown+0x19c>)
 8008e1e:	4861      	ldr	r0, [pc, #388]	; (8008fa4 <tcp_close_shutdown+0x1a0>)
 8008e20:	f008 fe5c 	bl	8011adc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d066      	beq.n	8008ef8 <tcp_close_shutdown+0xf4>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	7d1b      	ldrb	r3, [r3, #20]
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d003      	beq.n	8008e3a <tcp_close_shutdown+0x36>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	7d1b      	ldrb	r3, [r3, #20]
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	d15e      	bne.n	8008ef8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <tcp_close_shutdown+0x48>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008e4a:	d055      	beq.n	8008ef8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8b5b      	ldrh	r3, [r3, #26]
 8008e50:	f003 0310 	and.w	r3, r3, #16
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <tcp_close_shutdown+0x62>
 8008e58:	4b50      	ldr	r3, [pc, #320]	; (8008f9c <tcp_close_shutdown+0x198>)
 8008e5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008e5e:	4952      	ldr	r1, [pc, #328]	; (8008fa8 <tcp_close_shutdown+0x1a4>)
 8008e60:	4850      	ldr	r0, [pc, #320]	; (8008fa4 <tcp_close_shutdown+0x1a0>)
 8008e62:	f008 fe3b 	bl	8011adc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008e6e:	687d      	ldr	r5, [r7, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3304      	adds	r3, #4
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	8ad2      	ldrh	r2, [r2, #22]
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	8b09      	ldrh	r1, [r1, #24]
 8008e7c:	9102      	str	r1, [sp, #8]
 8008e7e:	9201      	str	r2, [sp, #4]
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	462b      	mov	r3, r5
 8008e84:	4622      	mov	r2, r4
 8008e86:	4601      	mov	r1, r0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f005 fd8b 	bl	800e9a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 fb5a 	bl	800a548 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008e94:	4b45      	ldr	r3, [pc, #276]	; (8008fac <tcp_close_shutdown+0x1a8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d105      	bne.n	8008eaa <tcp_close_shutdown+0xa6>
 8008e9e:	4b43      	ldr	r3, [pc, #268]	; (8008fac <tcp_close_shutdown+0x1a8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a41      	ldr	r2, [pc, #260]	; (8008fac <tcp_close_shutdown+0x1a8>)
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	e013      	b.n	8008ed2 <tcp_close_shutdown+0xce>
 8008eaa:	4b40      	ldr	r3, [pc, #256]	; (8008fac <tcp_close_shutdown+0x1a8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	e00c      	b.n	8008ecc <tcp_close_shutdown+0xc8>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d104      	bne.n	8008ec6 <tcp_close_shutdown+0xc2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	60da      	str	r2, [r3, #12]
 8008ec4:	e005      	b.n	8008ed2 <tcp_close_shutdown+0xce>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1ef      	bne.n	8008eb2 <tcp_close_shutdown+0xae>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	60da      	str	r2, [r3, #12]
 8008ed8:	4b35      	ldr	r3, [pc, #212]	; (8008fb0 <tcp_close_shutdown+0x1ac>)
 8008eda:	2201      	movs	r2, #1
 8008edc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008ede:	4b35      	ldr	r3, [pc, #212]	; (8008fb4 <tcp_close_shutdown+0x1b0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d102      	bne.n	8008eee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008ee8:	f003 ffec 	bl	800cec4 <tcp_trigger_input_pcb_close>
 8008eec:	e002      	b.n	8008ef4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff fed6 	bl	8008ca0 <tcp_free>
      }
      return ERR_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	e04d      	b.n	8008f94 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	7d1b      	ldrb	r3, [r3, #20]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d02d      	beq.n	8008f5c <tcp_close_shutdown+0x158>
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d036      	beq.n	8008f72 <tcp_close_shutdown+0x16e>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d13f      	bne.n	8008f88 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	8adb      	ldrh	r3, [r3, #22]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d021      	beq.n	8008f54 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008f10:	4b29      	ldr	r3, [pc, #164]	; (8008fb8 <tcp_close_shutdown+0x1b4>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d105      	bne.n	8008f26 <tcp_close_shutdown+0x122>
 8008f1a:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <tcp_close_shutdown+0x1b4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4a25      	ldr	r2, [pc, #148]	; (8008fb8 <tcp_close_shutdown+0x1b4>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	e013      	b.n	8008f4e <tcp_close_shutdown+0x14a>
 8008f26:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <tcp_close_shutdown+0x1b4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	60bb      	str	r3, [r7, #8]
 8008f2c:	e00c      	b.n	8008f48 <tcp_close_shutdown+0x144>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d104      	bne.n	8008f42 <tcp_close_shutdown+0x13e>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	60da      	str	r2, [r3, #12]
 8008f40:	e005      	b.n	8008f4e <tcp_close_shutdown+0x14a>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	60bb      	str	r3, [r7, #8]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1ef      	bne.n	8008f2e <tcp_close_shutdown+0x12a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fea3 	bl	8008ca0 <tcp_free>
      break;
 8008f5a:	e01a      	b.n	8008f92 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ff17 	bl	8008d90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4815      	ldr	r0, [pc, #84]	; (8008fbc <tcp_close_shutdown+0x1b8>)
 8008f66:	f001 fb3f 	bl	800a5e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff feb4 	bl	8008cd8 <tcp_free_listen>
      break;
 8008f70:	e00f      	b.n	8008f92 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	480d      	ldr	r0, [pc, #52]	; (8008fac <tcp_close_shutdown+0x1a8>)
 8008f76:	f001 fb37 	bl	800a5e8 <tcp_pcb_remove>
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <tcp_close_shutdown+0x1ac>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fe8d 	bl	8008ca0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008f86:	e004      	b.n	8008f92 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f819 	bl	8008fc0 <tcp_close_shutdown_fin>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	e000      	b.n	8008f94 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f9c:	08014f08 	.word	0x08014f08
 8008fa0:	08014fdc 	.word	0x08014fdc
 8008fa4:	08014f4c 	.word	0x08014f4c
 8008fa8:	08014ffc 	.word	0x08014ffc
 8008fac:	20006fb0 	.word	0x20006fb0
 8008fb0:	20006fac 	.word	0x20006fac
 8008fb4:	20006fc4 	.word	0x20006fc4
 8008fb8:	20006fbc 	.word	0x20006fbc
 8008fbc:	20006fb8 	.word	0x20006fb8

08008fc0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <tcp_close_shutdown_fin+0x1c>
 8008fce:	4b2c      	ldr	r3, [pc, #176]	; (8009080 <tcp_close_shutdown_fin+0xc0>)
 8008fd0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008fd4:	492b      	ldr	r1, [pc, #172]	; (8009084 <tcp_close_shutdown_fin+0xc4>)
 8008fd6:	482c      	ldr	r0, [pc, #176]	; (8009088 <tcp_close_shutdown_fin+0xc8>)
 8008fd8:	f008 fd80 	bl	8011adc <iprintf>

  switch (pcb->state) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7d1b      	ldrb	r3, [r3, #20]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d010      	beq.n	8009006 <tcp_close_shutdown_fin+0x46>
 8008fe4:	2b07      	cmp	r3, #7
 8008fe6:	d01b      	beq.n	8009020 <tcp_close_shutdown_fin+0x60>
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d126      	bne.n	800903a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f004 fdd5 	bl	800db9c <tcp_send_fin>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d11f      	bne.n	800903e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2205      	movs	r2, #5
 8009002:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009004:	e01b      	b.n	800903e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f004 fdc8 	bl	800db9c <tcp_send_fin>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d114      	bne.n	8009042 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2205      	movs	r2, #5
 800901c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800901e:	e010      	b.n	8009042 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f004 fdbb 	bl	800db9c <tcp_send_fin>
 8009026:	4603      	mov	r3, r0
 8009028:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800902a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d109      	bne.n	8009046 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2209      	movs	r2, #9
 8009036:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009038:	e005      	b.n	8009046 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	e01c      	b.n	8009078 <tcp_close_shutdown_fin+0xb8>
      break;
 800903e:	bf00      	nop
 8009040:	e002      	b.n	8009048 <tcp_close_shutdown_fin+0x88>
      break;
 8009042:	bf00      	nop
 8009044:	e000      	b.n	8009048 <tcp_close_shutdown_fin+0x88>
      break;
 8009046:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f004 fee1 	bl	800de18 <tcp_output>
 8009056:	e00d      	b.n	8009074 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009060:	d108      	bne.n	8009074 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	8b5b      	ldrh	r3, [r3, #26]
 8009066:	f043 0308 	orr.w	r3, r3, #8
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e001      	b.n	8009078 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	08014f08 	.word	0x08014f08
 8009084:	08014fb8 	.word	0x08014fb8
 8009088:	08014f4c 	.word	0x08014f4c

0800908c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <tcp_close+0x22>
 800909a:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <tcp_close+0x4c>)
 800909c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80090a0:	490e      	ldr	r1, [pc, #56]	; (80090dc <tcp_close+0x50>)
 80090a2:	480f      	ldr	r0, [pc, #60]	; (80090e0 <tcp_close+0x54>)
 80090a4:	f008 fd1a 	bl	8011adc <iprintf>
 80090a8:	f06f 030f 	mvn.w	r3, #15
 80090ac:	e00f      	b.n	80090ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	7d1b      	ldrb	r3, [r3, #20]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d006      	beq.n	80090c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8b5b      	ldrh	r3, [r3, #26]
 80090ba:	f043 0310 	orr.w	r3, r3, #16
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80090c4:	2101      	movs	r1, #1
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fe9c 	bl	8008e04 <tcp_close_shutdown>
 80090cc:	4603      	mov	r3, r0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	08014f08 	.word	0x08014f08
 80090dc:	08015018 	.word	0x08015018
 80090e0:	08014f4c 	.word	0x08014f4c

080090e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08e      	sub	sp, #56	; 0x38
 80090e8:	af04      	add	r7, sp, #16
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d107      	bne.n	8009104 <tcp_abandon+0x20>
 80090f4:	4b52      	ldr	r3, [pc, #328]	; (8009240 <tcp_abandon+0x15c>)
 80090f6:	f240 223d 	movw	r2, #573	; 0x23d
 80090fa:	4952      	ldr	r1, [pc, #328]	; (8009244 <tcp_abandon+0x160>)
 80090fc:	4852      	ldr	r0, [pc, #328]	; (8009248 <tcp_abandon+0x164>)
 80090fe:	f008 fced 	bl	8011adc <iprintf>
 8009102:	e099      	b.n	8009238 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7d1b      	ldrb	r3, [r3, #20]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d106      	bne.n	800911a <tcp_abandon+0x36>
 800910c:	4b4c      	ldr	r3, [pc, #304]	; (8009240 <tcp_abandon+0x15c>)
 800910e:	f240 2241 	movw	r2, #577	; 0x241
 8009112:	494e      	ldr	r1, [pc, #312]	; (800924c <tcp_abandon+0x168>)
 8009114:	484c      	ldr	r0, [pc, #304]	; (8009248 <tcp_abandon+0x164>)
 8009116:	f008 fce1 	bl	8011adc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	2b0a      	cmp	r3, #10
 8009120:	d107      	bne.n	8009132 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	484a      	ldr	r0, [pc, #296]	; (8009250 <tcp_abandon+0x16c>)
 8009126:	f001 fa5f 	bl	800a5e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff fdb8 	bl	8008ca0 <tcp_free>
 8009130:	e082      	b.n	8009238 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800913e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7d1b      	ldrb	r3, [r3, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d126      	bne.n	80091aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	8adb      	ldrh	r3, [r3, #22]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d02e      	beq.n	80091c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009164:	4b3b      	ldr	r3, [pc, #236]	; (8009254 <tcp_abandon+0x170>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d105      	bne.n	800917a <tcp_abandon+0x96>
 800916e:	4b39      	ldr	r3, [pc, #228]	; (8009254 <tcp_abandon+0x170>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	4a37      	ldr	r2, [pc, #220]	; (8009254 <tcp_abandon+0x170>)
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e013      	b.n	80091a2 <tcp_abandon+0xbe>
 800917a:	4b36      	ldr	r3, [pc, #216]	; (8009254 <tcp_abandon+0x170>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	61fb      	str	r3, [r7, #28]
 8009180:	e00c      	b.n	800919c <tcp_abandon+0xb8>
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d104      	bne.n	8009196 <tcp_abandon+0xb2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	60da      	str	r2, [r3, #12]
 8009194:	e005      	b.n	80091a2 <tcp_abandon+0xbe>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1ef      	bne.n	8009182 <tcp_abandon+0x9e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	60da      	str	r2, [r3, #12]
 80091a8:	e00b      	b.n	80091c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8adb      	ldrh	r3, [r3, #22]
 80091b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	4828      	ldr	r0, [pc, #160]	; (8009258 <tcp_abandon+0x174>)
 80091b8:	f001 fa16 	bl	800a5e8 <tcp_pcb_remove>
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <tcp_abandon+0x178>)
 80091be:	2201      	movs	r2, #1
 80091c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fed4 	bl	8009f7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fecb 	bl	8009f7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d004      	beq.n	80091f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fec2 	bl	8009f7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00e      	beq.n	800921c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	8b12      	ldrh	r2, [r2, #24]
 8009208:	9202      	str	r2, [sp, #8]
 800920a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800920c:	9201      	str	r2, [sp, #4]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	460b      	mov	r3, r1
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f005 fbc4 	bl	800e9a4 <tcp_rst>
    }
    last_state = pcb->state;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7d1b      	ldrb	r3, [r3, #20]
 8009220:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff fd3c 	bl	8008ca0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <tcp_abandon+0x154>
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f06f 010c 	mvn.w	r1, #12
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	4798      	blx	r3
  }
}
 8009238:	3728      	adds	r7, #40	; 0x28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	08014f08 	.word	0x08014f08
 8009244:	0801504c 	.word	0x0801504c
 8009248:	08014f4c 	.word	0x08014f4c
 800924c:	08015068 	.word	0x08015068
 8009250:	20006fc0 	.word	0x20006fc0
 8009254:	20006fbc 	.word	0x20006fbc
 8009258:	20006fb0 	.word	0x20006fb0
 800925c:	20006fac 	.word	0x20006fac

08009260 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009268:	2101      	movs	r1, #1
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff ff3a 	bl	80090e4 <tcp_abandon>
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009286:	2304      	movs	r3, #4
 8009288:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009290:	4b3e      	ldr	r3, [pc, #248]	; (800938c <tcp_bind+0x114>)
 8009292:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <tcp_bind+0x36>
 800929a:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <tcp_bind+0x118>)
 800929c:	f240 22a9 	movw	r2, #681	; 0x2a9
 80092a0:	493c      	ldr	r1, [pc, #240]	; (8009394 <tcp_bind+0x11c>)
 80092a2:	483d      	ldr	r0, [pc, #244]	; (8009398 <tcp_bind+0x120>)
 80092a4:	f008 fc1a 	bl	8011adc <iprintf>
 80092a8:	f06f 030f 	mvn.w	r3, #15
 80092ac:	e06a      	b.n	8009384 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	7d1b      	ldrb	r3, [r3, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <tcp_bind+0x52>
 80092b6:	4b36      	ldr	r3, [pc, #216]	; (8009390 <tcp_bind+0x118>)
 80092b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80092bc:	4937      	ldr	r1, [pc, #220]	; (800939c <tcp_bind+0x124>)
 80092be:	4836      	ldr	r0, [pc, #216]	; (8009398 <tcp_bind+0x120>)
 80092c0:	f008 fc0c 	bl	8011adc <iprintf>
 80092c4:	f06f 0305 	mvn.w	r3, #5
 80092c8:	e05c      	b.n	8009384 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80092ca:	88fb      	ldrh	r3, [r7, #6]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d109      	bne.n	80092e4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80092d0:	f000 f9f0 	bl	80096b4 <tcp_new_port>
 80092d4:	4603      	mov	r3, r0
 80092d6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80092d8:	88fb      	ldrh	r3, [r7, #6]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d135      	bne.n	800934a <tcp_bind+0xd2>
      return ERR_BUF;
 80092de:	f06f 0301 	mvn.w	r3, #1
 80092e2:	e04f      	b.n	8009384 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80092e4:	2300      	movs	r3, #0
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e02b      	b.n	8009342 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80092ea:	4a2d      	ldr	r2, [pc, #180]	; (80093a0 <tcp_bind+0x128>)
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	61bb      	str	r3, [r7, #24]
 80092f6:	e01e      	b.n	8009336 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	8adb      	ldrh	r3, [r3, #22]
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d116      	bne.n	8009330 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009302:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009304:	2b00      	cmp	r3, #0
 8009306:	d010      	beq.n	800932a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <tcp_bind+0xb2>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d005      	beq.n	800932a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009326:	429a      	cmp	r2, r3
 8009328:	d102      	bne.n	8009330 <tcp_bind+0xb8>
              return ERR_USE;
 800932a:	f06f 0307 	mvn.w	r3, #7
 800932e:	e029      	b.n	8009384 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1dd      	bne.n	80092f8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	3301      	adds	r3, #1
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	429a      	cmp	r2, r3
 8009348:	dbcf      	blt.n	80092ea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00c      	beq.n	800936a <tcp_bind+0xf2>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d008      	beq.n	800936a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <tcp_bind+0xec>
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	e000      	b.n	8009366 <tcp_bind+0xee>
 8009364:	2300      	movs	r3, #0
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	88fa      	ldrh	r2, [r7, #6]
 800936e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009370:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <tcp_bind+0x12c>)
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	60da      	str	r2, [r3, #12]
 8009378:	4a0a      	ldr	r2, [pc, #40]	; (80093a4 <tcp_bind+0x12c>)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	f005 fcd3 	bl	800ed28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	08016f04 	.word	0x08016f04
 8009390:	08014f08 	.word	0x08014f08
 8009394:	0801509c 	.word	0x0801509c
 8009398:	08014f4c 	.word	0x08014f4c
 800939c:	080150b4 	.word	0x080150b4
 80093a0:	08016edc 	.word	0x08016edc
 80093a4:	20006fbc 	.word	0x20006fbc

080093a8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d106      	bne.n	80093ca <tcp_accept_null+0x22>
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <tcp_accept_null+0x34>)
 80093be:	f240 320f 	movw	r2, #783	; 0x30f
 80093c2:	4907      	ldr	r1, [pc, #28]	; (80093e0 <tcp_accept_null+0x38>)
 80093c4:	4807      	ldr	r0, [pc, #28]	; (80093e4 <tcp_accept_null+0x3c>)
 80093c6:	f008 fb89 	bl	8011adc <iprintf>

  tcp_abort(pcb);
 80093ca:	68b8      	ldr	r0, [r7, #8]
 80093cc:	f7ff ff48 	bl	8009260 <tcp_abort>

  return ERR_ABRT;
 80093d0:	f06f 030c 	mvn.w	r3, #12
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	08014f08 	.word	0x08014f08
 80093e0:	080150dc 	.word	0x080150dc
 80093e4:	08014f4c 	.word	0x08014f4c

080093e8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	2200      	movs	r2, #0
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f806 	bl	800940c <tcp_listen_with_backlog_and_err>
 8009400:	4603      	mov	r3, r0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	460b      	mov	r3, r1
 8009416:	607a      	str	r2, [r7, #4]
 8009418:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <tcp_listen_with_backlog_and_err+0x2c>
 8009424:	4b47      	ldr	r3, [pc, #284]	; (8009544 <tcp_listen_with_backlog_and_err+0x138>)
 8009426:	f240 3259 	movw	r2, #857	; 0x359
 800942a:	4947      	ldr	r1, [pc, #284]	; (8009548 <tcp_listen_with_backlog_and_err+0x13c>)
 800942c:	4847      	ldr	r0, [pc, #284]	; (800954c <tcp_listen_with_backlog_and_err+0x140>)
 800942e:	f008 fb55 	bl	8011adc <iprintf>
 8009432:	23f0      	movs	r3, #240	; 0xf0
 8009434:	76fb      	strb	r3, [r7, #27]
 8009436:	e079      	b.n	800952c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	7d1b      	ldrb	r3, [r3, #20]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <tcp_listen_with_backlog_and_err+0x48>
 8009440:	4b40      	ldr	r3, [pc, #256]	; (8009544 <tcp_listen_with_backlog_and_err+0x138>)
 8009442:	f240 325a 	movw	r2, #858	; 0x35a
 8009446:	4942      	ldr	r1, [pc, #264]	; (8009550 <tcp_listen_with_backlog_and_err+0x144>)
 8009448:	4840      	ldr	r0, [pc, #256]	; (800954c <tcp_listen_with_backlog_and_err+0x140>)
 800944a:	f008 fb47 	bl	8011adc <iprintf>
 800944e:	23f1      	movs	r3, #241	; 0xf1
 8009450:	76fb      	strb	r3, [r7, #27]
 8009452:	e06b      	b.n	800952c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	7d1b      	ldrb	r3, [r3, #20]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d104      	bne.n	8009466 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009460:	23f7      	movs	r3, #247	; 0xf7
 8009462:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009464:	e062      	b.n	800952c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009466:	2002      	movs	r0, #2
 8009468:	f7fe fb24 	bl	8007ab4 <memp_malloc>
 800946c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009474:	23ff      	movs	r3, #255	; 0xff
 8009476:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009478:	e058      	b.n	800952c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	691a      	ldr	r2, [r3, #16]
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8ada      	ldrh	r2, [r3, #22]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	2201      	movs	r2, #1
 800948e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	7d5a      	ldrb	r2, [r3, #21]
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	7a5a      	ldrb	r2, [r3, #9]
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	2200      	movs	r2, #0
 80094a4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	7ada      	ldrb	r2, [r3, #11]
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	7a9a      	ldrb	r2, [r3, #10]
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8adb      	ldrh	r3, [r3, #22]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d021      	beq.n	800950a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80094c6:	4b23      	ldr	r3, [pc, #140]	; (8009554 <tcp_listen_with_backlog_and_err+0x148>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d105      	bne.n	80094dc <tcp_listen_with_backlog_and_err+0xd0>
 80094d0:	4b20      	ldr	r3, [pc, #128]	; (8009554 <tcp_listen_with_backlog_and_err+0x148>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <tcp_listen_with_backlog_and_err+0x148>)
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e013      	b.n	8009504 <tcp_listen_with_backlog_and_err+0xf8>
 80094dc:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <tcp_listen_with_backlog_and_err+0x148>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	e00c      	b.n	80094fe <tcp_listen_with_backlog_and_err+0xf2>
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d104      	bne.n	80094f8 <tcp_listen_with_backlog_and_err+0xec>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	60da      	str	r2, [r3, #12]
 80094f6:	e005      	b.n	8009504 <tcp_listen_with_backlog_and_err+0xf8>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1ef      	bne.n	80094e4 <tcp_listen_with_backlog_and_err+0xd8>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fbc8 	bl	8008ca0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4a11      	ldr	r2, [pc, #68]	; (8009558 <tcp_listen_with_backlog_and_err+0x14c>)
 8009514:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009516:	4b11      	ldr	r3, [pc, #68]	; (800955c <tcp_listen_with_backlog_and_err+0x150>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	60da      	str	r2, [r3, #12]
 800951e:	4a0f      	ldr	r2, [pc, #60]	; (800955c <tcp_listen_with_backlog_and_err+0x150>)
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	f005 fc00 	bl	800ed28 <tcp_timer_needed>
  res = ERR_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d002      	beq.n	8009538 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7efa      	ldrb	r2, [r7, #27]
 8009536:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009538:	69fb      	ldr	r3, [r7, #28]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3720      	adds	r7, #32
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	08014f08 	.word	0x08014f08
 8009548:	080150fc 	.word	0x080150fc
 800954c:	08014f4c 	.word	0x08014f4c
 8009550:	0801512c 	.word	0x0801512c
 8009554:	20006fbc 	.word	0x20006fbc
 8009558:	080093a9 	.word	0x080093a9
 800955c:	20006fb8 	.word	0x20006fb8

08009560 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d106      	bne.n	800957c <tcp_update_rcv_ann_wnd+0x1c>
 800956e:	4b25      	ldr	r3, [pc, #148]	; (8009604 <tcp_update_rcv_ann_wnd+0xa4>)
 8009570:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009574:	4924      	ldr	r1, [pc, #144]	; (8009608 <tcp_update_rcv_ann_wnd+0xa8>)
 8009576:	4825      	ldr	r0, [pc, #148]	; (800960c <tcp_update_rcv_ann_wnd+0xac>)
 8009578:	f008 fab0 	bl	8011adc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009584:	4413      	add	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009590:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009594:	bf28      	it	cs
 8009596:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800959a:	b292      	uxth	r2, r2
 800959c:	4413      	add	r3, r2
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	db08      	blt.n	80095b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	e020      	b.n	80095fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dd03      	ble.n	80095ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095cc:	e014      	b.n	80095f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e0:	d306      	bcc.n	80095f0 <tcp_update_rcv_ann_wnd+0x90>
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <tcp_update_rcv_ann_wnd+0xa4>)
 80095e4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80095e8:	4909      	ldr	r1, [pc, #36]	; (8009610 <tcp_update_rcv_ann_wnd+0xb0>)
 80095ea:	4808      	ldr	r0, [pc, #32]	; (800960c <tcp_update_rcv_ann_wnd+0xac>)
 80095ec:	f008 fa76 	bl	8011adc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80095f8:	2300      	movs	r3, #0
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	08014f08 	.word	0x08014f08
 8009608:	08015164 	.word	0x08015164
 800960c:	08014f4c 	.word	0x08014f4c
 8009610:	08015188 	.word	0x08015188

08009614 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d107      	bne.n	8009636 <tcp_recved+0x22>
 8009626:	4b1f      	ldr	r3, [pc, #124]	; (80096a4 <tcp_recved+0x90>)
 8009628:	f240 32cf 	movw	r2, #975	; 0x3cf
 800962c:	491e      	ldr	r1, [pc, #120]	; (80096a8 <tcp_recved+0x94>)
 800962e:	481f      	ldr	r0, [pc, #124]	; (80096ac <tcp_recved+0x98>)
 8009630:	f008 fa54 	bl	8011adc <iprintf>
 8009634:	e032      	b.n	800969c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7d1b      	ldrb	r3, [r3, #20]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d106      	bne.n	800964c <tcp_recved+0x38>
 800963e:	4b19      	ldr	r3, [pc, #100]	; (80096a4 <tcp_recved+0x90>)
 8009640:	f240 32d3 	movw	r2, #979	; 0x3d3
 8009644:	491a      	ldr	r1, [pc, #104]	; (80096b0 <tcp_recved+0x9c>)
 8009646:	4819      	ldr	r0, [pc, #100]	; (80096ac <tcp_recved+0x98>)
 8009648:	f008 fa48 	bl	8011adc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009650:	887b      	ldrh	r3, [r7, #2]
 8009652:	4413      	add	r3, r2
 8009654:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009656:	89fb      	ldrh	r3, [r7, #14]
 8009658:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800965c:	d804      	bhi.n	8009668 <tcp_recved+0x54>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009662:	89fa      	ldrh	r2, [r7, #14]
 8009664:	429a      	cmp	r2, r3
 8009666:	d204      	bcs.n	8009672 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800966e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009670:	e002      	b.n	8009678 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	89fa      	ldrh	r2, [r7, #14]
 8009676:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ff71 	bl	8009560 <tcp_update_rcv_ann_wnd>
 800967e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009686:	d309      	bcc.n	800969c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	8b5b      	ldrh	r3, [r3, #26]
 800968c:	f043 0302 	orr.w	r3, r3, #2
 8009690:	b29a      	uxth	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f004 fbbe 	bl	800de18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08014f08 	.word	0x08014f08
 80096a8:	080151a4 	.word	0x080151a4
 80096ac:	08014f4c 	.word	0x08014f4c
 80096b0:	080151bc 	.word	0x080151bc

080096b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80096be:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <tcp_new_port+0x84>)
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	3301      	adds	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	4b1c      	ldr	r3, [pc, #112]	; (8009738 <tcp_new_port+0x84>)
 80096c8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <tcp_new_port+0x84>)
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d103      	bne.n	80096de <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80096d6:	4b18      	ldr	r3, [pc, #96]	; (8009738 <tcp_new_port+0x84>)
 80096d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80096dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80096de:	2300      	movs	r3, #0
 80096e0:	71fb      	strb	r3, [r7, #7]
 80096e2:	e01e      	b.n	8009722 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	4a15      	ldr	r2, [pc, #84]	; (800973c <tcp_new_port+0x88>)
 80096e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	e011      	b.n	8009716 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	8ada      	ldrh	r2, [r3, #22]
 80096f6:	4b10      	ldr	r3, [pc, #64]	; (8009738 <tcp_new_port+0x84>)
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d108      	bne.n	8009710 <tcp_new_port+0x5c>
        n++;
 80096fe:	88bb      	ldrh	r3, [r7, #4]
 8009700:	3301      	adds	r3, #1
 8009702:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009704:	88bb      	ldrh	r3, [r7, #4]
 8009706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800970a:	d3d8      	bcc.n	80096be <tcp_new_port+0xa>
          return 0;
 800970c:	2300      	movs	r3, #0
 800970e:	e00d      	b.n	800972c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	603b      	str	r3, [r7, #0]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1ea      	bne.n	80096f2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	3301      	adds	r3, #1
 8009720:	71fb      	strb	r3, [r7, #7]
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	2b03      	cmp	r3, #3
 8009726:	d9dd      	bls.n	80096e4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009728:	4b03      	ldr	r3, [pc, #12]	; (8009738 <tcp_new_port+0x84>)
 800972a:	881b      	ldrh	r3, [r3, #0]
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	2000001a 	.word	0x2000001a
 800973c:	08016edc 	.word	0x08016edc

08009740 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009740:	b5b0      	push	{r4, r5, r7, lr}
 8009742:	b090      	sub	sp, #64	; 0x40
 8009744:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800974c:	4b94      	ldr	r3, [pc, #592]	; (80099a0 <tcp_slowtmr+0x260>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	4a93      	ldr	r2, [pc, #588]	; (80099a0 <tcp_slowtmr+0x260>)
 8009754:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009756:	4b93      	ldr	r3, [pc, #588]	; (80099a4 <tcp_slowtmr+0x264>)
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	b2da      	uxtb	r2, r3
 800975e:	4b91      	ldr	r3, [pc, #580]	; (80099a4 <tcp_slowtmr+0x264>)
 8009760:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009766:	4b90      	ldr	r3, [pc, #576]	; (80099a8 <tcp_slowtmr+0x268>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800976c:	e29d      	b.n	8009caa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	7d1b      	ldrb	r3, [r3, #20]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d106      	bne.n	8009784 <tcp_slowtmr+0x44>
 8009776:	4b8d      	ldr	r3, [pc, #564]	; (80099ac <tcp_slowtmr+0x26c>)
 8009778:	f240 42be 	movw	r2, #1214	; 0x4be
 800977c:	498c      	ldr	r1, [pc, #560]	; (80099b0 <tcp_slowtmr+0x270>)
 800977e:	488d      	ldr	r0, [pc, #564]	; (80099b4 <tcp_slowtmr+0x274>)
 8009780:	f008 f9ac 	bl	8011adc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	7d1b      	ldrb	r3, [r3, #20]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d106      	bne.n	800979a <tcp_slowtmr+0x5a>
 800978c:	4b87      	ldr	r3, [pc, #540]	; (80099ac <tcp_slowtmr+0x26c>)
 800978e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009792:	4989      	ldr	r1, [pc, #548]	; (80099b8 <tcp_slowtmr+0x278>)
 8009794:	4887      	ldr	r0, [pc, #540]	; (80099b4 <tcp_slowtmr+0x274>)
 8009796:	f008 f9a1 	bl	8011adc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	7d1b      	ldrb	r3, [r3, #20]
 800979e:	2b0a      	cmp	r3, #10
 80097a0:	d106      	bne.n	80097b0 <tcp_slowtmr+0x70>
 80097a2:	4b82      	ldr	r3, [pc, #520]	; (80099ac <tcp_slowtmr+0x26c>)
 80097a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80097a8:	4984      	ldr	r1, [pc, #528]	; (80099bc <tcp_slowtmr+0x27c>)
 80097aa:	4882      	ldr	r0, [pc, #520]	; (80099b4 <tcp_slowtmr+0x274>)
 80097ac:	f008 f996 	bl	8011adc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	7f9a      	ldrb	r2, [r3, #30]
 80097b4:	4b7b      	ldr	r3, [pc, #492]	; (80099a4 <tcp_slowtmr+0x264>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d105      	bne.n	80097c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80097c6:	e270      	b.n	8009caa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80097c8:	4b76      	ldr	r3, [pc, #472]	; (80099a4 <tcp_slowtmr+0x264>)
 80097ca:	781a      	ldrb	r2, [r3, #0]
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80097dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097de:	7d1b      	ldrb	r3, [r3, #20]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d10a      	bne.n	80097fa <tcp_slowtmr+0xba>
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	d905      	bls.n	80097fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80097ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f2:	3301      	adds	r3, #1
 80097f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097f8:	e11e      	b.n	8009a38 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80097fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009800:	2b0b      	cmp	r3, #11
 8009802:	d905      	bls.n	8009810 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009808:	3301      	adds	r3, #1
 800980a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800980e:	e113      	b.n	8009a38 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009816:	2b00      	cmp	r3, #0
 8009818:	d075      	beq.n	8009906 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	2b00      	cmp	r3, #0
 8009820:	d006      	beq.n	8009830 <tcp_slowtmr+0xf0>
 8009822:	4b62      	ldr	r3, [pc, #392]	; (80099ac <tcp_slowtmr+0x26c>)
 8009824:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009828:	4965      	ldr	r1, [pc, #404]	; (80099c0 <tcp_slowtmr+0x280>)
 800982a:	4862      	ldr	r0, [pc, #392]	; (80099b4 <tcp_slowtmr+0x274>)
 800982c:	f008 f956 	bl	8011adc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <tcp_slowtmr+0x106>
 8009838:	4b5c      	ldr	r3, [pc, #368]	; (80099ac <tcp_slowtmr+0x26c>)
 800983a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800983e:	4961      	ldr	r1, [pc, #388]	; (80099c4 <tcp_slowtmr+0x284>)
 8009840:	485c      	ldr	r0, [pc, #368]	; (80099b4 <tcp_slowtmr+0x274>)
 8009842:	f008 f94b 	bl	8011adc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800984c:	2b0b      	cmp	r3, #11
 800984e:	d905      	bls.n	800985c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009854:	3301      	adds	r3, #1
 8009856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800985a:	e0ed      	b.n	8009a38 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800985c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009862:	3b01      	subs	r3, #1
 8009864:	4a58      	ldr	r2, [pc, #352]	; (80099c8 <tcp_slowtmr+0x288>)
 8009866:	5cd3      	ldrb	r3, [r2, r3]
 8009868:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009870:	7c7a      	ldrb	r2, [r7, #17]
 8009872:	429a      	cmp	r2, r3
 8009874:	d907      	bls.n	8009886 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800987c:	3301      	adds	r3, #1
 800987e:	b2da      	uxtb	r2, r3
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800988c:	7c7a      	ldrb	r2, [r7, #17]
 800988e:	429a      	cmp	r2, r3
 8009890:	f200 80d2 	bhi.w	8009a38 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009894:	2301      	movs	r3, #1
 8009896:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d108      	bne.n	80098b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80098a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098a4:	f005 f972 	bl	800eb8c <tcp_zero_window_probe>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d014      	beq.n	80098d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80098ae:	2300      	movs	r3, #0
 80098b0:	623b      	str	r3, [r7, #32]
 80098b2:	e011      	b.n	80098d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ba:	4619      	mov	r1, r3
 80098bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098be:	f004 f825 	bl	800d90c <tcp_split_unsent_seg>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d107      	bne.n	80098d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80098c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ca:	f004 faa5 	bl	800de18 <tcp_output>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 80ac 	beq.w	8009a38 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80098ee:	2b06      	cmp	r3, #6
 80098f0:	f200 80a2 	bhi.w	8009a38 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80098f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80098fa:	3301      	adds	r3, #1
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009904:	e098      	b.n	8009a38 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009908:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800990c:	2b00      	cmp	r3, #0
 800990e:	db0f      	blt.n	8009930 <tcp_slowtmr+0x1f0>
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009916:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800991a:	4293      	cmp	r3, r2
 800991c:	d008      	beq.n	8009930 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009924:	b29b      	uxth	r3, r3
 8009926:	3301      	adds	r3, #1
 8009928:	b29b      	uxth	r3, r3
 800992a:	b21a      	sxth	r2, r3
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800993c:	429a      	cmp	r2, r3
 800993e:	db7b      	blt.n	8009a38 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009942:	f004 fd61 	bl	800e408 <tcp_rexmit_rto_prepare>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d007      	beq.n	800995c <tcp_slowtmr+0x21c>
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009950:	2b00      	cmp	r3, #0
 8009952:	d171      	bne.n	8009a38 <tcp_slowtmr+0x2f8>
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d06d      	beq.n	8009a38 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	7d1b      	ldrb	r3, [r3, #20]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d03a      	beq.n	80099da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800996a:	2b0c      	cmp	r3, #12
 800996c:	bf28      	it	cs
 800996e:	230c      	movcs	r3, #12
 8009970:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009978:	10db      	asrs	r3, r3, #3
 800997a:	b21b      	sxth	r3, r3
 800997c:	461a      	mov	r2, r3
 800997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009980:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009984:	4413      	add	r3, r2
 8009986:	7efa      	ldrb	r2, [r7, #27]
 8009988:	4910      	ldr	r1, [pc, #64]	; (80099cc <tcp_slowtmr+0x28c>)
 800998a:	5c8a      	ldrb	r2, [r1, r2]
 800998c:	4093      	lsls	r3, r2
 800998e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009996:	4293      	cmp	r3, r2
 8009998:	dc1a      	bgt.n	80099d0 <tcp_slowtmr+0x290>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	b21a      	sxth	r2, r3
 800999e:	e019      	b.n	80099d4 <tcp_slowtmr+0x294>
 80099a0:	20006fb4 	.word	0x20006fb4
 80099a4:	2000025a 	.word	0x2000025a
 80099a8:	20006fb0 	.word	0x20006fb0
 80099ac:	08014f08 	.word	0x08014f08
 80099b0:	0801524c 	.word	0x0801524c
 80099b4:	08014f4c 	.word	0x08014f4c
 80099b8:	08015278 	.word	0x08015278
 80099bc:	080152a4 	.word	0x080152a4
 80099c0:	080152d4 	.word	0x080152d4
 80099c4:	08015308 	.word	0x08015308
 80099c8:	08016ed4 	.word	0x08016ed4
 80099cc:	08016ec4 	.word	0x08016ec4
 80099d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	2200      	movs	r2, #0
 80099de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80099ec:	4293      	cmp	r3, r2
 80099ee:	bf28      	it	cs
 80099f0:	4613      	movcs	r3, r2
 80099f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80099f4:	8a7b      	ldrh	r3, [r7, #18]
 80099f6:	085b      	lsrs	r3, r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d206      	bcs.n	8009a20 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a34:	f004 fd58 	bl	800e4e8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	7d1b      	ldrb	r3, [r3, #20]
 8009a3c:	2b06      	cmp	r3, #6
 8009a3e:	d111      	bne.n	8009a64 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	8b5b      	ldrh	r3, [r3, #26]
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a4c:	4b9c      	ldr	r3, [pc, #624]	; (8009cc0 <tcp_slowtmr+0x580>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b28      	cmp	r3, #40	; 0x28
 8009a58:	d904      	bls.n	8009a64 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5e:	3301      	adds	r3, #1
 8009a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	7a5b      	ldrb	r3, [r3, #9]
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d04a      	beq.n	8009b06 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d003      	beq.n	8009a80 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009a7c:	2b07      	cmp	r3, #7
 8009a7e:	d142      	bne.n	8009b06 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a80:	4b8f      	ldr	r3, [pc, #572]	; (8009cc0 <tcp_slowtmr+0x580>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009a90:	4b8c      	ldr	r3, [pc, #560]	; (8009cc4 <tcp_slowtmr+0x584>)
 8009a92:	440b      	add	r3, r1
 8009a94:	498c      	ldr	r1, [pc, #560]	; (8009cc8 <tcp_slowtmr+0x588>)
 8009a96:	fba1 1303 	umull	r1, r3, r1, r3
 8009a9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d90a      	bls.n	8009ab6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009aaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009aae:	3301      	adds	r3, #1
 8009ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ab4:	e027      	b.n	8009b06 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ab6:	4b82      	ldr	r3, [pc, #520]	; (8009cc0 <tcp_slowtmr+0x580>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009acc:	4618      	mov	r0, r3
 8009ace:	4b7f      	ldr	r3, [pc, #508]	; (8009ccc <tcp_slowtmr+0x58c>)
 8009ad0:	fb03 f300 	mul.w	r3, r3, r0
 8009ad4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009ad6:	497c      	ldr	r1, [pc, #496]	; (8009cc8 <tcp_slowtmr+0x588>)
 8009ad8:	fba1 1303 	umull	r1, r3, r1, r3
 8009adc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d911      	bls.n	8009b06 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009ae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ae4:	f005 f812 	bl	800eb0c <tcp_keepalive>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009aee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d107      	bne.n	8009b06 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009afc:	3301      	adds	r3, #1
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d011      	beq.n	8009b32 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009b0e:	4b6c      	ldr	r3, [pc, #432]	; (8009cc0 <tcp_slowtmr+0x580>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009b1e:	4619      	mov	r1, r3
 8009b20:	460b      	mov	r3, r1
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	440b      	add	r3, r1
 8009b26:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b2e:	f000 febf 	bl	800a8b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	7d1b      	ldrb	r3, [r3, #20]
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d10b      	bne.n	8009b52 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b3a:	4b61      	ldr	r3, [pc, #388]	; (8009cc0 <tcp_slowtmr+0x580>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	2b28      	cmp	r3, #40	; 0x28
 8009b46:	d904      	bls.n	8009b52 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	7d1b      	ldrb	r3, [r3, #20]
 8009b56:	2b09      	cmp	r3, #9
 8009b58:	d10b      	bne.n	8009b72 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009b5a:	4b59      	ldr	r3, [pc, #356]	; (8009cc0 <tcp_slowtmr+0x580>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	2bf0      	cmp	r3, #240	; 0xf0
 8009b66:	d904      	bls.n	8009b72 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8009b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d060      	beq.n	8009c3c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b80:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b84:	f000 fce0 	bl	800a548 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d010      	beq.n	8009bb0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009b8e:	4b50      	ldr	r3, [pc, #320]	; (8009cd0 <tcp_slowtmr+0x590>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d106      	bne.n	8009ba6 <tcp_slowtmr+0x466>
 8009b98:	4b4e      	ldr	r3, [pc, #312]	; (8009cd4 <tcp_slowtmr+0x594>)
 8009b9a:	f240 526d 	movw	r2, #1389	; 0x56d
 8009b9e:	494e      	ldr	r1, [pc, #312]	; (8009cd8 <tcp_slowtmr+0x598>)
 8009ba0:	484e      	ldr	r0, [pc, #312]	; (8009cdc <tcp_slowtmr+0x59c>)
 8009ba2:	f007 ff9b 	bl	8011adc <iprintf>
        prev->next = pcb->next;
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	60da      	str	r2, [r3, #12]
 8009bae:	e00f      	b.n	8009bd0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009bb0:	4b47      	ldr	r3, [pc, #284]	; (8009cd0 <tcp_slowtmr+0x590>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d006      	beq.n	8009bc8 <tcp_slowtmr+0x488>
 8009bba:	4b46      	ldr	r3, [pc, #280]	; (8009cd4 <tcp_slowtmr+0x594>)
 8009bbc:	f240 5271 	movw	r2, #1393	; 0x571
 8009bc0:	4947      	ldr	r1, [pc, #284]	; (8009ce0 <tcp_slowtmr+0x5a0>)
 8009bc2:	4846      	ldr	r0, [pc, #280]	; (8009cdc <tcp_slowtmr+0x59c>)
 8009bc4:	f007 ff8a 	bl	8011adc <iprintf>
        tcp_active_pcbs = pcb->next;
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	4a40      	ldr	r2, [pc, #256]	; (8009cd0 <tcp_slowtmr+0x590>)
 8009bce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d013      	beq.n	8009c00 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009be0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	3304      	adds	r3, #4
 8009be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be8:	8ad2      	ldrh	r2, [r2, #22]
 8009bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bec:	8b09      	ldrh	r1, [r1, #24]
 8009bee:	9102      	str	r1, [sp, #8]
 8009bf0:	9201      	str	r2, [sp, #4]
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bfc:	f004 fed2 	bl	800e9a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	7d1b      	ldrb	r3, [r3, #20]
 8009c0a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009c16:	6838      	ldr	r0, [r7, #0]
 8009c18:	f7ff f842 	bl	8008ca0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009c1c:	4b31      	ldr	r3, [pc, #196]	; (8009ce4 <tcp_slowtmr+0x5a4>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <tcp_slowtmr+0x4f2>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f06f 010c 	mvn.w	r1, #12
 8009c2e:	68b8      	ldr	r0, [r7, #8]
 8009c30:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009c32:	4b2c      	ldr	r3, [pc, #176]	; (8009ce4 <tcp_slowtmr+0x5a4>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d037      	beq.n	8009caa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009c3a:	e592      	b.n	8009762 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c48:	7f1b      	ldrb	r3, [r3, #28]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	7f1a      	ldrb	r2, [r3, #28]
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	7f5b      	ldrb	r3, [r3, #29]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d325      	bcc.n	8009caa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	2200      	movs	r2, #0
 8009c62:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009c64:	4b1f      	ldr	r3, [pc, #124]	; (8009ce4 <tcp_slowtmr+0x5a4>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <tcp_slowtmr+0x54c>
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7c:	6912      	ldr	r2, [r2, #16]
 8009c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009c8a:	e002      	b.n	8009c92 <tcp_slowtmr+0x552>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009c92:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <tcp_slowtmr+0x5a4>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d000      	beq.n	8009c9c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009c9a:	e562      	b.n	8009762 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009c9c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca6:	f004 f8b7 	bl	800de18 <tcp_output>
  while (pcb != NULL) {
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f47f ad5e 	bne.w	800976e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ce8 <tcp_slowtmr+0x5a8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009cbc:	e069      	b.n	8009d92 <tcp_slowtmr+0x652>
 8009cbe:	bf00      	nop
 8009cc0:	20006fb4 	.word	0x20006fb4
 8009cc4:	000a4cb8 	.word	0x000a4cb8
 8009cc8:	10624dd3 	.word	0x10624dd3
 8009ccc:	000124f8 	.word	0x000124f8
 8009cd0:	20006fb0 	.word	0x20006fb0
 8009cd4:	08014f08 	.word	0x08014f08
 8009cd8:	08015340 	.word	0x08015340
 8009cdc:	08014f4c 	.word	0x08014f4c
 8009ce0:	0801536c 	.word	0x0801536c
 8009ce4:	20006fac 	.word	0x20006fac
 8009ce8:	20006fc0 	.word	0x20006fc0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	7d1b      	ldrb	r3, [r3, #20]
 8009cf0:	2b0a      	cmp	r3, #10
 8009cf2:	d006      	beq.n	8009d02 <tcp_slowtmr+0x5c2>
 8009cf4:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <tcp_slowtmr+0x660>)
 8009cf6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009cfa:	492a      	ldr	r1, [pc, #168]	; (8009da4 <tcp_slowtmr+0x664>)
 8009cfc:	482a      	ldr	r0, [pc, #168]	; (8009da8 <tcp_slowtmr+0x668>)
 8009cfe:	f007 feed 	bl	8011adc <iprintf>
    pcb_remove = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009d08:	4b28      	ldr	r3, [pc, #160]	; (8009dac <tcp_slowtmr+0x66c>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2bf0      	cmp	r3, #240	; 0xf0
 8009d14:	d904      	bls.n	8009d20 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d02f      	beq.n	8009d88 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d2a:	f000 fc0d 	bl	800a548 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d010      	beq.n	8009d56 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009d34:	4b1e      	ldr	r3, [pc, #120]	; (8009db0 <tcp_slowtmr+0x670>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d106      	bne.n	8009d4c <tcp_slowtmr+0x60c>
 8009d3e:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <tcp_slowtmr+0x660>)
 8009d40:	f240 52af 	movw	r2, #1455	; 0x5af
 8009d44:	491b      	ldr	r1, [pc, #108]	; (8009db4 <tcp_slowtmr+0x674>)
 8009d46:	4818      	ldr	r0, [pc, #96]	; (8009da8 <tcp_slowtmr+0x668>)
 8009d48:	f007 fec8 	bl	8011adc <iprintf>
        prev->next = pcb->next;
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	68da      	ldr	r2, [r3, #12]
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	60da      	str	r2, [r3, #12]
 8009d54:	e00f      	b.n	8009d76 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009d56:	4b16      	ldr	r3, [pc, #88]	; (8009db0 <tcp_slowtmr+0x670>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d006      	beq.n	8009d6e <tcp_slowtmr+0x62e>
 8009d60:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <tcp_slowtmr+0x660>)
 8009d62:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009d66:	4914      	ldr	r1, [pc, #80]	; (8009db8 <tcp_slowtmr+0x678>)
 8009d68:	480f      	ldr	r0, [pc, #60]	; (8009da8 <tcp_slowtmr+0x668>)
 8009d6a:	f007 feb7 	bl	8011adc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	4a0f      	ldr	r2, [pc, #60]	; (8009db0 <tcp_slowtmr+0x670>)
 8009d74:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009d80:	69f8      	ldr	r0, [r7, #28]
 8009d82:	f7fe ff8d 	bl	8008ca0 <tcp_free>
 8009d86:	e004      	b.n	8009d92 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1a9      	bne.n	8009cec <tcp_slowtmr+0x5ac>
    }
  }
}
 8009d98:	bf00      	nop
 8009d9a:	3730      	adds	r7, #48	; 0x30
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009da0:	08014f08 	.word	0x08014f08
 8009da4:	08015398 	.word	0x08015398
 8009da8:	08014f4c 	.word	0x08014f4c
 8009dac:	20006fb4 	.word	0x20006fb4
 8009db0:	20006fc0 	.word	0x20006fc0
 8009db4:	080153c8 	.word	0x080153c8
 8009db8:	080153f0 	.word	0x080153f0

08009dbc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009dc2:	4b2d      	ldr	r3, [pc, #180]	; (8009e78 <tcp_fasttmr+0xbc>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	4b2b      	ldr	r3, [pc, #172]	; (8009e78 <tcp_fasttmr+0xbc>)
 8009dcc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009dce:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <tcp_fasttmr+0xc0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009dd4:	e048      	b.n	8009e68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7f9a      	ldrb	r2, [r3, #30]
 8009dda:	4b27      	ldr	r3, [pc, #156]	; (8009e78 <tcp_fasttmr+0xbc>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d03f      	beq.n	8009e62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009de2:	4b25      	ldr	r3, [pc, #148]	; (8009e78 <tcp_fasttmr+0xbc>)
 8009de4:	781a      	ldrb	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	8b5b      	ldrh	r3, [r3, #26]
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d010      	beq.n	8009e18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	8b5b      	ldrh	r3, [r3, #26]
 8009dfa:	f043 0302 	orr.w	r3, r3, #2
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f004 f807 	bl	800de18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	8b5b      	ldrh	r3, [r3, #26]
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8b5b      	ldrh	r3, [r3, #26]
 8009e1c:	f003 0308 	and.w	r3, r3, #8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d009      	beq.n	8009e38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	8b5b      	ldrh	r3, [r3, #26]
 8009e28:	f023 0308 	bic.w	r3, r3, #8
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff f8c4 	bl	8008fc0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009e46:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <tcp_fasttmr+0xc4>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f819 	bl	8009e84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009e52:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <tcp_fasttmr+0xc4>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d000      	beq.n	8009e5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009e5a:	e7b8      	b.n	8009dce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	607b      	str	r3, [r7, #4]
 8009e60:	e002      	b.n	8009e68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1b3      	bne.n	8009dd6 <tcp_fasttmr+0x1a>
    }
  }
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	2000025a 	.word	0x2000025a
 8009e7c:	20006fb0 	.word	0x20006fb0
 8009e80:	20006fac 	.word	0x20006fac

08009e84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009e84:	b590      	push	{r4, r7, lr}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d109      	bne.n	8009ea6 <tcp_process_refused_data+0x22>
 8009e92:	4b37      	ldr	r3, [pc, #220]	; (8009f70 <tcp_process_refused_data+0xec>)
 8009e94:	f240 6209 	movw	r2, #1545	; 0x609
 8009e98:	4936      	ldr	r1, [pc, #216]	; (8009f74 <tcp_process_refused_data+0xf0>)
 8009e9a:	4837      	ldr	r0, [pc, #220]	; (8009f78 <tcp_process_refused_data+0xf4>)
 8009e9c:	f007 fe1e 	bl	8011adc <iprintf>
 8009ea0:	f06f 030f 	mvn.w	r3, #15
 8009ea4:	e060      	b.n	8009f68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eaa:	7b5b      	ldrb	r3, [r3, #13]
 8009eac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <tcp_process_refused_data+0x58>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6918      	ldr	r0, [r3, #16]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	47a0      	blx	r4
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73fb      	strb	r3, [r7, #15]
 8009eda:	e007      	b.n	8009eec <tcp_process_refused_data+0x68>
 8009edc:	2300      	movs	r3, #0
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	f000 f8c0 	bl	800a068 <tcp_recv_null>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d12a      	bne.n	8009f4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d033      	beq.n	8009f66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009f06:	d005      	beq.n	8009f14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00b      	beq.n	8009f36 <tcp_process_refused_data+0xb2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6918      	ldr	r0, [r3, #16]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	47a0      	blx	r4
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]
 8009f34:	e001      	b.n	8009f3a <tcp_process_refused_data+0xb6>
 8009f36:	2300      	movs	r3, #0
 8009f38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f3e:	f113 0f0d 	cmn.w	r3, #13
 8009f42:	d110      	bne.n	8009f66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009f44:	f06f 030c 	mvn.w	r3, #12
 8009f48:	e00e      	b.n	8009f68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f4e:	f113 0f0d 	cmn.w	r3, #13
 8009f52:	d102      	bne.n	8009f5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009f54:	f06f 030c 	mvn.w	r3, #12
 8009f58:	e006      	b.n	8009f68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009f60:	f06f 0304 	mvn.w	r3, #4
 8009f64:	e000      	b.n	8009f68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd90      	pop	{r4, r7, pc}
 8009f70:	08014f08 	.word	0x08014f08
 8009f74:	08015418 	.word	0x08015418
 8009f78:	08014f4c 	.word	0x08014f4c

08009f7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009f84:	e007      	b.n	8009f96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f809 	bl	8009fa4 <tcp_seg_free>
    seg = next;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f4      	bne.n	8009f86 <tcp_segs_free+0xa>
  }
}
 8009f9c:	bf00      	nop
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00c      	beq.n	8009fcc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d004      	beq.n	8009fc4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fbbe 	bl	8008740 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	2003      	movs	r0, #3
 8009fc8:	f7fd fdc0 	bl	8007b4c <memp_free>
  }
}
 8009fcc:	bf00      	nop
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d107      	bne.n	8009ff6 <tcp_setprio+0x22>
 8009fe6:	4b07      	ldr	r3, [pc, #28]	; (800a004 <tcp_setprio+0x30>)
 8009fe8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009fec:	4906      	ldr	r1, [pc, #24]	; (800a008 <tcp_setprio+0x34>)
 8009fee:	4807      	ldr	r0, [pc, #28]	; (800a00c <tcp_setprio+0x38>)
 8009ff0:	f007 fd74 	bl	8011adc <iprintf>
 8009ff4:	e002      	b.n	8009ffc <tcp_setprio+0x28>

  pcb->prio = prio;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	755a      	strb	r2, [r3, #21]
}
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	08014f08 	.word	0x08014f08
 800a008:	08015440 	.word	0x08015440
 800a00c:	08014f4c 	.word	0x08014f4c

0800a010 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <tcp_seg_copy+0x1c>
 800a01e:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <tcp_seg_copy+0x4c>)
 800a020:	f240 6282 	movw	r2, #1666	; 0x682
 800a024:	490e      	ldr	r1, [pc, #56]	; (800a060 <tcp_seg_copy+0x50>)
 800a026:	480f      	ldr	r0, [pc, #60]	; (800a064 <tcp_seg_copy+0x54>)
 800a028:	f007 fd58 	bl	8011adc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a02c:	2003      	movs	r0, #3
 800a02e:	f7fd fd41 	bl	8007ab4 <memp_malloc>
 800a032:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <tcp_seg_copy+0x2e>
    return NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	e00a      	b.n	800a054 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a03e:	2210      	movs	r2, #16
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f007 fc8f 	bl	8011966 <memcpy>
  pbuf_ref(cseg->p);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fc17 	bl	8008880 <pbuf_ref>
  return cseg;
 800a052:	68fb      	ldr	r3, [r7, #12]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	08014f08 	.word	0x08014f08
 800a060:	0801545c 	.word	0x0801545c
 800a064:	08014f4c 	.word	0x08014f4c

0800a068 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d109      	bne.n	800a090 <tcp_recv_null+0x28>
 800a07c:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <tcp_recv_null+0x60>)
 800a07e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a082:	4912      	ldr	r1, [pc, #72]	; (800a0cc <tcp_recv_null+0x64>)
 800a084:	4812      	ldr	r0, [pc, #72]	; (800a0d0 <tcp_recv_null+0x68>)
 800a086:	f007 fd29 	bl	8011adc <iprintf>
 800a08a:	f06f 030f 	mvn.w	r3, #15
 800a08e:	e016      	b.n	800a0be <tcp_recv_null+0x56>

  if (p != NULL) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d009      	beq.n	800a0aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	891b      	ldrh	r3, [r3, #8]
 800a09a:	4619      	mov	r1, r3
 800a09c:	68b8      	ldr	r0, [r7, #8]
 800a09e:	f7ff fab9 	bl	8009614 <tcp_recved>
    pbuf_free(p);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7fe fb4c 	bl	8008740 <pbuf_free>
 800a0a8:	e008      	b.n	800a0bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a0aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d104      	bne.n	800a0bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a0b2:	68b8      	ldr	r0, [r7, #8]
 800a0b4:	f7fe ffea 	bl	800908c <tcp_close>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	e000      	b.n	800a0be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	08014f08 	.word	0x08014f08
 800a0cc:	08015478 	.word	0x08015478
 800a0d0:	08014f4c 	.word	0x08014f4c

0800a0d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a0de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	db01      	blt.n	800a0ea <tcp_kill_prio+0x16>
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	e000      	b.n	800a0ec <tcp_kill_prio+0x18>
 800a0ea:	237f      	movs	r3, #127	; 0x7f
 800a0ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a0ee:	7afb      	ldrb	r3, [r7, #11]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d034      	beq.n	800a15e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a102:	4b19      	ldr	r3, [pc, #100]	; (800a168 <tcp_kill_prio+0x94>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	e01f      	b.n	800a14a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	7d5b      	ldrb	r3, [r3, #21]
 800a10e:	7afa      	ldrb	r2, [r7, #11]
 800a110:	429a      	cmp	r2, r3
 800a112:	d80c      	bhi.n	800a12e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a118:	7afa      	ldrb	r2, [r7, #11]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d112      	bne.n	800a144 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a11e:	4b13      	ldr	r3, [pc, #76]	; (800a16c <tcp_kill_prio+0x98>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d80a      	bhi.n	800a144 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a12e:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <tcp_kill_prio+0x98>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	7d5b      	ldrb	r3, [r3, #21]
 800a142:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1dc      	bne.n	800a10a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a156:	6938      	ldr	r0, [r7, #16]
 800a158:	f7ff f882 	bl	8009260 <tcp_abort>
 800a15c:	e000      	b.n	800a160 <tcp_kill_prio+0x8c>
    return;
 800a15e:	bf00      	nop
  }
}
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20006fb0 	.word	0x20006fb0
 800a16c:	20006fb4 	.word	0x20006fb4

0800a170 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d009      	beq.n	800a194 <tcp_kill_state+0x24>
 800a180:	79fb      	ldrb	r3, [r7, #7]
 800a182:	2b09      	cmp	r3, #9
 800a184:	d006      	beq.n	800a194 <tcp_kill_state+0x24>
 800a186:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <tcp_kill_state+0x80>)
 800a188:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a18c:	4919      	ldr	r1, [pc, #100]	; (800a1f4 <tcp_kill_state+0x84>)
 800a18e:	481a      	ldr	r0, [pc, #104]	; (800a1f8 <tcp_kill_state+0x88>)
 800a190:	f007 fca4 	bl	8011adc <iprintf>

  inactivity = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a19c:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <tcp_kill_state+0x8c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	617b      	str	r3, [r7, #20]
 800a1a2:	e017      	b.n	800a1d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	7d1b      	ldrb	r3, [r3, #20]
 800a1a8:	79fa      	ldrb	r2, [r7, #7]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d10f      	bne.n	800a1ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a1ae:	4b14      	ldr	r3, [pc, #80]	; (800a200 <tcp_kill_state+0x90>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d807      	bhi.n	800a1ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a1be:	4b10      	ldr	r3, [pc, #64]	; (800a200 <tcp_kill_state+0x90>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e4      	bne.n	800a1a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	6938      	ldr	r0, [r7, #16]
 800a1e4:	f7fe ff7e 	bl	80090e4 <tcp_abandon>
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	08014f08 	.word	0x08014f08
 800a1f4:	08015494 	.word	0x08015494
 800a1f8:	08014f4c 	.word	0x08014f4c
 800a1fc:	20006fb0 	.word	0x20006fb0
 800a200:	20006fb4 	.word	0x20006fb4

0800a204 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <tcp_kill_timewait+0x58>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	e012      	b.n	800a240 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <tcp_kill_timewait+0x5c>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	429a      	cmp	r2, r3
 800a228:	d807      	bhi.n	800a23a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a22a:	4b0d      	ldr	r3, [pc, #52]	; (800a260 <tcp_kill_timewait+0x5c>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e9      	bne.n	800a21a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d002      	beq.n	800a252 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a24c:	68b8      	ldr	r0, [r7, #8]
 800a24e:	f7ff f807 	bl	8009260 <tcp_abort>
  }
}
 800a252:	bf00      	nop
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20006fc0 	.word	0x20006fc0
 800a260:	20006fb4 	.word	0x20006fb4

0800a264 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a26a:	4b10      	ldr	r3, [pc, #64]	; (800a2ac <tcp_handle_closepend+0x48>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a270:	e014      	b.n	800a29c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8b5b      	ldrh	r3, [r3, #26]
 800a27c:	f003 0308 	and.w	r3, r3, #8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d009      	beq.n	800a298 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	8b5b      	ldrh	r3, [r3, #26]
 800a288:	f023 0308 	bic.w	r3, r3, #8
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7fe fe94 	bl	8008fc0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1e7      	bne.n	800a272 <tcp_handle_closepend+0xe>
  }
}
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20006fb0 	.word	0x20006fb0

0800a2b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	f7fd fbfa 	bl	8007ab4 <memp_malloc>
 800a2c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d126      	bne.n	800a316 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a2c8:	f7ff ffcc 	bl	800a264 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a2cc:	f7ff ff9a 	bl	800a204 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	f7fd fbef 	bl	8007ab4 <memp_malloc>
 800a2d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d11b      	bne.n	800a316 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a2de:	2009      	movs	r0, #9
 800a2e0:	f7ff ff46 	bl	800a170 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	f7fd fbe5 	bl	8007ab4 <memp_malloc>
 800a2ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d111      	bne.n	800a316 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a2f2:	2008      	movs	r0, #8
 800a2f4:	f7ff ff3c 	bl	800a170 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	f7fd fbdb 	bl	8007ab4 <memp_malloc>
 800a2fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff fee3 	bl	800a0d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a30e:	2001      	movs	r0, #1
 800a310:	f7fd fbd0 	bl	8007ab4 <memp_malloc>
 800a314:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d03f      	beq.n	800a39c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a31c:	229c      	movs	r2, #156	; 0x9c
 800a31e:	2100      	movs	r1, #0
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f007 fb2b 	bl	801197c <memset>
    pcb->prio = prio;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	79fa      	ldrb	r2, [r7, #7]
 800a32a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a332:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a33c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	22ff      	movs	r2, #255	; 0xff
 800a34a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a352:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2206      	movs	r2, #6
 800a358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2206      	movs	r2, #6
 800a360:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a368:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a372:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <tcp_alloc+0xf8>)
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <tcp_alloc+0xfc>)
 800a37c:	781a      	ldrb	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a388:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4a08      	ldr	r2, [pc, #32]	; (800a3b0 <tcp_alloc+0x100>)
 800a390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4a07      	ldr	r2, [pc, #28]	; (800a3b4 <tcp_alloc+0x104>)
 800a398:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a39c:	68fb      	ldr	r3, [r7, #12]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20006fb4 	.word	0x20006fb4
 800a3ac:	2000025a 	.word	0x2000025a
 800a3b0:	0800a069 	.word	0x0800a069
 800a3b4:	006ddd00 	.word	0x006ddd00

0800a3b8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a3bc:	2040      	movs	r0, #64	; 0x40
 800a3be:	f7ff ff77 	bl	800a2b0 <tcp_alloc>
 800a3c2:	4603      	mov	r3, r0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	611a      	str	r2, [r3, #16]
  }
}
 800a3de:	bf00      	nop
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
	...

0800a3ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00e      	beq.n	800a41a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	7d1b      	ldrb	r3, [r3, #20]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d106      	bne.n	800a412 <tcp_recv+0x26>
 800a404:	4b07      	ldr	r3, [pc, #28]	; (800a424 <tcp_recv+0x38>)
 800a406:	f240 72df 	movw	r2, #2015	; 0x7df
 800a40a:	4907      	ldr	r1, [pc, #28]	; (800a428 <tcp_recv+0x3c>)
 800a40c:	4807      	ldr	r0, [pc, #28]	; (800a42c <tcp_recv+0x40>)
 800a40e:	f007 fb65 	bl	8011adc <iprintf>
    pcb->recv = recv;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	08014f08 	.word	0x08014f08
 800a428:	080154a4 	.word	0x080154a4
 800a42c:	08014f4c 	.word	0x08014f4c

0800a430 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00e      	beq.n	800a45e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7d1b      	ldrb	r3, [r3, #20]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d106      	bne.n	800a456 <tcp_sent+0x26>
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <tcp_sent+0x38>)
 800a44a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a44e:	4907      	ldr	r1, [pc, #28]	; (800a46c <tcp_sent+0x3c>)
 800a450:	4807      	ldr	r0, [pc, #28]	; (800a470 <tcp_sent+0x40>)
 800a452:	f007 fb43 	bl	8011adc <iprintf>
    pcb->sent = sent;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a45e:	bf00      	nop
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	08014f08 	.word	0x08014f08
 800a46c:	080154cc 	.word	0x080154cc
 800a470:	08014f4c 	.word	0x08014f4c

0800a474 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00e      	beq.n	800a4a2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7d1b      	ldrb	r3, [r3, #20]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d106      	bne.n	800a49a <tcp_err+0x26>
 800a48c:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <tcp_err+0x38>)
 800a48e:	f640 020d 	movw	r2, #2061	; 0x80d
 800a492:	4907      	ldr	r1, [pc, #28]	; (800a4b0 <tcp_err+0x3c>)
 800a494:	4807      	ldr	r0, [pc, #28]	; (800a4b4 <tcp_err+0x40>)
 800a496:	f007 fb21 	bl	8011adc <iprintf>
    pcb->errf = err;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800a4a2:	bf00      	nop
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	08014f08 	.word	0x08014f08
 800a4b0:	080154f4 	.word	0x080154f4
 800a4b4:	08014f4c 	.word	0x08014f4c

0800a4b8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d008      	beq.n	800a4da <tcp_accept+0x22>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	7d1b      	ldrb	r3, [r3, #20]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d104      	bne.n	800a4da <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	619a      	str	r2, [r3, #24]
  }
}
 800a4da:	bf00      	nop
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
	...

0800a4e8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d107      	bne.n	800a50c <tcp_poll+0x24>
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <tcp_poll+0x50>)
 800a4fe:	f640 023d 	movw	r2, #2109	; 0x83d
 800a502:	490e      	ldr	r1, [pc, #56]	; (800a53c <tcp_poll+0x54>)
 800a504:	480e      	ldr	r0, [pc, #56]	; (800a540 <tcp_poll+0x58>)
 800a506:	f007 fae9 	bl	8011adc <iprintf>
 800a50a:	e011      	b.n	800a530 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	7d1b      	ldrb	r3, [r3, #20]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d106      	bne.n	800a522 <tcp_poll+0x3a>
 800a514:	4b08      	ldr	r3, [pc, #32]	; (800a538 <tcp_poll+0x50>)
 800a516:	f640 023e 	movw	r2, #2110	; 0x83e
 800a51a:	490a      	ldr	r1, [pc, #40]	; (800a544 <tcp_poll+0x5c>)
 800a51c:	4808      	ldr	r0, [pc, #32]	; (800a540 <tcp_poll+0x58>)
 800a51e:	f007 fadd 	bl	8011adc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	79fa      	ldrb	r2, [r7, #7]
 800a52e:	775a      	strb	r2, [r3, #29]
}
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	08014f08 	.word	0x08014f08
 800a53c:	0801551c 	.word	0x0801551c
 800a540:	08014f4c 	.word	0x08014f4c
 800a544:	08015534 	.word	0x08015534

0800a548 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d107      	bne.n	800a566 <tcp_pcb_purge+0x1e>
 800a556:	4b21      	ldr	r3, [pc, #132]	; (800a5dc <tcp_pcb_purge+0x94>)
 800a558:	f640 0251 	movw	r2, #2129	; 0x851
 800a55c:	4920      	ldr	r1, [pc, #128]	; (800a5e0 <tcp_pcb_purge+0x98>)
 800a55e:	4821      	ldr	r0, [pc, #132]	; (800a5e4 <tcp_pcb_purge+0x9c>)
 800a560:	f007 fabc 	bl	8011adc <iprintf>
 800a564:	e037      	b.n	800a5d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7d1b      	ldrb	r3, [r3, #20]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d033      	beq.n	800a5d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a572:	2b0a      	cmp	r3, #10
 800a574:	d02f      	beq.n	800a5d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d02b      	beq.n	800a5d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a582:	2b00      	cmp	r3, #0
 800a584:	d007      	beq.n	800a596 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fe f8d8 	bl	8008740 <pbuf_free>
      pcb->refused_data = NULL;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f986 	bl	800a8b0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fce3 	bl	8009f7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fcde 	bl	8009f7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	66da      	str	r2, [r3, #108]	; 0x6c
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	08014f08 	.word	0x08014f08
 800a5e0:	08015554 	.word	0x08015554
 800a5e4:	08014f4c 	.word	0x08014f4c

0800a5e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d106      	bne.n	800a606 <tcp_pcb_remove+0x1e>
 800a5f8:	4b3e      	ldr	r3, [pc, #248]	; (800a6f4 <tcp_pcb_remove+0x10c>)
 800a5fa:	f640 0283 	movw	r2, #2179	; 0x883
 800a5fe:	493e      	ldr	r1, [pc, #248]	; (800a6f8 <tcp_pcb_remove+0x110>)
 800a600:	483e      	ldr	r0, [pc, #248]	; (800a6fc <tcp_pcb_remove+0x114>)
 800a602:	f007 fa6b 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d106      	bne.n	800a61a <tcp_pcb_remove+0x32>
 800a60c:	4b39      	ldr	r3, [pc, #228]	; (800a6f4 <tcp_pcb_remove+0x10c>)
 800a60e:	f640 0284 	movw	r2, #2180	; 0x884
 800a612:	493b      	ldr	r1, [pc, #236]	; (800a700 <tcp_pcb_remove+0x118>)
 800a614:	4839      	ldr	r0, [pc, #228]	; (800a6fc <tcp_pcb_remove+0x114>)
 800a616:	f007 fa61 	bl	8011adc <iprintf>

  TCP_RMV(pcblist, pcb);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d105      	bne.n	800a630 <tcp_pcb_remove+0x48>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	e013      	b.n	800a658 <tcp_pcb_remove+0x70>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	e00c      	b.n	800a652 <tcp_pcb_remove+0x6a>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d104      	bne.n	800a64c <tcp_pcb_remove+0x64>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	e005      	b.n	800a658 <tcp_pcb_remove+0x70>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1ef      	bne.n	800a638 <tcp_pcb_remove+0x50>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a65e:	6838      	ldr	r0, [r7, #0]
 800a660:	f7ff ff72 	bl	800a548 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	7d1b      	ldrb	r3, [r3, #20]
 800a668:	2b0a      	cmp	r3, #10
 800a66a:	d013      	beq.n	800a694 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a670:	2b01      	cmp	r3, #1
 800a672:	d00f      	beq.n	800a694 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	8b5b      	ldrh	r3, [r3, #26]
 800a678:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	8b5b      	ldrh	r3, [r3, #26]
 800a684:	f043 0302 	orr.w	r3, r3, #2
 800a688:	b29a      	uxth	r2, r3
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a68e:	6838      	ldr	r0, [r7, #0]
 800a690:	f003 fbc2 	bl	800de18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	7d1b      	ldrb	r3, [r3, #20]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d020      	beq.n	800a6de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d006      	beq.n	800a6b2 <tcp_pcb_remove+0xca>
 800a6a4:	4b13      	ldr	r3, [pc, #76]	; (800a6f4 <tcp_pcb_remove+0x10c>)
 800a6a6:	f640 0293 	movw	r2, #2195	; 0x893
 800a6aa:	4916      	ldr	r1, [pc, #88]	; (800a704 <tcp_pcb_remove+0x11c>)
 800a6ac:	4813      	ldr	r0, [pc, #76]	; (800a6fc <tcp_pcb_remove+0x114>)
 800a6ae:	f007 fa15 	bl	8011adc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d006      	beq.n	800a6c8 <tcp_pcb_remove+0xe0>
 800a6ba:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <tcp_pcb_remove+0x10c>)
 800a6bc:	f640 0294 	movw	r2, #2196	; 0x894
 800a6c0:	4911      	ldr	r1, [pc, #68]	; (800a708 <tcp_pcb_remove+0x120>)
 800a6c2:	480e      	ldr	r0, [pc, #56]	; (800a6fc <tcp_pcb_remove+0x114>)
 800a6c4:	f007 fa0a 	bl	8011adc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d006      	beq.n	800a6de <tcp_pcb_remove+0xf6>
 800a6d0:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <tcp_pcb_remove+0x10c>)
 800a6d2:	f640 0296 	movw	r2, #2198	; 0x896
 800a6d6:	490d      	ldr	r1, [pc, #52]	; (800a70c <tcp_pcb_remove+0x124>)
 800a6d8:	4808      	ldr	r0, [pc, #32]	; (800a6fc <tcp_pcb_remove+0x114>)
 800a6da:	f007 f9ff 	bl	8011adc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	08014f08 	.word	0x08014f08
 800a6f8:	08015570 	.word	0x08015570
 800a6fc:	08014f4c 	.word	0x08014f4c
 800a700:	0801558c 	.word	0x0801558c
 800a704:	080155ac 	.word	0x080155ac
 800a708:	080155c4 	.word	0x080155c4
 800a70c:	080155e0 	.word	0x080155e0

0800a710 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <tcp_next_iss+0x1c>
 800a71e:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <tcp_next_iss+0x38>)
 800a720:	f640 02af 	movw	r2, #2223	; 0x8af
 800a724:	4909      	ldr	r1, [pc, #36]	; (800a74c <tcp_next_iss+0x3c>)
 800a726:	480a      	ldr	r0, [pc, #40]	; (800a750 <tcp_next_iss+0x40>)
 800a728:	f007 f9d8 	bl	8011adc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a72c:	4b09      	ldr	r3, [pc, #36]	; (800a754 <tcp_next_iss+0x44>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <tcp_next_iss+0x48>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4413      	add	r3, r2
 800a736:	4a07      	ldr	r2, [pc, #28]	; (800a754 <tcp_next_iss+0x44>)
 800a738:	6013      	str	r3, [r2, #0]
  return iss;
 800a73a:	4b06      	ldr	r3, [pc, #24]	; (800a754 <tcp_next_iss+0x44>)
 800a73c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	08014f08 	.word	0x08014f08
 800a74c:	080155f8 	.word	0x080155f8
 800a750:	08014f4c 	.word	0x08014f4c
 800a754:	2000001c 	.word	0x2000001c
 800a758:	20006fb4 	.word	0x20006fb4

0800a75c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
 800a768:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <tcp_eff_send_mss_netif+0x22>
 800a770:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <tcp_eff_send_mss_netif+0x68>)
 800a772:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a776:	4914      	ldr	r1, [pc, #80]	; (800a7c8 <tcp_eff_send_mss_netif+0x6c>)
 800a778:	4814      	ldr	r0, [pc, #80]	; (800a7cc <tcp_eff_send_mss_netif+0x70>)
 800a77a:	f007 f9af 	bl	8011adc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a784:	89fb      	ldrh	r3, [r7, #14]
 800a786:	e019      	b.n	800a7bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	8c1b      	ldrh	r3, [r3, #32]
 800a78c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a78e:	8afb      	ldrh	r3, [r7, #22]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d012      	beq.n	800a7ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a794:	2328      	movs	r3, #40	; 0x28
 800a796:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a798:	8afa      	ldrh	r2, [r7, #22]
 800a79a:	8abb      	ldrh	r3, [r7, #20]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d904      	bls.n	800a7aa <tcp_eff_send_mss_netif+0x4e>
 800a7a0:	8afa      	ldrh	r2, [r7, #22]
 800a7a2:	8abb      	ldrh	r3, [r7, #20]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	e000      	b.n	800a7ac <tcp_eff_send_mss_netif+0x50>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a7ae:	8a7a      	ldrh	r2, [r7, #18]
 800a7b0:	89fb      	ldrh	r3, [r7, #14]
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	bf28      	it	cs
 800a7b6:	4613      	movcs	r3, r2
 800a7b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a7ba:	89fb      	ldrh	r3, [r7, #14]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3718      	adds	r7, #24
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	08014f08 	.word	0x08014f08
 800a7c8:	08015614 	.word	0x08015614
 800a7cc:	08014f4c 	.word	0x08014f4c

0800a7d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d119      	bne.n	800a818 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a7e4:	4b10      	ldr	r3, [pc, #64]	; (800a828 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a7e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a7ea:	4910      	ldr	r1, [pc, #64]	; (800a82c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a7ec:	4810      	ldr	r0, [pc, #64]	; (800a830 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a7ee:	f007 f975 	bl	8011adc <iprintf>

  while (pcb != NULL) {
 800a7f2:	e011      	b.n	800a818 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d108      	bne.n	800a812 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7fe fd2a 	bl	8009260 <tcp_abort>
      pcb = next;
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	e002      	b.n	800a818 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1ea      	bne.n	800a7f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a81e:	bf00      	nop
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	08014f08 	.word	0x08014f08
 800a82c:	0801563c 	.word	0x0801563c
 800a830:	08014f4c 	.word	0x08014f4c

0800a834 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d02a      	beq.n	800a89a <tcp_netif_ip_addr_changed+0x66>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d026      	beq.n	800a89a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a84c:	4b15      	ldr	r3, [pc, #84]	; (800a8a4 <tcp_netif_ip_addr_changed+0x70>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff ffbc 	bl	800a7d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <tcp_netif_ip_addr_changed+0x74>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff ffb6 	bl	800a7d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d017      	beq.n	800a89a <tcp_netif_ip_addr_changed+0x66>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d013      	beq.n	800a89a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a872:	4b0e      	ldr	r3, [pc, #56]	; (800a8ac <tcp_netif_ip_addr_changed+0x78>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	e00c      	b.n	800a894 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d103      	bne.n	800a88e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1ef      	bne.n	800a87a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20006fb0 	.word	0x20006fb0
 800a8a8:	20006fbc 	.word	0x20006fbc
 800a8ac:	20006fb8 	.word	0x20006fb8

0800a8b0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d007      	beq.n	800a8d0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff fb59 	bl	8009f7c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a8d8:	b590      	push	{r4, r7, lr}
 800a8da:	b08d      	sub	sp, #52	; 0x34
 800a8dc:	af04      	add	r7, sp, #16
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d105      	bne.n	800a8f4 <tcp_input+0x1c>
 800a8e8:	4b9b      	ldr	r3, [pc, #620]	; (800ab58 <tcp_input+0x280>)
 800a8ea:	2283      	movs	r2, #131	; 0x83
 800a8ec:	499b      	ldr	r1, [pc, #620]	; (800ab5c <tcp_input+0x284>)
 800a8ee:	489c      	ldr	r0, [pc, #624]	; (800ab60 <tcp_input+0x288>)
 800a8f0:	f007 f8f4 	bl	8011adc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	4a9a      	ldr	r2, [pc, #616]	; (800ab64 <tcp_input+0x28c>)
 800a8fa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	895b      	ldrh	r3, [r3, #10]
 800a900:	2b13      	cmp	r3, #19
 800a902:	f240 83c4 	bls.w	800b08e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a906:	4b98      	ldr	r3, [pc, #608]	; (800ab68 <tcp_input+0x290>)
 800a908:	695a      	ldr	r2, [r3, #20]
 800a90a:	4b97      	ldr	r3, [pc, #604]	; (800ab68 <tcp_input+0x290>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4619      	mov	r1, r3
 800a910:	4610      	mov	r0, r2
 800a912:	f006 f879 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 83ba 	bne.w	800b092 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a91e:	4b92      	ldr	r3, [pc, #584]	; (800ab68 <tcp_input+0x290>)
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a926:	2be0      	cmp	r3, #224	; 0xe0
 800a928:	f000 83b3 	beq.w	800b092 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a92c:	4b8d      	ldr	r3, [pc, #564]	; (800ab64 <tcp_input+0x28c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	899b      	ldrh	r3, [r3, #12]
 800a932:	b29b      	uxth	r3, r3
 800a934:	4618      	mov	r0, r3
 800a936:	f7fc fc68 	bl	800720a <lwip_htons>
 800a93a:	4603      	mov	r3, r0
 800a93c:	0b1b      	lsrs	r3, r3, #12
 800a93e:	b29b      	uxth	r3, r3
 800a940:	b2db      	uxtb	r3, r3
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a946:	7cbb      	ldrb	r3, [r7, #18]
 800a948:	2b13      	cmp	r3, #19
 800a94a:	f240 83a2 	bls.w	800b092 <tcp_input+0x7ba>
 800a94e:	7cbb      	ldrb	r3, [r7, #18]
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	891b      	ldrh	r3, [r3, #8]
 800a956:	429a      	cmp	r2, r3
 800a958:	f200 839b 	bhi.w	800b092 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a95c:	7cbb      	ldrb	r3, [r7, #18]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	3b14      	subs	r3, #20
 800a962:	b29a      	uxth	r2, r3
 800a964:	4b81      	ldr	r3, [pc, #516]	; (800ab6c <tcp_input+0x294>)
 800a966:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a968:	4b81      	ldr	r3, [pc, #516]	; (800ab70 <tcp_input+0x298>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	895a      	ldrh	r2, [r3, #10]
 800a972:	7cbb      	ldrb	r3, [r7, #18]
 800a974:	b29b      	uxth	r3, r3
 800a976:	429a      	cmp	r2, r3
 800a978:	d309      	bcc.n	800a98e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a97a:	4b7c      	ldr	r3, [pc, #496]	; (800ab6c <tcp_input+0x294>)
 800a97c:	881a      	ldrh	r2, [r3, #0]
 800a97e:	4b7d      	ldr	r3, [pc, #500]	; (800ab74 <tcp_input+0x29c>)
 800a980:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a982:	7cbb      	ldrb	r3, [r7, #18]
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7fd fe54 	bl	8008634 <pbuf_remove_header>
 800a98c:	e04e      	b.n	800aa2c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <tcp_input+0xca>
 800a996:	4b70      	ldr	r3, [pc, #448]	; (800ab58 <tcp_input+0x280>)
 800a998:	22c2      	movs	r2, #194	; 0xc2
 800a99a:	4977      	ldr	r1, [pc, #476]	; (800ab78 <tcp_input+0x2a0>)
 800a99c:	4870      	ldr	r0, [pc, #448]	; (800ab60 <tcp_input+0x288>)
 800a99e:	f007 f89d 	bl	8011adc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a9a2:	2114      	movs	r1, #20
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7fd fe45 	bl	8008634 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	895a      	ldrh	r2, [r3, #10]
 800a9ae:	4b71      	ldr	r3, [pc, #452]	; (800ab74 <tcp_input+0x29c>)
 800a9b0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a9b2:	4b6e      	ldr	r3, [pc, #440]	; (800ab6c <tcp_input+0x294>)
 800a9b4:	881a      	ldrh	r2, [r3, #0]
 800a9b6:	4b6f      	ldr	r3, [pc, #444]	; (800ab74 <tcp_input+0x29c>)
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a9be:	4b6d      	ldr	r3, [pc, #436]	; (800ab74 <tcp_input+0x29c>)
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7fd fe35 	bl	8008634 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	895b      	ldrh	r3, [r3, #10]
 800a9d0:	8a3a      	ldrh	r2, [r7, #16]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	f200 835f 	bhi.w	800b096 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	4a64      	ldr	r2, [pc, #400]	; (800ab70 <tcp_input+0x298>)
 800a9e0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	8a3a      	ldrh	r2, [r7, #16]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd fe22 	bl	8008634 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	891a      	ldrh	r2, [r3, #8]
 800a9f4:	8a3b      	ldrh	r3, [r7, #16]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	895b      	ldrh	r3, [r3, #10]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <tcp_input+0x13a>
 800aa06:	4b54      	ldr	r3, [pc, #336]	; (800ab58 <tcp_input+0x280>)
 800aa08:	22df      	movs	r2, #223	; 0xdf
 800aa0a:	495c      	ldr	r1, [pc, #368]	; (800ab7c <tcp_input+0x2a4>)
 800aa0c:	4854      	ldr	r0, [pc, #336]	; (800ab60 <tcp_input+0x288>)
 800aa0e:	f007 f865 	bl	8011adc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	891a      	ldrh	r2, [r3, #8]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	891b      	ldrh	r3, [r3, #8]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d005      	beq.n	800aa2c <tcp_input+0x154>
 800aa20:	4b4d      	ldr	r3, [pc, #308]	; (800ab58 <tcp_input+0x280>)
 800aa22:	22e0      	movs	r2, #224	; 0xe0
 800aa24:	4956      	ldr	r1, [pc, #344]	; (800ab80 <tcp_input+0x2a8>)
 800aa26:	484e      	ldr	r0, [pc, #312]	; (800ab60 <tcp_input+0x288>)
 800aa28:	f007 f858 	bl	8011adc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aa2c:	4b4d      	ldr	r3, [pc, #308]	; (800ab64 <tcp_input+0x28c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	4b4b      	ldr	r3, [pc, #300]	; (800ab64 <tcp_input+0x28c>)
 800aa36:	681c      	ldr	r4, [r3, #0]
 800aa38:	4610      	mov	r0, r2
 800aa3a:	f7fc fbe6 	bl	800720a <lwip_htons>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aa42:	4b48      	ldr	r3, [pc, #288]	; (800ab64 <tcp_input+0x28c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	885b      	ldrh	r3, [r3, #2]
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	4b46      	ldr	r3, [pc, #280]	; (800ab64 <tcp_input+0x28c>)
 800aa4c:	681c      	ldr	r4, [r3, #0]
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f7fc fbdb 	bl	800720a <lwip_htons>
 800aa54:	4603      	mov	r3, r0
 800aa56:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aa58:	4b42      	ldr	r3, [pc, #264]	; (800ab64 <tcp_input+0x28c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	4b41      	ldr	r3, [pc, #260]	; (800ab64 <tcp_input+0x28c>)
 800aa60:	681c      	ldr	r4, [r3, #0]
 800aa62:	4610      	mov	r0, r2
 800aa64:	f7fc fbe6 	bl	8007234 <lwip_htonl>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	6063      	str	r3, [r4, #4]
 800aa6c:	6863      	ldr	r3, [r4, #4]
 800aa6e:	4a45      	ldr	r2, [pc, #276]	; (800ab84 <tcp_input+0x2ac>)
 800aa70:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aa72:	4b3c      	ldr	r3, [pc, #240]	; (800ab64 <tcp_input+0x28c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	4b3a      	ldr	r3, [pc, #232]	; (800ab64 <tcp_input+0x28c>)
 800aa7a:	681c      	ldr	r4, [r3, #0]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f7fc fbd9 	bl	8007234 <lwip_htonl>
 800aa82:	4603      	mov	r3, r0
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	68a3      	ldr	r3, [r4, #8]
 800aa88:	4a3f      	ldr	r2, [pc, #252]	; (800ab88 <tcp_input+0x2b0>)
 800aa8a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aa8c:	4b35      	ldr	r3, [pc, #212]	; (800ab64 <tcp_input+0x28c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	89db      	ldrh	r3, [r3, #14]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b33      	ldr	r3, [pc, #204]	; (800ab64 <tcp_input+0x28c>)
 800aa96:	681c      	ldr	r4, [r3, #0]
 800aa98:	4610      	mov	r0, r2
 800aa9a:	f7fc fbb6 	bl	800720a <lwip_htons>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800aaa2:	4b30      	ldr	r3, [pc, #192]	; (800ab64 <tcp_input+0x28c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	899b      	ldrh	r3, [r3, #12]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fc fbad 	bl	800720a <lwip_htons>
 800aab0:	4603      	mov	r3, r0
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	4b34      	ldr	r3, [pc, #208]	; (800ab8c <tcp_input+0x2b4>)
 800aabc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	891a      	ldrh	r2, [r3, #8]
 800aac2:	4b33      	ldr	r3, [pc, #204]	; (800ab90 <tcp_input+0x2b8>)
 800aac4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aac6:	4b31      	ldr	r3, [pc, #196]	; (800ab8c <tcp_input+0x2b4>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00c      	beq.n	800aaec <tcp_input+0x214>
    tcplen++;
 800aad2:	4b2f      	ldr	r3, [pc, #188]	; (800ab90 <tcp_input+0x2b8>)
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	3301      	adds	r3, #1
 800aad8:	b29a      	uxth	r2, r3
 800aada:	4b2d      	ldr	r3, [pc, #180]	; (800ab90 <tcp_input+0x2b8>)
 800aadc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	891a      	ldrh	r2, [r3, #8]
 800aae2:	4b2b      	ldr	r3, [pc, #172]	; (800ab90 <tcp_input+0x2b8>)
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	f200 82d7 	bhi.w	800b09a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaf0:	4b28      	ldr	r3, [pc, #160]	; (800ab94 <tcp_input+0x2bc>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	e09d      	b.n	800ac34 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	7d1b      	ldrb	r3, [r3, #20]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d105      	bne.n	800ab0c <tcp_input+0x234>
 800ab00:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <tcp_input+0x280>)
 800ab02:	22fb      	movs	r2, #251	; 0xfb
 800ab04:	4924      	ldr	r1, [pc, #144]	; (800ab98 <tcp_input+0x2c0>)
 800ab06:	4816      	ldr	r0, [pc, #88]	; (800ab60 <tcp_input+0x288>)
 800ab08:	f006 ffe8 	bl	8011adc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	7d1b      	ldrb	r3, [r3, #20]
 800ab10:	2b0a      	cmp	r3, #10
 800ab12:	d105      	bne.n	800ab20 <tcp_input+0x248>
 800ab14:	4b10      	ldr	r3, [pc, #64]	; (800ab58 <tcp_input+0x280>)
 800ab16:	22fc      	movs	r2, #252	; 0xfc
 800ab18:	4920      	ldr	r1, [pc, #128]	; (800ab9c <tcp_input+0x2c4>)
 800ab1a:	4811      	ldr	r0, [pc, #68]	; (800ab60 <tcp_input+0x288>)
 800ab1c:	f006 ffde 	bl	8011adc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d105      	bne.n	800ab34 <tcp_input+0x25c>
 800ab28:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <tcp_input+0x280>)
 800ab2a:	22fd      	movs	r2, #253	; 0xfd
 800ab2c:	491c      	ldr	r1, [pc, #112]	; (800aba0 <tcp_input+0x2c8>)
 800ab2e:	480c      	ldr	r0, [pc, #48]	; (800ab60 <tcp_input+0x288>)
 800ab30:	f006 ffd4 	bl	8011adc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	7a1b      	ldrb	r3, [r3, #8]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d033      	beq.n	800aba4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	7a1a      	ldrb	r2, [r3, #8]
 800ab40:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <tcp_input+0x290>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ab48:	3301      	adds	r3, #1
 800ab4a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d029      	beq.n	800aba4 <tcp_input+0x2cc>
      prev = pcb;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	61bb      	str	r3, [r7, #24]
      continue;
 800ab54:	e06b      	b.n	800ac2e <tcp_input+0x356>
 800ab56:	bf00      	nop
 800ab58:	08015670 	.word	0x08015670
 800ab5c:	080156a4 	.word	0x080156a4
 800ab60:	080156bc 	.word	0x080156bc
 800ab64:	2000026c 	.word	0x2000026c
 800ab68:	20003a6c 	.word	0x20003a6c
 800ab6c:	20000270 	.word	0x20000270
 800ab70:	20000274 	.word	0x20000274
 800ab74:	20000272 	.word	0x20000272
 800ab78:	080156e4 	.word	0x080156e4
 800ab7c:	080156f4 	.word	0x080156f4
 800ab80:	08015700 	.word	0x08015700
 800ab84:	2000027c 	.word	0x2000027c
 800ab88:	20000280 	.word	0x20000280
 800ab8c:	20000288 	.word	0x20000288
 800ab90:	20000286 	.word	0x20000286
 800ab94:	20006fb0 	.word	0x20006fb0
 800ab98:	08015720 	.word	0x08015720
 800ab9c:	08015748 	.word	0x08015748
 800aba0:	08015774 	.word	0x08015774
    }

    if (pcb->remote_port == tcphdr->src &&
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	8b1a      	ldrh	r2, [r3, #24]
 800aba8:	4b94      	ldr	r3, [pc, #592]	; (800adfc <tcp_input+0x524>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d13a      	bne.n	800ac2a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	8ada      	ldrh	r2, [r3, #22]
 800abb8:	4b90      	ldr	r3, [pc, #576]	; (800adfc <tcp_input+0x524>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	885b      	ldrh	r3, [r3, #2]
 800abbe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d132      	bne.n	800ac2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	4b8d      	ldr	r3, [pc, #564]	; (800ae00 <tcp_input+0x528>)
 800abca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800abcc:	429a      	cmp	r2, r3
 800abce:	d12c      	bne.n	800ac2a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	4b8a      	ldr	r3, [pc, #552]	; (800ae00 <tcp_input+0x528>)
 800abd6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abd8:	429a      	cmp	r2, r3
 800abda:	d126      	bne.n	800ac2a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d106      	bne.n	800abf4 <tcp_input+0x31c>
 800abe6:	4b87      	ldr	r3, [pc, #540]	; (800ae04 <tcp_input+0x52c>)
 800abe8:	f240 120d 	movw	r2, #269	; 0x10d
 800abec:	4986      	ldr	r1, [pc, #536]	; (800ae08 <tcp_input+0x530>)
 800abee:	4887      	ldr	r0, [pc, #540]	; (800ae0c <tcp_input+0x534>)
 800abf0:	f006 ff74 	bl	8011adc <iprintf>
      if (prev != NULL) {
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00a      	beq.n	800ac10 <tcp_input+0x338>
        prev->next = pcb->next;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	68da      	ldr	r2, [r3, #12]
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ac02:	4b83      	ldr	r3, [pc, #524]	; (800ae10 <tcp_input+0x538>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ac0a:	4a81      	ldr	r2, [pc, #516]	; (800ae10 <tcp_input+0x538>)
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d111      	bne.n	800ac3e <tcp_input+0x366>
 800ac1a:	4b7a      	ldr	r3, [pc, #488]	; (800ae04 <tcp_input+0x52c>)
 800ac1c:	f240 1215 	movw	r2, #277	; 0x115
 800ac20:	497c      	ldr	r1, [pc, #496]	; (800ae14 <tcp_input+0x53c>)
 800ac22:	487a      	ldr	r0, [pc, #488]	; (800ae0c <tcp_input+0x534>)
 800ac24:	f006 ff5a 	bl	8011adc <iprintf>
      break;
 800ac28:	e009      	b.n	800ac3e <tcp_input+0x366>
    }
    prev = pcb;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	61fb      	str	r3, [r7, #28]
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f47f af5e 	bne.w	800aaf8 <tcp_input+0x220>
 800ac3c:	e000      	b.n	800ac40 <tcp_input+0x368>
      break;
 800ac3e:	bf00      	nop
  }

  if (pcb == NULL) {
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f040 8095 	bne.w	800ad72 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac48:	4b73      	ldr	r3, [pc, #460]	; (800ae18 <tcp_input+0x540>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	61fb      	str	r3, [r7, #28]
 800ac4e:	e03f      	b.n	800acd0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	7d1b      	ldrb	r3, [r3, #20]
 800ac54:	2b0a      	cmp	r3, #10
 800ac56:	d006      	beq.n	800ac66 <tcp_input+0x38e>
 800ac58:	4b6a      	ldr	r3, [pc, #424]	; (800ae04 <tcp_input+0x52c>)
 800ac5a:	f240 121f 	movw	r2, #287	; 0x11f
 800ac5e:	496f      	ldr	r1, [pc, #444]	; (800ae1c <tcp_input+0x544>)
 800ac60:	486a      	ldr	r0, [pc, #424]	; (800ae0c <tcp_input+0x534>)
 800ac62:	f006 ff3b 	bl	8011adc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	7a1b      	ldrb	r3, [r3, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	7a1a      	ldrb	r2, [r3, #8]
 800ac72:	4b63      	ldr	r3, [pc, #396]	; (800ae00 <tcp_input+0x528>)
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d122      	bne.n	800acc8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	8b1a      	ldrh	r2, [r3, #24]
 800ac86:	4b5d      	ldr	r3, [pc, #372]	; (800adfc <tcp_input+0x524>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d11b      	bne.n	800acca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	8ada      	ldrh	r2, [r3, #22]
 800ac96:	4b59      	ldr	r3, [pc, #356]	; (800adfc <tcp_input+0x524>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	885b      	ldrh	r3, [r3, #2]
 800ac9c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d113      	bne.n	800acca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	4b56      	ldr	r3, [pc, #344]	; (800ae00 <tcp_input+0x528>)
 800aca8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800acaa:	429a      	cmp	r2, r3
 800acac:	d10d      	bne.n	800acca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	4b53      	ldr	r3, [pc, #332]	; (800ae00 <tcp_input+0x528>)
 800acb4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d107      	bne.n	800acca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800acba:	69f8      	ldr	r0, [r7, #28]
 800acbc:	f000 fb52 	bl	800b364 <tcp_timewait_input>
        }
        pbuf_free(p);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fd fd3d 	bl	8008740 <pbuf_free>
        return;
 800acc6:	e1ee      	b.n	800b0a6 <tcp_input+0x7ce>
        continue;
 800acc8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	61fb      	str	r3, [r7, #28]
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1bc      	bne.n	800ac50 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acda:	4b51      	ldr	r3, [pc, #324]	; (800ae20 <tcp_input+0x548>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	e02a      	b.n	800ad38 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	7a1b      	ldrb	r3, [r3, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00c      	beq.n	800ad04 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	7a1a      	ldrb	r2, [r3, #8]
 800acee:	4b44      	ldr	r3, [pc, #272]	; (800ae00 <tcp_input+0x528>)
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800acf6:	3301      	adds	r3, #1
 800acf8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d002      	beq.n	800ad04 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	61bb      	str	r3, [r7, #24]
        continue;
 800ad02:	e016      	b.n	800ad32 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	8ada      	ldrh	r2, [r3, #22]
 800ad08:	4b3c      	ldr	r3, [pc, #240]	; (800adfc <tcp_input+0x524>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	885b      	ldrh	r3, [r3, #2]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d10c      	bne.n	800ad2e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	4b39      	ldr	r3, [pc, #228]	; (800ae00 <tcp_input+0x528>)
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d00f      	beq.n	800ad40 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00d      	beq.n	800ad42 <tcp_input+0x46a>
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1d1      	bne.n	800ace2 <tcp_input+0x40a>
 800ad3e:	e000      	b.n	800ad42 <tcp_input+0x46a>
            break;
 800ad40:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d014      	beq.n	800ad72 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ad56:	4b32      	ldr	r3, [pc, #200]	; (800ae20 <tcp_input+0x548>)
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ad5e:	4a30      	ldr	r2, [pc, #192]	; (800ae20 <tcp_input+0x548>)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ad64:	6978      	ldr	r0, [r7, #20]
 800ad66:	f000 f9ff 	bl	800b168 <tcp_listen_input>
      }
      pbuf_free(p);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7fd fce8 	bl	8008740 <pbuf_free>
      return;
 800ad70:	e199      	b.n	800b0a6 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8160 	beq.w	800b03a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ad7a:	4b2a      	ldr	r3, [pc, #168]	; (800ae24 <tcp_input+0x54c>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	891a      	ldrh	r2, [r3, #8]
 800ad84:	4b27      	ldr	r3, [pc, #156]	; (800ae24 <tcp_input+0x54c>)
 800ad86:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ad88:	4a26      	ldr	r2, [pc, #152]	; (800ae24 <tcp_input+0x54c>)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ad8e:	4b1b      	ldr	r3, [pc, #108]	; (800adfc <tcp_input+0x524>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a24      	ldr	r2, [pc, #144]	; (800ae24 <tcp_input+0x54c>)
 800ad94:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ad96:	4b24      	ldr	r3, [pc, #144]	; (800ae28 <tcp_input+0x550>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ad9c:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <tcp_input+0x554>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ada2:	4b23      	ldr	r3, [pc, #140]	; (800ae30 <tcp_input+0x558>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ada8:	4b22      	ldr	r3, [pc, #136]	; (800ae34 <tcp_input+0x55c>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	7b5b      	ldrb	r3, [r3, #13]
 800adb8:	f043 0301 	orr.w	r3, r3, #1
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d038      	beq.n	800ae3c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adca:	69f8      	ldr	r0, [r7, #28]
 800adcc:	f7ff f85a 	bl	8009e84 <tcp_process_refused_data>
 800add0:	4603      	mov	r3, r0
 800add2:	f113 0f0d 	cmn.w	r3, #13
 800add6:	d007      	beq.n	800ade8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800addc:	2b00      	cmp	r3, #0
 800adde:	d02d      	beq.n	800ae3c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ade0:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <tcp_input+0x560>)
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d029      	beq.n	800ae3c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 8104 	bne.w	800affa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800adf2:	69f8      	ldr	r0, [r7, #28]
 800adf4:	f003 fe28 	bl	800ea48 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800adf8:	e0ff      	b.n	800affa <tcp_input+0x722>
 800adfa:	bf00      	nop
 800adfc:	2000026c 	.word	0x2000026c
 800ae00:	20003a6c 	.word	0x20003a6c
 800ae04:	08015670 	.word	0x08015670
 800ae08:	0801579c 	.word	0x0801579c
 800ae0c:	080156bc 	.word	0x080156bc
 800ae10:	20006fb0 	.word	0x20006fb0
 800ae14:	080157c8 	.word	0x080157c8
 800ae18:	20006fc0 	.word	0x20006fc0
 800ae1c:	080157f4 	.word	0x080157f4
 800ae20:	20006fb8 	.word	0x20006fb8
 800ae24:	2000025c 	.word	0x2000025c
 800ae28:	2000028c 	.word	0x2000028c
 800ae2c:	20000289 	.word	0x20000289
 800ae30:	20000284 	.word	0x20000284
 800ae34:	20000288 	.word	0x20000288
 800ae38:	20000286 	.word	0x20000286
      }
    }
    tcp_input_pcb = pcb;
 800ae3c:	4a9b      	ldr	r2, [pc, #620]	; (800b0ac <tcp_input+0x7d4>)
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ae42:	69f8      	ldr	r0, [r7, #28]
 800ae44:	f000 fb0a 	bl	800b45c <tcp_process>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ae4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae50:	f113 0f0d 	cmn.w	r3, #13
 800ae54:	f000 80d3 	beq.w	800affe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ae58:	4b95      	ldr	r3, [pc, #596]	; (800b0b0 <tcp_input+0x7d8>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 0308 	and.w	r3, r3, #8
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d015      	beq.n	800ae90 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d008      	beq.n	800ae80 <tcp_input+0x5a8>
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae74:	69fa      	ldr	r2, [r7, #28]
 800ae76:	6912      	ldr	r2, [r2, #16]
 800ae78:	f06f 010d 	mvn.w	r1, #13
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae80:	69f9      	ldr	r1, [r7, #28]
 800ae82:	488c      	ldr	r0, [pc, #560]	; (800b0b4 <tcp_input+0x7dc>)
 800ae84:	f7ff fbb0 	bl	800a5e8 <tcp_pcb_remove>
        tcp_free(pcb);
 800ae88:	69f8      	ldr	r0, [r7, #28]
 800ae8a:	f7fd ff09 	bl	8008ca0 <tcp_free>
 800ae8e:	e0c1      	b.n	800b014 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ae94:	4b88      	ldr	r3, [pc, #544]	; (800b0b8 <tcp_input+0x7e0>)
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01d      	beq.n	800aed8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ae9c:	4b86      	ldr	r3, [pc, #536]	; (800b0b8 <tcp_input+0x7e0>)
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00a      	beq.n	800aec2 <tcp_input+0x5ea>
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeb2:	69fa      	ldr	r2, [r7, #28]
 800aeb4:	6910      	ldr	r0, [r2, #16]
 800aeb6:	89fa      	ldrh	r2, [r7, #14]
 800aeb8:	69f9      	ldr	r1, [r7, #28]
 800aeba:	4798      	blx	r3
 800aebc:	4603      	mov	r3, r0
 800aebe:	74fb      	strb	r3, [r7, #19]
 800aec0:	e001      	b.n	800aec6 <tcp_input+0x5ee>
 800aec2:	2300      	movs	r3, #0
 800aec4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800aec6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aeca:	f113 0f0d 	cmn.w	r3, #13
 800aece:	f000 8098 	beq.w	800b002 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800aed2:	4b79      	ldr	r3, [pc, #484]	; (800b0b8 <tcp_input+0x7e0>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800aed8:	69f8      	ldr	r0, [r7, #28]
 800aeda:	f000 f905 	bl	800b0e8 <tcp_input_delayed_close>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f040 8090 	bne.w	800b006 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800aee6:	4b75      	ldr	r3, [pc, #468]	; (800b0bc <tcp_input+0x7e4>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d041      	beq.n	800af72 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d006      	beq.n	800af04 <tcp_input+0x62c>
 800aef6:	4b72      	ldr	r3, [pc, #456]	; (800b0c0 <tcp_input+0x7e8>)
 800aef8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aefc:	4971      	ldr	r1, [pc, #452]	; (800b0c4 <tcp_input+0x7ec>)
 800aefe:	4872      	ldr	r0, [pc, #456]	; (800b0c8 <tcp_input+0x7f0>)
 800af00:	f006 fdec 	bl	8011adc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	8b5b      	ldrh	r3, [r3, #26]
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d008      	beq.n	800af22 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800af10:	4b6a      	ldr	r3, [pc, #424]	; (800b0bc <tcp_input+0x7e4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4618      	mov	r0, r3
 800af16:	f7fd fc13 	bl	8008740 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800af1a:	69f8      	ldr	r0, [r7, #28]
 800af1c:	f7fe f9a0 	bl	8009260 <tcp_abort>
            goto aborted;
 800af20:	e078      	b.n	800b014 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00c      	beq.n	800af46 <tcp_input+0x66e>
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	6918      	ldr	r0, [r3, #16]
 800af36:	4b61      	ldr	r3, [pc, #388]	; (800b0bc <tcp_input+0x7e4>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	2300      	movs	r3, #0
 800af3c:	69f9      	ldr	r1, [r7, #28]
 800af3e:	47a0      	blx	r4
 800af40:	4603      	mov	r3, r0
 800af42:	74fb      	strb	r3, [r7, #19]
 800af44:	e008      	b.n	800af58 <tcp_input+0x680>
 800af46:	4b5d      	ldr	r3, [pc, #372]	; (800b0bc <tcp_input+0x7e4>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	2300      	movs	r3, #0
 800af4c:	69f9      	ldr	r1, [r7, #28]
 800af4e:	2000      	movs	r0, #0
 800af50:	f7ff f88a 	bl	800a068 <tcp_recv_null>
 800af54:	4603      	mov	r3, r0
 800af56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800af58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af5c:	f113 0f0d 	cmn.w	r3, #13
 800af60:	d053      	beq.n	800b00a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800af62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800af6a:	4b54      	ldr	r3, [pc, #336]	; (800b0bc <tcp_input+0x7e4>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800af72:	4b4f      	ldr	r3, [pc, #316]	; (800b0b0 <tcp_input+0x7d8>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d030      	beq.n	800afe0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af82:	2b00      	cmp	r3, #0
 800af84:	d009      	beq.n	800af9a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af8a:	7b5a      	ldrb	r2, [r3, #13]
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af90:	f042 0220 	orr.w	r2, r2, #32
 800af94:	b2d2      	uxtb	r2, r2
 800af96:	735a      	strb	r2, [r3, #13]
 800af98:	e022      	b.n	800afe0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800afa2:	d005      	beq.n	800afb0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afa8:	3301      	adds	r3, #1
 800afaa:	b29a      	uxth	r2, r3
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00b      	beq.n	800afd2 <tcp_input+0x6fa>
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	6918      	ldr	r0, [r3, #16]
 800afc4:	2300      	movs	r3, #0
 800afc6:	2200      	movs	r2, #0
 800afc8:	69f9      	ldr	r1, [r7, #28]
 800afca:	47a0      	blx	r4
 800afcc:	4603      	mov	r3, r0
 800afce:	74fb      	strb	r3, [r7, #19]
 800afd0:	e001      	b.n	800afd6 <tcp_input+0x6fe>
 800afd2:	2300      	movs	r3, #0
 800afd4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800afd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afda:	f113 0f0d 	cmn.w	r3, #13
 800afde:	d016      	beq.n	800b00e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800afe0:	4b32      	ldr	r3, [pc, #200]	; (800b0ac <tcp_input+0x7d4>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800afe6:	69f8      	ldr	r0, [r7, #28]
 800afe8:	f000 f87e 	bl	800b0e8 <tcp_input_delayed_close>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10f      	bne.n	800b012 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800aff2:	69f8      	ldr	r0, [r7, #28]
 800aff4:	f002 ff10 	bl	800de18 <tcp_output>
 800aff8:	e00c      	b.n	800b014 <tcp_input+0x73c>
        goto aborted;
 800affa:	bf00      	nop
 800affc:	e00a      	b.n	800b014 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800affe:	bf00      	nop
 800b000:	e008      	b.n	800b014 <tcp_input+0x73c>
              goto aborted;
 800b002:	bf00      	nop
 800b004:	e006      	b.n	800b014 <tcp_input+0x73c>
          goto aborted;
 800b006:	bf00      	nop
 800b008:	e004      	b.n	800b014 <tcp_input+0x73c>
            goto aborted;
 800b00a:	bf00      	nop
 800b00c:	e002      	b.n	800b014 <tcp_input+0x73c>
              goto aborted;
 800b00e:	bf00      	nop
 800b010:	e000      	b.n	800b014 <tcp_input+0x73c>
          goto aborted;
 800b012:	bf00      	nop
    tcp_input_pcb = NULL;
 800b014:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <tcp_input+0x7d4>)
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b01a:	4b28      	ldr	r3, [pc, #160]	; (800b0bc <tcp_input+0x7e4>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b020:	4b2a      	ldr	r3, [pc, #168]	; (800b0cc <tcp_input+0x7f4>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d03d      	beq.n	800b0a4 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800b028:	4b28      	ldr	r3, [pc, #160]	; (800b0cc <tcp_input+0x7f4>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fd fb87 	bl	8008740 <pbuf_free>
      inseg.p = NULL;
 800b032:	4b26      	ldr	r3, [pc, #152]	; (800b0cc <tcp_input+0x7f4>)
 800b034:	2200      	movs	r2, #0
 800b036:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b038:	e034      	b.n	800b0a4 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b03a:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <tcp_input+0x7f8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	899b      	ldrh	r3, [r3, #12]
 800b040:	b29b      	uxth	r3, r3
 800b042:	4618      	mov	r0, r3
 800b044:	f7fc f8e1 	bl	800720a <lwip_htons>
 800b048:	4603      	mov	r3, r0
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b00      	cmp	r3, #0
 800b052:	d118      	bne.n	800b086 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b054:	4b1f      	ldr	r3, [pc, #124]	; (800b0d4 <tcp_input+0x7fc>)
 800b056:	6819      	ldr	r1, [r3, #0]
 800b058:	4b1f      	ldr	r3, [pc, #124]	; (800b0d8 <tcp_input+0x800>)
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	4b1f      	ldr	r3, [pc, #124]	; (800b0dc <tcp_input+0x804>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b064:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <tcp_input+0x7f8>)
 800b066:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b068:	885b      	ldrh	r3, [r3, #2]
 800b06a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b06c:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <tcp_input+0x7f8>)
 800b06e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b070:	8812      	ldrh	r2, [r2, #0]
 800b072:	b292      	uxth	r2, r2
 800b074:	9202      	str	r2, [sp, #8]
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	4b19      	ldr	r3, [pc, #100]	; (800b0e0 <tcp_input+0x808>)
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <tcp_input+0x80c>)
 800b07e:	4602      	mov	r2, r0
 800b080:	2000      	movs	r0, #0
 800b082:	f003 fc8f 	bl	800e9a4 <tcp_rst>
    pbuf_free(p);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7fd fb5a 	bl	8008740 <pbuf_free>
  return;
 800b08c:	e00a      	b.n	800b0a4 <tcp_input+0x7cc>
    goto dropped;
 800b08e:	bf00      	nop
 800b090:	e004      	b.n	800b09c <tcp_input+0x7c4>
dropped:
 800b092:	bf00      	nop
 800b094:	e002      	b.n	800b09c <tcp_input+0x7c4>
      goto dropped;
 800b096:	bf00      	nop
 800b098:	e000      	b.n	800b09c <tcp_input+0x7c4>
      goto dropped;
 800b09a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7fd fb4f 	bl	8008740 <pbuf_free>
 800b0a2:	e000      	b.n	800b0a6 <tcp_input+0x7ce>
  return;
 800b0a4:	bf00      	nop
}
 800b0a6:	3724      	adds	r7, #36	; 0x24
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}
 800b0ac:	20006fc4 	.word	0x20006fc4
 800b0b0:	20000289 	.word	0x20000289
 800b0b4:	20006fb0 	.word	0x20006fb0
 800b0b8:	20000284 	.word	0x20000284
 800b0bc:	2000028c 	.word	0x2000028c
 800b0c0:	08015670 	.word	0x08015670
 800b0c4:	08015824 	.word	0x08015824
 800b0c8:	080156bc 	.word	0x080156bc
 800b0cc:	2000025c 	.word	0x2000025c
 800b0d0:	2000026c 	.word	0x2000026c
 800b0d4:	20000280 	.word	0x20000280
 800b0d8:	20000286 	.word	0x20000286
 800b0dc:	2000027c 	.word	0x2000027c
 800b0e0:	20003a7c 	.word	0x20003a7c
 800b0e4:	20003a80 	.word	0x20003a80

0800b0e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d106      	bne.n	800b104 <tcp_input_delayed_close+0x1c>
 800b0f6:	4b17      	ldr	r3, [pc, #92]	; (800b154 <tcp_input_delayed_close+0x6c>)
 800b0f8:	f240 225a 	movw	r2, #602	; 0x25a
 800b0fc:	4916      	ldr	r1, [pc, #88]	; (800b158 <tcp_input_delayed_close+0x70>)
 800b0fe:	4817      	ldr	r0, [pc, #92]	; (800b15c <tcp_input_delayed_close+0x74>)
 800b100:	f006 fcec 	bl	8011adc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b104:	4b16      	ldr	r3, [pc, #88]	; (800b160 <tcp_input_delayed_close+0x78>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f003 0310 	and.w	r3, r3, #16
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d01c      	beq.n	800b14a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	8b5b      	ldrh	r3, [r3, #26]
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10d      	bne.n	800b138 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b122:	2b00      	cmp	r3, #0
 800b124:	d008      	beq.n	800b138 <tcp_input_delayed_close+0x50>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	6912      	ldr	r2, [r2, #16]
 800b130:	f06f 010e 	mvn.w	r1, #14
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	480a      	ldr	r0, [pc, #40]	; (800b164 <tcp_input_delayed_close+0x7c>)
 800b13c:	f7ff fa54 	bl	800a5e8 <tcp_pcb_remove>
    tcp_free(pcb);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fd fdad 	bl	8008ca0 <tcp_free>
    return 1;
 800b146:	2301      	movs	r3, #1
 800b148:	e000      	b.n	800b14c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	08015670 	.word	0x08015670
 800b158:	08015840 	.word	0x08015840
 800b15c:	080156bc 	.word	0x080156bc
 800b160:	20000289 	.word	0x20000289
 800b164:	20006fb0 	.word	0x20006fb0

0800b168 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b168:	b590      	push	{r4, r7, lr}
 800b16a:	b08b      	sub	sp, #44	; 0x2c
 800b16c:	af04      	add	r7, sp, #16
 800b16e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b170:	4b6f      	ldr	r3, [pc, #444]	; (800b330 <tcp_listen_input+0x1c8>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f040 80d3 	bne.w	800b324 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <tcp_listen_input+0x2a>
 800b184:	4b6b      	ldr	r3, [pc, #428]	; (800b334 <tcp_listen_input+0x1cc>)
 800b186:	f240 2281 	movw	r2, #641	; 0x281
 800b18a:	496b      	ldr	r1, [pc, #428]	; (800b338 <tcp_listen_input+0x1d0>)
 800b18c:	486b      	ldr	r0, [pc, #428]	; (800b33c <tcp_listen_input+0x1d4>)
 800b18e:	f006 fca5 	bl	8011adc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b192:	4b67      	ldr	r3, [pc, #412]	; (800b330 <tcp_listen_input+0x1c8>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	f003 0310 	and.w	r3, r3, #16
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d019      	beq.n	800b1d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b19e:	4b68      	ldr	r3, [pc, #416]	; (800b340 <tcp_listen_input+0x1d8>)
 800b1a0:	6819      	ldr	r1, [r3, #0]
 800b1a2:	4b68      	ldr	r3, [pc, #416]	; (800b344 <tcp_listen_input+0x1dc>)
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4b67      	ldr	r3, [pc, #412]	; (800b348 <tcp_listen_input+0x1e0>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1ae:	4b67      	ldr	r3, [pc, #412]	; (800b34c <tcp_listen_input+0x1e4>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1b2:	885b      	ldrh	r3, [r3, #2]
 800b1b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1b6:	4a65      	ldr	r2, [pc, #404]	; (800b34c <tcp_listen_input+0x1e4>)
 800b1b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1ba:	8812      	ldrh	r2, [r2, #0]
 800b1bc:	b292      	uxth	r2, r2
 800b1be:	9202      	str	r2, [sp, #8]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	4b63      	ldr	r3, [pc, #396]	; (800b350 <tcp_listen_input+0x1e8>)
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	4b63      	ldr	r3, [pc, #396]	; (800b354 <tcp_listen_input+0x1ec>)
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f003 fbea 	bl	800e9a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b1d0:	e0aa      	b.n	800b328 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800b1d2:	4b57      	ldr	r3, [pc, #348]	; (800b330 <tcp_listen_input+0x1c8>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	f003 0302 	and.w	r3, r3, #2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 80a4 	beq.w	800b328 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7d5b      	ldrb	r3, [r3, #21]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff f863 	bl	800a2b0 <tcp_alloc>
 800b1ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d111      	bne.n	800b216 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <tcp_listen_input+0xa8>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	699b      	ldr	r3, [r3, #24]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	6910      	ldr	r0, [r2, #16]
 800b202:	f04f 32ff 	mov.w	r2, #4294967295
 800b206:	2100      	movs	r1, #0
 800b208:	4798      	blx	r3
 800b20a:	4603      	mov	r3, r0
 800b20c:	73bb      	strb	r3, [r7, #14]
      return;
 800b20e:	e08c      	b.n	800b32a <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b210:	23f0      	movs	r3, #240	; 0xf0
 800b212:	73bb      	strb	r3, [r7, #14]
      return;
 800b214:	e089      	b.n	800b32a <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b216:	4b50      	ldr	r3, [pc, #320]	; (800b358 <tcp_listen_input+0x1f0>)
 800b218:	695a      	ldr	r2, [r3, #20]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b21e:	4b4e      	ldr	r3, [pc, #312]	; (800b358 <tcp_listen_input+0x1f0>)
 800b220:	691a      	ldr	r2, [r3, #16]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	8ada      	ldrh	r2, [r3, #22]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b22e:	4b47      	ldr	r3, [pc, #284]	; (800b34c <tcp_listen_input+0x1e4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	b29a      	uxth	r2, r3
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2203      	movs	r2, #3
 800b23e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b240:	4b41      	ldr	r3, [pc, #260]	; (800b348 <tcp_listen_input+0x1e0>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b252:	6978      	ldr	r0, [r7, #20]
 800b254:	f7ff fa5c 	bl	800a710 <tcp_next_iss>
 800b258:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	693a      	ldr	r2, [r7, #16]
 800b26a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b272:	4b35      	ldr	r3, [pc, #212]	; (800b348 <tcp_listen_input+0x1e0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	1e5a      	subs	r2, r3, #1
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7a5b      	ldrb	r3, [r3, #9]
 800b28e:	f003 030c 	and.w	r3, r3, #12
 800b292:	b2da      	uxtb	r2, r3
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7a1a      	ldrb	r2, [r3, #8]
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b2a0:	4b2e      	ldr	r3, [pc, #184]	; (800b35c <tcp_listen_input+0x1f4>)
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	60da      	str	r2, [r3, #12]
 800b2a8:	4a2c      	ldr	r2, [pc, #176]	; (800b35c <tcp_listen_input+0x1f4>)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	f003 fd3b 	bl	800ed28 <tcp_timer_needed>
 800b2b2:	4b2b      	ldr	r3, [pc, #172]	; (800b360 <tcp_listen_input+0x1f8>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b2b8:	6978      	ldr	r0, [r7, #20]
 800b2ba:	f001 fd8f 	bl	800cddc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b2be:	4b23      	ldr	r3, [pc, #140]	; (800b34c <tcp_listen_input+0x1e4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	89db      	ldrh	r3, [r3, #14]
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f005 f8fd 	bl	80104e0 <ip4_route>
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff fa34 	bl	800a75c <tcp_eff_send_mss_netif>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b2fc:	2112      	movs	r1, #18
 800b2fe:	6978      	ldr	r0, [r7, #20]
 800b300:	f002 fc9c 	bl	800dc3c <tcp_enqueue_flags>
 800b304:	4603      	mov	r3, r0
 800b306:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d004      	beq.n	800b31a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b310:	2100      	movs	r1, #0
 800b312:	6978      	ldr	r0, [r7, #20]
 800b314:	f7fd fee6 	bl	80090e4 <tcp_abandon>
      return;
 800b318:	e007      	b.n	800b32a <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800b31a:	6978      	ldr	r0, [r7, #20]
 800b31c:	f002 fd7c 	bl	800de18 <tcp_output>
  return;
 800b320:	bf00      	nop
 800b322:	e001      	b.n	800b328 <tcp_listen_input+0x1c0>
    return;
 800b324:	bf00      	nop
 800b326:	e000      	b.n	800b32a <tcp_listen_input+0x1c2>
  return;
 800b328:	bf00      	nop
}
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}
 800b330:	20000288 	.word	0x20000288
 800b334:	08015670 	.word	0x08015670
 800b338:	08015868 	.word	0x08015868
 800b33c:	080156bc 	.word	0x080156bc
 800b340:	20000280 	.word	0x20000280
 800b344:	20000286 	.word	0x20000286
 800b348:	2000027c 	.word	0x2000027c
 800b34c:	2000026c 	.word	0x2000026c
 800b350:	20003a7c 	.word	0x20003a7c
 800b354:	20003a80 	.word	0x20003a80
 800b358:	20003a6c 	.word	0x20003a6c
 800b35c:	20006fb0 	.word	0x20006fb0
 800b360:	20006fac 	.word	0x20006fac

0800b364 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af04      	add	r7, sp, #16
 800b36a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b36c:	4b30      	ldr	r3, [pc, #192]	; (800b430 <tcp_timewait_input+0xcc>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d154      	bne.n	800b422 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <tcp_timewait_input+0x28>
 800b37e:	4b2d      	ldr	r3, [pc, #180]	; (800b434 <tcp_timewait_input+0xd0>)
 800b380:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b384:	492c      	ldr	r1, [pc, #176]	; (800b438 <tcp_timewait_input+0xd4>)
 800b386:	482d      	ldr	r0, [pc, #180]	; (800b43c <tcp_timewait_input+0xd8>)
 800b388:	f006 fba8 	bl	8011adc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b38c:	4b28      	ldr	r3, [pc, #160]	; (800b430 <tcp_timewait_input+0xcc>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d02a      	beq.n	800b3ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b398:	4b29      	ldr	r3, [pc, #164]	; (800b440 <tcp_timewait_input+0xdc>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	db2d      	blt.n	800b402 <tcp_timewait_input+0x9e>
 800b3a6:	4b26      	ldr	r3, [pc, #152]	; (800b440 <tcp_timewait_input+0xdc>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b3b2:	440b      	add	r3, r1
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dc23      	bgt.n	800b402 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3ba:	4b22      	ldr	r3, [pc, #136]	; (800b444 <tcp_timewait_input+0xe0>)
 800b3bc:	6819      	ldr	r1, [r3, #0]
 800b3be:	4b22      	ldr	r3, [pc, #136]	; (800b448 <tcp_timewait_input+0xe4>)
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4b1e      	ldr	r3, [pc, #120]	; (800b440 <tcp_timewait_input+0xdc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3ca:	4b20      	ldr	r3, [pc, #128]	; (800b44c <tcp_timewait_input+0xe8>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3ce:	885b      	ldrh	r3, [r3, #2]
 800b3d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3d2:	4a1e      	ldr	r2, [pc, #120]	; (800b44c <tcp_timewait_input+0xe8>)
 800b3d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3d6:	8812      	ldrh	r2, [r2, #0]
 800b3d8:	b292      	uxth	r2, r2
 800b3da:	9202      	str	r2, [sp, #8]
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	4b1c      	ldr	r3, [pc, #112]	; (800b450 <tcp_timewait_input+0xec>)
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <tcp_timewait_input+0xf0>)
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f003 fadc 	bl	800e9a4 <tcp_rst>
      return;
 800b3ec:	e01c      	b.n	800b428 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800b3ee:	4b10      	ldr	r3, [pc, #64]	; (800b430 <tcp_timewait_input+0xcc>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b3fa:	4b17      	ldr	r3, [pc, #92]	; (800b458 <tcp_timewait_input+0xf4>)
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b402:	4b11      	ldr	r3, [pc, #68]	; (800b448 <tcp_timewait_input+0xe4>)
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00d      	beq.n	800b426 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	8b5b      	ldrh	r3, [r3, #26]
 800b40e:	f043 0302 	orr.w	r3, r3, #2
 800b412:	b29a      	uxth	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f002 fcfd 	bl	800de18 <tcp_output>
  }
  return;
 800b41e:	bf00      	nop
 800b420:	e001      	b.n	800b426 <tcp_timewait_input+0xc2>
    return;
 800b422:	bf00      	nop
 800b424:	e000      	b.n	800b428 <tcp_timewait_input+0xc4>
  return;
 800b426:	bf00      	nop
}
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20000288 	.word	0x20000288
 800b434:	08015670 	.word	0x08015670
 800b438:	08015888 	.word	0x08015888
 800b43c:	080156bc 	.word	0x080156bc
 800b440:	2000027c 	.word	0x2000027c
 800b444:	20000280 	.word	0x20000280
 800b448:	20000286 	.word	0x20000286
 800b44c:	2000026c 	.word	0x2000026c
 800b450:	20003a7c 	.word	0x20003a7c
 800b454:	20003a80 	.word	0x20003a80
 800b458:	20006fb4 	.word	0x20006fb4

0800b45c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b08d      	sub	sp, #52	; 0x34
 800b460:	af04      	add	r7, sp, #16
 800b462:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d106      	bne.n	800b480 <tcp_process+0x24>
 800b472:	4ba5      	ldr	r3, [pc, #660]	; (800b708 <tcp_process+0x2ac>)
 800b474:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b478:	49a4      	ldr	r1, [pc, #656]	; (800b70c <tcp_process+0x2b0>)
 800b47a:	48a5      	ldr	r0, [pc, #660]	; (800b710 <tcp_process+0x2b4>)
 800b47c:	f006 fb2e 	bl	8011adc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b480:	4ba4      	ldr	r3, [pc, #656]	; (800b714 <tcp_process+0x2b8>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d04e      	beq.n	800b52a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7d1b      	ldrb	r3, [r3, #20]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d108      	bne.n	800b4a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b498:	4b9f      	ldr	r3, [pc, #636]	; (800b718 <tcp_process+0x2bc>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d123      	bne.n	800b4e8 <tcp_process+0x8c>
        acceptable = 1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	76fb      	strb	r3, [r7, #27]
 800b4a4:	e020      	b.n	800b4e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4aa:	4b9c      	ldr	r3, [pc, #624]	; (800b71c <tcp_process+0x2c0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d102      	bne.n	800b4b8 <tcp_process+0x5c>
        acceptable = 1;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	76fb      	strb	r3, [r7, #27]
 800b4b6:	e017      	b.n	800b4e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b4b8:	4b98      	ldr	r3, [pc, #608]	; (800b71c <tcp_process+0x2c0>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	db10      	blt.n	800b4e8 <tcp_process+0x8c>
 800b4c6:	4b95      	ldr	r3, [pc, #596]	; (800b71c <tcp_process+0x2c0>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4d2:	440b      	add	r3, r1
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dc06      	bgt.n	800b4e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8b5b      	ldrh	r3, [r3, #26]
 800b4de:	f043 0302 	orr.w	r3, r3, #2
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b4e8:	7efb      	ldrb	r3, [r7, #27]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d01b      	beq.n	800b526 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	7d1b      	ldrb	r3, [r3, #20]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d106      	bne.n	800b504 <tcp_process+0xa8>
 800b4f6:	4b84      	ldr	r3, [pc, #528]	; (800b708 <tcp_process+0x2ac>)
 800b4f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b4fc:	4988      	ldr	r1, [pc, #544]	; (800b720 <tcp_process+0x2c4>)
 800b4fe:	4884      	ldr	r0, [pc, #528]	; (800b710 <tcp_process+0x2b4>)
 800b500:	f006 faec 	bl	8011adc <iprintf>
      recv_flags |= TF_RESET;
 800b504:	4b87      	ldr	r3, [pc, #540]	; (800b724 <tcp_process+0x2c8>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	f043 0308 	orr.w	r3, r3, #8
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	4b85      	ldr	r3, [pc, #532]	; (800b724 <tcp_process+0x2c8>)
 800b510:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	8b5b      	ldrh	r3, [r3, #26]
 800b516:	f023 0301 	bic.w	r3, r3, #1
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b520:	f06f 030d 	mvn.w	r3, #13
 800b524:	e37a      	b.n	800bc1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	e378      	b.n	800bc1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b52a:	4b7a      	ldr	r3, [pc, #488]	; (800b714 <tcp_process+0x2b8>)
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d010      	beq.n	800b558 <tcp_process+0xfc>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7d1b      	ldrb	r3, [r3, #20]
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d00c      	beq.n	800b558 <tcp_process+0xfc>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	7d1b      	ldrb	r3, [r3, #20]
 800b542:	2b03      	cmp	r3, #3
 800b544:	d008      	beq.n	800b558 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	8b5b      	ldrh	r3, [r3, #26]
 800b54a:	f043 0302 	orr.w	r3, r3, #2
 800b54e:	b29a      	uxth	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b554:	2300      	movs	r3, #0
 800b556:	e361      	b.n	800bc1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8b5b      	ldrh	r3, [r3, #26]
 800b55c:	f003 0310 	and.w	r3, r3, #16
 800b560:	2b00      	cmp	r3, #0
 800b562:	d103      	bne.n	800b56c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b564:	4b70      	ldr	r3, [pc, #448]	; (800b728 <tcp_process+0x2cc>)
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 fc2d 	bl	800cddc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	7d1b      	ldrb	r3, [r3, #20]
 800b586:	3b02      	subs	r3, #2
 800b588:	2b07      	cmp	r3, #7
 800b58a:	f200 8337 	bhi.w	800bbfc <tcp_process+0x7a0>
 800b58e:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <tcp_process+0x138>)
 800b590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b594:	0800b5b5 	.word	0x0800b5b5
 800b598:	0800b7e5 	.word	0x0800b7e5
 800b59c:	0800b95d 	.word	0x0800b95d
 800b5a0:	0800b987 	.word	0x0800b987
 800b5a4:	0800baab 	.word	0x0800baab
 800b5a8:	0800b95d 	.word	0x0800b95d
 800b5ac:	0800bb37 	.word	0x0800bb37
 800b5b0:	0800bbc7 	.word	0x0800bbc7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b5b4:	4b57      	ldr	r3, [pc, #348]	; (800b714 <tcp_process+0x2b8>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	f003 0310 	and.w	r3, r3, #16
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 80e4 	beq.w	800b78a <tcp_process+0x32e>
 800b5c2:	4b54      	ldr	r3, [pc, #336]	; (800b714 <tcp_process+0x2b8>)
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 80dd 	beq.w	800b78a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d4:	1c5a      	adds	r2, r3, #1
 800b5d6:	4b50      	ldr	r3, [pc, #320]	; (800b718 <tcp_process+0x2bc>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	f040 80d5 	bne.w	800b78a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b5e0:	4b4e      	ldr	r3, [pc, #312]	; (800b71c <tcp_process+0x2c0>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b5f2:	4b49      	ldr	r3, [pc, #292]	; (800b718 <tcp_process+0x2bc>)
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b5fa:	4b4c      	ldr	r3, [pc, #304]	; (800b72c <tcp_process+0x2d0>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	89db      	ldrh	r3, [r3, #14]
 800b600:	b29a      	uxth	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b614:	4b41      	ldr	r3, [pc, #260]	; (800b71c <tcp_process+0x2c0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2204      	movs	r2, #4
 800b622:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3304      	adds	r3, #4
 800b62c:	4618      	mov	r0, r3
 800b62e:	f004 ff57 	bl	80104e0 <ip4_route>
 800b632:	4601      	mov	r1, r0
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3304      	adds	r3, #4
 800b638:	461a      	mov	r2, r3
 800b63a:	4620      	mov	r0, r4
 800b63c:	f7ff f88e 	bl	800a75c <tcp_eff_send_mss_netif>
 800b640:	4603      	mov	r3, r0
 800b642:	461a      	mov	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b64c:	009a      	lsls	r2, r3, #2
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	f241 111c 	movw	r1, #4380	; 0x111c
 800b658:	428b      	cmp	r3, r1
 800b65a:	bf38      	it	cc
 800b65c:	460b      	movcc	r3, r1
 800b65e:	429a      	cmp	r2, r3
 800b660:	d204      	bcs.n	800b66c <tcp_process+0x210>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	b29b      	uxth	r3, r3
 800b66a:	e00d      	b.n	800b688 <tcp_process+0x22c>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	f241 121c 	movw	r2, #4380	; 0x111c
 800b676:	4293      	cmp	r3, r2
 800b678:	d904      	bls.n	800b684 <tcp_process+0x228>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	b29b      	uxth	r3, r3
 800b682:	e001      	b.n	800b688 <tcp_process+0x22c>
 800b684:	f241 131c 	movw	r3, #4380	; 0x111c
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b694:	2b00      	cmp	r3, #0
 800b696:	d106      	bne.n	800b6a6 <tcp_process+0x24a>
 800b698:	4b1b      	ldr	r3, [pc, #108]	; (800b708 <tcp_process+0x2ac>)
 800b69a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b69e:	4924      	ldr	r1, [pc, #144]	; (800b730 <tcp_process+0x2d4>)
 800b6a0:	481b      	ldr	r0, [pc, #108]	; (800b710 <tcp_process+0x2b4>)
 800b6a2:	f006 fa1b 	bl	8011adc <iprintf>
        --pcb->snd_queuelen;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d111      	bne.n	800b6e6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <tcp_process+0x280>
 800b6ce:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <tcp_process+0x2ac>)
 800b6d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b6d4:	4917      	ldr	r1, [pc, #92]	; (800b734 <tcp_process+0x2d8>)
 800b6d6:	480e      	ldr	r0, [pc, #56]	; (800b710 <tcp_process+0x2b4>)
 800b6d8:	f006 fa00 	bl	8011adc <iprintf>
          pcb->unsent = rseg->next;
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6e4:	e003      	b.n	800b6ee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b6ee:	69f8      	ldr	r0, [r7, #28]
 800b6f0:	f7fe fc58 	bl	8009fa4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d11d      	bne.n	800b738 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b702:	861a      	strh	r2, [r3, #48]	; 0x30
 800b704:	e01f      	b.n	800b746 <tcp_process+0x2ea>
 800b706:	bf00      	nop
 800b708:	08015670 	.word	0x08015670
 800b70c:	080158a8 	.word	0x080158a8
 800b710:	080156bc 	.word	0x080156bc
 800b714:	20000288 	.word	0x20000288
 800b718:	20000280 	.word	0x20000280
 800b71c:	2000027c 	.word	0x2000027c
 800b720:	080158c4 	.word	0x080158c4
 800b724:	20000289 	.word	0x20000289
 800b728:	20006fb4 	.word	0x20006fb4
 800b72c:	2000026c 	.word	0x2000026c
 800b730:	080158e4 	.word	0x080158e4
 800b734:	080158fc 	.word	0x080158fc
        } else {
          pcb->rtime = 0;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00a      	beq.n	800b766 <tcp_process+0x30a>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	6910      	ldr	r0, [r2, #16]
 800b75a:	2200      	movs	r2, #0
 800b75c:	6879      	ldr	r1, [r7, #4]
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	76bb      	strb	r3, [r7, #26]
 800b764:	e001      	b.n	800b76a <tcp_process+0x30e>
 800b766:	2300      	movs	r3, #0
 800b768:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b76a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b76e:	f113 0f0d 	cmn.w	r3, #13
 800b772:	d102      	bne.n	800b77a <tcp_process+0x31e>
          return ERR_ABRT;
 800b774:	f06f 030c 	mvn.w	r3, #12
 800b778:	e250      	b.n	800bc1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8b5b      	ldrh	r3, [r3, #26]
 800b77e:	f043 0302 	orr.w	r3, r3, #2
 800b782:	b29a      	uxth	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b788:	e23a      	b.n	800bc00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b78a:	4b9d      	ldr	r3, [pc, #628]	; (800ba00 <tcp_process+0x5a4>)
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	f003 0310 	and.w	r3, r3, #16
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8234 	beq.w	800bc00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b798:	4b9a      	ldr	r3, [pc, #616]	; (800ba04 <tcp_process+0x5a8>)
 800b79a:	6819      	ldr	r1, [r3, #0]
 800b79c:	4b9a      	ldr	r3, [pc, #616]	; (800ba08 <tcp_process+0x5ac>)
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	4b9a      	ldr	r3, [pc, #616]	; (800ba0c <tcp_process+0x5b0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7a8:	4b99      	ldr	r3, [pc, #612]	; (800ba10 <tcp_process+0x5b4>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7ac:	885b      	ldrh	r3, [r3, #2]
 800b7ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7b0:	4a97      	ldr	r2, [pc, #604]	; (800ba10 <tcp_process+0x5b4>)
 800b7b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7b4:	8812      	ldrh	r2, [r2, #0]
 800b7b6:	b292      	uxth	r2, r2
 800b7b8:	9202      	str	r2, [sp, #8]
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	4b95      	ldr	r3, [pc, #596]	; (800ba14 <tcp_process+0x5b8>)
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	4b95      	ldr	r3, [pc, #596]	; (800ba18 <tcp_process+0x5bc>)
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f003 f8ed 	bl	800e9a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7d0:	2b05      	cmp	r3, #5
 800b7d2:	f200 8215 	bhi.w	800bc00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f002 feab 	bl	800e538 <tcp_rexmit_rto>
      break;
 800b7e2:	e20d      	b.n	800bc00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b7e4:	4b86      	ldr	r3, [pc, #536]	; (800ba00 <tcp_process+0x5a4>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	f003 0310 	and.w	r3, r3, #16
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 80a1 	beq.w	800b934 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7f2:	4b84      	ldr	r3, [pc, #528]	; (800ba04 <tcp_process+0x5a8>)
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	db7e      	blt.n	800b900 <tcp_process+0x4a4>
 800b802:	4b80      	ldr	r3, [pc, #512]	; (800ba04 <tcp_process+0x5a8>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dc77      	bgt.n	800b900 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2204      	movs	r2, #4
 800b814:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b81e:	23fa      	movs	r3, #250	; 0xfa
 800b820:	76bb      	strb	r3, [r7, #26]
 800b822:	e01d      	b.n	800b860 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d106      	bne.n	800b83c <tcp_process+0x3e0>
 800b82e:	4b7b      	ldr	r3, [pc, #492]	; (800ba1c <tcp_process+0x5c0>)
 800b830:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b834:	497a      	ldr	r1, [pc, #488]	; (800ba20 <tcp_process+0x5c4>)
 800b836:	487b      	ldr	r0, [pc, #492]	; (800ba24 <tcp_process+0x5c8>)
 800b838:	f006 f950 	bl	8011adc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <tcp_process+0x400>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	6910      	ldr	r0, [r2, #16]
 800b850:	2200      	movs	r2, #0
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	4798      	blx	r3
 800b856:	4603      	mov	r3, r0
 800b858:	76bb      	strb	r3, [r7, #26]
 800b85a:	e001      	b.n	800b860 <tcp_process+0x404>
 800b85c:	23f0      	movs	r3, #240	; 0xf0
 800b85e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b860:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00a      	beq.n	800b87e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b868:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b86c:	f113 0f0d 	cmn.w	r3, #13
 800b870:	d002      	beq.n	800b878 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7fd fcf4 	bl	8009260 <tcp_abort>
            }
            return ERR_ABRT;
 800b878:	f06f 030c 	mvn.w	r3, #12
 800b87c:	e1ce      	b.n	800bc1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fae0 	bl	800be44 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b884:	4b68      	ldr	r3, [pc, #416]	; (800ba28 <tcp_process+0x5cc>)
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d005      	beq.n	800b898 <tcp_process+0x43c>
            recv_acked--;
 800b88c:	4b66      	ldr	r3, [pc, #408]	; (800ba28 <tcp_process+0x5cc>)
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	3b01      	subs	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	4b64      	ldr	r3, [pc, #400]	; (800ba28 <tcp_process+0x5cc>)
 800b896:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b89c:	009a      	lsls	r2, r3, #2
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	f241 111c 	movw	r1, #4380	; 0x111c
 800b8a8:	428b      	cmp	r3, r1
 800b8aa:	bf38      	it	cc
 800b8ac:	460b      	movcc	r3, r1
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d204      	bcs.n	800b8bc <tcp_process+0x460>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	e00d      	b.n	800b8d8 <tcp_process+0x47c>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d904      	bls.n	800b8d4 <tcp_process+0x478>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	e001      	b.n	800b8d8 <tcp_process+0x47c>
 800b8d4:	f241 131c 	movw	r3, #4380	; 0x111c
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b8de:	4b53      	ldr	r3, [pc, #332]	; (800ba2c <tcp_process+0x5d0>)
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	f003 0320 	and.w	r3, r3, #32
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d037      	beq.n	800b95a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	8b5b      	ldrh	r3, [r3, #26]
 800b8ee:	f043 0302 	orr.w	r3, r3, #2
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2207      	movs	r2, #7
 800b8fc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b8fe:	e02c      	b.n	800b95a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b900:	4b40      	ldr	r3, [pc, #256]	; (800ba04 <tcp_process+0x5a8>)
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	4b40      	ldr	r3, [pc, #256]	; (800ba08 <tcp_process+0x5ac>)
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	4b40      	ldr	r3, [pc, #256]	; (800ba0c <tcp_process+0x5b0>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b910:	4b3f      	ldr	r3, [pc, #252]	; (800ba10 <tcp_process+0x5b4>)
 800b912:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b914:	885b      	ldrh	r3, [r3, #2]
 800b916:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b918:	4a3d      	ldr	r2, [pc, #244]	; (800ba10 <tcp_process+0x5b4>)
 800b91a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b91c:	8812      	ldrh	r2, [r2, #0]
 800b91e:	b292      	uxth	r2, r2
 800b920:	9202      	str	r2, [sp, #8]
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	4b3b      	ldr	r3, [pc, #236]	; (800ba14 <tcp_process+0x5b8>)
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	4b3b      	ldr	r3, [pc, #236]	; (800ba18 <tcp_process+0x5bc>)
 800b92a:	4602      	mov	r2, r0
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f003 f839 	bl	800e9a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b932:	e167      	b.n	800bc04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b934:	4b32      	ldr	r3, [pc, #200]	; (800ba00 <tcp_process+0x5a4>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 8161 	beq.w	800bc04 <tcp_process+0x7a8>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b946:	1e5a      	subs	r2, r3, #1
 800b948:	4b30      	ldr	r3, [pc, #192]	; (800ba0c <tcp_process+0x5b0>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	f040 8159 	bne.w	800bc04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f002 fe12 	bl	800e57c <tcp_rexmit>
      break;
 800b958:	e154      	b.n	800bc04 <tcp_process+0x7a8>
 800b95a:	e153      	b.n	800bc04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fa71 	bl	800be44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b962:	4b32      	ldr	r3, [pc, #200]	; (800ba2c <tcp_process+0x5d0>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f003 0320 	and.w	r3, r3, #32
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 814c 	beq.w	800bc08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	8b5b      	ldrh	r3, [r3, #26]
 800b974:	f043 0302 	orr.w	r3, r3, #2
 800b978:	b29a      	uxth	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2207      	movs	r2, #7
 800b982:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b984:	e140      	b.n	800bc08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa5c 	bl	800be44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b98c:	4b27      	ldr	r3, [pc, #156]	; (800ba2c <tcp_process+0x5d0>)
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f003 0320 	and.w	r3, r3, #32
 800b994:	2b00      	cmp	r3, #0
 800b996:	d071      	beq.n	800ba7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b998:	4b19      	ldr	r3, [pc, #100]	; (800ba00 <tcp_process+0x5a4>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	f003 0310 	and.w	r3, r3, #16
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d060      	beq.n	800ba66 <tcp_process+0x60a>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9a8:	4b16      	ldr	r3, [pc, #88]	; (800ba04 <tcp_process+0x5a8>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d15a      	bne.n	800ba66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d156      	bne.n	800ba66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	8b5b      	ldrh	r3, [r3, #26]
 800b9bc:	f043 0302 	orr.w	r3, r3, #2
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7fe fdbe 	bl	800a548 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b9cc:	4b18      	ldr	r3, [pc, #96]	; (800ba30 <tcp_process+0x5d4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d105      	bne.n	800b9e2 <tcp_process+0x586>
 800b9d6:	4b16      	ldr	r3, [pc, #88]	; (800ba30 <tcp_process+0x5d4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	4a14      	ldr	r2, [pc, #80]	; (800ba30 <tcp_process+0x5d4>)
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	e02e      	b.n	800ba40 <tcp_process+0x5e4>
 800b9e2:	4b13      	ldr	r3, [pc, #76]	; (800ba30 <tcp_process+0x5d4>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e027      	b.n	800ba3a <tcp_process+0x5de>
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d11f      	bne.n	800ba34 <tcp_process+0x5d8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	60da      	str	r2, [r3, #12]
 800b9fc:	e020      	b.n	800ba40 <tcp_process+0x5e4>
 800b9fe:	bf00      	nop
 800ba00:	20000288 	.word	0x20000288
 800ba04:	20000280 	.word	0x20000280
 800ba08:	20000286 	.word	0x20000286
 800ba0c:	2000027c 	.word	0x2000027c
 800ba10:	2000026c 	.word	0x2000026c
 800ba14:	20003a7c 	.word	0x20003a7c
 800ba18:	20003a80 	.word	0x20003a80
 800ba1c:	08015670 	.word	0x08015670
 800ba20:	08015910 	.word	0x08015910
 800ba24:	080156bc 	.word	0x080156bc
 800ba28:	20000284 	.word	0x20000284
 800ba2c:	20000289 	.word	0x20000289
 800ba30:	20006fb0 	.word	0x20006fb0
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	617b      	str	r3, [r7, #20]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1d4      	bne.n	800b9ea <tcp_process+0x58e>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	60da      	str	r2, [r3, #12]
 800ba46:	4b77      	ldr	r3, [pc, #476]	; (800bc24 <tcp_process+0x7c8>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	220a      	movs	r2, #10
 800ba50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ba52:	4b75      	ldr	r3, [pc, #468]	; (800bc28 <tcp_process+0x7cc>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	60da      	str	r2, [r3, #12]
 800ba5a:	4a73      	ldr	r2, [pc, #460]	; (800bc28 <tcp_process+0x7cc>)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	f003 f962 	bl	800ed28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ba64:	e0d2      	b.n	800bc0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8b5b      	ldrh	r3, [r3, #26]
 800ba6a:	f043 0302 	orr.w	r3, r3, #2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2208      	movs	r2, #8
 800ba78:	751a      	strb	r2, [r3, #20]
      break;
 800ba7a:	e0c7      	b.n	800bc0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba7c:	4b6b      	ldr	r3, [pc, #428]	; (800bc2c <tcp_process+0x7d0>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	f003 0310 	and.w	r3, r3, #16
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80c1 	beq.w	800bc0c <tcp_process+0x7b0>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba8e:	4b68      	ldr	r3, [pc, #416]	; (800bc30 <tcp_process+0x7d4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	f040 80ba 	bne.w	800bc0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f040 80b5 	bne.w	800bc0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2206      	movs	r2, #6
 800baa6:	751a      	strb	r2, [r3, #20]
      break;
 800baa8:	e0b0      	b.n	800bc0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f9ca 	bl	800be44 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bab0:	4b60      	ldr	r3, [pc, #384]	; (800bc34 <tcp_process+0x7d8>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	f003 0320 	and.w	r3, r3, #32
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 80a9 	beq.w	800bc10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	8b5b      	ldrh	r3, [r3, #26]
 800bac2:	f043 0302 	orr.w	r3, r3, #2
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7fe fd3b 	bl	800a548 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bad2:	4b59      	ldr	r3, [pc, #356]	; (800bc38 <tcp_process+0x7dc>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d105      	bne.n	800bae8 <tcp_process+0x68c>
 800badc:	4b56      	ldr	r3, [pc, #344]	; (800bc38 <tcp_process+0x7dc>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	4a55      	ldr	r2, [pc, #340]	; (800bc38 <tcp_process+0x7dc>)
 800bae4:	6013      	str	r3, [r2, #0]
 800bae6:	e013      	b.n	800bb10 <tcp_process+0x6b4>
 800bae8:	4b53      	ldr	r3, [pc, #332]	; (800bc38 <tcp_process+0x7dc>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	613b      	str	r3, [r7, #16]
 800baee:	e00c      	b.n	800bb0a <tcp_process+0x6ae>
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d104      	bne.n	800bb04 <tcp_process+0x6a8>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68da      	ldr	r2, [r3, #12]
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	e005      	b.n	800bb10 <tcp_process+0x6b4>
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1ef      	bne.n	800baf0 <tcp_process+0x694>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	60da      	str	r2, [r3, #12]
 800bb16:	4b43      	ldr	r3, [pc, #268]	; (800bc24 <tcp_process+0x7c8>)
 800bb18:	2201      	movs	r2, #1
 800bb1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	220a      	movs	r2, #10
 800bb20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb22:	4b41      	ldr	r3, [pc, #260]	; (800bc28 <tcp_process+0x7cc>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60da      	str	r2, [r3, #12]
 800bb2a:	4a3f      	ldr	r2, [pc, #252]	; (800bc28 <tcp_process+0x7cc>)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	f003 f8fa 	bl	800ed28 <tcp_timer_needed>
      }
      break;
 800bb34:	e06c      	b.n	800bc10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f984 	bl	800be44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bb3c:	4b3b      	ldr	r3, [pc, #236]	; (800bc2c <tcp_process+0x7d0>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	f003 0310 	and.w	r3, r3, #16
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d065      	beq.n	800bc14 <tcp_process+0x7b8>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb4c:	4b38      	ldr	r3, [pc, #224]	; (800bc30 <tcp_process+0x7d4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d15f      	bne.n	800bc14 <tcp_process+0x7b8>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d15b      	bne.n	800bc14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7fe fcf3 	bl	800a548 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb62:	4b35      	ldr	r3, [pc, #212]	; (800bc38 <tcp_process+0x7dc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d105      	bne.n	800bb78 <tcp_process+0x71c>
 800bb6c:	4b32      	ldr	r3, [pc, #200]	; (800bc38 <tcp_process+0x7dc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	4a31      	ldr	r2, [pc, #196]	; (800bc38 <tcp_process+0x7dc>)
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	e013      	b.n	800bba0 <tcp_process+0x744>
 800bb78:	4b2f      	ldr	r3, [pc, #188]	; (800bc38 <tcp_process+0x7dc>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	60fb      	str	r3, [r7, #12]
 800bb7e:	e00c      	b.n	800bb9a <tcp_process+0x73e>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d104      	bne.n	800bb94 <tcp_process+0x738>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	60da      	str	r2, [r3, #12]
 800bb92:	e005      	b.n	800bba0 <tcp_process+0x744>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1ef      	bne.n	800bb80 <tcp_process+0x724>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	60da      	str	r2, [r3, #12]
 800bba6:	4b1f      	ldr	r3, [pc, #124]	; (800bc24 <tcp_process+0x7c8>)
 800bba8:	2201      	movs	r2, #1
 800bbaa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	220a      	movs	r2, #10
 800bbb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bbb2:	4b1d      	ldr	r3, [pc, #116]	; (800bc28 <tcp_process+0x7cc>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60da      	str	r2, [r3, #12]
 800bbba:	4a1b      	ldr	r2, [pc, #108]	; (800bc28 <tcp_process+0x7cc>)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	f003 f8b2 	bl	800ed28 <tcp_timer_needed>
      }
      break;
 800bbc4:	e026      	b.n	800bc14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f93c 	bl	800be44 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bbcc:	4b17      	ldr	r3, [pc, #92]	; (800bc2c <tcp_process+0x7d0>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 0310 	and.w	r3, r3, #16
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d01f      	beq.n	800bc18 <tcp_process+0x7bc>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbdc:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <tcp_process+0x7d4>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d119      	bne.n	800bc18 <tcp_process+0x7bc>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d115      	bne.n	800bc18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bbec:	4b11      	ldr	r3, [pc, #68]	; (800bc34 <tcp_process+0x7d8>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	f043 0310 	orr.w	r3, r3, #16
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <tcp_process+0x7d8>)
 800bbf8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bbfa:	e00d      	b.n	800bc18 <tcp_process+0x7bc>
    default:
      break;
 800bbfc:	bf00      	nop
 800bbfe:	e00c      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc00:	bf00      	nop
 800bc02:	e00a      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc04:	bf00      	nop
 800bc06:	e008      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc08:	bf00      	nop
 800bc0a:	e006      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc0c:	bf00      	nop
 800bc0e:	e004      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc10:	bf00      	nop
 800bc12:	e002      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc14:	bf00      	nop
 800bc16:	e000      	b.n	800bc1a <tcp_process+0x7be>
      break;
 800bc18:	bf00      	nop
  }
  return ERR_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3724      	adds	r7, #36	; 0x24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd90      	pop	{r4, r7, pc}
 800bc24:	20006fac 	.word	0x20006fac
 800bc28:	20006fc0 	.word	0x20006fc0
 800bc2c:	20000288 	.word	0x20000288
 800bc30:	20000280 	.word	0x20000280
 800bc34:	20000289 	.word	0x20000289
 800bc38:	20006fb0 	.word	0x20006fb0

0800bc3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <tcp_oos_insert_segment+0x1e>
 800bc4c:	4b3b      	ldr	r3, [pc, #236]	; (800bd3c <tcp_oos_insert_segment+0x100>)
 800bc4e:	f240 421f 	movw	r2, #1055	; 0x41f
 800bc52:	493b      	ldr	r1, [pc, #236]	; (800bd40 <tcp_oos_insert_segment+0x104>)
 800bc54:	483b      	ldr	r0, [pc, #236]	; (800bd44 <tcp_oos_insert_segment+0x108>)
 800bc56:	f005 ff41 	bl	8011adc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	899b      	ldrh	r3, [r3, #12]
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fb fad1 	bl	800720a <lwip_htons>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d028      	beq.n	800bcc6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bc74:	6838      	ldr	r0, [r7, #0]
 800bc76:	f7fe f981 	bl	8009f7c <tcp_segs_free>
    next = NULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	603b      	str	r3, [r7, #0]
 800bc7e:	e056      	b.n	800bd2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	899b      	ldrh	r3, [r3, #12]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fb fabe 	bl	800720a <lwip_htons>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00d      	beq.n	800bcb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	899b      	ldrh	r3, [r3, #12]
 800bca0:	b29c      	uxth	r4, r3
 800bca2:	2001      	movs	r0, #1
 800bca4:	f7fb fab1 	bl	800720a <lwip_htons>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	461a      	mov	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	4322      	orrs	r2, r4
 800bcb2:	b292      	uxth	r2, r2
 800bcb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7fe f96f 	bl	8009fa4 <tcp_seg_free>
    while (next &&
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00e      	beq.n	800bcea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	891b      	ldrh	r3, [r3, #8]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <tcp_oos_insert_segment+0x10c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	441a      	add	r2, r3
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	8909      	ldrh	r1, [r1, #8]
 800bce2:	440b      	add	r3, r1
 800bce4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	daca      	bge.n	800bc80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01e      	beq.n	800bd2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	891b      	ldrh	r3, [r3, #8]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4b14      	ldr	r3, [pc, #80]	; (800bd48 <tcp_oos_insert_segment+0x10c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	441a      	add	r2, r3
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dd12      	ble.n	800bd2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	4b0d      	ldr	r3, [pc, #52]	; (800bd48 <tcp_oos_insert_segment+0x10c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	891b      	ldrh	r3, [r3, #8]
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fc fb83 	bl	8008434 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	601a      	str	r2, [r3, #0]
}
 800bd34:	bf00      	nop
 800bd36:	3714      	adds	r7, #20
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd90      	pop	{r4, r7, pc}
 800bd3c:	08015670 	.word	0x08015670
 800bd40:	08015930 	.word	0x08015930
 800bd44:	080156bc 	.word	0x080156bc
 800bd48:	2000027c 	.word	0x2000027c

0800bd4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bd4c:	b5b0      	push	{r4, r5, r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bd5a:	e03e      	b.n	800bdda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fc fd70 	bl	8008850 <pbuf_clen>
 800bd70:	4603      	mov	r3, r0
 800bd72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd7a:	8a7a      	ldrh	r2, [r7, #18]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d906      	bls.n	800bd8e <tcp_free_acked_segments+0x42>
 800bd80:	4b2a      	ldr	r3, [pc, #168]	; (800be2c <tcp_free_acked_segments+0xe0>)
 800bd82:	f240 4257 	movw	r2, #1111	; 0x457
 800bd86:	492a      	ldr	r1, [pc, #168]	; (800be30 <tcp_free_acked_segments+0xe4>)
 800bd88:	482a      	ldr	r0, [pc, #168]	; (800be34 <tcp_free_acked_segments+0xe8>)
 800bd8a:	f005 fea7 	bl	8011adc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800bd94:	8a7b      	ldrh	r3, [r7, #18]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	891a      	ldrh	r2, [r3, #8]
 800bda4:	4b24      	ldr	r3, [pc, #144]	; (800be38 <tcp_free_acked_segments+0xec>)
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	4413      	add	r3, r2
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	4b22      	ldr	r3, [pc, #136]	; (800be38 <tcp_free_acked_segments+0xec>)
 800bdae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bdb0:	6978      	ldr	r0, [r7, #20]
 800bdb2:	f7fe f8f7 	bl	8009fa4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00c      	beq.n	800bdda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d109      	bne.n	800bdda <tcp_free_acked_segments+0x8e>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d106      	bne.n	800bdda <tcp_free_acked_segments+0x8e>
 800bdcc:	4b17      	ldr	r3, [pc, #92]	; (800be2c <tcp_free_acked_segments+0xe0>)
 800bdce:	f240 4262 	movw	r2, #1122	; 0x462
 800bdd2:	491a      	ldr	r1, [pc, #104]	; (800be3c <tcp_free_acked_segments+0xf0>)
 800bdd4:	4817      	ldr	r0, [pc, #92]	; (800be34 <tcp_free_acked_segments+0xe8>)
 800bdd6:	f005 fe81 	bl	8011adc <iprintf>
  while (seg_list != NULL &&
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d020      	beq.n	800be22 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fb fa24 	bl	8007234 <lwip_htonl>
 800bdec:	4604      	mov	r4, r0
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	891b      	ldrh	r3, [r3, #8]
 800bdf2:	461d      	mov	r5, r3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	899b      	ldrh	r3, [r3, #12]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fb fa04 	bl	800720a <lwip_htons>
 800be02:	4603      	mov	r3, r0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 0303 	and.w	r3, r3, #3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <tcp_free_acked_segments+0xc6>
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <tcp_free_acked_segments+0xc8>
 800be12:	2300      	movs	r3, #0
 800be14:	442b      	add	r3, r5
 800be16:	18e2      	adds	r2, r4, r3
 800be18:	4b09      	ldr	r3, [pc, #36]	; (800be40 <tcp_free_acked_segments+0xf4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800be1e:	2b00      	cmp	r3, #0
 800be20:	dd9c      	ble.n	800bd5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800be22:	68bb      	ldr	r3, [r7, #8]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3718      	adds	r7, #24
 800be28:	46bd      	mov	sp, r7
 800be2a:	bdb0      	pop	{r4, r5, r7, pc}
 800be2c:	08015670 	.word	0x08015670
 800be30:	08015958 	.word	0x08015958
 800be34:	080156bc 	.word	0x080156bc
 800be38:	20000284 	.word	0x20000284
 800be3c:	08015980 	.word	0x08015980
 800be40:	20000280 	.word	0x20000280

0800be44 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be44:	b5b0      	push	{r4, r5, r7, lr}
 800be46:	b094      	sub	sp, #80	; 0x50
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800be4c:	2300      	movs	r3, #0
 800be4e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <tcp_receive+0x20>
 800be56:	4ba6      	ldr	r3, [pc, #664]	; (800c0f0 <tcp_receive+0x2ac>)
 800be58:	f240 427b 	movw	r2, #1147	; 0x47b
 800be5c:	49a5      	ldr	r1, [pc, #660]	; (800c0f4 <tcp_receive+0x2b0>)
 800be5e:	48a6      	ldr	r0, [pc, #664]	; (800c0f8 <tcp_receive+0x2b4>)
 800be60:	f005 fe3c 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	7d1b      	ldrb	r3, [r3, #20]
 800be68:	2b03      	cmp	r3, #3
 800be6a:	d806      	bhi.n	800be7a <tcp_receive+0x36>
 800be6c:	4ba0      	ldr	r3, [pc, #640]	; (800c0f0 <tcp_receive+0x2ac>)
 800be6e:	f240 427c 	movw	r2, #1148	; 0x47c
 800be72:	49a2      	ldr	r1, [pc, #648]	; (800c0fc <tcp_receive+0x2b8>)
 800be74:	48a0      	ldr	r0, [pc, #640]	; (800c0f8 <tcp_receive+0x2b4>)
 800be76:	f005 fe31 	bl	8011adc <iprintf>

  if (flags & TCP_ACK) {
 800be7a:	4ba1      	ldr	r3, [pc, #644]	; (800c100 <tcp_receive+0x2bc>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	f003 0310 	and.w	r3, r3, #16
 800be82:	2b00      	cmp	r3, #0
 800be84:	f000 8263 	beq.w	800c34e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be8e:	461a      	mov	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be94:	4413      	add	r3, r2
 800be96:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be9c:	4b99      	ldr	r3, [pc, #612]	; (800c104 <tcp_receive+0x2c0>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	db1b      	blt.n	800bede <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beaa:	4b96      	ldr	r3, [pc, #600]	; (800c104 <tcp_receive+0x2c0>)
 800beac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800beae:	429a      	cmp	r2, r3
 800beb0:	d106      	bne.n	800bec0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800beb6:	4b94      	ldr	r3, [pc, #592]	; (800c108 <tcp_receive+0x2c4>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	db0e      	blt.n	800bede <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bec4:	4b90      	ldr	r3, [pc, #576]	; (800c108 <tcp_receive+0x2c4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bec8:	429a      	cmp	r2, r3
 800beca:	d125      	bne.n	800bf18 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800becc:	4b8f      	ldr	r3, [pc, #572]	; (800c10c <tcp_receive+0x2c8>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	89db      	ldrh	r3, [r3, #14]
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800beda:	429a      	cmp	r2, r3
 800bedc:	d91c      	bls.n	800bf18 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bede:	4b8b      	ldr	r3, [pc, #556]	; (800c10c <tcp_receive+0x2c8>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	89db      	ldrh	r3, [r3, #14]
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bef8:	429a      	cmp	r2, r3
 800befa:	d205      	bcs.n	800bf08 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bf08:	4b7e      	ldr	r3, [pc, #504]	; (800c104 <tcp_receive+0x2c0>)
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bf10:	4b7d      	ldr	r3, [pc, #500]	; (800c108 <tcp_receive+0x2c4>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf18:	4b7b      	ldr	r3, [pc, #492]	; (800c108 <tcp_receive+0x2c4>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dc58      	bgt.n	800bfd8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bf26:	4b7a      	ldr	r3, [pc, #488]	; (800c110 <tcp_receive+0x2cc>)
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d14b      	bne.n	800bfc6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bf38:	4413      	add	r3, r2
 800bf3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d142      	bne.n	800bfc6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	db3d      	blt.n	800bfc6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf4e:	4b6e      	ldr	r3, [pc, #440]	; (800c108 <tcp_receive+0x2c4>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d137      	bne.n	800bfc6 <tcp_receive+0x182>
              found_dupack = 1;
 800bf56:	2301      	movs	r3, #1
 800bf58:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf60:	2bff      	cmp	r3, #255	; 0xff
 800bf62:	d007      	beq.n	800bf74 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d91b      	bls.n	800bfb6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf88:	4413      	add	r3, r2
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d30a      	bcc.n	800bfac <tcp_receive+0x168>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfa0:	4413      	add	r3, r2
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bfaa:	e004      	b.n	800bfb6 <tcp_receive+0x172>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d902      	bls.n	800bfc6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f002 fb47 	bl	800e654 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bfc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 8160 	bne.w	800c28e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfd6:	e15a      	b.n	800c28e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfd8:	4b4b      	ldr	r3, [pc, #300]	; (800c108 <tcp_receive+0x2c4>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f2c0 814d 	blt.w	800c284 <tcp_receive+0x440>
 800bfea:	4b47      	ldr	r3, [pc, #284]	; (800c108 <tcp_receive+0x2c4>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f300 8145 	bgt.w	800c284 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8b5b      	ldrh	r3, [r3, #26]
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	2b00      	cmp	r3, #0
 800c004:	d010      	beq.n	800c028 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	8b5b      	ldrh	r3, [r3, #26]
 800c00a:	f023 0304 	bic.w	r3, r3, #4
 800c00e:	b29a      	uxth	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c036:	10db      	asrs	r3, r3, #3
 800c038:	b21b      	sxth	r3, r3
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c042:	b29b      	uxth	r3, r3
 800c044:	4413      	add	r3, r2
 800c046:	b29b      	uxth	r3, r3
 800c048:	b21a      	sxth	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c050:	4b2d      	ldr	r3, [pc, #180]	; (800c108 <tcp_receive+0x2c4>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c068:	4b27      	ldr	r3, [pc, #156]	; (800c108 <tcp_receive+0x2c4>)
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7d1b      	ldrb	r3, [r3, #20]
 800c074:	2b03      	cmp	r3, #3
 800c076:	f240 8096 	bls.w	800c1a6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c086:	429a      	cmp	r2, r3
 800c088:	d244      	bcs.n	800c114 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	8b5b      	ldrh	r3, [r3, #26]
 800c08e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <tcp_receive+0x256>
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <tcp_receive+0x258>
 800c09a:	2302      	movs	r3, #2
 800c09c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c0a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0aa:	fb12 f303 	smulbb	r3, r2, r3
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	bf28      	it	cs
 800c0b6:	4613      	movcs	r3, r2
 800c0b8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c0c2:	4413      	add	r3, r2
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d309      	bcc.n	800c0e4 <tcp_receive+0x2a0>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c0d8:	4413      	add	r3, r2
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0e2:	e060      	b.n	800c1a6 <tcp_receive+0x362>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0ee:	e05a      	b.n	800c1a6 <tcp_receive+0x362>
 800c0f0:	08015670 	.word	0x08015670
 800c0f4:	080159a0 	.word	0x080159a0
 800c0f8:	080156bc 	.word	0x080156bc
 800c0fc:	080159bc 	.word	0x080159bc
 800c100:	20000288 	.word	0x20000288
 800c104:	2000027c 	.word	0x2000027c
 800c108:	20000280 	.word	0x20000280
 800c10c:	2000026c 	.word	0x2000026c
 800c110:	20000286 	.word	0x20000286
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c11a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c11c:	4413      	add	r3, r2
 800c11e:	b29a      	uxth	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c126:	429a      	cmp	r2, r3
 800c128:	d309      	bcc.n	800c13e <tcp_receive+0x2fa>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c132:	4413      	add	r3, r2
 800c134:	b29a      	uxth	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c13c:	e004      	b.n	800c148 <tcp_receive+0x304>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c154:	429a      	cmp	r2, r3
 800c156:	d326      	bcc.n	800c1a6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c178:	4413      	add	r3, r2
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c182:	429a      	cmp	r2, r3
 800c184:	d30a      	bcc.n	800c19c <tcp_receive+0x358>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c190:	4413      	add	r3, r2
 800c192:	b29a      	uxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c19a:	e004      	b.n	800c1a6 <tcp_receive+0x362>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ae:	4a98      	ldr	r2, [pc, #608]	; (800c410 <tcp_receive+0x5cc>)
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff fdcb 	bl	800bd4c <tcp_free_acked_segments>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1c4:	4a93      	ldr	r2, [pc, #588]	; (800c414 <tcp_receive+0x5d0>)
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff fdc0 	bl	800bd4c <tcp_free_acked_segments>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d104      	bne.n	800c1e4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800c1e2:	e002      	b.n	800c1ea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c206:	4b84      	ldr	r3, [pc, #528]	; (800c418 <tcp_receive+0x5d4>)
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	4413      	add	r3, r2
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	8b5b      	ldrh	r3, [r3, #26]
 800c218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d035      	beq.n	800c28c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c224:	2b00      	cmp	r3, #0
 800c226:	d118      	bne.n	800c25a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00c      	beq.n	800c24a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fa fff9 	bl	8007234 <lwip_htonl>
 800c242:	4603      	mov	r3, r0
 800c244:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c246:	2b00      	cmp	r3, #0
 800c248:	dc20      	bgt.n	800c28c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	8b5b      	ldrh	r3, [r3, #26]
 800c24e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c252:	b29a      	uxth	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c258:	e018      	b.n	800c28c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	4618      	mov	r0, r3
 800c268:	f7fa ffe4 	bl	8007234 <lwip_htonl>
 800c26c:	4603      	mov	r3, r0
 800c26e:	1ae3      	subs	r3, r4, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc0b      	bgt.n	800c28c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	8b5b      	ldrh	r3, [r3, #26]
 800c278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c282:	e003      	b.n	800c28c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f002 fbdf 	bl	800ea48 <tcp_send_empty_ack>
 800c28a:	e000      	b.n	800c28e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c28c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c292:	2b00      	cmp	r3, #0
 800c294:	d05b      	beq.n	800c34e <tcp_receive+0x50a>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c29a:	4b60      	ldr	r3, [pc, #384]	; (800c41c <tcp_receive+0x5d8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da54      	bge.n	800c34e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c2a4:	4b5e      	ldr	r3, [pc, #376]	; (800c420 <tcp_receive+0x5dc>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c2b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c2c2:	10db      	asrs	r3, r3, #3
 800c2c4:	b21b      	sxth	r3, r3
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	1ad3      	subs	r3, r2, r3
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2dc:	4413      	add	r3, r2
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	b21a      	sxth	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c2e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	da05      	bge.n	800c2fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c2ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c2f2:	425b      	negs	r3, r3
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c2fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c304:	109b      	asrs	r3, r3, #2
 800c306:	b21b      	sxth	r3, r3
 800c308:	b29b      	uxth	r3, r3
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c318:	b29a      	uxth	r2, r3
 800c31a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c31e:	4413      	add	r3, r2
 800c320:	b29b      	uxth	r3, r3
 800c322:	b21a      	sxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c32e:	10db      	asrs	r3, r3, #3
 800c330:	b21b      	sxth	r3, r3
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	4413      	add	r3, r2
 800c33e:	b29b      	uxth	r3, r3
 800c340:	b21a      	sxth	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c34e:	4b35      	ldr	r3, [pc, #212]	; (800c424 <tcp_receive+0x5e0>)
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 84e1 	beq.w	800cd1a <tcp_receive+0xed6>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7d1b      	ldrb	r3, [r3, #20]
 800c35c:	2b06      	cmp	r3, #6
 800c35e:	f200 84dc 	bhi.w	800cd1a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c366:	4b30      	ldr	r3, [pc, #192]	; (800c428 <tcp_receive+0x5e4>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	3b01      	subs	r3, #1
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f2c0 808e 	blt.w	800c490 <tcp_receive+0x64c>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c378:	4b2a      	ldr	r3, [pc, #168]	; (800c424 <tcp_receive+0x5e0>)
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	4619      	mov	r1, r3
 800c37e:	4b2a      	ldr	r3, [pc, #168]	; (800c428 <tcp_receive+0x5e4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	440b      	add	r3, r1
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	3301      	adds	r3, #1
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f300 8081 	bgt.w	800c490 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c38e:	4b27      	ldr	r3, [pc, #156]	; (800c42c <tcp_receive+0x5e8>)
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c398:	4b23      	ldr	r3, [pc, #140]	; (800c428 <tcp_receive+0x5e4>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c3a0:	4b22      	ldr	r3, [pc, #136]	; (800c42c <tcp_receive+0x5e8>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <tcp_receive+0x572>
 800c3a8:	4b21      	ldr	r3, [pc, #132]	; (800c430 <tcp_receive+0x5ec>)
 800c3aa:	f240 5294 	movw	r2, #1428	; 0x594
 800c3ae:	4921      	ldr	r1, [pc, #132]	; (800c434 <tcp_receive+0x5f0>)
 800c3b0:	4821      	ldr	r0, [pc, #132]	; (800c438 <tcp_receive+0x5f4>)
 800c3b2:	f005 fb93 	bl	8011adc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d906      	bls.n	800c3ce <tcp_receive+0x58a>
 800c3c0:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <tcp_receive+0x5ec>)
 800c3c2:	f240 5295 	movw	r2, #1429	; 0x595
 800c3c6:	491d      	ldr	r1, [pc, #116]	; (800c43c <tcp_receive+0x5f8>)
 800c3c8:	481b      	ldr	r0, [pc, #108]	; (800c438 <tcp_receive+0x5f4>)
 800c3ca:	f005 fb87 	bl	8011adc <iprintf>
      off = (u16_t)off32;
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c3d4:	4b15      	ldr	r3, [pc, #84]	; (800c42c <tcp_receive+0x5e8>)
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	891b      	ldrh	r3, [r3, #8]
 800c3da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d906      	bls.n	800c3f0 <tcp_receive+0x5ac>
 800c3e2:	4b13      	ldr	r3, [pc, #76]	; (800c430 <tcp_receive+0x5ec>)
 800c3e4:	f240 5297 	movw	r2, #1431	; 0x597
 800c3e8:	4915      	ldr	r1, [pc, #84]	; (800c440 <tcp_receive+0x5fc>)
 800c3ea:	4813      	ldr	r0, [pc, #76]	; (800c438 <tcp_receive+0x5f4>)
 800c3ec:	f005 fb76 	bl	8011adc <iprintf>
      inseg.len -= off;
 800c3f0:	4b0e      	ldr	r3, [pc, #56]	; (800c42c <tcp_receive+0x5e8>)
 800c3f2:	891a      	ldrh	r2, [r3, #8]
 800c3f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	4b0b      	ldr	r3, [pc, #44]	; (800c42c <tcp_receive+0x5e8>)
 800c3fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c400:	4b0a      	ldr	r3, [pc, #40]	; (800c42c <tcp_receive+0x5e8>)
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	891a      	ldrh	r2, [r3, #8]
 800c406:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c40e:	e029      	b.n	800c464 <tcp_receive+0x620>
 800c410:	080159d8 	.word	0x080159d8
 800c414:	080159e0 	.word	0x080159e0
 800c418:	20000284 	.word	0x20000284
 800c41c:	20000280 	.word	0x20000280
 800c420:	20006fb4 	.word	0x20006fb4
 800c424:	20000286 	.word	0x20000286
 800c428:	2000027c 	.word	0x2000027c
 800c42c:	2000025c 	.word	0x2000025c
 800c430:	08015670 	.word	0x08015670
 800c434:	080159e8 	.word	0x080159e8
 800c438:	080156bc 	.word	0x080156bc
 800c43c:	080159f8 	.word	0x080159f8
 800c440:	08015a08 	.word	0x08015a08
        off -= p->len;
 800c444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c446:	895b      	ldrh	r3, [r3, #10]
 800c448:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c454:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c456:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c45a:	2200      	movs	r2, #0
 800c45c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c466:	895b      	ldrh	r3, [r3, #10]
 800c468:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d8e9      	bhi.n	800c444 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c474:	4619      	mov	r1, r3
 800c476:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c478:	f7fc f8dc 	bl	8008634 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c480:	4a91      	ldr	r2, [pc, #580]	; (800c6c8 <tcp_receive+0x884>)
 800c482:	6013      	str	r3, [r2, #0]
 800c484:	4b91      	ldr	r3, [pc, #580]	; (800c6cc <tcp_receive+0x888>)
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	4a8f      	ldr	r2, [pc, #572]	; (800c6c8 <tcp_receive+0x884>)
 800c48a:	6812      	ldr	r2, [r2, #0]
 800c48c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c48e:	e00d      	b.n	800c4ac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c490:	4b8d      	ldr	r3, [pc, #564]	; (800c6c8 <tcp_receive+0x884>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	da06      	bge.n	800c4ac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	8b5b      	ldrh	r3, [r3, #26]
 800c4a2:	f043 0302 	orr.w	r3, r3, #2
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c4ac:	4b86      	ldr	r3, [pc, #536]	; (800c6c8 <tcp_receive+0x884>)
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f2c0 842a 	blt.w	800cd10 <tcp_receive+0xecc>
 800c4bc:	4b82      	ldr	r3, [pc, #520]	; (800c6c8 <tcp_receive+0x884>)
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c4c8:	440b      	add	r3, r1
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f300 841e 	bgt.w	800cd10 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d8:	4b7b      	ldr	r3, [pc, #492]	; (800c6c8 <tcp_receive+0x884>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	f040 829a 	bne.w	800ca16 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c4e2:	4b7a      	ldr	r3, [pc, #488]	; (800c6cc <tcp_receive+0x888>)
 800c4e4:	891c      	ldrh	r4, [r3, #8]
 800c4e6:	4b79      	ldr	r3, [pc, #484]	; (800c6cc <tcp_receive+0x888>)
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	899b      	ldrh	r3, [r3, #12]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fa fe8b 	bl	800720a <lwip_htons>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 0303 	and.w	r3, r3, #3
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <tcp_receive+0x6c0>
 800c500:	2301      	movs	r3, #1
 800c502:	e000      	b.n	800c506 <tcp_receive+0x6c2>
 800c504:	2300      	movs	r3, #0
 800c506:	4423      	add	r3, r4
 800c508:	b29a      	uxth	r2, r3
 800c50a:	4b71      	ldr	r3, [pc, #452]	; (800c6d0 <tcp_receive+0x88c>)
 800c50c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c512:	4b6f      	ldr	r3, [pc, #444]	; (800c6d0 <tcp_receive+0x88c>)
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d275      	bcs.n	800c606 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c51a:	4b6c      	ldr	r3, [pc, #432]	; (800c6cc <tcp_receive+0x888>)
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	899b      	ldrh	r3, [r3, #12]
 800c520:	b29b      	uxth	r3, r3
 800c522:	4618      	mov	r0, r3
 800c524:	f7fa fe71 	bl	800720a <lwip_htons>
 800c528:	4603      	mov	r3, r0
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	f003 0301 	and.w	r3, r3, #1
 800c530:	2b00      	cmp	r3, #0
 800c532:	d01f      	beq.n	800c574 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c534:	4b65      	ldr	r3, [pc, #404]	; (800c6cc <tcp_receive+0x888>)
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	899b      	ldrh	r3, [r3, #12]
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	b21b      	sxth	r3, r3
 800c53e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c542:	b21c      	sxth	r4, r3
 800c544:	4b61      	ldr	r3, [pc, #388]	; (800c6cc <tcp_receive+0x888>)
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	899b      	ldrh	r3, [r3, #12]
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fa fe5c 	bl	800720a <lwip_htons>
 800c552:	4603      	mov	r3, r0
 800c554:	b2db      	uxtb	r3, r3
 800c556:	b29b      	uxth	r3, r3
 800c558:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fa fe53 	bl	800720a <lwip_htons>
 800c564:	4603      	mov	r3, r0
 800c566:	b21b      	sxth	r3, r3
 800c568:	4323      	orrs	r3, r4
 800c56a:	b21a      	sxth	r2, r3
 800c56c:	4b57      	ldr	r3, [pc, #348]	; (800c6cc <tcp_receive+0x888>)
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	b292      	uxth	r2, r2
 800c572:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c578:	4b54      	ldr	r3, [pc, #336]	; (800c6cc <tcp_receive+0x888>)
 800c57a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c57c:	4b53      	ldr	r3, [pc, #332]	; (800c6cc <tcp_receive+0x888>)
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	899b      	ldrh	r3, [r3, #12]
 800c582:	b29b      	uxth	r3, r3
 800c584:	4618      	mov	r0, r3
 800c586:	f7fa fe40 	bl	800720a <lwip_htons>
 800c58a:	4603      	mov	r3, r0
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	f003 0302 	and.w	r3, r3, #2
 800c592:	2b00      	cmp	r3, #0
 800c594:	d005      	beq.n	800c5a2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800c596:	4b4d      	ldr	r3, [pc, #308]	; (800c6cc <tcp_receive+0x888>)
 800c598:	891b      	ldrh	r3, [r3, #8]
 800c59a:	3b01      	subs	r3, #1
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	4b4b      	ldr	r3, [pc, #300]	; (800c6cc <tcp_receive+0x888>)
 800c5a0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c5a2:	4b4a      	ldr	r3, [pc, #296]	; (800c6cc <tcp_receive+0x888>)
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	4b49      	ldr	r3, [pc, #292]	; (800c6cc <tcp_receive+0x888>)
 800c5a8:	891b      	ldrh	r3, [r3, #8]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f7fb ff41 	bl	8008434 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c5b2:	4b46      	ldr	r3, [pc, #280]	; (800c6cc <tcp_receive+0x888>)
 800c5b4:	891c      	ldrh	r4, [r3, #8]
 800c5b6:	4b45      	ldr	r3, [pc, #276]	; (800c6cc <tcp_receive+0x888>)
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	899b      	ldrh	r3, [r3, #12]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fa fe23 	bl	800720a <lwip_htons>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	f003 0303 	and.w	r3, r3, #3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <tcp_receive+0x790>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e000      	b.n	800c5d6 <tcp_receive+0x792>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	4423      	add	r3, r4
 800c5d8:	b29a      	uxth	r2, r3
 800c5da:	4b3d      	ldr	r3, [pc, #244]	; (800c6d0 <tcp_receive+0x88c>)
 800c5dc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c5de:	4b3c      	ldr	r3, [pc, #240]	; (800c6d0 <tcp_receive+0x88c>)
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	4b38      	ldr	r3, [pc, #224]	; (800c6c8 <tcp_receive+0x884>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	441a      	add	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5f2:	440b      	add	r3, r1
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d006      	beq.n	800c606 <tcp_receive+0x7c2>
 800c5f8:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <tcp_receive+0x890>)
 800c5fa:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800c5fe:	4936      	ldr	r1, [pc, #216]	; (800c6d8 <tcp_receive+0x894>)
 800c600:	4836      	ldr	r0, [pc, #216]	; (800c6dc <tcp_receive+0x898>)
 800c602:	f005 fa6b 	bl	8011adc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 80e7 	beq.w	800c7de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c610:	4b2e      	ldr	r3, [pc, #184]	; (800c6cc <tcp_receive+0x888>)
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	899b      	ldrh	r3, [r3, #12]
 800c616:	b29b      	uxth	r3, r3
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fa fdf6 	bl	800720a <lwip_htons>
 800c61e:	4603      	mov	r3, r0
 800c620:	b2db      	uxtb	r3, r3
 800c622:	f003 0301 	and.w	r3, r3, #1
 800c626:	2b00      	cmp	r3, #0
 800c628:	d010      	beq.n	800c64c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c62a:	e00a      	b.n	800c642 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c630:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7fd fcb1 	bl	8009fa4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1f0      	bne.n	800c62c <tcp_receive+0x7e8>
 800c64a:	e0c8      	b.n	800c7de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c650:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c652:	e052      	b.n	800c6fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	899b      	ldrh	r3, [r3, #12]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fa fdd4 	bl	800720a <lwip_htons>
 800c662:	4603      	mov	r3, r0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	f003 0301 	and.w	r3, r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d03d      	beq.n	800c6ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c66e:	4b17      	ldr	r3, [pc, #92]	; (800c6cc <tcp_receive+0x888>)
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	899b      	ldrh	r3, [r3, #12]
 800c674:	b29b      	uxth	r3, r3
 800c676:	4618      	mov	r0, r3
 800c678:	f7fa fdc7 	bl	800720a <lwip_htons>
 800c67c:	4603      	mov	r3, r0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c684:	2b00      	cmp	r3, #0
 800c686:	d130      	bne.n	800c6ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c688:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <tcp_receive+0x888>)
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	899b      	ldrh	r3, [r3, #12]
 800c68e:	b29c      	uxth	r4, r3
 800c690:	2001      	movs	r0, #1
 800c692:	f7fa fdba 	bl	800720a <lwip_htons>
 800c696:	4603      	mov	r3, r0
 800c698:	461a      	mov	r2, r3
 800c69a:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <tcp_receive+0x888>)
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	4322      	orrs	r2, r4
 800c6a0:	b292      	uxth	r2, r2
 800c6a2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c6a4:	4b09      	ldr	r3, [pc, #36]	; (800c6cc <tcp_receive+0x888>)
 800c6a6:	891c      	ldrh	r4, [r3, #8]
 800c6a8:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <tcp_receive+0x888>)
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	899b      	ldrh	r3, [r3, #12]
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fa fdaa 	bl	800720a <lwip_htons>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	f003 0303 	and.w	r3, r3, #3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00e      	beq.n	800c6e0 <tcp_receive+0x89c>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e00d      	b.n	800c6e2 <tcp_receive+0x89e>
 800c6c6:	bf00      	nop
 800c6c8:	2000027c 	.word	0x2000027c
 800c6cc:	2000025c 	.word	0x2000025c
 800c6d0:	20000286 	.word	0x20000286
 800c6d4:	08015670 	.word	0x08015670
 800c6d8:	08015a18 	.word	0x08015a18
 800c6dc:	080156bc 	.word	0x080156bc
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	4423      	add	r3, r4
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	4b98      	ldr	r3, [pc, #608]	; (800c948 <tcp_receive+0xb04>)
 800c6e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c6f4:	6938      	ldr	r0, [r7, #16]
 800c6f6:	f7fd fc55 	bl	8009fa4 <tcp_seg_free>
            while (next &&
 800c6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00e      	beq.n	800c71e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c700:	4b91      	ldr	r3, [pc, #580]	; (800c948 <tcp_receive+0xb04>)
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	4b91      	ldr	r3, [pc, #580]	; (800c94c <tcp_receive+0xb08>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	441a      	add	r2, r3
 800c70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c714:	8909      	ldrh	r1, [r1, #8]
 800c716:	440b      	add	r3, r1
 800c718:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	da9a      	bge.n	800c654 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d059      	beq.n	800c7d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c724:	4b88      	ldr	r3, [pc, #544]	; (800c948 <tcp_receive+0xb04>)
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	4b88      	ldr	r3, [pc, #544]	; (800c94c <tcp_receive+0xb08>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	441a      	add	r2, r3
 800c730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dd4d      	ble.n	800c7d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	b29a      	uxth	r2, r3
 800c744:	4b81      	ldr	r3, [pc, #516]	; (800c94c <tcp_receive+0xb08>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	4b80      	ldr	r3, [pc, #512]	; (800c950 <tcp_receive+0xb0c>)
 800c750:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c752:	4b7f      	ldr	r3, [pc, #508]	; (800c950 <tcp_receive+0xb0c>)
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	899b      	ldrh	r3, [r3, #12]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fa fd55 	bl	800720a <lwip_htons>
 800c760:	4603      	mov	r3, r0
 800c762:	b2db      	uxtb	r3, r3
 800c764:	f003 0302 	and.w	r3, r3, #2
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d005      	beq.n	800c778 <tcp_receive+0x934>
                inseg.len -= 1;
 800c76c:	4b78      	ldr	r3, [pc, #480]	; (800c950 <tcp_receive+0xb0c>)
 800c76e:	891b      	ldrh	r3, [r3, #8]
 800c770:	3b01      	subs	r3, #1
 800c772:	b29a      	uxth	r2, r3
 800c774:	4b76      	ldr	r3, [pc, #472]	; (800c950 <tcp_receive+0xb0c>)
 800c776:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c778:	4b75      	ldr	r3, [pc, #468]	; (800c950 <tcp_receive+0xb0c>)
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	4b74      	ldr	r3, [pc, #464]	; (800c950 <tcp_receive+0xb0c>)
 800c77e:	891b      	ldrh	r3, [r3, #8]
 800c780:	4619      	mov	r1, r3
 800c782:	4610      	mov	r0, r2
 800c784:	f7fb fe56 	bl	8008434 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c788:	4b71      	ldr	r3, [pc, #452]	; (800c950 <tcp_receive+0xb0c>)
 800c78a:	891c      	ldrh	r4, [r3, #8]
 800c78c:	4b70      	ldr	r3, [pc, #448]	; (800c950 <tcp_receive+0xb0c>)
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	899b      	ldrh	r3, [r3, #12]
 800c792:	b29b      	uxth	r3, r3
 800c794:	4618      	mov	r0, r3
 800c796:	f7fa fd38 	bl	800720a <lwip_htons>
 800c79a:	4603      	mov	r3, r0
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	f003 0303 	and.w	r3, r3, #3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d001      	beq.n	800c7aa <tcp_receive+0x966>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e000      	b.n	800c7ac <tcp_receive+0x968>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	4423      	add	r3, r4
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	4b65      	ldr	r3, [pc, #404]	; (800c948 <tcp_receive+0xb04>)
 800c7b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c7b4:	4b64      	ldr	r3, [pc, #400]	; (800c948 <tcp_receive+0xb04>)
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	4b64      	ldr	r3, [pc, #400]	; (800c94c <tcp_receive+0xb08>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	441a      	add	r2, r3
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d006      	beq.n	800c7d8 <tcp_receive+0x994>
 800c7ca:	4b62      	ldr	r3, [pc, #392]	; (800c954 <tcp_receive+0xb10>)
 800c7cc:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800c7d0:	4961      	ldr	r1, [pc, #388]	; (800c958 <tcp_receive+0xb14>)
 800c7d2:	4862      	ldr	r0, [pc, #392]	; (800c95c <tcp_receive+0xb18>)
 800c7d4:	f005 f982 	bl	8011adc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c7de:	4b5a      	ldr	r3, [pc, #360]	; (800c948 <tcp_receive+0xb04>)
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	4b59      	ldr	r3, [pc, #356]	; (800c94c <tcp_receive+0xb08>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	441a      	add	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7f2:	4b55      	ldr	r3, [pc, #340]	; (800c948 <tcp_receive+0xb04>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d206      	bcs.n	800c808 <tcp_receive+0x9c4>
 800c7fa:	4b56      	ldr	r3, [pc, #344]	; (800c954 <tcp_receive+0xb10>)
 800c7fc:	f240 6207 	movw	r2, #1543	; 0x607
 800c800:	4957      	ldr	r1, [pc, #348]	; (800c960 <tcp_receive+0xb1c>)
 800c802:	4856      	ldr	r0, [pc, #344]	; (800c95c <tcp_receive+0xb18>)
 800c804:	f005 f96a 	bl	8011adc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c80c:	4b4e      	ldr	r3, [pc, #312]	; (800c948 <tcp_receive+0xb04>)
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	b29a      	uxth	r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fc fea1 	bl	8009560 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c81e:	4b4c      	ldr	r3, [pc, #304]	; (800c950 <tcp_receive+0xb0c>)
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	891b      	ldrh	r3, [r3, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d006      	beq.n	800c836 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c828:	4b49      	ldr	r3, [pc, #292]	; (800c950 <tcp_receive+0xb0c>)
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	4a4d      	ldr	r2, [pc, #308]	; (800c964 <tcp_receive+0xb20>)
 800c82e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c830:	4b47      	ldr	r3, [pc, #284]	; (800c950 <tcp_receive+0xb0c>)
 800c832:	2200      	movs	r2, #0
 800c834:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c836:	4b46      	ldr	r3, [pc, #280]	; (800c950 <tcp_receive+0xb0c>)
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	899b      	ldrh	r3, [r3, #12]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fa fce3 	bl	800720a <lwip_htons>
 800c844:	4603      	mov	r3, r0
 800c846:	b2db      	uxtb	r3, r3
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f000 80b8 	beq.w	800c9c2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c852:	4b45      	ldr	r3, [pc, #276]	; (800c968 <tcp_receive+0xb24>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	f043 0320 	orr.w	r3, r3, #32
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	4b42      	ldr	r3, [pc, #264]	; (800c968 <tcp_receive+0xb24>)
 800c85e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c860:	e0af      	b.n	800c9c2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c866:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	4a36      	ldr	r2, [pc, #216]	; (800c94c <tcp_receive+0xb08>)
 800c872:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	891b      	ldrh	r3, [r3, #8]
 800c878:	461c      	mov	r4, r3
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	899b      	ldrh	r3, [r3, #12]
 800c880:	b29b      	uxth	r3, r3
 800c882:	4618      	mov	r0, r3
 800c884:	f7fa fcc1 	bl	800720a <lwip_htons>
 800c888:	4603      	mov	r3, r0
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0303 	and.w	r3, r3, #3
 800c890:	2b00      	cmp	r3, #0
 800c892:	d001      	beq.n	800c898 <tcp_receive+0xa54>
 800c894:	2301      	movs	r3, #1
 800c896:	e000      	b.n	800c89a <tcp_receive+0xa56>
 800c898:	2300      	movs	r3, #0
 800c89a:	191a      	adds	r2, r3, r4
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	441a      	add	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8aa:	461c      	mov	r4, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	891b      	ldrh	r3, [r3, #8]
 800c8b0:	461d      	mov	r5, r3
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	899b      	ldrh	r3, [r3, #12]
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fa fca5 	bl	800720a <lwip_htons>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	f003 0303 	and.w	r3, r3, #3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <tcp_receive+0xa8c>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e000      	b.n	800c8d2 <tcp_receive+0xa8e>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	442b      	add	r3, r5
 800c8d4:	429c      	cmp	r4, r3
 800c8d6:	d206      	bcs.n	800c8e6 <tcp_receive+0xaa2>
 800c8d8:	4b1e      	ldr	r3, [pc, #120]	; (800c954 <tcp_receive+0xb10>)
 800c8da:	f240 622c 	movw	r2, #1580	; 0x62c
 800c8de:	4923      	ldr	r1, [pc, #140]	; (800c96c <tcp_receive+0xb28>)
 800c8e0:	481e      	ldr	r0, [pc, #120]	; (800c95c <tcp_receive+0xb18>)
 800c8e2:	f005 f8fb 	bl	8011adc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	891b      	ldrh	r3, [r3, #8]
 800c8ea:	461c      	mov	r4, r3
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	899b      	ldrh	r3, [r3, #12]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fa fc88 	bl	800720a <lwip_htons>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 0303 	and.w	r3, r3, #3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <tcp_receive+0xac6>
 800c906:	2301      	movs	r3, #1
 800c908:	e000      	b.n	800c90c <tcp_receive+0xac8>
 800c90a:	2300      	movs	r3, #0
 800c90c:	1919      	adds	r1, r3, r4
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c912:	b28b      	uxth	r3, r1
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7fc fe1f 	bl	8009560 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	891b      	ldrh	r3, [r3, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d028      	beq.n	800c97e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c92c:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <tcp_receive+0xb20>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01d      	beq.n	800c970 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c934:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <tcp_receive+0xb20>)
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	4619      	mov	r1, r3
 800c93e:	4610      	mov	r0, r2
 800c940:	f7fb ffc0 	bl	80088c4 <pbuf_cat>
 800c944:	e018      	b.n	800c978 <tcp_receive+0xb34>
 800c946:	bf00      	nop
 800c948:	20000286 	.word	0x20000286
 800c94c:	2000027c 	.word	0x2000027c
 800c950:	2000025c 	.word	0x2000025c
 800c954:	08015670 	.word	0x08015670
 800c958:	08015a50 	.word	0x08015a50
 800c95c:	080156bc 	.word	0x080156bc
 800c960:	08015a8c 	.word	0x08015a8c
 800c964:	2000028c 	.word	0x2000028c
 800c968:	20000289 	.word	0x20000289
 800c96c:	08015aac 	.word	0x08015aac
            } else {
              recv_data = cseg->p;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	4a70      	ldr	r2, [pc, #448]	; (800cb38 <tcp_receive+0xcf4>)
 800c976:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	2200      	movs	r2, #0
 800c97c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	899b      	ldrh	r3, [r3, #12]
 800c984:	b29b      	uxth	r3, r3
 800c986:	4618      	mov	r0, r3
 800c988:	f7fa fc3f 	bl	800720a <lwip_htons>
 800c98c:	4603      	mov	r3, r0
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00d      	beq.n	800c9b4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c998:	4b68      	ldr	r3, [pc, #416]	; (800cb3c <tcp_receive+0xcf8>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	f043 0320 	orr.w	r3, r3, #32
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	4b66      	ldr	r3, [pc, #408]	; (800cb3c <tcp_receive+0xcf8>)
 800c9a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	7d1b      	ldrb	r3, [r3, #20]
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	d102      	bne.n	800c9b4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2207      	movs	r2, #7
 800c9b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c9bc:	68b8      	ldr	r0, [r7, #8]
 800c9be:	f7fd faf1 	bl	8009fa4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d008      	beq.n	800c9dc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	f43f af43 	beq.w	800c862 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	8b5b      	ldrh	r3, [r3, #26]
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00e      	beq.n	800ca06 <tcp_receive+0xbc2>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	8b5b      	ldrh	r3, [r3, #26]
 800c9ec:	f023 0301 	bic.w	r3, r3, #1
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	835a      	strh	r2, [r3, #26]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	8b5b      	ldrh	r3, [r3, #26]
 800c9fa:	f043 0302 	orr.w	r3, r3, #2
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ca04:	e188      	b.n	800cd18 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8b5b      	ldrh	r3, [r3, #26]
 800ca0a:	f043 0301 	orr.w	r3, r3, #1
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ca14:	e180      	b.n	800cd18 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d106      	bne.n	800ca2c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ca1e:	4848      	ldr	r0, [pc, #288]	; (800cb40 <tcp_receive+0xcfc>)
 800ca20:	f7fd faf6 	bl	800a010 <tcp_seg_copy>
 800ca24:	4602      	mov	r2, r0
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	675a      	str	r2, [r3, #116]	; 0x74
 800ca2a:	e16d      	b.n	800cd08 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca36:	e157      	b.n	800cce8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	4b41      	ldr	r3, [pc, #260]	; (800cb44 <tcp_receive+0xd00>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d11d      	bne.n	800ca82 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ca46:	4b3e      	ldr	r3, [pc, #248]	; (800cb40 <tcp_receive+0xcfc>)
 800ca48:	891a      	ldrh	r2, [r3, #8]
 800ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4c:	891b      	ldrh	r3, [r3, #8]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	f240 814f 	bls.w	800ccf2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca54:	483a      	ldr	r0, [pc, #232]	; (800cb40 <tcp_receive+0xcfc>)
 800ca56:	f7fd fadb 	bl	800a010 <tcp_seg_copy>
 800ca5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f000 8149 	beq.w	800ccf6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ca64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ca6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	e002      	b.n	800ca78 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ca78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca7a:	6978      	ldr	r0, [r7, #20]
 800ca7c:	f7ff f8de 	bl	800bc3c <tcp_oos_insert_segment>
                }
                break;
 800ca80:	e139      	b.n	800ccf6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ca82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d117      	bne.n	800cab8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ca88:	4b2e      	ldr	r3, [pc, #184]	; (800cb44 <tcp_receive+0xd00>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	da57      	bge.n	800cb48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca98:	4829      	ldr	r0, [pc, #164]	; (800cb40 <tcp_receive+0xcfc>)
 800ca9a:	f7fd fab9 	bl	800a010 <tcp_seg_copy>
 800ca9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 8129 	beq.w	800ccfa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800caae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cab0:	69b8      	ldr	r0, [r7, #24]
 800cab2:	f7ff f8c3 	bl	800bc3c <tcp_oos_insert_segment>
                  }
                  break;
 800cab6:	e120      	b.n	800ccfa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cab8:	4b22      	ldr	r3, [pc, #136]	; (800cb44 <tcp_receive+0xd00>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	3b01      	subs	r3, #1
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	db3e      	blt.n	800cb48 <tcp_receive+0xd04>
 800caca:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <tcp_receive+0xd00>)
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	3301      	adds	r3, #1
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dc35      	bgt.n	800cb48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cadc:	4818      	ldr	r0, [pc, #96]	; (800cb40 <tcp_receive+0xcfc>)
 800cade:	f7fd fa97 	bl	800a010 <tcp_seg_copy>
 800cae2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 8109 	beq.w	800ccfe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800caec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caf4:	8912      	ldrh	r2, [r2, #8]
 800caf6:	441a      	add	r2, r3
 800caf8:	4b12      	ldr	r3, [pc, #72]	; (800cb44 <tcp_receive+0xd00>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	dd12      	ble.n	800cb28 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cb02:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <tcp_receive+0xd00>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1e:	891b      	ldrh	r3, [r3, #8]
 800cb20:	4619      	mov	r1, r3
 800cb22:	4610      	mov	r0, r2
 800cb24:	f7fb fc86 	bl	8008434 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cb2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb30:	69f8      	ldr	r0, [r7, #28]
 800cb32:	f7ff f883 	bl	800bc3c <tcp_oos_insert_segment>
                  }
                  break;
 800cb36:	e0e2      	b.n	800ccfe <tcp_receive+0xeba>
 800cb38:	2000028c 	.word	0x2000028c
 800cb3c:	20000289 	.word	0x20000289
 800cb40:	2000025c 	.word	0x2000025c
 800cb44:	2000027c 	.word	0x2000027c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f040 80c6 	bne.w	800cce2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cb56:	4b80      	ldr	r3, [pc, #512]	; (800cd58 <tcp_receive+0xf14>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f340 80bd 	ble.w	800cce2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	899b      	ldrh	r3, [r3, #12]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fa fb4a 	bl	800720a <lwip_htons>
 800cb76:	4603      	mov	r3, r0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	f003 0301 	and.w	r3, r3, #1
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f040 80bf 	bne.w	800cd02 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cb84:	4875      	ldr	r0, [pc, #468]	; (800cd5c <tcp_receive+0xf18>)
 800cb86:	f7fd fa43 	bl	800a010 <tcp_seg_copy>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 80b6 	beq.w	800cd06 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cba2:	8912      	ldrh	r2, [r2, #8]
 800cba4:	441a      	add	r2, r3
 800cba6:	4b6c      	ldr	r3, [pc, #432]	; (800cd58 <tcp_receive+0xf14>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	dd12      	ble.n	800cbd6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cbb0:	4b69      	ldr	r3, [pc, #420]	; (800cd58 <tcp_receive+0xf14>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	891b      	ldrh	r3, [r3, #8]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	f7fb fc2f 	bl	8008434 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cbd6:	4b62      	ldr	r3, [pc, #392]	; (800cd60 <tcp_receive+0xf1c>)
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4b5e      	ldr	r3, [pc, #376]	; (800cd58 <tcp_receive+0xf14>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	441a      	add	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbea:	440b      	add	r3, r1
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f340 8089 	ble.w	800cd06 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	899b      	ldrh	r3, [r3, #12]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fa fb03 	bl	800720a <lwip_htons>
 800cc04:	4603      	mov	r3, r0
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d022      	beq.n	800cc56 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	899b      	ldrh	r3, [r3, #12]
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	b21b      	sxth	r3, r3
 800cc1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cc20:	b21c      	sxth	r4, r3
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	899b      	ldrh	r3, [r3, #12]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fa faec 	bl	800720a <lwip_htons>
 800cc32:	4603      	mov	r3, r0
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fa fae3 	bl	800720a <lwip_htons>
 800cc44:	4603      	mov	r3, r0
 800cc46:	b21b      	sxth	r3, r3
 800cc48:	4323      	orrs	r3, r4
 800cc4a:	b21a      	sxth	r2, r3
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	b292      	uxth	r2, r2
 800cc54:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc60:	4413      	add	r3, r2
 800cc62:	b299      	uxth	r1, r3
 800cc64:	4b3c      	ldr	r3, [pc, #240]	; (800cd58 <tcp_receive+0xf14>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	1a8a      	subs	r2, r1, r2
 800cc70:	b292      	uxth	r2, r2
 800cc72:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685a      	ldr	r2, [r3, #4]
 800cc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	891b      	ldrh	r3, [r3, #8]
 800cc80:	4619      	mov	r1, r3
 800cc82:	4610      	mov	r0, r2
 800cc84:	f7fb fbd6 	bl	8008434 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	891c      	ldrh	r4, [r3, #8]
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	899b      	ldrh	r3, [r3, #12]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fa fab6 	bl	800720a <lwip_htons>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	f003 0303 	and.w	r3, r3, #3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <tcp_receive+0xe6a>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e000      	b.n	800ccb0 <tcp_receive+0xe6c>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4423      	add	r3, r4
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	4b2a      	ldr	r3, [pc, #168]	; (800cd60 <tcp_receive+0xf1c>)
 800ccb6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ccb8:	4b29      	ldr	r3, [pc, #164]	; (800cd60 <tcp_receive+0xf1c>)
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4b26      	ldr	r3, [pc, #152]	; (800cd58 <tcp_receive+0xf14>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	6879      	ldr	r1, [r7, #4]
 800ccca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cccc:	440b      	add	r3, r1
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d019      	beq.n	800cd06 <tcp_receive+0xec2>
 800ccd2:	4b24      	ldr	r3, [pc, #144]	; (800cd64 <tcp_receive+0xf20>)
 800ccd4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ccd8:	4923      	ldr	r1, [pc, #140]	; (800cd68 <tcp_receive+0xf24>)
 800ccda:	4824      	ldr	r0, [pc, #144]	; (800cd6c <tcp_receive+0xf28>)
 800ccdc:	f004 fefe 	bl	8011adc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cce0:	e011      	b.n	800cd06 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f47f aea4 	bne.w	800ca38 <tcp_receive+0xbf4>
 800ccf0:	e00a      	b.n	800cd08 <tcp_receive+0xec4>
                break;
 800ccf2:	bf00      	nop
 800ccf4:	e008      	b.n	800cd08 <tcp_receive+0xec4>
                break;
 800ccf6:	bf00      	nop
 800ccf8:	e006      	b.n	800cd08 <tcp_receive+0xec4>
                  break;
 800ccfa:	bf00      	nop
 800ccfc:	e004      	b.n	800cd08 <tcp_receive+0xec4>
                  break;
 800ccfe:	bf00      	nop
 800cd00:	e002      	b.n	800cd08 <tcp_receive+0xec4>
                  break;
 800cd02:	bf00      	nop
 800cd04:	e000      	b.n	800cd08 <tcp_receive+0xec4>
                break;
 800cd06:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 fe9d 	bl	800ea48 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cd0e:	e003      	b.n	800cd18 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f001 fe99 	bl	800ea48 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cd16:	e01a      	b.n	800cd4e <tcp_receive+0xf0a>
 800cd18:	e019      	b.n	800cd4e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cd1a:	4b0f      	ldr	r3, [pc, #60]	; (800cd58 <tcp_receive+0xf14>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	db0a      	blt.n	800cd3e <tcp_receive+0xefa>
 800cd28:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <tcp_receive+0xf14>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	6879      	ldr	r1, [r7, #4]
 800cd32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd34:	440b      	add	r3, r1
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	3301      	adds	r3, #1
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dd07      	ble.n	800cd4e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8b5b      	ldrh	r3, [r3, #26]
 800cd42:	f043 0302 	orr.w	r3, r3, #2
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cd4c:	e7ff      	b.n	800cd4e <tcp_receive+0xf0a>
 800cd4e:	bf00      	nop
 800cd50:	3750      	adds	r7, #80	; 0x50
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bdb0      	pop	{r4, r5, r7, pc}
 800cd56:	bf00      	nop
 800cd58:	2000027c 	.word	0x2000027c
 800cd5c:	2000025c 	.word	0x2000025c
 800cd60:	20000286 	.word	0x20000286
 800cd64:	08015670 	.word	0x08015670
 800cd68:	08015a18 	.word	0x08015a18
 800cd6c:	080156bc 	.word	0x080156bc

0800cd70 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cd76:	4b15      	ldr	r3, [pc, #84]	; (800cdcc <tcp_get_next_optbyte+0x5c>)
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	b291      	uxth	r1, r2
 800cd7e:	4a13      	ldr	r2, [pc, #76]	; (800cdcc <tcp_get_next_optbyte+0x5c>)
 800cd80:	8011      	strh	r1, [r2, #0]
 800cd82:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd84:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <tcp_get_next_optbyte+0x60>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <tcp_get_next_optbyte+0x26>
 800cd8c:	4b11      	ldr	r3, [pc, #68]	; (800cdd4 <tcp_get_next_optbyte+0x64>)
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	88fa      	ldrh	r2, [r7, #6]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d208      	bcs.n	800cda8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cd96:	4b10      	ldr	r3, [pc, #64]	; (800cdd8 <tcp_get_next_optbyte+0x68>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	3314      	adds	r3, #20
 800cd9c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cd9e:	88fb      	ldrh	r3, [r7, #6]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	4413      	add	r3, r2
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	e00b      	b.n	800cdc0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cda8:	88fb      	ldrh	r3, [r7, #6]
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <tcp_get_next_optbyte+0x64>)
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cdb6:	4b06      	ldr	r3, [pc, #24]	; (800cdd0 <tcp_get_next_optbyte+0x60>)
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	797b      	ldrb	r3, [r7, #5]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	20000278 	.word	0x20000278
 800cdd0:	20000274 	.word	0x20000274
 800cdd4:	20000272 	.word	0x20000272
 800cdd8:	2000026c 	.word	0x2000026c

0800cddc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d106      	bne.n	800cdf8 <tcp_parseopt+0x1c>
 800cdea:	4b31      	ldr	r3, [pc, #196]	; (800ceb0 <tcp_parseopt+0xd4>)
 800cdec:	f240 727d 	movw	r2, #1917	; 0x77d
 800cdf0:	4930      	ldr	r1, [pc, #192]	; (800ceb4 <tcp_parseopt+0xd8>)
 800cdf2:	4831      	ldr	r0, [pc, #196]	; (800ceb8 <tcp_parseopt+0xdc>)
 800cdf4:	f004 fe72 	bl	8011adc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cdf8:	4b30      	ldr	r3, [pc, #192]	; (800cebc <tcp_parseopt+0xe0>)
 800cdfa:	881b      	ldrh	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d053      	beq.n	800cea8 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ce00:	4b2f      	ldr	r3, [pc, #188]	; (800cec0 <tcp_parseopt+0xe4>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	801a      	strh	r2, [r3, #0]
 800ce06:	e043      	b.n	800ce90 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800ce08:	f7ff ffb2 	bl	800cd70 <tcp_get_next_optbyte>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d03c      	beq.n	800ce90 <tcp_parseopt+0xb4>
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d002      	beq.n	800ce20 <tcp_parseopt+0x44>
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d03f      	beq.n	800ce9e <tcp_parseopt+0xc2>
 800ce1e:	e026      	b.n	800ce6e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ce20:	f7ff ffa6 	bl	800cd70 <tcp_get_next_optbyte>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d13b      	bne.n	800cea2 <tcp_parseopt+0xc6>
 800ce2a:	4b25      	ldr	r3, [pc, #148]	; (800cec0 <tcp_parseopt+0xe4>)
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	3302      	adds	r3, #2
 800ce30:	4a22      	ldr	r2, [pc, #136]	; (800cebc <tcp_parseopt+0xe0>)
 800ce32:	8812      	ldrh	r2, [r2, #0]
 800ce34:	4293      	cmp	r3, r2
 800ce36:	dc34      	bgt.n	800cea2 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce38:	f7ff ff9a 	bl	800cd70 <tcp_get_next_optbyte>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	021b      	lsls	r3, r3, #8
 800ce42:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ce44:	f7ff ff94 	bl	800cd70 <tcp_get_next_optbyte>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	89bb      	ldrh	r3, [r7, #12]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ce52:	89bb      	ldrh	r3, [r7, #12]
 800ce54:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce58:	d804      	bhi.n	800ce64 <tcp_parseopt+0x88>
 800ce5a:	89bb      	ldrh	r3, [r7, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d001      	beq.n	800ce64 <tcp_parseopt+0x88>
 800ce60:	89ba      	ldrh	r2, [r7, #12]
 800ce62:	e001      	b.n	800ce68 <tcp_parseopt+0x8c>
 800ce64:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ce6c:	e010      	b.n	800ce90 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ce6e:	f7ff ff7f 	bl	800cd70 <tcp_get_next_optbyte>
 800ce72:	4603      	mov	r3, r0
 800ce74:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ce76:	7afb      	ldrb	r3, [r7, #11]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d914      	bls.n	800cea6 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ce7c:	7afb      	ldrb	r3, [r7, #11]
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	4b0f      	ldr	r3, [pc, #60]	; (800cec0 <tcp_parseopt+0xe4>)
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	4413      	add	r3, r2
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	3b02      	subs	r3, #2
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	4b0c      	ldr	r3, [pc, #48]	; (800cec0 <tcp_parseopt+0xe4>)
 800ce8e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ce90:	4b0b      	ldr	r3, [pc, #44]	; (800cec0 <tcp_parseopt+0xe4>)
 800ce92:	881a      	ldrh	r2, [r3, #0]
 800ce94:	4b09      	ldr	r3, [pc, #36]	; (800cebc <tcp_parseopt+0xe0>)
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d3b5      	bcc.n	800ce08 <tcp_parseopt+0x2c>
 800ce9c:	e004      	b.n	800cea8 <tcp_parseopt+0xcc>
          return;
 800ce9e:	bf00      	nop
 800cea0:	e002      	b.n	800cea8 <tcp_parseopt+0xcc>
            return;
 800cea2:	bf00      	nop
 800cea4:	e000      	b.n	800cea8 <tcp_parseopt+0xcc>
            return;
 800cea6:	bf00      	nop
      }
    }
  }
}
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	08015670 	.word	0x08015670
 800ceb4:	08015ad4 	.word	0x08015ad4
 800ceb8:	080156bc 	.word	0x080156bc
 800cebc:	20000270 	.word	0x20000270
 800cec0:	20000278 	.word	0x20000278

0800cec4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cec4:	b480      	push	{r7}
 800cec6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cec8:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <tcp_trigger_input_pcb_close+0x1c>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	f043 0310 	orr.w	r3, r3, #16
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	4b03      	ldr	r3, [pc, #12]	; (800cee0 <tcp_trigger_input_pcb_close+0x1c>)
 800ced4:	701a      	strb	r2, [r3, #0]
}
 800ced6:	bf00      	nop
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	20000289 	.word	0x20000289

0800cee4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <tcp_route+0x28>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	7a1b      	ldrb	r3, [r3, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d006      	beq.n	800cf0c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	7a1b      	ldrb	r3, [r3, #8]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fb f8c0 	bl	8008088 <netif_get_by_index>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	e003      	b.n	800cf14 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f003 fae7 	bl	80104e0 <ip4_route>
 800cf12:	4603      	mov	r3, r0
  }
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cf1c:	b590      	push	{r4, r7, lr}
 800cf1e:	b087      	sub	sp, #28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d105      	bne.n	800cf3e <tcp_create_segment+0x22>
 800cf32:	4b44      	ldr	r3, [pc, #272]	; (800d044 <tcp_create_segment+0x128>)
 800cf34:	22a3      	movs	r2, #163	; 0xa3
 800cf36:	4944      	ldr	r1, [pc, #272]	; (800d048 <tcp_create_segment+0x12c>)
 800cf38:	4844      	ldr	r0, [pc, #272]	; (800d04c <tcp_create_segment+0x130>)
 800cf3a:	f004 fdcf 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d105      	bne.n	800cf50 <tcp_create_segment+0x34>
 800cf44:	4b3f      	ldr	r3, [pc, #252]	; (800d044 <tcp_create_segment+0x128>)
 800cf46:	22a4      	movs	r2, #164	; 0xa4
 800cf48:	4941      	ldr	r1, [pc, #260]	; (800d050 <tcp_create_segment+0x134>)
 800cf4a:	4840      	ldr	r0, [pc, #256]	; (800d04c <tcp_create_segment+0x130>)
 800cf4c:	f004 fdc6 	bl	8011adc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	f003 0304 	and.w	r3, r3, #4
 800cf5c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cf5e:	2003      	movs	r0, #3
 800cf60:	f7fa fda8 	bl	8007ab4 <memp_malloc>
 800cf64:	6138      	str	r0, [r7, #16]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d104      	bne.n	800cf76 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cf6c:	68b8      	ldr	r0, [r7, #8]
 800cf6e:	f7fb fbe7 	bl	8008740 <pbuf_free>
    return NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e061      	b.n	800d03a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cf7c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	2200      	movs	r2, #0
 800cf82:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	891a      	ldrh	r2, [r3, #8]
 800cf8e:	7dfb      	ldrb	r3, [r7, #23]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d205      	bcs.n	800cfa2 <tcp_create_segment+0x86>
 800cf96:	4b2b      	ldr	r3, [pc, #172]	; (800d044 <tcp_create_segment+0x128>)
 800cf98:	22b0      	movs	r2, #176	; 0xb0
 800cf9a:	492e      	ldr	r1, [pc, #184]	; (800d054 <tcp_create_segment+0x138>)
 800cf9c:	482b      	ldr	r0, [pc, #172]	; (800d04c <tcp_create_segment+0x130>)
 800cf9e:	f004 fd9d 	bl	8011adc <iprintf>
  seg->len = p->tot_len - optlen;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	891a      	ldrh	r2, [r3, #8]
 800cfa6:	7dfb      	ldrb	r3, [r7, #23]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cfb2:	2114      	movs	r1, #20
 800cfb4:	68b8      	ldr	r0, [r7, #8]
 800cfb6:	f7fb fb2d 	bl	8008614 <pbuf_add_header>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d004      	beq.n	800cfca <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cfc0:	6938      	ldr	r0, [r7, #16]
 800cfc2:	f7fc ffef 	bl	8009fa4 <tcp_seg_free>
    return NULL;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e037      	b.n	800d03a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	8ada      	ldrh	r2, [r3, #22]
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	68dc      	ldr	r4, [r3, #12]
 800cfdc:	4610      	mov	r0, r2
 800cfde:	f7fa f914 	bl	800720a <lwip_htons>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	8b1a      	ldrh	r2, [r3, #24]
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	68dc      	ldr	r4, [r3, #12]
 800cfee:	4610      	mov	r0, r2
 800cff0:	f7fa f90b 	bl	800720a <lwip_htons>
 800cff4:	4603      	mov	r3, r0
 800cff6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	68dc      	ldr	r4, [r3, #12]
 800cffc:	6838      	ldr	r0, [r7, #0]
 800cffe:	f7fa f919 	bl	8007234 <lwip_htonl>
 800d002:	4603      	mov	r3, r0
 800d004:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d006:	7dfb      	ldrb	r3, [r7, #23]
 800d008:	089b      	lsrs	r3, r3, #2
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	3305      	adds	r3, #5
 800d010:	b29b      	uxth	r3, r3
 800d012:	031b      	lsls	r3, r3, #12
 800d014:	b29a      	uxth	r2, r3
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	4313      	orrs	r3, r2
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	68dc      	ldr	r4, [r3, #12]
 800d022:	4610      	mov	r0, r2
 800d024:	f7fa f8f1 	bl	800720a <lwip_htons>
 800d028:	4603      	mov	r3, r0
 800d02a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	749a      	strb	r2, [r3, #18]
 800d034:	2200      	movs	r2, #0
 800d036:	74da      	strb	r2, [r3, #19]
  return seg;
 800d038:	693b      	ldr	r3, [r7, #16]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	371c      	adds	r7, #28
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd90      	pop	{r4, r7, pc}
 800d042:	bf00      	nop
 800d044:	08015af0 	.word	0x08015af0
 800d048:	08015b24 	.word	0x08015b24
 800d04c:	08015b44 	.word	0x08015b44
 800d050:	08015b6c 	.word	0x08015b6c
 800d054:	08015b90 	.word	0x08015b90

0800d058 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	607b      	str	r3, [r7, #4]
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
 800d064:	460b      	mov	r3, r1
 800d066:	81bb      	strh	r3, [r7, #12]
 800d068:	4613      	mov	r3, r2
 800d06a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d06c:	89bb      	ldrh	r3, [r7, #12]
 800d06e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d105      	bne.n	800d082 <tcp_pbuf_prealloc+0x2a>
 800d076:	4b30      	ldr	r3, [pc, #192]	; (800d138 <tcp_pbuf_prealloc+0xe0>)
 800d078:	22e8      	movs	r2, #232	; 0xe8
 800d07a:	4930      	ldr	r1, [pc, #192]	; (800d13c <tcp_pbuf_prealloc+0xe4>)
 800d07c:	4830      	ldr	r0, [pc, #192]	; (800d140 <tcp_pbuf_prealloc+0xe8>)
 800d07e:	f004 fd2d 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d105      	bne.n	800d094 <tcp_pbuf_prealloc+0x3c>
 800d088:	4b2b      	ldr	r3, [pc, #172]	; (800d138 <tcp_pbuf_prealloc+0xe0>)
 800d08a:	22e9      	movs	r2, #233	; 0xe9
 800d08c:	492d      	ldr	r1, [pc, #180]	; (800d144 <tcp_pbuf_prealloc+0xec>)
 800d08e:	482c      	ldr	r0, [pc, #176]	; (800d140 <tcp_pbuf_prealloc+0xe8>)
 800d090:	f004 fd24 	bl	8011adc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d094:	89ba      	ldrh	r2, [r7, #12]
 800d096:	897b      	ldrh	r3, [r7, #10]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d221      	bcs.n	800d0e0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d09c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0a0:	f003 0302 	and.w	r3, r3, #2
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d111      	bne.n	800d0cc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	8b5b      	ldrh	r3, [r3, #26]
 800d0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d115      	bne.n	800d0e0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d0b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d007      	beq.n	800d0cc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d103      	bne.n	800d0cc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d009      	beq.n	800d0e0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d0cc:	89bb      	ldrh	r3, [r7, #12]
 800d0ce:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d0d2:	f023 0203 	bic.w	r2, r3, #3
 800d0d6:	897b      	ldrh	r3, [r7, #10]
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	bf28      	it	cs
 800d0dc:	4613      	movcs	r3, r2
 800d0de:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d0e0:	8af9      	ldrh	r1, [r7, #22]
 800d0e2:	7bfb      	ldrb	r3, [r7, #15]
 800d0e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fb f849 	bl	8008180 <pbuf_alloc>
 800d0ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e019      	b.n	800d12e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d006      	beq.n	800d110 <tcp_pbuf_prealloc+0xb8>
 800d102:	4b0d      	ldr	r3, [pc, #52]	; (800d138 <tcp_pbuf_prealloc+0xe0>)
 800d104:	f240 120b 	movw	r2, #267	; 0x10b
 800d108:	490f      	ldr	r1, [pc, #60]	; (800d148 <tcp_pbuf_prealloc+0xf0>)
 800d10a:	480d      	ldr	r0, [pc, #52]	; (800d140 <tcp_pbuf_prealloc+0xe8>)
 800d10c:	f004 fce6 	bl	8011adc <iprintf>
  *oversize = p->len - length;
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	895a      	ldrh	r2, [r3, #10]
 800d114:	89bb      	ldrh	r3, [r7, #12]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	89ba      	ldrh	r2, [r7, #12]
 800d122:	811a      	strh	r2, [r3, #8]
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	891a      	ldrh	r2, [r3, #8]
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	815a      	strh	r2, [r3, #10]
  return p;
 800d12c:	693b      	ldr	r3, [r7, #16]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	08015af0 	.word	0x08015af0
 800d13c:	08015ba8 	.word	0x08015ba8
 800d140:	08015b44 	.word	0x08015b44
 800d144:	08015bcc 	.word	0x08015bcc
 800d148:	08015bec 	.word	0x08015bec

0800d14c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <tcp_write_checks+0x20>
 800d15e:	4b33      	ldr	r3, [pc, #204]	; (800d22c <tcp_write_checks+0xe0>)
 800d160:	f240 1233 	movw	r2, #307	; 0x133
 800d164:	4932      	ldr	r1, [pc, #200]	; (800d230 <tcp_write_checks+0xe4>)
 800d166:	4833      	ldr	r0, [pc, #204]	; (800d234 <tcp_write_checks+0xe8>)
 800d168:	f004 fcb8 	bl	8011adc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	7d1b      	ldrb	r3, [r3, #20]
 800d170:	2b04      	cmp	r3, #4
 800d172:	d00e      	beq.n	800d192 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d178:	2b07      	cmp	r3, #7
 800d17a:	d00a      	beq.n	800d192 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d180:	2b02      	cmp	r3, #2
 800d182:	d006      	beq.n	800d192 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d002      	beq.n	800d192 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d18c:	f06f 030a 	mvn.w	r3, #10
 800d190:	e048      	b.n	800d224 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d192:	887b      	ldrh	r3, [r7, #2]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <tcp_write_checks+0x50>
    return ERR_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	e043      	b.n	800d224 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d1a2:	887a      	ldrh	r2, [r7, #2]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d909      	bls.n	800d1bc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8b5b      	ldrh	r3, [r3, #26]
 800d1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ba:	e033      	b.n	800d224 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1c2:	2b08      	cmp	r3, #8
 800d1c4:	d909      	bls.n	800d1da <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8b5b      	ldrh	r3, [r3, #26]
 800d1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d8:	e024      	b.n	800d224 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00f      	beq.n	800d204 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d11a      	bne.n	800d222 <tcp_write_checks+0xd6>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d116      	bne.n	800d222 <tcp_write_checks+0xd6>
 800d1f4:	4b0d      	ldr	r3, [pc, #52]	; (800d22c <tcp_write_checks+0xe0>)
 800d1f6:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800d1fa:	490f      	ldr	r1, [pc, #60]	; (800d238 <tcp_write_checks+0xec>)
 800d1fc:	480d      	ldr	r0, [pc, #52]	; (800d234 <tcp_write_checks+0xe8>)
 800d1fe:	f004 fc6d 	bl	8011adc <iprintf>
 800d202:	e00e      	b.n	800d222 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <tcp_write_checks+0xc8>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d210:	2b00      	cmp	r3, #0
 800d212:	d006      	beq.n	800d222 <tcp_write_checks+0xd6>
 800d214:	4b05      	ldr	r3, [pc, #20]	; (800d22c <tcp_write_checks+0xe0>)
 800d216:	f240 1259 	movw	r2, #345	; 0x159
 800d21a:	4908      	ldr	r1, [pc, #32]	; (800d23c <tcp_write_checks+0xf0>)
 800d21c:	4805      	ldr	r0, [pc, #20]	; (800d234 <tcp_write_checks+0xe8>)
 800d21e:	f004 fc5d 	bl	8011adc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	08015af0 	.word	0x08015af0
 800d230:	08015c00 	.word	0x08015c00
 800d234:	08015b44 	.word	0x08015b44
 800d238:	08015c20 	.word	0x08015c20
 800d23c:	08015c5c 	.word	0x08015c5c

0800d240 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d240:	b590      	push	{r4, r7, lr}
 800d242:	b09b      	sub	sp, #108	; 0x6c
 800d244:	af04      	add	r7, sp, #16
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	4611      	mov	r1, r2
 800d24c:	461a      	mov	r2, r3
 800d24e:	460b      	mov	r3, r1
 800d250:	80fb      	strh	r3, [r7, #6]
 800d252:	4613      	mov	r3, r2
 800d254:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d256:	2300      	movs	r3, #0
 800d258:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	653b      	str	r3, [r7, #80]	; 0x50
 800d25e:	2300      	movs	r3, #0
 800d260:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d262:	2300      	movs	r3, #0
 800d264:	64bb      	str	r3, [r7, #72]	; 0x48
 800d266:	2300      	movs	r3, #0
 800d268:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d26a:	2300      	movs	r3, #0
 800d26c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d27e:	2300      	movs	r3, #0
 800d280:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <tcp_write+0x5c>
 800d288:	4ba5      	ldr	r3, [pc, #660]	; (800d520 <tcp_write+0x2e0>)
 800d28a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d28e:	49a5      	ldr	r1, [pc, #660]	; (800d524 <tcp_write+0x2e4>)
 800d290:	48a5      	ldr	r0, [pc, #660]	; (800d528 <tcp_write+0x2e8>)
 800d292:	f004 fc23 	bl	8011adc <iprintf>
 800d296:	f06f 030f 	mvn.w	r3, #15
 800d29a:	e32c      	b.n	800d8f6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2a2:	085b      	lsrs	r3, r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	bf28      	it	cs
 800d2ae:	4613      	movcs	r3, r2
 800d2b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <tcp_write+0x7e>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2bc:	e000      	b.n	800d2c0 <tcp_write+0x80>
 800d2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d109      	bne.n	800d2dc <tcp_write+0x9c>
 800d2c8:	4b95      	ldr	r3, [pc, #596]	; (800d520 <tcp_write+0x2e0>)
 800d2ca:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800d2ce:	4997      	ldr	r1, [pc, #604]	; (800d52c <tcp_write+0x2ec>)
 800d2d0:	4895      	ldr	r0, [pc, #596]	; (800d528 <tcp_write+0x2e8>)
 800d2d2:	f004 fc03 	bl	8011adc <iprintf>
 800d2d6:	f06f 030f 	mvn.w	r3, #15
 800d2da:	e30c      	b.n	800d8f6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d2dc:	88fb      	ldrh	r3, [r7, #6]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7ff ff33 	bl	800d14c <tcp_write_checks>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d2ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <tcp_write+0xba>
    return err;
 800d2f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d2f8:	e2fd      	b.n	800d8f6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d300:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d304:	2300      	movs	r3, #0
 800d306:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80f7 	beq.w	800d502 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d318:	653b      	str	r3, [r7, #80]	; 0x50
 800d31a:	e002      	b.n	800d322 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1f8      	bne.n	800d31c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d32c:	7a9b      	ldrb	r3, [r3, #10]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	b29b      	uxth	r3, r3
 800d332:	f003 0304 	and.w	r3, r3, #4
 800d336:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d338:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d33c:	891b      	ldrh	r3, [r3, #8]
 800d33e:	4619      	mov	r1, r3
 800d340:	8c3b      	ldrh	r3, [r7, #32]
 800d342:	440b      	add	r3, r1
 800d344:	429a      	cmp	r2, r3
 800d346:	da06      	bge.n	800d356 <tcp_write+0x116>
 800d348:	4b75      	ldr	r3, [pc, #468]	; (800d520 <tcp_write+0x2e0>)
 800d34a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d34e:	4978      	ldr	r1, [pc, #480]	; (800d530 <tcp_write+0x2f0>)
 800d350:	4875      	ldr	r0, [pc, #468]	; (800d528 <tcp_write+0x2e8>)
 800d352:	f004 fbc3 	bl	8011adc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d358:	891a      	ldrh	r2, [r3, #8]
 800d35a:	8c3b      	ldrh	r3, [r7, #32]
 800d35c:	4413      	add	r3, r2
 800d35e:	b29b      	uxth	r3, r3
 800d360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d36c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d36e:	8a7b      	ldrh	r3, [r7, #18]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d027      	beq.n	800d3c4 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d374:	8a7b      	ldrh	r3, [r7, #18]
 800d376:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d378:	429a      	cmp	r2, r3
 800d37a:	d206      	bcs.n	800d38a <tcp_write+0x14a>
 800d37c:	4b68      	ldr	r3, [pc, #416]	; (800d520 <tcp_write+0x2e0>)
 800d37e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d382:	496c      	ldr	r1, [pc, #432]	; (800d534 <tcp_write+0x2f4>)
 800d384:	4868      	ldr	r0, [pc, #416]	; (800d528 <tcp_write+0x2e8>)
 800d386:	f004 fba9 	bl	8011adc <iprintf>
      seg = last_unsent;
 800d38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d38e:	8a7b      	ldrh	r3, [r7, #18]
 800d390:	88fa      	ldrh	r2, [r7, #6]
 800d392:	429a      	cmp	r2, r3
 800d394:	d901      	bls.n	800d39a <tcp_write+0x15a>
 800d396:	8a7b      	ldrh	r3, [r7, #18]
 800d398:	e000      	b.n	800d39c <tcp_write+0x15c>
 800d39a:	88fb      	ldrh	r3, [r7, #6]
 800d39c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	bfa8      	it	ge
 800d3a2:	4613      	movge	r3, r2
 800d3a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d3a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3ac:	4413      	add	r3, r2
 800d3ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d3b2:	8a7a      	ldrh	r2, [r7, #18]
 800d3b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d3bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d3be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d3c4:	8a7b      	ldrh	r3, [r7, #18]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00b      	beq.n	800d3e2 <tcp_write+0x1a2>
 800d3ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3ce:	88fb      	ldrh	r3, [r7, #6]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d006      	beq.n	800d3e2 <tcp_write+0x1a2>
 800d3d4:	4b52      	ldr	r3, [pc, #328]	; (800d520 <tcp_write+0x2e0>)
 800d3d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3da:	4957      	ldr	r1, [pc, #348]	; (800d538 <tcp_write+0x2f8>)
 800d3dc:	4852      	ldr	r0, [pc, #328]	; (800d528 <tcp_write+0x2e8>)
 800d3de:	f004 fb7d 	bl	8011adc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d3e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3e6:	88fb      	ldrh	r3, [r7, #6]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	f080 8168 	bcs.w	800d6be <tcp_write+0x47e>
 800d3ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 8164 	beq.w	800d6be <tcp_write+0x47e>
 800d3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f8:	891b      	ldrh	r3, [r3, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 815f 	beq.w	800d6be <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d400:	88fa      	ldrh	r2, [r7, #6]
 800d402:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d406:	1ad2      	subs	r2, r2, r3
 800d408:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d40a:	4293      	cmp	r3, r2
 800d40c:	bfa8      	it	ge
 800d40e:	4613      	movge	r3, r2
 800d410:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d414:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d416:	797b      	ldrb	r3, [r7, #5]
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d027      	beq.n	800d470 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d420:	f107 0012 	add.w	r0, r7, #18
 800d424:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d426:	8bf9      	ldrh	r1, [r7, #30]
 800d428:	2301      	movs	r3, #1
 800d42a:	9302      	str	r3, [sp, #8]
 800d42c:	797b      	ldrb	r3, [r7, #5]
 800d42e:	9301      	str	r3, [sp, #4]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	4603      	mov	r3, r0
 800d436:	2000      	movs	r0, #0
 800d438:	f7ff fe0e 	bl	800d058 <tcp_pbuf_prealloc>
 800d43c:	6578      	str	r0, [r7, #84]	; 0x54
 800d43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 8226 	beq.w	800d892 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d448:	6858      	ldr	r0, [r3, #4]
 800d44a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	4413      	add	r3, r2
 800d452:	8bfa      	ldrh	r2, [r7, #30]
 800d454:	4619      	mov	r1, r3
 800d456:	f004 fa86 	bl	8011966 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d45a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d45c:	f7fb f9f8 	bl	8008850 <pbuf_clen>
 800d460:	4603      	mov	r3, r0
 800d462:	461a      	mov	r2, r3
 800d464:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d468:	4413      	add	r3, r2
 800d46a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d46e:	e041      	b.n	800d4f4 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	637b      	str	r3, [r7, #52]	; 0x34
 800d476:	e002      	b.n	800d47e <tcp_write+0x23e>
 800d478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	637b      	str	r3, [r7, #52]	; 0x34
 800d47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d1f8      	bne.n	800d478 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d488:	7b1b      	ldrb	r3, [r3, #12]
 800d48a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d115      	bne.n	800d4be <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d498:	8952      	ldrh	r2, [r2, #10]
 800d49a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d10d      	bne.n	800d4be <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d4a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d006      	beq.n	800d4b8 <tcp_write+0x278>
 800d4aa:	4b1d      	ldr	r3, [pc, #116]	; (800d520 <tcp_write+0x2e0>)
 800d4ac:	f240 2231 	movw	r2, #561	; 0x231
 800d4b0:	4922      	ldr	r1, [pc, #136]	; (800d53c <tcp_write+0x2fc>)
 800d4b2:	481d      	ldr	r0, [pc, #116]	; (800d528 <tcp_write+0x2e8>)
 800d4b4:	f004 fb12 	bl	8011adc <iprintf>
          extendlen = seglen;
 800d4b8:	8bfb      	ldrh	r3, [r7, #30]
 800d4ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d4bc:	e01a      	b.n	800d4f4 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d4be:	8bfb      	ldrh	r3, [r7, #30]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	f7fa fe5b 	bl	8008180 <pbuf_alloc>
 800d4ca:	6578      	str	r0, [r7, #84]	; 0x54
 800d4cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 81e1 	beq.w	800d896 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d4d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	441a      	add	r2, r3
 800d4dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4de:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d4e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d4e2:	f7fb f9b5 	bl	8008850 <pbuf_clen>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d4f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d4f8:	8bfb      	ldrh	r3, [r7, #30]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d500:	e0dd      	b.n	800d6be <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 80d8 	beq.w	800d6be <tcp_write+0x47e>
 800d50e:	4b04      	ldr	r3, [pc, #16]	; (800d520 <tcp_write+0x2e0>)
 800d510:	f240 224b 	movw	r2, #587	; 0x24b
 800d514:	490a      	ldr	r1, [pc, #40]	; (800d540 <tcp_write+0x300>)
 800d516:	4804      	ldr	r0, [pc, #16]	; (800d528 <tcp_write+0x2e8>)
 800d518:	f004 fae0 	bl	8011adc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d51c:	e0cf      	b.n	800d6be <tcp_write+0x47e>
 800d51e:	bf00      	nop
 800d520:	08015af0 	.word	0x08015af0
 800d524:	08015c90 	.word	0x08015c90
 800d528:	08015b44 	.word	0x08015b44
 800d52c:	08015ca8 	.word	0x08015ca8
 800d530:	08015cdc 	.word	0x08015cdc
 800d534:	08015cf4 	.word	0x08015cf4
 800d538:	08015d14 	.word	0x08015d14
 800d53c:	08015d34 	.word	0x08015d34
 800d540:	08015d60 	.word	0x08015d60
    struct pbuf *p;
    u16_t left = len - pos;
 800d544:	88fa      	ldrh	r2, [r7, #6]
 800d546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d54e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d552:	b29b      	uxth	r3, r3
 800d554:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d55a:	8b7a      	ldrh	r2, [r7, #26]
 800d55c:	8bbb      	ldrh	r3, [r7, #28]
 800d55e:	4293      	cmp	r3, r2
 800d560:	bf28      	it	cs
 800d562:	4613      	movcs	r3, r2
 800d564:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d566:	797b      	ldrb	r3, [r7, #5]
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d036      	beq.n	800d5de <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d574:	b29a      	uxth	r2, r3
 800d576:	8b3b      	ldrh	r3, [r7, #24]
 800d578:	4413      	add	r3, r2
 800d57a:	b299      	uxth	r1, r3
 800d57c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bf0c      	ite	eq
 800d582:	2301      	moveq	r3, #1
 800d584:	2300      	movne	r3, #0
 800d586:	b2db      	uxtb	r3, r3
 800d588:	f107 0012 	add.w	r0, r7, #18
 800d58c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d58e:	9302      	str	r3, [sp, #8]
 800d590:	797b      	ldrb	r3, [r7, #5]
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	4603      	mov	r3, r0
 800d59a:	2036      	movs	r0, #54	; 0x36
 800d59c:	f7ff fd5c 	bl	800d058 <tcp_pbuf_prealloc>
 800d5a0:	6338      	str	r0, [r7, #48]	; 0x30
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 8178 	beq.w	800d89a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ac:	895b      	ldrh	r3, [r3, #10]
 800d5ae:	8b3a      	ldrh	r2, [r7, #24]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d906      	bls.n	800d5c2 <tcp_write+0x382>
 800d5b4:	4b8c      	ldr	r3, [pc, #560]	; (800d7e8 <tcp_write+0x5a8>)
 800d5b6:	f240 2267 	movw	r2, #615	; 0x267
 800d5ba:	498c      	ldr	r1, [pc, #560]	; (800d7ec <tcp_write+0x5ac>)
 800d5bc:	488c      	ldr	r0, [pc, #560]	; (800d7f0 <tcp_write+0x5b0>)
 800d5be:	f004 fa8d 	bl	8011adc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	685a      	ldr	r2, [r3, #4]
 800d5c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d5ca:	18d0      	adds	r0, r2, r3
 800d5cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	8b3a      	ldrh	r2, [r7, #24]
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f004 f9c5 	bl	8011966 <memcpy>
 800d5dc:	e02f      	b.n	800d63e <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d5de:	8a7b      	ldrh	r3, [r7, #18]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d006      	beq.n	800d5f2 <tcp_write+0x3b2>
 800d5e4:	4b80      	ldr	r3, [pc, #512]	; (800d7e8 <tcp_write+0x5a8>)
 800d5e6:	f240 2271 	movw	r2, #625	; 0x271
 800d5ea:	4982      	ldr	r1, [pc, #520]	; (800d7f4 <tcp_write+0x5b4>)
 800d5ec:	4880      	ldr	r0, [pc, #512]	; (800d7f0 <tcp_write+0x5b0>)
 800d5ee:	f004 fa75 	bl	8011adc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d5f2:	8b3b      	ldrh	r3, [r7, #24]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	2036      	movs	r0, #54	; 0x36
 800d5fa:	f7fa fdc1 	bl	8008180 <pbuf_alloc>
 800d5fe:	6178      	str	r0, [r7, #20]
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 814b 	beq.w	800d89e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	441a      	add	r2, r3
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d614:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d618:	b29b      	uxth	r3, r3
 800d61a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d61e:	4619      	mov	r1, r3
 800d620:	2036      	movs	r0, #54	; 0x36
 800d622:	f7fa fdad 	bl	8008180 <pbuf_alloc>
 800d626:	6338      	str	r0, [r7, #48]	; 0x30
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d103      	bne.n	800d636 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d62e:	6978      	ldr	r0, [r7, #20]
 800d630:	f7fb f886 	bl	8008740 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d634:	e136      	b.n	800d8a4 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d636:	6979      	ldr	r1, [r7, #20]
 800d638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d63a:	f7fb f943 	bl	80088c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d63e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d640:	f7fb f906 	bl	8008850 <pbuf_clen>
 800d644:	4603      	mov	r3, r0
 800d646:	461a      	mov	r2, r3
 800d648:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d64c:	4413      	add	r3, r2
 800d64e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d656:	2b09      	cmp	r3, #9
 800d658:	d903      	bls.n	800d662 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d65a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d65c:	f7fb f870 	bl	8008740 <pbuf_free>
      goto memerr;
 800d660:	e120      	b.n	800d8a4 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d66a:	441a      	add	r2, r3
 800d66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	4613      	mov	r3, r2
 800d674:	2200      	movs	r2, #0
 800d676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f7ff fc4f 	bl	800cf1c <tcp_create_segment>
 800d67e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d682:	2b00      	cmp	r3, #0
 800d684:	f000 810d 	beq.w	800d8a2 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d102      	bne.n	800d694 <tcp_write+0x454>
      queue = seg;
 800d68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d690:	647b      	str	r3, [r7, #68]	; 0x44
 800d692:	e00c      	b.n	800d6ae <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d696:	2b00      	cmp	r3, #0
 800d698:	d106      	bne.n	800d6a8 <tcp_write+0x468>
 800d69a:	4b53      	ldr	r3, [pc, #332]	; (800d7e8 <tcp_write+0x5a8>)
 800d69c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d6a0:	4955      	ldr	r1, [pc, #340]	; (800d7f8 <tcp_write+0x5b8>)
 800d6a2:	4853      	ldr	r0, [pc, #332]	; (800d7f0 <tcp_write+0x5b0>)
 800d6a4:	f004 fa1a 	bl	8011adc <iprintf>
      prev_seg->next = seg;
 800d6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d6b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d6b6:	8b3b      	ldrh	r3, [r7, #24]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d6be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	f4ff af3d 	bcc.w	800d544 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d6ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d02c      	beq.n	800d72a <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6d6:	e01e      	b.n	800d716 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	891a      	ldrh	r2, [r3, #8]
 800d6dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6de:	4413      	add	r3, r2
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d110      	bne.n	800d710 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6f4:	8952      	ldrh	r2, [r2, #10]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f004 f932 	bl	8011966 <memcpy>
        p->len += oversize_used;
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	895a      	ldrh	r2, [r3, #10]
 800d706:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d708:	4413      	add	r3, r2
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1dd      	bne.n	800d6d8 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800d71c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d71e:	891a      	ldrh	r2, [r3, #8]
 800d720:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d722:	4413      	add	r3, r2
 800d724:	b29a      	uxth	r2, r3
 800d726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d728:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d72a:	8a7a      	ldrh	r2, [r7, #18]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d734:	2b00      	cmp	r3, #0
 800d736:	d018      	beq.n	800d76a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d106      	bne.n	800d74c <tcp_write+0x50c>
 800d73e:	4b2a      	ldr	r3, [pc, #168]	; (800d7e8 <tcp_write+0x5a8>)
 800d740:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d744:	492d      	ldr	r1, [pc, #180]	; (800d7fc <tcp_write+0x5bc>)
 800d746:	482a      	ldr	r0, [pc, #168]	; (800d7f0 <tcp_write+0x5b0>)
 800d748:	f004 f9c8 	bl	8011adc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d752:	4618      	mov	r0, r3
 800d754:	f7fb f8b6 	bl	80088c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d75a:	891a      	ldrh	r2, [r3, #8]
 800d75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d75e:	891b      	ldrh	r3, [r3, #8]
 800d760:	4413      	add	r3, r2
 800d762:	b29a      	uxth	r2, r3
 800d764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d766:	811a      	strh	r2, [r3, #8]
 800d768:	e037      	b.n	800d7da <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800d76a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d034      	beq.n	800d7da <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d772:	2b00      	cmp	r3, #0
 800d774:	d003      	beq.n	800d77e <tcp_write+0x53e>
 800d776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d106      	bne.n	800d78c <tcp_write+0x54c>
 800d77e:	4b1a      	ldr	r3, [pc, #104]	; (800d7e8 <tcp_write+0x5a8>)
 800d780:	f240 22e7 	movw	r2, #743	; 0x2e7
 800d784:	491e      	ldr	r1, [pc, #120]	; (800d800 <tcp_write+0x5c0>)
 800d786:	481a      	ldr	r0, [pc, #104]	; (800d7f0 <tcp_write+0x5b0>)
 800d788:	f004 f9a8 	bl	8011adc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	62bb      	str	r3, [r7, #40]	; 0x28
 800d792:	e009      	b.n	800d7a8 <tcp_write+0x568>
      p->tot_len += extendlen;
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	891a      	ldrh	r2, [r3, #8]
 800d798:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d79a:	4413      	add	r3, r2
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f1      	bne.n	800d794 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	891a      	ldrh	r2, [r3, #8]
 800d7b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7b6:	4413      	add	r3, r2
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	895a      	ldrh	r2, [r3, #10]
 800d7c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7c4:	4413      	add	r3, r2
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7ce:	891a      	ldrh	r2, [r3, #8]
 800d7d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d7d2:	4413      	add	r3, r2
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7d8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d111      	bne.n	800d804 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d7e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d7e6:	e010      	b.n	800d80a <tcp_write+0x5ca>
 800d7e8:	08015af0 	.word	0x08015af0
 800d7ec:	08015d90 	.word	0x08015d90
 800d7f0:	08015b44 	.word	0x08015b44
 800d7f4:	08015dd0 	.word	0x08015dd0
 800d7f8:	08015de0 	.word	0x08015de0
 800d7fc:	08015df4 	.word	0x08015df4
 800d800:	08015e2c 	.word	0x08015e2c
  } else {
    last_unsent->next = queue;
 800d804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d808:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d80e:	88fb      	ldrh	r3, [r7, #6]
 800d810:	441a      	add	r2, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d81c:	88fb      	ldrh	r3, [r7, #6]
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	b29a      	uxth	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d82e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00e      	beq.n	800d85a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d840:	2b00      	cmp	r3, #0
 800d842:	d10a      	bne.n	800d85a <tcp_write+0x61a>
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d106      	bne.n	800d85a <tcp_write+0x61a>
 800d84c:	4b2c      	ldr	r3, [pc, #176]	; (800d900 <tcp_write+0x6c0>)
 800d84e:	f240 3213 	movw	r2, #787	; 0x313
 800d852:	492c      	ldr	r1, [pc, #176]	; (800d904 <tcp_write+0x6c4>)
 800d854:	482c      	ldr	r0, [pc, #176]	; (800d908 <tcp_write+0x6c8>)
 800d856:	f004 f941 	bl	8011adc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d016      	beq.n	800d88e <tcp_write+0x64e>
 800d860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d012      	beq.n	800d88e <tcp_write+0x64e>
 800d868:	797b      	ldrb	r3, [r7, #5]
 800d86a:	f003 0302 	and.w	r3, r3, #2
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10d      	bne.n	800d88e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	899b      	ldrh	r3, [r3, #12]
 800d878:	b29c      	uxth	r4, r3
 800d87a:	2008      	movs	r0, #8
 800d87c:	f7f9 fcc5 	bl	800720a <lwip_htons>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	4322      	orrs	r2, r4
 800d88a:	b292      	uxth	r2, r2
 800d88c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	e031      	b.n	800d8f6 <tcp_write+0x6b6>
          goto memerr;
 800d892:	bf00      	nop
 800d894:	e006      	b.n	800d8a4 <tcp_write+0x664>
            goto memerr;
 800d896:	bf00      	nop
 800d898:	e004      	b.n	800d8a4 <tcp_write+0x664>
        goto memerr;
 800d89a:	bf00      	nop
 800d89c:	e002      	b.n	800d8a4 <tcp_write+0x664>
        goto memerr;
 800d89e:	bf00      	nop
 800d8a0:	e000      	b.n	800d8a4 <tcp_write+0x664>
      goto memerr;
 800d8a2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	8b5b      	ldrh	r3, [r3, #26]
 800d8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <tcp_write+0x67e>
    pbuf_free(concat_p);
 800d8b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d8ba:	f7fa ff41 	bl	8008740 <pbuf_free>
  }
  if (queue != NULL) {
 800d8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <tcp_write+0x68a>
    tcp_segs_free(queue);
 800d8c4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d8c6:	f7fc fb59 	bl	8009f7c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00e      	beq.n	800d8f2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <tcp_write+0x6b2>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d106      	bne.n	800d8f2 <tcp_write+0x6b2>
 800d8e4:	4b06      	ldr	r3, [pc, #24]	; (800d900 <tcp_write+0x6c0>)
 800d8e6:	f44f 724a 	mov.w	r2, #808	; 0x328
 800d8ea:	4906      	ldr	r1, [pc, #24]	; (800d904 <tcp_write+0x6c4>)
 800d8ec:	4806      	ldr	r0, [pc, #24]	; (800d908 <tcp_write+0x6c8>)
 800d8ee:	f004 f8f5 	bl	8011adc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d8f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	375c      	adds	r7, #92	; 0x5c
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd90      	pop	{r4, r7, pc}
 800d8fe:	bf00      	nop
 800d900:	08015af0 	.word	0x08015af0
 800d904:	08015e64 	.word	0x08015e64
 800d908:	08015b44 	.word	0x08015b44

0800d90c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d90c:	b590      	push	{r4, r7, lr}
 800d90e:	b08b      	sub	sp, #44	; 0x2c
 800d910:	af02      	add	r7, sp, #8
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d918:	2300      	movs	r3, #0
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	2300      	movs	r3, #0
 800d91e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d920:	2300      	movs	r3, #0
 800d922:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <tcp_split_unsent_seg+0x2c>
 800d92a:	4b95      	ldr	r3, [pc, #596]	; (800db80 <tcp_split_unsent_seg+0x274>)
 800d92c:	f240 324b 	movw	r2, #843	; 0x34b
 800d930:	4994      	ldr	r1, [pc, #592]	; (800db84 <tcp_split_unsent_seg+0x278>)
 800d932:	4895      	ldr	r0, [pc, #596]	; (800db88 <tcp_split_unsent_seg+0x27c>)
 800d934:	f004 f8d2 	bl	8011adc <iprintf>

  useg = pcb->unsent;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d102      	bne.n	800d94a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d944:	f04f 33ff 	mov.w	r3, #4294967295
 800d948:	e116      	b.n	800db78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d94a:	887b      	ldrh	r3, [r7, #2]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d109      	bne.n	800d964 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d950:	4b8b      	ldr	r3, [pc, #556]	; (800db80 <tcp_split_unsent_seg+0x274>)
 800d952:	f240 3253 	movw	r2, #851	; 0x353
 800d956:	498d      	ldr	r1, [pc, #564]	; (800db8c <tcp_split_unsent_seg+0x280>)
 800d958:	488b      	ldr	r0, [pc, #556]	; (800db88 <tcp_split_unsent_seg+0x27c>)
 800d95a:	f004 f8bf 	bl	8011adc <iprintf>
    return ERR_VAL;
 800d95e:	f06f 0305 	mvn.w	r3, #5
 800d962:	e109      	b.n	800db78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	891b      	ldrh	r3, [r3, #8]
 800d968:	887a      	ldrh	r2, [r7, #2]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d301      	bcc.n	800d972 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	e102      	b.n	800db78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d976:	887a      	ldrh	r2, [r7, #2]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d906      	bls.n	800d98a <tcp_split_unsent_seg+0x7e>
 800d97c:	4b80      	ldr	r3, [pc, #512]	; (800db80 <tcp_split_unsent_seg+0x274>)
 800d97e:	f240 325b 	movw	r2, #859	; 0x35b
 800d982:	4983      	ldr	r1, [pc, #524]	; (800db90 <tcp_split_unsent_seg+0x284>)
 800d984:	4880      	ldr	r0, [pc, #512]	; (800db88 <tcp_split_unsent_seg+0x27c>)
 800d986:	f004 f8a9 	bl	8011adc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	891b      	ldrh	r3, [r3, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <tcp_split_unsent_seg+0x94>
 800d992:	4b7b      	ldr	r3, [pc, #492]	; (800db80 <tcp_split_unsent_seg+0x274>)
 800d994:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d998:	497e      	ldr	r1, [pc, #504]	; (800db94 <tcp_split_unsent_seg+0x288>)
 800d99a:	487b      	ldr	r0, [pc, #492]	; (800db88 <tcp_split_unsent_seg+0x27c>)
 800d99c:	f004 f89e 	bl	8011adc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	7a9b      	ldrb	r3, [r3, #10]
 800d9a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d9a6:	7bfb      	ldrb	r3, [r7, #15]
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	891a      	ldrh	r2, [r3, #8]
 800d9b6:	887b      	ldrh	r3, [r7, #2]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d9bc:	7bbb      	ldrb	r3, [r7, #14]
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	89bb      	ldrh	r3, [r7, #12]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	2036      	movs	r0, #54	; 0x36
 800d9ce:	f7fa fbd7 	bl	8008180 <pbuf_alloc>
 800d9d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	f000 80b7 	beq.w	800db4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	891a      	ldrh	r2, [r3, #8]
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	891b      	ldrh	r3, [r3, #8]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	887b      	ldrh	r3, [r7, #2]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	6858      	ldr	r0, [r3, #4]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	685a      	ldr	r2, [r3, #4]
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
 800d9fa:	18d1      	adds	r1, r2, r3
 800d9fc:	897b      	ldrh	r3, [r7, #10]
 800d9fe:	89ba      	ldrh	r2, [r7, #12]
 800da00:	f7fb f898 	bl	8008b34 <pbuf_copy_partial>
 800da04:	4603      	mov	r3, r0
 800da06:	461a      	mov	r2, r3
 800da08:	89bb      	ldrh	r3, [r7, #12]
 800da0a:	4293      	cmp	r3, r2
 800da0c:	f040 809f 	bne.w	800db4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	899b      	ldrh	r3, [r3, #12]
 800da16:	b29b      	uxth	r3, r3
 800da18:	4618      	mov	r0, r3
 800da1a:	f7f9 fbf6 	bl	800720a <lwip_htons>
 800da1e:	4603      	mov	r3, r0
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800da28:	2300      	movs	r3, #0
 800da2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800da2c:	7efb      	ldrb	r3, [r7, #27]
 800da2e:	f003 0308 	and.w	r3, r3, #8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d007      	beq.n	800da46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800da36:	7efb      	ldrb	r3, [r7, #27]
 800da38:	f023 0308 	bic.w	r3, r3, #8
 800da3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800da3e:	7ebb      	ldrb	r3, [r7, #26]
 800da40:	f043 0308 	orr.w	r3, r3, #8
 800da44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800da46:	7efb      	ldrb	r3, [r7, #27]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d007      	beq.n	800da60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800da50:	7efb      	ldrb	r3, [r7, #27]
 800da52:	f023 0301 	bic.w	r3, r3, #1
 800da56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800da58:	7ebb      	ldrb	r3, [r7, #26]
 800da5a:	f043 0301 	orr.w	r3, r3, #1
 800da5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	4618      	mov	r0, r3
 800da68:	f7f9 fbe4 	bl	8007234 <lwip_htonl>
 800da6c:	4602      	mov	r2, r0
 800da6e:	887b      	ldrh	r3, [r7, #2]
 800da70:	18d1      	adds	r1, r2, r3
 800da72:	7eba      	ldrb	r2, [r7, #26]
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	460b      	mov	r3, r1
 800da7a:	6939      	ldr	r1, [r7, #16]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff fa4d 	bl	800cf1c <tcp_create_segment>
 800da82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d063      	beq.n	800db52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fa fede 	bl	8008850 <pbuf_clen>
 800da94:	4603      	mov	r3, r0
 800da96:	461a      	mov	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da9e:	1a9b      	subs	r3, r3, r2
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	6858      	ldr	r0, [r3, #4]
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	891a      	ldrh	r2, [r3, #8]
 800dab2:	89bb      	ldrh	r3, [r7, #12]
 800dab4:	1ad3      	subs	r3, r2, r3
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	4619      	mov	r1, r3
 800daba:	f7fa fcbb 	bl	8008434 <pbuf_realloc>
  useg->len -= remainder;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	891a      	ldrh	r2, [r3, #8]
 800dac2:	89bb      	ldrh	r3, [r7, #12]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	899b      	ldrh	r3, [r3, #12]
 800dad2:	b29c      	uxth	r4, r3
 800dad4:	7efb      	ldrb	r3, [r7, #27]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	4618      	mov	r0, r3
 800dada:	f7f9 fb96 	bl	800720a <lwip_htons>
 800dade:	4603      	mov	r3, r0
 800dae0:	461a      	mov	r2, r3
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	4322      	orrs	r2, r4
 800dae8:	b292      	uxth	r2, r2
 800daea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fa fead 	bl	8008850 <pbuf_clen>
 800daf6:	4603      	mov	r3, r0
 800daf8:	461a      	mov	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db00:	4413      	add	r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fa fe9e 	bl	8008850 <pbuf_clen>
 800db14:	4603      	mov	r3, r0
 800db16:	461a      	mov	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db1e:	4413      	add	r3, r2
 800db20:	b29a      	uxth	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	69fa      	ldr	r2, [r7, #28]
 800db34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800db46:	2300      	movs	r3, #0
 800db48:	e016      	b.n	800db78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800db4a:	bf00      	nop
 800db4c:	e002      	b.n	800db54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db4e:	bf00      	nop
 800db50:	e000      	b.n	800db54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d006      	beq.n	800db68 <tcp_split_unsent_seg+0x25c>
 800db5a:	4b09      	ldr	r3, [pc, #36]	; (800db80 <tcp_split_unsent_seg+0x274>)
 800db5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800db60:	490d      	ldr	r1, [pc, #52]	; (800db98 <tcp_split_unsent_seg+0x28c>)
 800db62:	4809      	ldr	r0, [pc, #36]	; (800db88 <tcp_split_unsent_seg+0x27c>)
 800db64:	f003 ffba 	bl	8011adc <iprintf>
  if (p != NULL) {
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800db6e:	6938      	ldr	r0, [r7, #16]
 800db70:	f7fa fde6 	bl	8008740 <pbuf_free>
  }

  return ERR_MEM;
 800db74:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3724      	adds	r7, #36	; 0x24
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd90      	pop	{r4, r7, pc}
 800db80:	08015af0 	.word	0x08015af0
 800db84:	08015e84 	.word	0x08015e84
 800db88:	08015b44 	.word	0x08015b44
 800db8c:	08015ea8 	.word	0x08015ea8
 800db90:	08015ecc 	.word	0x08015ecc
 800db94:	08015edc 	.word	0x08015edc
 800db98:	08015eec 	.word	0x08015eec

0800db9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800db9c:	b590      	push	{r4, r7, lr}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d106      	bne.n	800dbb8 <tcp_send_fin+0x1c>
 800dbaa:	4b21      	ldr	r3, [pc, #132]	; (800dc30 <tcp_send_fin+0x94>)
 800dbac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dbb0:	4920      	ldr	r1, [pc, #128]	; (800dc34 <tcp_send_fin+0x98>)
 800dbb2:	4821      	ldr	r0, [pc, #132]	; (800dc38 <tcp_send_fin+0x9c>)
 800dbb4:	f003 ff92 	bl	8011adc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d02e      	beq.n	800dc1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e002      	b.n	800dbce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1f8      	bne.n	800dbc8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	899b      	ldrh	r3, [r3, #12]
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7f9 fb13 	bl	800720a <lwip_htons>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	f003 0307 	and.w	r3, r3, #7
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d116      	bne.n	800dc1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	899b      	ldrh	r3, [r3, #12]
 800dbf6:	b29c      	uxth	r4, r3
 800dbf8:	2001      	movs	r0, #1
 800dbfa:	f7f9 fb06 	bl	800720a <lwip_htons>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	461a      	mov	r2, r3
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	4322      	orrs	r2, r4
 800dc08:	b292      	uxth	r2, r2
 800dc0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	8b5b      	ldrh	r3, [r3, #26]
 800dc10:	f043 0320 	orr.w	r3, r3, #32
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e004      	b.n	800dc28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dc1e:	2101      	movs	r1, #1
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f80b 	bl	800dc3c <tcp_enqueue_flags>
 800dc26:	4603      	mov	r3, r0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd90      	pop	{r4, r7, pc}
 800dc30:	08015af0 	.word	0x08015af0
 800dc34:	08015ef8 	.word	0x08015ef8
 800dc38:	08015b44 	.word	0x08015b44

0800dc3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08a      	sub	sp, #40	; 0x28
 800dc40:	af02      	add	r7, sp, #8
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dc50:	78fb      	ldrb	r3, [r7, #3]
 800dc52:	f003 0303 	and.w	r3, r3, #3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d106      	bne.n	800dc68 <tcp_enqueue_flags+0x2c>
 800dc5a:	4b67      	ldr	r3, [pc, #412]	; (800ddf8 <tcp_enqueue_flags+0x1bc>)
 800dc5c:	f240 4212 	movw	r2, #1042	; 0x412
 800dc60:	4966      	ldr	r1, [pc, #408]	; (800ddfc <tcp_enqueue_flags+0x1c0>)
 800dc62:	4867      	ldr	r0, [pc, #412]	; (800de00 <tcp_enqueue_flags+0x1c4>)
 800dc64:	f003 ff3a 	bl	8011adc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d106      	bne.n	800dc7c <tcp_enqueue_flags+0x40>
 800dc6e:	4b62      	ldr	r3, [pc, #392]	; (800ddf8 <tcp_enqueue_flags+0x1bc>)
 800dc70:	f240 4213 	movw	r2, #1043	; 0x413
 800dc74:	4963      	ldr	r1, [pc, #396]	; (800de04 <tcp_enqueue_flags+0x1c8>)
 800dc76:	4862      	ldr	r0, [pc, #392]	; (800de00 <tcp_enqueue_flags+0x1c4>)
 800dc78:	f003 ff30 	bl	8011adc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dc7c:	78fb      	ldrb	r3, [r7, #3]
 800dc7e:	f003 0302 	and.w	r3, r3, #2
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dc86:	2301      	movs	r3, #1
 800dc88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc8a:	7ffb      	ldrb	r3, [r7, #31]
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	f003 0304 	and.w	r3, r3, #4
 800dc94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc9e:	4619      	mov	r1, r3
 800dca0:	2036      	movs	r0, #54	; 0x36
 800dca2:	f7fa fa6d 	bl	8008180 <pbuf_alloc>
 800dca6:	6138      	str	r0, [r7, #16]
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d109      	bne.n	800dcc2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	8b5b      	ldrh	r3, [r3, #26]
 800dcb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc0:	e095      	b.n	800ddee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	895a      	ldrh	r2, [r3, #10]
 800dcc6:	7dfb      	ldrb	r3, [r7, #23]
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d206      	bcs.n	800dcdc <tcp_enqueue_flags+0xa0>
 800dcce:	4b4a      	ldr	r3, [pc, #296]	; (800ddf8 <tcp_enqueue_flags+0x1bc>)
 800dcd0:	f240 423a 	movw	r2, #1082	; 0x43a
 800dcd4:	494c      	ldr	r1, [pc, #304]	; (800de08 <tcp_enqueue_flags+0x1cc>)
 800dcd6:	484a      	ldr	r0, [pc, #296]	; (800de00 <tcp_enqueue_flags+0x1c4>)
 800dcd8:	f003 ff00 	bl	8011adc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800dce0:	78fa      	ldrb	r2, [r7, #3]
 800dce2:	7ffb      	ldrb	r3, [r7, #31]
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	460b      	mov	r3, r1
 800dce8:	6939      	ldr	r1, [r7, #16]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff f916 	bl	800cf1c <tcp_create_segment>
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d109      	bne.n	800dd0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	8b5b      	ldrh	r3, [r3, #26]
 800dcfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dd06:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0a:	e070      	b.n	800ddee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	f003 0303 	and.w	r3, r3, #3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d006      	beq.n	800dd26 <tcp_enqueue_flags+0xea>
 800dd18:	4b37      	ldr	r3, [pc, #220]	; (800ddf8 <tcp_enqueue_flags+0x1bc>)
 800dd1a:	f240 4242 	movw	r2, #1090	; 0x442
 800dd1e:	493b      	ldr	r1, [pc, #236]	; (800de0c <tcp_enqueue_flags+0x1d0>)
 800dd20:	4837      	ldr	r0, [pc, #220]	; (800de00 <tcp_enqueue_flags+0x1c4>)
 800dd22:	f003 fedb 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	891b      	ldrh	r3, [r3, #8]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d006      	beq.n	800dd3c <tcp_enqueue_flags+0x100>
 800dd2e:	4b32      	ldr	r3, [pc, #200]	; (800ddf8 <tcp_enqueue_flags+0x1bc>)
 800dd30:	f240 4243 	movw	r2, #1091	; 0x443
 800dd34:	4936      	ldr	r1, [pc, #216]	; (800de10 <tcp_enqueue_flags+0x1d4>)
 800dd36:	4832      	ldr	r0, [pc, #200]	; (800de00 <tcp_enqueue_flags+0x1c4>)
 800dd38:	f003 fed0 	bl	8011adc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d103      	bne.n	800dd4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd4a:	e00d      	b.n	800dd68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	e002      	b.n	800dd5a <tcp_enqueue_flags+0x11e>
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	61bb      	str	r3, [r7, #24]
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1f8      	bne.n	800dd54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dd62:	69bb      	ldr	r3, [r7, #24]
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	f003 0302 	and.w	r3, r3, #2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d104      	bne.n	800dd84 <tcp_enqueue_flags+0x148>
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	f003 0301 	and.w	r3, r3, #1
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d004      	beq.n	800dd8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd8e:	78fb      	ldrb	r3, [r7, #3]
 800dd90:	f003 0301 	and.w	r3, r3, #1
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d006      	beq.n	800dda6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	8b5b      	ldrh	r3, [r3, #26]
 800dd9c:	f043 0320 	orr.w	r3, r3, #32
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fa fd50 	bl	8008850 <pbuf_clen>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddba:	4413      	add	r3, r2
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00e      	beq.n	800ddec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10a      	bne.n	800ddec <tcp_enqueue_flags+0x1b0>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <tcp_enqueue_flags+0x1b0>
 800ddde:	4b06      	ldr	r3, [pc, #24]	; (800ddf8 <tcp_enqueue_flags+0x1bc>)
 800dde0:	f240 4266 	movw	r2, #1126	; 0x466
 800dde4:	490b      	ldr	r1, [pc, #44]	; (800de14 <tcp_enqueue_flags+0x1d8>)
 800dde6:	4806      	ldr	r0, [pc, #24]	; (800de00 <tcp_enqueue_flags+0x1c4>)
 800dde8:	f003 fe78 	bl	8011adc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3720      	adds	r7, #32
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	08015af0 	.word	0x08015af0
 800ddfc:	08015f14 	.word	0x08015f14
 800de00:	08015b44 	.word	0x08015b44
 800de04:	08015f6c 	.word	0x08015f6c
 800de08:	08015f8c 	.word	0x08015f8c
 800de0c:	08015fc8 	.word	0x08015fc8
 800de10:	08015fe0 	.word	0x08015fe0
 800de14:	0801600c 	.word	0x0801600c

0800de18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800de18:	b5b0      	push	{r4, r5, r7, lr}
 800de1a:	b08a      	sub	sp, #40	; 0x28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <tcp_output+0x1c>
 800de26:	4ba0      	ldr	r3, [pc, #640]	; (800e0a8 <tcp_output+0x290>)
 800de28:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800de2c:	499f      	ldr	r1, [pc, #636]	; (800e0ac <tcp_output+0x294>)
 800de2e:	48a0      	ldr	r0, [pc, #640]	; (800e0b0 <tcp_output+0x298>)
 800de30:	f003 fe54 	bl	8011adc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7d1b      	ldrb	r3, [r3, #20]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d106      	bne.n	800de4a <tcp_output+0x32>
 800de3c:	4b9a      	ldr	r3, [pc, #616]	; (800e0a8 <tcp_output+0x290>)
 800de3e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800de42:	499c      	ldr	r1, [pc, #624]	; (800e0b4 <tcp_output+0x29c>)
 800de44:	489a      	ldr	r0, [pc, #616]	; (800e0b0 <tcp_output+0x298>)
 800de46:	f003 fe49 	bl	8011adc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de4a:	4b9b      	ldr	r3, [pc, #620]	; (800e0b8 <tcp_output+0x2a0>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	429a      	cmp	r2, r3
 800de52:	d101      	bne.n	800de58 <tcp_output+0x40>
    return ERR_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	e1d2      	b.n	800e1fe <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de64:	429a      	cmp	r2, r3
 800de66:	d203      	bcs.n	800de70 <tcp_output+0x58>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de6e:	e002      	b.n	800de76 <tcp_output+0x5e>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de76:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de7c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10b      	bne.n	800de9c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	8b5b      	ldrh	r3, [r3, #26]
 800de88:	f003 0302 	and.w	r3, r3, #2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f000 81a9 	beq.w	800e1e4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fdd8 	bl	800ea48 <tcp_send_empty_ack>
 800de98:	4603      	mov	r3, r0
 800de9a:	e1b0      	b.n	800e1fe <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800de9c:	6879      	ldr	r1, [r7, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	3304      	adds	r3, #4
 800dea2:	461a      	mov	r2, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff f81d 	bl	800cee4 <tcp_route>
 800deaa:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d102      	bne.n	800deb8 <tcp_output+0xa0>
    return ERR_RTE;
 800deb2:	f06f 0303 	mvn.w	r3, #3
 800deb6:	e1a2      	b.n	800e1fe <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <tcp_output+0xae>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d111      	bne.n	800deea <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <tcp_output+0xba>
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	3304      	adds	r3, #4
 800ded0:	e000      	b.n	800ded4 <tcp_output+0xbc>
 800ded2:	2300      	movs	r3, #0
 800ded4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <tcp_output+0xca>
      return ERR_RTE;
 800dedc:	f06f 0303 	mvn.w	r3, #3
 800dee0:	e18d      	b.n	800e1fe <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	4618      	mov	r0, r3
 800def2:	f7f9 f99f 	bl	8007234 <lwip_htonl>
 800def6:	4602      	mov	r2, r0
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df00:	8912      	ldrh	r2, [r2, #8]
 800df02:	4413      	add	r3, r2
 800df04:	69ba      	ldr	r2, [r7, #24]
 800df06:	429a      	cmp	r2, r3
 800df08:	d227      	bcs.n	800df5a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df10:	461a      	mov	r2, r3
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	4293      	cmp	r3, r2
 800df16:	d114      	bne.n	800df42 <tcp_output+0x12a>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d110      	bne.n	800df42 <tcp_output+0x12a>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10b      	bne.n	800df42 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	8b5b      	ldrh	r3, [r3, #26]
 800df46:	f003 0302 	and.w	r3, r3, #2
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 814c 	beq.w	800e1e8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fd79 	bl	800ea48 <tcp_send_empty_ack>
 800df56:	4603      	mov	r3, r0
 800df58:	e151      	b.n	800e1fe <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df66:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800df68:	6a3b      	ldr	r3, [r7, #32]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 811b 	beq.w	800e1a6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800df70:	e002      	b.n	800df78 <tcp_output+0x160>
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	623b      	str	r3, [r7, #32]
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1f8      	bne.n	800df72 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800df80:	e111      	b.n	800e1a6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	899b      	ldrh	r3, [r3, #12]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f9 f93d 	bl	800720a <lwip_htons>
 800df90:	4603      	mov	r3, r0
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d006      	beq.n	800dfaa <tcp_output+0x192>
 800df9c:	4b42      	ldr	r3, [pc, #264]	; (800e0a8 <tcp_output+0x290>)
 800df9e:	f240 5237 	movw	r2, #1335	; 0x537
 800dfa2:	4946      	ldr	r1, [pc, #280]	; (800e0bc <tcp_output+0x2a4>)
 800dfa4:	4842      	ldr	r0, [pc, #264]	; (800e0b0 <tcp_output+0x298>)
 800dfa6:	f003 fd99 	bl	8011adc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d01f      	beq.n	800dff2 <tcp_output+0x1da>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	8b5b      	ldrh	r3, [r3, #26]
 800dfb6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d119      	bne.n	800dff2 <tcp_output+0x1da>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d00b      	beq.n	800dfde <tcp_output+0x1c6>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d110      	bne.n	800dff2 <tcp_output+0x1da>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfd4:	891a      	ldrh	r2, [r3, #8]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d209      	bcs.n	800dff2 <tcp_output+0x1da>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d004      	beq.n	800dff2 <tcp_output+0x1da>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfee:	2b08      	cmp	r3, #8
 800dff0:	d901      	bls.n	800dff6 <tcp_output+0x1de>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e000      	b.n	800dff8 <tcp_output+0x1e0>
 800dff6:	2300      	movs	r3, #0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d106      	bne.n	800e00a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	8b5b      	ldrh	r3, [r3, #26]
 800e000:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 80e3 	beq.w	800e1d0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	7d1b      	ldrb	r3, [r3, #20]
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d00d      	beq.n	800e02e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	899b      	ldrh	r3, [r3, #12]
 800e018:	b29c      	uxth	r4, r3
 800e01a:	2010      	movs	r0, #16
 800e01c:	f7f9 f8f5 	bl	800720a <lwip_htons>
 800e020:	4603      	mov	r3, r0
 800e022:	461a      	mov	r2, r3
 800e024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e026:	68db      	ldr	r3, [r3, #12]
 800e028:	4322      	orrs	r2, r4
 800e02a:	b292      	uxth	r2, r2
 800e02c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e034:	f000 f908 	bl	800e248 <tcp_output_segment>
 800e038:	4603      	mov	r3, r0
 800e03a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d009      	beq.n	800e058 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	8b5b      	ldrh	r3, [r3, #26]
 800e048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	835a      	strh	r2, [r3, #26]
      return err;
 800e052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e056:	e0d2      	b.n	800e1fe <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	7d1b      	ldrb	r3, [r3, #20]
 800e064:	2b02      	cmp	r3, #2
 800e066:	d006      	beq.n	800e076 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	8b5b      	ldrh	r3, [r3, #26]
 800e06c:	f023 0303 	bic.w	r3, r3, #3
 800e070:	b29a      	uxth	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7f9 f8d9 	bl	8007234 <lwip_htonl>
 800e082:	4604      	mov	r4, r0
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	891b      	ldrh	r3, [r3, #8]
 800e088:	461d      	mov	r5, r3
 800e08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	899b      	ldrh	r3, [r3, #12]
 800e090:	b29b      	uxth	r3, r3
 800e092:	4618      	mov	r0, r3
 800e094:	f7f9 f8b9 	bl	800720a <lwip_htons>
 800e098:	4603      	mov	r3, r0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	f003 0303 	and.w	r3, r3, #3
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00d      	beq.n	800e0c0 <tcp_output+0x2a8>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e00c      	b.n	800e0c2 <tcp_output+0x2aa>
 800e0a8:	08015af0 	.word	0x08015af0
 800e0ac:	08016034 	.word	0x08016034
 800e0b0:	08015b44 	.word	0x08015b44
 800e0b4:	0801604c 	.word	0x0801604c
 800e0b8:	20006fc4 	.word	0x20006fc4
 800e0bc:	08016074 	.word	0x08016074
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	442b      	add	r3, r5
 800e0c4:	4423      	add	r3, r4
 800e0c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	da02      	bge.n	800e0da <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68ba      	ldr	r2, [r7, #8]
 800e0d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	891b      	ldrh	r3, [r3, #8]
 800e0de:	461c      	mov	r4, r3
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	899b      	ldrh	r3, [r3, #12]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7f9 f88e 	bl	800720a <lwip_htons>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	f003 0303 	and.w	r3, r3, #3
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <tcp_output+0x2e6>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e000      	b.n	800e100 <tcp_output+0x2e8>
 800e0fe:	2300      	movs	r3, #0
 800e100:	4423      	add	r3, r4
 800e102:	2b00      	cmp	r3, #0
 800e104:	d049      	beq.n	800e19a <tcp_output+0x382>
      seg->next = NULL;
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e110:	2b00      	cmp	r3, #0
 800e112:	d105      	bne.n	800e120 <tcp_output+0x308>
        pcb->unacked = seg;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e118:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	623b      	str	r3, [r7, #32]
 800e11e:	e03f      	b.n	800e1a0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	4618      	mov	r0, r3
 800e128:	f7f9 f884 	bl	8007234 <lwip_htonl>
 800e12c:	4604      	mov	r4, r0
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	4618      	mov	r0, r3
 800e136:	f7f9 f87d 	bl	8007234 <lwip_htonl>
 800e13a:	4603      	mov	r3, r0
 800e13c:	1ae3      	subs	r3, r4, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	da24      	bge.n	800e18c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3370      	adds	r3, #112	; 0x70
 800e146:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e148:	e002      	b.n	800e150 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d011      	beq.n	800e17c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	4618      	mov	r0, r3
 800e162:	f7f9 f867 	bl	8007234 <lwip_htonl>
 800e166:	4604      	mov	r4, r0
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f9 f860 	bl	8007234 <lwip_htonl>
 800e174:	4603      	mov	r3, r0
 800e176:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e178:	2b00      	cmp	r3, #0
 800e17a:	dbe6      	blt.n	800e14a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e182:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	e009      	b.n	800e1a0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e18c:	6a3b      	ldr	r3, [r7, #32]
 800e18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e190:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e192:	6a3b      	ldr	r3, [r7, #32]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	623b      	str	r3, [r7, #32]
 800e198:	e002      	b.n	800e1a0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e19c:	f7fb ff02 	bl	8009fa4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d012      	beq.n	800e1d2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f9 f83e 	bl	8007234 <lwip_htonl>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1be:	1ad3      	subs	r3, r2, r3
 800e1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c2:	8912      	ldrh	r2, [r2, #8]
 800e1c4:	4413      	add	r3, r2
  while (seg != NULL &&
 800e1c6:	69ba      	ldr	r2, [r7, #24]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	f4bf aeda 	bcs.w	800df82 <tcp_output+0x16a>
 800e1ce:	e000      	b.n	800e1d2 <tcp_output+0x3ba>
      break;
 800e1d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d108      	bne.n	800e1ec <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e1e2:	e004      	b.n	800e1ee <tcp_output+0x3d6>
    goto output_done;
 800e1e4:	bf00      	nop
 800e1e6:	e002      	b.n	800e1ee <tcp_output+0x3d6>
    goto output_done;
 800e1e8:	bf00      	nop
 800e1ea:	e000      	b.n	800e1ee <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e1ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	8b5b      	ldrh	r3, [r3, #26]
 800e1f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3728      	adds	r7, #40	; 0x28
 800e202:	46bd      	mov	sp, r7
 800e204:	bdb0      	pop	{r4, r5, r7, pc}
 800e206:	bf00      	nop

0800e208 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d106      	bne.n	800e224 <tcp_output_segment_busy+0x1c>
 800e216:	4b09      	ldr	r3, [pc, #36]	; (800e23c <tcp_output_segment_busy+0x34>)
 800e218:	f240 529a 	movw	r2, #1434	; 0x59a
 800e21c:	4908      	ldr	r1, [pc, #32]	; (800e240 <tcp_output_segment_busy+0x38>)
 800e21e:	4809      	ldr	r0, [pc, #36]	; (800e244 <tcp_output_segment_busy+0x3c>)
 800e220:	f003 fc5c 	bl	8011adc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	7b9b      	ldrb	r3, [r3, #14]
 800e22a:	2b01      	cmp	r3, #1
 800e22c:	d001      	beq.n	800e232 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e22e:	2301      	movs	r3, #1
 800e230:	e000      	b.n	800e234 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	08015af0 	.word	0x08015af0
 800e240:	0801608c 	.word	0x0801608c
 800e244:	08015b44 	.word	0x08015b44

0800e248 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e248:	b5b0      	push	{r4, r5, r7, lr}
 800e24a:	b08c      	sub	sp, #48	; 0x30
 800e24c:	af04      	add	r7, sp, #16
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d106      	bne.n	800e268 <tcp_output_segment+0x20>
 800e25a:	4b64      	ldr	r3, [pc, #400]	; (800e3ec <tcp_output_segment+0x1a4>)
 800e25c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e260:	4963      	ldr	r1, [pc, #396]	; (800e3f0 <tcp_output_segment+0x1a8>)
 800e262:	4864      	ldr	r0, [pc, #400]	; (800e3f4 <tcp_output_segment+0x1ac>)
 800e264:	f003 fc3a 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d106      	bne.n	800e27c <tcp_output_segment+0x34>
 800e26e:	4b5f      	ldr	r3, [pc, #380]	; (800e3ec <tcp_output_segment+0x1a4>)
 800e270:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e274:	4960      	ldr	r1, [pc, #384]	; (800e3f8 <tcp_output_segment+0x1b0>)
 800e276:	485f      	ldr	r0, [pc, #380]	; (800e3f4 <tcp_output_segment+0x1ac>)
 800e278:	f003 fc30 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d106      	bne.n	800e290 <tcp_output_segment+0x48>
 800e282:	4b5a      	ldr	r3, [pc, #360]	; (800e3ec <tcp_output_segment+0x1a4>)
 800e284:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e288:	495c      	ldr	r1, [pc, #368]	; (800e3fc <tcp_output_segment+0x1b4>)
 800e28a:	485a      	ldr	r0, [pc, #360]	; (800e3f4 <tcp_output_segment+0x1ac>)
 800e28c:	f003 fc26 	bl	8011adc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff ffb9 	bl	800e208 <tcp_output_segment_busy>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e29c:	2300      	movs	r3, #0
 800e29e:	e0a0      	b.n	800e3e2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	68dc      	ldr	r4, [r3, #12]
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f7f8 ffc3 	bl	8007234 <lwip_htonl>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	68dc      	ldr	r4, [r3, #12]
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f7f8 ffa5 	bl	800720a <lwip_htons>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e2cc:	441a      	add	r2, r3
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	3314      	adds	r3, #20
 800e2d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	7a9b      	ldrb	r3, [r3, #10]
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d015      	beq.n	800e312 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	6879      	ldr	r1, [r7, #4]
 800e2ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e2f2:	f7fc fa33 	bl	800a75c <tcp_eff_send_mss_netif>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2fa:	8b7b      	ldrh	r3, [r7, #26]
 800e2fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e300:	4618      	mov	r0, r3
 800e302:	f7f8 ff97 	bl	8007234 <lwip_htonl>
 800e306:	4602      	mov	r2, r0
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	3304      	adds	r3, #4
 800e310:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e318:	2b00      	cmp	r3, #0
 800e31a:	da02      	bge.n	800e322 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2200      	movs	r2, #0
 800e320:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10c      	bne.n	800e344 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e32a:	4b35      	ldr	r3, [pc, #212]	; (800e400 <tcp_output_segment+0x1b8>)
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	4618      	mov	r0, r3
 800e33a:	f7f8 ff7b 	bl	8007234 <lwip_htonl>
 800e33e:	4602      	mov	r2, r0
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	461a      	mov	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	8959      	ldrh	r1, [r3, #10]
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	8b3a      	ldrh	r2, [r7, #24]
 800e360:	1a8a      	subs	r2, r1, r2
 800e362:	b292      	uxth	r2, r2
 800e364:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	8919      	ldrh	r1, [r3, #8]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	8b3a      	ldrh	r2, [r7, #24]
 800e372:	1a8a      	subs	r2, r1, r2
 800e374:	b292      	uxth	r2, r2
 800e376:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	68fa      	ldr	r2, [r7, #12]
 800e37e:	68d2      	ldr	r2, [r2, #12]
 800e380:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	741a      	strb	r2, [r3, #16]
 800e38a:	2200      	movs	r2, #0
 800e38c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	f103 0214 	add.w	r2, r3, #20
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	7a9b      	ldrb	r3, [r3, #10]
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	f003 0304 	and.w	r3, r3, #4
 800e3a0:	4413      	add	r3, r2
 800e3a2:	69fa      	ldr	r2, [r7, #28]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d006      	beq.n	800e3b6 <tcp_output_segment+0x16e>
 800e3a8:	4b10      	ldr	r3, [pc, #64]	; (800e3ec <tcp_output_segment+0x1a4>)
 800e3aa:	f240 621c 	movw	r2, #1564	; 0x61c
 800e3ae:	4915      	ldr	r1, [pc, #84]	; (800e404 <tcp_output_segment+0x1bc>)
 800e3b0:	4810      	ldr	r0, [pc, #64]	; (800e3f4 <tcp_output_segment+0x1ac>)
 800e3b2:	f003 fb93 	bl	8011adc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6858      	ldr	r0, [r3, #4]
 800e3ba:	68b9      	ldr	r1, [r7, #8]
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	1d1c      	adds	r4, r3, #4
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	7add      	ldrb	r5, [r3, #11]
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	7a9b      	ldrb	r3, [r3, #10]
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	9202      	str	r2, [sp, #8]
 800e3cc:	2206      	movs	r2, #6
 800e3ce:	9201      	str	r2, [sp, #4]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	462b      	mov	r3, r5
 800e3d4:	4622      	mov	r2, r4
 800e3d6:	f002 fa3f 	bl	8010858 <ip4_output_if>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e3de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3720      	adds	r7, #32
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08015af0 	.word	0x08015af0
 800e3f0:	080160b4 	.word	0x080160b4
 800e3f4:	08015b44 	.word	0x08015b44
 800e3f8:	080160d4 	.word	0x080160d4
 800e3fc:	080160f4 	.word	0x080160f4
 800e400:	20006fb4 	.word	0x20006fb4
 800e404:	08016118 	.word	0x08016118

0800e408 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e408:	b5b0      	push	{r4, r5, r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d106      	bne.n	800e424 <tcp_rexmit_rto_prepare+0x1c>
 800e416:	4b31      	ldr	r3, [pc, #196]	; (800e4dc <tcp_rexmit_rto_prepare+0xd4>)
 800e418:	f240 6263 	movw	r2, #1635	; 0x663
 800e41c:	4930      	ldr	r1, [pc, #192]	; (800e4e0 <tcp_rexmit_rto_prepare+0xd8>)
 800e41e:	4831      	ldr	r0, [pc, #196]	; (800e4e4 <tcp_rexmit_rto_prepare+0xdc>)
 800e420:	f003 fb5c 	bl	8011adc <iprintf>

  if (pcb->unacked == NULL) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d102      	bne.n	800e432 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e42c:	f06f 0305 	mvn.w	r3, #5
 800e430:	e050      	b.n	800e4d4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	e00b      	b.n	800e452 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f7ff fee4 	bl	800e208 <tcp_output_segment_busy>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e446:	f06f 0305 	mvn.w	r3, #5
 800e44a:	e043      	b.n	800e4d4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1ef      	bne.n	800e43a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f7ff fed4 	bl	800e208 <tcp_output_segment_busy>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d002      	beq.n	800e46c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e466:	f06f 0305 	mvn.w	r3, #5
 800e46a:	e033      	b.n	800e4d4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8b5b      	ldrh	r3, [r3, #26]
 800e486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	4618      	mov	r0, r3
 800e498:	f7f8 fecc 	bl	8007234 <lwip_htonl>
 800e49c:	4604      	mov	r4, r0
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	891b      	ldrh	r3, [r3, #8]
 800e4a2:	461d      	mov	r5, r3
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	899b      	ldrh	r3, [r3, #12]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7f8 feac 	bl	800720a <lwip_htons>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	f003 0303 	and.w	r3, r3, #3
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <tcp_rexmit_rto_prepare+0xba>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e000      	b.n	800e4c4 <tcp_rexmit_rto_prepare+0xbc>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	442b      	add	r3, r5
 800e4c6:	18e2      	adds	r2, r4, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e4d2:	2300      	movs	r3, #0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bdb0      	pop	{r4, r5, r7, pc}
 800e4dc:	08015af0 	.word	0x08015af0
 800e4e0:	0801612c 	.word	0x0801612c
 800e4e4:	08015b44 	.word	0x08015b44

0800e4e8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d106      	bne.n	800e504 <tcp_rexmit_rto_commit+0x1c>
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <tcp_rexmit_rto_commit+0x44>)
 800e4f8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e4fc:	490c      	ldr	r1, [pc, #48]	; (800e530 <tcp_rexmit_rto_commit+0x48>)
 800e4fe:	480d      	ldr	r0, [pc, #52]	; (800e534 <tcp_rexmit_rto_commit+0x4c>)
 800e500:	f003 faec 	bl	8011adc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e50a:	2bff      	cmp	r3, #255	; 0xff
 800e50c:	d007      	beq.n	800e51e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e514:	3301      	adds	r3, #1
 800e516:	b2da      	uxtb	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7ff fc7a 	bl	800de18 <tcp_output>
}
 800e524:	bf00      	nop
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	08015af0 	.word	0x08015af0
 800e530:	08016150 	.word	0x08016150
 800e534:	08015b44 	.word	0x08015b44

0800e538 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d106      	bne.n	800e554 <tcp_rexmit_rto+0x1c>
 800e546:	4b0a      	ldr	r3, [pc, #40]	; (800e570 <tcp_rexmit_rto+0x38>)
 800e548:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e54c:	4909      	ldr	r1, [pc, #36]	; (800e574 <tcp_rexmit_rto+0x3c>)
 800e54e:	480a      	ldr	r0, [pc, #40]	; (800e578 <tcp_rexmit_rto+0x40>)
 800e550:	f003 fac4 	bl	8011adc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff ff57 	bl	800e408 <tcp_rexmit_rto_prepare>
 800e55a:	4603      	mov	r3, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d102      	bne.n	800e566 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff ffc1 	bl	800e4e8 <tcp_rexmit_rto_commit>
  }
}
 800e566:	bf00      	nop
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	08015af0 	.word	0x08015af0
 800e574:	08016174 	.word	0x08016174
 800e578:	08015b44 	.word	0x08015b44

0800e57c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e57c:	b590      	push	{r4, r7, lr}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <tcp_rexmit+0x1c>
 800e58a:	4b2f      	ldr	r3, [pc, #188]	; (800e648 <tcp_rexmit+0xcc>)
 800e58c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e590:	492e      	ldr	r1, [pc, #184]	; (800e64c <tcp_rexmit+0xd0>)
 800e592:	482f      	ldr	r0, [pc, #188]	; (800e650 <tcp_rexmit+0xd4>)
 800e594:	f003 faa2 	bl	8011adc <iprintf>

  if (pcb->unacked == NULL) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e5a0:	f06f 0305 	mvn.w	r3, #5
 800e5a4:	e04c      	b.n	800e640 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e5ac:	68b8      	ldr	r0, [r7, #8]
 800e5ae:	f7ff fe2b 	bl	800e208 <tcp_output_segment_busy>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d002      	beq.n	800e5be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e5b8:	f06f 0305 	mvn.w	r3, #5
 800e5bc:	e040      	b.n	800e640 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	336c      	adds	r3, #108	; 0x6c
 800e5ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5cc:	e002      	b.n	800e5d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d011      	beq.n	800e600 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7f8 fe25 	bl	8007234 <lwip_htonl>
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7f8 fe1e 	bl	8007234 <lwip_htonl>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	dbe6      	blt.n	800e5ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d103      	bne.n	800e61e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e624:	2bff      	cmp	r3, #255	; 0xff
 800e626:	d007      	beq.n	800e638 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e62e:	3301      	adds	r3, #1
 800e630:	b2da      	uxtb	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	bd90      	pop	{r4, r7, pc}
 800e648:	08015af0 	.word	0x08015af0
 800e64c:	08016190 	.word	0x08016190
 800e650:	08015b44 	.word	0x08015b44

0800e654 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d106      	bne.n	800e670 <tcp_rexmit_fast+0x1c>
 800e662:	4b2f      	ldr	r3, [pc, #188]	; (800e720 <tcp_rexmit_fast+0xcc>)
 800e664:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e668:	492e      	ldr	r1, [pc, #184]	; (800e724 <tcp_rexmit_fast+0xd0>)
 800e66a:	482f      	ldr	r0, [pc, #188]	; (800e728 <tcp_rexmit_fast+0xd4>)
 800e66c:	f003 fa36 	bl	8011adc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e674:	2b00      	cmp	r3, #0
 800e676:	d04f      	beq.n	800e718 <tcp_rexmit_fast+0xc4>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	8b5b      	ldrh	r3, [r3, #26]
 800e67c:	f003 0304 	and.w	r3, r3, #4
 800e680:	2b00      	cmp	r3, #0
 800e682:	d149      	bne.n	800e718 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff ff79 	bl	800e57c <tcp_rexmit>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d143      	bne.n	800e718 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d208      	bcs.n	800e6b2 <tcp_rexmit_fast+0x5e>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	da00      	bge.n	800e6ac <tcp_rexmit_fast+0x58>
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	105b      	asrs	r3, r3, #1
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	e007      	b.n	800e6c2 <tcp_rexmit_fast+0x6e>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	da00      	bge.n	800e6be <tcp_rexmit_fast+0x6a>
 800e6bc:	3301      	adds	r3, #1
 800e6be:	105b      	asrs	r3, r3, #1
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d206      	bcs.n	800e6e8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	0049      	lsls	r1, r1, #1
 800e6f6:	440b      	add	r3, r1
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	4413      	add	r3, r2
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	8b5b      	ldrh	r3, [r3, #26]
 800e708:	f043 0304 	orr.w	r3, r3, #4
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	08015af0 	.word	0x08015af0
 800e724:	080161a8 	.word	0x080161a8
 800e728:	08015b44 	.word	0x08015b44

0800e72c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	460b      	mov	r3, r1
 800e738:	817b      	strh	r3, [r7, #10]
 800e73a:	4613      	mov	r3, r2
 800e73c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e73e:	897a      	ldrh	r2, [r7, #10]
 800e740:	893b      	ldrh	r3, [r7, #8]
 800e742:	4413      	add	r3, r2
 800e744:	b29b      	uxth	r3, r3
 800e746:	3314      	adds	r3, #20
 800e748:	b29b      	uxth	r3, r3
 800e74a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e74e:	4619      	mov	r1, r3
 800e750:	2022      	movs	r0, #34	; 0x22
 800e752:	f7f9 fd15 	bl	8008180 <pbuf_alloc>
 800e756:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d04e      	beq.n	800e7fc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	895b      	ldrh	r3, [r3, #10]
 800e762:	461a      	mov	r2, r3
 800e764:	897b      	ldrh	r3, [r7, #10]
 800e766:	3314      	adds	r3, #20
 800e768:	429a      	cmp	r2, r3
 800e76a:	da06      	bge.n	800e77a <tcp_output_alloc_header_common+0x4e>
 800e76c:	4b26      	ldr	r3, [pc, #152]	; (800e808 <tcp_output_alloc_header_common+0xdc>)
 800e76e:	f240 7224 	movw	r2, #1828	; 0x724
 800e772:	4926      	ldr	r1, [pc, #152]	; (800e80c <tcp_output_alloc_header_common+0xe0>)
 800e774:	4826      	ldr	r0, [pc, #152]	; (800e810 <tcp_output_alloc_header_common+0xe4>)
 800e776:	f003 f9b1 	bl	8011adc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e780:	8c3b      	ldrh	r3, [r7, #32]
 800e782:	4618      	mov	r0, r3
 800e784:	f7f8 fd41 	bl	800720a <lwip_htons>
 800e788:	4603      	mov	r3, r0
 800e78a:	461a      	mov	r2, r3
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e792:	4618      	mov	r0, r3
 800e794:	f7f8 fd39 	bl	800720a <lwip_htons>
 800e798:	4603      	mov	r3, r0
 800e79a:	461a      	mov	r2, r3
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f7f8 fd44 	bl	8007234 <lwip_htonl>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e7b2:	897b      	ldrh	r3, [r7, #10]
 800e7b4:	089b      	lsrs	r3, r3, #2
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	3305      	adds	r3, #5
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	031b      	lsls	r3, r3, #12
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7f8 fd1d 	bl	800720a <lwip_htons>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e7d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7f8 fd15 	bl	800720a <lwip_htons>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	741a      	strb	r2, [r3, #16]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	749a      	strb	r2, [r3, #18]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e7fc:	697b      	ldr	r3, [r7, #20]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3718      	adds	r7, #24
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	08015af0 	.word	0x08015af0
 800e80c:	080161c8 	.word	0x080161c8
 800e810:	08015b44 	.word	0x08015b44

0800e814 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e814:	b5b0      	push	{r4, r5, r7, lr}
 800e816:	b08a      	sub	sp, #40	; 0x28
 800e818:	af04      	add	r7, sp, #16
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	607b      	str	r3, [r7, #4]
 800e81e:	460b      	mov	r3, r1
 800e820:	817b      	strh	r3, [r7, #10]
 800e822:	4613      	mov	r3, r2
 800e824:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <tcp_output_alloc_header+0x26>
 800e82c:	4b15      	ldr	r3, [pc, #84]	; (800e884 <tcp_output_alloc_header+0x70>)
 800e82e:	f240 7242 	movw	r2, #1858	; 0x742
 800e832:	4915      	ldr	r1, [pc, #84]	; (800e888 <tcp_output_alloc_header+0x74>)
 800e834:	4815      	ldr	r0, [pc, #84]	; (800e88c <tcp_output_alloc_header+0x78>)
 800e836:	f003 f951 	bl	8011adc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	8adb      	ldrh	r3, [r3, #22]
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	8b12      	ldrh	r2, [r2, #24]
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e84a:	893d      	ldrh	r5, [r7, #8]
 800e84c:	897c      	ldrh	r4, [r7, #10]
 800e84e:	9103      	str	r1, [sp, #12]
 800e850:	2110      	movs	r1, #16
 800e852:	9102      	str	r1, [sp, #8]
 800e854:	9201      	str	r2, [sp, #4]
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	462a      	mov	r2, r5
 800e85c:	4621      	mov	r1, r4
 800e85e:	f7ff ff65 	bl	800e72c <tcp_output_alloc_header_common>
 800e862:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d006      	beq.n	800e878 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e872:	441a      	add	r2, r3
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e878:	697b      	ldr	r3, [r7, #20]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3718      	adds	r7, #24
 800e87e:	46bd      	mov	sp, r7
 800e880:	bdb0      	pop	{r4, r5, r7, pc}
 800e882:	bf00      	nop
 800e884:	08015af0 	.word	0x08015af0
 800e888:	080161f8 	.word	0x080161f8
 800e88c:	08015b44 	.word	0x08015b44

0800e890 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b088      	sub	sp, #32
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4611      	mov	r1, r2
 800e89c:	461a      	mov	r2, r3
 800e89e:	460b      	mov	r3, r1
 800e8a0:	71fb      	strb	r3, [r7, #7]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d106      	bne.n	800e8be <tcp_output_fill_options+0x2e>
 800e8b0:	4b13      	ldr	r3, [pc, #76]	; (800e900 <tcp_output_fill_options+0x70>)
 800e8b2:	f240 7256 	movw	r2, #1878	; 0x756
 800e8b6:	4913      	ldr	r1, [pc, #76]	; (800e904 <tcp_output_fill_options+0x74>)
 800e8b8:	4813      	ldr	r0, [pc, #76]	; (800e908 <tcp_output_fill_options+0x78>)
 800e8ba:	f003 f90f 	bl	8011adc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	3314      	adds	r3, #20
 800e8c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	f103 0214 	add.w	r2, r3, #20
 800e8d0:	8bfb      	ldrh	r3, [r7, #30]
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	f003 0304 	and.w	r3, r3, #4
 800e8de:	440b      	add	r3, r1
 800e8e0:	4413      	add	r3, r2
 800e8e2:	697a      	ldr	r2, [r7, #20]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d006      	beq.n	800e8f6 <tcp_output_fill_options+0x66>
 800e8e8:	4b05      	ldr	r3, [pc, #20]	; (800e900 <tcp_output_fill_options+0x70>)
 800e8ea:	f240 7275 	movw	r2, #1909	; 0x775
 800e8ee:	4907      	ldr	r1, [pc, #28]	; (800e90c <tcp_output_fill_options+0x7c>)
 800e8f0:	4805      	ldr	r0, [pc, #20]	; (800e908 <tcp_output_fill_options+0x78>)
 800e8f2:	f003 f8f3 	bl	8011adc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e8f6:	bf00      	nop
 800e8f8:	3720      	adds	r7, #32
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	08015af0 	.word	0x08015af0
 800e904:	08016220 	.word	0x08016220
 800e908:	08015b44 	.word	0x08015b44
 800e90c:	08016118 	.word	0x08016118

0800e910 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	; 0x28
 800e914:	af04      	add	r7, sp, #16
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
 800e91c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d106      	bne.n	800e932 <tcp_output_control_segment+0x22>
 800e924:	4b1c      	ldr	r3, [pc, #112]	; (800e998 <tcp_output_control_segment+0x88>)
 800e926:	f240 7287 	movw	r2, #1927	; 0x787
 800e92a:	491c      	ldr	r1, [pc, #112]	; (800e99c <tcp_output_control_segment+0x8c>)
 800e92c:	481c      	ldr	r0, [pc, #112]	; (800e9a0 <tcp_output_control_segment+0x90>)
 800e92e:	f003 f8d5 	bl	8011adc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f7fe fad4 	bl	800cee4 <tcp_route>
 800e93c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d102      	bne.n	800e94a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e944:	23fc      	movs	r3, #252	; 0xfc
 800e946:	75fb      	strb	r3, [r7, #23]
 800e948:	e01c      	b.n	800e984 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d006      	beq.n	800e95e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	7adb      	ldrb	r3, [r3, #11]
 800e954:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	7a9b      	ldrb	r3, [r3, #10]
 800e95a:	757b      	strb	r3, [r7, #21]
 800e95c:	e003      	b.n	800e966 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e95e:	23ff      	movs	r3, #255	; 0xff
 800e960:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e966:	7dba      	ldrb	r2, [r7, #22]
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	9302      	str	r3, [sp, #8]
 800e96c:	2306      	movs	r3, #6
 800e96e:	9301      	str	r3, [sp, #4]
 800e970:	7d7b      	ldrb	r3, [r7, #21]
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	4613      	mov	r3, r2
 800e976:	683a      	ldr	r2, [r7, #0]
 800e978:	6879      	ldr	r1, [r7, #4]
 800e97a:	68b8      	ldr	r0, [r7, #8]
 800e97c:	f001 ff6c 	bl	8010858 <ip4_output_if>
 800e980:	4603      	mov	r3, r0
 800e982:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e984:	68b8      	ldr	r0, [r7, #8]
 800e986:	f7f9 fedb 	bl	8008740 <pbuf_free>
  return err;
 800e98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	08015af0 	.word	0x08015af0
 800e99c:	08016248 	.word	0x08016248
 800e9a0:	08015b44 	.word	0x08015b44

0800e9a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e9a4:	b590      	push	{r4, r7, lr}
 800e9a6:	b08b      	sub	sp, #44	; 0x2c
 800e9a8:	af04      	add	r7, sp, #16
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d106      	bne.n	800e9c6 <tcp_rst+0x22>
 800e9b8:	4b1f      	ldr	r3, [pc, #124]	; (800ea38 <tcp_rst+0x94>)
 800e9ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e9be:	491f      	ldr	r1, [pc, #124]	; (800ea3c <tcp_rst+0x98>)
 800e9c0:	481f      	ldr	r0, [pc, #124]	; (800ea40 <tcp_rst+0x9c>)
 800e9c2:	f003 f88b 	bl	8011adc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d106      	bne.n	800e9da <tcp_rst+0x36>
 800e9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ea38 <tcp_rst+0x94>)
 800e9ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e9d2:	491c      	ldr	r1, [pc, #112]	; (800ea44 <tcp_rst+0xa0>)
 800e9d4:	481a      	ldr	r0, [pc, #104]	; (800ea40 <tcp_rst+0x9c>)
 800e9d6:	f003 f881 	bl	8011adc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9da:	2300      	movs	r3, #0
 800e9dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e9de:	f246 0308 	movw	r3, #24584	; 0x6008
 800e9e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e9e4:	7dfb      	ldrb	r3, [r7, #23]
 800e9e6:	b29c      	uxth	r4, r3
 800e9e8:	68b8      	ldr	r0, [r7, #8]
 800e9ea:	f7f8 fc23 	bl	8007234 <lwip_htonl>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	8abb      	ldrh	r3, [r7, #20]
 800e9f2:	9303      	str	r3, [sp, #12]
 800e9f4:	2314      	movs	r3, #20
 800e9f6:	9302      	str	r3, [sp, #8]
 800e9f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e9fa:	9301      	str	r3, [sp, #4]
 800e9fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	4613      	mov	r3, r2
 800ea02:	2200      	movs	r2, #0
 800ea04:	4621      	mov	r1, r4
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff fe90 	bl	800e72c <tcp_output_alloc_header_common>
 800ea0c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d00c      	beq.n	800ea2e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	2200      	movs	r2, #0
 800ea18:	6939      	ldr	r1, [r7, #16]
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f7ff ff38 	bl	800e890 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	6939      	ldr	r1, [r7, #16]
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f7ff ff72 	bl	800e910 <tcp_output_control_segment>
 800ea2c:	e000      	b.n	800ea30 <tcp_rst+0x8c>
    return;
 800ea2e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd90      	pop	{r4, r7, pc}
 800ea36:	bf00      	nop
 800ea38:	08015af0 	.word	0x08015af0
 800ea3c:	08016274 	.word	0x08016274
 800ea40:	08015b44 	.word	0x08015b44
 800ea44:	08016290 	.word	0x08016290

0800ea48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ea48:	b590      	push	{r4, r7, lr}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <tcp_send_empty_ack+0x24>
 800ea5e:	4b28      	ldr	r3, [pc, #160]	; (800eb00 <tcp_send_empty_ack+0xb8>)
 800ea60:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ea64:	4927      	ldr	r1, [pc, #156]	; (800eb04 <tcp_send_empty_ack+0xbc>)
 800ea66:	4828      	ldr	r0, [pc, #160]	; (800eb08 <tcp_send_empty_ack+0xc0>)
 800ea68:	f003 f838 	bl	8011adc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea6c:	7dfb      	ldrb	r3, [r7, #23]
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	f003 0304 	and.w	r3, r3, #4
 800ea76:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ea78:	7d7b      	ldrb	r3, [r7, #21]
 800ea7a:	b29c      	uxth	r4, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f8 fbd7 	bl	8007234 <lwip_htonl>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2200      	movs	r2, #0
 800ea8a:	4621      	mov	r1, r4
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f7ff fec1 	bl	800e814 <tcp_output_alloc_header>
 800ea92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d109      	bne.n	800eaae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	8b5b      	ldrh	r3, [r3, #26]
 800ea9e:	f043 0303 	orr.w	r3, r3, #3
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800eaa8:	f06f 0301 	mvn.w	r3, #1
 800eaac:	e023      	b.n	800eaf6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800eaae:	7dbb      	ldrb	r3, [r7, #22]
 800eab0:	7dfa      	ldrb	r2, [r7, #23]
 800eab2:	6939      	ldr	r1, [r7, #16]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7ff feeb 	bl	800e890 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
 800eac0:	6939      	ldr	r1, [r7, #16]
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7ff ff24 	bl	800e910 <tcp_output_control_segment>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d007      	beq.n	800eae4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	8b5b      	ldrh	r3, [r3, #26]
 800ead8:	f043 0303 	orr.w	r3, r3, #3
 800eadc:	b29a      	uxth	r2, r3
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	835a      	strh	r2, [r3, #26]
 800eae2:	e006      	b.n	800eaf2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8b5b      	ldrh	r3, [r3, #26]
 800eae8:	f023 0303 	bic.w	r3, r3, #3
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800eaf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd90      	pop	{r4, r7, pc}
 800eafe:	bf00      	nop
 800eb00:	08015af0 	.word	0x08015af0
 800eb04:	080162ac 	.word	0x080162ac
 800eb08:	08015b44 	.word	0x08015b44

0800eb0c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eb0c:	b590      	push	{r4, r7, lr}
 800eb0e:	b087      	sub	sp, #28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb14:	2300      	movs	r3, #0
 800eb16:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d106      	bne.n	800eb2c <tcp_keepalive+0x20>
 800eb1e:	4b18      	ldr	r3, [pc, #96]	; (800eb80 <tcp_keepalive+0x74>)
 800eb20:	f640 0224 	movw	r2, #2084	; 0x824
 800eb24:	4917      	ldr	r1, [pc, #92]	; (800eb84 <tcp_keepalive+0x78>)
 800eb26:	4818      	ldr	r0, [pc, #96]	; (800eb88 <tcp_keepalive+0x7c>)
 800eb28:	f002 ffd8 	bl	8011adc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
 800eb2e:	b29c      	uxth	r4, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb34:	3b01      	subs	r3, #1
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f8 fb7c 	bl	8007234 <lwip_htonl>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2200      	movs	r2, #0
 800eb40:	4621      	mov	r1, r4
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff fe66 	bl	800e814 <tcp_output_alloc_header>
 800eb48:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d102      	bne.n	800eb56 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295
 800eb54:	e010      	b.n	800eb78 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb56:	7dfb      	ldrb	r3, [r7, #23]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	6939      	ldr	r1, [r7, #16]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff fe97 	bl	800e890 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	3304      	adds	r3, #4
 800eb68:	6939      	ldr	r1, [r7, #16]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fed0 	bl	800e910 <tcp_output_control_segment>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	371c      	adds	r7, #28
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd90      	pop	{r4, r7, pc}
 800eb80:	08015af0 	.word	0x08015af0
 800eb84:	080162cc 	.word	0x080162cc
 800eb88:	08015b44 	.word	0x08015b44

0800eb8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b08b      	sub	sp, #44	; 0x2c
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb94:	2300      	movs	r3, #0
 800eb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d106      	bne.n	800ebae <tcp_zero_window_probe+0x22>
 800eba0:	4b4c      	ldr	r3, [pc, #304]	; (800ecd4 <tcp_zero_window_probe+0x148>)
 800eba2:	f640 024f 	movw	r2, #2127	; 0x84f
 800eba6:	494c      	ldr	r1, [pc, #304]	; (800ecd8 <tcp_zero_window_probe+0x14c>)
 800eba8:	484c      	ldr	r0, [pc, #304]	; (800ecdc <tcp_zero_window_probe+0x150>)
 800ebaa:	f002 ff97 	bl	8011adc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e086      	b.n	800eccc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ebc4:	2bff      	cmp	r3, #255	; 0xff
 800ebc6:	d007      	beq.n	800ebd8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ebce:	3301      	adds	r3, #1
 800ebd0:	b2da      	uxtb	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	899b      	ldrh	r3, [r3, #12]
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f8 fb12 	bl	800720a <lwip_htons>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	f003 0301 	and.w	r3, r3, #1
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d005      	beq.n	800ebfe <tcp_zero_window_probe+0x72>
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	891b      	ldrh	r3, [r3, #8]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d101      	bne.n	800ebfe <tcp_zero_window_probe+0x72>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e000      	b.n	800ec00 <tcp_zero_window_probe+0x74>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ec02:	7ffb      	ldrb	r3, [r7, #31]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bf0c      	ite	eq
 800ec08:	2301      	moveq	r3, #1
 800ec0a:	2300      	movne	r3, #0
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ec10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec14:	b299      	uxth	r1, r3
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	8bba      	ldrh	r2, [r7, #28]
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff fdf8 	bl	800e814 <tcp_output_alloc_header>
 800ec24:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d102      	bne.n	800ec32 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ec2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec30:	e04c      	b.n	800eccc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ec38:	7ffb      	ldrb	r3, [r7, #31]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d011      	beq.n	800ec62 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	899b      	ldrh	r3, [r3, #12]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	b21b      	sxth	r3, r3
 800ec46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec4a:	b21c      	sxth	r4, r3
 800ec4c:	2011      	movs	r0, #17
 800ec4e:	f7f8 fadc 	bl	800720a <lwip_htons>
 800ec52:	4603      	mov	r3, r0
 800ec54:	b21b      	sxth	r3, r3
 800ec56:	4323      	orrs	r3, r4
 800ec58:	b21b      	sxth	r3, r3
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	819a      	strh	r2, [r3, #12]
 800ec60:	e010      	b.n	800ec84 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	3314      	adds	r3, #20
 800ec68:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ec6a:	6a3b      	ldr	r3, [r7, #32]
 800ec6c:	6858      	ldr	r0, [r3, #4]
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	891a      	ldrh	r2, [r3, #8]
 800ec74:	6a3b      	ldr	r3, [r7, #32]
 800ec76:	891b      	ldrh	r3, [r3, #8]
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	6939      	ldr	r1, [r7, #16]
 800ec80:	f7f9 ff58 	bl	8008b34 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7f8 fad2 	bl	8007234 <lwip_htonl>
 800ec90:	4603      	mov	r3, r0
 800ec92:	3301      	adds	r3, #1
 800ec94:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	da02      	bge.n	800eca8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecac:	2200      	movs	r2, #0
 800ecae:	69b9      	ldr	r1, [r7, #24]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff fded 	bl	800e890 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	69b9      	ldr	r1, [r7, #24]
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff fe26 	bl	800e910 <tcp_output_control_segment>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ecc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	372c      	adds	r7, #44	; 0x2c
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd90      	pop	{r4, r7, pc}
 800ecd4:	08015af0 	.word	0x08015af0
 800ecd8:	080162e8 	.word	0x080162e8
 800ecdc:	08015b44 	.word	0x08015b44

0800ece0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ece8:	f7fa f812 	bl	8008d10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ecec:	4b0a      	ldr	r3, [pc, #40]	; (800ed18 <tcpip_tcp_timer+0x38>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d103      	bne.n	800ecfc <tcpip_tcp_timer+0x1c>
 800ecf4:	4b09      	ldr	r3, [pc, #36]	; (800ed1c <tcpip_tcp_timer+0x3c>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	4908      	ldr	r1, [pc, #32]	; (800ed20 <tcpip_tcp_timer+0x40>)
 800ed00:	20fa      	movs	r0, #250	; 0xfa
 800ed02:	f000 f8f1 	bl	800eee8 <sys_timeout>
 800ed06:	e002      	b.n	800ed0e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ed08:	4b06      	ldr	r3, [pc, #24]	; (800ed24 <tcpip_tcp_timer+0x44>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	601a      	str	r2, [r3, #0]
  }
}
 800ed0e:	bf00      	nop
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	20006fb0 	.word	0x20006fb0
 800ed1c:	20006fc0 	.word	0x20006fc0
 800ed20:	0800ece1 	.word	0x0800ece1
 800ed24:	20000298 	.word	0x20000298

0800ed28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ed2c:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <tcp_timer_needed+0x30>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10f      	bne.n	800ed54 <tcp_timer_needed+0x2c>
 800ed34:	4b09      	ldr	r3, [pc, #36]	; (800ed5c <tcp_timer_needed+0x34>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d103      	bne.n	800ed44 <tcp_timer_needed+0x1c>
 800ed3c:	4b08      	ldr	r3, [pc, #32]	; (800ed60 <tcp_timer_needed+0x38>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d007      	beq.n	800ed54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ed44:	4b04      	ldr	r3, [pc, #16]	; (800ed58 <tcp_timer_needed+0x30>)
 800ed46:	2201      	movs	r2, #1
 800ed48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	4905      	ldr	r1, [pc, #20]	; (800ed64 <tcp_timer_needed+0x3c>)
 800ed4e:	20fa      	movs	r0, #250	; 0xfa
 800ed50:	f000 f8ca 	bl	800eee8 <sys_timeout>
  }
}
 800ed54:	bf00      	nop
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20000298 	.word	0x20000298
 800ed5c:	20006fb0 	.word	0x20006fb0
 800ed60:	20006fc0 	.word	0x20006fc0
 800ed64:	0800ece1 	.word	0x0800ece1

0800ed68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ed74:	2006      	movs	r0, #6
 800ed76:	f7f8 fe9d 	bl	8007ab4 <memp_malloc>
 800ed7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d109      	bne.n	800ed96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d151      	bne.n	800ee2c <sys_timeout_abs+0xc4>
 800ed88:	4b2a      	ldr	r3, [pc, #168]	; (800ee34 <sys_timeout_abs+0xcc>)
 800ed8a:	22be      	movs	r2, #190	; 0xbe
 800ed8c:	492a      	ldr	r1, [pc, #168]	; (800ee38 <sys_timeout_abs+0xd0>)
 800ed8e:	482b      	ldr	r0, [pc, #172]	; (800ee3c <sys_timeout_abs+0xd4>)
 800ed90:	f002 fea4 	bl	8011adc <iprintf>
    return;
 800ed94:	e04a      	b.n	800ee2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800edae:	4b24      	ldr	r3, [pc, #144]	; (800ee40 <sys_timeout_abs+0xd8>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d103      	bne.n	800edbe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800edb6:	4a22      	ldr	r2, [pc, #136]	; (800ee40 <sys_timeout_abs+0xd8>)
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6013      	str	r3, [r2, #0]
    return;
 800edbc:	e037      	b.n	800ee2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	685a      	ldr	r2, [r3, #4]
 800edc2:	4b1f      	ldr	r3, [pc, #124]	; (800ee40 <sys_timeout_abs+0xd8>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	0fdb      	lsrs	r3, r3, #31
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d007      	beq.n	800ede6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800edd6:	4b1a      	ldr	r3, [pc, #104]	; (800ee40 <sys_timeout_abs+0xd8>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800edde:	4a18      	ldr	r2, [pc, #96]	; (800ee40 <sys_timeout_abs+0xd8>)
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	6013      	str	r3, [r2, #0]
 800ede4:	e023      	b.n	800ee2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ede6:	4b16      	ldr	r3, [pc, #88]	; (800ee40 <sys_timeout_abs+0xd8>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	617b      	str	r3, [r7, #20]
 800edec:	e01a      	b.n	800ee24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00b      	beq.n	800ee0e <sys_timeout_abs+0xa6>
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	0fdb      	lsrs	r3, r3, #31
 800ee04:	f003 0301 	and.w	r3, r3, #1
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d007      	beq.n	800ee1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	601a      	str	r2, [r3, #0]
        break;
 800ee1c:	e007      	b.n	800ee2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	617b      	str	r3, [r7, #20]
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1e1      	bne.n	800edee <sys_timeout_abs+0x86>
 800ee2a:	e000      	b.n	800ee2e <sys_timeout_abs+0xc6>
    return;
 800ee2c:	bf00      	nop
      }
    }
  }
}
 800ee2e:	3718      	adds	r7, #24
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	0801630c 	.word	0x0801630c
 800ee38:	08016340 	.word	0x08016340
 800ee3c:	08016380 	.word	0x08016380
 800ee40:	20000290 	.word	0x20000290

0800ee44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	4798      	blx	r3

  now = sys_now();
 800ee56:	f7f8 f9d1 	bl	80071fc <sys_now>
 800ee5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	4b0f      	ldr	r3, [pc, #60]	; (800eea0 <lwip_cyclic_timer+0x5c>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4413      	add	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ee68:	68fa      	ldr	r2, [r7, #12]
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	0fdb      	lsrs	r3, r3, #31
 800ee70:	f003 0301 	and.w	r3, r3, #1
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d009      	beq.n	800ee8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	4413      	add	r3, r2
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	4907      	ldr	r1, [pc, #28]	; (800eea4 <lwip_cyclic_timer+0x60>)
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff ff6e 	bl	800ed68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ee8c:	e004      	b.n	800ee98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	4904      	ldr	r1, [pc, #16]	; (800eea4 <lwip_cyclic_timer+0x60>)
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f7ff ff68 	bl	800ed68 <sys_timeout_abs>
}
 800ee98:	bf00      	nop
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	20000294 	.word	0x20000294
 800eea4:	0800ee45 	.word	0x0800ee45

0800eea8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eeae:	2301      	movs	r3, #1
 800eeb0:	607b      	str	r3, [r7, #4]
 800eeb2:	e00e      	b.n	800eed2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eeb4:	4a0a      	ldr	r2, [pc, #40]	; (800eee0 <sys_timeouts_init+0x38>)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	00db      	lsls	r3, r3, #3
 800eec0:	4a07      	ldr	r2, [pc, #28]	; (800eee0 <sys_timeouts_init+0x38>)
 800eec2:	4413      	add	r3, r2
 800eec4:	461a      	mov	r2, r3
 800eec6:	4907      	ldr	r1, [pc, #28]	; (800eee4 <sys_timeouts_init+0x3c>)
 800eec8:	f000 f80e 	bl	800eee8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3301      	adds	r3, #1
 800eed0:	607b      	str	r3, [r7, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d9ed      	bls.n	800eeb4 <sys_timeouts_init+0xc>
  }
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	08016eec 	.word	0x08016eec
 800eee4:	0800ee45 	.word	0x0800ee45

0800eee8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eefa:	d306      	bcc.n	800ef0a <sys_timeout+0x22>
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <sys_timeout+0x40>)
 800eefe:	f240 1229 	movw	r2, #297	; 0x129
 800ef02:	490a      	ldr	r1, [pc, #40]	; (800ef2c <sys_timeout+0x44>)
 800ef04:	480a      	ldr	r0, [pc, #40]	; (800ef30 <sys_timeout+0x48>)
 800ef06:	f002 fde9 	bl	8011adc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef0a:	f7f8 f977 	bl	80071fc <sys_now>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	4413      	add	r3, r2
 800ef14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	68b9      	ldr	r1, [r7, #8]
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	f7ff ff24 	bl	800ed68 <sys_timeout_abs>
#endif
}
 800ef20:	bf00      	nop
 800ef22:	3718      	adds	r7, #24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	0801630c 	.word	0x0801630c
 800ef2c:	080163a8 	.word	0x080163a8
 800ef30:	08016380 	.word	0x08016380

0800ef34 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ef3a:	f7f8 f95f 	bl	80071fc <sys_now>
 800ef3e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ef40:	4b1a      	ldr	r3, [pc, #104]	; (800efac <sys_check_timeouts+0x78>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d001      	beq.n	800ef4e <sys_check_timeouts+0x1a>
 800ef4a:	f7f9 f8c3 	bl	80080d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ef4e:	4b18      	ldr	r3, [pc, #96]	; (800efb0 <sys_check_timeouts+0x7c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d022      	beq.n	800efa0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	0fdb      	lsrs	r3, r3, #31
 800ef64:	f003 0301 	and.w	r3, r3, #1
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d11a      	bne.n	800efa4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a0f      	ldr	r2, [pc, #60]	; (800efb0 <sys_check_timeouts+0x7c>)
 800ef74:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	4a0b      	ldr	r2, [pc, #44]	; (800efb4 <sys_check_timeouts+0x80>)
 800ef88:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ef8a:	68b9      	ldr	r1, [r7, #8]
 800ef8c:	2006      	movs	r0, #6
 800ef8e:	f7f8 fddd 	bl	8007b4c <memp_free>
    if (handler != NULL) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d0d3      	beq.n	800ef40 <sys_check_timeouts+0xc>
      handler(arg);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6838      	ldr	r0, [r7, #0]
 800ef9c:	4798      	blx	r3
  do {
 800ef9e:	e7cf      	b.n	800ef40 <sys_check_timeouts+0xc>
      return;
 800efa0:	bf00      	nop
 800efa2:	e000      	b.n	800efa6 <sys_check_timeouts+0x72>
      return;
 800efa4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800efa6:	3710      	adds	r7, #16
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	20006fa8 	.word	0x20006fa8
 800efb0:	20000290 	.word	0x20000290
 800efb4:	20000294 	.word	0x20000294

0800efb8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800efbc:	f002 fda6 	bl	8011b0c <rand>
 800efc0:	4603      	mov	r3, r0
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800efc8:	b29b      	uxth	r3, r3
 800efca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800efce:	b29a      	uxth	r2, r3
 800efd0:	4b01      	ldr	r3, [pc, #4]	; (800efd8 <udp_init+0x20>)
 800efd2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800efd4:	bf00      	nop
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	20000020 	.word	0x20000020

0800efdc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4613      	mov	r3, r2
 800efe8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d105      	bne.n	800effc <udp_input_local_match+0x20>
 800eff0:	4b27      	ldr	r3, [pc, #156]	; (800f090 <udp_input_local_match+0xb4>)
 800eff2:	2287      	movs	r2, #135	; 0x87
 800eff4:	4927      	ldr	r1, [pc, #156]	; (800f094 <udp_input_local_match+0xb8>)
 800eff6:	4828      	ldr	r0, [pc, #160]	; (800f098 <udp_input_local_match+0xbc>)
 800eff8:	f002 fd70 	bl	8011adc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d105      	bne.n	800f00e <udp_input_local_match+0x32>
 800f002:	4b23      	ldr	r3, [pc, #140]	; (800f090 <udp_input_local_match+0xb4>)
 800f004:	2288      	movs	r2, #136	; 0x88
 800f006:	4925      	ldr	r1, [pc, #148]	; (800f09c <udp_input_local_match+0xc0>)
 800f008:	4823      	ldr	r0, [pc, #140]	; (800f098 <udp_input_local_match+0xbc>)
 800f00a:	f002 fd67 	bl	8011adc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	7a1b      	ldrb	r3, [r3, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00b      	beq.n	800f02e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	7a1a      	ldrb	r2, [r3, #8]
 800f01a:	4b21      	ldr	r3, [pc, #132]	; (800f0a0 <udp_input_local_match+0xc4>)
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f022:	3301      	adds	r3, #1
 800f024:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f026:	429a      	cmp	r2, r3
 800f028:	d001      	beq.n	800f02e <udp_input_local_match+0x52>
    return 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	e02b      	b.n	800f086 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d018      	beq.n	800f066 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d013      	beq.n	800f062 <udp_input_local_match+0x86>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00f      	beq.n	800f062 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f042:	4b17      	ldr	r3, [pc, #92]	; (800f0a0 <udp_input_local_match+0xc4>)
 800f044:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f04a:	d00a      	beq.n	800f062 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	4b13      	ldr	r3, [pc, #76]	; (800f0a0 <udp_input_local_match+0xc4>)
 800f052:	695b      	ldr	r3, [r3, #20]
 800f054:	405a      	eors	r2, r3
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	3308      	adds	r3, #8
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d110      	bne.n	800f084 <udp_input_local_match+0xa8>
          return 1;
 800f062:	2301      	movs	r3, #1
 800f064:	e00f      	b.n	800f086 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d009      	beq.n	800f080 <udp_input_local_match+0xa4>
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d005      	beq.n	800f080 <udp_input_local_match+0xa4>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	4b09      	ldr	r3, [pc, #36]	; (800f0a0 <udp_input_local_match+0xc4>)
 800f07a:	695b      	ldr	r3, [r3, #20]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d101      	bne.n	800f084 <udp_input_local_match+0xa8>
        return 1;
 800f080:	2301      	movs	r3, #1
 800f082:	e000      	b.n	800f086 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	080163f4 	.word	0x080163f4
 800f094:	08016424 	.word	0x08016424
 800f098:	08016448 	.word	0x08016448
 800f09c:	08016470 	.word	0x08016470
 800f0a0:	20003a6c 	.word	0x20003a6c

0800f0a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f0a4:	b590      	push	{r4, r7, lr}
 800f0a6:	b08d      	sub	sp, #52	; 0x34
 800f0a8:	af02      	add	r7, sp, #8
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d105      	bne.n	800f0c4 <udp_input+0x20>
 800f0b8:	4b7c      	ldr	r3, [pc, #496]	; (800f2ac <udp_input+0x208>)
 800f0ba:	22cf      	movs	r2, #207	; 0xcf
 800f0bc:	497c      	ldr	r1, [pc, #496]	; (800f2b0 <udp_input+0x20c>)
 800f0be:	487d      	ldr	r0, [pc, #500]	; (800f2b4 <udp_input+0x210>)
 800f0c0:	f002 fd0c 	bl	8011adc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d105      	bne.n	800f0d6 <udp_input+0x32>
 800f0ca:	4b78      	ldr	r3, [pc, #480]	; (800f2ac <udp_input+0x208>)
 800f0cc:	22d0      	movs	r2, #208	; 0xd0
 800f0ce:	497a      	ldr	r1, [pc, #488]	; (800f2b8 <udp_input+0x214>)
 800f0d0:	4878      	ldr	r0, [pc, #480]	; (800f2b4 <udp_input+0x210>)
 800f0d2:	f002 fd03 	bl	8011adc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	895b      	ldrh	r3, [r3, #10]
 800f0da:	2b07      	cmp	r3, #7
 800f0dc:	d803      	bhi.n	800f0e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f7f9 fb2e 	bl	8008740 <pbuf_free>
    goto end;
 800f0e4:	e0de      	b.n	800f2a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f0ec:	4b73      	ldr	r3, [pc, #460]	; (800f2bc <udp_input+0x218>)
 800f0ee:	695a      	ldr	r2, [r3, #20]
 800f0f0:	4b72      	ldr	r3, [pc, #456]	; (800f2bc <udp_input+0x218>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4610      	mov	r0, r2
 800f0f8:	f001 fc86 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	b29b      	uxth	r3, r3
 800f106:	4618      	mov	r0, r3
 800f108:	f7f8 f87f 	bl	800720a <lwip_htons>
 800f10c:	4603      	mov	r3, r0
 800f10e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	885b      	ldrh	r3, [r3, #2]
 800f114:	b29b      	uxth	r3, r3
 800f116:	4618      	mov	r0, r3
 800f118:	f7f8 f877 	bl	800720a <lwip_htons>
 800f11c:	4603      	mov	r3, r0
 800f11e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f124:	2300      	movs	r3, #0
 800f126:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f128:	2300      	movs	r3, #0
 800f12a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f12c:	4b64      	ldr	r3, [pc, #400]	; (800f2c0 <udp_input+0x21c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	627b      	str	r3, [r7, #36]	; 0x24
 800f132:	e054      	b.n	800f1de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	8a5b      	ldrh	r3, [r3, #18]
 800f138:	89fa      	ldrh	r2, [r7, #14]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d14a      	bne.n	800f1d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f13e:	7cfb      	ldrb	r3, [r7, #19]
 800f140:	461a      	mov	r2, r3
 800f142:	6839      	ldr	r1, [r7, #0]
 800f144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f146:	f7ff ff49 	bl	800efdc <udp_input_local_match>
 800f14a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d041      	beq.n	800f1d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	7c1b      	ldrb	r3, [r3, #16]
 800f154:	f003 0304 	and.w	r3, r3, #4
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d11d      	bne.n	800f198 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d102      	bne.n	800f168 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	61fb      	str	r3, [r7, #28]
 800f166:	e017      	b.n	800f198 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f168:	7cfb      	ldrb	r3, [r7, #19]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d014      	beq.n	800f198 <udp_input+0xf4>
 800f16e:	4b53      	ldr	r3, [pc, #332]	; (800f2bc <udp_input+0x218>)
 800f170:	695b      	ldr	r3, [r3, #20]
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d10f      	bne.n	800f198 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f178:	69fb      	ldr	r3, [r7, #28]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	3304      	adds	r3, #4
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	429a      	cmp	r2, r3
 800f184:	d008      	beq.n	800f198 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	3304      	adds	r3, #4
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	429a      	cmp	r2, r3
 800f192:	d101      	bne.n	800f198 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19a:	8a9b      	ldrh	r3, [r3, #20]
 800f19c:	8a3a      	ldrh	r2, [r7, #16]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d118      	bne.n	800f1d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d005      	beq.n	800f1b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	4b43      	ldr	r3, [pc, #268]	; (800f2bc <udp_input+0x218>)
 800f1b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d10e      	bne.n	800f1d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d014      	beq.n	800f1e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	68da      	ldr	r2, [r3, #12]
 800f1c0:	6a3b      	ldr	r3, [r7, #32]
 800f1c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f1c4:	4b3e      	ldr	r3, [pc, #248]	; (800f2c0 <udp_input+0x21c>)
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f1cc:	4a3c      	ldr	r2, [pc, #240]	; (800f2c0 <udp_input+0x21c>)
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f1d2:	e008      	b.n	800f1e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1a7      	bne.n	800f134 <udp_input+0x90>
 800f1e4:	e000      	b.n	800f1e8 <udp_input+0x144>
        break;
 800f1e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <udp_input+0x15a>
    for_us = 1;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	76fb      	strb	r3, [r7, #27]
 800f1fc:	e00a      	b.n	800f214 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	3304      	adds	r3, #4
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	4b2d      	ldr	r3, [pc, #180]	; (800f2bc <udp_input+0x218>)
 800f206:	695b      	ldr	r3, [r3, #20]
 800f208:	429a      	cmp	r2, r3
 800f20a:	bf0c      	ite	eq
 800f20c:	2301      	moveq	r3, #1
 800f20e:	2300      	movne	r3, #0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f214:	7efb      	ldrb	r3, [r7, #27]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d041      	beq.n	800f29e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f21a:	2108      	movs	r1, #8
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7f9 fa09 	bl	8008634 <pbuf_remove_header>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00a      	beq.n	800f23e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f228:	4b20      	ldr	r3, [pc, #128]	; (800f2ac <udp_input+0x208>)
 800f22a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f22e:	4925      	ldr	r1, [pc, #148]	; (800f2c4 <udp_input+0x220>)
 800f230:	4820      	ldr	r0, [pc, #128]	; (800f2b4 <udp_input+0x210>)
 800f232:	f002 fc53 	bl	8011adc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7f9 fa82 	bl	8008740 <pbuf_free>
      goto end;
 800f23c:	e032      	b.n	800f2a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	2b00      	cmp	r3, #0
 800f242:	d012      	beq.n	800f26a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f246:	699b      	ldr	r3, [r3, #24]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00a      	beq.n	800f262 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	699c      	ldr	r4, [r3, #24]
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	69d8      	ldr	r0, [r3, #28]
 800f254:	8a3b      	ldrh	r3, [r7, #16]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	4b1b      	ldr	r3, [pc, #108]	; (800f2c8 <udp_input+0x224>)
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f25e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f260:	e021      	b.n	800f2a6 <udp_input+0x202>
        pbuf_free(p);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7f9 fa6c 	bl	8008740 <pbuf_free>
        goto end;
 800f268:	e01c      	b.n	800f2a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f26a:	7cfb      	ldrb	r3, [r7, #19]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d112      	bne.n	800f296 <udp_input+0x1f2>
 800f270:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <udp_input+0x218>)
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f278:	2be0      	cmp	r3, #224	; 0xe0
 800f27a:	d00c      	beq.n	800f296 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f27c:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <udp_input+0x218>)
 800f27e:	899b      	ldrh	r3, [r3, #12]
 800f280:	3308      	adds	r3, #8
 800f282:	b29b      	uxth	r3, r3
 800f284:	b21b      	sxth	r3, r3
 800f286:	4619      	mov	r1, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7f9 fa46 	bl	800871a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f28e:	2103      	movs	r1, #3
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f001 f89b 	bl	80103cc <icmp_dest_unreach>
      pbuf_free(p);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f7f9 fa52 	bl	8008740 <pbuf_free>
  return;
 800f29c:	e003      	b.n	800f2a6 <udp_input+0x202>
    pbuf_free(p);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7f9 fa4e 	bl	8008740 <pbuf_free>
  return;
 800f2a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f2a6:	372c      	adds	r7, #44	; 0x2c
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd90      	pop	{r4, r7, pc}
 800f2ac:	080163f4 	.word	0x080163f4
 800f2b0:	08016498 	.word	0x08016498
 800f2b4:	08016448 	.word	0x08016448
 800f2b8:	080164b0 	.word	0x080164b0
 800f2bc:	20003a6c 	.word	0x20003a6c
 800f2c0:	20006fc8 	.word	0x20006fc8
 800f2c4:	080164cc 	.word	0x080164cc
 800f2c8:	20003a7c 	.word	0x20003a7c

0800f2cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01e      	beq.n	800f31a <udp_netif_ip_addr_changed+0x4e>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01a      	beq.n	800f31a <udp_netif_ip_addr_changed+0x4e>
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d017      	beq.n	800f31a <udp_netif_ip_addr_changed+0x4e>
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d013      	beq.n	800f31a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f2f2:	4b0d      	ldr	r3, [pc, #52]	; (800f328 <udp_netif_ip_addr_changed+0x5c>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	e00c      	b.n	800f314 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	429a      	cmp	r2, r3
 800f304:	d103      	bne.n	800f30e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1ef      	bne.n	800f2fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f31a:	bf00      	nop
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	20006fc8 	.word	0x20006fc8

0800f32c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f334:	4915      	ldr	r1, [pc, #84]	; (800f38c <etharp_free_entry+0x60>)
 800f336:	687a      	ldr	r2, [r7, #4]
 800f338:	4613      	mov	r3, r2
 800f33a:	005b      	lsls	r3, r3, #1
 800f33c:	4413      	add	r3, r2
 800f33e:	00db      	lsls	r3, r3, #3
 800f340:	440b      	add	r3, r1
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d013      	beq.n	800f370 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f348:	4910      	ldr	r1, [pc, #64]	; (800f38c <etharp_free_entry+0x60>)
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	4613      	mov	r3, r2
 800f34e:	005b      	lsls	r3, r3, #1
 800f350:	4413      	add	r3, r2
 800f352:	00db      	lsls	r3, r3, #3
 800f354:	440b      	add	r3, r1
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4618      	mov	r0, r3
 800f35a:	f7f9 f9f1 	bl	8008740 <pbuf_free>
    arp_table[i].q = NULL;
 800f35e:	490b      	ldr	r1, [pc, #44]	; (800f38c <etharp_free_entry+0x60>)
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	4613      	mov	r3, r2
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	4413      	add	r3, r2
 800f368:	00db      	lsls	r3, r3, #3
 800f36a:	440b      	add	r3, r1
 800f36c:	2200      	movs	r2, #0
 800f36e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f370:	4906      	ldr	r1, [pc, #24]	; (800f38c <etharp_free_entry+0x60>)
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	4613      	mov	r3, r2
 800f376:	005b      	lsls	r3, r3, #1
 800f378:	4413      	add	r3, r2
 800f37a:	00db      	lsls	r3, r3, #3
 800f37c:	440b      	add	r3, r1
 800f37e:	3314      	adds	r3, #20
 800f380:	2200      	movs	r2, #0
 800f382:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f384:	bf00      	nop
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	2000029c 	.word	0x2000029c

0800f390 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f396:	2300      	movs	r3, #0
 800f398:	607b      	str	r3, [r7, #4]
 800f39a:	e096      	b.n	800f4ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f39c:	494f      	ldr	r1, [pc, #316]	; (800f4dc <etharp_tmr+0x14c>)
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	005b      	lsls	r3, r3, #1
 800f3a4:	4413      	add	r3, r2
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	440b      	add	r3, r1
 800f3aa:	3314      	adds	r3, #20
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f3b0:	78fb      	ldrb	r3, [r7, #3]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f000 8086 	beq.w	800f4c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f3b8:	4948      	ldr	r1, [pc, #288]	; (800f4dc <etharp_tmr+0x14c>)
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	005b      	lsls	r3, r3, #1
 800f3c0:	4413      	add	r3, r2
 800f3c2:	00db      	lsls	r3, r3, #3
 800f3c4:	440b      	add	r3, r1
 800f3c6:	3312      	adds	r3, #18
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	b298      	uxth	r0, r3
 800f3ce:	4943      	ldr	r1, [pc, #268]	; (800f4dc <etharp_tmr+0x14c>)
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	005b      	lsls	r3, r3, #1
 800f3d6:	4413      	add	r3, r2
 800f3d8:	00db      	lsls	r3, r3, #3
 800f3da:	440b      	add	r3, r1
 800f3dc:	3312      	adds	r3, #18
 800f3de:	4602      	mov	r2, r0
 800f3e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f3e2:	493e      	ldr	r1, [pc, #248]	; (800f4dc <etharp_tmr+0x14c>)
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	4413      	add	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	440b      	add	r3, r1
 800f3f0:	3312      	adds	r3, #18
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f3f8:	d215      	bcs.n	800f426 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f3fa:	4938      	ldr	r1, [pc, #224]	; (800f4dc <etharp_tmr+0x14c>)
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	00db      	lsls	r3, r3, #3
 800f406:	440b      	add	r3, r1
 800f408:	3314      	adds	r3, #20
 800f40a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d10e      	bne.n	800f42e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f410:	4932      	ldr	r1, [pc, #200]	; (800f4dc <etharp_tmr+0x14c>)
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	4613      	mov	r3, r2
 800f416:	005b      	lsls	r3, r3, #1
 800f418:	4413      	add	r3, r2
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	440b      	add	r3, r1
 800f41e:	3312      	adds	r3, #18
 800f420:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f422:	2b04      	cmp	r3, #4
 800f424:	d903      	bls.n	800f42e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff ff80 	bl	800f32c <etharp_free_entry>
 800f42c:	e04a      	b.n	800f4c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f42e:	492b      	ldr	r1, [pc, #172]	; (800f4dc <etharp_tmr+0x14c>)
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	4613      	mov	r3, r2
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	4413      	add	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	440b      	add	r3, r1
 800f43c:	3314      	adds	r3, #20
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	2b03      	cmp	r3, #3
 800f442:	d10a      	bne.n	800f45a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f444:	4925      	ldr	r1, [pc, #148]	; (800f4dc <etharp_tmr+0x14c>)
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	4613      	mov	r3, r2
 800f44a:	005b      	lsls	r3, r3, #1
 800f44c:	4413      	add	r3, r2
 800f44e:	00db      	lsls	r3, r3, #3
 800f450:	440b      	add	r3, r1
 800f452:	3314      	adds	r3, #20
 800f454:	2204      	movs	r2, #4
 800f456:	701a      	strb	r2, [r3, #0]
 800f458:	e034      	b.n	800f4c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f45a:	4920      	ldr	r1, [pc, #128]	; (800f4dc <etharp_tmr+0x14c>)
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	4613      	mov	r3, r2
 800f460:	005b      	lsls	r3, r3, #1
 800f462:	4413      	add	r3, r2
 800f464:	00db      	lsls	r3, r3, #3
 800f466:	440b      	add	r3, r1
 800f468:	3314      	adds	r3, #20
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b04      	cmp	r3, #4
 800f46e:	d10a      	bne.n	800f486 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f470:	491a      	ldr	r1, [pc, #104]	; (800f4dc <etharp_tmr+0x14c>)
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	4613      	mov	r3, r2
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	4413      	add	r3, r2
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	440b      	add	r3, r1
 800f47e:	3314      	adds	r3, #20
 800f480:	2202      	movs	r2, #2
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	e01e      	b.n	800f4c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f486:	4915      	ldr	r1, [pc, #84]	; (800f4dc <etharp_tmr+0x14c>)
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	4613      	mov	r3, r2
 800f48c:	005b      	lsls	r3, r3, #1
 800f48e:	4413      	add	r3, r2
 800f490:	00db      	lsls	r3, r3, #3
 800f492:	440b      	add	r3, r1
 800f494:	3314      	adds	r3, #20
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d113      	bne.n	800f4c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f49c:	490f      	ldr	r1, [pc, #60]	; (800f4dc <etharp_tmr+0x14c>)
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	005b      	lsls	r3, r3, #1
 800f4a4:	4413      	add	r3, r2
 800f4a6:	00db      	lsls	r3, r3, #3
 800f4a8:	440b      	add	r3, r1
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	6818      	ldr	r0, [r3, #0]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	005b      	lsls	r3, r3, #1
 800f4b4:	4413      	add	r3, r2
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	4a08      	ldr	r2, [pc, #32]	; (800f4dc <etharp_tmr+0x14c>)
 800f4ba:	4413      	add	r3, r2
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4619      	mov	r1, r3
 800f4c0:	f000 fe6e 	bl	80101a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	607b      	str	r3, [r7, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	f77f af65 	ble.w	800f39c <etharp_tmr+0xc>
      }
    }
  }
}
 800f4d2:	bf00      	nop
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	2000029c 	.word	0x2000029c

0800f4e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08a      	sub	sp, #40	; 0x28
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f4ee:	230a      	movs	r3, #10
 800f4f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f4f2:	230a      	movs	r3, #10
 800f4f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f4f6:	230a      	movs	r3, #10
 800f4f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f4fe:	230a      	movs	r3, #10
 800f500:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	83bb      	strh	r3, [r7, #28]
 800f506:	2300      	movs	r3, #0
 800f508:	837b      	strh	r3, [r7, #26]
 800f50a:	2300      	movs	r3, #0
 800f50c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f50e:	2300      	movs	r3, #0
 800f510:	843b      	strh	r3, [r7, #32]
 800f512:	e0ae      	b.n	800f672 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f518:	49a6      	ldr	r1, [pc, #664]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f51a:	4613      	mov	r3, r2
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	4413      	add	r3, r2
 800f520:	00db      	lsls	r3, r3, #3
 800f522:	440b      	add	r3, r1
 800f524:	3314      	adds	r3, #20
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f52a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f52e:	2b0a      	cmp	r3, #10
 800f530:	d105      	bne.n	800f53e <etharp_find_entry+0x5e>
 800f532:	7dfb      	ldrb	r3, [r7, #23]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d102      	bne.n	800f53e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f538:	8c3b      	ldrh	r3, [r7, #32]
 800f53a:	847b      	strh	r3, [r7, #34]	; 0x22
 800f53c:	e095      	b.n	800f66a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
 800f540:	2b00      	cmp	r3, #0
 800f542:	f000 8092 	beq.w	800f66a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f546:	7dfb      	ldrb	r3, [r7, #23]
 800f548:	2b01      	cmp	r3, #1
 800f54a:	d009      	beq.n	800f560 <etharp_find_entry+0x80>
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d806      	bhi.n	800f560 <etharp_find_entry+0x80>
 800f552:	4b99      	ldr	r3, [pc, #612]	; (800f7b8 <etharp_find_entry+0x2d8>)
 800f554:	f44f 7292 	mov.w	r2, #292	; 0x124
 800f558:	4998      	ldr	r1, [pc, #608]	; (800f7bc <etharp_find_entry+0x2dc>)
 800f55a:	4899      	ldr	r0, [pc, #612]	; (800f7c0 <etharp_find_entry+0x2e0>)
 800f55c:	f002 fabe 	bl	8011adc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d020      	beq.n	800f5a8 <etharp_find_entry+0xc8>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6819      	ldr	r1, [r3, #0]
 800f56a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f56e:	4891      	ldr	r0, [pc, #580]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f570:	4613      	mov	r3, r2
 800f572:	005b      	lsls	r3, r3, #1
 800f574:	4413      	add	r3, r2
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	4403      	add	r3, r0
 800f57a:	3304      	adds	r3, #4
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4299      	cmp	r1, r3
 800f580:	d112      	bne.n	800f5a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00c      	beq.n	800f5a2 <etharp_find_entry+0xc2>
 800f588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f58c:	4989      	ldr	r1, [pc, #548]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f58e:	4613      	mov	r3, r2
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4413      	add	r3, r2
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	440b      	add	r3, r1
 800f598:	3308      	adds	r3, #8
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d102      	bne.n	800f5a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f5a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f5a6:	e100      	b.n	800f7aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f5a8:	7dfb      	ldrb	r3, [r7, #23]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d140      	bne.n	800f630 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f5ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5b2:	4980      	ldr	r1, [pc, #512]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f5b4:	4613      	mov	r3, r2
 800f5b6:	005b      	lsls	r3, r3, #1
 800f5b8:	4413      	add	r3, r2
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	440b      	add	r3, r1
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d01a      	beq.n	800f5fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f5c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5c8:	497a      	ldr	r1, [pc, #488]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	4413      	add	r3, r2
 800f5d0:	00db      	lsls	r3, r3, #3
 800f5d2:	440b      	add	r3, r1
 800f5d4:	3312      	adds	r3, #18
 800f5d6:	881b      	ldrh	r3, [r3, #0]
 800f5d8:	8bba      	ldrh	r2, [r7, #28]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d845      	bhi.n	800f66a <etharp_find_entry+0x18a>
            old_queue = i;
 800f5de:	8c3b      	ldrh	r3, [r7, #32]
 800f5e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f5e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5e6:	4973      	ldr	r1, [pc, #460]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	4413      	add	r3, r2
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	440b      	add	r3, r1
 800f5f2:	3312      	adds	r3, #18
 800f5f4:	881b      	ldrh	r3, [r3, #0]
 800f5f6:	83bb      	strh	r3, [r7, #28]
 800f5f8:	e037      	b.n	800f66a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f5fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5fe:	496d      	ldr	r1, [pc, #436]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f600:	4613      	mov	r3, r2
 800f602:	005b      	lsls	r3, r3, #1
 800f604:	4413      	add	r3, r2
 800f606:	00db      	lsls	r3, r3, #3
 800f608:	440b      	add	r3, r1
 800f60a:	3312      	adds	r3, #18
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	8b7a      	ldrh	r2, [r7, #26]
 800f610:	429a      	cmp	r2, r3
 800f612:	d82a      	bhi.n	800f66a <etharp_find_entry+0x18a>
            old_pending = i;
 800f614:	8c3b      	ldrh	r3, [r7, #32]
 800f616:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f618:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f61c:	4965      	ldr	r1, [pc, #404]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f61e:	4613      	mov	r3, r2
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	4413      	add	r3, r2
 800f624:	00db      	lsls	r3, r3, #3
 800f626:	440b      	add	r3, r1
 800f628:	3312      	adds	r3, #18
 800f62a:	881b      	ldrh	r3, [r3, #0]
 800f62c:	837b      	strh	r3, [r7, #26]
 800f62e:	e01c      	b.n	800f66a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	2b01      	cmp	r3, #1
 800f634:	d919      	bls.n	800f66a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f63a:	495e      	ldr	r1, [pc, #376]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f63c:	4613      	mov	r3, r2
 800f63e:	005b      	lsls	r3, r3, #1
 800f640:	4413      	add	r3, r2
 800f642:	00db      	lsls	r3, r3, #3
 800f644:	440b      	add	r3, r1
 800f646:	3312      	adds	r3, #18
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	8b3a      	ldrh	r2, [r7, #24]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d80c      	bhi.n	800f66a <etharp_find_entry+0x18a>
            old_stable = i;
 800f650:	8c3b      	ldrh	r3, [r7, #32]
 800f652:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f658:	4956      	ldr	r1, [pc, #344]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f65a:	4613      	mov	r3, r2
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	4413      	add	r3, r2
 800f660:	00db      	lsls	r3, r3, #3
 800f662:	440b      	add	r3, r1
 800f664:	3312      	adds	r3, #18
 800f666:	881b      	ldrh	r3, [r3, #0]
 800f668:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f66a:	8c3b      	ldrh	r3, [r7, #32]
 800f66c:	3301      	adds	r3, #1
 800f66e:	b29b      	uxth	r3, r3
 800f670:	843b      	strh	r3, [r7, #32]
 800f672:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f676:	2b09      	cmp	r3, #9
 800f678:	f77f af4c 	ble.w	800f514 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f67c:	7afb      	ldrb	r3, [r7, #11]
 800f67e:	f003 0302 	and.w	r3, r3, #2
 800f682:	2b00      	cmp	r3, #0
 800f684:	d108      	bne.n	800f698 <etharp_find_entry+0x1b8>
 800f686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f68a:	2b0a      	cmp	r3, #10
 800f68c:	d107      	bne.n	800f69e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f68e:	7afb      	ldrb	r3, [r7, #11]
 800f690:	f003 0301 	and.w	r3, r3, #1
 800f694:	2b00      	cmp	r3, #0
 800f696:	d102      	bne.n	800f69e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f698:	f04f 33ff 	mov.w	r3, #4294967295
 800f69c:	e085      	b.n	800f7aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f69e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f6a2:	2b09      	cmp	r3, #9
 800f6a4:	dc02      	bgt.n	800f6ac <etharp_find_entry+0x1cc>
    i = empty;
 800f6a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6a8:	843b      	strh	r3, [r7, #32]
 800f6aa:	e039      	b.n	800f720 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f6ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f6b0:	2b09      	cmp	r3, #9
 800f6b2:	dc14      	bgt.n	800f6de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f6b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6bc:	493d      	ldr	r1, [pc, #244]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f6be:	4613      	mov	r3, r2
 800f6c0:	005b      	lsls	r3, r3, #1
 800f6c2:	4413      	add	r3, r2
 800f6c4:	00db      	lsls	r3, r3, #3
 800f6c6:	440b      	add	r3, r1
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d018      	beq.n	800f700 <etharp_find_entry+0x220>
 800f6ce:	4b3a      	ldr	r3, [pc, #232]	; (800f7b8 <etharp_find_entry+0x2d8>)
 800f6d0:	f240 126d 	movw	r2, #365	; 0x16d
 800f6d4:	493b      	ldr	r1, [pc, #236]	; (800f7c4 <etharp_find_entry+0x2e4>)
 800f6d6:	483a      	ldr	r0, [pc, #232]	; (800f7c0 <etharp_find_entry+0x2e0>)
 800f6d8:	f002 fa00 	bl	8011adc <iprintf>
 800f6dc:	e010      	b.n	800f700 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f6de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f6e2:	2b09      	cmp	r3, #9
 800f6e4:	dc02      	bgt.n	800f6ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f6e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f6e8:	843b      	strh	r3, [r7, #32]
 800f6ea:	e009      	b.n	800f700 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f6ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f6f0:	2b09      	cmp	r3, #9
 800f6f2:	dc02      	bgt.n	800f6fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f6f4:	8bfb      	ldrh	r3, [r7, #30]
 800f6f6:	843b      	strh	r3, [r7, #32]
 800f6f8:	e002      	b.n	800f700 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fe:	e054      	b.n	800f7aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f704:	2b09      	cmp	r3, #9
 800f706:	dd06      	ble.n	800f716 <etharp_find_entry+0x236>
 800f708:	4b2b      	ldr	r3, [pc, #172]	; (800f7b8 <etharp_find_entry+0x2d8>)
 800f70a:	f240 127f 	movw	r2, #383	; 0x17f
 800f70e:	492e      	ldr	r1, [pc, #184]	; (800f7c8 <etharp_find_entry+0x2e8>)
 800f710:	482b      	ldr	r0, [pc, #172]	; (800f7c0 <etharp_find_entry+0x2e0>)
 800f712:	f002 f9e3 	bl	8011adc <iprintf>
    etharp_free_entry(i);
 800f716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7ff fe06 	bl	800f32c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f720:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f724:	2b09      	cmp	r3, #9
 800f726:	dd06      	ble.n	800f736 <etharp_find_entry+0x256>
 800f728:	4b23      	ldr	r3, [pc, #140]	; (800f7b8 <etharp_find_entry+0x2d8>)
 800f72a:	f240 1283 	movw	r2, #387	; 0x183
 800f72e:	4926      	ldr	r1, [pc, #152]	; (800f7c8 <etharp_find_entry+0x2e8>)
 800f730:	4823      	ldr	r0, [pc, #140]	; (800f7c0 <etharp_find_entry+0x2e0>)
 800f732:	f002 f9d3 	bl	8011adc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f73a:	491e      	ldr	r1, [pc, #120]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f73c:	4613      	mov	r3, r2
 800f73e:	005b      	lsls	r3, r3, #1
 800f740:	4413      	add	r3, r2
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	440b      	add	r3, r1
 800f746:	3314      	adds	r3, #20
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d006      	beq.n	800f75c <etharp_find_entry+0x27c>
 800f74e:	4b1a      	ldr	r3, [pc, #104]	; (800f7b8 <etharp_find_entry+0x2d8>)
 800f750:	f240 1285 	movw	r2, #389	; 0x185
 800f754:	491d      	ldr	r1, [pc, #116]	; (800f7cc <etharp_find_entry+0x2ec>)
 800f756:	481a      	ldr	r0, [pc, #104]	; (800f7c0 <etharp_find_entry+0x2e0>)
 800f758:	f002 f9c0 	bl	8011adc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00b      	beq.n	800f77a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f762:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6819      	ldr	r1, [r3, #0]
 800f76a:	4812      	ldr	r0, [pc, #72]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f76c:	4613      	mov	r3, r2
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	4413      	add	r3, r2
 800f772:	00db      	lsls	r3, r3, #3
 800f774:	4403      	add	r3, r0
 800f776:	3304      	adds	r3, #4
 800f778:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f77a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f77e:	490d      	ldr	r1, [pc, #52]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f780:	4613      	mov	r3, r2
 800f782:	005b      	lsls	r3, r3, #1
 800f784:	4413      	add	r3, r2
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	440b      	add	r3, r1
 800f78a:	3312      	adds	r3, #18
 800f78c:	2200      	movs	r2, #0
 800f78e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f790:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f794:	4907      	ldr	r1, [pc, #28]	; (800f7b4 <etharp_find_entry+0x2d4>)
 800f796:	4613      	mov	r3, r2
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	4413      	add	r3, r2
 800f79c:	00db      	lsls	r3, r3, #3
 800f79e:	440b      	add	r3, r1
 800f7a0:	3308      	adds	r3, #8
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f7a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3728      	adds	r7, #40	; 0x28
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	2000029c 	.word	0x2000029c
 800f7b8:	08016758 	.word	0x08016758
 800f7bc:	08016790 	.word	0x08016790
 800f7c0:	080167d0 	.word	0x080167d0
 800f7c4:	080167f8 	.word	0x080167f8
 800f7c8:	08016810 	.word	0x08016810
 800f7cc:	08016824 	.word	0x08016824

0800f7d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b088      	sub	sp, #32
 800f7d4:	af02      	add	r7, sp, #8
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7e4:	2b06      	cmp	r3, #6
 800f7e6:	d006      	beq.n	800f7f6 <etharp_update_arp_entry+0x26>
 800f7e8:	4b48      	ldr	r3, [pc, #288]	; (800f90c <etharp_update_arp_entry+0x13c>)
 800f7ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f7ee:	4948      	ldr	r1, [pc, #288]	; (800f910 <etharp_update_arp_entry+0x140>)
 800f7f0:	4848      	ldr	r0, [pc, #288]	; (800f914 <etharp_update_arp_entry+0x144>)
 800f7f2:	f002 f973 	bl	8011adc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d012      	beq.n	800f822 <etharp_update_arp_entry+0x52>
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00e      	beq.n	800f822 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68f9      	ldr	r1, [r7, #12]
 800f80a:	4618      	mov	r0, r3
 800f80c:	f001 f8fc 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 800f810:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f812:	2b00      	cmp	r3, #0
 800f814:	d105      	bne.n	800f822 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f81e:	2be0      	cmp	r3, #224	; 0xe0
 800f820:	d102      	bne.n	800f828 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f822:	f06f 030f 	mvn.w	r3, #15
 800f826:	e06c      	b.n	800f902 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f828:	78fb      	ldrb	r3, [r7, #3]
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	4619      	mov	r1, r3
 800f82e:	68b8      	ldr	r0, [r7, #8]
 800f830:	f7ff fe56 	bl	800f4e0 <etharp_find_entry>
 800f834:	4603      	mov	r3, r0
 800f836:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	da02      	bge.n	800f846 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f840:	8afb      	ldrh	r3, [r7, #22]
 800f842:	b25b      	sxtb	r3, r3
 800f844:	e05d      	b.n	800f902 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f846:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f84a:	4933      	ldr	r1, [pc, #204]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f84c:	4613      	mov	r3, r2
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	4413      	add	r3, r2
 800f852:	00db      	lsls	r3, r3, #3
 800f854:	440b      	add	r3, r1
 800f856:	3314      	adds	r3, #20
 800f858:	2202      	movs	r2, #2
 800f85a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f85c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f860:	492d      	ldr	r1, [pc, #180]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f862:	4613      	mov	r3, r2
 800f864:	005b      	lsls	r3, r3, #1
 800f866:	4413      	add	r3, r2
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	440b      	add	r3, r1
 800f86c:	3308      	adds	r3, #8
 800f86e:	68fa      	ldr	r2, [r7, #12]
 800f870:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f872:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f876:	4613      	mov	r3, r2
 800f878:	005b      	lsls	r3, r3, #1
 800f87a:	4413      	add	r3, r2
 800f87c:	00db      	lsls	r3, r3, #3
 800f87e:	3308      	adds	r3, #8
 800f880:	4a25      	ldr	r2, [pc, #148]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f882:	4413      	add	r3, r2
 800f884:	3304      	adds	r3, #4
 800f886:	2206      	movs	r2, #6
 800f888:	6879      	ldr	r1, [r7, #4]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f002 f86b 	bl	8011966 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f890:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f894:	4920      	ldr	r1, [pc, #128]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f896:	4613      	mov	r3, r2
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	4413      	add	r3, r2
 800f89c:	00db      	lsls	r3, r3, #3
 800f89e:	440b      	add	r3, r1
 800f8a0:	3312      	adds	r3, #18
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f8a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8aa:	491b      	ldr	r1, [pc, #108]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	00db      	lsls	r3, r3, #3
 800f8b4:	440b      	add	r3, r1
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d021      	beq.n	800f900 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f8bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8c0:	4915      	ldr	r1, [pc, #84]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	005b      	lsls	r3, r3, #1
 800f8c6:	4413      	add	r3, r2
 800f8c8:	00db      	lsls	r3, r3, #3
 800f8ca:	440b      	add	r3, r1
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f8d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8d4:	4910      	ldr	r1, [pc, #64]	; (800f918 <etharp_update_arp_entry+0x148>)
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	4413      	add	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	440b      	add	r3, r1
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800f8ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6939      	ldr	r1, [r7, #16]
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f001 ff8b 	bl	8011810 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f8fa:	6938      	ldr	r0, [r7, #16]
 800f8fc:	f7f8 ff20 	bl	8008740 <pbuf_free>
  }
  return ERR_OK;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3718      	adds	r7, #24
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	08016758 	.word	0x08016758
 800f910:	08016850 	.word	0x08016850
 800f914:	080167d0 	.word	0x080167d0
 800f918:	2000029c 	.word	0x2000029c

0800f91c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f924:	2300      	movs	r3, #0
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	e01e      	b.n	800f968 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f92a:	4913      	ldr	r1, [pc, #76]	; (800f978 <etharp_cleanup_netif+0x5c>)
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	4613      	mov	r3, r2
 800f930:	005b      	lsls	r3, r3, #1
 800f932:	4413      	add	r3, r2
 800f934:	00db      	lsls	r3, r3, #3
 800f936:	440b      	add	r3, r1
 800f938:	3314      	adds	r3, #20
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f93e:	7afb      	ldrb	r3, [r7, #11]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00e      	beq.n	800f962 <etharp_cleanup_netif+0x46>
 800f944:	490c      	ldr	r1, [pc, #48]	; (800f978 <etharp_cleanup_netif+0x5c>)
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	4613      	mov	r3, r2
 800f94a:	005b      	lsls	r3, r3, #1
 800f94c:	4413      	add	r3, r2
 800f94e:	00db      	lsls	r3, r3, #3
 800f950:	440b      	add	r3, r1
 800f952:	3308      	adds	r3, #8
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d102      	bne.n	800f962 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7ff fce5 	bl	800f32c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	3301      	adds	r3, #1
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b09      	cmp	r3, #9
 800f96c:	dddd      	ble.n	800f92a <etharp_cleanup_netif+0xe>
    }
  }
}
 800f96e:	bf00      	nop
 800f970:	3710      	adds	r7, #16
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	2000029c 	.word	0x2000029c

0800f97c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f97c:	b5b0      	push	{r4, r5, r7, lr}
 800f97e:	b08a      	sub	sp, #40	; 0x28
 800f980:	af04      	add	r7, sp, #16
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d107      	bne.n	800f99c <etharp_input+0x20>
 800f98c:	4b3d      	ldr	r3, [pc, #244]	; (800fa84 <etharp_input+0x108>)
 800f98e:	f240 228a 	movw	r2, #650	; 0x28a
 800f992:	493d      	ldr	r1, [pc, #244]	; (800fa88 <etharp_input+0x10c>)
 800f994:	483d      	ldr	r0, [pc, #244]	; (800fa8c <etharp_input+0x110>)
 800f996:	f002 f8a1 	bl	8011adc <iprintf>
 800f99a:	e06f      	b.n	800fa7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ac:	d10c      	bne.n	800f9c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f9b2:	2b06      	cmp	r3, #6
 800f9b4:	d108      	bne.n	800f9c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	d104      	bne.n	800f9c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	885b      	ldrh	r3, [r3, #2]
 800f9c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f9c4:	2b08      	cmp	r3, #8
 800f9c6:	d003      	beq.n	800f9d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7f8 feb9 	bl	8008740 <pbuf_free>
    return;
 800f9ce:	e055      	b.n	800fa7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	330e      	adds	r3, #14
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	3318      	adds	r3, #24
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	3304      	adds	r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d102      	bne.n	800f9f0 <etharp_input+0x74>
    for_us = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	75fb      	strb	r3, [r7, #23]
 800f9ee:	e009      	b.n	800fa04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	bf0c      	ite	eq
 800f9fc:	2301      	moveq	r3, #1
 800f9fe:	2300      	movne	r3, #0
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	f103 0208 	add.w	r2, r3, #8
 800fa0a:	7dfb      	ldrb	r3, [r7, #23]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <etharp_input+0x98>
 800fa10:	2301      	movs	r3, #1
 800fa12:	e000      	b.n	800fa16 <etharp_input+0x9a>
 800fa14:	2302      	movs	r3, #2
 800fa16:	f107 010c 	add.w	r1, r7, #12
 800fa1a:	6838      	ldr	r0, [r7, #0]
 800fa1c:	f7ff fed8 	bl	800f7d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	88db      	ldrh	r3, [r3, #6]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa2a:	d003      	beq.n	800fa34 <etharp_input+0xb8>
 800fa2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa30:	d01e      	beq.n	800fa70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fa32:	e020      	b.n	800fa76 <etharp_input+0xfa>
      if (for_us) {
 800fa34:	7dfb      	ldrb	r3, [r7, #23]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d01c      	beq.n	800fa74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fa54:	2102      	movs	r1, #2
 800fa56:	9103      	str	r1, [sp, #12]
 800fa58:	f107 010c 	add.w	r1, r7, #12
 800fa5c:	9102      	str	r1, [sp, #8]
 800fa5e:	9201      	str	r2, [sp, #4]
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	462b      	mov	r3, r5
 800fa64:	4622      	mov	r2, r4
 800fa66:	4601      	mov	r1, r0
 800fa68:	6838      	ldr	r0, [r7, #0]
 800fa6a:	f000 faeb 	bl	8010044 <etharp_raw>
      break;
 800fa6e:	e001      	b.n	800fa74 <etharp_input+0xf8>
      break;
 800fa70:	bf00      	nop
 800fa72:	e000      	b.n	800fa76 <etharp_input+0xfa>
      break;
 800fa74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7f8 fe62 	bl	8008740 <pbuf_free>
}
 800fa7c:	3718      	adds	r7, #24
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bdb0      	pop	{r4, r5, r7, pc}
 800fa82:	bf00      	nop
 800fa84:	08016758 	.word	0x08016758
 800fa88:	080168a8 	.word	0x080168a8
 800fa8c:	080167d0 	.word	0x080167d0

0800fa90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fa9e:	79fa      	ldrb	r2, [r7, #7]
 800faa0:	4944      	ldr	r1, [pc, #272]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800faa2:	4613      	mov	r3, r2
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	4413      	add	r3, r2
 800faa8:	00db      	lsls	r3, r3, #3
 800faaa:	440b      	add	r3, r1
 800faac:	3314      	adds	r3, #20
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d806      	bhi.n	800fac2 <etharp_output_to_arp_index+0x32>
 800fab4:	4b40      	ldr	r3, [pc, #256]	; (800fbb8 <etharp_output_to_arp_index+0x128>)
 800fab6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800faba:	4940      	ldr	r1, [pc, #256]	; (800fbbc <etharp_output_to_arp_index+0x12c>)
 800fabc:	4840      	ldr	r0, [pc, #256]	; (800fbc0 <etharp_output_to_arp_index+0x130>)
 800fabe:	f002 f80d 	bl	8011adc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fac2:	79fa      	ldrb	r2, [r7, #7]
 800fac4:	493b      	ldr	r1, [pc, #236]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fac6:	4613      	mov	r3, r2
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	4413      	add	r3, r2
 800facc:	00db      	lsls	r3, r3, #3
 800face:	440b      	add	r3, r1
 800fad0:	3314      	adds	r3, #20
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2b02      	cmp	r3, #2
 800fad6:	d153      	bne.n	800fb80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fad8:	79fa      	ldrb	r2, [r7, #7]
 800fada:	4936      	ldr	r1, [pc, #216]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fadc:	4613      	mov	r3, r2
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	4413      	add	r3, r2
 800fae2:	00db      	lsls	r3, r3, #3
 800fae4:	440b      	add	r3, r1
 800fae6:	3312      	adds	r3, #18
 800fae8:	881b      	ldrh	r3, [r3, #0]
 800faea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800faee:	d919      	bls.n	800fb24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800faf0:	79fa      	ldrb	r2, [r7, #7]
 800faf2:	4613      	mov	r3, r2
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	4413      	add	r3, r2
 800faf8:	00db      	lsls	r3, r3, #3
 800fafa:	4a2e      	ldr	r2, [pc, #184]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fafc:	4413      	add	r3, r2
 800fafe:	3304      	adds	r3, #4
 800fb00:	4619      	mov	r1, r3
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f000 fb4c 	bl	80101a0 <etharp_request>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d138      	bne.n	800fb80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fb0e:	79fa      	ldrb	r2, [r7, #7]
 800fb10:	4928      	ldr	r1, [pc, #160]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fb12:	4613      	mov	r3, r2
 800fb14:	005b      	lsls	r3, r3, #1
 800fb16:	4413      	add	r3, r2
 800fb18:	00db      	lsls	r3, r3, #3
 800fb1a:	440b      	add	r3, r1
 800fb1c:	3314      	adds	r3, #20
 800fb1e:	2203      	movs	r2, #3
 800fb20:	701a      	strb	r2, [r3, #0]
 800fb22:	e02d      	b.n	800fb80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fb24:	79fa      	ldrb	r2, [r7, #7]
 800fb26:	4923      	ldr	r1, [pc, #140]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fb28:	4613      	mov	r3, r2
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	4413      	add	r3, r2
 800fb2e:	00db      	lsls	r3, r3, #3
 800fb30:	440b      	add	r3, r1
 800fb32:	3312      	adds	r3, #18
 800fb34:	881b      	ldrh	r3, [r3, #0]
 800fb36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fb3a:	d321      	bcc.n	800fb80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fb3c:	79fa      	ldrb	r2, [r7, #7]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	005b      	lsls	r3, r3, #1
 800fb42:	4413      	add	r3, r2
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	4a1b      	ldr	r2, [pc, #108]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fb48:	4413      	add	r3, r2
 800fb4a:	1d19      	adds	r1, r3, #4
 800fb4c:	79fa      	ldrb	r2, [r7, #7]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	005b      	lsls	r3, r3, #1
 800fb52:	4413      	add	r3, r2
 800fb54:	00db      	lsls	r3, r3, #3
 800fb56:	3308      	adds	r3, #8
 800fb58:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fb5a:	4413      	add	r3, r2
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	461a      	mov	r2, r3
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f000 fafb 	bl	801015c <etharp_request_dst>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d109      	bne.n	800fb80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fb6c:	79fa      	ldrb	r2, [r7, #7]
 800fb6e:	4911      	ldr	r1, [pc, #68]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fb70:	4613      	mov	r3, r2
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	4413      	add	r3, r2
 800fb76:	00db      	lsls	r3, r3, #3
 800fb78:	440b      	add	r3, r1
 800fb7a:	3314      	adds	r3, #20
 800fb7c:	2203      	movs	r2, #3
 800fb7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800fb86:	79fa      	ldrb	r2, [r7, #7]
 800fb88:	4613      	mov	r3, r2
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	4413      	add	r3, r2
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	3308      	adds	r3, #8
 800fb92:	4a08      	ldr	r2, [pc, #32]	; (800fbb4 <etharp_output_to_arp_index+0x124>)
 800fb94:	4413      	add	r3, r2
 800fb96:	1d1a      	adds	r2, r3, #4
 800fb98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	460a      	mov	r2, r1
 800fba2:	68b9      	ldr	r1, [r7, #8]
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f001 fe33 	bl	8011810 <ethernet_output>
 800fbaa:	4603      	mov	r3, r0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3710      	adds	r7, #16
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	2000029c 	.word	0x2000029c
 800fbb8:	08016758 	.word	0x08016758
 800fbbc:	080168c8 	.word	0x080168c8
 800fbc0:	080167d0 	.word	0x080167d0

0800fbc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b08a      	sub	sp, #40	; 0x28
 800fbc8:	af02      	add	r7, sp, #8
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d106      	bne.n	800fbe8 <etharp_output+0x24>
 800fbda:	4b73      	ldr	r3, [pc, #460]	; (800fda8 <etharp_output+0x1e4>)
 800fbdc:	f240 321e 	movw	r2, #798	; 0x31e
 800fbe0:	4972      	ldr	r1, [pc, #456]	; (800fdac <etharp_output+0x1e8>)
 800fbe2:	4873      	ldr	r0, [pc, #460]	; (800fdb0 <etharp_output+0x1ec>)
 800fbe4:	f001 ff7a 	bl	8011adc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d106      	bne.n	800fbfc <etharp_output+0x38>
 800fbee:	4b6e      	ldr	r3, [pc, #440]	; (800fda8 <etharp_output+0x1e4>)
 800fbf0:	f240 321f 	movw	r2, #799	; 0x31f
 800fbf4:	496f      	ldr	r1, [pc, #444]	; (800fdb4 <etharp_output+0x1f0>)
 800fbf6:	486e      	ldr	r0, [pc, #440]	; (800fdb0 <etharp_output+0x1ec>)
 800fbf8:	f001 ff70 	bl	8011adc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d106      	bne.n	800fc10 <etharp_output+0x4c>
 800fc02:	4b69      	ldr	r3, [pc, #420]	; (800fda8 <etharp_output+0x1e4>)
 800fc04:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fc08:	496b      	ldr	r1, [pc, #428]	; (800fdb8 <etharp_output+0x1f4>)
 800fc0a:	4869      	ldr	r0, [pc, #420]	; (800fdb0 <etharp_output+0x1ec>)
 800fc0c:	f001 ff66 	bl	8011adc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68f9      	ldr	r1, [r7, #12]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 fef6 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d002      	beq.n	800fc28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fc22:	4b66      	ldr	r3, [pc, #408]	; (800fdbc <etharp_output+0x1f8>)
 800fc24:	61fb      	str	r3, [r7, #28]
 800fc26:	e0af      	b.n	800fd88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc30:	2be0      	cmp	r3, #224	; 0xe0
 800fc32:	d118      	bne.n	800fc66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fc34:	2301      	movs	r3, #1
 800fc36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fc3c:	235e      	movs	r3, #94	; 0x5e
 800fc3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	3301      	adds	r3, #1
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc4a:	b2db      	uxtb	r3, r3
 800fc4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3302      	adds	r3, #2
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	3303      	adds	r3, #3
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fc5e:	f107 0310 	add.w	r3, r7, #16
 800fc62:	61fb      	str	r3, [r7, #28]
 800fc64:	e090      	b.n	800fd88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	405a      	eors	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3308      	adds	r3, #8
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4013      	ands	r3, r2
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d012      	beq.n	800fca4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fc84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d00b      	beq.n	800fca4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	330c      	adds	r3, #12
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	330c      	adds	r3, #12
 800fc9a:	61bb      	str	r3, [r7, #24]
 800fc9c:	e002      	b.n	800fca4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fc9e:	f06f 0303 	mvn.w	r3, #3
 800fca2:	e07d      	b.n	800fda0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fca4:	4b46      	ldr	r3, [pc, #280]	; (800fdc0 <etharp_output+0x1fc>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	4619      	mov	r1, r3
 800fcaa:	4a46      	ldr	r2, [pc, #280]	; (800fdc4 <etharp_output+0x200>)
 800fcac:	460b      	mov	r3, r1
 800fcae:	005b      	lsls	r3, r3, #1
 800fcb0:	440b      	add	r3, r1
 800fcb2:	00db      	lsls	r3, r3, #3
 800fcb4:	4413      	add	r3, r2
 800fcb6:	3314      	adds	r3, #20
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d925      	bls.n	800fd0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fcbe:	4b40      	ldr	r3, [pc, #256]	; (800fdc0 <etharp_output+0x1fc>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	4a3f      	ldr	r2, [pc, #252]	; (800fdc4 <etharp_output+0x200>)
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	005b      	lsls	r3, r3, #1
 800fcca:	440b      	add	r3, r1
 800fccc:	00db      	lsls	r3, r3, #3
 800fcce:	4413      	add	r3, r2
 800fcd0:	3308      	adds	r3, #8
 800fcd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d117      	bne.n	800fd0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fcda:	69bb      	ldr	r3, [r7, #24]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	4b38      	ldr	r3, [pc, #224]	; (800fdc0 <etharp_output+0x1fc>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	4618      	mov	r0, r3
 800fce4:	4937      	ldr	r1, [pc, #220]	; (800fdc4 <etharp_output+0x200>)
 800fce6:	4603      	mov	r3, r0
 800fce8:	005b      	lsls	r3, r3, #1
 800fcea:	4403      	add	r3, r0
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	440b      	add	r3, r1
 800fcf0:	3304      	adds	r3, #4
 800fcf2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d108      	bne.n	800fd0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fcf8:	4b31      	ldr	r3, [pc, #196]	; (800fdc0 <etharp_output+0x1fc>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	68b9      	ldr	r1, [r7, #8]
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	f7ff fec5 	bl	800fa90 <etharp_output_to_arp_index>
 800fd06:	4603      	mov	r3, r0
 800fd08:	e04a      	b.n	800fda0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	75fb      	strb	r3, [r7, #23]
 800fd0e:	e031      	b.n	800fd74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd10:	7dfa      	ldrb	r2, [r7, #23]
 800fd12:	492c      	ldr	r1, [pc, #176]	; (800fdc4 <etharp_output+0x200>)
 800fd14:	4613      	mov	r3, r2
 800fd16:	005b      	lsls	r3, r3, #1
 800fd18:	4413      	add	r3, r2
 800fd1a:	00db      	lsls	r3, r3, #3
 800fd1c:	440b      	add	r3, r1
 800fd1e:	3314      	adds	r3, #20
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d923      	bls.n	800fd6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fd26:	7dfa      	ldrb	r2, [r7, #23]
 800fd28:	4926      	ldr	r1, [pc, #152]	; (800fdc4 <etharp_output+0x200>)
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	005b      	lsls	r3, r3, #1
 800fd2e:	4413      	add	r3, r2
 800fd30:	00db      	lsls	r3, r3, #3
 800fd32:	440b      	add	r3, r1
 800fd34:	3308      	adds	r3, #8
 800fd36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d117      	bne.n	800fd6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	6819      	ldr	r1, [r3, #0]
 800fd42:	7dfa      	ldrb	r2, [r7, #23]
 800fd44:	481f      	ldr	r0, [pc, #124]	; (800fdc4 <etharp_output+0x200>)
 800fd46:	4613      	mov	r3, r2
 800fd48:	005b      	lsls	r3, r3, #1
 800fd4a:	4413      	add	r3, r2
 800fd4c:	00db      	lsls	r3, r3, #3
 800fd4e:	4403      	add	r3, r0
 800fd50:	3304      	adds	r3, #4
 800fd52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fd54:	4299      	cmp	r1, r3
 800fd56:	d10a      	bne.n	800fd6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fd58:	4a19      	ldr	r2, [pc, #100]	; (800fdc0 <etharp_output+0x1fc>)
 800fd5a:	7dfb      	ldrb	r3, [r7, #23]
 800fd5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
 800fd60:	461a      	mov	r2, r3
 800fd62:	68b9      	ldr	r1, [r7, #8]
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff fe93 	bl	800fa90 <etharp_output_to_arp_index>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	e018      	b.n	800fda0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	3301      	adds	r3, #1
 800fd72:	75fb      	strb	r3, [r7, #23]
 800fd74:	7dfb      	ldrb	r3, [r7, #23]
 800fd76:	2b09      	cmp	r3, #9
 800fd78:	d9ca      	bls.n	800fd10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	69b9      	ldr	r1, [r7, #24]
 800fd7e:	68f8      	ldr	r0, [r7, #12]
 800fd80:	f000 f822 	bl	800fdc8 <etharp_query>
 800fd84:	4603      	mov	r3, r0
 800fd86:	e00b      	b.n	800fda0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800fd8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	69fb      	ldr	r3, [r7, #28]
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f001 fd39 	bl	8011810 <ethernet_output>
 800fd9e:	4603      	mov	r3, r0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3720      	adds	r7, #32
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	08016758 	.word	0x08016758
 800fdac:	080168a8 	.word	0x080168a8
 800fdb0:	080167d0 	.word	0x080167d0
 800fdb4:	080168f8 	.word	0x080168f8
 800fdb8:	08016898 	.word	0x08016898
 800fdbc:	08016f08 	.word	0x08016f08
 800fdc0:	2000038c 	.word	0x2000038c
 800fdc4:	2000029c 	.word	0x2000029c

0800fdc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b08c      	sub	sp, #48	; 0x30
 800fdcc:	af02      	add	r7, sp, #8
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	3322      	adds	r3, #34	; 0x22
 800fdd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fdda:	23ff      	movs	r3, #255	; 0xff
 800fddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68f9      	ldr	r1, [r7, #12]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 fe0c 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10c      	bne.n	800fe10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fdfe:	2be0      	cmp	r3, #224	; 0xe0
 800fe00:	d006      	beq.n	800fe10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d003      	beq.n	800fe10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d102      	bne.n	800fe16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fe10:	f06f 030f 	mvn.w	r3, #15
 800fe14:	e102      	b.n	801001c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	2101      	movs	r1, #1
 800fe1a:	68b8      	ldr	r0, [r7, #8]
 800fe1c:	f7ff fb60 	bl	800f4e0 <etharp_find_entry>
 800fe20:	4603      	mov	r3, r0
 800fe22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fe24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	da02      	bge.n	800fe32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fe2c:	8a7b      	ldrh	r3, [r7, #18]
 800fe2e:	b25b      	sxtb	r3, r3
 800fe30:	e0f4      	b.n	801001c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fe32:	8a7b      	ldrh	r3, [r7, #18]
 800fe34:	2b7e      	cmp	r3, #126	; 0x7e
 800fe36:	d906      	bls.n	800fe46 <etharp_query+0x7e>
 800fe38:	4b7a      	ldr	r3, [pc, #488]	; (8010024 <etharp_query+0x25c>)
 800fe3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fe3e:	497a      	ldr	r1, [pc, #488]	; (8010028 <etharp_query+0x260>)
 800fe40:	487a      	ldr	r0, [pc, #488]	; (801002c <etharp_query+0x264>)
 800fe42:	f001 fe4b 	bl	8011adc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fe46:	8a7b      	ldrh	r3, [r7, #18]
 800fe48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fe4a:	7c7a      	ldrb	r2, [r7, #17]
 800fe4c:	4978      	ldr	r1, [pc, #480]	; (8010030 <etharp_query+0x268>)
 800fe4e:	4613      	mov	r3, r2
 800fe50:	005b      	lsls	r3, r3, #1
 800fe52:	4413      	add	r3, r2
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	440b      	add	r3, r1
 800fe58:	3314      	adds	r3, #20
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d115      	bne.n	800fe8c <etharp_query+0xc4>
    is_new_entry = 1;
 800fe60:	2301      	movs	r3, #1
 800fe62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fe64:	7c7a      	ldrb	r2, [r7, #17]
 800fe66:	4972      	ldr	r1, [pc, #456]	; (8010030 <etharp_query+0x268>)
 800fe68:	4613      	mov	r3, r2
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	4413      	add	r3, r2
 800fe6e:	00db      	lsls	r3, r3, #3
 800fe70:	440b      	add	r3, r1
 800fe72:	3314      	adds	r3, #20
 800fe74:	2201      	movs	r2, #1
 800fe76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fe78:	7c7a      	ldrb	r2, [r7, #17]
 800fe7a:	496d      	ldr	r1, [pc, #436]	; (8010030 <etharp_query+0x268>)
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	005b      	lsls	r3, r3, #1
 800fe80:	4413      	add	r3, r2
 800fe82:	00db      	lsls	r3, r3, #3
 800fe84:	440b      	add	r3, r1
 800fe86:	3308      	adds	r3, #8
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fe8c:	7c7a      	ldrb	r2, [r7, #17]
 800fe8e:	4968      	ldr	r1, [pc, #416]	; (8010030 <etharp_query+0x268>)
 800fe90:	4613      	mov	r3, r2
 800fe92:	005b      	lsls	r3, r3, #1
 800fe94:	4413      	add	r3, r2
 800fe96:	00db      	lsls	r3, r3, #3
 800fe98:	440b      	add	r3, r1
 800fe9a:	3314      	adds	r3, #20
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d011      	beq.n	800fec6 <etharp_query+0xfe>
 800fea2:	7c7a      	ldrb	r2, [r7, #17]
 800fea4:	4962      	ldr	r1, [pc, #392]	; (8010030 <etharp_query+0x268>)
 800fea6:	4613      	mov	r3, r2
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	4413      	add	r3, r2
 800feac:	00db      	lsls	r3, r3, #3
 800feae:	440b      	add	r3, r1
 800feb0:	3314      	adds	r3, #20
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d806      	bhi.n	800fec6 <etharp_query+0xfe>
 800feb8:	4b5a      	ldr	r3, [pc, #360]	; (8010024 <etharp_query+0x25c>)
 800feba:	f240 32cf 	movw	r2, #975	; 0x3cf
 800febe:	495d      	ldr	r1, [pc, #372]	; (8010034 <etharp_query+0x26c>)
 800fec0:	485a      	ldr	r0, [pc, #360]	; (801002c <etharp_query+0x264>)
 800fec2:	f001 fe0b 	bl	8011adc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d102      	bne.n	800fed2 <etharp_query+0x10a>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d10c      	bne.n	800feec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fed2:	68b9      	ldr	r1, [r7, #8]
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f000 f963 	bl	80101a0 <etharp_request>
 800feda:	4603      	mov	r3, r0
 800fedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d102      	bne.n	800feec <etharp_query+0x124>
      return result;
 800fee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800feea:	e097      	b.n	801001c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d106      	bne.n	800ff00 <etharp_query+0x138>
 800fef2:	4b4c      	ldr	r3, [pc, #304]	; (8010024 <etharp_query+0x25c>)
 800fef4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fef8:	494f      	ldr	r1, [pc, #316]	; (8010038 <etharp_query+0x270>)
 800fefa:	484c      	ldr	r0, [pc, #304]	; (801002c <etharp_query+0x264>)
 800fefc:	f001 fdee 	bl	8011adc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ff00:	7c7a      	ldrb	r2, [r7, #17]
 800ff02:	494b      	ldr	r1, [pc, #300]	; (8010030 <etharp_query+0x268>)
 800ff04:	4613      	mov	r3, r2
 800ff06:	005b      	lsls	r3, r3, #1
 800ff08:	4413      	add	r3, r2
 800ff0a:	00db      	lsls	r3, r3, #3
 800ff0c:	440b      	add	r3, r1
 800ff0e:	3314      	adds	r3, #20
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d918      	bls.n	800ff48 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ff16:	4a49      	ldr	r2, [pc, #292]	; (801003c <etharp_query+0x274>)
 800ff18:	7c7b      	ldrb	r3, [r7, #17]
 800ff1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ff1c:	7c7a      	ldrb	r2, [r7, #17]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	4413      	add	r3, r2
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	3308      	adds	r3, #8
 800ff28:	4a41      	ldr	r2, [pc, #260]	; (8010030 <etharp_query+0x268>)
 800ff2a:	4413      	add	r3, r2
 800ff2c:	1d1a      	adds	r2, r3, #4
 800ff2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff32:	9300      	str	r3, [sp, #0]
 800ff34:	4613      	mov	r3, r2
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	6879      	ldr	r1, [r7, #4]
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f001 fc68 	bl	8011810 <ethernet_output>
 800ff40:	4603      	mov	r3, r0
 800ff42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff46:	e067      	b.n	8010018 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ff48:	7c7a      	ldrb	r2, [r7, #17]
 800ff4a:	4939      	ldr	r1, [pc, #228]	; (8010030 <etharp_query+0x268>)
 800ff4c:	4613      	mov	r3, r2
 800ff4e:	005b      	lsls	r3, r3, #1
 800ff50:	4413      	add	r3, r2
 800ff52:	00db      	lsls	r3, r3, #3
 800ff54:	440b      	add	r3, r1
 800ff56:	3314      	adds	r3, #20
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d15c      	bne.n	8010018 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ff66:	e01c      	b.n	800ffa2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	895a      	ldrh	r2, [r3, #10]
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	891b      	ldrh	r3, [r3, #8]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d10a      	bne.n	800ff8a <etharp_query+0x1c2>
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d006      	beq.n	800ff8a <etharp_query+0x1c2>
 800ff7c:	4b29      	ldr	r3, [pc, #164]	; (8010024 <etharp_query+0x25c>)
 800ff7e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ff82:	492f      	ldr	r1, [pc, #188]	; (8010040 <etharp_query+0x278>)
 800ff84:	4829      	ldr	r0, [pc, #164]	; (801002c <etharp_query+0x264>)
 800ff86:	f001 fda9 	bl	8011adc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ff8a:	69fb      	ldr	r3, [r7, #28]
 800ff8c:	7b1b      	ldrb	r3, [r3, #12]
 800ff8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <etharp_query+0x1d4>
        copy_needed = 1;
 800ff96:	2301      	movs	r3, #1
 800ff98:	61bb      	str	r3, [r7, #24]
        break;
 800ff9a:	e005      	b.n	800ffa8 <etharp_query+0x1e0>
      }
      p = p->next;
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d1df      	bne.n	800ff68 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d007      	beq.n	800ffbe <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ffb4:	200e      	movs	r0, #14
 800ffb6:	f7f8 fe2f 	bl	8008c18 <pbuf_clone>
 800ffba:	61f8      	str	r0, [r7, #28]
 800ffbc:	e004      	b.n	800ffc8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ffc2:	69f8      	ldr	r0, [r7, #28]
 800ffc4:	f7f8 fc5c 	bl	8008880 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d021      	beq.n	8010012 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ffce:	7c7a      	ldrb	r2, [r7, #17]
 800ffd0:	4917      	ldr	r1, [pc, #92]	; (8010030 <etharp_query+0x268>)
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	005b      	lsls	r3, r3, #1
 800ffd6:	4413      	add	r3, r2
 800ffd8:	00db      	lsls	r3, r3, #3
 800ffda:	440b      	add	r3, r1
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00a      	beq.n	800fff8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ffe2:	7c7a      	ldrb	r2, [r7, #17]
 800ffe4:	4912      	ldr	r1, [pc, #72]	; (8010030 <etharp_query+0x268>)
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4413      	add	r3, r2
 800ffec:	00db      	lsls	r3, r3, #3
 800ffee:	440b      	add	r3, r1
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f8 fba4 	bl	8008740 <pbuf_free>
      }
      arp_table[i].q = p;
 800fff8:	7c7a      	ldrb	r2, [r7, #17]
 800fffa:	490d      	ldr	r1, [pc, #52]	; (8010030 <etharp_query+0x268>)
 800fffc:	4613      	mov	r3, r2
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	4413      	add	r3, r2
 8010002:	00db      	lsls	r3, r3, #3
 8010004:	440b      	add	r3, r1
 8010006:	69fa      	ldr	r2, [r7, #28]
 8010008:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010010:	e002      	b.n	8010018 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010012:	23ff      	movs	r3, #255	; 0xff
 8010014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801001c:	4618      	mov	r0, r3
 801001e:	3728      	adds	r7, #40	; 0x28
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	08016758 	.word	0x08016758
 8010028:	08016904 	.word	0x08016904
 801002c:	080167d0 	.word	0x080167d0
 8010030:	2000029c 	.word	0x2000029c
 8010034:	08016914 	.word	0x08016914
 8010038:	080168f8 	.word	0x080168f8
 801003c:	2000038c 	.word	0x2000038c
 8010040:	0801693c 	.word	0x0801693c

08010044 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08a      	sub	sp, #40	; 0x28
 8010048:	af02      	add	r7, sp, #8
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010052:	2300      	movs	r3, #0
 8010054:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d106      	bne.n	801006a <etharp_raw+0x26>
 801005c:	4b3a      	ldr	r3, [pc, #232]	; (8010148 <etharp_raw+0x104>)
 801005e:	f240 4257 	movw	r2, #1111	; 0x457
 8010062:	493a      	ldr	r1, [pc, #232]	; (801014c <etharp_raw+0x108>)
 8010064:	483a      	ldr	r0, [pc, #232]	; (8010150 <etharp_raw+0x10c>)
 8010066:	f001 fd39 	bl	8011adc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801006a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801006e:	211c      	movs	r1, #28
 8010070:	200e      	movs	r0, #14
 8010072:	f7f8 f885 	bl	8008180 <pbuf_alloc>
 8010076:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d102      	bne.n	8010084 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801007e:	f04f 33ff 	mov.w	r3, #4294967295
 8010082:	e05d      	b.n	8010140 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	895b      	ldrh	r3, [r3, #10]
 8010088:	2b1b      	cmp	r3, #27
 801008a:	d806      	bhi.n	801009a <etharp_raw+0x56>
 801008c:	4b2e      	ldr	r3, [pc, #184]	; (8010148 <etharp_raw+0x104>)
 801008e:	f240 4263 	movw	r2, #1123	; 0x463
 8010092:	4930      	ldr	r1, [pc, #192]	; (8010154 <etharp_raw+0x110>)
 8010094:	482e      	ldr	r0, [pc, #184]	; (8010150 <etharp_raw+0x10c>)
 8010096:	f001 fd21 	bl	8011adc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80100a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7f7 f8b1 	bl	800720a <lwip_htons>
 80100a8:	4603      	mov	r3, r0
 80100aa:	461a      	mov	r2, r3
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100b6:	2b06      	cmp	r3, #6
 80100b8:	d006      	beq.n	80100c8 <etharp_raw+0x84>
 80100ba:	4b23      	ldr	r3, [pc, #140]	; (8010148 <etharp_raw+0x104>)
 80100bc:	f240 426a 	movw	r2, #1130	; 0x46a
 80100c0:	4925      	ldr	r1, [pc, #148]	; (8010158 <etharp_raw+0x114>)
 80100c2:	4823      	ldr	r0, [pc, #140]	; (8010150 <etharp_raw+0x10c>)
 80100c4:	f001 fd0a 	bl	8011adc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	3308      	adds	r3, #8
 80100cc:	2206      	movs	r2, #6
 80100ce:	6839      	ldr	r1, [r7, #0]
 80100d0:	4618      	mov	r0, r3
 80100d2:	f001 fc48 	bl	8011966 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	3312      	adds	r3, #18
 80100da:	2206      	movs	r2, #6
 80100dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100de:	4618      	mov	r0, r3
 80100e0:	f001 fc41 	bl	8011966 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	330e      	adds	r3, #14
 80100e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100ea:	6812      	ldr	r2, [r2, #0]
 80100ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	3318      	adds	r3, #24
 80100f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100f4:	6812      	ldr	r2, [r2, #0]
 80100f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	2200      	movs	r2, #0
 80100fc:	701a      	strb	r2, [r3, #0]
 80100fe:	2200      	movs	r2, #0
 8010100:	f042 0201 	orr.w	r2, r2, #1
 8010104:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	2200      	movs	r2, #0
 801010a:	f042 0208 	orr.w	r2, r2, #8
 801010e:	709a      	strb	r2, [r3, #2]
 8010110:	2200      	movs	r2, #0
 8010112:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	2206      	movs	r2, #6
 8010118:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2204      	movs	r2, #4
 801011e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010120:	f640 0306 	movw	r3, #2054	; 0x806
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	69b9      	ldr	r1, [r7, #24]
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f001 fb6f 	bl	8011810 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010132:	69b8      	ldr	r0, [r7, #24]
 8010134:	f7f8 fb04 	bl	8008740 <pbuf_free>
  p = NULL;
 8010138:	2300      	movs	r3, #0
 801013a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801013c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010140:	4618      	mov	r0, r3
 8010142:	3720      	adds	r7, #32
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	08016758 	.word	0x08016758
 801014c:	080168a8 	.word	0x080168a8
 8010150:	080167d0 	.word	0x080167d0
 8010154:	08016958 	.word	0x08016958
 8010158:	0801698c 	.word	0x0801698c

0801015c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af04      	add	r7, sp, #16
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010178:	2201      	movs	r2, #1
 801017a:	9203      	str	r2, [sp, #12]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	9202      	str	r2, [sp, #8]
 8010180:	4a06      	ldr	r2, [pc, #24]	; (801019c <etharp_request_dst+0x40>)
 8010182:	9201      	str	r2, [sp, #4]
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	4603      	mov	r3, r0
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f7ff ff5a 	bl	8010044 <etharp_raw>
 8010190:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	08016f10 	.word	0x08016f10

080101a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80101aa:	4a05      	ldr	r2, [pc, #20]	; (80101c0 <etharp_request+0x20>)
 80101ac:	6839      	ldr	r1, [r7, #0]
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7ff ffd4 	bl	801015c <etharp_request_dst>
 80101b4:	4603      	mov	r3, r0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	08016f08 	.word	0x08016f08

080101c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b08e      	sub	sp, #56	; 0x38
 80101c8:	af04      	add	r7, sp, #16
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80101ce:	4b79      	ldr	r3, [pc, #484]	; (80103b4 <icmp_input+0x1f0>)
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	f003 030f 	and.w	r3, r3, #15
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80101e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101e6:	2b13      	cmp	r3, #19
 80101e8:	f240 80cd 	bls.w	8010386 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	895b      	ldrh	r3, [r3, #10]
 80101f0:	2b03      	cmp	r3, #3
 80101f2:	f240 80ca 	bls.w	801038a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010200:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010204:	2b00      	cmp	r3, #0
 8010206:	f000 80b7 	beq.w	8010378 <icmp_input+0x1b4>
 801020a:	2b08      	cmp	r3, #8
 801020c:	f040 80b7 	bne.w	801037e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010210:	4b69      	ldr	r3, [pc, #420]	; (80103b8 <icmp_input+0x1f4>)
 8010212:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010214:	4b67      	ldr	r3, [pc, #412]	; (80103b4 <icmp_input+0x1f0>)
 8010216:	695b      	ldr	r3, [r3, #20]
 8010218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801021c:	2be0      	cmp	r3, #224	; 0xe0
 801021e:	f000 80bb 	beq.w	8010398 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010222:	4b64      	ldr	r3, [pc, #400]	; (80103b4 <icmp_input+0x1f0>)
 8010224:	695a      	ldr	r2, [r3, #20]
 8010226:	4b63      	ldr	r3, [pc, #396]	; (80103b4 <icmp_input+0x1f0>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4619      	mov	r1, r3
 801022c:	4610      	mov	r0, r2
 801022e:	f000 fbeb 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	f040 80b1 	bne.w	801039c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	891b      	ldrh	r3, [r3, #8]
 801023e:	2b07      	cmp	r3, #7
 8010240:	f240 80a5 	bls.w	801038e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010246:	330e      	adds	r3, #14
 8010248:	4619      	mov	r1, r3
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7f8 f9e2 	bl	8008614 <pbuf_add_header>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d04b      	beq.n	80102ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	891a      	ldrh	r2, [r3, #8]
 801025a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801025c:	4413      	add	r3, r2
 801025e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	891b      	ldrh	r3, [r3, #8]
 8010264:	8b7a      	ldrh	r2, [r7, #26]
 8010266:	429a      	cmp	r2, r3
 8010268:	f0c0 809a 	bcc.w	80103a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801026c:	8b7b      	ldrh	r3, [r7, #26]
 801026e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010272:	4619      	mov	r1, r3
 8010274:	200e      	movs	r0, #14
 8010276:	f7f7 ff83 	bl	8008180 <pbuf_alloc>
 801027a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	2b00      	cmp	r3, #0
 8010280:	f000 8090 	beq.w	80103a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	895b      	ldrh	r3, [r3, #10]
 8010288:	461a      	mov	r2, r3
 801028a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801028c:	3308      	adds	r3, #8
 801028e:	429a      	cmp	r2, r3
 8010290:	d203      	bcs.n	801029a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010292:	6978      	ldr	r0, [r7, #20]
 8010294:	f7f8 fa54 	bl	8008740 <pbuf_free>
          goto icmperr;
 8010298:	e085      	b.n	80103a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80102a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80102a2:	4618      	mov	r0, r3
 80102a4:	f001 fb5f 	bl	8011966 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80102a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102aa:	4619      	mov	r1, r3
 80102ac:	6978      	ldr	r0, [r7, #20]
 80102ae:	f7f8 f9c1 	bl	8008634 <pbuf_remove_header>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d009      	beq.n	80102cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80102b8:	4b40      	ldr	r3, [pc, #256]	; (80103bc <icmp_input+0x1f8>)
 80102ba:	22b6      	movs	r2, #182	; 0xb6
 80102bc:	4940      	ldr	r1, [pc, #256]	; (80103c0 <icmp_input+0x1fc>)
 80102be:	4841      	ldr	r0, [pc, #260]	; (80103c4 <icmp_input+0x200>)
 80102c0:	f001 fc0c 	bl	8011adc <iprintf>
          pbuf_free(r);
 80102c4:	6978      	ldr	r0, [r7, #20]
 80102c6:	f7f8 fa3b 	bl	8008740 <pbuf_free>
          goto icmperr;
 80102ca:	e06c      	b.n	80103a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80102cc:	6879      	ldr	r1, [r7, #4]
 80102ce:	6978      	ldr	r0, [r7, #20]
 80102d0:	f7f8 fb5e 	bl	8008990 <pbuf_copy>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d003      	beq.n	80102e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80102da:	6978      	ldr	r0, [r7, #20]
 80102dc:	f7f8 fa30 	bl	8008740 <pbuf_free>
          goto icmperr;
 80102e0:	e061      	b.n	80103a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7f8 fa2c 	bl	8008740 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	607b      	str	r3, [r7, #4]
 80102ec:	e00f      	b.n	801030e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80102ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102f0:	330e      	adds	r3, #14
 80102f2:	4619      	mov	r1, r3
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7f8 f99d 	bl	8008634 <pbuf_remove_header>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d006      	beq.n	801030e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010300:	4b2e      	ldr	r3, [pc, #184]	; (80103bc <icmp_input+0x1f8>)
 8010302:	22c7      	movs	r2, #199	; 0xc7
 8010304:	4930      	ldr	r1, [pc, #192]	; (80103c8 <icmp_input+0x204>)
 8010306:	482f      	ldr	r0, [pc, #188]	; (80103c4 <icmp_input+0x200>)
 8010308:	f001 fbe8 	bl	8011adc <iprintf>
          goto icmperr;
 801030c:	e04b      	b.n	80103a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010316:	4619      	mov	r1, r3
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f7f8 f97b 	bl	8008614 <pbuf_add_header>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d12b      	bne.n	801037c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010332:	4b20      	ldr	r3, [pc, #128]	; (80103b4 <icmp_input+0x1f0>)
 8010334:	691a      	ldr	r2, [r3, #16]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	2200      	movs	r2, #0
 801033e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	2200      	movs	r2, #0
 8010344:	709a      	strb	r2, [r3, #2]
 8010346:	2200      	movs	r2, #0
 8010348:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	22ff      	movs	r2, #255	; 0xff
 801034e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2200      	movs	r2, #0
 8010354:	729a      	strb	r2, [r3, #10]
 8010356:	2200      	movs	r2, #0
 8010358:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	9302      	str	r3, [sp, #8]
 801035e:	2301      	movs	r3, #1
 8010360:	9301      	str	r3, [sp, #4]
 8010362:	2300      	movs	r3, #0
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	23ff      	movs	r3, #255	; 0xff
 8010368:	2200      	movs	r2, #0
 801036a:	69f9      	ldr	r1, [r7, #28]
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 fa73 	bl	8010858 <ip4_output_if>
 8010372:	4603      	mov	r3, r0
 8010374:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010376:	e001      	b.n	801037c <icmp_input+0x1b8>
      break;
 8010378:	bf00      	nop
 801037a:	e000      	b.n	801037e <icmp_input+0x1ba>
      break;
 801037c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7f8 f9de 	bl	8008740 <pbuf_free>
  return;
 8010384:	e013      	b.n	80103ae <icmp_input+0x1ea>
    goto lenerr;
 8010386:	bf00      	nop
 8010388:	e002      	b.n	8010390 <icmp_input+0x1cc>
    goto lenerr;
 801038a:	bf00      	nop
 801038c:	e000      	b.n	8010390 <icmp_input+0x1cc>
        goto lenerr;
 801038e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7f8 f9d5 	bl	8008740 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010396:	e00a      	b.n	80103ae <icmp_input+0x1ea>
        goto icmperr;
 8010398:	bf00      	nop
 801039a:	e004      	b.n	80103a6 <icmp_input+0x1e2>
        goto icmperr;
 801039c:	bf00      	nop
 801039e:	e002      	b.n	80103a6 <icmp_input+0x1e2>
          goto icmperr;
 80103a0:	bf00      	nop
 80103a2:	e000      	b.n	80103a6 <icmp_input+0x1e2>
          goto icmperr;
 80103a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7f8 f9ca 	bl	8008740 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80103ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80103ae:	3728      	adds	r7, #40	; 0x28
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	20003a6c 	.word	0x20003a6c
 80103b8:	20003a80 	.word	0x20003a80
 80103bc:	080169d0 	.word	0x080169d0
 80103c0:	08016a08 	.word	0x08016a08
 80103c4:	08016a40 	.word	0x08016a40
 80103c8:	08016a68 	.word	0x08016a68

080103cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	460b      	mov	r3, r1
 80103d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80103d8:	78fb      	ldrb	r3, [r7, #3]
 80103da:	461a      	mov	r2, r3
 80103dc:	2103      	movs	r1, #3
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f814 	bl	801040c <icmp_send_response>
}
 80103e4:	bf00      	nop
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	460b      	mov	r3, r1
 80103f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80103f8:	78fb      	ldrb	r3, [r7, #3]
 80103fa:	461a      	mov	r2, r3
 80103fc:	210b      	movs	r1, #11
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 f804 	bl	801040c <icmp_send_response>
}
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b08c      	sub	sp, #48	; 0x30
 8010410:	af04      	add	r7, sp, #16
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	70fb      	strb	r3, [r7, #3]
 8010418:	4613      	mov	r3, r2
 801041a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801041c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010420:	2124      	movs	r1, #36	; 0x24
 8010422:	2022      	movs	r0, #34	; 0x22
 8010424:	f7f7 feac 	bl	8008180 <pbuf_alloc>
 8010428:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d04c      	beq.n	80104ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	895b      	ldrh	r3, [r3, #10]
 8010434:	2b23      	cmp	r3, #35	; 0x23
 8010436:	d806      	bhi.n	8010446 <icmp_send_response+0x3a>
 8010438:	4b26      	ldr	r3, [pc, #152]	; (80104d4 <icmp_send_response+0xc8>)
 801043a:	f240 1269 	movw	r2, #361	; 0x169
 801043e:	4926      	ldr	r1, [pc, #152]	; (80104d8 <icmp_send_response+0xcc>)
 8010440:	4826      	ldr	r0, [pc, #152]	; (80104dc <icmp_send_response+0xd0>)
 8010442:	f001 fb4b 	bl	8011adc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	685b      	ldr	r3, [r3, #4]
 801044a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	78fa      	ldrb	r2, [r7, #3]
 8010456:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	78ba      	ldrb	r2, [r7, #2]
 801045c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	2200      	movs	r2, #0
 8010462:	711a      	strb	r2, [r3, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2200      	movs	r2, #0
 801046c:	719a      	strb	r2, [r3, #6]
 801046e:	2200      	movs	r2, #0
 8010470:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010472:	69fb      	ldr	r3, [r7, #28]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	f103 0008 	add.w	r0, r3, #8
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	685b      	ldr	r3, [r3, #4]
 801047e:	221c      	movs	r2, #28
 8010480:	4619      	mov	r1, r3
 8010482:	f001 fa70 	bl	8011966 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801048c:	f107 030c 	add.w	r3, r7, #12
 8010490:	4618      	mov	r0, r3
 8010492:	f000 f825 	bl	80104e0 <ip4_route>
 8010496:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d011      	beq.n	80104c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	2200      	movs	r2, #0
 80104a2:	709a      	strb	r2, [r3, #2]
 80104a4:	2200      	movs	r2, #0
 80104a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80104a8:	f107 020c 	add.w	r2, r7, #12
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	9302      	str	r3, [sp, #8]
 80104b0:	2301      	movs	r3, #1
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	2300      	movs	r3, #0
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	23ff      	movs	r3, #255	; 0xff
 80104ba:	2100      	movs	r1, #0
 80104bc:	69f8      	ldr	r0, [r7, #28]
 80104be:	f000 f9cb 	bl	8010858 <ip4_output_if>
  }
  pbuf_free(q);
 80104c2:	69f8      	ldr	r0, [r7, #28]
 80104c4:	f7f8 f93c 	bl	8008740 <pbuf_free>
 80104c8:	e000      	b.n	80104cc <icmp_send_response+0xc0>
    return;
 80104ca:	bf00      	nop
}
 80104cc:	3720      	adds	r7, #32
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
 80104d2:	bf00      	nop
 80104d4:	080169d0 	.word	0x080169d0
 80104d8:	08016a9c 	.word	0x08016a9c
 80104dc:	08016a40 	.word	0x08016a40

080104e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b085      	sub	sp, #20
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80104e8:	4b33      	ldr	r3, [pc, #204]	; (80105b8 <ip4_route+0xd8>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	e036      	b.n	801055e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80104f6:	f003 0301 	and.w	r3, r3, #1
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d02b      	beq.n	8010558 <ip4_route+0x78>
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010506:	089b      	lsrs	r3, r3, #2
 8010508:	f003 0301 	and.w	r3, r3, #1
 801050c:	b2db      	uxtb	r3, r3
 801050e:	2b00      	cmp	r3, #0
 8010510:	d022      	beq.n	8010558 <ip4_route+0x78>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	3304      	adds	r3, #4
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d01d      	beq.n	8010558 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	3304      	adds	r3, #4
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	405a      	eors	r2, r3
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	3308      	adds	r3, #8
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4013      	ands	r3, r2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	e038      	b.n	80105aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801053e:	f003 0302 	and.w	r3, r3, #2
 8010542:	2b00      	cmp	r3, #0
 8010544:	d108      	bne.n	8010558 <ip4_route+0x78>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	330c      	adds	r3, #12
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	429a      	cmp	r2, r3
 8010552:	d101      	bne.n	8010558 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	e028      	b.n	80105aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60fb      	str	r3, [r7, #12]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d1c5      	bne.n	80104f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010564:	4b15      	ldr	r3, [pc, #84]	; (80105bc <ip4_route+0xdc>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d01a      	beq.n	80105a2 <ip4_route+0xc2>
 801056c:	4b13      	ldr	r3, [pc, #76]	; (80105bc <ip4_route+0xdc>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010574:	f003 0301 	and.w	r3, r3, #1
 8010578:	2b00      	cmp	r3, #0
 801057a:	d012      	beq.n	80105a2 <ip4_route+0xc2>
 801057c:	4b0f      	ldr	r3, [pc, #60]	; (80105bc <ip4_route+0xdc>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010584:	f003 0304 	and.w	r3, r3, #4
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801058c:	4b0b      	ldr	r3, [pc, #44]	; (80105bc <ip4_route+0xdc>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3304      	adds	r3, #4
 8010592:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010594:	2b00      	cmp	r3, #0
 8010596:	d004      	beq.n	80105a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b7f      	cmp	r3, #127	; 0x7f
 80105a0:	d101      	bne.n	80105a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	e001      	b.n	80105aa <ip4_route+0xca>
  }

  return netif_default;
 80105a6:	4b05      	ldr	r3, [pc, #20]	; (80105bc <ip4_route+0xdc>)
 80105a8:	681b      	ldr	r3, [r3, #0]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	20006fa0 	.word	0x20006fa0
 80105bc:	20006fa4 	.word	0x20006fa4

080105c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80105ce:	f003 0301 	and.w	r3, r3, #1
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d016      	beq.n	8010606 <ip4_input_accept+0x46>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	3304      	adds	r3, #4
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d011      	beq.n	8010606 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80105e2:	4b0b      	ldr	r3, [pc, #44]	; (8010610 <ip4_input_accept+0x50>)
 80105e4:	695a      	ldr	r2, [r3, #20]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	3304      	adds	r3, #4
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d008      	beq.n	8010602 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80105f0:	4b07      	ldr	r3, [pc, #28]	; (8010610 <ip4_input_accept+0x50>)
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 fa06 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 80105fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d001      	beq.n	8010606 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010602:	2301      	movs	r3, #1
 8010604:	e000      	b.n	8010608 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20003a6c 	.word	0x20003a6c

08010614 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	091b      	lsrs	r3, r3, #4
 801062a:	b2db      	uxtb	r3, r3
 801062c:	2b04      	cmp	r3, #4
 801062e:	d004      	beq.n	801063a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7f8 f885 	bl	8008740 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010636:	2300      	movs	r3, #0
 8010638:	e105      	b.n	8010846 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	f003 030f 	and.w	r3, r3, #15
 8010642:	b2db      	uxtb	r3, r3
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	b2db      	uxtb	r3, r3
 8010648:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	885b      	ldrh	r3, [r3, #2]
 801064e:	b29b      	uxth	r3, r3
 8010650:	4618      	mov	r0, r3
 8010652:	f7f6 fdda 	bl	800720a <lwip_htons>
 8010656:	4603      	mov	r3, r0
 8010658:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	891b      	ldrh	r3, [r3, #8]
 801065e:	89ba      	ldrh	r2, [r7, #12]
 8010660:	429a      	cmp	r2, r3
 8010662:	d204      	bcs.n	801066e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010664:	89bb      	ldrh	r3, [r7, #12]
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7f7 fee3 	bl	8008434 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	895b      	ldrh	r3, [r3, #10]
 8010672:	89fa      	ldrh	r2, [r7, #14]
 8010674:	429a      	cmp	r2, r3
 8010676:	d807      	bhi.n	8010688 <ip4_input+0x74>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	891b      	ldrh	r3, [r3, #8]
 801067c:	89ba      	ldrh	r2, [r7, #12]
 801067e:	429a      	cmp	r2, r3
 8010680:	d802      	bhi.n	8010688 <ip4_input+0x74>
 8010682:	89fb      	ldrh	r3, [r7, #14]
 8010684:	2b13      	cmp	r3, #19
 8010686:	d804      	bhi.n	8010692 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7f8 f859 	bl	8008740 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801068e:	2300      	movs	r3, #0
 8010690:	e0d9      	b.n	8010846 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	4a6e      	ldr	r2, [pc, #440]	; (8010850 <ip4_input+0x23c>)
 8010698:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	4a6c      	ldr	r2, [pc, #432]	; (8010850 <ip4_input+0x23c>)
 80106a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80106a2:	4b6b      	ldr	r3, [pc, #428]	; (8010850 <ip4_input+0x23c>)
 80106a4:	695b      	ldr	r3, [r3, #20]
 80106a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106aa:	2be0      	cmp	r3, #224	; 0xe0
 80106ac:	d112      	bne.n	80106d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80106b4:	f003 0301 	and.w	r3, r3, #1
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d007      	beq.n	80106ce <ip4_input+0xba>
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	3304      	adds	r3, #4
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d002      	beq.n	80106ce <ip4_input+0xba>
      netif = inp;
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	613b      	str	r3, [r7, #16]
 80106cc:	e02a      	b.n	8010724 <ip4_input+0x110>
    } else {
      netif = NULL;
 80106ce:	2300      	movs	r3, #0
 80106d0:	613b      	str	r3, [r7, #16]
 80106d2:	e027      	b.n	8010724 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80106d4:	6838      	ldr	r0, [r7, #0]
 80106d6:	f7ff ff73 	bl	80105c0 <ip4_input_accept>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <ip4_input+0xd2>
      netif = inp;
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	613b      	str	r3, [r7, #16]
 80106e4:	e01e      	b.n	8010724 <ip4_input+0x110>
    } else {
      netif = NULL;
 80106e6:	2300      	movs	r3, #0
 80106e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80106ea:	4b59      	ldr	r3, [pc, #356]	; (8010850 <ip4_input+0x23c>)
 80106ec:	695b      	ldr	r3, [r3, #20]
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	2b7f      	cmp	r3, #127	; 0x7f
 80106f2:	d017      	beq.n	8010724 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80106f4:	4b57      	ldr	r3, [pc, #348]	; (8010854 <ip4_input+0x240>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	613b      	str	r3, [r7, #16]
 80106fa:	e00e      	b.n	801071a <ip4_input+0x106>
          if (netif == inp) {
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	429a      	cmp	r2, r3
 8010702:	d006      	beq.n	8010712 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010704:	6938      	ldr	r0, [r7, #16]
 8010706:	f7ff ff5b 	bl	80105c0 <ip4_input_accept>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d108      	bne.n	8010722 <ip4_input+0x10e>
 8010710:	e000      	b.n	8010714 <ip4_input+0x100>
            continue;
 8010712:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	613b      	str	r3, [r7, #16]
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d1ed      	bne.n	80106fc <ip4_input+0xe8>
 8010720:	e000      	b.n	8010724 <ip4_input+0x110>
            break;
 8010722:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010724:	4b4a      	ldr	r3, [pc, #296]	; (8010850 <ip4_input+0x23c>)
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	4618      	mov	r0, r3
 801072c:	f000 f96c 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d105      	bne.n	8010742 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010736:	4b46      	ldr	r3, [pc, #280]	; (8010850 <ip4_input+0x23c>)
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801073e:	2be0      	cmp	r3, #224	; 0xe0
 8010740:	d104      	bne.n	801074c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7f7 fffc 	bl	8008740 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	e07c      	b.n	8010846 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d104      	bne.n	801075c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7f7 fff4 	bl	8008740 <pbuf_free>
    return ERR_OK;
 8010758:	2300      	movs	r3, #0
 801075a:	e074      	b.n	8010846 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	88db      	ldrh	r3, [r3, #6]
 8010760:	b29b      	uxth	r3, r3
 8010762:	461a      	mov	r2, r3
 8010764:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010768:	4013      	ands	r3, r2
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00b      	beq.n	8010786 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fc90 	bl	8011094 <ip4_reass>
 8010774:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d101      	bne.n	8010780 <ip4_input+0x16c>
      return ERR_OK;
 801077c:	2300      	movs	r3, #0
 801077e:	e062      	b.n	8010846 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010786:	4a32      	ldr	r2, [pc, #200]	; (8010850 <ip4_input+0x23c>)
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801078c:	4a30      	ldr	r2, [pc, #192]	; (8010850 <ip4_input+0x23c>)
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010792:	4a2f      	ldr	r2, [pc, #188]	; (8010850 <ip4_input+0x23c>)
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	f003 030f 	and.w	r3, r3, #15
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	4b29      	ldr	r3, [pc, #164]	; (8010850 <ip4_input+0x23c>)
 80107aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80107ac:	89fb      	ldrh	r3, [r7, #14]
 80107ae:	4619      	mov	r1, r3
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7f7 ff3f 	bl	8008634 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	7a5b      	ldrb	r3, [r3, #9]
 80107ba:	2b06      	cmp	r3, #6
 80107bc:	d009      	beq.n	80107d2 <ip4_input+0x1be>
 80107be:	2b11      	cmp	r3, #17
 80107c0:	d002      	beq.n	80107c8 <ip4_input+0x1b4>
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d00a      	beq.n	80107dc <ip4_input+0x1c8>
 80107c6:	e00e      	b.n	80107e6 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80107c8:	6839      	ldr	r1, [r7, #0]
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f7fe fc6a 	bl	800f0a4 <udp_input>
        break;
 80107d0:	e026      	b.n	8010820 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7fa f87f 	bl	800a8d8 <tcp_input>
        break;
 80107da:	e021      	b.n	8010820 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff fcf0 	bl	80101c4 <icmp_input>
        break;
 80107e4:	e01c      	b.n	8010820 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80107e6:	4b1a      	ldr	r3, [pc, #104]	; (8010850 <ip4_input+0x23c>)
 80107e8:	695b      	ldr	r3, [r3, #20]
 80107ea:	6939      	ldr	r1, [r7, #16]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 f90b 	bl	8010a08 <ip4_addr_isbroadcast_u32>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d10f      	bne.n	8010818 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80107f8:	4b15      	ldr	r3, [pc, #84]	; (8010850 <ip4_input+0x23c>)
 80107fa:	695b      	ldr	r3, [r3, #20]
 80107fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010800:	2be0      	cmp	r3, #224	; 0xe0
 8010802:	d009      	beq.n	8010818 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010804:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7f7 ff85 	bl	800871a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010810:	2102      	movs	r1, #2
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff fdda 	bl	80103cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7f7 ff91 	bl	8008740 <pbuf_free>
        break;
 801081e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010820:	4b0b      	ldr	r3, [pc, #44]	; (8010850 <ip4_input+0x23c>)
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010826:	4b0a      	ldr	r3, [pc, #40]	; (8010850 <ip4_input+0x23c>)
 8010828:	2200      	movs	r2, #0
 801082a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801082c:	4b08      	ldr	r3, [pc, #32]	; (8010850 <ip4_input+0x23c>)
 801082e:	2200      	movs	r2, #0
 8010830:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010832:	4b07      	ldr	r3, [pc, #28]	; (8010850 <ip4_input+0x23c>)
 8010834:	2200      	movs	r2, #0
 8010836:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010838:	4b05      	ldr	r3, [pc, #20]	; (8010850 <ip4_input+0x23c>)
 801083a:	2200      	movs	r2, #0
 801083c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801083e:	4b04      	ldr	r3, [pc, #16]	; (8010850 <ip4_input+0x23c>)
 8010840:	2200      	movs	r2, #0
 8010842:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010844:	2300      	movs	r3, #0
}
 8010846:	4618      	mov	r0, r3
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	20003a6c 	.word	0x20003a6c
 8010854:	20006fa0 	.word	0x20006fa0

08010858 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08a      	sub	sp, #40	; 0x28
 801085c:	af04      	add	r7, sp, #16
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
 8010864:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d009      	beq.n	8010884 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d003      	beq.n	801087e <ip4_output_if+0x26>
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d102      	bne.n	8010884 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	3304      	adds	r3, #4
 8010882:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010884:	78fa      	ldrb	r2, [r7, #3]
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	9302      	str	r3, [sp, #8]
 801088a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	4613      	mov	r3, r2
 8010898:	687a      	ldr	r2, [r7, #4]
 801089a:	6979      	ldr	r1, [r7, #20]
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f805 	bl	80108ac <ip4_output_if_src>
 80108a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3718      	adds	r7, #24
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b088      	sub	sp, #32
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
 80108b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	7b9b      	ldrb	r3, [r3, #14]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d006      	beq.n	80108d0 <ip4_output_if_src+0x24>
 80108c2:	4b4b      	ldr	r3, [pc, #300]	; (80109f0 <ip4_output_if_src+0x144>)
 80108c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80108c8:	494a      	ldr	r1, [pc, #296]	; (80109f4 <ip4_output_if_src+0x148>)
 80108ca:	484b      	ldr	r0, [pc, #300]	; (80109f8 <ip4_output_if_src+0x14c>)
 80108cc:	f001 f906 	bl	8011adc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d060      	beq.n	8010998 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80108d6:	2314      	movs	r3, #20
 80108d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80108da:	2114      	movs	r1, #20
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f7f7 fe99 	bl	8008614 <pbuf_add_header>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80108e8:	f06f 0301 	mvn.w	r3, #1
 80108ec:	e07c      	b.n	80109e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	895b      	ldrh	r3, [r3, #10]
 80108f8:	2b13      	cmp	r3, #19
 80108fa:	d806      	bhi.n	801090a <ip4_output_if_src+0x5e>
 80108fc:	4b3c      	ldr	r3, [pc, #240]	; (80109f0 <ip4_output_if_src+0x144>)
 80108fe:	f240 3289 	movw	r2, #905	; 0x389
 8010902:	493e      	ldr	r1, [pc, #248]	; (80109fc <ip4_output_if_src+0x150>)
 8010904:	483c      	ldr	r0, [pc, #240]	; (80109f8 <ip4_output_if_src+0x14c>)
 8010906:	f001 f8e9 	bl	8011adc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	78fa      	ldrb	r2, [r7, #3]
 801090e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010916:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010920:	8b7b      	ldrh	r3, [r7, #26]
 8010922:	089b      	lsrs	r3, r3, #2
 8010924:	b29b      	uxth	r3, r3
 8010926:	b2db      	uxtb	r3, r3
 8010928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801092c:	b2da      	uxtb	r2, r3
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010938:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	891b      	ldrh	r3, [r3, #8]
 801093e:	4618      	mov	r0, r3
 8010940:	f7f6 fc63 	bl	800720a <lwip_htons>
 8010944:	4603      	mov	r3, r0
 8010946:	461a      	mov	r2, r3
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	2200      	movs	r2, #0
 8010950:	719a      	strb	r2, [r3, #6]
 8010952:	2200      	movs	r2, #0
 8010954:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010956:	4b2a      	ldr	r3, [pc, #168]	; (8010a00 <ip4_output_if_src+0x154>)
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	4618      	mov	r0, r3
 801095c:	f7f6 fc55 	bl	800720a <lwip_htons>
 8010960:	4603      	mov	r3, r0
 8010962:	461a      	mov	r2, r3
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010968:	4b25      	ldr	r3, [pc, #148]	; (8010a00 <ip4_output_if_src+0x154>)
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	3301      	adds	r3, #1
 801096e:	b29a      	uxth	r2, r3
 8010970:	4b23      	ldr	r3, [pc, #140]	; (8010a00 <ip4_output_if_src+0x154>)
 8010972:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d104      	bne.n	8010984 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801097a:	4b22      	ldr	r3, [pc, #136]	; (8010a04 <ip4_output_if_src+0x158>)
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	60da      	str	r2, [r3, #12]
 8010982:	e003      	b.n	801098c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	2200      	movs	r2, #0
 8010990:	729a      	strb	r2, [r3, #10]
 8010992:	2200      	movs	r2, #0
 8010994:	72da      	strb	r2, [r3, #11]
 8010996:	e00f      	b.n	80109b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	895b      	ldrh	r3, [r3, #10]
 801099c:	2b13      	cmp	r3, #19
 801099e:	d802      	bhi.n	80109a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80109a0:	f06f 0301 	mvn.w	r3, #1
 80109a4:	e020      	b.n	80109e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80109b2:	f107 0314 	add.w	r3, r7, #20
 80109b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80109b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ba:	8c1b      	ldrh	r3, [r3, #32]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00c      	beq.n	80109da <ip4_output_if_src+0x12e>
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	891a      	ldrh	r2, [r3, #8]
 80109c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c6:	8c1b      	ldrh	r3, [r3, #32]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d906      	bls.n	80109da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f000 fd4b 	bl	801146c <ip4_frag>
 80109d6:	4603      	mov	r3, r0
 80109d8:	e006      	b.n	80109e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80109da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109dc:	695b      	ldr	r3, [r3, #20]
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	68f9      	ldr	r1, [r7, #12]
 80109e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109e4:	4798      	blx	r3
 80109e6:	4603      	mov	r3, r0
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3720      	adds	r7, #32
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	08016ac8 	.word	0x08016ac8
 80109f4:	08016afc 	.word	0x08016afc
 80109f8:	08016b08 	.word	0x08016b08
 80109fc:	08016b30 	.word	0x08016b30
 8010a00:	2000038e 	.word	0x2000038e
 8010a04:	08016f04 	.word	0x08016f04

08010a08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a1c:	d002      	beq.n	8010a24 <ip4_addr_isbroadcast_u32+0x1c>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d101      	bne.n	8010a28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010a24:	2301      	movs	r3, #1
 8010a26:	e02a      	b.n	8010a7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a2e:	f003 0302 	and.w	r3, r3, #2
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d101      	bne.n	8010a3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	e021      	b.n	8010a7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d101      	bne.n	8010a4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010a46:	2300      	movs	r3, #0
 8010a48:	e019      	b.n	8010a7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010a4a:	68fa      	ldr	r2, [r7, #12]
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	405a      	eors	r2, r3
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	3308      	adds	r3, #8
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d10d      	bne.n	8010a7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	3308      	adds	r3, #8
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	43da      	mvns	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	3308      	adds	r3, #8
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d101      	bne.n	8010a7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e000      	b.n	8010a7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010a7c:	2300      	movs	r3, #0
  }
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3714      	adds	r7, #20
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
	...

08010a8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010a92:	2300      	movs	r3, #0
 8010a94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010a96:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <ip_reass_tmr+0x54>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010a9c:	e018      	b.n	8010ad0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	7fdb      	ldrb	r3, [r3, #31]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00b      	beq.n	8010abe <ip_reass_tmr+0x32>
      r->timer--;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	7fdb      	ldrb	r3, [r3, #31]
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	60fb      	str	r3, [r7, #12]
 8010abc:	e008      	b.n	8010ad0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010ac8:	68b9      	ldr	r1, [r7, #8]
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 f80a 	bl	8010ae4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d1e3      	bne.n	8010a9e <ip_reass_tmr+0x12>
    }
  }
}
 8010ad6:	bf00      	nop
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	20000390 	.word	0x20000390

08010ae4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b088      	sub	sp, #32
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d105      	bne.n	8010b06 <ip_reass_free_complete_datagram+0x22>
 8010afa:	4b45      	ldr	r3, [pc, #276]	; (8010c10 <ip_reass_free_complete_datagram+0x12c>)
 8010afc:	22ab      	movs	r2, #171	; 0xab
 8010afe:	4945      	ldr	r1, [pc, #276]	; (8010c14 <ip_reass_free_complete_datagram+0x130>)
 8010b00:	4845      	ldr	r0, [pc, #276]	; (8010c18 <ip_reass_free_complete_datagram+0x134>)
 8010b02:	f000 ffeb 	bl	8011adc <iprintf>
  if (prev != NULL) {
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d00a      	beq.n	8010b22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d005      	beq.n	8010b22 <ip_reass_free_complete_datagram+0x3e>
 8010b16:	4b3e      	ldr	r3, [pc, #248]	; (8010c10 <ip_reass_free_complete_datagram+0x12c>)
 8010b18:	22ad      	movs	r2, #173	; 0xad
 8010b1a:	4940      	ldr	r1, [pc, #256]	; (8010c1c <ip_reass_free_complete_datagram+0x138>)
 8010b1c:	483e      	ldr	r0, [pc, #248]	; (8010c18 <ip_reass_free_complete_datagram+0x134>)
 8010b1e:	f000 ffdd 	bl	8011adc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	889b      	ldrh	r3, [r3, #4]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d12a      	bne.n	8010b8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	6858      	ldr	r0, [r3, #4]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	3308      	adds	r3, #8
 8010b4a:	2214      	movs	r2, #20
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	f000 ff0a 	bl	8011966 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010b52:	2101      	movs	r1, #1
 8010b54:	69b8      	ldr	r0, [r7, #24]
 8010b56:	f7ff fc49 	bl	80103ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010b5a:	69b8      	ldr	r0, [r7, #24]
 8010b5c:	f7f7 fe78 	bl	8008850 <pbuf_clen>
 8010b60:	4603      	mov	r3, r0
 8010b62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010b64:	8bfa      	ldrh	r2, [r7, #30]
 8010b66:	8a7b      	ldrh	r3, [r7, #18]
 8010b68:	4413      	add	r3, r2
 8010b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b6e:	db05      	blt.n	8010b7c <ip_reass_free_complete_datagram+0x98>
 8010b70:	4b27      	ldr	r3, [pc, #156]	; (8010c10 <ip_reass_free_complete_datagram+0x12c>)
 8010b72:	22bc      	movs	r2, #188	; 0xbc
 8010b74:	492a      	ldr	r1, [pc, #168]	; (8010c20 <ip_reass_free_complete_datagram+0x13c>)
 8010b76:	4828      	ldr	r0, [pc, #160]	; (8010c18 <ip_reass_free_complete_datagram+0x134>)
 8010b78:	f000 ffb0 	bl	8011adc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010b7c:	8bfa      	ldrh	r2, [r7, #30]
 8010b7e:	8a7b      	ldrh	r3, [r7, #18]
 8010b80:	4413      	add	r3, r2
 8010b82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010b84:	69b8      	ldr	r0, [r7, #24]
 8010b86:	f7f7 fddb 	bl	8008740 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010b90:	e01f      	b.n	8010bd2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7f7 fe54 	bl	8008850 <pbuf_clen>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010bac:	8bfa      	ldrh	r2, [r7, #30]
 8010bae:	8a7b      	ldrh	r3, [r7, #18]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bb6:	db05      	blt.n	8010bc4 <ip_reass_free_complete_datagram+0xe0>
 8010bb8:	4b15      	ldr	r3, [pc, #84]	; (8010c10 <ip_reass_free_complete_datagram+0x12c>)
 8010bba:	22cc      	movs	r2, #204	; 0xcc
 8010bbc:	4918      	ldr	r1, [pc, #96]	; (8010c20 <ip_reass_free_complete_datagram+0x13c>)
 8010bbe:	4816      	ldr	r0, [pc, #88]	; (8010c18 <ip_reass_free_complete_datagram+0x134>)
 8010bc0:	f000 ff8c 	bl	8011adc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010bc4:	8bfa      	ldrh	r2, [r7, #30]
 8010bc6:	8a7b      	ldrh	r3, [r7, #18]
 8010bc8:	4413      	add	r3, r2
 8010bca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f7f7 fdb7 	bl	8008740 <pbuf_free>
  while (p != NULL) {
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d1dc      	bne.n	8010b92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010bd8:	6839      	ldr	r1, [r7, #0]
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 f8c2 	bl	8010d64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010be0:	4b10      	ldr	r3, [pc, #64]	; (8010c24 <ip_reass_free_complete_datagram+0x140>)
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	8bfa      	ldrh	r2, [r7, #30]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d905      	bls.n	8010bf6 <ip_reass_free_complete_datagram+0x112>
 8010bea:	4b09      	ldr	r3, [pc, #36]	; (8010c10 <ip_reass_free_complete_datagram+0x12c>)
 8010bec:	22d2      	movs	r2, #210	; 0xd2
 8010bee:	490e      	ldr	r1, [pc, #56]	; (8010c28 <ip_reass_free_complete_datagram+0x144>)
 8010bf0:	4809      	ldr	r0, [pc, #36]	; (8010c18 <ip_reass_free_complete_datagram+0x134>)
 8010bf2:	f000 ff73 	bl	8011adc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010bf6:	4b0b      	ldr	r3, [pc, #44]	; (8010c24 <ip_reass_free_complete_datagram+0x140>)
 8010bf8:	881a      	ldrh	r2, [r3, #0]
 8010bfa:	8bfb      	ldrh	r3, [r7, #30]
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	b29a      	uxth	r2, r3
 8010c00:	4b08      	ldr	r3, [pc, #32]	; (8010c24 <ip_reass_free_complete_datagram+0x140>)
 8010c02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010c04:	8bfb      	ldrh	r3, [r7, #30]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3720      	adds	r7, #32
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	08016b60 	.word	0x08016b60
 8010c14:	08016b9c 	.word	0x08016b9c
 8010c18:	08016ba8 	.word	0x08016ba8
 8010c1c:	08016bd0 	.word	0x08016bd0
 8010c20:	08016be4 	.word	0x08016be4
 8010c24:	20000394 	.word	0x20000394
 8010c28:	08016c04 	.word	0x08016c04

08010c2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b08a      	sub	sp, #40	; 0x28
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010c36:	2300      	movs	r3, #0
 8010c38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010c42:	2300      	movs	r3, #0
 8010c44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010c46:	2300      	movs	r3, #0
 8010c48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010c4a:	4b28      	ldr	r3, [pc, #160]	; (8010cec <ip_reass_remove_oldest_datagram+0xc0>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010c50:	e030      	b.n	8010cb4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	695a      	ldr	r2, [r3, #20]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d10c      	bne.n	8010c78 <ip_reass_remove_oldest_datagram+0x4c>
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c60:	699a      	ldr	r2, [r3, #24]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d106      	bne.n	8010c78 <ip_reass_remove_oldest_datagram+0x4c>
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	899a      	ldrh	r2, [r3, #12]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	889b      	ldrh	r3, [r3, #4]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d014      	beq.n	8010ca2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d104      	bne.n	8010c8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	61bb      	str	r3, [r7, #24]
 8010c8c:	e009      	b.n	8010ca2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c90:	7fda      	ldrb	r2, [r3, #31]
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	7fdb      	ldrb	r3, [r3, #31]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d803      	bhi.n	8010ca2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1cb      	bne.n	8010c52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d008      	beq.n	8010cd2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010cc0:	69b9      	ldr	r1, [r7, #24]
 8010cc2:	6a38      	ldr	r0, [r7, #32]
 8010cc4:	f7ff ff0e 	bl	8010ae4 <ip_reass_free_complete_datagram>
 8010cc8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	4413      	add	r3, r2
 8010cd0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010cd2:	697a      	ldr	r2, [r7, #20]
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	da02      	bge.n	8010ce0 <ip_reass_remove_oldest_datagram+0xb4>
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	dcac      	bgt.n	8010c3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010ce0:	697b      	ldr	r3, [r7, #20]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3728      	adds	r7, #40	; 0x28
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20000390 	.word	0x20000390

08010cf0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010cfa:	2004      	movs	r0, #4
 8010cfc:	f7f6 feda 	bl	8007ab4 <memp_malloc>
 8010d00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d110      	bne.n	8010d2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff ff8e 	bl	8010c2c <ip_reass_remove_oldest_datagram>
 8010d10:	4602      	mov	r2, r0
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	4293      	cmp	r3, r2
 8010d16:	dc03      	bgt.n	8010d20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010d18:	2004      	movs	r0, #4
 8010d1a:	f7f6 fecb 	bl	8007ab4 <memp_malloc>
 8010d1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d101      	bne.n	8010d2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010d26:	2300      	movs	r3, #0
 8010d28:	e016      	b.n	8010d58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010d2a:	2220      	movs	r2, #32
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f000 fe24 	bl	801197c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	220f      	movs	r2, #15
 8010d38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010d3a:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <ip_reass_enqueue_new_datagram+0x70>)
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010d42:	4a07      	ldr	r2, [pc, #28]	; (8010d60 <ip_reass_enqueue_new_datagram+0x70>)
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	2214      	movs	r2, #20
 8010d4e:	6879      	ldr	r1, [r7, #4]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f000 fe08 	bl	8011966 <memcpy>
  return ipr;
 8010d56:	68fb      	ldr	r3, [r7, #12]
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	20000390 	.word	0x20000390

08010d64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010d6e:	4b10      	ldr	r3, [pc, #64]	; (8010db0 <ip_reass_dequeue_datagram+0x4c>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	687a      	ldr	r2, [r7, #4]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d104      	bne.n	8010d82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a0c      	ldr	r2, [pc, #48]	; (8010db0 <ip_reass_dequeue_datagram+0x4c>)
 8010d7e:	6013      	str	r3, [r2, #0]
 8010d80:	e00d      	b.n	8010d9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d106      	bne.n	8010d96 <ip_reass_dequeue_datagram+0x32>
 8010d88:	4b0a      	ldr	r3, [pc, #40]	; (8010db4 <ip_reass_dequeue_datagram+0x50>)
 8010d8a:	f240 1245 	movw	r2, #325	; 0x145
 8010d8e:	490a      	ldr	r1, [pc, #40]	; (8010db8 <ip_reass_dequeue_datagram+0x54>)
 8010d90:	480a      	ldr	r0, [pc, #40]	; (8010dbc <ip_reass_dequeue_datagram+0x58>)
 8010d92:	f000 fea3 	bl	8011adc <iprintf>
    prev->next = ipr->next;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681a      	ldr	r2, [r3, #0]
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010d9e:	6879      	ldr	r1, [r7, #4]
 8010da0:	2004      	movs	r0, #4
 8010da2:	f7f6 fed3 	bl	8007b4c <memp_free>
}
 8010da6:	bf00      	nop
 8010da8:	3708      	adds	r7, #8
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	20000390 	.word	0x20000390
 8010db4:	08016b60 	.word	0x08016b60
 8010db8:	08016c28 	.word	0x08016c28
 8010dbc:	08016ba8 	.word	0x08016ba8

08010dc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b08c      	sub	sp, #48	; 0x30
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	885b      	ldrh	r3, [r3, #2]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f6 fa12 	bl	800720a <lwip_htons>
 8010de6:	4603      	mov	r3, r0
 8010de8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	f003 030f 	and.w	r3, r3, #15
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010df8:	7e7b      	ldrb	r3, [r7, #25]
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	8b7a      	ldrh	r2, [r7, #26]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d202      	bcs.n	8010e08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010e02:	f04f 33ff 	mov.w	r3, #4294967295
 8010e06:	e135      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010e08:	7e7b      	ldrb	r3, [r7, #25]
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	8b7a      	ldrh	r2, [r7, #26]
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	88db      	ldrh	r3, [r3, #6]
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7f6 f9f6 	bl	800720a <lwip_htons>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e32:	2200      	movs	r2, #0
 8010e34:	701a      	strb	r2, [r3, #0]
 8010e36:	2200      	movs	r2, #0
 8010e38:	705a      	strb	r2, [r3, #1]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	709a      	strb	r2, [r3, #2]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e44:	8afa      	ldrh	r2, [r7, #22]
 8010e46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010e48:	8afa      	ldrh	r2, [r7, #22]
 8010e4a:	8b7b      	ldrh	r3, [r7, #26]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	b29a      	uxth	r2, r3
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e56:	88db      	ldrh	r3, [r3, #6]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	8afa      	ldrh	r2, [r7, #22]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d902      	bls.n	8010e66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010e60:	f04f 33ff 	mov.w	r3, #4294967295
 8010e64:	e106      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	685b      	ldr	r3, [r3, #4]
 8010e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e6c:	e068      	b.n	8010f40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e76:	889b      	ldrh	r3, [r3, #4]
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	889b      	ldrh	r3, [r3, #4]
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d235      	bcs.n	8010ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d020      	beq.n	8010ed2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e92:	889b      	ldrh	r3, [r3, #4]
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e98:	88db      	ldrh	r3, [r3, #6]
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d307      	bcc.n	8010eb0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea2:	88db      	ldrh	r3, [r3, #6]
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	889b      	ldrh	r3, [r3, #4]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d902      	bls.n	8010eb6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb4:	e0de      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ebe:	88db      	ldrh	r3, [r3, #6]
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec4:	889b      	ldrh	r3, [r3, #4]
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d03d      	beq.n	8010f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010ed0:	e03a      	b.n	8010f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed4:	88db      	ldrh	r3, [r3, #6]
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	889b      	ldrh	r3, [r3, #4]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d902      	bls.n	8010ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee6:	e0c5      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	68ba      	ldr	r2, [r7, #8]
 8010eec:	605a      	str	r2, [r3, #4]
      break;
 8010eee:	e02b      	b.n	8010f48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef2:	889b      	ldrh	r3, [r3, #4]
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	889b      	ldrh	r3, [r3, #4]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d102      	bne.n	8010f06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f00:	f04f 33ff 	mov.w	r3, #4294967295
 8010f04:	e0b6      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f08:	889b      	ldrh	r3, [r3, #4]
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	88db      	ldrh	r3, [r3, #6]
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d202      	bcs.n	8010f1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f16:	f04f 33ff 	mov.w	r3, #4294967295
 8010f1a:	e0ab      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d009      	beq.n	8010f36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f24:	88db      	ldrh	r3, [r3, #6]
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	889b      	ldrh	r3, [r3, #4]
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d001      	beq.n	8010f36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010f32:	2300      	movs	r3, #0
 8010f34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d193      	bne.n	8010e6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010f46:	e000      	b.n	8010f4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010f48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d12d      	bne.n	8010fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d01c      	beq.n	8010f90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f58:	88db      	ldrh	r3, [r3, #6]
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5e:	889b      	ldrh	r3, [r3, #4]
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d906      	bls.n	8010f74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010f66:	4b45      	ldr	r3, [pc, #276]	; (801107c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010f68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010f6c:	4944      	ldr	r1, [pc, #272]	; (8011080 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010f6e:	4845      	ldr	r0, [pc, #276]	; (8011084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010f70:	f000 fdb4 	bl	8011adc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f76:	68ba      	ldr	r2, [r7, #8]
 8010f78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7c:	88db      	ldrh	r3, [r3, #6]
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f82:	889b      	ldrh	r3, [r3, #4]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d010      	beq.n	8010fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	623b      	str	r3, [r7, #32]
 8010f8e:	e00d      	b.n	8010fac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d006      	beq.n	8010fa6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010f98:	4b38      	ldr	r3, [pc, #224]	; (801107c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010f9a:	f240 12bf 	movw	r2, #447	; 0x1bf
 8010f9e:	493a      	ldr	r1, [pc, #232]	; (8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010fa0:	4838      	ldr	r0, [pc, #224]	; (8011084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010fa2:	f000 fd9b 	bl	8011adc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d105      	bne.n	8010fbe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	7f9b      	ldrb	r3, [r3, #30]
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d059      	beq.n	8011072 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010fbe:	6a3b      	ldr	r3, [r7, #32]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d04f      	beq.n	8011064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d006      	beq.n	8010fda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	889b      	ldrh	r3, [r3, #4]
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	623b      	str	r3, [r7, #32]
 8010fde:	e041      	b.n	8011064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010fea:	e012      	b.n	8011012 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff4:	88db      	ldrh	r3, [r3, #6]
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffa:	889b      	ldrh	r3, [r3, #4]
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d002      	beq.n	8011008 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011002:	2300      	movs	r3, #0
 8011004:	623b      	str	r3, [r7, #32]
            break;
 8011006:	e007      	b.n	8011018 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	2b00      	cmp	r3, #0
 8011016:	d1e9      	bne.n	8010fec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011018:	6a3b      	ldr	r3, [r7, #32]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d022      	beq.n	8011064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d106      	bne.n	8011034 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011026:	4b15      	ldr	r3, [pc, #84]	; (801107c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011028:	f240 12df 	movw	r2, #479	; 0x1df
 801102c:	4917      	ldr	r1, [pc, #92]	; (801108c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801102e:	4815      	ldr	r0, [pc, #84]	; (8011084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011030:	f000 fd54 	bl	8011adc <iprintf>
          LWIP_ASSERT("sanity check",
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801103c:	429a      	cmp	r2, r3
 801103e:	d106      	bne.n	801104e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011040:	4b0e      	ldr	r3, [pc, #56]	; (801107c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011042:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011046:	4911      	ldr	r1, [pc, #68]	; (801108c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011048:	480e      	ldr	r0, [pc, #56]	; (8011084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801104a:	f000 fd47 	bl	8011adc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d006      	beq.n	8011064 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011056:	4b09      	ldr	r3, [pc, #36]	; (801107c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011058:	f240 12e3 	movw	r2, #483	; 0x1e3
 801105c:	490c      	ldr	r1, [pc, #48]	; (8011090 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801105e:	4809      	ldr	r0, [pc, #36]	; (8011084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011060:	f000 fd3c 	bl	8011adc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	2b00      	cmp	r3, #0
 8011068:	bf14      	ite	ne
 801106a:	2301      	movne	r3, #1
 801106c:	2300      	moveq	r3, #0
 801106e:	b2db      	uxtb	r3, r3
 8011070:	e000      	b.n	8011074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011072:	2300      	movs	r3, #0
}
 8011074:	4618      	mov	r0, r3
 8011076:	3730      	adds	r7, #48	; 0x30
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	08016b60 	.word	0x08016b60
 8011080:	08016c44 	.word	0x08016c44
 8011084:	08016ba8 	.word	0x08016ba8
 8011088:	08016c64 	.word	0x08016c64
 801108c:	08016c9c 	.word	0x08016c9c
 8011090:	08016cac 	.word	0x08016cac

08011094 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08e      	sub	sp, #56	; 0x38
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80110a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	f003 030f 	and.w	r3, r3, #15
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	2b14      	cmp	r3, #20
 80110b2:	f040 8167 	bne.w	8011384 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80110b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b8:	88db      	ldrh	r3, [r3, #6]
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	4618      	mov	r0, r3
 80110be:	f7f6 f8a4 	bl	800720a <lwip_htons>
 80110c2:	4603      	mov	r3, r0
 80110c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	00db      	lsls	r3, r3, #3
 80110cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80110ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d0:	885b      	ldrh	r3, [r3, #2]
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f6 f898 	bl	800720a <lwip_htons>
 80110da:	4603      	mov	r3, r0
 80110dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	f003 030f 	and.w	r3, r3, #15
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80110ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110f6:	429a      	cmp	r2, r3
 80110f8:	f0c0 8146 	bcc.w	8011388 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80110fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011100:	b29b      	uxth	r3, r3
 8011102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f7f7 fba1 	bl	8008850 <pbuf_clen>
 801110e:	4603      	mov	r3, r0
 8011110:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011112:	4ba3      	ldr	r3, [pc, #652]	; (80113a0 <ip4_reass+0x30c>)
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	8c3b      	ldrh	r3, [r7, #32]
 801111a:	4413      	add	r3, r2
 801111c:	2b0a      	cmp	r3, #10
 801111e:	dd10      	ble.n	8011142 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011120:	8c3b      	ldrh	r3, [r7, #32]
 8011122:	4619      	mov	r1, r3
 8011124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011126:	f7ff fd81 	bl	8010c2c <ip_reass_remove_oldest_datagram>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	f000 812d 	beq.w	801138c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011132:	4b9b      	ldr	r3, [pc, #620]	; (80113a0 <ip4_reass+0x30c>)
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	461a      	mov	r2, r3
 8011138:	8c3b      	ldrh	r3, [r7, #32]
 801113a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801113c:	2b0a      	cmp	r3, #10
 801113e:	f300 8125 	bgt.w	801138c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011142:	4b98      	ldr	r3, [pc, #608]	; (80113a4 <ip4_reass+0x310>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	633b      	str	r3, [r7, #48]	; 0x30
 8011148:	e015      	b.n	8011176 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114c:	695a      	ldr	r2, [r3, #20]
 801114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	429a      	cmp	r2, r3
 8011154:	d10c      	bne.n	8011170 <ip4_reass+0xdc>
 8011156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011158:	699a      	ldr	r2, [r3, #24]
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	429a      	cmp	r2, r3
 8011160:	d106      	bne.n	8011170 <ip4_reass+0xdc>
 8011162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011164:	899a      	ldrh	r2, [r3, #12]
 8011166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011168:	889b      	ldrh	r3, [r3, #4]
 801116a:	b29b      	uxth	r3, r3
 801116c:	429a      	cmp	r2, r3
 801116e:	d006      	beq.n	801117e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	633b      	str	r3, [r7, #48]	; 0x30
 8011176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1e6      	bne.n	801114a <ip4_reass+0xb6>
 801117c:	e000      	b.n	8011180 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801117e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011182:	2b00      	cmp	r3, #0
 8011184:	d109      	bne.n	801119a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011186:	8c3b      	ldrh	r3, [r7, #32]
 8011188:	4619      	mov	r1, r3
 801118a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801118c:	f7ff fdb0 	bl	8010cf0 <ip_reass_enqueue_new_datagram>
 8011190:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	2b00      	cmp	r3, #0
 8011196:	d11c      	bne.n	80111d2 <ip4_reass+0x13e>
      goto nullreturn;
 8011198:	e0f9      	b.n	801138e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119c:	88db      	ldrh	r3, [r3, #6]
 801119e:	b29b      	uxth	r3, r3
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7f6 f832 	bl	800720a <lwip_htons>
 80111a6:	4603      	mov	r3, r0
 80111a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d110      	bne.n	80111d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80111b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b2:	89db      	ldrh	r3, [r3, #14]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7f6 f828 	bl	800720a <lwip_htons>
 80111ba:	4603      	mov	r3, r0
 80111bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d006      	beq.n	80111d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80111c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c6:	3308      	adds	r3, #8
 80111c8:	2214      	movs	r2, #20
 80111ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fbca 	bl	8011966 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80111d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d4:	88db      	ldrh	r3, [r3, #6]
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	f003 0320 	and.w	r3, r3, #32
 80111dc:	2b00      	cmp	r3, #0
 80111de:	bf0c      	ite	eq
 80111e0:	2301      	moveq	r3, #1
 80111e2:	2300      	movne	r3, #0
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00e      	beq.n	801120c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80111ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80111f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111f2:	4413      	add	r3, r2
 80111f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80111f6:	8b7a      	ldrh	r2, [r7, #26]
 80111f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80111fa:	429a      	cmp	r2, r3
 80111fc:	f0c0 80a0 	bcc.w	8011340 <ip4_reass+0x2ac>
 8011200:	8b7b      	ldrh	r3, [r7, #26]
 8011202:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011206:	4293      	cmp	r3, r2
 8011208:	f200 809a 	bhi.w	8011340 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801120c:	69fa      	ldr	r2, [r7, #28]
 801120e:	6879      	ldr	r1, [r7, #4]
 8011210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011212:	f7ff fdd5 	bl	8010dc0 <ip_reass_chain_frag_into_datagram_and_validate>
 8011216:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801121e:	f000 8091 	beq.w	8011344 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011222:	4b5f      	ldr	r3, [pc, #380]	; (80113a0 <ip4_reass+0x30c>)
 8011224:	881a      	ldrh	r2, [r3, #0]
 8011226:	8c3b      	ldrh	r3, [r7, #32]
 8011228:	4413      	add	r3, r2
 801122a:	b29a      	uxth	r2, r3
 801122c:	4b5c      	ldr	r3, [pc, #368]	; (80113a0 <ip4_reass+0x30c>)
 801122e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00d      	beq.n	8011252 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011236:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801123a:	4413      	add	r3, r2
 801123c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011240:	8a7a      	ldrh	r2, [r7, #18]
 8011242:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	7f9b      	ldrb	r3, [r3, #30]
 8011248:	f043 0301 	orr.w	r3, r3, #1
 801124c:	b2da      	uxtb	r2, r3
 801124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011250:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d171      	bne.n	801133c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801125a:	8b9b      	ldrh	r3, [r3, #28]
 801125c:	3314      	adds	r3, #20
 801125e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011274:	3308      	adds	r3, #8
 8011276:	2214      	movs	r2, #20
 8011278:	4619      	mov	r1, r3
 801127a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801127c:	f000 fb73 	bl	8011966 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011280:	8a3b      	ldrh	r3, [r7, #16]
 8011282:	4618      	mov	r0, r3
 8011284:	f7f5 ffc1 	bl	800720a <lwip_htons>
 8011288:	4603      	mov	r3, r0
 801128a:	461a      	mov	r2, r3
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011292:	2200      	movs	r2, #0
 8011294:	719a      	strb	r2, [r3, #6]
 8011296:	2200      	movs	r2, #0
 8011298:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129c:	2200      	movs	r2, #0
 801129e:	729a      	strb	r2, [r3, #10]
 80112a0:	2200      	movs	r2, #0
 80112a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80112a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80112aa:	e00d      	b.n	80112c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80112ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80112b2:	2114      	movs	r1, #20
 80112b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80112b6:	f7f7 f9bd 	bl	8008634 <pbuf_remove_header>
      pbuf_cat(p, r);
 80112ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7f7 fb01 	bl	80088c4 <pbuf_cat>
      r = iprh->next_pbuf;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80112c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d1ee      	bne.n	80112ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80112ce:	4b35      	ldr	r3, [pc, #212]	; (80113a4 <ip4_reass+0x310>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d102      	bne.n	80112de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80112d8:	2300      	movs	r3, #0
 80112da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112dc:	e010      	b.n	8011300 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80112de:	4b31      	ldr	r3, [pc, #196]	; (80113a4 <ip4_reass+0x310>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112e4:	e007      	b.n	80112f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80112e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d006      	beq.n	80112fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80112f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1f4      	bne.n	80112e6 <ip4_reass+0x252>
 80112fc:	e000      	b.n	8011300 <ip4_reass+0x26c>
          break;
 80112fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011300:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011304:	f7ff fd2e 	bl	8010d64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7f7 faa1 	bl	8008850 <pbuf_clen>
 801130e:	4603      	mov	r3, r0
 8011310:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011312:	4b23      	ldr	r3, [pc, #140]	; (80113a0 <ip4_reass+0x30c>)
 8011314:	881b      	ldrh	r3, [r3, #0]
 8011316:	8c3a      	ldrh	r2, [r7, #32]
 8011318:	429a      	cmp	r2, r3
 801131a:	d906      	bls.n	801132a <ip4_reass+0x296>
 801131c:	4b22      	ldr	r3, [pc, #136]	; (80113a8 <ip4_reass+0x314>)
 801131e:	f240 229b 	movw	r2, #667	; 0x29b
 8011322:	4922      	ldr	r1, [pc, #136]	; (80113ac <ip4_reass+0x318>)
 8011324:	4822      	ldr	r0, [pc, #136]	; (80113b0 <ip4_reass+0x31c>)
 8011326:	f000 fbd9 	bl	8011adc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801132a:	4b1d      	ldr	r3, [pc, #116]	; (80113a0 <ip4_reass+0x30c>)
 801132c:	881a      	ldrh	r2, [r3, #0]
 801132e:	8c3b      	ldrh	r3, [r7, #32]
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	b29a      	uxth	r2, r3
 8011334:	4b1a      	ldr	r3, [pc, #104]	; (80113a0 <ip4_reass+0x30c>)
 8011336:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	e02c      	b.n	8011396 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801133c:	2300      	movs	r3, #0
 801133e:	e02a      	b.n	8011396 <ip4_reass+0x302>

nullreturn_ipr:
 8011340:	bf00      	nop
 8011342:	e000      	b.n	8011346 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011344:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011348:	2b00      	cmp	r3, #0
 801134a:	d106      	bne.n	801135a <ip4_reass+0x2c6>
 801134c:	4b16      	ldr	r3, [pc, #88]	; (80113a8 <ip4_reass+0x314>)
 801134e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011352:	4918      	ldr	r1, [pc, #96]	; (80113b4 <ip4_reass+0x320>)
 8011354:	4816      	ldr	r0, [pc, #88]	; (80113b0 <ip4_reass+0x31c>)
 8011356:	f000 fbc1 	bl	8011adc <iprintf>
  if (ipr->p == NULL) {
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d114      	bne.n	801138c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011362:	4b10      	ldr	r3, [pc, #64]	; (80113a4 <ip4_reass+0x310>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011368:	429a      	cmp	r2, r3
 801136a:	d006      	beq.n	801137a <ip4_reass+0x2e6>
 801136c:	4b0e      	ldr	r3, [pc, #56]	; (80113a8 <ip4_reass+0x314>)
 801136e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011372:	4911      	ldr	r1, [pc, #68]	; (80113b8 <ip4_reass+0x324>)
 8011374:	480e      	ldr	r0, [pc, #56]	; (80113b0 <ip4_reass+0x31c>)
 8011376:	f000 fbb1 	bl	8011adc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801137a:	2100      	movs	r1, #0
 801137c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801137e:	f7ff fcf1 	bl	8010d64 <ip_reass_dequeue_datagram>
 8011382:	e004      	b.n	801138e <ip4_reass+0x2fa>
    goto nullreturn;
 8011384:	bf00      	nop
 8011386:	e002      	b.n	801138e <ip4_reass+0x2fa>
    goto nullreturn;
 8011388:	bf00      	nop
 801138a:	e000      	b.n	801138e <ip4_reass+0x2fa>
  }

nullreturn:
 801138c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7f7 f9d6 	bl	8008740 <pbuf_free>
  return NULL;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3738      	adds	r7, #56	; 0x38
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	20000394 	.word	0x20000394
 80113a4:	20000390 	.word	0x20000390
 80113a8:	08016b60 	.word	0x08016b60
 80113ac:	08016cd0 	.word	0x08016cd0
 80113b0:	08016ba8 	.word	0x08016ba8
 80113b4:	08016cec 	.word	0x08016cec
 80113b8:	08016cf8 	.word	0x08016cf8

080113bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80113c0:	2005      	movs	r0, #5
 80113c2:	f7f6 fb77 	bl	8007ab4 <memp_malloc>
 80113c6:	4603      	mov	r3, r0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	bd80      	pop	{r7, pc}

080113cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d106      	bne.n	80113e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80113da:	4b07      	ldr	r3, [pc, #28]	; (80113f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80113dc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80113e0:	4906      	ldr	r1, [pc, #24]	; (80113fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80113e2:	4807      	ldr	r0, [pc, #28]	; (8011400 <ip_frag_free_pbuf_custom_ref+0x34>)
 80113e4:	f000 fb7a 	bl	8011adc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80113e8:	6879      	ldr	r1, [r7, #4]
 80113ea:	2005      	movs	r0, #5
 80113ec:	f7f6 fbae 	bl	8007b4c <memp_free>
}
 80113f0:	bf00      	nop
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	08016b60 	.word	0x08016b60
 80113fc:	08016d18 	.word	0x08016d18
 8011400:	08016ba8 	.word	0x08016ba8

08011404 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d106      	bne.n	8011424 <ipfrag_free_pbuf_custom+0x20>
 8011416:	4b11      	ldr	r3, [pc, #68]	; (801145c <ipfrag_free_pbuf_custom+0x58>)
 8011418:	f240 22ce 	movw	r2, #718	; 0x2ce
 801141c:	4910      	ldr	r1, [pc, #64]	; (8011460 <ipfrag_free_pbuf_custom+0x5c>)
 801141e:	4811      	ldr	r0, [pc, #68]	; (8011464 <ipfrag_free_pbuf_custom+0x60>)
 8011420:	f000 fb5c 	bl	8011adc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	429a      	cmp	r2, r3
 801142a:	d006      	beq.n	801143a <ipfrag_free_pbuf_custom+0x36>
 801142c:	4b0b      	ldr	r3, [pc, #44]	; (801145c <ipfrag_free_pbuf_custom+0x58>)
 801142e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011432:	490d      	ldr	r1, [pc, #52]	; (8011468 <ipfrag_free_pbuf_custom+0x64>)
 8011434:	480b      	ldr	r0, [pc, #44]	; (8011464 <ipfrag_free_pbuf_custom+0x60>)
 8011436:	f000 fb51 	bl	8011adc <iprintf>
  if (pcr->original != NULL) {
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d004      	beq.n	801144c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	695b      	ldr	r3, [r3, #20]
 8011446:	4618      	mov	r0, r3
 8011448:	f7f7 f97a 	bl	8008740 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	f7ff ffbd 	bl	80113cc <ip_frag_free_pbuf_custom_ref>
}
 8011452:	bf00      	nop
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	08016b60 	.word	0x08016b60
 8011460:	08016d24 	.word	0x08016d24
 8011464:	08016ba8 	.word	0x08016ba8
 8011468:	08016d30 	.word	0x08016d30

0801146c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b094      	sub	sp, #80	; 0x50
 8011470:	af02      	add	r7, sp, #8
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011478:	2300      	movs	r3, #0
 801147a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	8c1b      	ldrh	r3, [r3, #32]
 8011482:	3b14      	subs	r3, #20
 8011484:	2b00      	cmp	r3, #0
 8011486:	da00      	bge.n	801148a <ip4_frag+0x1e>
 8011488:	3307      	adds	r3, #7
 801148a:	10db      	asrs	r3, r3, #3
 801148c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801148e:	2314      	movs	r3, #20
 8011490:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801149a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	f003 030f 	and.w	r3, r3, #15
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b14      	cmp	r3, #20
 80114ac:	d002      	beq.n	80114b4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80114ae:	f06f 0305 	mvn.w	r3, #5
 80114b2:	e10f      	b.n	80116d4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	895b      	ldrh	r3, [r3, #10]
 80114b8:	2b13      	cmp	r3, #19
 80114ba:	d809      	bhi.n	80114d0 <ip4_frag+0x64>
 80114bc:	4b87      	ldr	r3, [pc, #540]	; (80116dc <ip4_frag+0x270>)
 80114be:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80114c2:	4987      	ldr	r1, [pc, #540]	; (80116e0 <ip4_frag+0x274>)
 80114c4:	4887      	ldr	r0, [pc, #540]	; (80116e4 <ip4_frag+0x278>)
 80114c6:	f000 fb09 	bl	8011adc <iprintf>
 80114ca:	f06f 0305 	mvn.w	r3, #5
 80114ce:	e101      	b.n	80116d4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80114d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d2:	88db      	ldrh	r3, [r3, #6]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7f5 fe97 	bl	800720a <lwip_htons>
 80114dc:	4603      	mov	r3, r0
 80114de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80114e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80114ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80114ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80114f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	891b      	ldrh	r3, [r3, #8]
 80114f6:	3b14      	subs	r3, #20
 80114f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80114fc:	e0e0      	b.n	80116c0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80114fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011500:	00db      	lsls	r3, r3, #3
 8011502:	b29b      	uxth	r3, r3
 8011504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011508:	4293      	cmp	r3, r2
 801150a:	bf28      	it	cs
 801150c:	4613      	movcs	r3, r2
 801150e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011510:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011514:	2114      	movs	r1, #20
 8011516:	200e      	movs	r0, #14
 8011518:	f7f6 fe32 	bl	8008180 <pbuf_alloc>
 801151c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011520:	2b00      	cmp	r3, #0
 8011522:	f000 80d4 	beq.w	80116ce <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011528:	895b      	ldrh	r3, [r3, #10]
 801152a:	2b13      	cmp	r3, #19
 801152c:	d806      	bhi.n	801153c <ip4_frag+0xd0>
 801152e:	4b6b      	ldr	r3, [pc, #428]	; (80116dc <ip4_frag+0x270>)
 8011530:	f240 3225 	movw	r2, #805	; 0x325
 8011534:	496c      	ldr	r1, [pc, #432]	; (80116e8 <ip4_frag+0x27c>)
 8011536:	486b      	ldr	r0, [pc, #428]	; (80116e4 <ip4_frag+0x278>)
 8011538:	f000 fad0 	bl	8011adc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	2214      	movs	r2, #20
 8011542:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011544:	4618      	mov	r0, r3
 8011546:	f000 fa0e 	bl	8011966 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011550:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011552:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011556:	e064      	b.n	8011622 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	895a      	ldrh	r2, [r3, #10]
 801155c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801155e:	1ad3      	subs	r3, r2, r3
 8011560:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	895b      	ldrh	r3, [r3, #10]
 8011566:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011568:	429a      	cmp	r2, r3
 801156a:	d906      	bls.n	801157a <ip4_frag+0x10e>
 801156c:	4b5b      	ldr	r3, [pc, #364]	; (80116dc <ip4_frag+0x270>)
 801156e:	f240 322d 	movw	r2, #813	; 0x32d
 8011572:	495e      	ldr	r1, [pc, #376]	; (80116ec <ip4_frag+0x280>)
 8011574:	485b      	ldr	r0, [pc, #364]	; (80116e4 <ip4_frag+0x278>)
 8011576:	f000 fab1 	bl	8011adc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801157a:	8bfa      	ldrh	r2, [r7, #30]
 801157c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011580:	4293      	cmp	r3, r2
 8011582:	bf28      	it	cs
 8011584:	4613      	movcs	r3, r2
 8011586:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801158a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801158e:	2b00      	cmp	r3, #0
 8011590:	d105      	bne.n	801159e <ip4_frag+0x132>
        poff = 0;
 8011592:	2300      	movs	r3, #0
 8011594:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	60fb      	str	r3, [r7, #12]
        continue;
 801159c:	e041      	b.n	8011622 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801159e:	f7ff ff0d 	bl	80113bc <ip_frag_alloc_pbuf_custom_ref>
 80115a2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80115a4:	69bb      	ldr	r3, [r7, #24]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d103      	bne.n	80115b2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80115aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115ac:	f7f7 f8c8 	bl	8008740 <pbuf_free>
        goto memerr;
 80115b0:	e08e      	b.n	80116d0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80115b2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80115b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115ba:	4413      	add	r3, r2
 80115bc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80115c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80115c4:	9201      	str	r2, [sp, #4]
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	4603      	mov	r3, r0
 80115ca:	2241      	movs	r2, #65	; 0x41
 80115cc:	2000      	movs	r0, #0
 80115ce:	f7f6 fefd 	bl	80083cc <pbuf_alloced_custom>
 80115d2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d106      	bne.n	80115e8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80115da:	69b8      	ldr	r0, [r7, #24]
 80115dc:	f7ff fef6 	bl	80113cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80115e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115e2:	f7f7 f8ad 	bl	8008740 <pbuf_free>
        goto memerr;
 80115e6:	e073      	b.n	80116d0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f7f7 f949 	bl	8008880 <pbuf_ref>
      pcr->original = p;
 80115ee:	69bb      	ldr	r3, [r7, #24]
 80115f0:	68fa      	ldr	r2, [r7, #12]
 80115f2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	4a3e      	ldr	r2, [pc, #248]	; (80116f0 <ip4_frag+0x284>)
 80115f8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80115fa:	6979      	ldr	r1, [r7, #20]
 80115fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115fe:	f7f7 f961 	bl	80088c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011602:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801160a:	1ad3      	subs	r3, r2, r3
 801160c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011610:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011614:	2b00      	cmp	r3, #0
 8011616:	d004      	beq.n	8011622 <ip4_frag+0x1b6>
        poff = 0;
 8011618:	2300      	movs	r3, #0
 801161a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011622:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011626:	2b00      	cmp	r3, #0
 8011628:	d196      	bne.n	8011558 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801162a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801162c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011630:	4413      	add	r3, r2
 8011632:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011634:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	8c1b      	ldrh	r3, [r3, #32]
 801163c:	3b14      	subs	r3, #20
 801163e:	429a      	cmp	r2, r3
 8011640:	bfd4      	ite	le
 8011642:	2301      	movle	r3, #1
 8011644:	2300      	movgt	r3, #0
 8011646:	b2db      	uxtb	r3, r3
 8011648:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801164a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801164e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011652:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011654:	6a3b      	ldr	r3, [r7, #32]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d002      	beq.n	8011660 <ip4_frag+0x1f4>
 801165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d003      	beq.n	8011668 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011660:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011662:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011666:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011668:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801166a:	4618      	mov	r0, r3
 801166c:	f7f5 fdcd 	bl	800720a <lwip_htons>
 8011670:	4603      	mov	r3, r0
 8011672:	461a      	mov	r2, r3
 8011674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011676:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011678:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801167a:	3314      	adds	r3, #20
 801167c:	b29b      	uxth	r3, r3
 801167e:	4618      	mov	r0, r3
 8011680:	f7f5 fdc3 	bl	800720a <lwip_htons>
 8011684:	4603      	mov	r3, r0
 8011686:	461a      	mov	r2, r3
 8011688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	2200      	movs	r2, #0
 8011690:	729a      	strb	r2, [r3, #10]
 8011692:	2200      	movs	r2, #0
 8011694:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	695b      	ldr	r3, [r3, #20]
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801169e:	68b8      	ldr	r0, [r7, #8]
 80116a0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80116a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116a4:	f7f7 f84c 	bl	8008740 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80116a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80116b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80116b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80116ba:	4413      	add	r3, r2
 80116bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80116c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f47f af1a 	bne.w	80114fe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80116ca:	2300      	movs	r3, #0
 80116cc:	e002      	b.n	80116d4 <ip4_frag+0x268>
      goto memerr;
 80116ce:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80116d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3748      	adds	r7, #72	; 0x48
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	08016b60 	.word	0x08016b60
 80116e0:	08016d3c 	.word	0x08016d3c
 80116e4:	08016ba8 	.word	0x08016ba8
 80116e8:	08016d58 	.word	0x08016d58
 80116ec:	08016d78 	.word	0x08016d78
 80116f0:	08011405 	.word	0x08011405

080116f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80116fe:	230e      	movs	r3, #14
 8011700:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	895b      	ldrh	r3, [r3, #10]
 8011706:	2b0e      	cmp	r3, #14
 8011708:	d96e      	bls.n	80117e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	7bdb      	ldrb	r3, [r3, #15]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d106      	bne.n	8011720 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011718:	3301      	adds	r3, #1
 801171a:	b2da      	uxtb	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	7b1a      	ldrb	r2, [r3, #12]
 801172a:	7b5b      	ldrb	r3, [r3, #13]
 801172c:	021b      	lsls	r3, r3, #8
 801172e:	4313      	orrs	r3, r2
 8011730:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	f003 0301 	and.w	r3, r3, #1
 801173a:	2b00      	cmp	r3, #0
 801173c:	d023      	beq.n	8011786 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d10f      	bne.n	8011766 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	785b      	ldrb	r3, [r3, #1]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d11b      	bne.n	8011786 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011752:	2b5e      	cmp	r3, #94	; 0x5e
 8011754:	d117      	bne.n	8011786 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	7b5b      	ldrb	r3, [r3, #13]
 801175a:	f043 0310 	orr.w	r3, r3, #16
 801175e:	b2da      	uxtb	r2, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	735a      	strb	r2, [r3, #13]
 8011764:	e00f      	b.n	8011786 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2206      	movs	r2, #6
 801176a:	4928      	ldr	r1, [pc, #160]	; (801180c <ethernet_input+0x118>)
 801176c:	4618      	mov	r0, r3
 801176e:	f000 f8eb 	bl	8011948 <memcmp>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d106      	bne.n	8011786 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	7b5b      	ldrb	r3, [r3, #13]
 801177c:	f043 0308 	orr.w	r3, r3, #8
 8011780:	b2da      	uxtb	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011786:	89fb      	ldrh	r3, [r7, #14]
 8011788:	2b08      	cmp	r3, #8
 801178a:	d003      	beq.n	8011794 <ethernet_input+0xa0>
 801178c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011790:	d014      	beq.n	80117bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011792:	e032      	b.n	80117fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801179a:	f003 0308 	and.w	r3, r3, #8
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d024      	beq.n	80117ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80117a2:	8afb      	ldrh	r3, [r7, #22]
 80117a4:	4619      	mov	r1, r3
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7f6 ff44 	bl	8008634 <pbuf_remove_header>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d11e      	bne.n	80117f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80117b2:	6839      	ldr	r1, [r7, #0]
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7fe ff2d 	bl	8010614 <ip4_input>
      break;
 80117ba:	e013      	b.n	80117e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80117c2:	f003 0308 	and.w	r3, r3, #8
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d014      	beq.n	80117f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80117ca:	8afb      	ldrh	r3, [r7, #22]
 80117cc:	4619      	mov	r1, r3
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7f6 ff30 	bl	8008634 <pbuf_remove_header>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d10e      	bne.n	80117f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80117da:	6839      	ldr	r1, [r7, #0]
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f7fe f8cd 	bl	800f97c <etharp_input>
      break;
 80117e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80117e4:	2300      	movs	r3, #0
 80117e6:	e00c      	b.n	8011802 <ethernet_input+0x10e>
    goto free_and_return;
 80117e8:	bf00      	nop
 80117ea:	e006      	b.n	80117fa <ethernet_input+0x106>
        goto free_and_return;
 80117ec:	bf00      	nop
 80117ee:	e004      	b.n	80117fa <ethernet_input+0x106>
        goto free_and_return;
 80117f0:	bf00      	nop
 80117f2:	e002      	b.n	80117fa <ethernet_input+0x106>
        goto free_and_return;
 80117f4:	bf00      	nop
 80117f6:	e000      	b.n	80117fa <ethernet_input+0x106>
        goto free_and_return;
 80117f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f7f6 ffa0 	bl	8008740 <pbuf_free>
  return ERR_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	08016f08 	.word	0x08016f08

08011810 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011810:	b580      	push	{r7, lr}
 8011812:	b086      	sub	sp, #24
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
 801181c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801181e:	8c3b      	ldrh	r3, [r7, #32]
 8011820:	4618      	mov	r0, r3
 8011822:	f7f5 fcf2 	bl	800720a <lwip_htons>
 8011826:	4603      	mov	r3, r0
 8011828:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801182a:	210e      	movs	r1, #14
 801182c:	68b8      	ldr	r0, [r7, #8]
 801182e:	f7f6 fef1 	bl	8008614 <pbuf_add_header>
 8011832:	4603      	mov	r3, r0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d125      	bne.n	8011884 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	8afa      	ldrh	r2, [r7, #22]
 8011842:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	2206      	movs	r2, #6
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	4618      	mov	r0, r3
 801184c:	f000 f88b 	bl	8011966 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	3306      	adds	r3, #6
 8011854:	2206      	movs	r2, #6
 8011856:	6879      	ldr	r1, [r7, #4]
 8011858:	4618      	mov	r0, r3
 801185a:	f000 f884 	bl	8011966 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011864:	2b06      	cmp	r3, #6
 8011866:	d006      	beq.n	8011876 <ethernet_output+0x66>
 8011868:	4b0a      	ldr	r3, [pc, #40]	; (8011894 <ethernet_output+0x84>)
 801186a:	f240 1233 	movw	r2, #307	; 0x133
 801186e:	490a      	ldr	r1, [pc, #40]	; (8011898 <ethernet_output+0x88>)
 8011870:	480a      	ldr	r0, [pc, #40]	; (801189c <ethernet_output+0x8c>)
 8011872:	f000 f933 	bl	8011adc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	68b9      	ldr	r1, [r7, #8]
 801187c:	68f8      	ldr	r0, [r7, #12]
 801187e:	4798      	blx	r3
 8011880:	4603      	mov	r3, r0
 8011882:	e002      	b.n	801188a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011884:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011886:	f06f 0301 	mvn.w	r3, #1
}
 801188a:	4618      	mov	r0, r3
 801188c:	3718      	adds	r7, #24
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	08016d88 	.word	0x08016d88
 8011898:	08016dc0 	.word	0x08016dc0
 801189c:	08016df4 	.word	0x08016df4

080118a0 <__libc_init_array>:
 80118a0:	b570      	push	{r4, r5, r6, lr}
 80118a2:	4e0d      	ldr	r6, [pc, #52]	; (80118d8 <__libc_init_array+0x38>)
 80118a4:	4c0d      	ldr	r4, [pc, #52]	; (80118dc <__libc_init_array+0x3c>)
 80118a6:	1ba4      	subs	r4, r4, r6
 80118a8:	10a4      	asrs	r4, r4, #2
 80118aa:	2500      	movs	r5, #0
 80118ac:	42a5      	cmp	r5, r4
 80118ae:	d109      	bne.n	80118c4 <__libc_init_array+0x24>
 80118b0:	4e0b      	ldr	r6, [pc, #44]	; (80118e0 <__libc_init_array+0x40>)
 80118b2:	4c0c      	ldr	r4, [pc, #48]	; (80118e4 <__libc_init_array+0x44>)
 80118b4:	f002 fd38 	bl	8014328 <_init>
 80118b8:	1ba4      	subs	r4, r4, r6
 80118ba:	10a4      	asrs	r4, r4, #2
 80118bc:	2500      	movs	r5, #0
 80118be:	42a5      	cmp	r5, r4
 80118c0:	d105      	bne.n	80118ce <__libc_init_array+0x2e>
 80118c2:	bd70      	pop	{r4, r5, r6, pc}
 80118c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118c8:	4798      	blx	r3
 80118ca:	3501      	adds	r5, #1
 80118cc:	e7ee      	b.n	80118ac <__libc_init_array+0xc>
 80118ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118d2:	4798      	blx	r3
 80118d4:	3501      	adds	r5, #1
 80118d6:	e7f2      	b.n	80118be <__libc_init_array+0x1e>
 80118d8:	08017228 	.word	0x08017228
 80118dc:	08017228 	.word	0x08017228
 80118e0:	08017228 	.word	0x08017228
 80118e4:	0801722c 	.word	0x0801722c

080118e8 <__locale_ctype_ptr>:
 80118e8:	4b04      	ldr	r3, [pc, #16]	; (80118fc <__locale_ctype_ptr+0x14>)
 80118ea:	4a05      	ldr	r2, [pc, #20]	; (8011900 <__locale_ctype_ptr+0x18>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	6a1b      	ldr	r3, [r3, #32]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	bf08      	it	eq
 80118f4:	4613      	moveq	r3, r2
 80118f6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80118fa:	4770      	bx	lr
 80118fc:	20000024 	.word	0x20000024
 8011900:	20000088 	.word	0x20000088

08011904 <malloc>:
 8011904:	4b02      	ldr	r3, [pc, #8]	; (8011910 <malloc+0xc>)
 8011906:	4601      	mov	r1, r0
 8011908:	6818      	ldr	r0, [r3, #0]
 801190a:	f000 b88d 	b.w	8011a28 <_malloc_r>
 801190e:	bf00      	nop
 8011910:	20000024 	.word	0x20000024

08011914 <free>:
 8011914:	4b02      	ldr	r3, [pc, #8]	; (8011920 <free+0xc>)
 8011916:	4601      	mov	r1, r0
 8011918:	6818      	ldr	r0, [r3, #0]
 801191a:	f000 b837 	b.w	801198c <_free_r>
 801191e:	bf00      	nop
 8011920:	20000024 	.word	0x20000024

08011924 <__ascii_mbtowc>:
 8011924:	b082      	sub	sp, #8
 8011926:	b901      	cbnz	r1, 801192a <__ascii_mbtowc+0x6>
 8011928:	a901      	add	r1, sp, #4
 801192a:	b142      	cbz	r2, 801193e <__ascii_mbtowc+0x1a>
 801192c:	b14b      	cbz	r3, 8011942 <__ascii_mbtowc+0x1e>
 801192e:	7813      	ldrb	r3, [r2, #0]
 8011930:	600b      	str	r3, [r1, #0]
 8011932:	7812      	ldrb	r2, [r2, #0]
 8011934:	1c10      	adds	r0, r2, #0
 8011936:	bf18      	it	ne
 8011938:	2001      	movne	r0, #1
 801193a:	b002      	add	sp, #8
 801193c:	4770      	bx	lr
 801193e:	4610      	mov	r0, r2
 8011940:	e7fb      	b.n	801193a <__ascii_mbtowc+0x16>
 8011942:	f06f 0001 	mvn.w	r0, #1
 8011946:	e7f8      	b.n	801193a <__ascii_mbtowc+0x16>

08011948 <memcmp>:
 8011948:	b530      	push	{r4, r5, lr}
 801194a:	2400      	movs	r4, #0
 801194c:	42a2      	cmp	r2, r4
 801194e:	d101      	bne.n	8011954 <memcmp+0xc>
 8011950:	2000      	movs	r0, #0
 8011952:	e007      	b.n	8011964 <memcmp+0x1c>
 8011954:	5d03      	ldrb	r3, [r0, r4]
 8011956:	3401      	adds	r4, #1
 8011958:	190d      	adds	r5, r1, r4
 801195a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801195e:	42ab      	cmp	r3, r5
 8011960:	d0f4      	beq.n	801194c <memcmp+0x4>
 8011962:	1b58      	subs	r0, r3, r5
 8011964:	bd30      	pop	{r4, r5, pc}

08011966 <memcpy>:
 8011966:	b510      	push	{r4, lr}
 8011968:	1e43      	subs	r3, r0, #1
 801196a:	440a      	add	r2, r1
 801196c:	4291      	cmp	r1, r2
 801196e:	d100      	bne.n	8011972 <memcpy+0xc>
 8011970:	bd10      	pop	{r4, pc}
 8011972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011976:	f803 4f01 	strb.w	r4, [r3, #1]!
 801197a:	e7f7      	b.n	801196c <memcpy+0x6>

0801197c <memset>:
 801197c:	4402      	add	r2, r0
 801197e:	4603      	mov	r3, r0
 8011980:	4293      	cmp	r3, r2
 8011982:	d100      	bne.n	8011986 <memset+0xa>
 8011984:	4770      	bx	lr
 8011986:	f803 1b01 	strb.w	r1, [r3], #1
 801198a:	e7f9      	b.n	8011980 <memset+0x4>

0801198c <_free_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4605      	mov	r5, r0
 8011990:	2900      	cmp	r1, #0
 8011992:	d045      	beq.n	8011a20 <_free_r+0x94>
 8011994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011998:	1f0c      	subs	r4, r1, #4
 801199a:	2b00      	cmp	r3, #0
 801199c:	bfb8      	it	lt
 801199e:	18e4      	addlt	r4, r4, r3
 80119a0:	f001 fbb6 	bl	8013110 <__malloc_lock>
 80119a4:	4a1f      	ldr	r2, [pc, #124]	; (8011a24 <_free_r+0x98>)
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	4610      	mov	r0, r2
 80119aa:	b933      	cbnz	r3, 80119ba <_free_r+0x2e>
 80119ac:	6063      	str	r3, [r4, #4]
 80119ae:	6014      	str	r4, [r2, #0]
 80119b0:	4628      	mov	r0, r5
 80119b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119b6:	f001 bbac 	b.w	8013112 <__malloc_unlock>
 80119ba:	42a3      	cmp	r3, r4
 80119bc:	d90c      	bls.n	80119d8 <_free_r+0x4c>
 80119be:	6821      	ldr	r1, [r4, #0]
 80119c0:	1862      	adds	r2, r4, r1
 80119c2:	4293      	cmp	r3, r2
 80119c4:	bf04      	itt	eq
 80119c6:	681a      	ldreq	r2, [r3, #0]
 80119c8:	685b      	ldreq	r3, [r3, #4]
 80119ca:	6063      	str	r3, [r4, #4]
 80119cc:	bf04      	itt	eq
 80119ce:	1852      	addeq	r2, r2, r1
 80119d0:	6022      	streq	r2, [r4, #0]
 80119d2:	6004      	str	r4, [r0, #0]
 80119d4:	e7ec      	b.n	80119b0 <_free_r+0x24>
 80119d6:	4613      	mov	r3, r2
 80119d8:	685a      	ldr	r2, [r3, #4]
 80119da:	b10a      	cbz	r2, 80119e0 <_free_r+0x54>
 80119dc:	42a2      	cmp	r2, r4
 80119de:	d9fa      	bls.n	80119d6 <_free_r+0x4a>
 80119e0:	6819      	ldr	r1, [r3, #0]
 80119e2:	1858      	adds	r0, r3, r1
 80119e4:	42a0      	cmp	r0, r4
 80119e6:	d10b      	bne.n	8011a00 <_free_r+0x74>
 80119e8:	6820      	ldr	r0, [r4, #0]
 80119ea:	4401      	add	r1, r0
 80119ec:	1858      	adds	r0, r3, r1
 80119ee:	4282      	cmp	r2, r0
 80119f0:	6019      	str	r1, [r3, #0]
 80119f2:	d1dd      	bne.n	80119b0 <_free_r+0x24>
 80119f4:	6810      	ldr	r0, [r2, #0]
 80119f6:	6852      	ldr	r2, [r2, #4]
 80119f8:	605a      	str	r2, [r3, #4]
 80119fa:	4401      	add	r1, r0
 80119fc:	6019      	str	r1, [r3, #0]
 80119fe:	e7d7      	b.n	80119b0 <_free_r+0x24>
 8011a00:	d902      	bls.n	8011a08 <_free_r+0x7c>
 8011a02:	230c      	movs	r3, #12
 8011a04:	602b      	str	r3, [r5, #0]
 8011a06:	e7d3      	b.n	80119b0 <_free_r+0x24>
 8011a08:	6820      	ldr	r0, [r4, #0]
 8011a0a:	1821      	adds	r1, r4, r0
 8011a0c:	428a      	cmp	r2, r1
 8011a0e:	bf04      	itt	eq
 8011a10:	6811      	ldreq	r1, [r2, #0]
 8011a12:	6852      	ldreq	r2, [r2, #4]
 8011a14:	6062      	str	r2, [r4, #4]
 8011a16:	bf04      	itt	eq
 8011a18:	1809      	addeq	r1, r1, r0
 8011a1a:	6021      	streq	r1, [r4, #0]
 8011a1c:	605c      	str	r4, [r3, #4]
 8011a1e:	e7c7      	b.n	80119b0 <_free_r+0x24>
 8011a20:	bd38      	pop	{r3, r4, r5, pc}
 8011a22:	bf00      	nop
 8011a24:	20000398 	.word	0x20000398

08011a28 <_malloc_r>:
 8011a28:	b570      	push	{r4, r5, r6, lr}
 8011a2a:	1ccd      	adds	r5, r1, #3
 8011a2c:	f025 0503 	bic.w	r5, r5, #3
 8011a30:	3508      	adds	r5, #8
 8011a32:	2d0c      	cmp	r5, #12
 8011a34:	bf38      	it	cc
 8011a36:	250c      	movcc	r5, #12
 8011a38:	2d00      	cmp	r5, #0
 8011a3a:	4606      	mov	r6, r0
 8011a3c:	db01      	blt.n	8011a42 <_malloc_r+0x1a>
 8011a3e:	42a9      	cmp	r1, r5
 8011a40:	d903      	bls.n	8011a4a <_malloc_r+0x22>
 8011a42:	230c      	movs	r3, #12
 8011a44:	6033      	str	r3, [r6, #0]
 8011a46:	2000      	movs	r0, #0
 8011a48:	bd70      	pop	{r4, r5, r6, pc}
 8011a4a:	f001 fb61 	bl	8013110 <__malloc_lock>
 8011a4e:	4a21      	ldr	r2, [pc, #132]	; (8011ad4 <_malloc_r+0xac>)
 8011a50:	6814      	ldr	r4, [r2, #0]
 8011a52:	4621      	mov	r1, r4
 8011a54:	b991      	cbnz	r1, 8011a7c <_malloc_r+0x54>
 8011a56:	4c20      	ldr	r4, [pc, #128]	; (8011ad8 <_malloc_r+0xb0>)
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	b91b      	cbnz	r3, 8011a64 <_malloc_r+0x3c>
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	f000 f891 	bl	8011b84 <_sbrk_r>
 8011a62:	6020      	str	r0, [r4, #0]
 8011a64:	4629      	mov	r1, r5
 8011a66:	4630      	mov	r0, r6
 8011a68:	f000 f88c 	bl	8011b84 <_sbrk_r>
 8011a6c:	1c43      	adds	r3, r0, #1
 8011a6e:	d124      	bne.n	8011aba <_malloc_r+0x92>
 8011a70:	230c      	movs	r3, #12
 8011a72:	6033      	str	r3, [r6, #0]
 8011a74:	4630      	mov	r0, r6
 8011a76:	f001 fb4c 	bl	8013112 <__malloc_unlock>
 8011a7a:	e7e4      	b.n	8011a46 <_malloc_r+0x1e>
 8011a7c:	680b      	ldr	r3, [r1, #0]
 8011a7e:	1b5b      	subs	r3, r3, r5
 8011a80:	d418      	bmi.n	8011ab4 <_malloc_r+0x8c>
 8011a82:	2b0b      	cmp	r3, #11
 8011a84:	d90f      	bls.n	8011aa6 <_malloc_r+0x7e>
 8011a86:	600b      	str	r3, [r1, #0]
 8011a88:	50cd      	str	r5, [r1, r3]
 8011a8a:	18cc      	adds	r4, r1, r3
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f001 fb40 	bl	8013112 <__malloc_unlock>
 8011a92:	f104 000b 	add.w	r0, r4, #11
 8011a96:	1d23      	adds	r3, r4, #4
 8011a98:	f020 0007 	bic.w	r0, r0, #7
 8011a9c:	1ac3      	subs	r3, r0, r3
 8011a9e:	d0d3      	beq.n	8011a48 <_malloc_r+0x20>
 8011aa0:	425a      	negs	r2, r3
 8011aa2:	50e2      	str	r2, [r4, r3]
 8011aa4:	e7d0      	b.n	8011a48 <_malloc_r+0x20>
 8011aa6:	428c      	cmp	r4, r1
 8011aa8:	684b      	ldr	r3, [r1, #4]
 8011aaa:	bf16      	itet	ne
 8011aac:	6063      	strne	r3, [r4, #4]
 8011aae:	6013      	streq	r3, [r2, #0]
 8011ab0:	460c      	movne	r4, r1
 8011ab2:	e7eb      	b.n	8011a8c <_malloc_r+0x64>
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	6849      	ldr	r1, [r1, #4]
 8011ab8:	e7cc      	b.n	8011a54 <_malloc_r+0x2c>
 8011aba:	1cc4      	adds	r4, r0, #3
 8011abc:	f024 0403 	bic.w	r4, r4, #3
 8011ac0:	42a0      	cmp	r0, r4
 8011ac2:	d005      	beq.n	8011ad0 <_malloc_r+0xa8>
 8011ac4:	1a21      	subs	r1, r4, r0
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f000 f85c 	bl	8011b84 <_sbrk_r>
 8011acc:	3001      	adds	r0, #1
 8011ace:	d0cf      	beq.n	8011a70 <_malloc_r+0x48>
 8011ad0:	6025      	str	r5, [r4, #0]
 8011ad2:	e7db      	b.n	8011a8c <_malloc_r+0x64>
 8011ad4:	20000398 	.word	0x20000398
 8011ad8:	2000039c 	.word	0x2000039c

08011adc <iprintf>:
 8011adc:	b40f      	push	{r0, r1, r2, r3}
 8011ade:	4b0a      	ldr	r3, [pc, #40]	; (8011b08 <iprintf+0x2c>)
 8011ae0:	b513      	push	{r0, r1, r4, lr}
 8011ae2:	681c      	ldr	r4, [r3, #0]
 8011ae4:	b124      	cbz	r4, 8011af0 <iprintf+0x14>
 8011ae6:	69a3      	ldr	r3, [r4, #24]
 8011ae8:	b913      	cbnz	r3, 8011af0 <iprintf+0x14>
 8011aea:	4620      	mov	r0, r4
 8011aec:	f000 ff4c 	bl	8012988 <__sinit>
 8011af0:	ab05      	add	r3, sp, #20
 8011af2:	9a04      	ldr	r2, [sp, #16]
 8011af4:	68a1      	ldr	r1, [r4, #8]
 8011af6:	9301      	str	r3, [sp, #4]
 8011af8:	4620      	mov	r0, r4
 8011afa:	f001 ff67 	bl	80139cc <_vfiprintf_r>
 8011afe:	b002      	add	sp, #8
 8011b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b04:	b004      	add	sp, #16
 8011b06:	4770      	bx	lr
 8011b08:	20000024 	.word	0x20000024

08011b0c <rand>:
 8011b0c:	b538      	push	{r3, r4, r5, lr}
 8011b0e:	4b13      	ldr	r3, [pc, #76]	; (8011b5c <rand+0x50>)
 8011b10:	681c      	ldr	r4, [r3, #0]
 8011b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b14:	b97b      	cbnz	r3, 8011b36 <rand+0x2a>
 8011b16:	2018      	movs	r0, #24
 8011b18:	f7ff fef4 	bl	8011904 <malloc>
 8011b1c:	4a10      	ldr	r2, [pc, #64]	; (8011b60 <rand+0x54>)
 8011b1e:	4b11      	ldr	r3, [pc, #68]	; (8011b64 <rand+0x58>)
 8011b20:	63a0      	str	r0, [r4, #56]	; 0x38
 8011b22:	e9c0 2300 	strd	r2, r3, [r0]
 8011b26:	4b10      	ldr	r3, [pc, #64]	; (8011b68 <rand+0x5c>)
 8011b28:	6083      	str	r3, [r0, #8]
 8011b2a:	230b      	movs	r3, #11
 8011b2c:	8183      	strh	r3, [r0, #12]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	2300      	movs	r3, #0
 8011b32:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011b36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011b38:	480c      	ldr	r0, [pc, #48]	; (8011b6c <rand+0x60>)
 8011b3a:	690a      	ldr	r2, [r1, #16]
 8011b3c:	694b      	ldr	r3, [r1, #20]
 8011b3e:	4c0c      	ldr	r4, [pc, #48]	; (8011b70 <rand+0x64>)
 8011b40:	4350      	muls	r0, r2
 8011b42:	fb04 0003 	mla	r0, r4, r3, r0
 8011b46:	fba2 2304 	umull	r2, r3, r2, r4
 8011b4a:	4403      	add	r3, r0
 8011b4c:	1c54      	adds	r4, r2, #1
 8011b4e:	f143 0500 	adc.w	r5, r3, #0
 8011b52:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8011b56:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8011b5a:	bd38      	pop	{r3, r4, r5, pc}
 8011b5c:	20000024 	.word	0x20000024
 8011b60:	abcd330e 	.word	0xabcd330e
 8011b64:	e66d1234 	.word	0xe66d1234
 8011b68:	0005deec 	.word	0x0005deec
 8011b6c:	5851f42d 	.word	0x5851f42d
 8011b70:	4c957f2d 	.word	0x4c957f2d

08011b74 <realloc>:
 8011b74:	4b02      	ldr	r3, [pc, #8]	; (8011b80 <realloc+0xc>)
 8011b76:	460a      	mov	r2, r1
 8011b78:	4601      	mov	r1, r0
 8011b7a:	6818      	ldr	r0, [r3, #0]
 8011b7c:	f001 bed7 	b.w	801392e <_realloc_r>
 8011b80:	20000024 	.word	0x20000024

08011b84 <_sbrk_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4c06      	ldr	r4, [pc, #24]	; (8011ba0 <_sbrk_r+0x1c>)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	6023      	str	r3, [r4, #0]
 8011b90:	f7f1 fa2c 	bl	8002fec <_sbrk>
 8011b94:	1c43      	adds	r3, r0, #1
 8011b96:	d102      	bne.n	8011b9e <_sbrk_r+0x1a>
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	b103      	cbz	r3, 8011b9e <_sbrk_r+0x1a>
 8011b9c:	602b      	str	r3, [r5, #0]
 8011b9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ba0:	20006fcc 	.word	0x20006fcc

08011ba4 <__sread>:
 8011ba4:	b510      	push	{r4, lr}
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bac:	f002 f9ac 	bl	8013f08 <_read_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	bfab      	itete	ge
 8011bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011bb8:	181b      	addge	r3, r3, r0
 8011bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011bbe:	bfac      	ite	ge
 8011bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011bc2:	81a3      	strhlt	r3, [r4, #12]
 8011bc4:	bd10      	pop	{r4, pc}

08011bc6 <__swrite>:
 8011bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bca:	461f      	mov	r7, r3
 8011bcc:	898b      	ldrh	r3, [r1, #12]
 8011bce:	05db      	lsls	r3, r3, #23
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	4616      	mov	r6, r2
 8011bd6:	d505      	bpl.n	8011be4 <__swrite+0x1e>
 8011bd8:	2302      	movs	r3, #2
 8011bda:	2200      	movs	r2, #0
 8011bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be0:	f001 fa84 	bl	80130ec <_lseek_r>
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bee:	81a3      	strh	r3, [r4, #12]
 8011bf0:	4632      	mov	r2, r6
 8011bf2:	463b      	mov	r3, r7
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfa:	f000 be63 	b.w	80128c4 <_write_r>

08011bfe <__sseek>:
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	460c      	mov	r4, r1
 8011c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c06:	f001 fa71 	bl	80130ec <_lseek_r>
 8011c0a:	1c43      	adds	r3, r0, #1
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	bf15      	itete	ne
 8011c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c1a:	81a3      	strheq	r3, [r4, #12]
 8011c1c:	bf18      	it	ne
 8011c1e:	81a3      	strhne	r3, [r4, #12]
 8011c20:	bd10      	pop	{r4, pc}

08011c22 <__sclose>:
 8011c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c26:	f000 be5f 	b.w	80128e8 <_close_r>

08011c2a <strcpy>:
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c30:	f803 2b01 	strb.w	r2, [r3], #1
 8011c34:	2a00      	cmp	r2, #0
 8011c36:	d1f9      	bne.n	8011c2c <strcpy+0x2>
 8011c38:	4770      	bx	lr

08011c3a <strncmp>:
 8011c3a:	b510      	push	{r4, lr}
 8011c3c:	b16a      	cbz	r2, 8011c5a <strncmp+0x20>
 8011c3e:	3901      	subs	r1, #1
 8011c40:	1884      	adds	r4, r0, r2
 8011c42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011c46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	d103      	bne.n	8011c56 <strncmp+0x1c>
 8011c4e:	42a0      	cmp	r0, r4
 8011c50:	d001      	beq.n	8011c56 <strncmp+0x1c>
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1f5      	bne.n	8011c42 <strncmp+0x8>
 8011c56:	1a98      	subs	r0, r3, r2
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	4610      	mov	r0, r2
 8011c5c:	e7fc      	b.n	8011c58 <strncmp+0x1e>

08011c5e <sulp>:
 8011c5e:	b570      	push	{r4, r5, r6, lr}
 8011c60:	4604      	mov	r4, r0
 8011c62:	460d      	mov	r5, r1
 8011c64:	ec45 4b10 	vmov	d0, r4, r5
 8011c68:	4616      	mov	r6, r2
 8011c6a:	f001 fd1f 	bl	80136ac <__ulp>
 8011c6e:	ec51 0b10 	vmov	r0, r1, d0
 8011c72:	b17e      	cbz	r6, 8011c94 <sulp+0x36>
 8011c74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dd09      	ble.n	8011c94 <sulp+0x36>
 8011c80:	051b      	lsls	r3, r3, #20
 8011c82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011c86:	2400      	movs	r4, #0
 8011c88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011c8c:	4622      	mov	r2, r4
 8011c8e:	462b      	mov	r3, r5
 8011c90:	f7ee fce2 	bl	8000658 <__aeabi_dmul>
 8011c94:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c98 <_strtod_l>:
 8011c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9c:	461f      	mov	r7, r3
 8011c9e:	b0a1      	sub	sp, #132	; 0x84
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	4681      	mov	r9, r0
 8011ca4:	4638      	mov	r0, r7
 8011ca6:	460e      	mov	r6, r1
 8011ca8:	9217      	str	r2, [sp, #92]	; 0x5c
 8011caa:	931c      	str	r3, [sp, #112]	; 0x70
 8011cac:	f001 fa1c 	bl	80130e8 <__localeconv_l>
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	6800      	ldr	r0, [r0, #0]
 8011cb4:	f7ee fab6 	bl	8000224 <strlen>
 8011cb8:	f04f 0a00 	mov.w	sl, #0
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	f04f 0b00 	mov.w	fp, #0
 8011cc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8011cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cc6:	781a      	ldrb	r2, [r3, #0]
 8011cc8:	2a0d      	cmp	r2, #13
 8011cca:	d832      	bhi.n	8011d32 <_strtod_l+0x9a>
 8011ccc:	2a09      	cmp	r2, #9
 8011cce:	d236      	bcs.n	8011d3e <_strtod_l+0xa6>
 8011cd0:	2a00      	cmp	r2, #0
 8011cd2:	d03e      	beq.n	8011d52 <_strtod_l+0xba>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8011cd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011cda:	782b      	ldrb	r3, [r5, #0]
 8011cdc:	2b30      	cmp	r3, #48	; 0x30
 8011cde:	f040 80ac 	bne.w	8011e3a <_strtod_l+0x1a2>
 8011ce2:	786b      	ldrb	r3, [r5, #1]
 8011ce4:	2b58      	cmp	r3, #88	; 0x58
 8011ce6:	d001      	beq.n	8011cec <_strtod_l+0x54>
 8011ce8:	2b78      	cmp	r3, #120	; 0x78
 8011cea:	d167      	bne.n	8011dbc <_strtod_l+0x124>
 8011cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cee:	9301      	str	r3, [sp, #4]
 8011cf0:	ab1c      	add	r3, sp, #112	; 0x70
 8011cf2:	9300      	str	r3, [sp, #0]
 8011cf4:	9702      	str	r7, [sp, #8]
 8011cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8011cf8:	4a88      	ldr	r2, [pc, #544]	; (8011f1c <_strtod_l+0x284>)
 8011cfa:	a91b      	add	r1, sp, #108	; 0x6c
 8011cfc:	4648      	mov	r0, r9
 8011cfe:	f000 ff1c 	bl	8012b3a <__gethex>
 8011d02:	f010 0407 	ands.w	r4, r0, #7
 8011d06:	4606      	mov	r6, r0
 8011d08:	d005      	beq.n	8011d16 <_strtod_l+0x7e>
 8011d0a:	2c06      	cmp	r4, #6
 8011d0c:	d12b      	bne.n	8011d66 <_strtod_l+0xce>
 8011d0e:	3501      	adds	r5, #1
 8011d10:	2300      	movs	r3, #0
 8011d12:	951b      	str	r5, [sp, #108]	; 0x6c
 8011d14:	930d      	str	r3, [sp, #52]	; 0x34
 8011d16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f040 859a 	bne.w	8012852 <_strtod_l+0xbba>
 8011d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d20:	b1e3      	cbz	r3, 8011d5c <_strtod_l+0xc4>
 8011d22:	4652      	mov	r2, sl
 8011d24:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d28:	ec43 2b10 	vmov	d0, r2, r3
 8011d2c:	b021      	add	sp, #132	; 0x84
 8011d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d32:	2a2b      	cmp	r2, #43	; 0x2b
 8011d34:	d015      	beq.n	8011d62 <_strtod_l+0xca>
 8011d36:	2a2d      	cmp	r2, #45	; 0x2d
 8011d38:	d004      	beq.n	8011d44 <_strtod_l+0xac>
 8011d3a:	2a20      	cmp	r2, #32
 8011d3c:	d1ca      	bne.n	8011cd4 <_strtod_l+0x3c>
 8011d3e:	3301      	adds	r3, #1
 8011d40:	931b      	str	r3, [sp, #108]	; 0x6c
 8011d42:	e7bf      	b.n	8011cc4 <_strtod_l+0x2c>
 8011d44:	2201      	movs	r2, #1
 8011d46:	920d      	str	r2, [sp, #52]	; 0x34
 8011d48:	1c5a      	adds	r2, r3, #1
 8011d4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8011d4c:	785b      	ldrb	r3, [r3, #1]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d1c2      	bne.n	8011cd8 <_strtod_l+0x40>
 8011d52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d54:	961b      	str	r6, [sp, #108]	; 0x6c
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f040 8579 	bne.w	801284e <_strtod_l+0xbb6>
 8011d5c:	4652      	mov	r2, sl
 8011d5e:	465b      	mov	r3, fp
 8011d60:	e7e2      	b.n	8011d28 <_strtod_l+0x90>
 8011d62:	2200      	movs	r2, #0
 8011d64:	e7ef      	b.n	8011d46 <_strtod_l+0xae>
 8011d66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011d68:	b13a      	cbz	r2, 8011d7a <_strtod_l+0xe2>
 8011d6a:	2135      	movs	r1, #53	; 0x35
 8011d6c:	a81e      	add	r0, sp, #120	; 0x78
 8011d6e:	f001 fd95 	bl	801389c <__copybits>
 8011d72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d74:	4648      	mov	r0, r9
 8011d76:	f001 fa01 	bl	801317c <_Bfree>
 8011d7a:	3c01      	subs	r4, #1
 8011d7c:	2c04      	cmp	r4, #4
 8011d7e:	d806      	bhi.n	8011d8e <_strtod_l+0xf6>
 8011d80:	e8df f004 	tbb	[pc, r4]
 8011d84:	1714030a 	.word	0x1714030a
 8011d88:	0a          	.byte	0x0a
 8011d89:	00          	.byte	0x00
 8011d8a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8011d8e:	0730      	lsls	r0, r6, #28
 8011d90:	d5c1      	bpl.n	8011d16 <_strtod_l+0x7e>
 8011d92:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011d96:	e7be      	b.n	8011d16 <_strtod_l+0x7e>
 8011d98:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8011d9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011d9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011da2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011da6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011daa:	e7f0      	b.n	8011d8e <_strtod_l+0xf6>
 8011dac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011f20 <_strtod_l+0x288>
 8011db0:	e7ed      	b.n	8011d8e <_strtod_l+0xf6>
 8011db2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011db6:	f04f 3aff 	mov.w	sl, #4294967295
 8011dba:	e7e8      	b.n	8011d8e <_strtod_l+0xf6>
 8011dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011dbe:	1c5a      	adds	r2, r3, #1
 8011dc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8011dc2:	785b      	ldrb	r3, [r3, #1]
 8011dc4:	2b30      	cmp	r3, #48	; 0x30
 8011dc6:	d0f9      	beq.n	8011dbc <_strtod_l+0x124>
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d0a4      	beq.n	8011d16 <_strtod_l+0x7e>
 8011dcc:	2301      	movs	r3, #1
 8011dce:	2500      	movs	r5, #0
 8011dd0:	9306      	str	r3, [sp, #24]
 8011dd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011dd4:	9308      	str	r3, [sp, #32]
 8011dd6:	9507      	str	r5, [sp, #28]
 8011dd8:	9505      	str	r5, [sp, #20]
 8011dda:	220a      	movs	r2, #10
 8011ddc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011dde:	7807      	ldrb	r7, [r0, #0]
 8011de0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011de4:	b2d9      	uxtb	r1, r3
 8011de6:	2909      	cmp	r1, #9
 8011de8:	d929      	bls.n	8011e3e <_strtod_l+0x1a6>
 8011dea:	4622      	mov	r2, r4
 8011dec:	f8d8 1000 	ldr.w	r1, [r8]
 8011df0:	f7ff ff23 	bl	8011c3a <strncmp>
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d031      	beq.n	8011e5c <_strtod_l+0x1c4>
 8011df8:	2000      	movs	r0, #0
 8011dfa:	9c05      	ldr	r4, [sp, #20]
 8011dfc:	9004      	str	r0, [sp, #16]
 8011dfe:	463b      	mov	r3, r7
 8011e00:	4602      	mov	r2, r0
 8011e02:	2b65      	cmp	r3, #101	; 0x65
 8011e04:	d001      	beq.n	8011e0a <_strtod_l+0x172>
 8011e06:	2b45      	cmp	r3, #69	; 0x45
 8011e08:	d114      	bne.n	8011e34 <_strtod_l+0x19c>
 8011e0a:	b924      	cbnz	r4, 8011e16 <_strtod_l+0x17e>
 8011e0c:	b910      	cbnz	r0, 8011e14 <_strtod_l+0x17c>
 8011e0e:	9b06      	ldr	r3, [sp, #24]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d09e      	beq.n	8011d52 <_strtod_l+0xba>
 8011e14:	2400      	movs	r4, #0
 8011e16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011e18:	1c73      	adds	r3, r6, #1
 8011e1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8011e1c:	7873      	ldrb	r3, [r6, #1]
 8011e1e:	2b2b      	cmp	r3, #43	; 0x2b
 8011e20:	d078      	beq.n	8011f14 <_strtod_l+0x27c>
 8011e22:	2b2d      	cmp	r3, #45	; 0x2d
 8011e24:	d070      	beq.n	8011f08 <_strtod_l+0x270>
 8011e26:	f04f 0c00 	mov.w	ip, #0
 8011e2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011e2e:	2f09      	cmp	r7, #9
 8011e30:	d97c      	bls.n	8011f2c <_strtod_l+0x294>
 8011e32:	961b      	str	r6, [sp, #108]	; 0x6c
 8011e34:	f04f 0e00 	mov.w	lr, #0
 8011e38:	e09a      	b.n	8011f70 <_strtod_l+0x2d8>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	e7c7      	b.n	8011dce <_strtod_l+0x136>
 8011e3e:	9905      	ldr	r1, [sp, #20]
 8011e40:	2908      	cmp	r1, #8
 8011e42:	bfdd      	ittte	le
 8011e44:	9907      	ldrle	r1, [sp, #28]
 8011e46:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e4a:	9307      	strle	r3, [sp, #28]
 8011e4c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011e50:	9b05      	ldr	r3, [sp, #20]
 8011e52:	3001      	adds	r0, #1
 8011e54:	3301      	adds	r3, #1
 8011e56:	9305      	str	r3, [sp, #20]
 8011e58:	901b      	str	r0, [sp, #108]	; 0x6c
 8011e5a:	e7bf      	b.n	8011ddc <_strtod_l+0x144>
 8011e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e5e:	191a      	adds	r2, r3, r4
 8011e60:	921b      	str	r2, [sp, #108]	; 0x6c
 8011e62:	9a05      	ldr	r2, [sp, #20]
 8011e64:	5d1b      	ldrb	r3, [r3, r4]
 8011e66:	2a00      	cmp	r2, #0
 8011e68:	d037      	beq.n	8011eda <_strtod_l+0x242>
 8011e6a:	9c05      	ldr	r4, [sp, #20]
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011e72:	2909      	cmp	r1, #9
 8011e74:	d913      	bls.n	8011e9e <_strtod_l+0x206>
 8011e76:	2101      	movs	r1, #1
 8011e78:	9104      	str	r1, [sp, #16]
 8011e7a:	e7c2      	b.n	8011e02 <_strtod_l+0x16a>
 8011e7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	921b      	str	r2, [sp, #108]	; 0x6c
 8011e82:	785b      	ldrb	r3, [r3, #1]
 8011e84:	3001      	adds	r0, #1
 8011e86:	2b30      	cmp	r3, #48	; 0x30
 8011e88:	d0f8      	beq.n	8011e7c <_strtod_l+0x1e4>
 8011e8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011e8e:	2a08      	cmp	r2, #8
 8011e90:	f200 84e4 	bhi.w	801285c <_strtod_l+0xbc4>
 8011e94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011e96:	9208      	str	r2, [sp, #32]
 8011e98:	4602      	mov	r2, r0
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011ea2:	f100 0101 	add.w	r1, r0, #1
 8011ea6:	d012      	beq.n	8011ece <_strtod_l+0x236>
 8011ea8:	440a      	add	r2, r1
 8011eaa:	eb00 0c04 	add.w	ip, r0, r4
 8011eae:	4621      	mov	r1, r4
 8011eb0:	270a      	movs	r7, #10
 8011eb2:	458c      	cmp	ip, r1
 8011eb4:	d113      	bne.n	8011ede <_strtod_l+0x246>
 8011eb6:	1821      	adds	r1, r4, r0
 8011eb8:	2908      	cmp	r1, #8
 8011eba:	f104 0401 	add.w	r4, r4, #1
 8011ebe:	4404      	add	r4, r0
 8011ec0:	dc19      	bgt.n	8011ef6 <_strtod_l+0x25e>
 8011ec2:	9b07      	ldr	r3, [sp, #28]
 8011ec4:	210a      	movs	r1, #10
 8011ec6:	fb01 e303 	mla	r3, r1, r3, lr
 8011eca:	9307      	str	r3, [sp, #28]
 8011ecc:	2100      	movs	r1, #0
 8011ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ed0:	1c58      	adds	r0, r3, #1
 8011ed2:	901b      	str	r0, [sp, #108]	; 0x6c
 8011ed4:	785b      	ldrb	r3, [r3, #1]
 8011ed6:	4608      	mov	r0, r1
 8011ed8:	e7c9      	b.n	8011e6e <_strtod_l+0x1d6>
 8011eda:	9805      	ldr	r0, [sp, #20]
 8011edc:	e7d3      	b.n	8011e86 <_strtod_l+0x1ee>
 8011ede:	2908      	cmp	r1, #8
 8011ee0:	f101 0101 	add.w	r1, r1, #1
 8011ee4:	dc03      	bgt.n	8011eee <_strtod_l+0x256>
 8011ee6:	9b07      	ldr	r3, [sp, #28]
 8011ee8:	437b      	muls	r3, r7
 8011eea:	9307      	str	r3, [sp, #28]
 8011eec:	e7e1      	b.n	8011eb2 <_strtod_l+0x21a>
 8011eee:	2910      	cmp	r1, #16
 8011ef0:	bfd8      	it	le
 8011ef2:	437d      	mulle	r5, r7
 8011ef4:	e7dd      	b.n	8011eb2 <_strtod_l+0x21a>
 8011ef6:	2c10      	cmp	r4, #16
 8011ef8:	bfdc      	itt	le
 8011efa:	210a      	movle	r1, #10
 8011efc:	fb01 e505 	mlale	r5, r1, r5, lr
 8011f00:	e7e4      	b.n	8011ecc <_strtod_l+0x234>
 8011f02:	2301      	movs	r3, #1
 8011f04:	9304      	str	r3, [sp, #16]
 8011f06:	e781      	b.n	8011e0c <_strtod_l+0x174>
 8011f08:	f04f 0c01 	mov.w	ip, #1
 8011f0c:	1cb3      	adds	r3, r6, #2
 8011f0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011f10:	78b3      	ldrb	r3, [r6, #2]
 8011f12:	e78a      	b.n	8011e2a <_strtod_l+0x192>
 8011f14:	f04f 0c00 	mov.w	ip, #0
 8011f18:	e7f8      	b.n	8011f0c <_strtod_l+0x274>
 8011f1a:	bf00      	nop
 8011f1c:	08016f34 	.word	0x08016f34
 8011f20:	7ff00000 	.word	0x7ff00000
 8011f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f26:	1c5f      	adds	r7, r3, #1
 8011f28:	971b      	str	r7, [sp, #108]	; 0x6c
 8011f2a:	785b      	ldrb	r3, [r3, #1]
 8011f2c:	2b30      	cmp	r3, #48	; 0x30
 8011f2e:	d0f9      	beq.n	8011f24 <_strtod_l+0x28c>
 8011f30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011f34:	2f08      	cmp	r7, #8
 8011f36:	f63f af7d 	bhi.w	8011e34 <_strtod_l+0x19c>
 8011f3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f40:	930a      	str	r3, [sp, #40]	; 0x28
 8011f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f44:	1c5f      	adds	r7, r3, #1
 8011f46:	971b      	str	r7, [sp, #108]	; 0x6c
 8011f48:	785b      	ldrb	r3, [r3, #1]
 8011f4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011f4e:	f1b8 0f09 	cmp.w	r8, #9
 8011f52:	d937      	bls.n	8011fc4 <_strtod_l+0x32c>
 8011f54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f56:	1a7f      	subs	r7, r7, r1
 8011f58:	2f08      	cmp	r7, #8
 8011f5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011f5e:	dc37      	bgt.n	8011fd0 <_strtod_l+0x338>
 8011f60:	45be      	cmp	lr, r7
 8011f62:	bfa8      	it	ge
 8011f64:	46be      	movge	lr, r7
 8011f66:	f1bc 0f00 	cmp.w	ip, #0
 8011f6a:	d001      	beq.n	8011f70 <_strtod_l+0x2d8>
 8011f6c:	f1ce 0e00 	rsb	lr, lr, #0
 8011f70:	2c00      	cmp	r4, #0
 8011f72:	d151      	bne.n	8012018 <_strtod_l+0x380>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f47f aece 	bne.w	8011d16 <_strtod_l+0x7e>
 8011f7a:	9a06      	ldr	r2, [sp, #24]
 8011f7c:	2a00      	cmp	r2, #0
 8011f7e:	f47f aeca 	bne.w	8011d16 <_strtod_l+0x7e>
 8011f82:	9a04      	ldr	r2, [sp, #16]
 8011f84:	2a00      	cmp	r2, #0
 8011f86:	f47f aee4 	bne.w	8011d52 <_strtod_l+0xba>
 8011f8a:	2b4e      	cmp	r3, #78	; 0x4e
 8011f8c:	d027      	beq.n	8011fde <_strtod_l+0x346>
 8011f8e:	dc21      	bgt.n	8011fd4 <_strtod_l+0x33c>
 8011f90:	2b49      	cmp	r3, #73	; 0x49
 8011f92:	f47f aede 	bne.w	8011d52 <_strtod_l+0xba>
 8011f96:	49a0      	ldr	r1, [pc, #640]	; (8012218 <_strtod_l+0x580>)
 8011f98:	a81b      	add	r0, sp, #108	; 0x6c
 8011f9a:	f001 f801 	bl	8012fa0 <__match>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	f43f aed7 	beq.w	8011d52 <_strtod_l+0xba>
 8011fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fa6:	499d      	ldr	r1, [pc, #628]	; (801221c <_strtod_l+0x584>)
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	a81b      	add	r0, sp, #108	; 0x6c
 8011fac:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fae:	f000 fff7 	bl	8012fa0 <__match>
 8011fb2:	b910      	cbnz	r0, 8011fba <_strtod_l+0x322>
 8011fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8012230 <_strtod_l+0x598>
 8011fbe:	f04f 0a00 	mov.w	sl, #0
 8011fc2:	e6a8      	b.n	8011d16 <_strtod_l+0x7e>
 8011fc4:	210a      	movs	r1, #10
 8011fc6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011fca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011fce:	e7b8      	b.n	8011f42 <_strtod_l+0x2aa>
 8011fd0:	46be      	mov	lr, r7
 8011fd2:	e7c8      	b.n	8011f66 <_strtod_l+0x2ce>
 8011fd4:	2b69      	cmp	r3, #105	; 0x69
 8011fd6:	d0de      	beq.n	8011f96 <_strtod_l+0x2fe>
 8011fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8011fda:	f47f aeba 	bne.w	8011d52 <_strtod_l+0xba>
 8011fde:	4990      	ldr	r1, [pc, #576]	; (8012220 <_strtod_l+0x588>)
 8011fe0:	a81b      	add	r0, sp, #108	; 0x6c
 8011fe2:	f000 ffdd 	bl	8012fa0 <__match>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	f43f aeb3 	beq.w	8011d52 <_strtod_l+0xba>
 8011fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	2b28      	cmp	r3, #40	; 0x28
 8011ff2:	d10e      	bne.n	8012012 <_strtod_l+0x37a>
 8011ff4:	aa1e      	add	r2, sp, #120	; 0x78
 8011ff6:	498b      	ldr	r1, [pc, #556]	; (8012224 <_strtod_l+0x58c>)
 8011ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8011ffa:	f000 ffe5 	bl	8012fc8 <__hexnan>
 8011ffe:	2805      	cmp	r0, #5
 8012000:	d107      	bne.n	8012012 <_strtod_l+0x37a>
 8012002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012004:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012008:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801200c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012010:	e681      	b.n	8011d16 <_strtod_l+0x7e>
 8012012:	f8df b224 	ldr.w	fp, [pc, #548]	; 8012238 <_strtod_l+0x5a0>
 8012016:	e7d2      	b.n	8011fbe <_strtod_l+0x326>
 8012018:	ebae 0302 	sub.w	r3, lr, r2
 801201c:	9306      	str	r3, [sp, #24]
 801201e:	9b05      	ldr	r3, [sp, #20]
 8012020:	9807      	ldr	r0, [sp, #28]
 8012022:	2b00      	cmp	r3, #0
 8012024:	bf08      	it	eq
 8012026:	4623      	moveq	r3, r4
 8012028:	2c10      	cmp	r4, #16
 801202a:	9305      	str	r3, [sp, #20]
 801202c:	46a0      	mov	r8, r4
 801202e:	bfa8      	it	ge
 8012030:	f04f 0810 	movge.w	r8, #16
 8012034:	f7ee fa96 	bl	8000564 <__aeabi_ui2d>
 8012038:	2c09      	cmp	r4, #9
 801203a:	4682      	mov	sl, r0
 801203c:	468b      	mov	fp, r1
 801203e:	dc13      	bgt.n	8012068 <_strtod_l+0x3d0>
 8012040:	9b06      	ldr	r3, [sp, #24]
 8012042:	2b00      	cmp	r3, #0
 8012044:	f43f ae67 	beq.w	8011d16 <_strtod_l+0x7e>
 8012048:	9b06      	ldr	r3, [sp, #24]
 801204a:	dd7a      	ble.n	8012142 <_strtod_l+0x4aa>
 801204c:	2b16      	cmp	r3, #22
 801204e:	dc61      	bgt.n	8012114 <_strtod_l+0x47c>
 8012050:	4a75      	ldr	r2, [pc, #468]	; (8012228 <_strtod_l+0x590>)
 8012052:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012056:	e9de 0100 	ldrd	r0, r1, [lr]
 801205a:	4652      	mov	r2, sl
 801205c:	465b      	mov	r3, fp
 801205e:	f7ee fafb 	bl	8000658 <__aeabi_dmul>
 8012062:	4682      	mov	sl, r0
 8012064:	468b      	mov	fp, r1
 8012066:	e656      	b.n	8011d16 <_strtod_l+0x7e>
 8012068:	4b6f      	ldr	r3, [pc, #444]	; (8012228 <_strtod_l+0x590>)
 801206a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801206e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012072:	f7ee faf1 	bl	8000658 <__aeabi_dmul>
 8012076:	4606      	mov	r6, r0
 8012078:	4628      	mov	r0, r5
 801207a:	460f      	mov	r7, r1
 801207c:	f7ee fa72 	bl	8000564 <__aeabi_ui2d>
 8012080:	4602      	mov	r2, r0
 8012082:	460b      	mov	r3, r1
 8012084:	4630      	mov	r0, r6
 8012086:	4639      	mov	r1, r7
 8012088:	f7ee f930 	bl	80002ec <__adddf3>
 801208c:	2c0f      	cmp	r4, #15
 801208e:	4682      	mov	sl, r0
 8012090:	468b      	mov	fp, r1
 8012092:	ddd5      	ble.n	8012040 <_strtod_l+0x3a8>
 8012094:	9b06      	ldr	r3, [sp, #24]
 8012096:	eba4 0808 	sub.w	r8, r4, r8
 801209a:	4498      	add	r8, r3
 801209c:	f1b8 0f00 	cmp.w	r8, #0
 80120a0:	f340 8096 	ble.w	80121d0 <_strtod_l+0x538>
 80120a4:	f018 030f 	ands.w	r3, r8, #15
 80120a8:	d00a      	beq.n	80120c0 <_strtod_l+0x428>
 80120aa:	495f      	ldr	r1, [pc, #380]	; (8012228 <_strtod_l+0x590>)
 80120ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80120b0:	4652      	mov	r2, sl
 80120b2:	465b      	mov	r3, fp
 80120b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120b8:	f7ee face 	bl	8000658 <__aeabi_dmul>
 80120bc:	4682      	mov	sl, r0
 80120be:	468b      	mov	fp, r1
 80120c0:	f038 080f 	bics.w	r8, r8, #15
 80120c4:	d073      	beq.n	80121ae <_strtod_l+0x516>
 80120c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80120ca:	dd47      	ble.n	801215c <_strtod_l+0x4c4>
 80120cc:	2400      	movs	r4, #0
 80120ce:	46a0      	mov	r8, r4
 80120d0:	9407      	str	r4, [sp, #28]
 80120d2:	9405      	str	r4, [sp, #20]
 80120d4:	2322      	movs	r3, #34	; 0x22
 80120d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8012230 <_strtod_l+0x598>
 80120da:	f8c9 3000 	str.w	r3, [r9]
 80120de:	f04f 0a00 	mov.w	sl, #0
 80120e2:	9b07      	ldr	r3, [sp, #28]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	f43f ae16 	beq.w	8011d16 <_strtod_l+0x7e>
 80120ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80120ec:	4648      	mov	r0, r9
 80120ee:	f001 f845 	bl	801317c <_Bfree>
 80120f2:	9905      	ldr	r1, [sp, #20]
 80120f4:	4648      	mov	r0, r9
 80120f6:	f001 f841 	bl	801317c <_Bfree>
 80120fa:	4641      	mov	r1, r8
 80120fc:	4648      	mov	r0, r9
 80120fe:	f001 f83d 	bl	801317c <_Bfree>
 8012102:	9907      	ldr	r1, [sp, #28]
 8012104:	4648      	mov	r0, r9
 8012106:	f001 f839 	bl	801317c <_Bfree>
 801210a:	4621      	mov	r1, r4
 801210c:	4648      	mov	r0, r9
 801210e:	f001 f835 	bl	801317c <_Bfree>
 8012112:	e600      	b.n	8011d16 <_strtod_l+0x7e>
 8012114:	9a06      	ldr	r2, [sp, #24]
 8012116:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801211a:	4293      	cmp	r3, r2
 801211c:	dbba      	blt.n	8012094 <_strtod_l+0x3fc>
 801211e:	4d42      	ldr	r5, [pc, #264]	; (8012228 <_strtod_l+0x590>)
 8012120:	f1c4 040f 	rsb	r4, r4, #15
 8012124:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012128:	4652      	mov	r2, sl
 801212a:	465b      	mov	r3, fp
 801212c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012130:	f7ee fa92 	bl	8000658 <__aeabi_dmul>
 8012134:	9b06      	ldr	r3, [sp, #24]
 8012136:	1b1c      	subs	r4, r3, r4
 8012138:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801213c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012140:	e78d      	b.n	801205e <_strtod_l+0x3c6>
 8012142:	f113 0f16 	cmn.w	r3, #22
 8012146:	dba5      	blt.n	8012094 <_strtod_l+0x3fc>
 8012148:	4a37      	ldr	r2, [pc, #220]	; (8012228 <_strtod_l+0x590>)
 801214a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801214e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012152:	4650      	mov	r0, sl
 8012154:	4659      	mov	r1, fp
 8012156:	f7ee fba9 	bl	80008ac <__aeabi_ddiv>
 801215a:	e782      	b.n	8012062 <_strtod_l+0x3ca>
 801215c:	2300      	movs	r3, #0
 801215e:	4e33      	ldr	r6, [pc, #204]	; (801222c <_strtod_l+0x594>)
 8012160:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012164:	4650      	mov	r0, sl
 8012166:	4659      	mov	r1, fp
 8012168:	461d      	mov	r5, r3
 801216a:	f1b8 0f01 	cmp.w	r8, #1
 801216e:	dc21      	bgt.n	80121b4 <_strtod_l+0x51c>
 8012170:	b10b      	cbz	r3, 8012176 <_strtod_l+0x4de>
 8012172:	4682      	mov	sl, r0
 8012174:	468b      	mov	fp, r1
 8012176:	4b2d      	ldr	r3, [pc, #180]	; (801222c <_strtod_l+0x594>)
 8012178:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801217c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012180:	4652      	mov	r2, sl
 8012182:	465b      	mov	r3, fp
 8012184:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012188:	f7ee fa66 	bl	8000658 <__aeabi_dmul>
 801218c:	4b28      	ldr	r3, [pc, #160]	; (8012230 <_strtod_l+0x598>)
 801218e:	460a      	mov	r2, r1
 8012190:	400b      	ands	r3, r1
 8012192:	4928      	ldr	r1, [pc, #160]	; (8012234 <_strtod_l+0x59c>)
 8012194:	428b      	cmp	r3, r1
 8012196:	4682      	mov	sl, r0
 8012198:	d898      	bhi.n	80120cc <_strtod_l+0x434>
 801219a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801219e:	428b      	cmp	r3, r1
 80121a0:	bf86      	itte	hi
 80121a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801223c <_strtod_l+0x5a4>
 80121a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80121aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80121ae:	2300      	movs	r3, #0
 80121b0:	9304      	str	r3, [sp, #16]
 80121b2:	e077      	b.n	80122a4 <_strtod_l+0x60c>
 80121b4:	f018 0f01 	tst.w	r8, #1
 80121b8:	d006      	beq.n	80121c8 <_strtod_l+0x530>
 80121ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	f7ee fa49 	bl	8000658 <__aeabi_dmul>
 80121c6:	2301      	movs	r3, #1
 80121c8:	3501      	adds	r5, #1
 80121ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80121ce:	e7cc      	b.n	801216a <_strtod_l+0x4d2>
 80121d0:	d0ed      	beq.n	80121ae <_strtod_l+0x516>
 80121d2:	f1c8 0800 	rsb	r8, r8, #0
 80121d6:	f018 020f 	ands.w	r2, r8, #15
 80121da:	d00a      	beq.n	80121f2 <_strtod_l+0x55a>
 80121dc:	4b12      	ldr	r3, [pc, #72]	; (8012228 <_strtod_l+0x590>)
 80121de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121e2:	4650      	mov	r0, sl
 80121e4:	4659      	mov	r1, fp
 80121e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ea:	f7ee fb5f 	bl	80008ac <__aeabi_ddiv>
 80121ee:	4682      	mov	sl, r0
 80121f0:	468b      	mov	fp, r1
 80121f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80121f6:	d0da      	beq.n	80121ae <_strtod_l+0x516>
 80121f8:	f1b8 0f1f 	cmp.w	r8, #31
 80121fc:	dd20      	ble.n	8012240 <_strtod_l+0x5a8>
 80121fe:	2400      	movs	r4, #0
 8012200:	46a0      	mov	r8, r4
 8012202:	9407      	str	r4, [sp, #28]
 8012204:	9405      	str	r4, [sp, #20]
 8012206:	2322      	movs	r3, #34	; 0x22
 8012208:	f04f 0a00 	mov.w	sl, #0
 801220c:	f04f 0b00 	mov.w	fp, #0
 8012210:	f8c9 3000 	str.w	r3, [r9]
 8012214:	e765      	b.n	80120e2 <_strtod_l+0x44a>
 8012216:	bf00      	nop
 8012218:	08016f26 	.word	0x08016f26
 801221c:	08016f29 	.word	0x08016f29
 8012220:	08016f2f 	.word	0x08016f2f
 8012224:	08016f48 	.word	0x08016f48
 8012228:	08017118 	.word	0x08017118
 801222c:	080170f0 	.word	0x080170f0
 8012230:	7ff00000 	.word	0x7ff00000
 8012234:	7ca00000 	.word	0x7ca00000
 8012238:	fff80000 	.word	0xfff80000
 801223c:	7fefffff 	.word	0x7fefffff
 8012240:	f018 0310 	ands.w	r3, r8, #16
 8012244:	bf18      	it	ne
 8012246:	236a      	movne	r3, #106	; 0x6a
 8012248:	4da0      	ldr	r5, [pc, #640]	; (80124cc <_strtod_l+0x834>)
 801224a:	9304      	str	r3, [sp, #16]
 801224c:	4650      	mov	r0, sl
 801224e:	4659      	mov	r1, fp
 8012250:	2300      	movs	r3, #0
 8012252:	f1b8 0f00 	cmp.w	r8, #0
 8012256:	f300 810a 	bgt.w	801246e <_strtod_l+0x7d6>
 801225a:	b10b      	cbz	r3, 8012260 <_strtod_l+0x5c8>
 801225c:	4682      	mov	sl, r0
 801225e:	468b      	mov	fp, r1
 8012260:	9b04      	ldr	r3, [sp, #16]
 8012262:	b1bb      	cbz	r3, 8012294 <_strtod_l+0x5fc>
 8012264:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012268:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801226c:	2b00      	cmp	r3, #0
 801226e:	4659      	mov	r1, fp
 8012270:	dd10      	ble.n	8012294 <_strtod_l+0x5fc>
 8012272:	2b1f      	cmp	r3, #31
 8012274:	f340 8107 	ble.w	8012486 <_strtod_l+0x7ee>
 8012278:	2b34      	cmp	r3, #52	; 0x34
 801227a:	bfde      	ittt	le
 801227c:	3b20      	suble	r3, #32
 801227e:	f04f 32ff 	movle.w	r2, #4294967295
 8012282:	fa02 f303 	lslle.w	r3, r2, r3
 8012286:	f04f 0a00 	mov.w	sl, #0
 801228a:	bfcc      	ite	gt
 801228c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012290:	ea03 0b01 	andle.w	fp, r3, r1
 8012294:	2200      	movs	r2, #0
 8012296:	2300      	movs	r3, #0
 8012298:	4650      	mov	r0, sl
 801229a:	4659      	mov	r1, fp
 801229c:	f7ee fc44 	bl	8000b28 <__aeabi_dcmpeq>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d1ac      	bne.n	80121fe <_strtod_l+0x566>
 80122a4:	9b07      	ldr	r3, [sp, #28]
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	9a05      	ldr	r2, [sp, #20]
 80122aa:	9908      	ldr	r1, [sp, #32]
 80122ac:	4623      	mov	r3, r4
 80122ae:	4648      	mov	r0, r9
 80122b0:	f000 ffb6 	bl	8013220 <__s2b>
 80122b4:	9007      	str	r0, [sp, #28]
 80122b6:	2800      	cmp	r0, #0
 80122b8:	f43f af08 	beq.w	80120cc <_strtod_l+0x434>
 80122bc:	9a06      	ldr	r2, [sp, #24]
 80122be:	9b06      	ldr	r3, [sp, #24]
 80122c0:	2a00      	cmp	r2, #0
 80122c2:	f1c3 0300 	rsb	r3, r3, #0
 80122c6:	bfa8      	it	ge
 80122c8:	2300      	movge	r3, #0
 80122ca:	930e      	str	r3, [sp, #56]	; 0x38
 80122cc:	2400      	movs	r4, #0
 80122ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80122d2:	9316      	str	r3, [sp, #88]	; 0x58
 80122d4:	46a0      	mov	r8, r4
 80122d6:	9b07      	ldr	r3, [sp, #28]
 80122d8:	4648      	mov	r0, r9
 80122da:	6859      	ldr	r1, [r3, #4]
 80122dc:	f000 ff1a 	bl	8013114 <_Balloc>
 80122e0:	9005      	str	r0, [sp, #20]
 80122e2:	2800      	cmp	r0, #0
 80122e4:	f43f aef6 	beq.w	80120d4 <_strtod_l+0x43c>
 80122e8:	9b07      	ldr	r3, [sp, #28]
 80122ea:	691a      	ldr	r2, [r3, #16]
 80122ec:	3202      	adds	r2, #2
 80122ee:	f103 010c 	add.w	r1, r3, #12
 80122f2:	0092      	lsls	r2, r2, #2
 80122f4:	300c      	adds	r0, #12
 80122f6:	f7ff fb36 	bl	8011966 <memcpy>
 80122fa:	aa1e      	add	r2, sp, #120	; 0x78
 80122fc:	a91d      	add	r1, sp, #116	; 0x74
 80122fe:	ec4b ab10 	vmov	d0, sl, fp
 8012302:	4648      	mov	r0, r9
 8012304:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012308:	f001 fa46 	bl	8013798 <__d2b>
 801230c:	901c      	str	r0, [sp, #112]	; 0x70
 801230e:	2800      	cmp	r0, #0
 8012310:	f43f aee0 	beq.w	80120d4 <_strtod_l+0x43c>
 8012314:	2101      	movs	r1, #1
 8012316:	4648      	mov	r0, r9
 8012318:	f001 f80e 	bl	8013338 <__i2b>
 801231c:	4680      	mov	r8, r0
 801231e:	2800      	cmp	r0, #0
 8012320:	f43f aed8 	beq.w	80120d4 <_strtod_l+0x43c>
 8012324:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012326:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012328:	2e00      	cmp	r6, #0
 801232a:	bfab      	itete	ge
 801232c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801232e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8012330:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8012332:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8012334:	bfac      	ite	ge
 8012336:	18f7      	addge	r7, r6, r3
 8012338:	1b9d      	sublt	r5, r3, r6
 801233a:	9b04      	ldr	r3, [sp, #16]
 801233c:	1af6      	subs	r6, r6, r3
 801233e:	4416      	add	r6, r2
 8012340:	4b63      	ldr	r3, [pc, #396]	; (80124d0 <_strtod_l+0x838>)
 8012342:	3e01      	subs	r6, #1
 8012344:	429e      	cmp	r6, r3
 8012346:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801234a:	f280 80af 	bge.w	80124ac <_strtod_l+0x814>
 801234e:	1b9b      	subs	r3, r3, r6
 8012350:	2b1f      	cmp	r3, #31
 8012352:	eba2 0203 	sub.w	r2, r2, r3
 8012356:	f04f 0101 	mov.w	r1, #1
 801235a:	f300 809b 	bgt.w	8012494 <_strtod_l+0x7fc>
 801235e:	fa01 f303 	lsl.w	r3, r1, r3
 8012362:	930f      	str	r3, [sp, #60]	; 0x3c
 8012364:	2300      	movs	r3, #0
 8012366:	930a      	str	r3, [sp, #40]	; 0x28
 8012368:	18be      	adds	r6, r7, r2
 801236a:	9b04      	ldr	r3, [sp, #16]
 801236c:	42b7      	cmp	r7, r6
 801236e:	4415      	add	r5, r2
 8012370:	441d      	add	r5, r3
 8012372:	463b      	mov	r3, r7
 8012374:	bfa8      	it	ge
 8012376:	4633      	movge	r3, r6
 8012378:	42ab      	cmp	r3, r5
 801237a:	bfa8      	it	ge
 801237c:	462b      	movge	r3, r5
 801237e:	2b00      	cmp	r3, #0
 8012380:	bfc2      	ittt	gt
 8012382:	1af6      	subgt	r6, r6, r3
 8012384:	1aed      	subgt	r5, r5, r3
 8012386:	1aff      	subgt	r7, r7, r3
 8012388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801238a:	b1bb      	cbz	r3, 80123bc <_strtod_l+0x724>
 801238c:	4641      	mov	r1, r8
 801238e:	461a      	mov	r2, r3
 8012390:	4648      	mov	r0, r9
 8012392:	f001 f871 	bl	8013478 <__pow5mult>
 8012396:	4680      	mov	r8, r0
 8012398:	2800      	cmp	r0, #0
 801239a:	f43f ae9b 	beq.w	80120d4 <_strtod_l+0x43c>
 801239e:	4601      	mov	r1, r0
 80123a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80123a2:	4648      	mov	r0, r9
 80123a4:	f000 ffd1 	bl	801334a <__multiply>
 80123a8:	900c      	str	r0, [sp, #48]	; 0x30
 80123aa:	2800      	cmp	r0, #0
 80123ac:	f43f ae92 	beq.w	80120d4 <_strtod_l+0x43c>
 80123b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80123b2:	4648      	mov	r0, r9
 80123b4:	f000 fee2 	bl	801317c <_Bfree>
 80123b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123ba:	931c      	str	r3, [sp, #112]	; 0x70
 80123bc:	2e00      	cmp	r6, #0
 80123be:	dc7a      	bgt.n	80124b6 <_strtod_l+0x81e>
 80123c0:	9b06      	ldr	r3, [sp, #24]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	dd08      	ble.n	80123d8 <_strtod_l+0x740>
 80123c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80123c8:	9905      	ldr	r1, [sp, #20]
 80123ca:	4648      	mov	r0, r9
 80123cc:	f001 f854 	bl	8013478 <__pow5mult>
 80123d0:	9005      	str	r0, [sp, #20]
 80123d2:	2800      	cmp	r0, #0
 80123d4:	f43f ae7e 	beq.w	80120d4 <_strtod_l+0x43c>
 80123d8:	2d00      	cmp	r5, #0
 80123da:	dd08      	ble.n	80123ee <_strtod_l+0x756>
 80123dc:	462a      	mov	r2, r5
 80123de:	9905      	ldr	r1, [sp, #20]
 80123e0:	4648      	mov	r0, r9
 80123e2:	f001 f897 	bl	8013514 <__lshift>
 80123e6:	9005      	str	r0, [sp, #20]
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f43f ae73 	beq.w	80120d4 <_strtod_l+0x43c>
 80123ee:	2f00      	cmp	r7, #0
 80123f0:	dd08      	ble.n	8012404 <_strtod_l+0x76c>
 80123f2:	4641      	mov	r1, r8
 80123f4:	463a      	mov	r2, r7
 80123f6:	4648      	mov	r0, r9
 80123f8:	f001 f88c 	bl	8013514 <__lshift>
 80123fc:	4680      	mov	r8, r0
 80123fe:	2800      	cmp	r0, #0
 8012400:	f43f ae68 	beq.w	80120d4 <_strtod_l+0x43c>
 8012404:	9a05      	ldr	r2, [sp, #20]
 8012406:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012408:	4648      	mov	r0, r9
 801240a:	f001 f8f1 	bl	80135f0 <__mdiff>
 801240e:	4604      	mov	r4, r0
 8012410:	2800      	cmp	r0, #0
 8012412:	f43f ae5f 	beq.w	80120d4 <_strtod_l+0x43c>
 8012416:	68c3      	ldr	r3, [r0, #12]
 8012418:	930c      	str	r3, [sp, #48]	; 0x30
 801241a:	2300      	movs	r3, #0
 801241c:	60c3      	str	r3, [r0, #12]
 801241e:	4641      	mov	r1, r8
 8012420:	f001 f8cc 	bl	80135bc <__mcmp>
 8012424:	2800      	cmp	r0, #0
 8012426:	da55      	bge.n	80124d4 <_strtod_l+0x83c>
 8012428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801242a:	b9e3      	cbnz	r3, 8012466 <_strtod_l+0x7ce>
 801242c:	f1ba 0f00 	cmp.w	sl, #0
 8012430:	d119      	bne.n	8012466 <_strtod_l+0x7ce>
 8012432:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012436:	b9b3      	cbnz	r3, 8012466 <_strtod_l+0x7ce>
 8012438:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801243c:	0d1b      	lsrs	r3, r3, #20
 801243e:	051b      	lsls	r3, r3, #20
 8012440:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012444:	d90f      	bls.n	8012466 <_strtod_l+0x7ce>
 8012446:	6963      	ldr	r3, [r4, #20]
 8012448:	b913      	cbnz	r3, 8012450 <_strtod_l+0x7b8>
 801244a:	6923      	ldr	r3, [r4, #16]
 801244c:	2b01      	cmp	r3, #1
 801244e:	dd0a      	ble.n	8012466 <_strtod_l+0x7ce>
 8012450:	4621      	mov	r1, r4
 8012452:	2201      	movs	r2, #1
 8012454:	4648      	mov	r0, r9
 8012456:	f001 f85d 	bl	8013514 <__lshift>
 801245a:	4641      	mov	r1, r8
 801245c:	4604      	mov	r4, r0
 801245e:	f001 f8ad 	bl	80135bc <__mcmp>
 8012462:	2800      	cmp	r0, #0
 8012464:	dc67      	bgt.n	8012536 <_strtod_l+0x89e>
 8012466:	9b04      	ldr	r3, [sp, #16]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d171      	bne.n	8012550 <_strtod_l+0x8b8>
 801246c:	e63d      	b.n	80120ea <_strtod_l+0x452>
 801246e:	f018 0f01 	tst.w	r8, #1
 8012472:	d004      	beq.n	801247e <_strtod_l+0x7e6>
 8012474:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012478:	f7ee f8ee 	bl	8000658 <__aeabi_dmul>
 801247c:	2301      	movs	r3, #1
 801247e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012482:	3508      	adds	r5, #8
 8012484:	e6e5      	b.n	8012252 <_strtod_l+0x5ba>
 8012486:	f04f 32ff 	mov.w	r2, #4294967295
 801248a:	fa02 f303 	lsl.w	r3, r2, r3
 801248e:	ea03 0a0a 	and.w	sl, r3, sl
 8012492:	e6ff      	b.n	8012294 <_strtod_l+0x5fc>
 8012494:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012498:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801249c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80124a0:	36e2      	adds	r6, #226	; 0xe2
 80124a2:	fa01 f306 	lsl.w	r3, r1, r6
 80124a6:	930a      	str	r3, [sp, #40]	; 0x28
 80124a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80124aa:	e75d      	b.n	8012368 <_strtod_l+0x6d0>
 80124ac:	2300      	movs	r3, #0
 80124ae:	930a      	str	r3, [sp, #40]	; 0x28
 80124b0:	2301      	movs	r3, #1
 80124b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80124b4:	e758      	b.n	8012368 <_strtod_l+0x6d0>
 80124b6:	4632      	mov	r2, r6
 80124b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80124ba:	4648      	mov	r0, r9
 80124bc:	f001 f82a 	bl	8013514 <__lshift>
 80124c0:	901c      	str	r0, [sp, #112]	; 0x70
 80124c2:	2800      	cmp	r0, #0
 80124c4:	f47f af7c 	bne.w	80123c0 <_strtod_l+0x728>
 80124c8:	e604      	b.n	80120d4 <_strtod_l+0x43c>
 80124ca:	bf00      	nop
 80124cc:	08016f60 	.word	0x08016f60
 80124d0:	fffffc02 	.word	0xfffffc02
 80124d4:	465d      	mov	r5, fp
 80124d6:	f040 8086 	bne.w	80125e6 <_strtod_l+0x94e>
 80124da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124e0:	b32a      	cbz	r2, 801252e <_strtod_l+0x896>
 80124e2:	4aaf      	ldr	r2, [pc, #700]	; (80127a0 <_strtod_l+0xb08>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d153      	bne.n	8012590 <_strtod_l+0x8f8>
 80124e8:	9b04      	ldr	r3, [sp, #16]
 80124ea:	4650      	mov	r0, sl
 80124ec:	b1d3      	cbz	r3, 8012524 <_strtod_l+0x88c>
 80124ee:	4aad      	ldr	r2, [pc, #692]	; (80127a4 <_strtod_l+0xb0c>)
 80124f0:	402a      	ands	r2, r5
 80124f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80124f6:	f04f 31ff 	mov.w	r1, #4294967295
 80124fa:	d816      	bhi.n	801252a <_strtod_l+0x892>
 80124fc:	0d12      	lsrs	r2, r2, #20
 80124fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012502:	fa01 f303 	lsl.w	r3, r1, r3
 8012506:	4298      	cmp	r0, r3
 8012508:	d142      	bne.n	8012590 <_strtod_l+0x8f8>
 801250a:	4ba7      	ldr	r3, [pc, #668]	; (80127a8 <_strtod_l+0xb10>)
 801250c:	429d      	cmp	r5, r3
 801250e:	d102      	bne.n	8012516 <_strtod_l+0x87e>
 8012510:	3001      	adds	r0, #1
 8012512:	f43f addf 	beq.w	80120d4 <_strtod_l+0x43c>
 8012516:	4ba3      	ldr	r3, [pc, #652]	; (80127a4 <_strtod_l+0xb0c>)
 8012518:	402b      	ands	r3, r5
 801251a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801251e:	f04f 0a00 	mov.w	sl, #0
 8012522:	e7a0      	b.n	8012466 <_strtod_l+0x7ce>
 8012524:	f04f 33ff 	mov.w	r3, #4294967295
 8012528:	e7ed      	b.n	8012506 <_strtod_l+0x86e>
 801252a:	460b      	mov	r3, r1
 801252c:	e7eb      	b.n	8012506 <_strtod_l+0x86e>
 801252e:	bb7b      	cbnz	r3, 8012590 <_strtod_l+0x8f8>
 8012530:	f1ba 0f00 	cmp.w	sl, #0
 8012534:	d12c      	bne.n	8012590 <_strtod_l+0x8f8>
 8012536:	9904      	ldr	r1, [sp, #16]
 8012538:	4a9a      	ldr	r2, [pc, #616]	; (80127a4 <_strtod_l+0xb0c>)
 801253a:	465b      	mov	r3, fp
 801253c:	b1f1      	cbz	r1, 801257c <_strtod_l+0x8e4>
 801253e:	ea02 010b 	and.w	r1, r2, fp
 8012542:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012546:	dc19      	bgt.n	801257c <_strtod_l+0x8e4>
 8012548:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801254c:	f77f ae5b 	ble.w	8012206 <_strtod_l+0x56e>
 8012550:	4a96      	ldr	r2, [pc, #600]	; (80127ac <_strtod_l+0xb14>)
 8012552:	2300      	movs	r3, #0
 8012554:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012558:	4650      	mov	r0, sl
 801255a:	4659      	mov	r1, fp
 801255c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012560:	f7ee f87a 	bl	8000658 <__aeabi_dmul>
 8012564:	4682      	mov	sl, r0
 8012566:	468b      	mov	fp, r1
 8012568:	2900      	cmp	r1, #0
 801256a:	f47f adbe 	bne.w	80120ea <_strtod_l+0x452>
 801256e:	2800      	cmp	r0, #0
 8012570:	f47f adbb 	bne.w	80120ea <_strtod_l+0x452>
 8012574:	2322      	movs	r3, #34	; 0x22
 8012576:	f8c9 3000 	str.w	r3, [r9]
 801257a:	e5b6      	b.n	80120ea <_strtod_l+0x452>
 801257c:	4013      	ands	r3, r2
 801257e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012582:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012586:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801258a:	f04f 3aff 	mov.w	sl, #4294967295
 801258e:	e76a      	b.n	8012466 <_strtod_l+0x7ce>
 8012590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012592:	b193      	cbz	r3, 80125ba <_strtod_l+0x922>
 8012594:	422b      	tst	r3, r5
 8012596:	f43f af66 	beq.w	8012466 <_strtod_l+0x7ce>
 801259a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801259c:	9a04      	ldr	r2, [sp, #16]
 801259e:	4650      	mov	r0, sl
 80125a0:	4659      	mov	r1, fp
 80125a2:	b173      	cbz	r3, 80125c2 <_strtod_l+0x92a>
 80125a4:	f7ff fb5b 	bl	8011c5e <sulp>
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80125b0:	f7ed fe9c 	bl	80002ec <__adddf3>
 80125b4:	4682      	mov	sl, r0
 80125b6:	468b      	mov	fp, r1
 80125b8:	e755      	b.n	8012466 <_strtod_l+0x7ce>
 80125ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125bc:	ea13 0f0a 	tst.w	r3, sl
 80125c0:	e7e9      	b.n	8012596 <_strtod_l+0x8fe>
 80125c2:	f7ff fb4c 	bl	8011c5e <sulp>
 80125c6:	4602      	mov	r2, r0
 80125c8:	460b      	mov	r3, r1
 80125ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80125ce:	f7ed fe8b 	bl	80002e8 <__aeabi_dsub>
 80125d2:	2200      	movs	r2, #0
 80125d4:	2300      	movs	r3, #0
 80125d6:	4682      	mov	sl, r0
 80125d8:	468b      	mov	fp, r1
 80125da:	f7ee faa5 	bl	8000b28 <__aeabi_dcmpeq>
 80125de:	2800      	cmp	r0, #0
 80125e0:	f47f ae11 	bne.w	8012206 <_strtod_l+0x56e>
 80125e4:	e73f      	b.n	8012466 <_strtod_l+0x7ce>
 80125e6:	4641      	mov	r1, r8
 80125e8:	4620      	mov	r0, r4
 80125ea:	f001 f924 	bl	8013836 <__ratio>
 80125ee:	ec57 6b10 	vmov	r6, r7, d0
 80125f2:	2200      	movs	r2, #0
 80125f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125f8:	ee10 0a10 	vmov	r0, s0
 80125fc:	4639      	mov	r1, r7
 80125fe:	f7ee faa7 	bl	8000b50 <__aeabi_dcmple>
 8012602:	2800      	cmp	r0, #0
 8012604:	d077      	beq.n	80126f6 <_strtod_l+0xa5e>
 8012606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012608:	2b00      	cmp	r3, #0
 801260a:	d04a      	beq.n	80126a2 <_strtod_l+0xa0a>
 801260c:	4b68      	ldr	r3, [pc, #416]	; (80127b0 <_strtod_l+0xb18>)
 801260e:	2200      	movs	r2, #0
 8012610:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012614:	4f66      	ldr	r7, [pc, #408]	; (80127b0 <_strtod_l+0xb18>)
 8012616:	2600      	movs	r6, #0
 8012618:	4b62      	ldr	r3, [pc, #392]	; (80127a4 <_strtod_l+0xb0c>)
 801261a:	402b      	ands	r3, r5
 801261c:	930f      	str	r3, [sp, #60]	; 0x3c
 801261e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012620:	4b64      	ldr	r3, [pc, #400]	; (80127b4 <_strtod_l+0xb1c>)
 8012622:	429a      	cmp	r2, r3
 8012624:	f040 80ce 	bne.w	80127c4 <_strtod_l+0xb2c>
 8012628:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801262c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012630:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8012634:	ec4b ab10 	vmov	d0, sl, fp
 8012638:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801263c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012640:	f001 f834 	bl	80136ac <__ulp>
 8012644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012648:	ec53 2b10 	vmov	r2, r3, d0
 801264c:	f7ee f804 	bl	8000658 <__aeabi_dmul>
 8012650:	4652      	mov	r2, sl
 8012652:	465b      	mov	r3, fp
 8012654:	f7ed fe4a 	bl	80002ec <__adddf3>
 8012658:	460b      	mov	r3, r1
 801265a:	4952      	ldr	r1, [pc, #328]	; (80127a4 <_strtod_l+0xb0c>)
 801265c:	4a56      	ldr	r2, [pc, #344]	; (80127b8 <_strtod_l+0xb20>)
 801265e:	4019      	ands	r1, r3
 8012660:	4291      	cmp	r1, r2
 8012662:	4682      	mov	sl, r0
 8012664:	d95b      	bls.n	801271e <_strtod_l+0xa86>
 8012666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012668:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801266c:	4293      	cmp	r3, r2
 801266e:	d103      	bne.n	8012678 <_strtod_l+0x9e0>
 8012670:	9b08      	ldr	r3, [sp, #32]
 8012672:	3301      	adds	r3, #1
 8012674:	f43f ad2e 	beq.w	80120d4 <_strtod_l+0x43c>
 8012678:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80127a8 <_strtod_l+0xb10>
 801267c:	f04f 3aff 	mov.w	sl, #4294967295
 8012680:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012682:	4648      	mov	r0, r9
 8012684:	f000 fd7a 	bl	801317c <_Bfree>
 8012688:	9905      	ldr	r1, [sp, #20]
 801268a:	4648      	mov	r0, r9
 801268c:	f000 fd76 	bl	801317c <_Bfree>
 8012690:	4641      	mov	r1, r8
 8012692:	4648      	mov	r0, r9
 8012694:	f000 fd72 	bl	801317c <_Bfree>
 8012698:	4621      	mov	r1, r4
 801269a:	4648      	mov	r0, r9
 801269c:	f000 fd6e 	bl	801317c <_Bfree>
 80126a0:	e619      	b.n	80122d6 <_strtod_l+0x63e>
 80126a2:	f1ba 0f00 	cmp.w	sl, #0
 80126a6:	d11a      	bne.n	80126de <_strtod_l+0xa46>
 80126a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126ac:	b9eb      	cbnz	r3, 80126ea <_strtod_l+0xa52>
 80126ae:	2200      	movs	r2, #0
 80126b0:	4b3f      	ldr	r3, [pc, #252]	; (80127b0 <_strtod_l+0xb18>)
 80126b2:	4630      	mov	r0, r6
 80126b4:	4639      	mov	r1, r7
 80126b6:	f7ee fa41 	bl	8000b3c <__aeabi_dcmplt>
 80126ba:	b9c8      	cbnz	r0, 80126f0 <_strtod_l+0xa58>
 80126bc:	4630      	mov	r0, r6
 80126be:	4639      	mov	r1, r7
 80126c0:	2200      	movs	r2, #0
 80126c2:	4b3e      	ldr	r3, [pc, #248]	; (80127bc <_strtod_l+0xb24>)
 80126c4:	f7ed ffc8 	bl	8000658 <__aeabi_dmul>
 80126c8:	4606      	mov	r6, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80126d0:	9618      	str	r6, [sp, #96]	; 0x60
 80126d2:	9319      	str	r3, [sp, #100]	; 0x64
 80126d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80126d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80126dc:	e79c      	b.n	8012618 <_strtod_l+0x980>
 80126de:	f1ba 0f01 	cmp.w	sl, #1
 80126e2:	d102      	bne.n	80126ea <_strtod_l+0xa52>
 80126e4:	2d00      	cmp	r5, #0
 80126e6:	f43f ad8e 	beq.w	8012206 <_strtod_l+0x56e>
 80126ea:	2200      	movs	r2, #0
 80126ec:	4b34      	ldr	r3, [pc, #208]	; (80127c0 <_strtod_l+0xb28>)
 80126ee:	e78f      	b.n	8012610 <_strtod_l+0x978>
 80126f0:	2600      	movs	r6, #0
 80126f2:	4f32      	ldr	r7, [pc, #200]	; (80127bc <_strtod_l+0xb24>)
 80126f4:	e7ea      	b.n	80126cc <_strtod_l+0xa34>
 80126f6:	4b31      	ldr	r3, [pc, #196]	; (80127bc <_strtod_l+0xb24>)
 80126f8:	4630      	mov	r0, r6
 80126fa:	4639      	mov	r1, r7
 80126fc:	2200      	movs	r2, #0
 80126fe:	f7ed ffab 	bl	8000658 <__aeabi_dmul>
 8012702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012704:	4606      	mov	r6, r0
 8012706:	460f      	mov	r7, r1
 8012708:	b933      	cbnz	r3, 8012718 <_strtod_l+0xa80>
 801270a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801270e:	9010      	str	r0, [sp, #64]	; 0x40
 8012710:	9311      	str	r3, [sp, #68]	; 0x44
 8012712:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012716:	e7df      	b.n	80126d8 <_strtod_l+0xa40>
 8012718:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801271c:	e7f9      	b.n	8012712 <_strtod_l+0xa7a>
 801271e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012722:	9b04      	ldr	r3, [sp, #16]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1ab      	bne.n	8012680 <_strtod_l+0x9e8>
 8012728:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801272c:	0d1b      	lsrs	r3, r3, #20
 801272e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012730:	051b      	lsls	r3, r3, #20
 8012732:	429a      	cmp	r2, r3
 8012734:	465d      	mov	r5, fp
 8012736:	d1a3      	bne.n	8012680 <_strtod_l+0x9e8>
 8012738:	4639      	mov	r1, r7
 801273a:	4630      	mov	r0, r6
 801273c:	f7ee fa26 	bl	8000b8c <__aeabi_d2iz>
 8012740:	f7ed ff20 	bl	8000584 <__aeabi_i2d>
 8012744:	460b      	mov	r3, r1
 8012746:	4602      	mov	r2, r0
 8012748:	4639      	mov	r1, r7
 801274a:	4630      	mov	r0, r6
 801274c:	f7ed fdcc 	bl	80002e8 <__aeabi_dsub>
 8012750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012752:	4606      	mov	r6, r0
 8012754:	460f      	mov	r7, r1
 8012756:	b933      	cbnz	r3, 8012766 <_strtod_l+0xace>
 8012758:	f1ba 0f00 	cmp.w	sl, #0
 801275c:	d103      	bne.n	8012766 <_strtod_l+0xace>
 801275e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8012762:	2d00      	cmp	r5, #0
 8012764:	d06d      	beq.n	8012842 <_strtod_l+0xbaa>
 8012766:	a30a      	add	r3, pc, #40	; (adr r3, 8012790 <_strtod_l+0xaf8>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	4630      	mov	r0, r6
 801276e:	4639      	mov	r1, r7
 8012770:	f7ee f9e4 	bl	8000b3c <__aeabi_dcmplt>
 8012774:	2800      	cmp	r0, #0
 8012776:	f47f acb8 	bne.w	80120ea <_strtod_l+0x452>
 801277a:	a307      	add	r3, pc, #28	; (adr r3, 8012798 <_strtod_l+0xb00>)
 801277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012780:	4630      	mov	r0, r6
 8012782:	4639      	mov	r1, r7
 8012784:	f7ee f9f8 	bl	8000b78 <__aeabi_dcmpgt>
 8012788:	2800      	cmp	r0, #0
 801278a:	f43f af79 	beq.w	8012680 <_strtod_l+0x9e8>
 801278e:	e4ac      	b.n	80120ea <_strtod_l+0x452>
 8012790:	94a03595 	.word	0x94a03595
 8012794:	3fdfffff 	.word	0x3fdfffff
 8012798:	35afe535 	.word	0x35afe535
 801279c:	3fe00000 	.word	0x3fe00000
 80127a0:	000fffff 	.word	0x000fffff
 80127a4:	7ff00000 	.word	0x7ff00000
 80127a8:	7fefffff 	.word	0x7fefffff
 80127ac:	39500000 	.word	0x39500000
 80127b0:	3ff00000 	.word	0x3ff00000
 80127b4:	7fe00000 	.word	0x7fe00000
 80127b8:	7c9fffff 	.word	0x7c9fffff
 80127bc:	3fe00000 	.word	0x3fe00000
 80127c0:	bff00000 	.word	0xbff00000
 80127c4:	9b04      	ldr	r3, [sp, #16]
 80127c6:	b333      	cbz	r3, 8012816 <_strtod_l+0xb7e>
 80127c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80127ce:	d822      	bhi.n	8012816 <_strtod_l+0xb7e>
 80127d0:	a327      	add	r3, pc, #156	; (adr r3, 8012870 <_strtod_l+0xbd8>)
 80127d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d6:	4630      	mov	r0, r6
 80127d8:	4639      	mov	r1, r7
 80127da:	f7ee f9b9 	bl	8000b50 <__aeabi_dcmple>
 80127de:	b1a0      	cbz	r0, 801280a <_strtod_l+0xb72>
 80127e0:	4639      	mov	r1, r7
 80127e2:	4630      	mov	r0, r6
 80127e4:	f7ee f9fa 	bl	8000bdc <__aeabi_d2uiz>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	bf08      	it	eq
 80127ec:	2001      	moveq	r0, #1
 80127ee:	f7ed feb9 	bl	8000564 <__aeabi_ui2d>
 80127f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127f4:	4606      	mov	r6, r0
 80127f6:	460f      	mov	r7, r1
 80127f8:	bb03      	cbnz	r3, 801283c <_strtod_l+0xba4>
 80127fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127fe:	9012      	str	r0, [sp, #72]	; 0x48
 8012800:	9313      	str	r3, [sp, #76]	; 0x4c
 8012802:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012806:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801280a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801280c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801280e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012812:	1a9b      	subs	r3, r3, r2
 8012814:	930b      	str	r3, [sp, #44]	; 0x2c
 8012816:	ed9d 0b08 	vldr	d0, [sp, #32]
 801281a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801281e:	f000 ff45 	bl	80136ac <__ulp>
 8012822:	4650      	mov	r0, sl
 8012824:	ec53 2b10 	vmov	r2, r3, d0
 8012828:	4659      	mov	r1, fp
 801282a:	f7ed ff15 	bl	8000658 <__aeabi_dmul>
 801282e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012832:	f7ed fd5b 	bl	80002ec <__adddf3>
 8012836:	4682      	mov	sl, r0
 8012838:	468b      	mov	fp, r1
 801283a:	e772      	b.n	8012722 <_strtod_l+0xa8a>
 801283c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012840:	e7df      	b.n	8012802 <_strtod_l+0xb6a>
 8012842:	a30d      	add	r3, pc, #52	; (adr r3, 8012878 <_strtod_l+0xbe0>)
 8012844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012848:	f7ee f978 	bl	8000b3c <__aeabi_dcmplt>
 801284c:	e79c      	b.n	8012788 <_strtod_l+0xaf0>
 801284e:	2300      	movs	r3, #0
 8012850:	930d      	str	r3, [sp, #52]	; 0x34
 8012852:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012856:	6013      	str	r3, [r2, #0]
 8012858:	f7ff ba61 	b.w	8011d1e <_strtod_l+0x86>
 801285c:	2b65      	cmp	r3, #101	; 0x65
 801285e:	f04f 0200 	mov.w	r2, #0
 8012862:	f43f ab4e 	beq.w	8011f02 <_strtod_l+0x26a>
 8012866:	2101      	movs	r1, #1
 8012868:	4614      	mov	r4, r2
 801286a:	9104      	str	r1, [sp, #16]
 801286c:	f7ff bacb 	b.w	8011e06 <_strtod_l+0x16e>
 8012870:	ffc00000 	.word	0xffc00000
 8012874:	41dfffff 	.word	0x41dfffff
 8012878:	94a03595 	.word	0x94a03595
 801287c:	3fcfffff 	.word	0x3fcfffff

08012880 <strtod>:
 8012880:	4b07      	ldr	r3, [pc, #28]	; (80128a0 <strtod+0x20>)
 8012882:	4a08      	ldr	r2, [pc, #32]	; (80128a4 <strtod+0x24>)
 8012884:	b410      	push	{r4}
 8012886:	681c      	ldr	r4, [r3, #0]
 8012888:	6a23      	ldr	r3, [r4, #32]
 801288a:	2b00      	cmp	r3, #0
 801288c:	bf08      	it	eq
 801288e:	4613      	moveq	r3, r2
 8012890:	460a      	mov	r2, r1
 8012892:	4601      	mov	r1, r0
 8012894:	4620      	mov	r0, r4
 8012896:	f85d 4b04 	ldr.w	r4, [sp], #4
 801289a:	f7ff b9fd 	b.w	8011c98 <_strtod_l>
 801289e:	bf00      	nop
 80128a0:	20000024 	.word	0x20000024
 80128a4:	20000088 	.word	0x20000088

080128a8 <__ascii_wctomb>:
 80128a8:	b149      	cbz	r1, 80128be <__ascii_wctomb+0x16>
 80128aa:	2aff      	cmp	r2, #255	; 0xff
 80128ac:	bf85      	ittet	hi
 80128ae:	238a      	movhi	r3, #138	; 0x8a
 80128b0:	6003      	strhi	r3, [r0, #0]
 80128b2:	700a      	strbls	r2, [r1, #0]
 80128b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80128b8:	bf98      	it	ls
 80128ba:	2001      	movls	r0, #1
 80128bc:	4770      	bx	lr
 80128be:	4608      	mov	r0, r1
 80128c0:	4770      	bx	lr
	...

080128c4 <_write_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4c07      	ldr	r4, [pc, #28]	; (80128e4 <_write_r+0x20>)
 80128c8:	4605      	mov	r5, r0
 80128ca:	4608      	mov	r0, r1
 80128cc:	4611      	mov	r1, r2
 80128ce:	2200      	movs	r2, #0
 80128d0:	6022      	str	r2, [r4, #0]
 80128d2:	461a      	mov	r2, r3
 80128d4:	f7f0 fb39 	bl	8002f4a <_write>
 80128d8:	1c43      	adds	r3, r0, #1
 80128da:	d102      	bne.n	80128e2 <_write_r+0x1e>
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	b103      	cbz	r3, 80128e2 <_write_r+0x1e>
 80128e0:	602b      	str	r3, [r5, #0]
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
 80128e4:	20006fcc 	.word	0x20006fcc

080128e8 <_close_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4c06      	ldr	r4, [pc, #24]	; (8012904 <_close_r+0x1c>)
 80128ec:	2300      	movs	r3, #0
 80128ee:	4605      	mov	r5, r0
 80128f0:	4608      	mov	r0, r1
 80128f2:	6023      	str	r3, [r4, #0]
 80128f4:	f7f0 fb45 	bl	8002f82 <_close>
 80128f8:	1c43      	adds	r3, r0, #1
 80128fa:	d102      	bne.n	8012902 <_close_r+0x1a>
 80128fc:	6823      	ldr	r3, [r4, #0]
 80128fe:	b103      	cbz	r3, 8012902 <_close_r+0x1a>
 8012900:	602b      	str	r3, [r5, #0]
 8012902:	bd38      	pop	{r3, r4, r5, pc}
 8012904:	20006fcc 	.word	0x20006fcc

08012908 <std>:
 8012908:	2300      	movs	r3, #0
 801290a:	b510      	push	{r4, lr}
 801290c:	4604      	mov	r4, r0
 801290e:	e9c0 3300 	strd	r3, r3, [r0]
 8012912:	6083      	str	r3, [r0, #8]
 8012914:	8181      	strh	r1, [r0, #12]
 8012916:	6643      	str	r3, [r0, #100]	; 0x64
 8012918:	81c2      	strh	r2, [r0, #14]
 801291a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801291e:	6183      	str	r3, [r0, #24]
 8012920:	4619      	mov	r1, r3
 8012922:	2208      	movs	r2, #8
 8012924:	305c      	adds	r0, #92	; 0x5c
 8012926:	f7ff f829 	bl	801197c <memset>
 801292a:	4b05      	ldr	r3, [pc, #20]	; (8012940 <std+0x38>)
 801292c:	6263      	str	r3, [r4, #36]	; 0x24
 801292e:	4b05      	ldr	r3, [pc, #20]	; (8012944 <std+0x3c>)
 8012930:	62a3      	str	r3, [r4, #40]	; 0x28
 8012932:	4b05      	ldr	r3, [pc, #20]	; (8012948 <std+0x40>)
 8012934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <std+0x44>)
 8012938:	6224      	str	r4, [r4, #32]
 801293a:	6323      	str	r3, [r4, #48]	; 0x30
 801293c:	bd10      	pop	{r4, pc}
 801293e:	bf00      	nop
 8012940:	08011ba5 	.word	0x08011ba5
 8012944:	08011bc7 	.word	0x08011bc7
 8012948:	08011bff 	.word	0x08011bff
 801294c:	08011c23 	.word	0x08011c23

08012950 <_cleanup_r>:
 8012950:	4901      	ldr	r1, [pc, #4]	; (8012958 <_cleanup_r+0x8>)
 8012952:	f000 b885 	b.w	8012a60 <_fwalk_reent>
 8012956:	bf00      	nop
 8012958:	080141b9 	.word	0x080141b9

0801295c <__sfmoreglue>:
 801295c:	b570      	push	{r4, r5, r6, lr}
 801295e:	1e4a      	subs	r2, r1, #1
 8012960:	2568      	movs	r5, #104	; 0x68
 8012962:	4355      	muls	r5, r2
 8012964:	460e      	mov	r6, r1
 8012966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801296a:	f7ff f85d 	bl	8011a28 <_malloc_r>
 801296e:	4604      	mov	r4, r0
 8012970:	b140      	cbz	r0, 8012984 <__sfmoreglue+0x28>
 8012972:	2100      	movs	r1, #0
 8012974:	e9c0 1600 	strd	r1, r6, [r0]
 8012978:	300c      	adds	r0, #12
 801297a:	60a0      	str	r0, [r4, #8]
 801297c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012980:	f7fe fffc 	bl	801197c <memset>
 8012984:	4620      	mov	r0, r4
 8012986:	bd70      	pop	{r4, r5, r6, pc}

08012988 <__sinit>:
 8012988:	6983      	ldr	r3, [r0, #24]
 801298a:	b510      	push	{r4, lr}
 801298c:	4604      	mov	r4, r0
 801298e:	bb33      	cbnz	r3, 80129de <__sinit+0x56>
 8012990:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012994:	6503      	str	r3, [r0, #80]	; 0x50
 8012996:	4b12      	ldr	r3, [pc, #72]	; (80129e0 <__sinit+0x58>)
 8012998:	4a12      	ldr	r2, [pc, #72]	; (80129e4 <__sinit+0x5c>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	6282      	str	r2, [r0, #40]	; 0x28
 801299e:	4298      	cmp	r0, r3
 80129a0:	bf04      	itt	eq
 80129a2:	2301      	moveq	r3, #1
 80129a4:	6183      	streq	r3, [r0, #24]
 80129a6:	f000 f81f 	bl	80129e8 <__sfp>
 80129aa:	6060      	str	r0, [r4, #4]
 80129ac:	4620      	mov	r0, r4
 80129ae:	f000 f81b 	bl	80129e8 <__sfp>
 80129b2:	60a0      	str	r0, [r4, #8]
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 f817 	bl	80129e8 <__sfp>
 80129ba:	2200      	movs	r2, #0
 80129bc:	60e0      	str	r0, [r4, #12]
 80129be:	2104      	movs	r1, #4
 80129c0:	6860      	ldr	r0, [r4, #4]
 80129c2:	f7ff ffa1 	bl	8012908 <std>
 80129c6:	2201      	movs	r2, #1
 80129c8:	2109      	movs	r1, #9
 80129ca:	68a0      	ldr	r0, [r4, #8]
 80129cc:	f7ff ff9c 	bl	8012908 <std>
 80129d0:	2202      	movs	r2, #2
 80129d2:	2112      	movs	r1, #18
 80129d4:	68e0      	ldr	r0, [r4, #12]
 80129d6:	f7ff ff97 	bl	8012908 <std>
 80129da:	2301      	movs	r3, #1
 80129dc:	61a3      	str	r3, [r4, #24]
 80129de:	bd10      	pop	{r4, pc}
 80129e0:	08016f18 	.word	0x08016f18
 80129e4:	08012951 	.word	0x08012951

080129e8 <__sfp>:
 80129e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ea:	4b1b      	ldr	r3, [pc, #108]	; (8012a58 <__sfp+0x70>)
 80129ec:	681e      	ldr	r6, [r3, #0]
 80129ee:	69b3      	ldr	r3, [r6, #24]
 80129f0:	4607      	mov	r7, r0
 80129f2:	b913      	cbnz	r3, 80129fa <__sfp+0x12>
 80129f4:	4630      	mov	r0, r6
 80129f6:	f7ff ffc7 	bl	8012988 <__sinit>
 80129fa:	3648      	adds	r6, #72	; 0x48
 80129fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012a00:	3b01      	subs	r3, #1
 8012a02:	d503      	bpl.n	8012a0c <__sfp+0x24>
 8012a04:	6833      	ldr	r3, [r6, #0]
 8012a06:	b133      	cbz	r3, 8012a16 <__sfp+0x2e>
 8012a08:	6836      	ldr	r6, [r6, #0]
 8012a0a:	e7f7      	b.n	80129fc <__sfp+0x14>
 8012a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012a10:	b16d      	cbz	r5, 8012a2e <__sfp+0x46>
 8012a12:	3468      	adds	r4, #104	; 0x68
 8012a14:	e7f4      	b.n	8012a00 <__sfp+0x18>
 8012a16:	2104      	movs	r1, #4
 8012a18:	4638      	mov	r0, r7
 8012a1a:	f7ff ff9f 	bl	801295c <__sfmoreglue>
 8012a1e:	6030      	str	r0, [r6, #0]
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d1f1      	bne.n	8012a08 <__sfp+0x20>
 8012a24:	230c      	movs	r3, #12
 8012a26:	603b      	str	r3, [r7, #0]
 8012a28:	4604      	mov	r4, r0
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a2e:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <__sfp+0x74>)
 8012a30:	6665      	str	r5, [r4, #100]	; 0x64
 8012a32:	e9c4 5500 	strd	r5, r5, [r4]
 8012a36:	60a5      	str	r5, [r4, #8]
 8012a38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012a3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012a40:	2208      	movs	r2, #8
 8012a42:	4629      	mov	r1, r5
 8012a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a48:	f7fe ff98 	bl	801197c <memset>
 8012a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012a54:	e7e9      	b.n	8012a2a <__sfp+0x42>
 8012a56:	bf00      	nop
 8012a58:	08016f18 	.word	0x08016f18
 8012a5c:	ffff0001 	.word	0xffff0001

08012a60 <_fwalk_reent>:
 8012a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a64:	4680      	mov	r8, r0
 8012a66:	4689      	mov	r9, r1
 8012a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a6c:	2600      	movs	r6, #0
 8012a6e:	b914      	cbnz	r4, 8012a76 <_fwalk_reent+0x16>
 8012a70:	4630      	mov	r0, r6
 8012a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012a7a:	3f01      	subs	r7, #1
 8012a7c:	d501      	bpl.n	8012a82 <_fwalk_reent+0x22>
 8012a7e:	6824      	ldr	r4, [r4, #0]
 8012a80:	e7f5      	b.n	8012a6e <_fwalk_reent+0xe>
 8012a82:	89ab      	ldrh	r3, [r5, #12]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d907      	bls.n	8012a98 <_fwalk_reent+0x38>
 8012a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	d003      	beq.n	8012a98 <_fwalk_reent+0x38>
 8012a90:	4629      	mov	r1, r5
 8012a92:	4640      	mov	r0, r8
 8012a94:	47c8      	blx	r9
 8012a96:	4306      	orrs	r6, r0
 8012a98:	3568      	adds	r5, #104	; 0x68
 8012a9a:	e7ee      	b.n	8012a7a <_fwalk_reent+0x1a>

08012a9c <rshift>:
 8012a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a9e:	6906      	ldr	r6, [r0, #16]
 8012aa0:	114b      	asrs	r3, r1, #5
 8012aa2:	429e      	cmp	r6, r3
 8012aa4:	f100 0414 	add.w	r4, r0, #20
 8012aa8:	dd30      	ble.n	8012b0c <rshift+0x70>
 8012aaa:	f011 011f 	ands.w	r1, r1, #31
 8012aae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012ab2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012ab6:	d108      	bne.n	8012aca <rshift+0x2e>
 8012ab8:	4621      	mov	r1, r4
 8012aba:	42b2      	cmp	r2, r6
 8012abc:	460b      	mov	r3, r1
 8012abe:	d211      	bcs.n	8012ae4 <rshift+0x48>
 8012ac0:	f852 3b04 	ldr.w	r3, [r2], #4
 8012ac4:	f841 3b04 	str.w	r3, [r1], #4
 8012ac8:	e7f7      	b.n	8012aba <rshift+0x1e>
 8012aca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012ace:	f1c1 0c20 	rsb	ip, r1, #32
 8012ad2:	40cd      	lsrs	r5, r1
 8012ad4:	3204      	adds	r2, #4
 8012ad6:	4623      	mov	r3, r4
 8012ad8:	42b2      	cmp	r2, r6
 8012ada:	4617      	mov	r7, r2
 8012adc:	d30c      	bcc.n	8012af8 <rshift+0x5c>
 8012ade:	601d      	str	r5, [r3, #0]
 8012ae0:	b105      	cbz	r5, 8012ae4 <rshift+0x48>
 8012ae2:	3304      	adds	r3, #4
 8012ae4:	1b1a      	subs	r2, r3, r4
 8012ae6:	42a3      	cmp	r3, r4
 8012ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012aec:	bf08      	it	eq
 8012aee:	2300      	moveq	r3, #0
 8012af0:	6102      	str	r2, [r0, #16]
 8012af2:	bf08      	it	eq
 8012af4:	6143      	streq	r3, [r0, #20]
 8012af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012af8:	683f      	ldr	r7, [r7, #0]
 8012afa:	fa07 f70c 	lsl.w	r7, r7, ip
 8012afe:	433d      	orrs	r5, r7
 8012b00:	f843 5b04 	str.w	r5, [r3], #4
 8012b04:	f852 5b04 	ldr.w	r5, [r2], #4
 8012b08:	40cd      	lsrs	r5, r1
 8012b0a:	e7e5      	b.n	8012ad8 <rshift+0x3c>
 8012b0c:	4623      	mov	r3, r4
 8012b0e:	e7e9      	b.n	8012ae4 <rshift+0x48>

08012b10 <__hexdig_fun>:
 8012b10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012b14:	2b09      	cmp	r3, #9
 8012b16:	d802      	bhi.n	8012b1e <__hexdig_fun+0xe>
 8012b18:	3820      	subs	r0, #32
 8012b1a:	b2c0      	uxtb	r0, r0
 8012b1c:	4770      	bx	lr
 8012b1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012b22:	2b05      	cmp	r3, #5
 8012b24:	d801      	bhi.n	8012b2a <__hexdig_fun+0x1a>
 8012b26:	3847      	subs	r0, #71	; 0x47
 8012b28:	e7f7      	b.n	8012b1a <__hexdig_fun+0xa>
 8012b2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012b2e:	2b05      	cmp	r3, #5
 8012b30:	d801      	bhi.n	8012b36 <__hexdig_fun+0x26>
 8012b32:	3827      	subs	r0, #39	; 0x27
 8012b34:	e7f1      	b.n	8012b1a <__hexdig_fun+0xa>
 8012b36:	2000      	movs	r0, #0
 8012b38:	4770      	bx	lr

08012b3a <__gethex>:
 8012b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3e:	b08b      	sub	sp, #44	; 0x2c
 8012b40:	468a      	mov	sl, r1
 8012b42:	9002      	str	r0, [sp, #8]
 8012b44:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012b46:	9306      	str	r3, [sp, #24]
 8012b48:	4690      	mov	r8, r2
 8012b4a:	f000 facd 	bl	80130e8 <__localeconv_l>
 8012b4e:	6803      	ldr	r3, [r0, #0]
 8012b50:	9303      	str	r3, [sp, #12]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ed fb66 	bl	8000224 <strlen>
 8012b58:	9b03      	ldr	r3, [sp, #12]
 8012b5a:	9001      	str	r0, [sp, #4]
 8012b5c:	4403      	add	r3, r0
 8012b5e:	f04f 0b00 	mov.w	fp, #0
 8012b62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012b66:	9307      	str	r3, [sp, #28]
 8012b68:	f8da 3000 	ldr.w	r3, [sl]
 8012b6c:	3302      	adds	r3, #2
 8012b6e:	461f      	mov	r7, r3
 8012b70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012b74:	2830      	cmp	r0, #48	; 0x30
 8012b76:	d06c      	beq.n	8012c52 <__gethex+0x118>
 8012b78:	f7ff ffca 	bl	8012b10 <__hexdig_fun>
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d16a      	bne.n	8012c58 <__gethex+0x11e>
 8012b82:	9a01      	ldr	r2, [sp, #4]
 8012b84:	9903      	ldr	r1, [sp, #12]
 8012b86:	4638      	mov	r0, r7
 8012b88:	f7ff f857 	bl	8011c3a <strncmp>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d166      	bne.n	8012c5e <__gethex+0x124>
 8012b90:	9b01      	ldr	r3, [sp, #4]
 8012b92:	5cf8      	ldrb	r0, [r7, r3]
 8012b94:	18fe      	adds	r6, r7, r3
 8012b96:	f7ff ffbb 	bl	8012b10 <__hexdig_fun>
 8012b9a:	2800      	cmp	r0, #0
 8012b9c:	d062      	beq.n	8012c64 <__gethex+0x12a>
 8012b9e:	4633      	mov	r3, r6
 8012ba0:	7818      	ldrb	r0, [r3, #0]
 8012ba2:	2830      	cmp	r0, #48	; 0x30
 8012ba4:	461f      	mov	r7, r3
 8012ba6:	f103 0301 	add.w	r3, r3, #1
 8012baa:	d0f9      	beq.n	8012ba0 <__gethex+0x66>
 8012bac:	f7ff ffb0 	bl	8012b10 <__hexdig_fun>
 8012bb0:	fab0 f580 	clz	r5, r0
 8012bb4:	096d      	lsrs	r5, r5, #5
 8012bb6:	4634      	mov	r4, r6
 8012bb8:	f04f 0b01 	mov.w	fp, #1
 8012bbc:	463a      	mov	r2, r7
 8012bbe:	4616      	mov	r6, r2
 8012bc0:	3201      	adds	r2, #1
 8012bc2:	7830      	ldrb	r0, [r6, #0]
 8012bc4:	f7ff ffa4 	bl	8012b10 <__hexdig_fun>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d1f8      	bne.n	8012bbe <__gethex+0x84>
 8012bcc:	9a01      	ldr	r2, [sp, #4]
 8012bce:	9903      	ldr	r1, [sp, #12]
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	f7ff f832 	bl	8011c3a <strncmp>
 8012bd6:	b950      	cbnz	r0, 8012bee <__gethex+0xb4>
 8012bd8:	b954      	cbnz	r4, 8012bf0 <__gethex+0xb6>
 8012bda:	9b01      	ldr	r3, [sp, #4]
 8012bdc:	18f4      	adds	r4, r6, r3
 8012bde:	4622      	mov	r2, r4
 8012be0:	4616      	mov	r6, r2
 8012be2:	3201      	adds	r2, #1
 8012be4:	7830      	ldrb	r0, [r6, #0]
 8012be6:	f7ff ff93 	bl	8012b10 <__hexdig_fun>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d1f8      	bne.n	8012be0 <__gethex+0xa6>
 8012bee:	b10c      	cbz	r4, 8012bf4 <__gethex+0xba>
 8012bf0:	1ba4      	subs	r4, r4, r6
 8012bf2:	00a4      	lsls	r4, r4, #2
 8012bf4:	7833      	ldrb	r3, [r6, #0]
 8012bf6:	2b50      	cmp	r3, #80	; 0x50
 8012bf8:	d001      	beq.n	8012bfe <__gethex+0xc4>
 8012bfa:	2b70      	cmp	r3, #112	; 0x70
 8012bfc:	d140      	bne.n	8012c80 <__gethex+0x146>
 8012bfe:	7873      	ldrb	r3, [r6, #1]
 8012c00:	2b2b      	cmp	r3, #43	; 0x2b
 8012c02:	d031      	beq.n	8012c68 <__gethex+0x12e>
 8012c04:	2b2d      	cmp	r3, #45	; 0x2d
 8012c06:	d033      	beq.n	8012c70 <__gethex+0x136>
 8012c08:	1c71      	adds	r1, r6, #1
 8012c0a:	f04f 0900 	mov.w	r9, #0
 8012c0e:	7808      	ldrb	r0, [r1, #0]
 8012c10:	f7ff ff7e 	bl	8012b10 <__hexdig_fun>
 8012c14:	1e43      	subs	r3, r0, #1
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b18      	cmp	r3, #24
 8012c1a:	d831      	bhi.n	8012c80 <__gethex+0x146>
 8012c1c:	f1a0 0210 	sub.w	r2, r0, #16
 8012c20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012c24:	f7ff ff74 	bl	8012b10 <__hexdig_fun>
 8012c28:	1e43      	subs	r3, r0, #1
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	2b18      	cmp	r3, #24
 8012c2e:	d922      	bls.n	8012c76 <__gethex+0x13c>
 8012c30:	f1b9 0f00 	cmp.w	r9, #0
 8012c34:	d000      	beq.n	8012c38 <__gethex+0xfe>
 8012c36:	4252      	negs	r2, r2
 8012c38:	4414      	add	r4, r2
 8012c3a:	f8ca 1000 	str.w	r1, [sl]
 8012c3e:	b30d      	cbz	r5, 8012c84 <__gethex+0x14a>
 8012c40:	f1bb 0f00 	cmp.w	fp, #0
 8012c44:	bf0c      	ite	eq
 8012c46:	2706      	moveq	r7, #6
 8012c48:	2700      	movne	r7, #0
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	b00b      	add	sp, #44	; 0x2c
 8012c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c52:	f10b 0b01 	add.w	fp, fp, #1
 8012c56:	e78a      	b.n	8012b6e <__gethex+0x34>
 8012c58:	2500      	movs	r5, #0
 8012c5a:	462c      	mov	r4, r5
 8012c5c:	e7ae      	b.n	8012bbc <__gethex+0x82>
 8012c5e:	463e      	mov	r6, r7
 8012c60:	2501      	movs	r5, #1
 8012c62:	e7c7      	b.n	8012bf4 <__gethex+0xba>
 8012c64:	4604      	mov	r4, r0
 8012c66:	e7fb      	b.n	8012c60 <__gethex+0x126>
 8012c68:	f04f 0900 	mov.w	r9, #0
 8012c6c:	1cb1      	adds	r1, r6, #2
 8012c6e:	e7ce      	b.n	8012c0e <__gethex+0xd4>
 8012c70:	f04f 0901 	mov.w	r9, #1
 8012c74:	e7fa      	b.n	8012c6c <__gethex+0x132>
 8012c76:	230a      	movs	r3, #10
 8012c78:	fb03 0202 	mla	r2, r3, r2, r0
 8012c7c:	3a10      	subs	r2, #16
 8012c7e:	e7cf      	b.n	8012c20 <__gethex+0xe6>
 8012c80:	4631      	mov	r1, r6
 8012c82:	e7da      	b.n	8012c3a <__gethex+0x100>
 8012c84:	1bf3      	subs	r3, r6, r7
 8012c86:	3b01      	subs	r3, #1
 8012c88:	4629      	mov	r1, r5
 8012c8a:	2b07      	cmp	r3, #7
 8012c8c:	dc49      	bgt.n	8012d22 <__gethex+0x1e8>
 8012c8e:	9802      	ldr	r0, [sp, #8]
 8012c90:	f000 fa40 	bl	8013114 <_Balloc>
 8012c94:	9b01      	ldr	r3, [sp, #4]
 8012c96:	f100 0914 	add.w	r9, r0, #20
 8012c9a:	f04f 0b00 	mov.w	fp, #0
 8012c9e:	f1c3 0301 	rsb	r3, r3, #1
 8012ca2:	4605      	mov	r5, r0
 8012ca4:	f8cd 9010 	str.w	r9, [sp, #16]
 8012ca8:	46da      	mov	sl, fp
 8012caa:	9308      	str	r3, [sp, #32]
 8012cac:	42b7      	cmp	r7, r6
 8012cae:	d33b      	bcc.n	8012d28 <__gethex+0x1ee>
 8012cb0:	9804      	ldr	r0, [sp, #16]
 8012cb2:	f840 ab04 	str.w	sl, [r0], #4
 8012cb6:	eba0 0009 	sub.w	r0, r0, r9
 8012cba:	1080      	asrs	r0, r0, #2
 8012cbc:	6128      	str	r0, [r5, #16]
 8012cbe:	0147      	lsls	r7, r0, #5
 8012cc0:	4650      	mov	r0, sl
 8012cc2:	f000 faeb 	bl	801329c <__hi0bits>
 8012cc6:	f8d8 6000 	ldr.w	r6, [r8]
 8012cca:	1a3f      	subs	r7, r7, r0
 8012ccc:	42b7      	cmp	r7, r6
 8012cce:	dd64      	ble.n	8012d9a <__gethex+0x260>
 8012cd0:	1bbf      	subs	r7, r7, r6
 8012cd2:	4639      	mov	r1, r7
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	f000 fdfb 	bl	80138d0 <__any_on>
 8012cda:	4682      	mov	sl, r0
 8012cdc:	b178      	cbz	r0, 8012cfe <__gethex+0x1c4>
 8012cde:	1e7b      	subs	r3, r7, #1
 8012ce0:	1159      	asrs	r1, r3, #5
 8012ce2:	f003 021f 	and.w	r2, r3, #31
 8012ce6:	f04f 0a01 	mov.w	sl, #1
 8012cea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012cee:	fa0a f202 	lsl.w	r2, sl, r2
 8012cf2:	420a      	tst	r2, r1
 8012cf4:	d003      	beq.n	8012cfe <__gethex+0x1c4>
 8012cf6:	4553      	cmp	r3, sl
 8012cf8:	dc46      	bgt.n	8012d88 <__gethex+0x24e>
 8012cfa:	f04f 0a02 	mov.w	sl, #2
 8012cfe:	4639      	mov	r1, r7
 8012d00:	4628      	mov	r0, r5
 8012d02:	f7ff fecb 	bl	8012a9c <rshift>
 8012d06:	443c      	add	r4, r7
 8012d08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d0c:	42a3      	cmp	r3, r4
 8012d0e:	da52      	bge.n	8012db6 <__gethex+0x27c>
 8012d10:	4629      	mov	r1, r5
 8012d12:	9802      	ldr	r0, [sp, #8]
 8012d14:	f000 fa32 	bl	801317c <_Bfree>
 8012d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	6013      	str	r3, [r2, #0]
 8012d1e:	27a3      	movs	r7, #163	; 0xa3
 8012d20:	e793      	b.n	8012c4a <__gethex+0x110>
 8012d22:	3101      	adds	r1, #1
 8012d24:	105b      	asrs	r3, r3, #1
 8012d26:	e7b0      	b.n	8012c8a <__gethex+0x150>
 8012d28:	1e73      	subs	r3, r6, #1
 8012d2a:	9305      	str	r3, [sp, #20]
 8012d2c:	9a07      	ldr	r2, [sp, #28]
 8012d2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d018      	beq.n	8012d68 <__gethex+0x22e>
 8012d36:	f1bb 0f20 	cmp.w	fp, #32
 8012d3a:	d107      	bne.n	8012d4c <__gethex+0x212>
 8012d3c:	9b04      	ldr	r3, [sp, #16]
 8012d3e:	f8c3 a000 	str.w	sl, [r3]
 8012d42:	3304      	adds	r3, #4
 8012d44:	f04f 0a00 	mov.w	sl, #0
 8012d48:	9304      	str	r3, [sp, #16]
 8012d4a:	46d3      	mov	fp, sl
 8012d4c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012d50:	f7ff fede 	bl	8012b10 <__hexdig_fun>
 8012d54:	f000 000f 	and.w	r0, r0, #15
 8012d58:	fa00 f00b 	lsl.w	r0, r0, fp
 8012d5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012d60:	f10b 0b04 	add.w	fp, fp, #4
 8012d64:	9b05      	ldr	r3, [sp, #20]
 8012d66:	e00d      	b.n	8012d84 <__gethex+0x24a>
 8012d68:	9b05      	ldr	r3, [sp, #20]
 8012d6a:	9a08      	ldr	r2, [sp, #32]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	42bb      	cmp	r3, r7
 8012d70:	d3e1      	bcc.n	8012d36 <__gethex+0x1fc>
 8012d72:	4618      	mov	r0, r3
 8012d74:	9a01      	ldr	r2, [sp, #4]
 8012d76:	9903      	ldr	r1, [sp, #12]
 8012d78:	9309      	str	r3, [sp, #36]	; 0x24
 8012d7a:	f7fe ff5e 	bl	8011c3a <strncmp>
 8012d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d1d8      	bne.n	8012d36 <__gethex+0x1fc>
 8012d84:	461e      	mov	r6, r3
 8012d86:	e791      	b.n	8012cac <__gethex+0x172>
 8012d88:	1eb9      	subs	r1, r7, #2
 8012d8a:	4628      	mov	r0, r5
 8012d8c:	f000 fda0 	bl	80138d0 <__any_on>
 8012d90:	2800      	cmp	r0, #0
 8012d92:	d0b2      	beq.n	8012cfa <__gethex+0x1c0>
 8012d94:	f04f 0a03 	mov.w	sl, #3
 8012d98:	e7b1      	b.n	8012cfe <__gethex+0x1c4>
 8012d9a:	da09      	bge.n	8012db0 <__gethex+0x276>
 8012d9c:	1bf7      	subs	r7, r6, r7
 8012d9e:	4629      	mov	r1, r5
 8012da0:	463a      	mov	r2, r7
 8012da2:	9802      	ldr	r0, [sp, #8]
 8012da4:	f000 fbb6 	bl	8013514 <__lshift>
 8012da8:	1be4      	subs	r4, r4, r7
 8012daa:	4605      	mov	r5, r0
 8012dac:	f100 0914 	add.w	r9, r0, #20
 8012db0:	f04f 0a00 	mov.w	sl, #0
 8012db4:	e7a8      	b.n	8012d08 <__gethex+0x1ce>
 8012db6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012dba:	42a0      	cmp	r0, r4
 8012dbc:	dd6a      	ble.n	8012e94 <__gethex+0x35a>
 8012dbe:	1b04      	subs	r4, r0, r4
 8012dc0:	42a6      	cmp	r6, r4
 8012dc2:	dc2e      	bgt.n	8012e22 <__gethex+0x2e8>
 8012dc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d022      	beq.n	8012e12 <__gethex+0x2d8>
 8012dcc:	2b03      	cmp	r3, #3
 8012dce:	d024      	beq.n	8012e1a <__gethex+0x2e0>
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d115      	bne.n	8012e00 <__gethex+0x2c6>
 8012dd4:	42a6      	cmp	r6, r4
 8012dd6:	d113      	bne.n	8012e00 <__gethex+0x2c6>
 8012dd8:	2e01      	cmp	r6, #1
 8012dda:	dc0b      	bgt.n	8012df4 <__gethex+0x2ba>
 8012ddc:	9a06      	ldr	r2, [sp, #24]
 8012dde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012de2:	6013      	str	r3, [r2, #0]
 8012de4:	2301      	movs	r3, #1
 8012de6:	612b      	str	r3, [r5, #16]
 8012de8:	f8c9 3000 	str.w	r3, [r9]
 8012dec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012dee:	2762      	movs	r7, #98	; 0x62
 8012df0:	601d      	str	r5, [r3, #0]
 8012df2:	e72a      	b.n	8012c4a <__gethex+0x110>
 8012df4:	1e71      	subs	r1, r6, #1
 8012df6:	4628      	mov	r0, r5
 8012df8:	f000 fd6a 	bl	80138d0 <__any_on>
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d1ed      	bne.n	8012ddc <__gethex+0x2a2>
 8012e00:	4629      	mov	r1, r5
 8012e02:	9802      	ldr	r0, [sp, #8]
 8012e04:	f000 f9ba 	bl	801317c <_Bfree>
 8012e08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	6013      	str	r3, [r2, #0]
 8012e0e:	2750      	movs	r7, #80	; 0x50
 8012e10:	e71b      	b.n	8012c4a <__gethex+0x110>
 8012e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d0e1      	beq.n	8012ddc <__gethex+0x2a2>
 8012e18:	e7f2      	b.n	8012e00 <__gethex+0x2c6>
 8012e1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d1dd      	bne.n	8012ddc <__gethex+0x2a2>
 8012e20:	e7ee      	b.n	8012e00 <__gethex+0x2c6>
 8012e22:	1e67      	subs	r7, r4, #1
 8012e24:	f1ba 0f00 	cmp.w	sl, #0
 8012e28:	d131      	bne.n	8012e8e <__gethex+0x354>
 8012e2a:	b127      	cbz	r7, 8012e36 <__gethex+0x2fc>
 8012e2c:	4639      	mov	r1, r7
 8012e2e:	4628      	mov	r0, r5
 8012e30:	f000 fd4e 	bl	80138d0 <__any_on>
 8012e34:	4682      	mov	sl, r0
 8012e36:	117a      	asrs	r2, r7, #5
 8012e38:	2301      	movs	r3, #1
 8012e3a:	f007 071f 	and.w	r7, r7, #31
 8012e3e:	fa03 f707 	lsl.w	r7, r3, r7
 8012e42:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8012e46:	4621      	mov	r1, r4
 8012e48:	421f      	tst	r7, r3
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	bf18      	it	ne
 8012e4e:	f04a 0a02 	orrne.w	sl, sl, #2
 8012e52:	1b36      	subs	r6, r6, r4
 8012e54:	f7ff fe22 	bl	8012a9c <rshift>
 8012e58:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012e5c:	2702      	movs	r7, #2
 8012e5e:	f1ba 0f00 	cmp.w	sl, #0
 8012e62:	d048      	beq.n	8012ef6 <__gethex+0x3bc>
 8012e64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012e68:	2b02      	cmp	r3, #2
 8012e6a:	d015      	beq.n	8012e98 <__gethex+0x35e>
 8012e6c:	2b03      	cmp	r3, #3
 8012e6e:	d017      	beq.n	8012ea0 <__gethex+0x366>
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d109      	bne.n	8012e88 <__gethex+0x34e>
 8012e74:	f01a 0f02 	tst.w	sl, #2
 8012e78:	d006      	beq.n	8012e88 <__gethex+0x34e>
 8012e7a:	f8d9 3000 	ldr.w	r3, [r9]
 8012e7e:	ea4a 0a03 	orr.w	sl, sl, r3
 8012e82:	f01a 0f01 	tst.w	sl, #1
 8012e86:	d10e      	bne.n	8012ea6 <__gethex+0x36c>
 8012e88:	f047 0710 	orr.w	r7, r7, #16
 8012e8c:	e033      	b.n	8012ef6 <__gethex+0x3bc>
 8012e8e:	f04f 0a01 	mov.w	sl, #1
 8012e92:	e7d0      	b.n	8012e36 <__gethex+0x2fc>
 8012e94:	2701      	movs	r7, #1
 8012e96:	e7e2      	b.n	8012e5e <__gethex+0x324>
 8012e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e9a:	f1c3 0301 	rsb	r3, r3, #1
 8012e9e:	9315      	str	r3, [sp, #84]	; 0x54
 8012ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d0f0      	beq.n	8012e88 <__gethex+0x34e>
 8012ea6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8012eaa:	f105 0314 	add.w	r3, r5, #20
 8012eae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012eb2:	eb03 010a 	add.w	r1, r3, sl
 8012eb6:	f04f 0c00 	mov.w	ip, #0
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ec0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012ec4:	d01c      	beq.n	8012f00 <__gethex+0x3c6>
 8012ec6:	3201      	adds	r2, #1
 8012ec8:	6002      	str	r2, [r0, #0]
 8012eca:	2f02      	cmp	r7, #2
 8012ecc:	f105 0314 	add.w	r3, r5, #20
 8012ed0:	d138      	bne.n	8012f44 <__gethex+0x40a>
 8012ed2:	f8d8 2000 	ldr.w	r2, [r8]
 8012ed6:	3a01      	subs	r2, #1
 8012ed8:	42b2      	cmp	r2, r6
 8012eda:	d10a      	bne.n	8012ef2 <__gethex+0x3b8>
 8012edc:	1171      	asrs	r1, r6, #5
 8012ede:	2201      	movs	r2, #1
 8012ee0:	f006 061f 	and.w	r6, r6, #31
 8012ee4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ee8:	fa02 f606 	lsl.w	r6, r2, r6
 8012eec:	421e      	tst	r6, r3
 8012eee:	bf18      	it	ne
 8012ef0:	4617      	movne	r7, r2
 8012ef2:	f047 0720 	orr.w	r7, r7, #32
 8012ef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ef8:	601d      	str	r5, [r3, #0]
 8012efa:	9b06      	ldr	r3, [sp, #24]
 8012efc:	601c      	str	r4, [r3, #0]
 8012efe:	e6a4      	b.n	8012c4a <__gethex+0x110>
 8012f00:	4299      	cmp	r1, r3
 8012f02:	f843 cc04 	str.w	ip, [r3, #-4]
 8012f06:	d8d8      	bhi.n	8012eba <__gethex+0x380>
 8012f08:	68ab      	ldr	r3, [r5, #8]
 8012f0a:	4599      	cmp	r9, r3
 8012f0c:	db12      	blt.n	8012f34 <__gethex+0x3fa>
 8012f0e:	6869      	ldr	r1, [r5, #4]
 8012f10:	9802      	ldr	r0, [sp, #8]
 8012f12:	3101      	adds	r1, #1
 8012f14:	f000 f8fe 	bl	8013114 <_Balloc>
 8012f18:	692a      	ldr	r2, [r5, #16]
 8012f1a:	3202      	adds	r2, #2
 8012f1c:	f105 010c 	add.w	r1, r5, #12
 8012f20:	4683      	mov	fp, r0
 8012f22:	0092      	lsls	r2, r2, #2
 8012f24:	300c      	adds	r0, #12
 8012f26:	f7fe fd1e 	bl	8011966 <memcpy>
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	9802      	ldr	r0, [sp, #8]
 8012f2e:	f000 f925 	bl	801317c <_Bfree>
 8012f32:	465d      	mov	r5, fp
 8012f34:	692b      	ldr	r3, [r5, #16]
 8012f36:	1c5a      	adds	r2, r3, #1
 8012f38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012f3c:	612a      	str	r2, [r5, #16]
 8012f3e:	2201      	movs	r2, #1
 8012f40:	615a      	str	r2, [r3, #20]
 8012f42:	e7c2      	b.n	8012eca <__gethex+0x390>
 8012f44:	692a      	ldr	r2, [r5, #16]
 8012f46:	454a      	cmp	r2, r9
 8012f48:	dd0b      	ble.n	8012f62 <__gethex+0x428>
 8012f4a:	2101      	movs	r1, #1
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	f7ff fda5 	bl	8012a9c <rshift>
 8012f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012f56:	3401      	adds	r4, #1
 8012f58:	42a3      	cmp	r3, r4
 8012f5a:	f6ff aed9 	blt.w	8012d10 <__gethex+0x1d6>
 8012f5e:	2701      	movs	r7, #1
 8012f60:	e7c7      	b.n	8012ef2 <__gethex+0x3b8>
 8012f62:	f016 061f 	ands.w	r6, r6, #31
 8012f66:	d0fa      	beq.n	8012f5e <__gethex+0x424>
 8012f68:	449a      	add	sl, r3
 8012f6a:	f1c6 0620 	rsb	r6, r6, #32
 8012f6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012f72:	f000 f993 	bl	801329c <__hi0bits>
 8012f76:	42b0      	cmp	r0, r6
 8012f78:	dbe7      	blt.n	8012f4a <__gethex+0x410>
 8012f7a:	e7f0      	b.n	8012f5e <__gethex+0x424>

08012f7c <L_shift>:
 8012f7c:	f1c2 0208 	rsb	r2, r2, #8
 8012f80:	0092      	lsls	r2, r2, #2
 8012f82:	b570      	push	{r4, r5, r6, lr}
 8012f84:	f1c2 0620 	rsb	r6, r2, #32
 8012f88:	6843      	ldr	r3, [r0, #4]
 8012f8a:	6804      	ldr	r4, [r0, #0]
 8012f8c:	fa03 f506 	lsl.w	r5, r3, r6
 8012f90:	432c      	orrs	r4, r5
 8012f92:	40d3      	lsrs	r3, r2
 8012f94:	6004      	str	r4, [r0, #0]
 8012f96:	f840 3f04 	str.w	r3, [r0, #4]!
 8012f9a:	4288      	cmp	r0, r1
 8012f9c:	d3f4      	bcc.n	8012f88 <L_shift+0xc>
 8012f9e:	bd70      	pop	{r4, r5, r6, pc}

08012fa0 <__match>:
 8012fa0:	b530      	push	{r4, r5, lr}
 8012fa2:	6803      	ldr	r3, [r0, #0]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012faa:	b914      	cbnz	r4, 8012fb2 <__match+0x12>
 8012fac:	6003      	str	r3, [r0, #0]
 8012fae:	2001      	movs	r0, #1
 8012fb0:	bd30      	pop	{r4, r5, pc}
 8012fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012fba:	2d19      	cmp	r5, #25
 8012fbc:	bf98      	it	ls
 8012fbe:	3220      	addls	r2, #32
 8012fc0:	42a2      	cmp	r2, r4
 8012fc2:	d0f0      	beq.n	8012fa6 <__match+0x6>
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	e7f3      	b.n	8012fb0 <__match+0x10>

08012fc8 <__hexnan>:
 8012fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	680b      	ldr	r3, [r1, #0]
 8012fce:	6801      	ldr	r1, [r0, #0]
 8012fd0:	115f      	asrs	r7, r3, #5
 8012fd2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012fd6:	f013 031f 	ands.w	r3, r3, #31
 8012fda:	b087      	sub	sp, #28
 8012fdc:	bf18      	it	ne
 8012fde:	3704      	addne	r7, #4
 8012fe0:	2500      	movs	r5, #0
 8012fe2:	1f3e      	subs	r6, r7, #4
 8012fe4:	4682      	mov	sl, r0
 8012fe6:	4690      	mov	r8, r2
 8012fe8:	9301      	str	r3, [sp, #4]
 8012fea:	f847 5c04 	str.w	r5, [r7, #-4]
 8012fee:	46b1      	mov	r9, r6
 8012ff0:	4634      	mov	r4, r6
 8012ff2:	9502      	str	r5, [sp, #8]
 8012ff4:	46ab      	mov	fp, r5
 8012ff6:	784a      	ldrb	r2, [r1, #1]
 8012ff8:	1c4b      	adds	r3, r1, #1
 8012ffa:	9303      	str	r3, [sp, #12]
 8012ffc:	b342      	cbz	r2, 8013050 <__hexnan+0x88>
 8012ffe:	4610      	mov	r0, r2
 8013000:	9105      	str	r1, [sp, #20]
 8013002:	9204      	str	r2, [sp, #16]
 8013004:	f7ff fd84 	bl	8012b10 <__hexdig_fun>
 8013008:	2800      	cmp	r0, #0
 801300a:	d143      	bne.n	8013094 <__hexnan+0xcc>
 801300c:	9a04      	ldr	r2, [sp, #16]
 801300e:	9905      	ldr	r1, [sp, #20]
 8013010:	2a20      	cmp	r2, #32
 8013012:	d818      	bhi.n	8013046 <__hexnan+0x7e>
 8013014:	9b02      	ldr	r3, [sp, #8]
 8013016:	459b      	cmp	fp, r3
 8013018:	dd13      	ble.n	8013042 <__hexnan+0x7a>
 801301a:	454c      	cmp	r4, r9
 801301c:	d206      	bcs.n	801302c <__hexnan+0x64>
 801301e:	2d07      	cmp	r5, #7
 8013020:	dc04      	bgt.n	801302c <__hexnan+0x64>
 8013022:	462a      	mov	r2, r5
 8013024:	4649      	mov	r1, r9
 8013026:	4620      	mov	r0, r4
 8013028:	f7ff ffa8 	bl	8012f7c <L_shift>
 801302c:	4544      	cmp	r4, r8
 801302e:	d944      	bls.n	80130ba <__hexnan+0xf2>
 8013030:	2300      	movs	r3, #0
 8013032:	f1a4 0904 	sub.w	r9, r4, #4
 8013036:	f844 3c04 	str.w	r3, [r4, #-4]
 801303a:	f8cd b008 	str.w	fp, [sp, #8]
 801303e:	464c      	mov	r4, r9
 8013040:	461d      	mov	r5, r3
 8013042:	9903      	ldr	r1, [sp, #12]
 8013044:	e7d7      	b.n	8012ff6 <__hexnan+0x2e>
 8013046:	2a29      	cmp	r2, #41	; 0x29
 8013048:	d14a      	bne.n	80130e0 <__hexnan+0x118>
 801304a:	3102      	adds	r1, #2
 801304c:	f8ca 1000 	str.w	r1, [sl]
 8013050:	f1bb 0f00 	cmp.w	fp, #0
 8013054:	d044      	beq.n	80130e0 <__hexnan+0x118>
 8013056:	454c      	cmp	r4, r9
 8013058:	d206      	bcs.n	8013068 <__hexnan+0xa0>
 801305a:	2d07      	cmp	r5, #7
 801305c:	dc04      	bgt.n	8013068 <__hexnan+0xa0>
 801305e:	462a      	mov	r2, r5
 8013060:	4649      	mov	r1, r9
 8013062:	4620      	mov	r0, r4
 8013064:	f7ff ff8a 	bl	8012f7c <L_shift>
 8013068:	4544      	cmp	r4, r8
 801306a:	d928      	bls.n	80130be <__hexnan+0xf6>
 801306c:	4643      	mov	r3, r8
 801306e:	f854 2b04 	ldr.w	r2, [r4], #4
 8013072:	f843 2b04 	str.w	r2, [r3], #4
 8013076:	42a6      	cmp	r6, r4
 8013078:	d2f9      	bcs.n	801306e <__hexnan+0xa6>
 801307a:	2200      	movs	r2, #0
 801307c:	f843 2b04 	str.w	r2, [r3], #4
 8013080:	429e      	cmp	r6, r3
 8013082:	d2fb      	bcs.n	801307c <__hexnan+0xb4>
 8013084:	6833      	ldr	r3, [r6, #0]
 8013086:	b91b      	cbnz	r3, 8013090 <__hexnan+0xc8>
 8013088:	4546      	cmp	r6, r8
 801308a:	d127      	bne.n	80130dc <__hexnan+0x114>
 801308c:	2301      	movs	r3, #1
 801308e:	6033      	str	r3, [r6, #0]
 8013090:	2005      	movs	r0, #5
 8013092:	e026      	b.n	80130e2 <__hexnan+0x11a>
 8013094:	3501      	adds	r5, #1
 8013096:	2d08      	cmp	r5, #8
 8013098:	f10b 0b01 	add.w	fp, fp, #1
 801309c:	dd06      	ble.n	80130ac <__hexnan+0xe4>
 801309e:	4544      	cmp	r4, r8
 80130a0:	d9cf      	bls.n	8013042 <__hexnan+0x7a>
 80130a2:	2300      	movs	r3, #0
 80130a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80130a8:	2501      	movs	r5, #1
 80130aa:	3c04      	subs	r4, #4
 80130ac:	6822      	ldr	r2, [r4, #0]
 80130ae:	f000 000f 	and.w	r0, r0, #15
 80130b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80130b6:	6020      	str	r0, [r4, #0]
 80130b8:	e7c3      	b.n	8013042 <__hexnan+0x7a>
 80130ba:	2508      	movs	r5, #8
 80130bc:	e7c1      	b.n	8013042 <__hexnan+0x7a>
 80130be:	9b01      	ldr	r3, [sp, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d0df      	beq.n	8013084 <__hexnan+0xbc>
 80130c4:	f04f 32ff 	mov.w	r2, #4294967295
 80130c8:	f1c3 0320 	rsb	r3, r3, #32
 80130cc:	fa22 f303 	lsr.w	r3, r2, r3
 80130d0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80130d4:	401a      	ands	r2, r3
 80130d6:	f847 2c04 	str.w	r2, [r7, #-4]
 80130da:	e7d3      	b.n	8013084 <__hexnan+0xbc>
 80130dc:	3e04      	subs	r6, #4
 80130de:	e7d1      	b.n	8013084 <__hexnan+0xbc>
 80130e0:	2004      	movs	r0, #4
 80130e2:	b007      	add	sp, #28
 80130e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080130e8 <__localeconv_l>:
 80130e8:	30f0      	adds	r0, #240	; 0xf0
 80130ea:	4770      	bx	lr

080130ec <_lseek_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4c07      	ldr	r4, [pc, #28]	; (801310c <_lseek_r+0x20>)
 80130f0:	4605      	mov	r5, r0
 80130f2:	4608      	mov	r0, r1
 80130f4:	4611      	mov	r1, r2
 80130f6:	2200      	movs	r2, #0
 80130f8:	6022      	str	r2, [r4, #0]
 80130fa:	461a      	mov	r2, r3
 80130fc:	f7ef ff68 	bl	8002fd0 <_lseek>
 8013100:	1c43      	adds	r3, r0, #1
 8013102:	d102      	bne.n	801310a <_lseek_r+0x1e>
 8013104:	6823      	ldr	r3, [r4, #0]
 8013106:	b103      	cbz	r3, 801310a <_lseek_r+0x1e>
 8013108:	602b      	str	r3, [r5, #0]
 801310a:	bd38      	pop	{r3, r4, r5, pc}
 801310c:	20006fcc 	.word	0x20006fcc

08013110 <__malloc_lock>:
 8013110:	4770      	bx	lr

08013112 <__malloc_unlock>:
 8013112:	4770      	bx	lr

08013114 <_Balloc>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013118:	4604      	mov	r4, r0
 801311a:	460e      	mov	r6, r1
 801311c:	b93d      	cbnz	r5, 801312e <_Balloc+0x1a>
 801311e:	2010      	movs	r0, #16
 8013120:	f7fe fbf0 	bl	8011904 <malloc>
 8013124:	6260      	str	r0, [r4, #36]	; 0x24
 8013126:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801312a:	6005      	str	r5, [r0, #0]
 801312c:	60c5      	str	r5, [r0, #12]
 801312e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013130:	68eb      	ldr	r3, [r5, #12]
 8013132:	b183      	cbz	r3, 8013156 <_Balloc+0x42>
 8013134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801313c:	b9b8      	cbnz	r0, 801316e <_Balloc+0x5a>
 801313e:	2101      	movs	r1, #1
 8013140:	fa01 f506 	lsl.w	r5, r1, r6
 8013144:	1d6a      	adds	r2, r5, #5
 8013146:	0092      	lsls	r2, r2, #2
 8013148:	4620      	mov	r0, r4
 801314a:	f000 fbe2 	bl	8013912 <_calloc_r>
 801314e:	b160      	cbz	r0, 801316a <_Balloc+0x56>
 8013150:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013154:	e00e      	b.n	8013174 <_Balloc+0x60>
 8013156:	2221      	movs	r2, #33	; 0x21
 8013158:	2104      	movs	r1, #4
 801315a:	4620      	mov	r0, r4
 801315c:	f000 fbd9 	bl	8013912 <_calloc_r>
 8013160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013162:	60e8      	str	r0, [r5, #12]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d1e4      	bne.n	8013134 <_Balloc+0x20>
 801316a:	2000      	movs	r0, #0
 801316c:	bd70      	pop	{r4, r5, r6, pc}
 801316e:	6802      	ldr	r2, [r0, #0]
 8013170:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013174:	2300      	movs	r3, #0
 8013176:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801317a:	e7f7      	b.n	801316c <_Balloc+0x58>

0801317c <_Bfree>:
 801317c:	b570      	push	{r4, r5, r6, lr}
 801317e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013180:	4606      	mov	r6, r0
 8013182:	460d      	mov	r5, r1
 8013184:	b93c      	cbnz	r4, 8013196 <_Bfree+0x1a>
 8013186:	2010      	movs	r0, #16
 8013188:	f7fe fbbc 	bl	8011904 <malloc>
 801318c:	6270      	str	r0, [r6, #36]	; 0x24
 801318e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013192:	6004      	str	r4, [r0, #0]
 8013194:	60c4      	str	r4, [r0, #12]
 8013196:	b13d      	cbz	r5, 80131a8 <_Bfree+0x2c>
 8013198:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801319a:	686a      	ldr	r2, [r5, #4]
 801319c:	68db      	ldr	r3, [r3, #12]
 801319e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80131a2:	6029      	str	r1, [r5, #0]
 80131a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80131a8:	bd70      	pop	{r4, r5, r6, pc}

080131aa <__multadd>:
 80131aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ae:	690d      	ldr	r5, [r1, #16]
 80131b0:	461f      	mov	r7, r3
 80131b2:	4606      	mov	r6, r0
 80131b4:	460c      	mov	r4, r1
 80131b6:	f101 0c14 	add.w	ip, r1, #20
 80131ba:	2300      	movs	r3, #0
 80131bc:	f8dc 0000 	ldr.w	r0, [ip]
 80131c0:	b281      	uxth	r1, r0
 80131c2:	fb02 7101 	mla	r1, r2, r1, r7
 80131c6:	0c0f      	lsrs	r7, r1, #16
 80131c8:	0c00      	lsrs	r0, r0, #16
 80131ca:	fb02 7000 	mla	r0, r2, r0, r7
 80131ce:	b289      	uxth	r1, r1
 80131d0:	3301      	adds	r3, #1
 80131d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80131d6:	429d      	cmp	r5, r3
 80131d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80131dc:	f84c 1b04 	str.w	r1, [ip], #4
 80131e0:	dcec      	bgt.n	80131bc <__multadd+0x12>
 80131e2:	b1d7      	cbz	r7, 801321a <__multadd+0x70>
 80131e4:	68a3      	ldr	r3, [r4, #8]
 80131e6:	42ab      	cmp	r3, r5
 80131e8:	dc12      	bgt.n	8013210 <__multadd+0x66>
 80131ea:	6861      	ldr	r1, [r4, #4]
 80131ec:	4630      	mov	r0, r6
 80131ee:	3101      	adds	r1, #1
 80131f0:	f7ff ff90 	bl	8013114 <_Balloc>
 80131f4:	6922      	ldr	r2, [r4, #16]
 80131f6:	3202      	adds	r2, #2
 80131f8:	f104 010c 	add.w	r1, r4, #12
 80131fc:	4680      	mov	r8, r0
 80131fe:	0092      	lsls	r2, r2, #2
 8013200:	300c      	adds	r0, #12
 8013202:	f7fe fbb0 	bl	8011966 <memcpy>
 8013206:	4621      	mov	r1, r4
 8013208:	4630      	mov	r0, r6
 801320a:	f7ff ffb7 	bl	801317c <_Bfree>
 801320e:	4644      	mov	r4, r8
 8013210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013214:	3501      	adds	r5, #1
 8013216:	615f      	str	r7, [r3, #20]
 8013218:	6125      	str	r5, [r4, #16]
 801321a:	4620      	mov	r0, r4
 801321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013220 <__s2b>:
 8013220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013224:	460c      	mov	r4, r1
 8013226:	4615      	mov	r5, r2
 8013228:	461f      	mov	r7, r3
 801322a:	2209      	movs	r2, #9
 801322c:	3308      	adds	r3, #8
 801322e:	4606      	mov	r6, r0
 8013230:	fb93 f3f2 	sdiv	r3, r3, r2
 8013234:	2100      	movs	r1, #0
 8013236:	2201      	movs	r2, #1
 8013238:	429a      	cmp	r2, r3
 801323a:	db20      	blt.n	801327e <__s2b+0x5e>
 801323c:	4630      	mov	r0, r6
 801323e:	f7ff ff69 	bl	8013114 <_Balloc>
 8013242:	9b08      	ldr	r3, [sp, #32]
 8013244:	6143      	str	r3, [r0, #20]
 8013246:	2d09      	cmp	r5, #9
 8013248:	f04f 0301 	mov.w	r3, #1
 801324c:	6103      	str	r3, [r0, #16]
 801324e:	dd19      	ble.n	8013284 <__s2b+0x64>
 8013250:	f104 0809 	add.w	r8, r4, #9
 8013254:	46c1      	mov	r9, r8
 8013256:	442c      	add	r4, r5
 8013258:	f819 3b01 	ldrb.w	r3, [r9], #1
 801325c:	4601      	mov	r1, r0
 801325e:	3b30      	subs	r3, #48	; 0x30
 8013260:	220a      	movs	r2, #10
 8013262:	4630      	mov	r0, r6
 8013264:	f7ff ffa1 	bl	80131aa <__multadd>
 8013268:	45a1      	cmp	r9, r4
 801326a:	d1f5      	bne.n	8013258 <__s2b+0x38>
 801326c:	eb08 0405 	add.w	r4, r8, r5
 8013270:	3c08      	subs	r4, #8
 8013272:	1b2d      	subs	r5, r5, r4
 8013274:	1963      	adds	r3, r4, r5
 8013276:	42bb      	cmp	r3, r7
 8013278:	db07      	blt.n	801328a <__s2b+0x6a>
 801327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801327e:	0052      	lsls	r2, r2, #1
 8013280:	3101      	adds	r1, #1
 8013282:	e7d9      	b.n	8013238 <__s2b+0x18>
 8013284:	340a      	adds	r4, #10
 8013286:	2509      	movs	r5, #9
 8013288:	e7f3      	b.n	8013272 <__s2b+0x52>
 801328a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801328e:	4601      	mov	r1, r0
 8013290:	3b30      	subs	r3, #48	; 0x30
 8013292:	220a      	movs	r2, #10
 8013294:	4630      	mov	r0, r6
 8013296:	f7ff ff88 	bl	80131aa <__multadd>
 801329a:	e7eb      	b.n	8013274 <__s2b+0x54>

0801329c <__hi0bits>:
 801329c:	0c02      	lsrs	r2, r0, #16
 801329e:	0412      	lsls	r2, r2, #16
 80132a0:	4603      	mov	r3, r0
 80132a2:	b9b2      	cbnz	r2, 80132d2 <__hi0bits+0x36>
 80132a4:	0403      	lsls	r3, r0, #16
 80132a6:	2010      	movs	r0, #16
 80132a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80132ac:	bf04      	itt	eq
 80132ae:	021b      	lsleq	r3, r3, #8
 80132b0:	3008      	addeq	r0, #8
 80132b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80132b6:	bf04      	itt	eq
 80132b8:	011b      	lsleq	r3, r3, #4
 80132ba:	3004      	addeq	r0, #4
 80132bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80132c0:	bf04      	itt	eq
 80132c2:	009b      	lsleq	r3, r3, #2
 80132c4:	3002      	addeq	r0, #2
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	db06      	blt.n	80132d8 <__hi0bits+0x3c>
 80132ca:	005b      	lsls	r3, r3, #1
 80132cc:	d503      	bpl.n	80132d6 <__hi0bits+0x3a>
 80132ce:	3001      	adds	r0, #1
 80132d0:	4770      	bx	lr
 80132d2:	2000      	movs	r0, #0
 80132d4:	e7e8      	b.n	80132a8 <__hi0bits+0xc>
 80132d6:	2020      	movs	r0, #32
 80132d8:	4770      	bx	lr

080132da <__lo0bits>:
 80132da:	6803      	ldr	r3, [r0, #0]
 80132dc:	f013 0207 	ands.w	r2, r3, #7
 80132e0:	4601      	mov	r1, r0
 80132e2:	d00b      	beq.n	80132fc <__lo0bits+0x22>
 80132e4:	07da      	lsls	r2, r3, #31
 80132e6:	d423      	bmi.n	8013330 <__lo0bits+0x56>
 80132e8:	0798      	lsls	r0, r3, #30
 80132ea:	bf49      	itett	mi
 80132ec:	085b      	lsrmi	r3, r3, #1
 80132ee:	089b      	lsrpl	r3, r3, #2
 80132f0:	2001      	movmi	r0, #1
 80132f2:	600b      	strmi	r3, [r1, #0]
 80132f4:	bf5c      	itt	pl
 80132f6:	600b      	strpl	r3, [r1, #0]
 80132f8:	2002      	movpl	r0, #2
 80132fa:	4770      	bx	lr
 80132fc:	b298      	uxth	r0, r3
 80132fe:	b9a8      	cbnz	r0, 801332c <__lo0bits+0x52>
 8013300:	0c1b      	lsrs	r3, r3, #16
 8013302:	2010      	movs	r0, #16
 8013304:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013308:	bf04      	itt	eq
 801330a:	0a1b      	lsreq	r3, r3, #8
 801330c:	3008      	addeq	r0, #8
 801330e:	071a      	lsls	r2, r3, #28
 8013310:	bf04      	itt	eq
 8013312:	091b      	lsreq	r3, r3, #4
 8013314:	3004      	addeq	r0, #4
 8013316:	079a      	lsls	r2, r3, #30
 8013318:	bf04      	itt	eq
 801331a:	089b      	lsreq	r3, r3, #2
 801331c:	3002      	addeq	r0, #2
 801331e:	07da      	lsls	r2, r3, #31
 8013320:	d402      	bmi.n	8013328 <__lo0bits+0x4e>
 8013322:	085b      	lsrs	r3, r3, #1
 8013324:	d006      	beq.n	8013334 <__lo0bits+0x5a>
 8013326:	3001      	adds	r0, #1
 8013328:	600b      	str	r3, [r1, #0]
 801332a:	4770      	bx	lr
 801332c:	4610      	mov	r0, r2
 801332e:	e7e9      	b.n	8013304 <__lo0bits+0x2a>
 8013330:	2000      	movs	r0, #0
 8013332:	4770      	bx	lr
 8013334:	2020      	movs	r0, #32
 8013336:	4770      	bx	lr

08013338 <__i2b>:
 8013338:	b510      	push	{r4, lr}
 801333a:	460c      	mov	r4, r1
 801333c:	2101      	movs	r1, #1
 801333e:	f7ff fee9 	bl	8013114 <_Balloc>
 8013342:	2201      	movs	r2, #1
 8013344:	6144      	str	r4, [r0, #20]
 8013346:	6102      	str	r2, [r0, #16]
 8013348:	bd10      	pop	{r4, pc}

0801334a <__multiply>:
 801334a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334e:	4614      	mov	r4, r2
 8013350:	690a      	ldr	r2, [r1, #16]
 8013352:	6923      	ldr	r3, [r4, #16]
 8013354:	429a      	cmp	r2, r3
 8013356:	bfb8      	it	lt
 8013358:	460b      	movlt	r3, r1
 801335a:	4688      	mov	r8, r1
 801335c:	bfbc      	itt	lt
 801335e:	46a0      	movlt	r8, r4
 8013360:	461c      	movlt	r4, r3
 8013362:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013366:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801336a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801336e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013372:	eb07 0609 	add.w	r6, r7, r9
 8013376:	42b3      	cmp	r3, r6
 8013378:	bfb8      	it	lt
 801337a:	3101      	addlt	r1, #1
 801337c:	f7ff feca 	bl	8013114 <_Balloc>
 8013380:	f100 0514 	add.w	r5, r0, #20
 8013384:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013388:	462b      	mov	r3, r5
 801338a:	2200      	movs	r2, #0
 801338c:	4573      	cmp	r3, lr
 801338e:	d316      	bcc.n	80133be <__multiply+0x74>
 8013390:	f104 0214 	add.w	r2, r4, #20
 8013394:	f108 0114 	add.w	r1, r8, #20
 8013398:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801339c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	9b00      	ldr	r3, [sp, #0]
 80133a4:	9201      	str	r2, [sp, #4]
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d80c      	bhi.n	80133c4 <__multiply+0x7a>
 80133aa:	2e00      	cmp	r6, #0
 80133ac:	dd03      	ble.n	80133b6 <__multiply+0x6c>
 80133ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d05d      	beq.n	8013472 <__multiply+0x128>
 80133b6:	6106      	str	r6, [r0, #16]
 80133b8:	b003      	add	sp, #12
 80133ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133be:	f843 2b04 	str.w	r2, [r3], #4
 80133c2:	e7e3      	b.n	801338c <__multiply+0x42>
 80133c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80133c8:	f1bb 0f00 	cmp.w	fp, #0
 80133cc:	d023      	beq.n	8013416 <__multiply+0xcc>
 80133ce:	4689      	mov	r9, r1
 80133d0:	46ac      	mov	ip, r5
 80133d2:	f04f 0800 	mov.w	r8, #0
 80133d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80133da:	f8dc a000 	ldr.w	sl, [ip]
 80133de:	b2a3      	uxth	r3, r4
 80133e0:	fa1f fa8a 	uxth.w	sl, sl
 80133e4:	fb0b a303 	mla	r3, fp, r3, sl
 80133e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80133ec:	f8dc 4000 	ldr.w	r4, [ip]
 80133f0:	4443      	add	r3, r8
 80133f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80133fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80133fe:	46e2      	mov	sl, ip
 8013400:	b29b      	uxth	r3, r3
 8013402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013406:	454f      	cmp	r7, r9
 8013408:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801340c:	f84a 3b04 	str.w	r3, [sl], #4
 8013410:	d82b      	bhi.n	801346a <__multiply+0x120>
 8013412:	f8cc 8004 	str.w	r8, [ip, #4]
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801341c:	3204      	adds	r2, #4
 801341e:	f1ba 0f00 	cmp.w	sl, #0
 8013422:	d020      	beq.n	8013466 <__multiply+0x11c>
 8013424:	682b      	ldr	r3, [r5, #0]
 8013426:	4689      	mov	r9, r1
 8013428:	46a8      	mov	r8, r5
 801342a:	f04f 0b00 	mov.w	fp, #0
 801342e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013432:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013436:	fb0a 440c 	mla	r4, sl, ip, r4
 801343a:	445c      	add	r4, fp
 801343c:	46c4      	mov	ip, r8
 801343e:	b29b      	uxth	r3, r3
 8013440:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013444:	f84c 3b04 	str.w	r3, [ip], #4
 8013448:	f859 3b04 	ldr.w	r3, [r9], #4
 801344c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013450:	0c1b      	lsrs	r3, r3, #16
 8013452:	fb0a b303 	mla	r3, sl, r3, fp
 8013456:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801345a:	454f      	cmp	r7, r9
 801345c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013460:	d805      	bhi.n	801346e <__multiply+0x124>
 8013462:	f8c8 3004 	str.w	r3, [r8, #4]
 8013466:	3504      	adds	r5, #4
 8013468:	e79b      	b.n	80133a2 <__multiply+0x58>
 801346a:	46d4      	mov	ip, sl
 801346c:	e7b3      	b.n	80133d6 <__multiply+0x8c>
 801346e:	46e0      	mov	r8, ip
 8013470:	e7dd      	b.n	801342e <__multiply+0xe4>
 8013472:	3e01      	subs	r6, #1
 8013474:	e799      	b.n	80133aa <__multiply+0x60>
	...

08013478 <__pow5mult>:
 8013478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801347c:	4615      	mov	r5, r2
 801347e:	f012 0203 	ands.w	r2, r2, #3
 8013482:	4606      	mov	r6, r0
 8013484:	460f      	mov	r7, r1
 8013486:	d007      	beq.n	8013498 <__pow5mult+0x20>
 8013488:	3a01      	subs	r2, #1
 801348a:	4c21      	ldr	r4, [pc, #132]	; (8013510 <__pow5mult+0x98>)
 801348c:	2300      	movs	r3, #0
 801348e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013492:	f7ff fe8a 	bl	80131aa <__multadd>
 8013496:	4607      	mov	r7, r0
 8013498:	10ad      	asrs	r5, r5, #2
 801349a:	d035      	beq.n	8013508 <__pow5mult+0x90>
 801349c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801349e:	b93c      	cbnz	r4, 80134b0 <__pow5mult+0x38>
 80134a0:	2010      	movs	r0, #16
 80134a2:	f7fe fa2f 	bl	8011904 <malloc>
 80134a6:	6270      	str	r0, [r6, #36]	; 0x24
 80134a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80134ac:	6004      	str	r4, [r0, #0]
 80134ae:	60c4      	str	r4, [r0, #12]
 80134b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80134b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80134b8:	b94c      	cbnz	r4, 80134ce <__pow5mult+0x56>
 80134ba:	f240 2171 	movw	r1, #625	; 0x271
 80134be:	4630      	mov	r0, r6
 80134c0:	f7ff ff3a 	bl	8013338 <__i2b>
 80134c4:	2300      	movs	r3, #0
 80134c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80134ca:	4604      	mov	r4, r0
 80134cc:	6003      	str	r3, [r0, #0]
 80134ce:	f04f 0800 	mov.w	r8, #0
 80134d2:	07eb      	lsls	r3, r5, #31
 80134d4:	d50a      	bpl.n	80134ec <__pow5mult+0x74>
 80134d6:	4639      	mov	r1, r7
 80134d8:	4622      	mov	r2, r4
 80134da:	4630      	mov	r0, r6
 80134dc:	f7ff ff35 	bl	801334a <__multiply>
 80134e0:	4639      	mov	r1, r7
 80134e2:	4681      	mov	r9, r0
 80134e4:	4630      	mov	r0, r6
 80134e6:	f7ff fe49 	bl	801317c <_Bfree>
 80134ea:	464f      	mov	r7, r9
 80134ec:	106d      	asrs	r5, r5, #1
 80134ee:	d00b      	beq.n	8013508 <__pow5mult+0x90>
 80134f0:	6820      	ldr	r0, [r4, #0]
 80134f2:	b938      	cbnz	r0, 8013504 <__pow5mult+0x8c>
 80134f4:	4622      	mov	r2, r4
 80134f6:	4621      	mov	r1, r4
 80134f8:	4630      	mov	r0, r6
 80134fa:	f7ff ff26 	bl	801334a <__multiply>
 80134fe:	6020      	str	r0, [r4, #0]
 8013500:	f8c0 8000 	str.w	r8, [r0]
 8013504:	4604      	mov	r4, r0
 8013506:	e7e4      	b.n	80134d2 <__pow5mult+0x5a>
 8013508:	4638      	mov	r0, r7
 801350a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801350e:	bf00      	nop
 8013510:	080171e0 	.word	0x080171e0

08013514 <__lshift>:
 8013514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013518:	460c      	mov	r4, r1
 801351a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801351e:	6923      	ldr	r3, [r4, #16]
 8013520:	6849      	ldr	r1, [r1, #4]
 8013522:	eb0a 0903 	add.w	r9, sl, r3
 8013526:	68a3      	ldr	r3, [r4, #8]
 8013528:	4607      	mov	r7, r0
 801352a:	4616      	mov	r6, r2
 801352c:	f109 0501 	add.w	r5, r9, #1
 8013530:	42ab      	cmp	r3, r5
 8013532:	db32      	blt.n	801359a <__lshift+0x86>
 8013534:	4638      	mov	r0, r7
 8013536:	f7ff fded 	bl	8013114 <_Balloc>
 801353a:	2300      	movs	r3, #0
 801353c:	4680      	mov	r8, r0
 801353e:	f100 0114 	add.w	r1, r0, #20
 8013542:	461a      	mov	r2, r3
 8013544:	4553      	cmp	r3, sl
 8013546:	db2b      	blt.n	80135a0 <__lshift+0x8c>
 8013548:	6920      	ldr	r0, [r4, #16]
 801354a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801354e:	f104 0314 	add.w	r3, r4, #20
 8013552:	f016 021f 	ands.w	r2, r6, #31
 8013556:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801355a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801355e:	d025      	beq.n	80135ac <__lshift+0x98>
 8013560:	f1c2 0e20 	rsb	lr, r2, #32
 8013564:	2000      	movs	r0, #0
 8013566:	681e      	ldr	r6, [r3, #0]
 8013568:	468a      	mov	sl, r1
 801356a:	4096      	lsls	r6, r2
 801356c:	4330      	orrs	r0, r6
 801356e:	f84a 0b04 	str.w	r0, [sl], #4
 8013572:	f853 0b04 	ldr.w	r0, [r3], #4
 8013576:	459c      	cmp	ip, r3
 8013578:	fa20 f00e 	lsr.w	r0, r0, lr
 801357c:	d814      	bhi.n	80135a8 <__lshift+0x94>
 801357e:	6048      	str	r0, [r1, #4]
 8013580:	b108      	cbz	r0, 8013586 <__lshift+0x72>
 8013582:	f109 0502 	add.w	r5, r9, #2
 8013586:	3d01      	subs	r5, #1
 8013588:	4638      	mov	r0, r7
 801358a:	f8c8 5010 	str.w	r5, [r8, #16]
 801358e:	4621      	mov	r1, r4
 8013590:	f7ff fdf4 	bl	801317c <_Bfree>
 8013594:	4640      	mov	r0, r8
 8013596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801359a:	3101      	adds	r1, #1
 801359c:	005b      	lsls	r3, r3, #1
 801359e:	e7c7      	b.n	8013530 <__lshift+0x1c>
 80135a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80135a4:	3301      	adds	r3, #1
 80135a6:	e7cd      	b.n	8013544 <__lshift+0x30>
 80135a8:	4651      	mov	r1, sl
 80135aa:	e7dc      	b.n	8013566 <__lshift+0x52>
 80135ac:	3904      	subs	r1, #4
 80135ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80135b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80135b6:	459c      	cmp	ip, r3
 80135b8:	d8f9      	bhi.n	80135ae <__lshift+0x9a>
 80135ba:	e7e4      	b.n	8013586 <__lshift+0x72>

080135bc <__mcmp>:
 80135bc:	6903      	ldr	r3, [r0, #16]
 80135be:	690a      	ldr	r2, [r1, #16]
 80135c0:	1a9b      	subs	r3, r3, r2
 80135c2:	b530      	push	{r4, r5, lr}
 80135c4:	d10c      	bne.n	80135e0 <__mcmp+0x24>
 80135c6:	0092      	lsls	r2, r2, #2
 80135c8:	3014      	adds	r0, #20
 80135ca:	3114      	adds	r1, #20
 80135cc:	1884      	adds	r4, r0, r2
 80135ce:	4411      	add	r1, r2
 80135d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80135d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80135d8:	4295      	cmp	r5, r2
 80135da:	d003      	beq.n	80135e4 <__mcmp+0x28>
 80135dc:	d305      	bcc.n	80135ea <__mcmp+0x2e>
 80135de:	2301      	movs	r3, #1
 80135e0:	4618      	mov	r0, r3
 80135e2:	bd30      	pop	{r4, r5, pc}
 80135e4:	42a0      	cmp	r0, r4
 80135e6:	d3f3      	bcc.n	80135d0 <__mcmp+0x14>
 80135e8:	e7fa      	b.n	80135e0 <__mcmp+0x24>
 80135ea:	f04f 33ff 	mov.w	r3, #4294967295
 80135ee:	e7f7      	b.n	80135e0 <__mcmp+0x24>

080135f0 <__mdiff>:
 80135f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135f4:	460d      	mov	r5, r1
 80135f6:	4607      	mov	r7, r0
 80135f8:	4611      	mov	r1, r2
 80135fa:	4628      	mov	r0, r5
 80135fc:	4614      	mov	r4, r2
 80135fe:	f7ff ffdd 	bl	80135bc <__mcmp>
 8013602:	1e06      	subs	r6, r0, #0
 8013604:	d108      	bne.n	8013618 <__mdiff+0x28>
 8013606:	4631      	mov	r1, r6
 8013608:	4638      	mov	r0, r7
 801360a:	f7ff fd83 	bl	8013114 <_Balloc>
 801360e:	2301      	movs	r3, #1
 8013610:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013618:	bfa4      	itt	ge
 801361a:	4623      	movge	r3, r4
 801361c:	462c      	movge	r4, r5
 801361e:	4638      	mov	r0, r7
 8013620:	6861      	ldr	r1, [r4, #4]
 8013622:	bfa6      	itte	ge
 8013624:	461d      	movge	r5, r3
 8013626:	2600      	movge	r6, #0
 8013628:	2601      	movlt	r6, #1
 801362a:	f7ff fd73 	bl	8013114 <_Balloc>
 801362e:	692b      	ldr	r3, [r5, #16]
 8013630:	60c6      	str	r6, [r0, #12]
 8013632:	6926      	ldr	r6, [r4, #16]
 8013634:	f105 0914 	add.w	r9, r5, #20
 8013638:	f104 0214 	add.w	r2, r4, #20
 801363c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013640:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013644:	f100 0514 	add.w	r5, r0, #20
 8013648:	f04f 0e00 	mov.w	lr, #0
 801364c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013650:	f859 4b04 	ldr.w	r4, [r9], #4
 8013654:	fa1e f18a 	uxtah	r1, lr, sl
 8013658:	b2a3      	uxth	r3, r4
 801365a:	1ac9      	subs	r1, r1, r3
 801365c:	0c23      	lsrs	r3, r4, #16
 801365e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013662:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013666:	b289      	uxth	r1, r1
 8013668:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801366c:	45c8      	cmp	r8, r9
 801366e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013672:	4694      	mov	ip, r2
 8013674:	f845 3b04 	str.w	r3, [r5], #4
 8013678:	d8e8      	bhi.n	801364c <__mdiff+0x5c>
 801367a:	45bc      	cmp	ip, r7
 801367c:	d304      	bcc.n	8013688 <__mdiff+0x98>
 801367e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013682:	b183      	cbz	r3, 80136a6 <__mdiff+0xb6>
 8013684:	6106      	str	r6, [r0, #16]
 8013686:	e7c5      	b.n	8013614 <__mdiff+0x24>
 8013688:	f85c 1b04 	ldr.w	r1, [ip], #4
 801368c:	fa1e f381 	uxtah	r3, lr, r1
 8013690:	141a      	asrs	r2, r3, #16
 8013692:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013696:	b29b      	uxth	r3, r3
 8013698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801369c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80136a0:	f845 3b04 	str.w	r3, [r5], #4
 80136a4:	e7e9      	b.n	801367a <__mdiff+0x8a>
 80136a6:	3e01      	subs	r6, #1
 80136a8:	e7e9      	b.n	801367e <__mdiff+0x8e>
	...

080136ac <__ulp>:
 80136ac:	4b12      	ldr	r3, [pc, #72]	; (80136f8 <__ulp+0x4c>)
 80136ae:	ee10 2a90 	vmov	r2, s1
 80136b2:	401a      	ands	r2, r3
 80136b4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	dd04      	ble.n	80136c6 <__ulp+0x1a>
 80136bc:	2000      	movs	r0, #0
 80136be:	4619      	mov	r1, r3
 80136c0:	ec41 0b10 	vmov	d0, r0, r1
 80136c4:	4770      	bx	lr
 80136c6:	425b      	negs	r3, r3
 80136c8:	151b      	asrs	r3, r3, #20
 80136ca:	2b13      	cmp	r3, #19
 80136cc:	f04f 0000 	mov.w	r0, #0
 80136d0:	f04f 0100 	mov.w	r1, #0
 80136d4:	dc04      	bgt.n	80136e0 <__ulp+0x34>
 80136d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80136da:	fa42 f103 	asr.w	r1, r2, r3
 80136de:	e7ef      	b.n	80136c0 <__ulp+0x14>
 80136e0:	3b14      	subs	r3, #20
 80136e2:	2b1e      	cmp	r3, #30
 80136e4:	f04f 0201 	mov.w	r2, #1
 80136e8:	bfda      	itte	le
 80136ea:	f1c3 031f 	rsble	r3, r3, #31
 80136ee:	fa02 f303 	lslle.w	r3, r2, r3
 80136f2:	4613      	movgt	r3, r2
 80136f4:	4618      	mov	r0, r3
 80136f6:	e7e3      	b.n	80136c0 <__ulp+0x14>
 80136f8:	7ff00000 	.word	0x7ff00000

080136fc <__b2d>:
 80136fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fe:	6905      	ldr	r5, [r0, #16]
 8013700:	f100 0714 	add.w	r7, r0, #20
 8013704:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013708:	1f2e      	subs	r6, r5, #4
 801370a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801370e:	4620      	mov	r0, r4
 8013710:	f7ff fdc4 	bl	801329c <__hi0bits>
 8013714:	f1c0 0320 	rsb	r3, r0, #32
 8013718:	280a      	cmp	r0, #10
 801371a:	600b      	str	r3, [r1, #0]
 801371c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013794 <__b2d+0x98>
 8013720:	dc14      	bgt.n	801374c <__b2d+0x50>
 8013722:	f1c0 0e0b 	rsb	lr, r0, #11
 8013726:	fa24 f10e 	lsr.w	r1, r4, lr
 801372a:	42b7      	cmp	r7, r6
 801372c:	ea41 030c 	orr.w	r3, r1, ip
 8013730:	bf34      	ite	cc
 8013732:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013736:	2100      	movcs	r1, #0
 8013738:	3015      	adds	r0, #21
 801373a:	fa04 f000 	lsl.w	r0, r4, r0
 801373e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013742:	ea40 0201 	orr.w	r2, r0, r1
 8013746:	ec43 2b10 	vmov	d0, r2, r3
 801374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801374c:	42b7      	cmp	r7, r6
 801374e:	bf3a      	itte	cc
 8013750:	f1a5 0608 	subcc.w	r6, r5, #8
 8013754:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013758:	2100      	movcs	r1, #0
 801375a:	380b      	subs	r0, #11
 801375c:	d015      	beq.n	801378a <__b2d+0x8e>
 801375e:	4084      	lsls	r4, r0
 8013760:	f1c0 0520 	rsb	r5, r0, #32
 8013764:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013768:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801376c:	42be      	cmp	r6, r7
 801376e:	fa21 fc05 	lsr.w	ip, r1, r5
 8013772:	ea44 030c 	orr.w	r3, r4, ip
 8013776:	bf8c      	ite	hi
 8013778:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801377c:	2400      	movls	r4, #0
 801377e:	fa01 f000 	lsl.w	r0, r1, r0
 8013782:	40ec      	lsrs	r4, r5
 8013784:	ea40 0204 	orr.w	r2, r0, r4
 8013788:	e7dd      	b.n	8013746 <__b2d+0x4a>
 801378a:	ea44 030c 	orr.w	r3, r4, ip
 801378e:	460a      	mov	r2, r1
 8013790:	e7d9      	b.n	8013746 <__b2d+0x4a>
 8013792:	bf00      	nop
 8013794:	3ff00000 	.word	0x3ff00000

08013798 <__d2b>:
 8013798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801379c:	460e      	mov	r6, r1
 801379e:	2101      	movs	r1, #1
 80137a0:	ec59 8b10 	vmov	r8, r9, d0
 80137a4:	4615      	mov	r5, r2
 80137a6:	f7ff fcb5 	bl	8013114 <_Balloc>
 80137aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80137ae:	4607      	mov	r7, r0
 80137b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80137b4:	bb34      	cbnz	r4, 8013804 <__d2b+0x6c>
 80137b6:	9301      	str	r3, [sp, #4]
 80137b8:	f1b8 0300 	subs.w	r3, r8, #0
 80137bc:	d027      	beq.n	801380e <__d2b+0x76>
 80137be:	a802      	add	r0, sp, #8
 80137c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80137c4:	f7ff fd89 	bl	80132da <__lo0bits>
 80137c8:	9900      	ldr	r1, [sp, #0]
 80137ca:	b1f0      	cbz	r0, 801380a <__d2b+0x72>
 80137cc:	9a01      	ldr	r2, [sp, #4]
 80137ce:	f1c0 0320 	rsb	r3, r0, #32
 80137d2:	fa02 f303 	lsl.w	r3, r2, r3
 80137d6:	430b      	orrs	r3, r1
 80137d8:	40c2      	lsrs	r2, r0
 80137da:	617b      	str	r3, [r7, #20]
 80137dc:	9201      	str	r2, [sp, #4]
 80137de:	9b01      	ldr	r3, [sp, #4]
 80137e0:	61bb      	str	r3, [r7, #24]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	bf14      	ite	ne
 80137e6:	2102      	movne	r1, #2
 80137e8:	2101      	moveq	r1, #1
 80137ea:	6139      	str	r1, [r7, #16]
 80137ec:	b1c4      	cbz	r4, 8013820 <__d2b+0x88>
 80137ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80137f2:	4404      	add	r4, r0
 80137f4:	6034      	str	r4, [r6, #0]
 80137f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80137fa:	6028      	str	r0, [r5, #0]
 80137fc:	4638      	mov	r0, r7
 80137fe:	b003      	add	sp, #12
 8013800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013808:	e7d5      	b.n	80137b6 <__d2b+0x1e>
 801380a:	6179      	str	r1, [r7, #20]
 801380c:	e7e7      	b.n	80137de <__d2b+0x46>
 801380e:	a801      	add	r0, sp, #4
 8013810:	f7ff fd63 	bl	80132da <__lo0bits>
 8013814:	9b01      	ldr	r3, [sp, #4]
 8013816:	617b      	str	r3, [r7, #20]
 8013818:	2101      	movs	r1, #1
 801381a:	6139      	str	r1, [r7, #16]
 801381c:	3020      	adds	r0, #32
 801381e:	e7e5      	b.n	80137ec <__d2b+0x54>
 8013820:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013824:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013828:	6030      	str	r0, [r6, #0]
 801382a:	6918      	ldr	r0, [r3, #16]
 801382c:	f7ff fd36 	bl	801329c <__hi0bits>
 8013830:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013834:	e7e1      	b.n	80137fa <__d2b+0x62>

08013836 <__ratio>:
 8013836:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383a:	4688      	mov	r8, r1
 801383c:	4669      	mov	r1, sp
 801383e:	4681      	mov	r9, r0
 8013840:	f7ff ff5c 	bl	80136fc <__b2d>
 8013844:	a901      	add	r1, sp, #4
 8013846:	4640      	mov	r0, r8
 8013848:	ec57 6b10 	vmov	r6, r7, d0
 801384c:	f7ff ff56 	bl	80136fc <__b2d>
 8013850:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013854:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013858:	eba3 0c02 	sub.w	ip, r3, r2
 801385c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013860:	1a9b      	subs	r3, r3, r2
 8013862:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013866:	ec5b ab10 	vmov	sl, fp, d0
 801386a:	2b00      	cmp	r3, #0
 801386c:	bfce      	itee	gt
 801386e:	463a      	movgt	r2, r7
 8013870:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013874:	465a      	movle	r2, fp
 8013876:	4659      	mov	r1, fp
 8013878:	463d      	mov	r5, r7
 801387a:	bfd4      	ite	le
 801387c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013880:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013884:	4630      	mov	r0, r6
 8013886:	ee10 2a10 	vmov	r2, s0
 801388a:	460b      	mov	r3, r1
 801388c:	4629      	mov	r1, r5
 801388e:	f7ed f80d 	bl	80008ac <__aeabi_ddiv>
 8013892:	ec41 0b10 	vmov	d0, r0, r1
 8013896:	b003      	add	sp, #12
 8013898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801389c <__copybits>:
 801389c:	3901      	subs	r1, #1
 801389e:	b510      	push	{r4, lr}
 80138a0:	1149      	asrs	r1, r1, #5
 80138a2:	6914      	ldr	r4, [r2, #16]
 80138a4:	3101      	adds	r1, #1
 80138a6:	f102 0314 	add.w	r3, r2, #20
 80138aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80138ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80138b2:	42a3      	cmp	r3, r4
 80138b4:	4602      	mov	r2, r0
 80138b6:	d303      	bcc.n	80138c0 <__copybits+0x24>
 80138b8:	2300      	movs	r3, #0
 80138ba:	428a      	cmp	r2, r1
 80138bc:	d305      	bcc.n	80138ca <__copybits+0x2e>
 80138be:	bd10      	pop	{r4, pc}
 80138c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80138c4:	f840 2b04 	str.w	r2, [r0], #4
 80138c8:	e7f3      	b.n	80138b2 <__copybits+0x16>
 80138ca:	f842 3b04 	str.w	r3, [r2], #4
 80138ce:	e7f4      	b.n	80138ba <__copybits+0x1e>

080138d0 <__any_on>:
 80138d0:	f100 0214 	add.w	r2, r0, #20
 80138d4:	6900      	ldr	r0, [r0, #16]
 80138d6:	114b      	asrs	r3, r1, #5
 80138d8:	4298      	cmp	r0, r3
 80138da:	b510      	push	{r4, lr}
 80138dc:	db11      	blt.n	8013902 <__any_on+0x32>
 80138de:	dd0a      	ble.n	80138f6 <__any_on+0x26>
 80138e0:	f011 011f 	ands.w	r1, r1, #31
 80138e4:	d007      	beq.n	80138f6 <__any_on+0x26>
 80138e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80138ea:	fa24 f001 	lsr.w	r0, r4, r1
 80138ee:	fa00 f101 	lsl.w	r1, r0, r1
 80138f2:	428c      	cmp	r4, r1
 80138f4:	d10b      	bne.n	801390e <__any_on+0x3e>
 80138f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d803      	bhi.n	8013906 <__any_on+0x36>
 80138fe:	2000      	movs	r0, #0
 8013900:	bd10      	pop	{r4, pc}
 8013902:	4603      	mov	r3, r0
 8013904:	e7f7      	b.n	80138f6 <__any_on+0x26>
 8013906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801390a:	2900      	cmp	r1, #0
 801390c:	d0f5      	beq.n	80138fa <__any_on+0x2a>
 801390e:	2001      	movs	r0, #1
 8013910:	e7f6      	b.n	8013900 <__any_on+0x30>

08013912 <_calloc_r>:
 8013912:	b538      	push	{r3, r4, r5, lr}
 8013914:	fb02 f401 	mul.w	r4, r2, r1
 8013918:	4621      	mov	r1, r4
 801391a:	f7fe f885 	bl	8011a28 <_malloc_r>
 801391e:	4605      	mov	r5, r0
 8013920:	b118      	cbz	r0, 801392a <_calloc_r+0x18>
 8013922:	4622      	mov	r2, r4
 8013924:	2100      	movs	r1, #0
 8013926:	f7fe f829 	bl	801197c <memset>
 801392a:	4628      	mov	r0, r5
 801392c:	bd38      	pop	{r3, r4, r5, pc}

0801392e <_realloc_r>:
 801392e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013930:	4607      	mov	r7, r0
 8013932:	4614      	mov	r4, r2
 8013934:	460e      	mov	r6, r1
 8013936:	b921      	cbnz	r1, 8013942 <_realloc_r+0x14>
 8013938:	4611      	mov	r1, r2
 801393a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801393e:	f7fe b873 	b.w	8011a28 <_malloc_r>
 8013942:	b922      	cbnz	r2, 801394e <_realloc_r+0x20>
 8013944:	f7fe f822 	bl	801198c <_free_r>
 8013948:	4625      	mov	r5, r4
 801394a:	4628      	mov	r0, r5
 801394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801394e:	f000 fcc1 	bl	80142d4 <_malloc_usable_size_r>
 8013952:	42a0      	cmp	r0, r4
 8013954:	d20f      	bcs.n	8013976 <_realloc_r+0x48>
 8013956:	4621      	mov	r1, r4
 8013958:	4638      	mov	r0, r7
 801395a:	f7fe f865 	bl	8011a28 <_malloc_r>
 801395e:	4605      	mov	r5, r0
 8013960:	2800      	cmp	r0, #0
 8013962:	d0f2      	beq.n	801394a <_realloc_r+0x1c>
 8013964:	4631      	mov	r1, r6
 8013966:	4622      	mov	r2, r4
 8013968:	f7fd fffd 	bl	8011966 <memcpy>
 801396c:	4631      	mov	r1, r6
 801396e:	4638      	mov	r0, r7
 8013970:	f7fe f80c 	bl	801198c <_free_r>
 8013974:	e7e9      	b.n	801394a <_realloc_r+0x1c>
 8013976:	4635      	mov	r5, r6
 8013978:	e7e7      	b.n	801394a <_realloc_r+0x1c>

0801397a <__sfputc_r>:
 801397a:	6893      	ldr	r3, [r2, #8]
 801397c:	3b01      	subs	r3, #1
 801397e:	2b00      	cmp	r3, #0
 8013980:	b410      	push	{r4}
 8013982:	6093      	str	r3, [r2, #8]
 8013984:	da08      	bge.n	8013998 <__sfputc_r+0x1e>
 8013986:	6994      	ldr	r4, [r2, #24]
 8013988:	42a3      	cmp	r3, r4
 801398a:	db01      	blt.n	8013990 <__sfputc_r+0x16>
 801398c:	290a      	cmp	r1, #10
 801398e:	d103      	bne.n	8013998 <__sfputc_r+0x1e>
 8013990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013994:	f000 baca 	b.w	8013f2c <__swbuf_r>
 8013998:	6813      	ldr	r3, [r2, #0]
 801399a:	1c58      	adds	r0, r3, #1
 801399c:	6010      	str	r0, [r2, #0]
 801399e:	7019      	strb	r1, [r3, #0]
 80139a0:	4608      	mov	r0, r1
 80139a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <__sfputs_r>:
 80139a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139aa:	4606      	mov	r6, r0
 80139ac:	460f      	mov	r7, r1
 80139ae:	4614      	mov	r4, r2
 80139b0:	18d5      	adds	r5, r2, r3
 80139b2:	42ac      	cmp	r4, r5
 80139b4:	d101      	bne.n	80139ba <__sfputs_r+0x12>
 80139b6:	2000      	movs	r0, #0
 80139b8:	e007      	b.n	80139ca <__sfputs_r+0x22>
 80139ba:	463a      	mov	r2, r7
 80139bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c0:	4630      	mov	r0, r6
 80139c2:	f7ff ffda 	bl	801397a <__sfputc_r>
 80139c6:	1c43      	adds	r3, r0, #1
 80139c8:	d1f3      	bne.n	80139b2 <__sfputs_r+0xa>
 80139ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080139cc <_vfiprintf_r>:
 80139cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d0:	460c      	mov	r4, r1
 80139d2:	b09d      	sub	sp, #116	; 0x74
 80139d4:	4617      	mov	r7, r2
 80139d6:	461d      	mov	r5, r3
 80139d8:	4606      	mov	r6, r0
 80139da:	b118      	cbz	r0, 80139e4 <_vfiprintf_r+0x18>
 80139dc:	6983      	ldr	r3, [r0, #24]
 80139de:	b90b      	cbnz	r3, 80139e4 <_vfiprintf_r+0x18>
 80139e0:	f7fe ffd2 	bl	8012988 <__sinit>
 80139e4:	4b7c      	ldr	r3, [pc, #496]	; (8013bd8 <_vfiprintf_r+0x20c>)
 80139e6:	429c      	cmp	r4, r3
 80139e8:	d158      	bne.n	8013a9c <_vfiprintf_r+0xd0>
 80139ea:	6874      	ldr	r4, [r6, #4]
 80139ec:	89a3      	ldrh	r3, [r4, #12]
 80139ee:	0718      	lsls	r0, r3, #28
 80139f0:	d55e      	bpl.n	8013ab0 <_vfiprintf_r+0xe4>
 80139f2:	6923      	ldr	r3, [r4, #16]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d05b      	beq.n	8013ab0 <_vfiprintf_r+0xe4>
 80139f8:	2300      	movs	r3, #0
 80139fa:	9309      	str	r3, [sp, #36]	; 0x24
 80139fc:	2320      	movs	r3, #32
 80139fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a02:	2330      	movs	r3, #48	; 0x30
 8013a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a08:	9503      	str	r5, [sp, #12]
 8013a0a:	f04f 0b01 	mov.w	fp, #1
 8013a0e:	46b8      	mov	r8, r7
 8013a10:	4645      	mov	r5, r8
 8013a12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013a16:	b10b      	cbz	r3, 8013a1c <_vfiprintf_r+0x50>
 8013a18:	2b25      	cmp	r3, #37	; 0x25
 8013a1a:	d154      	bne.n	8013ac6 <_vfiprintf_r+0xfa>
 8013a1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8013a20:	d00b      	beq.n	8013a3a <_vfiprintf_r+0x6e>
 8013a22:	4653      	mov	r3, sl
 8013a24:	463a      	mov	r2, r7
 8013a26:	4621      	mov	r1, r4
 8013a28:	4630      	mov	r0, r6
 8013a2a:	f7ff ffbd 	bl	80139a8 <__sfputs_r>
 8013a2e:	3001      	adds	r0, #1
 8013a30:	f000 80c2 	beq.w	8013bb8 <_vfiprintf_r+0x1ec>
 8013a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a36:	4453      	add	r3, sl
 8013a38:	9309      	str	r3, [sp, #36]	; 0x24
 8013a3a:	f898 3000 	ldrb.w	r3, [r8]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	f000 80ba 	beq.w	8013bb8 <_vfiprintf_r+0x1ec>
 8013a44:	2300      	movs	r3, #0
 8013a46:	f04f 32ff 	mov.w	r2, #4294967295
 8013a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a4e:	9304      	str	r3, [sp, #16]
 8013a50:	9307      	str	r3, [sp, #28]
 8013a52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a56:	931a      	str	r3, [sp, #104]	; 0x68
 8013a58:	46a8      	mov	r8, r5
 8013a5a:	2205      	movs	r2, #5
 8013a5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013a60:	485e      	ldr	r0, [pc, #376]	; (8013bdc <_vfiprintf_r+0x210>)
 8013a62:	f7ec fbed 	bl	8000240 <memchr>
 8013a66:	9b04      	ldr	r3, [sp, #16]
 8013a68:	bb78      	cbnz	r0, 8013aca <_vfiprintf_r+0xfe>
 8013a6a:	06d9      	lsls	r1, r3, #27
 8013a6c:	bf44      	itt	mi
 8013a6e:	2220      	movmi	r2, #32
 8013a70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a74:	071a      	lsls	r2, r3, #28
 8013a76:	bf44      	itt	mi
 8013a78:	222b      	movmi	r2, #43	; 0x2b
 8013a7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a7e:	782a      	ldrb	r2, [r5, #0]
 8013a80:	2a2a      	cmp	r2, #42	; 0x2a
 8013a82:	d02a      	beq.n	8013ada <_vfiprintf_r+0x10e>
 8013a84:	9a07      	ldr	r2, [sp, #28]
 8013a86:	46a8      	mov	r8, r5
 8013a88:	2000      	movs	r0, #0
 8013a8a:	250a      	movs	r5, #10
 8013a8c:	4641      	mov	r1, r8
 8013a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a92:	3b30      	subs	r3, #48	; 0x30
 8013a94:	2b09      	cmp	r3, #9
 8013a96:	d969      	bls.n	8013b6c <_vfiprintf_r+0x1a0>
 8013a98:	b360      	cbz	r0, 8013af4 <_vfiprintf_r+0x128>
 8013a9a:	e024      	b.n	8013ae6 <_vfiprintf_r+0x11a>
 8013a9c:	4b50      	ldr	r3, [pc, #320]	; (8013be0 <_vfiprintf_r+0x214>)
 8013a9e:	429c      	cmp	r4, r3
 8013aa0:	d101      	bne.n	8013aa6 <_vfiprintf_r+0xda>
 8013aa2:	68b4      	ldr	r4, [r6, #8]
 8013aa4:	e7a2      	b.n	80139ec <_vfiprintf_r+0x20>
 8013aa6:	4b4f      	ldr	r3, [pc, #316]	; (8013be4 <_vfiprintf_r+0x218>)
 8013aa8:	429c      	cmp	r4, r3
 8013aaa:	bf08      	it	eq
 8013aac:	68f4      	ldreq	r4, [r6, #12]
 8013aae:	e79d      	b.n	80139ec <_vfiprintf_r+0x20>
 8013ab0:	4621      	mov	r1, r4
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	f000 fa8c 	bl	8013fd0 <__swsetup_r>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d09d      	beq.n	80139f8 <_vfiprintf_r+0x2c>
 8013abc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac0:	b01d      	add	sp, #116	; 0x74
 8013ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac6:	46a8      	mov	r8, r5
 8013ac8:	e7a2      	b.n	8013a10 <_vfiprintf_r+0x44>
 8013aca:	4a44      	ldr	r2, [pc, #272]	; (8013bdc <_vfiprintf_r+0x210>)
 8013acc:	1a80      	subs	r0, r0, r2
 8013ace:	fa0b f000 	lsl.w	r0, fp, r0
 8013ad2:	4318      	orrs	r0, r3
 8013ad4:	9004      	str	r0, [sp, #16]
 8013ad6:	4645      	mov	r5, r8
 8013ad8:	e7be      	b.n	8013a58 <_vfiprintf_r+0x8c>
 8013ada:	9a03      	ldr	r2, [sp, #12]
 8013adc:	1d11      	adds	r1, r2, #4
 8013ade:	6812      	ldr	r2, [r2, #0]
 8013ae0:	9103      	str	r1, [sp, #12]
 8013ae2:	2a00      	cmp	r2, #0
 8013ae4:	db01      	blt.n	8013aea <_vfiprintf_r+0x11e>
 8013ae6:	9207      	str	r2, [sp, #28]
 8013ae8:	e004      	b.n	8013af4 <_vfiprintf_r+0x128>
 8013aea:	4252      	negs	r2, r2
 8013aec:	f043 0302 	orr.w	r3, r3, #2
 8013af0:	9207      	str	r2, [sp, #28]
 8013af2:	9304      	str	r3, [sp, #16]
 8013af4:	f898 3000 	ldrb.w	r3, [r8]
 8013af8:	2b2e      	cmp	r3, #46	; 0x2e
 8013afa:	d10e      	bne.n	8013b1a <_vfiprintf_r+0x14e>
 8013afc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013b00:	2b2a      	cmp	r3, #42	; 0x2a
 8013b02:	d138      	bne.n	8013b76 <_vfiprintf_r+0x1aa>
 8013b04:	9b03      	ldr	r3, [sp, #12]
 8013b06:	1d1a      	adds	r2, r3, #4
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	9203      	str	r2, [sp, #12]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	bfb8      	it	lt
 8013b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8013b14:	f108 0802 	add.w	r8, r8, #2
 8013b18:	9305      	str	r3, [sp, #20]
 8013b1a:	4d33      	ldr	r5, [pc, #204]	; (8013be8 <_vfiprintf_r+0x21c>)
 8013b1c:	f898 1000 	ldrb.w	r1, [r8]
 8013b20:	2203      	movs	r2, #3
 8013b22:	4628      	mov	r0, r5
 8013b24:	f7ec fb8c 	bl	8000240 <memchr>
 8013b28:	b140      	cbz	r0, 8013b3c <_vfiprintf_r+0x170>
 8013b2a:	2340      	movs	r3, #64	; 0x40
 8013b2c:	1b40      	subs	r0, r0, r5
 8013b2e:	fa03 f000 	lsl.w	r0, r3, r0
 8013b32:	9b04      	ldr	r3, [sp, #16]
 8013b34:	4303      	orrs	r3, r0
 8013b36:	f108 0801 	add.w	r8, r8, #1
 8013b3a:	9304      	str	r3, [sp, #16]
 8013b3c:	f898 1000 	ldrb.w	r1, [r8]
 8013b40:	482a      	ldr	r0, [pc, #168]	; (8013bec <_vfiprintf_r+0x220>)
 8013b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b46:	2206      	movs	r2, #6
 8013b48:	f108 0701 	add.w	r7, r8, #1
 8013b4c:	f7ec fb78 	bl	8000240 <memchr>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d037      	beq.n	8013bc4 <_vfiprintf_r+0x1f8>
 8013b54:	4b26      	ldr	r3, [pc, #152]	; (8013bf0 <_vfiprintf_r+0x224>)
 8013b56:	bb1b      	cbnz	r3, 8013ba0 <_vfiprintf_r+0x1d4>
 8013b58:	9b03      	ldr	r3, [sp, #12]
 8013b5a:	3307      	adds	r3, #7
 8013b5c:	f023 0307 	bic.w	r3, r3, #7
 8013b60:	3308      	adds	r3, #8
 8013b62:	9303      	str	r3, [sp, #12]
 8013b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b66:	444b      	add	r3, r9
 8013b68:	9309      	str	r3, [sp, #36]	; 0x24
 8013b6a:	e750      	b.n	8013a0e <_vfiprintf_r+0x42>
 8013b6c:	fb05 3202 	mla	r2, r5, r2, r3
 8013b70:	2001      	movs	r0, #1
 8013b72:	4688      	mov	r8, r1
 8013b74:	e78a      	b.n	8013a8c <_vfiprintf_r+0xc0>
 8013b76:	2300      	movs	r3, #0
 8013b78:	f108 0801 	add.w	r8, r8, #1
 8013b7c:	9305      	str	r3, [sp, #20]
 8013b7e:	4619      	mov	r1, r3
 8013b80:	250a      	movs	r5, #10
 8013b82:	4640      	mov	r0, r8
 8013b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b88:	3a30      	subs	r2, #48	; 0x30
 8013b8a:	2a09      	cmp	r2, #9
 8013b8c:	d903      	bls.n	8013b96 <_vfiprintf_r+0x1ca>
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d0c3      	beq.n	8013b1a <_vfiprintf_r+0x14e>
 8013b92:	9105      	str	r1, [sp, #20]
 8013b94:	e7c1      	b.n	8013b1a <_vfiprintf_r+0x14e>
 8013b96:	fb05 2101 	mla	r1, r5, r1, r2
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	4680      	mov	r8, r0
 8013b9e:	e7f0      	b.n	8013b82 <_vfiprintf_r+0x1b6>
 8013ba0:	ab03      	add	r3, sp, #12
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	4622      	mov	r2, r4
 8013ba6:	4b13      	ldr	r3, [pc, #76]	; (8013bf4 <_vfiprintf_r+0x228>)
 8013ba8:	a904      	add	r1, sp, #16
 8013baa:	4630      	mov	r0, r6
 8013bac:	f3af 8000 	nop.w
 8013bb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013bb4:	4681      	mov	r9, r0
 8013bb6:	d1d5      	bne.n	8013b64 <_vfiprintf_r+0x198>
 8013bb8:	89a3      	ldrh	r3, [r4, #12]
 8013bba:	065b      	lsls	r3, r3, #25
 8013bbc:	f53f af7e 	bmi.w	8013abc <_vfiprintf_r+0xf0>
 8013bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bc2:	e77d      	b.n	8013ac0 <_vfiprintf_r+0xf4>
 8013bc4:	ab03      	add	r3, sp, #12
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	4622      	mov	r2, r4
 8013bca:	4b0a      	ldr	r3, [pc, #40]	; (8013bf4 <_vfiprintf_r+0x228>)
 8013bcc:	a904      	add	r1, sp, #16
 8013bce:	4630      	mov	r0, r6
 8013bd0:	f000 f888 	bl	8013ce4 <_printf_i>
 8013bd4:	e7ec      	b.n	8013bb0 <_vfiprintf_r+0x1e4>
 8013bd6:	bf00      	nop
 8013bd8:	080170ac 	.word	0x080170ac
 8013bdc:	080171ec 	.word	0x080171ec
 8013be0:	080170cc 	.word	0x080170cc
 8013be4:	0801708c 	.word	0x0801708c
 8013be8:	080171f2 	.word	0x080171f2
 8013bec:	080171f6 	.word	0x080171f6
 8013bf0:	00000000 	.word	0x00000000
 8013bf4:	080139a9 	.word	0x080139a9

08013bf8 <_printf_common>:
 8013bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bfc:	4691      	mov	r9, r2
 8013bfe:	461f      	mov	r7, r3
 8013c00:	688a      	ldr	r2, [r1, #8]
 8013c02:	690b      	ldr	r3, [r1, #16]
 8013c04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	bfb8      	it	lt
 8013c0c:	4613      	movlt	r3, r2
 8013c0e:	f8c9 3000 	str.w	r3, [r9]
 8013c12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c16:	4606      	mov	r6, r0
 8013c18:	460c      	mov	r4, r1
 8013c1a:	b112      	cbz	r2, 8013c22 <_printf_common+0x2a>
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	f8c9 3000 	str.w	r3, [r9]
 8013c22:	6823      	ldr	r3, [r4, #0]
 8013c24:	0699      	lsls	r1, r3, #26
 8013c26:	bf42      	ittt	mi
 8013c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013c2c:	3302      	addmi	r3, #2
 8013c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8013c32:	6825      	ldr	r5, [r4, #0]
 8013c34:	f015 0506 	ands.w	r5, r5, #6
 8013c38:	d107      	bne.n	8013c4a <_printf_common+0x52>
 8013c3a:	f104 0a19 	add.w	sl, r4, #25
 8013c3e:	68e3      	ldr	r3, [r4, #12]
 8013c40:	f8d9 2000 	ldr.w	r2, [r9]
 8013c44:	1a9b      	subs	r3, r3, r2
 8013c46:	42ab      	cmp	r3, r5
 8013c48:	dc28      	bgt.n	8013c9c <_printf_common+0xa4>
 8013c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013c4e:	6822      	ldr	r2, [r4, #0]
 8013c50:	3300      	adds	r3, #0
 8013c52:	bf18      	it	ne
 8013c54:	2301      	movne	r3, #1
 8013c56:	0692      	lsls	r2, r2, #26
 8013c58:	d42d      	bmi.n	8013cb6 <_printf_common+0xbe>
 8013c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c5e:	4639      	mov	r1, r7
 8013c60:	4630      	mov	r0, r6
 8013c62:	47c0      	blx	r8
 8013c64:	3001      	adds	r0, #1
 8013c66:	d020      	beq.n	8013caa <_printf_common+0xb2>
 8013c68:	6823      	ldr	r3, [r4, #0]
 8013c6a:	68e5      	ldr	r5, [r4, #12]
 8013c6c:	f8d9 2000 	ldr.w	r2, [r9]
 8013c70:	f003 0306 	and.w	r3, r3, #6
 8013c74:	2b04      	cmp	r3, #4
 8013c76:	bf08      	it	eq
 8013c78:	1aad      	subeq	r5, r5, r2
 8013c7a:	68a3      	ldr	r3, [r4, #8]
 8013c7c:	6922      	ldr	r2, [r4, #16]
 8013c7e:	bf0c      	ite	eq
 8013c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c84:	2500      	movne	r5, #0
 8013c86:	4293      	cmp	r3, r2
 8013c88:	bfc4      	itt	gt
 8013c8a:	1a9b      	subgt	r3, r3, r2
 8013c8c:	18ed      	addgt	r5, r5, r3
 8013c8e:	f04f 0900 	mov.w	r9, #0
 8013c92:	341a      	adds	r4, #26
 8013c94:	454d      	cmp	r5, r9
 8013c96:	d11a      	bne.n	8013cce <_printf_common+0xd6>
 8013c98:	2000      	movs	r0, #0
 8013c9a:	e008      	b.n	8013cae <_printf_common+0xb6>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	4652      	mov	r2, sl
 8013ca0:	4639      	mov	r1, r7
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	47c0      	blx	r8
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	d103      	bne.n	8013cb2 <_printf_common+0xba>
 8013caa:	f04f 30ff 	mov.w	r0, #4294967295
 8013cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cb2:	3501      	adds	r5, #1
 8013cb4:	e7c3      	b.n	8013c3e <_printf_common+0x46>
 8013cb6:	18e1      	adds	r1, r4, r3
 8013cb8:	1c5a      	adds	r2, r3, #1
 8013cba:	2030      	movs	r0, #48	; 0x30
 8013cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013cc0:	4422      	add	r2, r4
 8013cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013cca:	3302      	adds	r3, #2
 8013ccc:	e7c5      	b.n	8013c5a <_printf_common+0x62>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	4622      	mov	r2, r4
 8013cd2:	4639      	mov	r1, r7
 8013cd4:	4630      	mov	r0, r6
 8013cd6:	47c0      	blx	r8
 8013cd8:	3001      	adds	r0, #1
 8013cda:	d0e6      	beq.n	8013caa <_printf_common+0xb2>
 8013cdc:	f109 0901 	add.w	r9, r9, #1
 8013ce0:	e7d8      	b.n	8013c94 <_printf_common+0x9c>
	...

08013ce4 <_printf_i>:
 8013ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ce8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013cec:	460c      	mov	r4, r1
 8013cee:	7e09      	ldrb	r1, [r1, #24]
 8013cf0:	b085      	sub	sp, #20
 8013cf2:	296e      	cmp	r1, #110	; 0x6e
 8013cf4:	4617      	mov	r7, r2
 8013cf6:	4606      	mov	r6, r0
 8013cf8:	4698      	mov	r8, r3
 8013cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013cfc:	f000 80b3 	beq.w	8013e66 <_printf_i+0x182>
 8013d00:	d822      	bhi.n	8013d48 <_printf_i+0x64>
 8013d02:	2963      	cmp	r1, #99	; 0x63
 8013d04:	d036      	beq.n	8013d74 <_printf_i+0x90>
 8013d06:	d80a      	bhi.n	8013d1e <_printf_i+0x3a>
 8013d08:	2900      	cmp	r1, #0
 8013d0a:	f000 80b9 	beq.w	8013e80 <_printf_i+0x19c>
 8013d0e:	2958      	cmp	r1, #88	; 0x58
 8013d10:	f000 8083 	beq.w	8013e1a <_printf_i+0x136>
 8013d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013d1c:	e032      	b.n	8013d84 <_printf_i+0xa0>
 8013d1e:	2964      	cmp	r1, #100	; 0x64
 8013d20:	d001      	beq.n	8013d26 <_printf_i+0x42>
 8013d22:	2969      	cmp	r1, #105	; 0x69
 8013d24:	d1f6      	bne.n	8013d14 <_printf_i+0x30>
 8013d26:	6820      	ldr	r0, [r4, #0]
 8013d28:	6813      	ldr	r3, [r2, #0]
 8013d2a:	0605      	lsls	r5, r0, #24
 8013d2c:	f103 0104 	add.w	r1, r3, #4
 8013d30:	d52a      	bpl.n	8013d88 <_printf_i+0xa4>
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	6011      	str	r1, [r2, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	da03      	bge.n	8013d42 <_printf_i+0x5e>
 8013d3a:	222d      	movs	r2, #45	; 0x2d
 8013d3c:	425b      	negs	r3, r3
 8013d3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013d42:	486f      	ldr	r0, [pc, #444]	; (8013f00 <_printf_i+0x21c>)
 8013d44:	220a      	movs	r2, #10
 8013d46:	e039      	b.n	8013dbc <_printf_i+0xd8>
 8013d48:	2973      	cmp	r1, #115	; 0x73
 8013d4a:	f000 809d 	beq.w	8013e88 <_printf_i+0x1a4>
 8013d4e:	d808      	bhi.n	8013d62 <_printf_i+0x7e>
 8013d50:	296f      	cmp	r1, #111	; 0x6f
 8013d52:	d020      	beq.n	8013d96 <_printf_i+0xb2>
 8013d54:	2970      	cmp	r1, #112	; 0x70
 8013d56:	d1dd      	bne.n	8013d14 <_printf_i+0x30>
 8013d58:	6823      	ldr	r3, [r4, #0]
 8013d5a:	f043 0320 	orr.w	r3, r3, #32
 8013d5e:	6023      	str	r3, [r4, #0]
 8013d60:	e003      	b.n	8013d6a <_printf_i+0x86>
 8013d62:	2975      	cmp	r1, #117	; 0x75
 8013d64:	d017      	beq.n	8013d96 <_printf_i+0xb2>
 8013d66:	2978      	cmp	r1, #120	; 0x78
 8013d68:	d1d4      	bne.n	8013d14 <_printf_i+0x30>
 8013d6a:	2378      	movs	r3, #120	; 0x78
 8013d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d70:	4864      	ldr	r0, [pc, #400]	; (8013f04 <_printf_i+0x220>)
 8013d72:	e055      	b.n	8013e20 <_printf_i+0x13c>
 8013d74:	6813      	ldr	r3, [r2, #0]
 8013d76:	1d19      	adds	r1, r3, #4
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	6011      	str	r1, [r2, #0]
 8013d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d84:	2301      	movs	r3, #1
 8013d86:	e08c      	b.n	8013ea2 <_printf_i+0x1be>
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	6011      	str	r1, [r2, #0]
 8013d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d90:	bf18      	it	ne
 8013d92:	b21b      	sxthne	r3, r3
 8013d94:	e7cf      	b.n	8013d36 <_printf_i+0x52>
 8013d96:	6813      	ldr	r3, [r2, #0]
 8013d98:	6825      	ldr	r5, [r4, #0]
 8013d9a:	1d18      	adds	r0, r3, #4
 8013d9c:	6010      	str	r0, [r2, #0]
 8013d9e:	0628      	lsls	r0, r5, #24
 8013da0:	d501      	bpl.n	8013da6 <_printf_i+0xc2>
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	e002      	b.n	8013dac <_printf_i+0xc8>
 8013da6:	0668      	lsls	r0, r5, #25
 8013da8:	d5fb      	bpl.n	8013da2 <_printf_i+0xbe>
 8013daa:	881b      	ldrh	r3, [r3, #0]
 8013dac:	4854      	ldr	r0, [pc, #336]	; (8013f00 <_printf_i+0x21c>)
 8013dae:	296f      	cmp	r1, #111	; 0x6f
 8013db0:	bf14      	ite	ne
 8013db2:	220a      	movne	r2, #10
 8013db4:	2208      	moveq	r2, #8
 8013db6:	2100      	movs	r1, #0
 8013db8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013dbc:	6865      	ldr	r5, [r4, #4]
 8013dbe:	60a5      	str	r5, [r4, #8]
 8013dc0:	2d00      	cmp	r5, #0
 8013dc2:	f2c0 8095 	blt.w	8013ef0 <_printf_i+0x20c>
 8013dc6:	6821      	ldr	r1, [r4, #0]
 8013dc8:	f021 0104 	bic.w	r1, r1, #4
 8013dcc:	6021      	str	r1, [r4, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d13d      	bne.n	8013e4e <_printf_i+0x16a>
 8013dd2:	2d00      	cmp	r5, #0
 8013dd4:	f040 808e 	bne.w	8013ef4 <_printf_i+0x210>
 8013dd8:	4665      	mov	r5, ip
 8013dda:	2a08      	cmp	r2, #8
 8013ddc:	d10b      	bne.n	8013df6 <_printf_i+0x112>
 8013dde:	6823      	ldr	r3, [r4, #0]
 8013de0:	07db      	lsls	r3, r3, #31
 8013de2:	d508      	bpl.n	8013df6 <_printf_i+0x112>
 8013de4:	6923      	ldr	r3, [r4, #16]
 8013de6:	6862      	ldr	r2, [r4, #4]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	bfde      	ittt	le
 8013dec:	2330      	movle	r3, #48	; 0x30
 8013dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013df6:	ebac 0305 	sub.w	r3, ip, r5
 8013dfa:	6123      	str	r3, [r4, #16]
 8013dfc:	f8cd 8000 	str.w	r8, [sp]
 8013e00:	463b      	mov	r3, r7
 8013e02:	aa03      	add	r2, sp, #12
 8013e04:	4621      	mov	r1, r4
 8013e06:	4630      	mov	r0, r6
 8013e08:	f7ff fef6 	bl	8013bf8 <_printf_common>
 8013e0c:	3001      	adds	r0, #1
 8013e0e:	d14d      	bne.n	8013eac <_printf_i+0x1c8>
 8013e10:	f04f 30ff 	mov.w	r0, #4294967295
 8013e14:	b005      	add	sp, #20
 8013e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e1a:	4839      	ldr	r0, [pc, #228]	; (8013f00 <_printf_i+0x21c>)
 8013e1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013e20:	6813      	ldr	r3, [r2, #0]
 8013e22:	6821      	ldr	r1, [r4, #0]
 8013e24:	1d1d      	adds	r5, r3, #4
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	6015      	str	r5, [r2, #0]
 8013e2a:	060a      	lsls	r2, r1, #24
 8013e2c:	d50b      	bpl.n	8013e46 <_printf_i+0x162>
 8013e2e:	07ca      	lsls	r2, r1, #31
 8013e30:	bf44      	itt	mi
 8013e32:	f041 0120 	orrmi.w	r1, r1, #32
 8013e36:	6021      	strmi	r1, [r4, #0]
 8013e38:	b91b      	cbnz	r3, 8013e42 <_printf_i+0x15e>
 8013e3a:	6822      	ldr	r2, [r4, #0]
 8013e3c:	f022 0220 	bic.w	r2, r2, #32
 8013e40:	6022      	str	r2, [r4, #0]
 8013e42:	2210      	movs	r2, #16
 8013e44:	e7b7      	b.n	8013db6 <_printf_i+0xd2>
 8013e46:	064d      	lsls	r5, r1, #25
 8013e48:	bf48      	it	mi
 8013e4a:	b29b      	uxthmi	r3, r3
 8013e4c:	e7ef      	b.n	8013e2e <_printf_i+0x14a>
 8013e4e:	4665      	mov	r5, ip
 8013e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e54:	fb02 3311 	mls	r3, r2, r1, r3
 8013e58:	5cc3      	ldrb	r3, [r0, r3]
 8013e5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013e5e:	460b      	mov	r3, r1
 8013e60:	2900      	cmp	r1, #0
 8013e62:	d1f5      	bne.n	8013e50 <_printf_i+0x16c>
 8013e64:	e7b9      	b.n	8013dda <_printf_i+0xf6>
 8013e66:	6813      	ldr	r3, [r2, #0]
 8013e68:	6825      	ldr	r5, [r4, #0]
 8013e6a:	6961      	ldr	r1, [r4, #20]
 8013e6c:	1d18      	adds	r0, r3, #4
 8013e6e:	6010      	str	r0, [r2, #0]
 8013e70:	0628      	lsls	r0, r5, #24
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	d501      	bpl.n	8013e7a <_printf_i+0x196>
 8013e76:	6019      	str	r1, [r3, #0]
 8013e78:	e002      	b.n	8013e80 <_printf_i+0x19c>
 8013e7a:	066a      	lsls	r2, r5, #25
 8013e7c:	d5fb      	bpl.n	8013e76 <_printf_i+0x192>
 8013e7e:	8019      	strh	r1, [r3, #0]
 8013e80:	2300      	movs	r3, #0
 8013e82:	6123      	str	r3, [r4, #16]
 8013e84:	4665      	mov	r5, ip
 8013e86:	e7b9      	b.n	8013dfc <_printf_i+0x118>
 8013e88:	6813      	ldr	r3, [r2, #0]
 8013e8a:	1d19      	adds	r1, r3, #4
 8013e8c:	6011      	str	r1, [r2, #0]
 8013e8e:	681d      	ldr	r5, [r3, #0]
 8013e90:	6862      	ldr	r2, [r4, #4]
 8013e92:	2100      	movs	r1, #0
 8013e94:	4628      	mov	r0, r5
 8013e96:	f7ec f9d3 	bl	8000240 <memchr>
 8013e9a:	b108      	cbz	r0, 8013ea0 <_printf_i+0x1bc>
 8013e9c:	1b40      	subs	r0, r0, r5
 8013e9e:	6060      	str	r0, [r4, #4]
 8013ea0:	6863      	ldr	r3, [r4, #4]
 8013ea2:	6123      	str	r3, [r4, #16]
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013eaa:	e7a7      	b.n	8013dfc <_printf_i+0x118>
 8013eac:	6923      	ldr	r3, [r4, #16]
 8013eae:	462a      	mov	r2, r5
 8013eb0:	4639      	mov	r1, r7
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	47c0      	blx	r8
 8013eb6:	3001      	adds	r0, #1
 8013eb8:	d0aa      	beq.n	8013e10 <_printf_i+0x12c>
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	079b      	lsls	r3, r3, #30
 8013ebe:	d413      	bmi.n	8013ee8 <_printf_i+0x204>
 8013ec0:	68e0      	ldr	r0, [r4, #12]
 8013ec2:	9b03      	ldr	r3, [sp, #12]
 8013ec4:	4298      	cmp	r0, r3
 8013ec6:	bfb8      	it	lt
 8013ec8:	4618      	movlt	r0, r3
 8013eca:	e7a3      	b.n	8013e14 <_printf_i+0x130>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	464a      	mov	r2, r9
 8013ed0:	4639      	mov	r1, r7
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	47c0      	blx	r8
 8013ed6:	3001      	adds	r0, #1
 8013ed8:	d09a      	beq.n	8013e10 <_printf_i+0x12c>
 8013eda:	3501      	adds	r5, #1
 8013edc:	68e3      	ldr	r3, [r4, #12]
 8013ede:	9a03      	ldr	r2, [sp, #12]
 8013ee0:	1a9b      	subs	r3, r3, r2
 8013ee2:	42ab      	cmp	r3, r5
 8013ee4:	dcf2      	bgt.n	8013ecc <_printf_i+0x1e8>
 8013ee6:	e7eb      	b.n	8013ec0 <_printf_i+0x1dc>
 8013ee8:	2500      	movs	r5, #0
 8013eea:	f104 0919 	add.w	r9, r4, #25
 8013eee:	e7f5      	b.n	8013edc <_printf_i+0x1f8>
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1ac      	bne.n	8013e4e <_printf_i+0x16a>
 8013ef4:	7803      	ldrb	r3, [r0, #0]
 8013ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013efa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013efe:	e76c      	b.n	8013dda <_printf_i+0xf6>
 8013f00:	080171fd 	.word	0x080171fd
 8013f04:	0801720e 	.word	0x0801720e

08013f08 <_read_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4c07      	ldr	r4, [pc, #28]	; (8013f28 <_read_r+0x20>)
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	4608      	mov	r0, r1
 8013f10:	4611      	mov	r1, r2
 8013f12:	2200      	movs	r2, #0
 8013f14:	6022      	str	r2, [r4, #0]
 8013f16:	461a      	mov	r2, r3
 8013f18:	f7ee fffa 	bl	8002f10 <_read>
 8013f1c:	1c43      	adds	r3, r0, #1
 8013f1e:	d102      	bne.n	8013f26 <_read_r+0x1e>
 8013f20:	6823      	ldr	r3, [r4, #0]
 8013f22:	b103      	cbz	r3, 8013f26 <_read_r+0x1e>
 8013f24:	602b      	str	r3, [r5, #0]
 8013f26:	bd38      	pop	{r3, r4, r5, pc}
 8013f28:	20006fcc 	.word	0x20006fcc

08013f2c <__swbuf_r>:
 8013f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f2e:	460e      	mov	r6, r1
 8013f30:	4614      	mov	r4, r2
 8013f32:	4605      	mov	r5, r0
 8013f34:	b118      	cbz	r0, 8013f3e <__swbuf_r+0x12>
 8013f36:	6983      	ldr	r3, [r0, #24]
 8013f38:	b90b      	cbnz	r3, 8013f3e <__swbuf_r+0x12>
 8013f3a:	f7fe fd25 	bl	8012988 <__sinit>
 8013f3e:	4b21      	ldr	r3, [pc, #132]	; (8013fc4 <__swbuf_r+0x98>)
 8013f40:	429c      	cmp	r4, r3
 8013f42:	d12a      	bne.n	8013f9a <__swbuf_r+0x6e>
 8013f44:	686c      	ldr	r4, [r5, #4]
 8013f46:	69a3      	ldr	r3, [r4, #24]
 8013f48:	60a3      	str	r3, [r4, #8]
 8013f4a:	89a3      	ldrh	r3, [r4, #12]
 8013f4c:	071a      	lsls	r2, r3, #28
 8013f4e:	d52e      	bpl.n	8013fae <__swbuf_r+0x82>
 8013f50:	6923      	ldr	r3, [r4, #16]
 8013f52:	b363      	cbz	r3, 8013fae <__swbuf_r+0x82>
 8013f54:	6923      	ldr	r3, [r4, #16]
 8013f56:	6820      	ldr	r0, [r4, #0]
 8013f58:	1ac0      	subs	r0, r0, r3
 8013f5a:	6963      	ldr	r3, [r4, #20]
 8013f5c:	b2f6      	uxtb	r6, r6
 8013f5e:	4283      	cmp	r3, r0
 8013f60:	4637      	mov	r7, r6
 8013f62:	dc04      	bgt.n	8013f6e <__swbuf_r+0x42>
 8013f64:	4621      	mov	r1, r4
 8013f66:	4628      	mov	r0, r5
 8013f68:	f000 f926 	bl	80141b8 <_fflush_r>
 8013f6c:	bb28      	cbnz	r0, 8013fba <__swbuf_r+0x8e>
 8013f6e:	68a3      	ldr	r3, [r4, #8]
 8013f70:	3b01      	subs	r3, #1
 8013f72:	60a3      	str	r3, [r4, #8]
 8013f74:	6823      	ldr	r3, [r4, #0]
 8013f76:	1c5a      	adds	r2, r3, #1
 8013f78:	6022      	str	r2, [r4, #0]
 8013f7a:	701e      	strb	r6, [r3, #0]
 8013f7c:	6963      	ldr	r3, [r4, #20]
 8013f7e:	3001      	adds	r0, #1
 8013f80:	4283      	cmp	r3, r0
 8013f82:	d004      	beq.n	8013f8e <__swbuf_r+0x62>
 8013f84:	89a3      	ldrh	r3, [r4, #12]
 8013f86:	07db      	lsls	r3, r3, #31
 8013f88:	d519      	bpl.n	8013fbe <__swbuf_r+0x92>
 8013f8a:	2e0a      	cmp	r6, #10
 8013f8c:	d117      	bne.n	8013fbe <__swbuf_r+0x92>
 8013f8e:	4621      	mov	r1, r4
 8013f90:	4628      	mov	r0, r5
 8013f92:	f000 f911 	bl	80141b8 <_fflush_r>
 8013f96:	b190      	cbz	r0, 8013fbe <__swbuf_r+0x92>
 8013f98:	e00f      	b.n	8013fba <__swbuf_r+0x8e>
 8013f9a:	4b0b      	ldr	r3, [pc, #44]	; (8013fc8 <__swbuf_r+0x9c>)
 8013f9c:	429c      	cmp	r4, r3
 8013f9e:	d101      	bne.n	8013fa4 <__swbuf_r+0x78>
 8013fa0:	68ac      	ldr	r4, [r5, #8]
 8013fa2:	e7d0      	b.n	8013f46 <__swbuf_r+0x1a>
 8013fa4:	4b09      	ldr	r3, [pc, #36]	; (8013fcc <__swbuf_r+0xa0>)
 8013fa6:	429c      	cmp	r4, r3
 8013fa8:	bf08      	it	eq
 8013faa:	68ec      	ldreq	r4, [r5, #12]
 8013fac:	e7cb      	b.n	8013f46 <__swbuf_r+0x1a>
 8013fae:	4621      	mov	r1, r4
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f000 f80d 	bl	8013fd0 <__swsetup_r>
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d0cc      	beq.n	8013f54 <__swbuf_r+0x28>
 8013fba:	f04f 37ff 	mov.w	r7, #4294967295
 8013fbe:	4638      	mov	r0, r7
 8013fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	080170ac 	.word	0x080170ac
 8013fc8:	080170cc 	.word	0x080170cc
 8013fcc:	0801708c 	.word	0x0801708c

08013fd0 <__swsetup_r>:
 8013fd0:	4b32      	ldr	r3, [pc, #200]	; (801409c <__swsetup_r+0xcc>)
 8013fd2:	b570      	push	{r4, r5, r6, lr}
 8013fd4:	681d      	ldr	r5, [r3, #0]
 8013fd6:	4606      	mov	r6, r0
 8013fd8:	460c      	mov	r4, r1
 8013fda:	b125      	cbz	r5, 8013fe6 <__swsetup_r+0x16>
 8013fdc:	69ab      	ldr	r3, [r5, #24]
 8013fde:	b913      	cbnz	r3, 8013fe6 <__swsetup_r+0x16>
 8013fe0:	4628      	mov	r0, r5
 8013fe2:	f7fe fcd1 	bl	8012988 <__sinit>
 8013fe6:	4b2e      	ldr	r3, [pc, #184]	; (80140a0 <__swsetup_r+0xd0>)
 8013fe8:	429c      	cmp	r4, r3
 8013fea:	d10f      	bne.n	801400c <__swsetup_r+0x3c>
 8013fec:	686c      	ldr	r4, [r5, #4]
 8013fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ff2:	b29a      	uxth	r2, r3
 8013ff4:	0715      	lsls	r5, r2, #28
 8013ff6:	d42c      	bmi.n	8014052 <__swsetup_r+0x82>
 8013ff8:	06d0      	lsls	r0, r2, #27
 8013ffa:	d411      	bmi.n	8014020 <__swsetup_r+0x50>
 8013ffc:	2209      	movs	r2, #9
 8013ffe:	6032      	str	r2, [r6, #0]
 8014000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014004:	81a3      	strh	r3, [r4, #12]
 8014006:	f04f 30ff 	mov.w	r0, #4294967295
 801400a:	e03e      	b.n	801408a <__swsetup_r+0xba>
 801400c:	4b25      	ldr	r3, [pc, #148]	; (80140a4 <__swsetup_r+0xd4>)
 801400e:	429c      	cmp	r4, r3
 8014010:	d101      	bne.n	8014016 <__swsetup_r+0x46>
 8014012:	68ac      	ldr	r4, [r5, #8]
 8014014:	e7eb      	b.n	8013fee <__swsetup_r+0x1e>
 8014016:	4b24      	ldr	r3, [pc, #144]	; (80140a8 <__swsetup_r+0xd8>)
 8014018:	429c      	cmp	r4, r3
 801401a:	bf08      	it	eq
 801401c:	68ec      	ldreq	r4, [r5, #12]
 801401e:	e7e6      	b.n	8013fee <__swsetup_r+0x1e>
 8014020:	0751      	lsls	r1, r2, #29
 8014022:	d512      	bpl.n	801404a <__swsetup_r+0x7a>
 8014024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014026:	b141      	cbz	r1, 801403a <__swsetup_r+0x6a>
 8014028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801402c:	4299      	cmp	r1, r3
 801402e:	d002      	beq.n	8014036 <__swsetup_r+0x66>
 8014030:	4630      	mov	r0, r6
 8014032:	f7fd fcab 	bl	801198c <_free_r>
 8014036:	2300      	movs	r3, #0
 8014038:	6363      	str	r3, [r4, #52]	; 0x34
 801403a:	89a3      	ldrh	r3, [r4, #12]
 801403c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014040:	81a3      	strh	r3, [r4, #12]
 8014042:	2300      	movs	r3, #0
 8014044:	6063      	str	r3, [r4, #4]
 8014046:	6923      	ldr	r3, [r4, #16]
 8014048:	6023      	str	r3, [r4, #0]
 801404a:	89a3      	ldrh	r3, [r4, #12]
 801404c:	f043 0308 	orr.w	r3, r3, #8
 8014050:	81a3      	strh	r3, [r4, #12]
 8014052:	6923      	ldr	r3, [r4, #16]
 8014054:	b94b      	cbnz	r3, 801406a <__swsetup_r+0x9a>
 8014056:	89a3      	ldrh	r3, [r4, #12]
 8014058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014060:	d003      	beq.n	801406a <__swsetup_r+0x9a>
 8014062:	4621      	mov	r1, r4
 8014064:	4630      	mov	r0, r6
 8014066:	f000 f8f5 	bl	8014254 <__smakebuf_r>
 801406a:	89a2      	ldrh	r2, [r4, #12]
 801406c:	f012 0301 	ands.w	r3, r2, #1
 8014070:	d00c      	beq.n	801408c <__swsetup_r+0xbc>
 8014072:	2300      	movs	r3, #0
 8014074:	60a3      	str	r3, [r4, #8]
 8014076:	6963      	ldr	r3, [r4, #20]
 8014078:	425b      	negs	r3, r3
 801407a:	61a3      	str	r3, [r4, #24]
 801407c:	6923      	ldr	r3, [r4, #16]
 801407e:	b953      	cbnz	r3, 8014096 <__swsetup_r+0xc6>
 8014080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014084:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014088:	d1ba      	bne.n	8014000 <__swsetup_r+0x30>
 801408a:	bd70      	pop	{r4, r5, r6, pc}
 801408c:	0792      	lsls	r2, r2, #30
 801408e:	bf58      	it	pl
 8014090:	6963      	ldrpl	r3, [r4, #20]
 8014092:	60a3      	str	r3, [r4, #8]
 8014094:	e7f2      	b.n	801407c <__swsetup_r+0xac>
 8014096:	2000      	movs	r0, #0
 8014098:	e7f7      	b.n	801408a <__swsetup_r+0xba>
 801409a:	bf00      	nop
 801409c:	20000024 	.word	0x20000024
 80140a0:	080170ac 	.word	0x080170ac
 80140a4:	080170cc 	.word	0x080170cc
 80140a8:	0801708c 	.word	0x0801708c

080140ac <__sflush_r>:
 80140ac:	898a      	ldrh	r2, [r1, #12]
 80140ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b2:	4605      	mov	r5, r0
 80140b4:	0710      	lsls	r0, r2, #28
 80140b6:	460c      	mov	r4, r1
 80140b8:	d458      	bmi.n	801416c <__sflush_r+0xc0>
 80140ba:	684b      	ldr	r3, [r1, #4]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	dc05      	bgt.n	80140cc <__sflush_r+0x20>
 80140c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	dc02      	bgt.n	80140cc <__sflush_r+0x20>
 80140c6:	2000      	movs	r0, #0
 80140c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80140ce:	2e00      	cmp	r6, #0
 80140d0:	d0f9      	beq.n	80140c6 <__sflush_r+0x1a>
 80140d2:	2300      	movs	r3, #0
 80140d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80140d8:	682f      	ldr	r7, [r5, #0]
 80140da:	6a21      	ldr	r1, [r4, #32]
 80140dc:	602b      	str	r3, [r5, #0]
 80140de:	d032      	beq.n	8014146 <__sflush_r+0x9a>
 80140e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80140e2:	89a3      	ldrh	r3, [r4, #12]
 80140e4:	075a      	lsls	r2, r3, #29
 80140e6:	d505      	bpl.n	80140f4 <__sflush_r+0x48>
 80140e8:	6863      	ldr	r3, [r4, #4]
 80140ea:	1ac0      	subs	r0, r0, r3
 80140ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140ee:	b10b      	cbz	r3, 80140f4 <__sflush_r+0x48>
 80140f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80140f2:	1ac0      	subs	r0, r0, r3
 80140f4:	2300      	movs	r3, #0
 80140f6:	4602      	mov	r2, r0
 80140f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80140fa:	6a21      	ldr	r1, [r4, #32]
 80140fc:	4628      	mov	r0, r5
 80140fe:	47b0      	blx	r6
 8014100:	1c43      	adds	r3, r0, #1
 8014102:	89a3      	ldrh	r3, [r4, #12]
 8014104:	d106      	bne.n	8014114 <__sflush_r+0x68>
 8014106:	6829      	ldr	r1, [r5, #0]
 8014108:	291d      	cmp	r1, #29
 801410a:	d848      	bhi.n	801419e <__sflush_r+0xf2>
 801410c:	4a29      	ldr	r2, [pc, #164]	; (80141b4 <__sflush_r+0x108>)
 801410e:	40ca      	lsrs	r2, r1
 8014110:	07d6      	lsls	r6, r2, #31
 8014112:	d544      	bpl.n	801419e <__sflush_r+0xf2>
 8014114:	2200      	movs	r2, #0
 8014116:	6062      	str	r2, [r4, #4]
 8014118:	04d9      	lsls	r1, r3, #19
 801411a:	6922      	ldr	r2, [r4, #16]
 801411c:	6022      	str	r2, [r4, #0]
 801411e:	d504      	bpl.n	801412a <__sflush_r+0x7e>
 8014120:	1c42      	adds	r2, r0, #1
 8014122:	d101      	bne.n	8014128 <__sflush_r+0x7c>
 8014124:	682b      	ldr	r3, [r5, #0]
 8014126:	b903      	cbnz	r3, 801412a <__sflush_r+0x7e>
 8014128:	6560      	str	r0, [r4, #84]	; 0x54
 801412a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801412c:	602f      	str	r7, [r5, #0]
 801412e:	2900      	cmp	r1, #0
 8014130:	d0c9      	beq.n	80140c6 <__sflush_r+0x1a>
 8014132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014136:	4299      	cmp	r1, r3
 8014138:	d002      	beq.n	8014140 <__sflush_r+0x94>
 801413a:	4628      	mov	r0, r5
 801413c:	f7fd fc26 	bl	801198c <_free_r>
 8014140:	2000      	movs	r0, #0
 8014142:	6360      	str	r0, [r4, #52]	; 0x34
 8014144:	e7c0      	b.n	80140c8 <__sflush_r+0x1c>
 8014146:	2301      	movs	r3, #1
 8014148:	4628      	mov	r0, r5
 801414a:	47b0      	blx	r6
 801414c:	1c41      	adds	r1, r0, #1
 801414e:	d1c8      	bne.n	80140e2 <__sflush_r+0x36>
 8014150:	682b      	ldr	r3, [r5, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0c5      	beq.n	80140e2 <__sflush_r+0x36>
 8014156:	2b1d      	cmp	r3, #29
 8014158:	d001      	beq.n	801415e <__sflush_r+0xb2>
 801415a:	2b16      	cmp	r3, #22
 801415c:	d101      	bne.n	8014162 <__sflush_r+0xb6>
 801415e:	602f      	str	r7, [r5, #0]
 8014160:	e7b1      	b.n	80140c6 <__sflush_r+0x1a>
 8014162:	89a3      	ldrh	r3, [r4, #12]
 8014164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014168:	81a3      	strh	r3, [r4, #12]
 801416a:	e7ad      	b.n	80140c8 <__sflush_r+0x1c>
 801416c:	690f      	ldr	r7, [r1, #16]
 801416e:	2f00      	cmp	r7, #0
 8014170:	d0a9      	beq.n	80140c6 <__sflush_r+0x1a>
 8014172:	0793      	lsls	r3, r2, #30
 8014174:	680e      	ldr	r6, [r1, #0]
 8014176:	bf08      	it	eq
 8014178:	694b      	ldreq	r3, [r1, #20]
 801417a:	600f      	str	r7, [r1, #0]
 801417c:	bf18      	it	ne
 801417e:	2300      	movne	r3, #0
 8014180:	eba6 0807 	sub.w	r8, r6, r7
 8014184:	608b      	str	r3, [r1, #8]
 8014186:	f1b8 0f00 	cmp.w	r8, #0
 801418a:	dd9c      	ble.n	80140c6 <__sflush_r+0x1a>
 801418c:	4643      	mov	r3, r8
 801418e:	463a      	mov	r2, r7
 8014190:	6a21      	ldr	r1, [r4, #32]
 8014192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014194:	4628      	mov	r0, r5
 8014196:	47b0      	blx	r6
 8014198:	2800      	cmp	r0, #0
 801419a:	dc06      	bgt.n	80141aa <__sflush_r+0xfe>
 801419c:	89a3      	ldrh	r3, [r4, #12]
 801419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141a2:	81a3      	strh	r3, [r4, #12]
 80141a4:	f04f 30ff 	mov.w	r0, #4294967295
 80141a8:	e78e      	b.n	80140c8 <__sflush_r+0x1c>
 80141aa:	4407      	add	r7, r0
 80141ac:	eba8 0800 	sub.w	r8, r8, r0
 80141b0:	e7e9      	b.n	8014186 <__sflush_r+0xda>
 80141b2:	bf00      	nop
 80141b4:	20400001 	.word	0x20400001

080141b8 <_fflush_r>:
 80141b8:	b538      	push	{r3, r4, r5, lr}
 80141ba:	690b      	ldr	r3, [r1, #16]
 80141bc:	4605      	mov	r5, r0
 80141be:	460c      	mov	r4, r1
 80141c0:	b1db      	cbz	r3, 80141fa <_fflush_r+0x42>
 80141c2:	b118      	cbz	r0, 80141cc <_fflush_r+0x14>
 80141c4:	6983      	ldr	r3, [r0, #24]
 80141c6:	b90b      	cbnz	r3, 80141cc <_fflush_r+0x14>
 80141c8:	f7fe fbde 	bl	8012988 <__sinit>
 80141cc:	4b0c      	ldr	r3, [pc, #48]	; (8014200 <_fflush_r+0x48>)
 80141ce:	429c      	cmp	r4, r3
 80141d0:	d109      	bne.n	80141e6 <_fflush_r+0x2e>
 80141d2:	686c      	ldr	r4, [r5, #4]
 80141d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141d8:	b17b      	cbz	r3, 80141fa <_fflush_r+0x42>
 80141da:	4621      	mov	r1, r4
 80141dc:	4628      	mov	r0, r5
 80141de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141e2:	f7ff bf63 	b.w	80140ac <__sflush_r>
 80141e6:	4b07      	ldr	r3, [pc, #28]	; (8014204 <_fflush_r+0x4c>)
 80141e8:	429c      	cmp	r4, r3
 80141ea:	d101      	bne.n	80141f0 <_fflush_r+0x38>
 80141ec:	68ac      	ldr	r4, [r5, #8]
 80141ee:	e7f1      	b.n	80141d4 <_fflush_r+0x1c>
 80141f0:	4b05      	ldr	r3, [pc, #20]	; (8014208 <_fflush_r+0x50>)
 80141f2:	429c      	cmp	r4, r3
 80141f4:	bf08      	it	eq
 80141f6:	68ec      	ldreq	r4, [r5, #12]
 80141f8:	e7ec      	b.n	80141d4 <_fflush_r+0x1c>
 80141fa:	2000      	movs	r0, #0
 80141fc:	bd38      	pop	{r3, r4, r5, pc}
 80141fe:	bf00      	nop
 8014200:	080170ac 	.word	0x080170ac
 8014204:	080170cc 	.word	0x080170cc
 8014208:	0801708c 	.word	0x0801708c

0801420c <__swhatbuf_r>:
 801420c:	b570      	push	{r4, r5, r6, lr}
 801420e:	460e      	mov	r6, r1
 8014210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014214:	2900      	cmp	r1, #0
 8014216:	b096      	sub	sp, #88	; 0x58
 8014218:	4614      	mov	r4, r2
 801421a:	461d      	mov	r5, r3
 801421c:	da07      	bge.n	801422e <__swhatbuf_r+0x22>
 801421e:	2300      	movs	r3, #0
 8014220:	602b      	str	r3, [r5, #0]
 8014222:	89b3      	ldrh	r3, [r6, #12]
 8014224:	061a      	lsls	r2, r3, #24
 8014226:	d410      	bmi.n	801424a <__swhatbuf_r+0x3e>
 8014228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801422c:	e00e      	b.n	801424c <__swhatbuf_r+0x40>
 801422e:	466a      	mov	r2, sp
 8014230:	f000 f858 	bl	80142e4 <_fstat_r>
 8014234:	2800      	cmp	r0, #0
 8014236:	dbf2      	blt.n	801421e <__swhatbuf_r+0x12>
 8014238:	9a01      	ldr	r2, [sp, #4]
 801423a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801423e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014242:	425a      	negs	r2, r3
 8014244:	415a      	adcs	r2, r3
 8014246:	602a      	str	r2, [r5, #0]
 8014248:	e7ee      	b.n	8014228 <__swhatbuf_r+0x1c>
 801424a:	2340      	movs	r3, #64	; 0x40
 801424c:	2000      	movs	r0, #0
 801424e:	6023      	str	r3, [r4, #0]
 8014250:	b016      	add	sp, #88	; 0x58
 8014252:	bd70      	pop	{r4, r5, r6, pc}

08014254 <__smakebuf_r>:
 8014254:	898b      	ldrh	r3, [r1, #12]
 8014256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014258:	079d      	lsls	r5, r3, #30
 801425a:	4606      	mov	r6, r0
 801425c:	460c      	mov	r4, r1
 801425e:	d507      	bpl.n	8014270 <__smakebuf_r+0x1c>
 8014260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014264:	6023      	str	r3, [r4, #0]
 8014266:	6123      	str	r3, [r4, #16]
 8014268:	2301      	movs	r3, #1
 801426a:	6163      	str	r3, [r4, #20]
 801426c:	b002      	add	sp, #8
 801426e:	bd70      	pop	{r4, r5, r6, pc}
 8014270:	ab01      	add	r3, sp, #4
 8014272:	466a      	mov	r2, sp
 8014274:	f7ff ffca 	bl	801420c <__swhatbuf_r>
 8014278:	9900      	ldr	r1, [sp, #0]
 801427a:	4605      	mov	r5, r0
 801427c:	4630      	mov	r0, r6
 801427e:	f7fd fbd3 	bl	8011a28 <_malloc_r>
 8014282:	b948      	cbnz	r0, 8014298 <__smakebuf_r+0x44>
 8014284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014288:	059a      	lsls	r2, r3, #22
 801428a:	d4ef      	bmi.n	801426c <__smakebuf_r+0x18>
 801428c:	f023 0303 	bic.w	r3, r3, #3
 8014290:	f043 0302 	orr.w	r3, r3, #2
 8014294:	81a3      	strh	r3, [r4, #12]
 8014296:	e7e3      	b.n	8014260 <__smakebuf_r+0xc>
 8014298:	4b0d      	ldr	r3, [pc, #52]	; (80142d0 <__smakebuf_r+0x7c>)
 801429a:	62b3      	str	r3, [r6, #40]	; 0x28
 801429c:	89a3      	ldrh	r3, [r4, #12]
 801429e:	6020      	str	r0, [r4, #0]
 80142a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142a4:	81a3      	strh	r3, [r4, #12]
 80142a6:	9b00      	ldr	r3, [sp, #0]
 80142a8:	6163      	str	r3, [r4, #20]
 80142aa:	9b01      	ldr	r3, [sp, #4]
 80142ac:	6120      	str	r0, [r4, #16]
 80142ae:	b15b      	cbz	r3, 80142c8 <__smakebuf_r+0x74>
 80142b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142b4:	4630      	mov	r0, r6
 80142b6:	f000 f827 	bl	8014308 <_isatty_r>
 80142ba:	b128      	cbz	r0, 80142c8 <__smakebuf_r+0x74>
 80142bc:	89a3      	ldrh	r3, [r4, #12]
 80142be:	f023 0303 	bic.w	r3, r3, #3
 80142c2:	f043 0301 	orr.w	r3, r3, #1
 80142c6:	81a3      	strh	r3, [r4, #12]
 80142c8:	89a3      	ldrh	r3, [r4, #12]
 80142ca:	431d      	orrs	r5, r3
 80142cc:	81a5      	strh	r5, [r4, #12]
 80142ce:	e7cd      	b.n	801426c <__smakebuf_r+0x18>
 80142d0:	08012951 	.word	0x08012951

080142d4 <_malloc_usable_size_r>:
 80142d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142d8:	1f18      	subs	r0, r3, #4
 80142da:	2b00      	cmp	r3, #0
 80142dc:	bfbc      	itt	lt
 80142de:	580b      	ldrlt	r3, [r1, r0]
 80142e0:	18c0      	addlt	r0, r0, r3
 80142e2:	4770      	bx	lr

080142e4 <_fstat_r>:
 80142e4:	b538      	push	{r3, r4, r5, lr}
 80142e6:	4c07      	ldr	r4, [pc, #28]	; (8014304 <_fstat_r+0x20>)
 80142e8:	2300      	movs	r3, #0
 80142ea:	4605      	mov	r5, r0
 80142ec:	4608      	mov	r0, r1
 80142ee:	4611      	mov	r1, r2
 80142f0:	6023      	str	r3, [r4, #0]
 80142f2:	f7ee fe52 	bl	8002f9a <_fstat>
 80142f6:	1c43      	adds	r3, r0, #1
 80142f8:	d102      	bne.n	8014300 <_fstat_r+0x1c>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	b103      	cbz	r3, 8014300 <_fstat_r+0x1c>
 80142fe:	602b      	str	r3, [r5, #0]
 8014300:	bd38      	pop	{r3, r4, r5, pc}
 8014302:	bf00      	nop
 8014304:	20006fcc 	.word	0x20006fcc

08014308 <_isatty_r>:
 8014308:	b538      	push	{r3, r4, r5, lr}
 801430a:	4c06      	ldr	r4, [pc, #24]	; (8014324 <_isatty_r+0x1c>)
 801430c:	2300      	movs	r3, #0
 801430e:	4605      	mov	r5, r0
 8014310:	4608      	mov	r0, r1
 8014312:	6023      	str	r3, [r4, #0]
 8014314:	f7ee fe51 	bl	8002fba <_isatty>
 8014318:	1c43      	adds	r3, r0, #1
 801431a:	d102      	bne.n	8014322 <_isatty_r+0x1a>
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	b103      	cbz	r3, 8014322 <_isatty_r+0x1a>
 8014320:	602b      	str	r3, [r5, #0]
 8014322:	bd38      	pop	{r3, r4, r5, pc}
 8014324:	20006fcc 	.word	0x20006fcc

08014328 <_init>:
 8014328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432a:	bf00      	nop
 801432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801432e:	bc08      	pop	{r3}
 8014330:	469e      	mov	lr, r3
 8014332:	4770      	bx	lr

08014334 <_fini>:
 8014334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014336:	bf00      	nop
 8014338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801433a:	bc08      	pop	{r3}
 801433c:	469e      	mov	lr, r3
 801433e:	4770      	bx	lr
