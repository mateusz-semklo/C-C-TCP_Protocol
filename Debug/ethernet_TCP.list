
ethernet_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ed4  08015cd0  08015cd0  00025cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ba4  08018ba4  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018ba4  08018ba4  00028ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018bac  08018bac  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018bac  08018bac  00028bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018bb0  08018bb0  00028bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018bb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ea8  200001f0  08018da4  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007098  08018da4  00037098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033840  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006590  00000000  00000000  00063a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af0  00000000  00000000  00069ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0006bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033798  00000000  00000000  0006d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024394  00000000  00000000  000a0c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010303b  00000000  00000000  000c5004  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c803f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008008  00000000  00000000  001c80bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015cb8 	.word	0x08015cb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08015cb8 	.word	0x08015cb8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2028      	movs	r0, #40	; 0x28
 8000f36:	4798      	blx	r3
 8000f38:	60f8      	str	r0, [r7, #12]
    if (node)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000f40:	2228      	movs	r2, #40	; 0x28
 8000f42:	2100      	movs	r1, #0
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f011 fbb8 	bl	80126ba <memset>
    }

    return node;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000f60:	e037      	b.n	8000fd2 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <cJSON_Delete+0x32>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ffe7 	bl	8000f54 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <cJSON_Delete+0x52>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <cJSON_Delete+0x8c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	6912      	ldr	r2, [r2, #16]
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <cJSON_Delete+0x72>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <cJSON_Delete+0x8c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6a12      	ldr	r2, [r2, #32]
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <cJSON_Delete+0x8c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	4798      	blx	r3
        item = next;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1c4      	bne.n	8000f62 <cJSON_Delete+0xe>
    }
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000fe8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b099      	sub	sp, #100	; 0x64
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	f04f 0400 	mov.w	r4, #0
 800100a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800100e:	2300      	movs	r3, #0
 8001010:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001012:	f7ff ffe7 	bl	8000fe4 <get_decimal_point>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <parse_number+0x36>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <parse_number+0x3a>
    {
        return false;
 800102e:	2300      	movs	r3, #0
 8001030:	e104      	b.n	800123c <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001032:	2300      	movs	r3, #0
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001036:	e09f      	b.n	8001178 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001042:	440b      	add	r3, r1
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	3b2b      	subs	r3, #43	; 0x2b
 800104a:	2b3a      	cmp	r3, #58	; 0x3a
 800104c:	f200 80a4 	bhi.w	8001198 <parse_number+0x1a0>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <parse_number+0x60>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	08001145 	.word	0x08001145
 800105c:	08001199 	.word	0x08001199
 8001060:	08001145 	.word	0x08001145
 8001064:	08001163 	.word	0x08001163
 8001068:	08001199 	.word	0x08001199
 800106c:	08001145 	.word	0x08001145
 8001070:	08001145 	.word	0x08001145
 8001074:	08001145 	.word	0x08001145
 8001078:	08001145 	.word	0x08001145
 800107c:	08001145 	.word	0x08001145
 8001080:	08001145 	.word	0x08001145
 8001084:	08001145 	.word	0x08001145
 8001088:	08001145 	.word	0x08001145
 800108c:	08001145 	.word	0x08001145
 8001090:	08001145 	.word	0x08001145
 8001094:	08001199 	.word	0x08001199
 8001098:	08001199 	.word	0x08001199
 800109c:	08001199 	.word	0x08001199
 80010a0:	08001199 	.word	0x08001199
 80010a4:	08001199 	.word	0x08001199
 80010a8:	08001199 	.word	0x08001199
 80010ac:	08001199 	.word	0x08001199
 80010b0:	08001199 	.word	0x08001199
 80010b4:	08001199 	.word	0x08001199
 80010b8:	08001199 	.word	0x08001199
 80010bc:	08001199 	.word	0x08001199
 80010c0:	08001145 	.word	0x08001145
 80010c4:	08001199 	.word	0x08001199
 80010c8:	08001199 	.word	0x08001199
 80010cc:	08001199 	.word	0x08001199
 80010d0:	08001199 	.word	0x08001199
 80010d4:	08001199 	.word	0x08001199
 80010d8:	08001199 	.word	0x08001199
 80010dc:	08001199 	.word	0x08001199
 80010e0:	08001199 	.word	0x08001199
 80010e4:	08001199 	.word	0x08001199
 80010e8:	08001199 	.word	0x08001199
 80010ec:	08001199 	.word	0x08001199
 80010f0:	08001199 	.word	0x08001199
 80010f4:	08001199 	.word	0x08001199
 80010f8:	08001199 	.word	0x08001199
 80010fc:	08001199 	.word	0x08001199
 8001100:	08001199 	.word	0x08001199
 8001104:	08001199 	.word	0x08001199
 8001108:	08001199 	.word	0x08001199
 800110c:	08001199 	.word	0x08001199
 8001110:	08001199 	.word	0x08001199
 8001114:	08001199 	.word	0x08001199
 8001118:	08001199 	.word	0x08001199
 800111c:	08001199 	.word	0x08001199
 8001120:	08001199 	.word	0x08001199
 8001124:	08001199 	.word	0x08001199
 8001128:	08001199 	.word	0x08001199
 800112c:	08001199 	.word	0x08001199
 8001130:	08001199 	.word	0x08001199
 8001134:	08001199 	.word	0x08001199
 8001138:	08001199 	.word	0x08001199
 800113c:	08001199 	.word	0x08001199
 8001140:	08001145 	.word	0x08001145
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6899      	ldr	r1, [r3, #8]
 800114c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114e:	440b      	add	r3, r1
 8001150:	4413      	add	r3, r2
 8001152:	7819      	ldrb	r1, [r3, #0]
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800115a:	4413      	add	r3, r2
 800115c:	460a      	mov	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
                break;
 8001160:	e007      	b.n	8001172 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 8001162:	f107 0208 	add.w	r2, r7, #8
 8001166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001168:	4413      	add	r3, r2
 800116a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800116e:	701a      	strb	r2, [r3, #0]
                break;
 8001170:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001174:	3301      	adds	r3, #1
 8001176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800117a:	2b3e      	cmp	r3, #62	; 0x3e
 800117c:	d80e      	bhi.n	800119c <parse_number+0x1a4>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <parse_number+0x1a4>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118a:	441a      	add	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	f4ff af51 	bcc.w	8001038 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001196:	e001      	b.n	800119c <parse_number+0x1a4>
                goto loop_end;
 8001198:	bf00      	nop
 800119a:	e000      	b.n	800119e <parse_number+0x1a6>
loop_end:
 800119c:	bf00      	nop
    number_c_string[i] = '\0';
 800119e:	f107 0208 	add.w	r2, r7, #8
 80011a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a4:	4413      	add	r3, r2
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80011aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f012 fa4f 	bl	8013658 <strtod>
 80011ba:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80011be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d101      	bne.n	80011cc <parse_number+0x1d4>
    {
        return false; /* parse_error */
 80011c8:	2300      	movs	r3, #0
 80011ca:	e037      	b.n	800123c <parse_number+0x244>
    }

    item->valuedouble = number;
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80011d2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80011d6:	a31d      	add	r3, pc, #116	; (adr r3, 800124c <parse_number+0x254>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011e0:	f7ff fcb0 	bl	8000b44 <__aeabi_dcmpge>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	e015      	b.n	8001220 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <parse_number+0x250>)
 80011fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011fe:	f7ff fc97 	bl	8000b30 <__aeabi_dcmple>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	e006      	b.n	8001220 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8001212:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001216:	f7ff fcbf 	bl	8000b98 <__aeabi_d2iz>
 800121a:	4602      	mov	r2, r0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2208      	movs	r2, #8
 8001224:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122c:	4611      	mov	r1, r2
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	1a8a      	subs	r2, r1, r2
 8001234:	441a      	add	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	609a      	str	r2, [r3, #8]
    return true;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3764      	adds	r7, #100	; 0x64
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	f3af 8000 	nop.w
 8001248:	c1e00000 	.word	0xc1e00000
 800124c:	ffc00000 	.word	0xffc00000
 8001250:	41dfffff 	.word	0x41dfffff

08001254 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <ensure+0x20>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <ensure+0x24>
    {
        return NULL;
 8001274:	2300      	movs	r3, #0
 8001276:	e086      	b.n	8001386 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <ensure+0x3c>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	d301      	bcc.n	8001290 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800128c:	2300      	movs	r3, #0
 800128e:	e07a      	b.n	8001386 <ensure+0x132>
    }

    if (needed > INT_MAX)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da01      	bge.n	800129a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001296:	2300      	movs	r3, #0
 8001298:	e075      	b.n	8001386 <ensure+0x132>
    }

    needed += p->offset + 1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	3301      	adds	r3, #1
 80012a4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d805      	bhi.n	80012bc <ensure+0x68>
    {
        return p->buffer + p->offset;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4413      	add	r3, r2
 80012ba:	e064      	b.n	8001386 <ensure+0x132>
    }

    if (p->noalloc) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <ensure+0x74>
        return NULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e05e      	b.n	8001386 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ce:	d308      	bcc.n	80012e2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db03      	blt.n	80012de <ensure+0x8a>
        {
            newsize = INT_MAX;
 80012d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e004      	b.n	80012e8 <ensure+0x94>
        }
        else
        {
            return NULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	e051      	b.n	8001386 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d018      	beq.n	8001322 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	4610      	mov	r0, r2
 80012fc:	4798      	blx	r3
 80012fe:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d135      	bne.n	8001372 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	4610      	mov	r0, r2
 8001310:	4798      	blx	r3
            p->length = 0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

            return NULL;
 800131e:	2300      	movs	r3, #0
 8001320:	e031      	b.n	8001386 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	68b8      	ldr	r0, [r7, #8]
 8001328:	4798      	blx	r3
 800132a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10d      	bne.n	800134e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	4610      	mov	r0, r2
 800133c:	4798      	blx	r3
            p->length = 0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

            return NULL;
 800134a:	2300      	movs	r3, #0
 800134c:	e01b      	b.n	8001386 <ensure+0x132>
        }
        if (newbuffer)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d008      	beq.n	8001366 <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6819      	ldr	r1, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	461a      	mov	r2, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f011 f986 	bl	8012672 <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	4610      	mov	r0, r2
 8001370:	4798      	blx	r3
    }
    p->length = newsize;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800138e:	b590      	push	{r4, r7, lr}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <update_offset+0x3a>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00f      	beq.n	80013c8 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4413      	add	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689c      	ldr	r4, [r3, #8]
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7fe ff29 	bl	8000210 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	18e2      	adds	r2, r4, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e000      	b.n	80013ca <update_offset+0x3c>
        return;
 80013c8:	bf00      	nop
}
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}

080013d0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80013d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013d4:	b087      	sub	sp, #28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80013dc:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	68fe      	ldr	r6, [r7, #12]
 80013e4:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	687e      	ldr	r6, [r7, #4]
 80013ec:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80013f0:	f7ff fbb2 	bl	8000b58 <__aeabi_dcmpgt>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <compare_double+0x34>
 80013fa:	68bc      	ldr	r4, [r7, #8]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001402:	e003      	b.n	800140c <compare_double+0x3c>
 8001404:	683c      	ldr	r4, [r7, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800140c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001418:	f7fe ff56 	bl	80002c8 <__aeabi_dsub>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	4698      	mov	r8, r3
 8001422:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <compare_double+0x94>)
 800142c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001430:	f7ff f902 	bl	8000638 <__aeabi_dmul>
 8001434:	4603      	mov	r3, r0
 8001436:	460c      	mov	r4, r1
 8001438:	4619      	mov	r1, r3
 800143a:	4622      	mov	r2, r4
 800143c:	2301      	movs	r3, #1
 800143e:	461c      	mov	r4, r3
 8001440:	4613      	mov	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	4640      	mov	r0, r8
 8001446:	4649      	mov	r1, r9
 8001448:	f7ff fb72 	bl	8000b30 <__aeabi_dcmple>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <compare_double+0x86>
 8001452:	2300      	movs	r3, #0
 8001454:	461c      	mov	r4, r3
 8001456:	b2e3      	uxtb	r3, r4
}
 8001458:	4618      	mov	r0, r3
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001462:	bf00      	nop
 8001464:	3cb00000 	.word	0x3cb00000

08001468 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b093      	sub	sp, #76	; 0x4c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800147c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800149c:	f7ff fda2 	bl	8000fe4 <get_decimal_point>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <print_number+0x54>
    {
        return false;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e09f      	b.n	80015fc <print_number+0x194>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80014bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014c4:	f7ff fb52 	bl	8000b6c <__aeabi_dcmpun>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d121      	bne.n	8001512 <print_number+0xaa>
 80014ce:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80014d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80014d6:	2301      	movs	r3, #1
 80014d8:	461e      	mov	r6, r3
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <print_number+0x19c>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	4629      	mov	r1, r5
 80014e4:	f7ff fb42 	bl	8000b6c <__aeabi_dcmpun>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10b      	bne.n	8001506 <print_number+0x9e>
 80014ee:	f04f 32ff 	mov.w	r2, #4294967295
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <print_number+0x19c>)
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7ff fb1a 	bl	8000b30 <__aeabi_dcmple>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <print_number+0x9e>
 8001502:	2300      	movs	r3, #0
 8001504:	461e      	mov	r6, r3
 8001506:	b2f3      	uxtb	r3, r6
 8001508:	f083 0301 	eor.w	r3, r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00a      	beq.n	8001528 <print_number+0xc0>
    {
        length = sprintf((char*)number_buffer, "null");
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <print_number+0x1a0>)
 8001518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151c:	6018      	str	r0, [r3, #0]
 800151e:	3304      	adds	r3, #4
 8001520:	7019      	strb	r1, [r3, #0]
 8001522:	2304      	movs	r3, #4
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
 8001526:	e027      	b.n	8001578 <print_number+0x110>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001528:	f107 0014 	add.w	r0, r7, #20
 800152c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001530:	4936      	ldr	r1, [pc, #216]	; (800160c <print_number+0x1a4>)
 8001532:	f011 f9d7 	bl	80128e4 <siprintf>
 8001536:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001538:	f107 0208 	add.w	r2, r7, #8
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4933      	ldr	r1, [pc, #204]	; (8001610 <print_number+0x1a8>)
 8001542:	4618      	mov	r0, r3
 8001544:	f011 f9ee 	bl	8012924 <siscanf>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d10c      	bne.n	8001568 <print_number+0x100>
 800154e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001552:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001556:	eeb0 0a47 	vmov.f32	s0, s14
 800155a:	eef0 0a67 	vmov.f32	s1, s15
 800155e:	f7ff ff37 	bl	80013d0 <compare_double>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <print_number+0x110>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001568:	f107 0014 	add.w	r0, r7, #20
 800156c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001570:	4928      	ldr	r1, [pc, #160]	; (8001614 <print_number+0x1ac>)
 8001572:	f011 f9b7 	bl	80128e4 <siprintf>
 8001576:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157a:	2b00      	cmp	r3, #0
 800157c:	db02      	blt.n	8001584 <print_number+0x11c>
 800157e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001580:	2b19      	cmp	r3, #25
 8001582:	dd01      	ble.n	8001588 <print_number+0x120>
    {
        return false;
 8001584:	2300      	movs	r3, #0
 8001586:	e039      	b.n	80015fc <print_number+0x194>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800158a:	3301      	adds	r3, #1
 800158c:	4619      	mov	r1, r3
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7ff fe60 	bl	8001254 <ensure>
 8001594:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <print_number+0x138>
    {
        return false;
 800159c:	2300      	movs	r3, #0
 800159e:	e02d      	b.n	80015fc <print_number+0x194>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
 80015a4:	e01a      	b.n	80015dc <print_number+0x174>
    {
        if (number_buffer[i] == decimal_point)
 80015a6:	f107 0214 	add.w	r2, r7, #20
 80015aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d105      	bne.n	80015c4 <print_number+0x15c>
        {
            output_pointer[i] = '.';
 80015b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015bc:	4413      	add	r3, r2
 80015be:	222e      	movs	r2, #46	; 0x2e
 80015c0:	701a      	strb	r2, [r3, #0]
            continue;
 80015c2:	e008      	b.n	80015d6 <print_number+0x16e>
        }

        output_pointer[i] = number_buffer[i];
 80015c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c8:	4413      	add	r3, r2
 80015ca:	f107 0114 	add.w	r1, r7, #20
 80015ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80015d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d8:	3301      	adds	r3, #1
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3e0      	bcc.n	80015a6 <print_number+0x13e>
    }
    output_pointer[i] = '\0';
 80015e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f4:	441a      	add	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	609a      	str	r2, [r3, #8]

    return true;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	374c      	adds	r7, #76	; 0x4c
 8001600:	46bd      	mov	sp, r7
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001604:	7fefffff 	.word	0x7fefffff
 8001608:	08015cdc 	.word	0x08015cdc
 800160c:	08015ce4 	.word	0x08015ce4
 8001610:	08015cec 	.word	0x08015cec
 8001614:	08015cf0 	.word	0x08015cf0

08001618 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	e04c      	b.n	80016c8 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b2f      	cmp	r3, #47	; 0x2f
 8001638:	d90f      	bls.n	800165a <parse_hex4+0x42>
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b39      	cmp	r3, #57	; 0x39
 8001644:	d809      	bhi.n	800165a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	3b30      	subs	r3, #48	; 0x30
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e02d      	b.n	80016b6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b40      	cmp	r3, #64	; 0x40
 8001664:	d90f      	bls.n	8001686 <parse_hex4+0x6e>
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b46      	cmp	r3, #70	; 0x46
 8001670:	d809      	bhi.n	8001686 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	3b37      	subs	r3, #55	; 0x37
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e017      	b.n	80016b6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b60      	cmp	r3, #96	; 0x60
 8001690:	d90f      	bls.n	80016b2 <parse_hex4+0x9a>
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b66      	cmp	r3, #102	; 0x66
 800169c:	d809      	bhi.n	80016b2 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	3b57      	subs	r3, #87	; 0x57
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e001      	b.n	80016b6 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e00c      	b.n	80016d0 <parse_hex4+0xb8>
        }

        if (i < 3)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d802      	bhi.n	80016c2 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3301      	adds	r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d9af      	bls.n	800162e <parse_hex4+0x16>
        }
    }

    return h;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b05      	cmp	r3, #5
 8001714:	f340 80b7 	ble.w	8001886 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	3302      	adds	r3, #2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff7b 	bl	8001618 <parse_hex4>
 8001722:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800172a:	d304      	bcc.n	8001736 <utf16_literal_to_utf8+0x5a>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001732:	f0c0 80aa 	bcc.w	800188a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800173c:	d337      	bcc.n	80017ae <utf16_literal_to_utf8+0xd2>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001744:	d233      	bcs.n	80017ae <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	3306      	adds	r3, #6
 800174a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001750:	230c      	movs	r3, #12
 8001752:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b05      	cmp	r3, #5
 800175e:	f340 8096 	ble.w	800188e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b5c      	cmp	r3, #92	; 0x5c
 8001768:	f040 8093 	bne.w	8001892 <utf16_literal_to_utf8+0x1b6>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b75      	cmp	r3, #117	; 0x75
 8001774:	f040 808d 	bne.w	8001892 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3302      	adds	r3, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff4b 	bl	8001618 <parse_hex4>
 8001782:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800178a:	f0c0 8082 	bcc.w	8001892 <utf16_literal_to_utf8+0x1b6>
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001794:	d27d      	bcs.n	8001892 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	029a      	lsls	r2, r3, #10
 800179a:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <utf16_literal_to_utf8+0x1c8>)
 800179c:	4013      	ands	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80017ac:	e004      	b.n	80017b8 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80017ae:	2306      	movs	r3, #6
 80017b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	2b7f      	cmp	r3, #127	; 0x7f
 80017bc:	d803      	bhi.n	80017c6 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80017c4:	e01f      	b.n	8001806 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017cc:	d206      	bcs.n	80017dc <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80017d4:	23c0      	movs	r3, #192	; 0xc0
 80017d6:	f887 3020 	strb.w	r3, [r7, #32]
 80017da:	e014      	b.n	8001806 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d206      	bcs.n	80017f2 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80017ea:	23e0      	movs	r3, #224	; 0xe0
 80017ec:	f887 3020 	strb.w	r3, [r7, #32]
 80017f0:	e009      	b.n	8001806 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80017f8:	d24d      	bcs.n	8001896 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80017fa:	2304      	movs	r3, #4
 80017fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001800:	23f0      	movs	r3, #240	; 0xf0
 8001802:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800180a:	3b01      	subs	r3, #1
 800180c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001810:	e015      	b.n	800183e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181a:	b2da      	uxtb	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001824:	440b      	add	r3, r1
 8001826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001834:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001838:	3b01      	subs	r3, #1
 800183a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800183e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e5      	bne.n	8001812 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800184a:	2b01      	cmp	r3, #1
 800184c:	d909      	bls.n	8001862 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	b2d9      	uxtb	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f897 2020 	ldrb.w	r2, [r7, #32]
 800185a:	430a      	orrs	r2, r1
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e007      	b.n	8001872 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800187a:	441a      	add	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001880:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001884:	e009      	b.n	800189a <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001886:	bf00      	nop
 8001888:	e006      	b.n	8001898 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 800188a:	bf00      	nop
 800188c:	e004      	b.n	8001898 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 800188e:	bf00      	nop
 8001890:	e002      	b.n	8001898 <utf16_literal_to_utf8+0x1bc>

fail:
 8001892:	bf00      	nop
 8001894:	e000      	b.n	8001898 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001896:	bf00      	nop
    return 0;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	000ffc00 	.word	0x000ffc00

080018a8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b22      	cmp	r3, #34	; 0x22
 80018e4:	f040 816c 	bne.w	8001bc0 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80018f0:	e018      	b.n	8001924 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b5c      	cmp	r3, #92	; 0x5c
 80018f8:	d111      	bne.n	800191e <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	3301      	adds	r3, #1
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	461a      	mov	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	f080 8159 	bcs.w	8001bc4 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	3301      	adds	r3, #1
 8001916:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	3301      	adds	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	3301      	adds	r3, #1
 8001922:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	461a      	mov	r2, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	d203      	bcs.n	800193e <parse_string+0x96>
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b22      	cmp	r3, #34	; 0x22
 800193c:	d1d9      	bne.n	80018f2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	461a      	mov	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	f080 813b 	bcs.w	8001bc8 <parse_string+0x320>
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b22      	cmp	r3, #34	; 0x22
 8001958:	f040 8136 	bne.w	8001bc8 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	6811      	ldr	r1, [r2, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	6892      	ldr	r2, [r2, #8]
 8001966:	440a      	add	r2, r1
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	461a      	mov	r2, r3
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	3201      	adds	r2, #1
 800197a:	4610      	mov	r0, r2
 800197c:	4798      	blx	r3
 800197e:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 8122 	beq.w	8001bcc <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800198c:	e0fc      	b.n	8001b88 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b5c      	cmp	r3, #92	; 0x5c
 8001994:	d008      	beq.n	80019a8 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	1c53      	adds	r3, r2, #1
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	60f9      	str	r1, [r7, #12]
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e0ef      	b.n	8001b88 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f340 810c 	ble.w	8001bd0 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3301      	adds	r3, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3b22      	subs	r3, #34	; 0x22
 80019c0:	2b53      	cmp	r3, #83	; 0x53
 80019c2:	f200 8107 	bhi.w	8001bd4 <parse_string+0x32c>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <parse_string+0x124>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	08001b59 	.word	0x08001b59
 80019d0:	08001bd5 	.word	0x08001bd5
 80019d4:	08001bd5 	.word	0x08001bd5
 80019d8:	08001bd5 	.word	0x08001bd5
 80019dc:	08001bd5 	.word	0x08001bd5
 80019e0:	08001bd5 	.word	0x08001bd5
 80019e4:	08001bd5 	.word	0x08001bd5
 80019e8:	08001bd5 	.word	0x08001bd5
 80019ec:	08001bd5 	.word	0x08001bd5
 80019f0:	08001bd5 	.word	0x08001bd5
 80019f4:	08001bd5 	.word	0x08001bd5
 80019f8:	08001bd5 	.word	0x08001bd5
 80019fc:	08001bd5 	.word	0x08001bd5
 8001a00:	08001b59 	.word	0x08001b59
 8001a04:	08001bd5 	.word	0x08001bd5
 8001a08:	08001bd5 	.word	0x08001bd5
 8001a0c:	08001bd5 	.word	0x08001bd5
 8001a10:	08001bd5 	.word	0x08001bd5
 8001a14:	08001bd5 	.word	0x08001bd5
 8001a18:	08001bd5 	.word	0x08001bd5
 8001a1c:	08001bd5 	.word	0x08001bd5
 8001a20:	08001bd5 	.word	0x08001bd5
 8001a24:	08001bd5 	.word	0x08001bd5
 8001a28:	08001bd5 	.word	0x08001bd5
 8001a2c:	08001bd5 	.word	0x08001bd5
 8001a30:	08001bd5 	.word	0x08001bd5
 8001a34:	08001bd5 	.word	0x08001bd5
 8001a38:	08001bd5 	.word	0x08001bd5
 8001a3c:	08001bd5 	.word	0x08001bd5
 8001a40:	08001bd5 	.word	0x08001bd5
 8001a44:	08001bd5 	.word	0x08001bd5
 8001a48:	08001bd5 	.word	0x08001bd5
 8001a4c:	08001bd5 	.word	0x08001bd5
 8001a50:	08001bd5 	.word	0x08001bd5
 8001a54:	08001bd5 	.word	0x08001bd5
 8001a58:	08001bd5 	.word	0x08001bd5
 8001a5c:	08001bd5 	.word	0x08001bd5
 8001a60:	08001bd5 	.word	0x08001bd5
 8001a64:	08001bd5 	.word	0x08001bd5
 8001a68:	08001bd5 	.word	0x08001bd5
 8001a6c:	08001bd5 	.word	0x08001bd5
 8001a70:	08001bd5 	.word	0x08001bd5
 8001a74:	08001bd5 	.word	0x08001bd5
 8001a78:	08001bd5 	.word	0x08001bd5
 8001a7c:	08001bd5 	.word	0x08001bd5
 8001a80:	08001bd5 	.word	0x08001bd5
 8001a84:	08001bd5 	.word	0x08001bd5
 8001a88:	08001bd5 	.word	0x08001bd5
 8001a8c:	08001bd5 	.word	0x08001bd5
 8001a90:	08001bd5 	.word	0x08001bd5
 8001a94:	08001bd5 	.word	0x08001bd5
 8001a98:	08001bd5 	.word	0x08001bd5
 8001a9c:	08001bd5 	.word	0x08001bd5
 8001aa0:	08001bd5 	.word	0x08001bd5
 8001aa4:	08001bd5 	.word	0x08001bd5
 8001aa8:	08001bd5 	.word	0x08001bd5
 8001aac:	08001bd5 	.word	0x08001bd5
 8001ab0:	08001bd5 	.word	0x08001bd5
 8001ab4:	08001b59 	.word	0x08001b59
 8001ab8:	08001bd5 	.word	0x08001bd5
 8001abc:	08001bd5 	.word	0x08001bd5
 8001ac0:	08001bd5 	.word	0x08001bd5
 8001ac4:	08001bd5 	.word	0x08001bd5
 8001ac8:	08001bd5 	.word	0x08001bd5
 8001acc:	08001b1d 	.word	0x08001b1d
 8001ad0:	08001bd5 	.word	0x08001bd5
 8001ad4:	08001bd5 	.word	0x08001bd5
 8001ad8:	08001bd5 	.word	0x08001bd5
 8001adc:	08001b29 	.word	0x08001b29
 8001ae0:	08001bd5 	.word	0x08001bd5
 8001ae4:	08001bd5 	.word	0x08001bd5
 8001ae8:	08001bd5 	.word	0x08001bd5
 8001aec:	08001bd5 	.word	0x08001bd5
 8001af0:	08001bd5 	.word	0x08001bd5
 8001af4:	08001bd5 	.word	0x08001bd5
 8001af8:	08001bd5 	.word	0x08001bd5
 8001afc:	08001b35 	.word	0x08001b35
 8001b00:	08001bd5 	.word	0x08001bd5
 8001b04:	08001bd5 	.word	0x08001bd5
 8001b08:	08001bd5 	.word	0x08001bd5
 8001b0c:	08001b41 	.word	0x08001b41
 8001b10:	08001bd5 	.word	0x08001bd5
 8001b14:	08001b4d 	.word	0x08001b4d
 8001b18:	08001b67 	.word	0x08001b67
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60fa      	str	r2, [r7, #12]
 8001b22:	2208      	movs	r2, #8
 8001b24:	701a      	strb	r2, [r3, #0]
                    break;
 8001b26:	e02b      	b.n	8001b80 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60fa      	str	r2, [r7, #12]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	701a      	strb	r2, [r3, #0]
                    break;
 8001b32:	e025      	b.n	8001b80 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60fa      	str	r2, [r7, #12]
 8001b3a:	220a      	movs	r2, #10
 8001b3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b3e:	e01f      	b.n	8001b80 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60fa      	str	r2, [r7, #12]
 8001b46:	220d      	movs	r2, #13
 8001b48:	701a      	strb	r2, [r3, #0]
                    break;
 8001b4a:	e019      	b.n	8001b80 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60fa      	str	r2, [r7, #12]
 8001b52:	2209      	movs	r2, #9
 8001b54:	701a      	strb	r2, [r3, #0]
                    break;
 8001b56:	e013      	b.n	8001b80 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60fa      	str	r2, [r7, #12]
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b60:	7852      	ldrb	r2, [r2, #1]
 8001b62:	701a      	strb	r2, [r3, #0]
                    break;
 8001b64:	e00c      	b.n	8001b80 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6a39      	ldr	r1, [r7, #32]
 8001b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b70:	f7ff fdb4 	bl	80016dc <utf16_literal_to_utf8>
 8001b74:	4603      	mov	r3, r0
 8001b76:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02c      	beq.n	8001bd8 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001b7e:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b84:	4413      	add	r3, r2
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f4ff aefe 	bcc.w	800198e <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	609a      	str	r2, [r3, #8]

    return true;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e01e      	b.n	8001bfe <parse_string+0x356>
        goto fail;
 8001bc0:	bf00      	nop
 8001bc2:	e00a      	b.n	8001bda <parse_string+0x332>
                    goto fail;
 8001bc4:	bf00      	nop
 8001bc6:	e008      	b.n	8001bda <parse_string+0x332>

fail:
 8001bc8:	bf00      	nop
 8001bca:	e006      	b.n	8001bda <parse_string+0x332>
            goto fail; /* allocation failure */
 8001bcc:	bf00      	nop
 8001bce:	e004      	b.n	8001bda <parse_string+0x332>
                goto fail;
 8001bd0:	bf00      	nop
 8001bd2:	e002      	b.n	8001bda <parse_string+0x332>
                    goto fail;
 8001bd4:	bf00      	nop
 8001bd6:	e000      	b.n	8001bda <parse_string+0x332>
                        goto fail;
 8001bd8:	bf00      	nop
    if (output != NULL)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	69f8      	ldr	r0, [r7, #28]
 8001be6:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop

08001c08 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <print_string_ptr+0x28>
    {
        return false;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e0d7      	b.n	8001de0 <print_string_ptr+0x1d8>
    }

    /* empty string */
    if (input == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d111      	bne.n	8001c5a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001c36:	2103      	movs	r1, #3
 8001c38:	6838      	ldr	r0, [r7, #0]
 8001c3a:	f7ff fb0b 	bl	8001254 <ensure>
 8001c3e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <print_string_ptr+0x42>
        {
            return false;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e0ca      	b.n	8001de0 <print_string_ptr+0x1d8>
        }
        strcpy((char*)output, "\"\"");
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4a66      	ldr	r2, [pc, #408]	; (8001de8 <print_string_ptr+0x1e0>)
 8001c4e:	8811      	ldrh	r1, [r2, #0]
 8001c50:	7892      	ldrb	r2, [r2, #2]
 8001c52:	8019      	strh	r1, [r3, #0]
 8001c54:	709a      	strb	r2, [r3, #2]

        return true;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0c2      	b.n	8001de0 <print_string_ptr+0x1d8>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e01c      	b.n	8001c9a <print_string_ptr+0x92>
    {
        switch (*input_pointer)
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b0d      	cmp	r3, #13
 8001c66:	dc05      	bgt.n	8001c74 <print_string_ptr+0x6c>
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	da07      	bge.n	8001c7c <print_string_ptr+0x74>
 8001c6c:	3b08      	subs	r3, #8
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d808      	bhi.n	8001c84 <print_string_ptr+0x7c>
 8001c72:	e003      	b.n	8001c7c <print_string_ptr+0x74>
 8001c74:	2b22      	cmp	r3, #34	; 0x22
 8001c76:	d001      	beq.n	8001c7c <print_string_ptr+0x74>
 8001c78:	2b5c      	cmp	r3, #92	; 0x5c
 8001c7a:	d103      	bne.n	8001c84 <print_string_ptr+0x7c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
                break;
 8001c82:	e007      	b.n	8001c94 <print_string_ptr+0x8c>
            default:
                if (*input_pointer < 32)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	d802      	bhi.n	8001c92 <print_string_ptr+0x8a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3305      	adds	r3, #5
 8001c90:	617b      	str	r3, [r7, #20]
                }
                break;
 8001c92:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1de      	bne.n	8001c60 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7ff facc 	bl	8001254 <ensure>
 8001cbc:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <print_string_ptr+0xc0>
    {
        return false;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e08b      	b.n	8001de0 <print_string_ptr+0x1d8>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d117      	bne.n	8001cfe <print_string_ptr+0xf6>
    {
        output[0] = '\"';
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2222      	movs	r2, #34	; 0x22
 8001cd2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f010 fcc8 	bl	8012672 <memcpy>
        output[output_length + 1] = '\"';
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2222      	movs	r2, #34	; 0x22
 8001cec:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

        return true;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e070      	b.n	8001de0 <print_string_ptr+0x1d8>
    }

    output[0] = '\"';
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2222      	movs	r2, #34	; 0x22
 8001d02:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	3301      	adds	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e056      	b.n	8001dbe <print_string_ptr+0x1b6>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b1f      	cmp	r3, #31
 8001d16:	d90c      	bls.n	8001d32 <print_string_ptr+0x12a>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b22      	cmp	r3, #34	; 0x22
 8001d1e:	d008      	beq.n	8001d32 <print_string_ptr+0x12a>
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b5c      	cmp	r3, #92	; 0x5c
 8001d26:	d004      	beq.n	8001d32 <print_string_ptr+0x12a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e03f      	b.n	8001db2 <print_string_ptr+0x1aa>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	61ba      	str	r2, [r7, #24]
 8001d38:	225c      	movs	r2, #92	; 0x5c
 8001d3a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d01b      	beq.n	8001d7c <print_string_ptr+0x174>
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	dc06      	bgt.n	8001d56 <print_string_ptr+0x14e>
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d023      	beq.n	8001d94 <print_string_ptr+0x18c>
 8001d4c:	2b0a      	cmp	r3, #10
 8001d4e:	d019      	beq.n	8001d84 <print_string_ptr+0x17c>
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d00f      	beq.n	8001d74 <print_string_ptr+0x16c>
 8001d54:	e022      	b.n	8001d9c <print_string_ptr+0x194>
 8001d56:	2b22      	cmp	r3, #34	; 0x22
 8001d58:	d008      	beq.n	8001d6c <print_string_ptr+0x164>
 8001d5a:	2b5c      	cmp	r3, #92	; 0x5c
 8001d5c:	d002      	beq.n	8001d64 <print_string_ptr+0x15c>
 8001d5e:	2b0d      	cmp	r3, #13
 8001d60:	d014      	beq.n	8001d8c <print_string_ptr+0x184>
 8001d62:	e01b      	b.n	8001d9c <print_string_ptr+0x194>
            {
                case '\\':
                    *output_pointer = '\\';
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	225c      	movs	r2, #92	; 0x5c
 8001d68:	701a      	strb	r2, [r3, #0]
                    break;
 8001d6a:	e022      	b.n	8001db2 <print_string_ptr+0x1aa>
                case '\"':
                    *output_pointer = '\"';
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2222      	movs	r2, #34	; 0x22
 8001d70:	701a      	strb	r2, [r3, #0]
                    break;
 8001d72:	e01e      	b.n	8001db2 <print_string_ptr+0x1aa>
                case '\b':
                    *output_pointer = 'b';
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2262      	movs	r2, #98	; 0x62
 8001d78:	701a      	strb	r2, [r3, #0]
                    break;
 8001d7a:	e01a      	b.n	8001db2 <print_string_ptr+0x1aa>
                case '\f':
                    *output_pointer = 'f';
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2266      	movs	r2, #102	; 0x66
 8001d80:	701a      	strb	r2, [r3, #0]
                    break;
 8001d82:	e016      	b.n	8001db2 <print_string_ptr+0x1aa>
                case '\n':
                    *output_pointer = 'n';
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	226e      	movs	r2, #110	; 0x6e
 8001d88:	701a      	strb	r2, [r3, #0]
                    break;
 8001d8a:	e012      	b.n	8001db2 <print_string_ptr+0x1aa>
                case '\r':
                    *output_pointer = 'r';
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2272      	movs	r2, #114	; 0x72
 8001d90:	701a      	strb	r2, [r3, #0]
                    break;
 8001d92:	e00e      	b.n	8001db2 <print_string_ptr+0x1aa>
                case '\t':
                    *output_pointer = 't';
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2274      	movs	r2, #116	; 0x74
 8001d98:	701a      	strb	r2, [r3, #0]
                    break;
 8001d9a:	e00a      	b.n	8001db2 <print_string_ptr+0x1aa>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4912      	ldr	r1, [pc, #72]	; (8001dec <print_string_ptr+0x1e4>)
 8001da4:	69b8      	ldr	r0, [r7, #24]
 8001da6:	f010 fd9d 	bl	80128e4 <siprintf>
                    output_pointer += 4;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3304      	adds	r3, #4
 8001dae:	61bb      	str	r3, [r7, #24]
                    break;
 8001db0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1a4      	bne.n	8001d10 <print_string_ptr+0x108>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	2222      	movs	r2, #34	; 0x22
 8001dd0:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]

    return true;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	08015cf8 	.word	0x08015cf8
 8001dec:	08015cfc 	.word	0x08015cfc

08001df0 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff01 	bl	8001c08 <print_string_ptr>
 8001e06:	4603      	mov	r3, r0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <buffer_skip_whitespace+0x16>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e02c      	b.n	8001e84 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <buffer_skip_whitespace+0x2c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d306      	bcc.n	8001e4a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	e021      	b.n	8001e84 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00d      	beq.n	8001e6c <buffer_skip_whitespace+0x5c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <buffer_skip_whitespace+0x5c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d9e9      	bls.n	8001e40 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d104      	bne.n	8001e82 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <skip_utf8_bom+0x1e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <skip_utf8_bom+0x1e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e01c      	b.n	8001eec <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d018      	beq.n	8001eea <skip_utf8_bom+0x5a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	1d1a      	adds	r2, r3, #4
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d211      	bcs.n	8001eea <skip_utf8_bom+0x5a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4413      	add	r3, r2
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <skip_utf8_bom+0x64>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f010 fd9c 	bl	8012a12 <strncmp>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d104      	bne.n	8001eea <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	1cda      	adds	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001eea:	687b      	ldr	r3, [r7, #4]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	08015d04 	.word	0x08015d04

08001ef8 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e00c      	b.n	8001f28 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7fe f97e 	bl	8000210 <strlen>
 8001f14:	4603      	mov	r3, r0
 8001f16:	3301      	adds	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	6979      	ldr	r1, [r7, #20]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 f805 	bl	8001f30 <cJSON_ParseWithLengthOpts>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001f3e:	f107 0318 	add.w	r3, r7, #24
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <cJSON_ParseWithLengthOpts+0x128>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <cJSON_ParseWithLengthOpts+0x128>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d042      	beq.n	8001fee <cJSON_ParseWithLengthOpts+0xbe>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d03f      	beq.n	8001fee <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001f7a:	4a38      	ldr	r2, [pc, #224]	; (800205c <cJSON_ParseWithLengthOpts+0x12c>)
 8001f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f80:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f82:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001f86:	4835      	ldr	r0, [pc, #212]	; (800205c <cJSON_ParseWithLengthOpts+0x12c>)
 8001f88:	f7fe ffce 	bl	8000f28 <cJSON_New_Item>
 8001f8c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02e      	beq.n	8001ff2 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff79 	bl	8001e90 <skip_utf8_bom>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff35 	bl	8001e10 <buffer_skip_whitespace>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fac:	f000 f8fa 	bl	80021a4 <parse_value>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01f      	beq.n	8001ff6 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff25 	bl	8001e10 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001fc6:	6a3a      	ldr	r2, [r7, #32]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d20f      	bcs.n	8001fee <cJSON_ParseWithLengthOpts+0xbe>
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	e02f      	b.n	800204e <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001fee:	bf00      	nop
 8001ff0:	e002      	b.n	8001ff8 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001ff2:	bf00      	nop
 8001ff4:	e000      	b.n	8001ff8 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001ff6:	bf00      	nop
    if (item != NULL)
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001ffe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002000:	f7fe ffa8 	bl	8000f54 <cJSON_Delete>
    }

    if (value != NULL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002012:	6a3a      	ldr	r2, [r7, #32]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d202      	bcs.n	8002020 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e005      	b.n	800202c <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b01      	subs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <cJSON_ParseWithLengthOpts+0x128>)
 800203e:	461a      	mov	r2, r3
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002048:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3738      	adds	r7, #56	; 0x38
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000020c 	.word	0x2000020c
 800205c:	20000000 	.word	0x20000000

08002060 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff43 	bl	8001ef8 <cJSON_ParseWithOpts>
 8002072:	4603      	mov	r3, r0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2224      	movs	r2, #36	; 0x24
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f010 fb10 	bl	80126ba <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a38      	ldr	r2, [pc, #224]	; (8002180 <print+0x104>)
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	4610      	mov	r0, r2
 80020a4:	4798      	blx	r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <print+0x104>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d040      	beq.n	8002148 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4619      	mov	r1, r3
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f955 	bl	800237c <print_value>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d039      	beq.n	800214c <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f956 	bl	800138e <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	6938      	ldr	r0, [r7, #16]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	3201      	adds	r2, #1
 80020f4:	4611      	mov	r1, r2
 80020f6:	4798      	blx	r3
 80020f8:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80020fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d027      	beq.n	8002150 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e01e      	b.n	8002144 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	3201      	adds	r2, #1
 800210e:	4610      	mov	r0, r2
 8002110:	4798      	blx	r3
 8002112:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01c      	beq.n	8002154 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4293      	cmp	r3, r2
 8002124:	bf28      	it	cs
 8002126:	4613      	movcs	r3, r2
 8002128:	461a      	mov	r2, r3
 800212a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800212c:	f010 faa1 	bl	8012672 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002134:	4413      	add	r3, r2
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4610      	mov	r0, r2
 8002142:	4798      	blx	r3
    }

    return printed;
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	e016      	b.n	8002176 <print+0xfa>
        goto fail;
 8002148:	bf00      	nop
 800214a:	e004      	b.n	8002156 <print+0xda>
        goto fail;
 800214c:	bf00      	nop
 800214e:	e002      	b.n	8002156 <print+0xda>
            goto fail;
 8002150:	bf00      	nop
 8002152:	e000      	b.n	8002156 <print+0xda>
            goto fail;
 8002154:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4610      	mov	r0, r2
 8002164:	4798      	blx	r3
    }

    if (printed != NULL)
 8002166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <print+0xf8>
    {
        hooks->deallocate(printed);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002172:	4798      	blx	r3
    }

    return NULL;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3738      	adds	r7, #56	; 0x38
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	08018778 	.word	0x08018778

08002184 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <cJSON_Print+0x1c>)
 800218e:	2101      	movs	r1, #1
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff73 	bl	800207c <print>
 8002196:	4603      	mov	r3, r0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000000 	.word	0x20000000

080021a4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <parse_value+0x18>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <parse_value+0x1c>
    {
        return false; /* no input */
 80021bc:	2300      	movs	r3, #0
 80021be:	e0d2      	b.n	8002366 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01d      	beq.n	8002202 <parse_value+0x5e>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	1d1a      	adds	r2, r3, #4
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d816      	bhi.n	8002202 <parse_value+0x5e>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	2204      	movs	r2, #4
 80021e0:	4963      	ldr	r1, [pc, #396]	; (8002370 <parse_value+0x1cc>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f010 fc15 	bl	8012a12 <strncmp>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	1d1a      	adds	r2, r3, #4
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	609a      	str	r2, [r3, #8]
        return true;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0b1      	b.n	8002366 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01d      	beq.n	8002244 <parse_value+0xa0>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	1d5a      	adds	r2, r3, #5
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	d816      	bhi.n	8002244 <parse_value+0xa0>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4413      	add	r3, r2
 8002220:	2205      	movs	r2, #5
 8002222:	4954      	ldr	r1, [pc, #336]	; (8002374 <parse_value+0x1d0>)
 8002224:	4618      	mov	r0, r3
 8002226:	f010 fbf4 	bl	8012a12 <strncmp>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d109      	bne.n	8002244 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	1d5a      	adds	r2, r3, #5
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	609a      	str	r2, [r3, #8]
        return true;
 8002240:	2301      	movs	r3, #1
 8002242:	e090      	b.n	8002366 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <parse_value+0xe8>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	1d1a      	adds	r2, r3, #4
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d819      	bhi.n	800228c <parse_value+0xe8>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4413      	add	r3, r2
 8002262:	2204      	movs	r2, #4
 8002264:	4944      	ldr	r1, [pc, #272]	; (8002378 <parse_value+0x1d4>)
 8002266:	4618      	mov	r0, r3
 8002268:	f010 fbd3 	bl	8012a12 <strncmp>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	609a      	str	r2, [r3, #8]
        return true;
 8002288:	2301      	movs	r3, #1
 800228a:	e06c      	b.n	8002366 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d013      	beq.n	80022ba <parse_value+0x116>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d20d      	bcs.n	80022ba <parse_value+0x116>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b22      	cmp	r3, #34	; 0x22
 80022ac:	d105      	bne.n	80022ba <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff faf9 	bl	80018a8 <parse_string>
 80022b6:	4603      	mov	r3, r0
 80022b8:	e055      	b.n	8002366 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <parse_value+0x164>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d21d      	bcs.n	8002308 <parse_value+0x164>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b2d      	cmp	r3, #45	; 0x2d
 80022da:	d00f      	beq.n	80022fc <parse_value+0x158>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b2f      	cmp	r3, #47	; 0x2f
 80022ea:	d90d      	bls.n	8002308 <parse_value+0x164>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b39      	cmp	r3, #57	; 0x39
 80022fa:	d805      	bhi.n	8002308 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fe7a 	bl	8000ff8 <parse_number>
 8002304:	4603      	mov	r3, r0
 8002306:	e02e      	b.n	8002366 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <parse_value+0x192>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20d      	bcs.n	8002336 <parse_value+0x192>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	4413      	add	r3, r2
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b5b      	cmp	r3, #91	; 0x5b
 8002328:	d105      	bne.n	8002336 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8cb 	bl	80024c8 <parse_array>
 8002332:	4603      	mov	r3, r0
 8002334:	e017      	b.n	8002366 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d013      	beq.n	8002364 <parse_value+0x1c0>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d20d      	bcs.n	8002364 <parse_value+0x1c0>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b7b      	cmp	r3, #123	; 0x7b
 8002356:	d105      	bne.n	8002364 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f9fe 	bl	800275c <parse_object>
 8002360:	4603      	mov	r3, r0
 8002362:	e000      	b.n	8002366 <parse_value+0x1c2>
    }

    return false;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08015cdc 	.word	0x08015cdc
 8002374:	08015d08 	.word	0x08015d08
 8002378:	08015d10 	.word	0x08015d10

0800237c <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <print_value+0x1a>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <print_value+0x1e>
    {
        return false;
 8002396:	2300      	movs	r3, #0
 8002398:	e08b      	b.n	80024b2 <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d04a      	beq.n	800243a <print_value+0xbe>
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	dc06      	bgt.n	80023b6 <print_value+0x3a>
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d034      	beq.n	8002416 <print_value+0x9a>
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d00e      	beq.n	80023ce <print_value+0x52>
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d01e      	beq.n	80023f2 <print_value+0x76>
 80023b4:	e07c      	b.n	80024b0 <print_value+0x134>
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d06e      	beq.n	8002498 <print_value+0x11c>
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	dc02      	bgt.n	80023c4 <print_value+0x48>
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d064      	beq.n	800248c <print_value+0x110>
 80023c2:	e075      	b.n	80024b0 <print_value+0x134>
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d06d      	beq.n	80024a4 <print_value+0x128>
 80023c8:	2b80      	cmp	r3, #128	; 0x80
 80023ca:	d03c      	beq.n	8002446 <print_value+0xca>
 80023cc:	e070      	b.n	80024b0 <print_value+0x134>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80023ce:	2105      	movs	r1, #5
 80023d0:	6838      	ldr	r0, [r7, #0]
 80023d2:	f7fe ff3f 	bl	8001254 <ensure>
 80023d6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <print_value+0x66>
            {
                return false;
 80023de:	2300      	movs	r3, #0
 80023e0:	e067      	b.n	80024b2 <print_value+0x136>
            }
            strcpy((char*)output, "null");
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a35      	ldr	r2, [pc, #212]	; (80024bc <print_value+0x140>)
 80023e6:	6810      	ldr	r0, [r2, #0]
 80023e8:	6018      	str	r0, [r3, #0]
 80023ea:	7912      	ldrb	r2, [r2, #4]
 80023ec:	711a      	strb	r2, [r3, #4]
            return true;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e05f      	b.n	80024b2 <print_value+0x136>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80023f2:	2106      	movs	r1, #6
 80023f4:	6838      	ldr	r0, [r7, #0]
 80023f6:	f7fe ff2d 	bl	8001254 <ensure>
 80023fa:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <print_value+0x8a>
            {
                return false;
 8002402:	2300      	movs	r3, #0
 8002404:	e055      	b.n	80024b2 <print_value+0x136>
            }
            strcpy((char*)output, "false");
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <print_value+0x144>)
 800240a:	6810      	ldr	r0, [r2, #0]
 800240c:	6018      	str	r0, [r3, #0]
 800240e:	8892      	ldrh	r2, [r2, #4]
 8002410:	809a      	strh	r2, [r3, #4]
            return true;
 8002412:	2301      	movs	r3, #1
 8002414:	e04d      	b.n	80024b2 <print_value+0x136>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002416:	2105      	movs	r1, #5
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f7fe ff1b 	bl	8001254 <ensure>
 800241e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <print_value+0xae>
            {
                return false;
 8002426:	2300      	movs	r3, #0
 8002428:	e043      	b.n	80024b2 <print_value+0x136>
            }
            strcpy((char*)output, "true");
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <print_value+0x148>)
 800242e:	6810      	ldr	r0, [r2, #0]
 8002430:	6018      	str	r0, [r3, #0]
 8002432:	7912      	ldrb	r2, [r2, #4]
 8002434:	711a      	strb	r2, [r3, #4]
            return true;
 8002436:	2301      	movs	r3, #1
 8002438:	e03b      	b.n	80024b2 <print_value+0x136>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800243a:	6839      	ldr	r1, [r7, #0]
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff f813 	bl	8001468 <print_number>
 8002442:	4603      	mov	r3, r0
 8002444:	e035      	b.n	80024b2 <print_value+0x136>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <print_value+0xda>
            {
                return false;
 8002452:	2300      	movs	r3, #0
 8002454:	e02d      	b.n	80024b2 <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd fed8 	bl	8000210 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	3301      	adds	r3, #1
 8002464:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	6838      	ldr	r0, [r7, #0]
 800246a:	f7fe fef3 	bl	8001254 <ensure>
 800246e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <print_value+0xfe>
            {
                return false;
 8002476:	2300      	movs	r3, #0
 8002478:	e01b      	b.n	80024b2 <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	4619      	mov	r1, r3
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f010 f8f5 	bl	8012672 <memcpy>
            return true;
 8002488:	2301      	movs	r3, #1
 800248a:	e012      	b.n	80024b2 <print_value+0x136>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fcae 	bl	8001df0 <print_string>
 8002494:	4603      	mov	r3, r0
 8002496:	e00c      	b.n	80024b2 <print_value+0x136>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8d8 	bl	8002650 <print_array>
 80024a0:	4603      	mov	r3, r0
 80024a2:	e006      	b.n	80024b2 <print_value+0x136>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa53 	bl	8002952 <print_object>
 80024ac:	4603      	mov	r3, r0
 80024ae:	e000      	b.n	80024b2 <print_value+0x136>

        default:
            return false;
 80024b0:	2300      	movs	r3, #0
    }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	08015cdc 	.word	0x08015cdc
 80024c0:	08015d08 	.word	0x08015d08
 80024c4:	08015d10 	.word	0x08015d10

080024c8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e2:	d301      	bcc.n	80024e8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80024e4:	2300      	movs	r3, #0
 80024e6:	e0af      	b.n	8002648 <parse_array+0x180>
    }
    input_buffer->depth++;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b5b      	cmp	r3, #91	; 0x5b
 8002500:	f040 8094 	bne.w	800262c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800250e:	6838      	ldr	r0, [r7, #0]
 8002510:	f7ff fc7e 	bl	8001e10 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <parse_array+0x6e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d207      	bcs.n	8002536 <parse_array+0x6e>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b5d      	cmp	r3, #93	; 0x5d
 8002534:	d061      	beq.n	80025fa <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <parse_array+0x80>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d305      	bcc.n	8002554 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	609a      	str	r2, [r3, #8]
        goto fail;
 8002552:	e072      	b.n	800263a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	3310      	adds	r3, #16
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fce0 	bl	8000f28 <cJSON_New_Item>
 8002568:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05f      	beq.n	8002630 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d104      	bne.n	8002580 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e007      	b.n	8002590 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800259a:	6838      	ldr	r0, [r7, #0]
 800259c:	f7ff fc38 	bl	8001e10 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	6938      	ldr	r0, [r7, #16]
 80025a4:	f7ff fdfe 	bl	80021a4 <parse_value>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d042      	beq.n	8002634 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	f7ff fc2e 	bl	8001e10 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <parse_array+0x10e>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d207      	bcs.n	80025d6 <parse_array+0x10e>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b2c      	cmp	r3, #44	; 0x2c
 80025d4:	d0c3      	beq.n	800255e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02d      	beq.n	8002638 <parse_array+0x170>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d227      	bcs.n	8002638 <parse_array+0x170>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b5d      	cmp	r3, #93	; 0x5d
 80025f6:	d11f      	bne.n	8002638 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80025f8:	e000      	b.n	80025fc <parse_array+0x134>
        goto success;
 80025fa:	bf00      	nop
    input_buffer->depth--;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <parse_array+0x14a>
        head->prev = current_item;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	609a      	str	r2, [r3, #8]

    return true;
 8002628:	2301      	movs	r3, #1
 800262a:	e00d      	b.n	8002648 <parse_array+0x180>
        goto fail;
 800262c:	bf00      	nop
 800262e:	e004      	b.n	800263a <parse_array+0x172>
            goto fail; /* allocation failure */
 8002630:	bf00      	nop
 8002632:	e002      	b.n	800263a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <parse_array+0x172>

fail:
 8002638:	bf00      	nop
    if (head != NULL)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002640:	6978      	ldr	r0, [r7, #20]
 8002642:	f7fe fc87 	bl	8000f54 <cJSON_Delete>
    }

    return false;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <print_array+0x22>
    {
        return false;
 800266e:	2300      	movs	r3, #0
 8002670:	e070      	b.n	8002754 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002672:	2101      	movs	r1, #1
 8002674:	6838      	ldr	r0, [r7, #0]
 8002676:	f7fe fded 	bl	8001254 <ensure>
 800267a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <print_array+0x36>
    {
        return false;
 8002682:	2300      	movs	r3, #0
 8002684:	e066      	b.n	8002754 <print_array+0x104>
    }

    *output_pointer = '[';
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	225b      	movs	r2, #91	; 0x5b
 800268a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80026a0:	e03d      	b.n	800271e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f7ff fe69 	bl	800237c <print_value>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <print_array+0x64>
        {
            return false;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e04f      	b.n	8002754 <print_array+0x104>
        }
        update_offset(output_buffer);
 80026b4:	6838      	ldr	r0, [r7, #0]
 80026b6:	f7fe fe6a 	bl	800138e <update_offset>
        if (current_element->next)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d02a      	beq.n	8002718 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <print_array+0x7e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e000      	b.n	80026d0 <print_array+0x80>
 80026ce:	2301      	movs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4619      	mov	r1, r3
 80026d8:	6838      	ldr	r0, [r7, #0]
 80026da:	f7fe fdbb 	bl	8001254 <ensure>
 80026de:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <print_array+0x9a>
            {
                return false;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e034      	b.n	8002754 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	617a      	str	r2, [r7, #20]
 80026f0:	222c      	movs	r2, #44	; 0x2c
 80026f2:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	617a      	str	r2, [r7, #20]
 8002702:	2220      	movs	r2, #32
 8002704:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	441a      	add	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1be      	bne.n	80026a2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002724:	2102      	movs	r1, #2
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	f7fe fd94 	bl	8001254 <ensure>
 800272c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <print_array+0xe8>
    {
        return false;
 8002734:	2300      	movs	r3, #0
 8002736:	e00d      	b.n	8002754 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	617a      	str	r2, [r7, #20]
 800273e:	225d      	movs	r2, #93	; 0x5d
 8002740:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	60da      	str	r2, [r3, #12]

    return true;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002776:	d301      	bcc.n	800277c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002778:	2300      	movs	r3, #0
 800277a:	e0e6      	b.n	800294a <parse_object+0x1ee>
    }
    input_buffer->depth++;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80d0 	beq.w	800292e <parse_object+0x1d2>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	f080 80c9 	bcs.w	800292e <parse_object+0x1d2>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4413      	add	r3, r2
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b7b      	cmp	r3, #123	; 0x7b
 80027aa:	f040 80c0 	bne.w	800292e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80027b8:	6838      	ldr	r0, [r7, #0]
 80027ba:	f7ff fb29 	bl	8001e10 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <parse_object+0x86>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d208      	bcs.n	80027e2 <parse_object+0x86>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b7d      	cmp	r3, #125	; 0x7d
 80027de:	f000 808d 	beq.w	80028fc <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <parse_object+0x98>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d305      	bcc.n	8002800 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	609a      	str	r2, [r3, #8]
        goto fail;
 80027fe:	e09d      	b.n	800293c <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	1e5a      	subs	r2, r3, #1
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3310      	adds	r3, #16
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fb8a 	bl	8000f28 <cJSON_New_Item>
 8002814:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 808a 	beq.w	8002932 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d104      	bne.n	800282e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e007      	b.n	800283e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f7ff fae1 	bl	8001e10 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	6938      	ldr	r0, [r7, #16]
 8002852:	f7ff f829 	bl	80018a8 <parse_string>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d06c      	beq.n	8002936 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f7ff fad7 	bl	8001e10 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d05b      	beq.n	800292e <parse_object+0x1d2>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	429a      	cmp	r2, r3
 8002880:	d255      	bcs.n	800292e <parse_object+0x1d2>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b3a      	cmp	r3, #58	; 0x3a
 8002890:	d14d      	bne.n	800292e <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	f7ff fab7 	bl	8001e10 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	6938      	ldr	r0, [r7, #16]
 80028a6:	f7ff fc7d 	bl	80021a4 <parse_value>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d044      	beq.n	800293a <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f7ff faad 	bl	8001e10 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <parse_object+0x17c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <parse_object+0x17c>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4413      	add	r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b2c      	cmp	r3, #44	; 0x2c
 80028d6:	d098      	beq.n	800280a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d027      	beq.n	800292e <parse_object+0x1d2>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d221      	bcs.n	800292e <parse_object+0x1d2>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b7d      	cmp	r3, #125	; 0x7d
 80028f8:	d119      	bne.n	800292e <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 80028fa:	e000      	b.n	80028fe <parse_object+0x1a2>
        goto success; /* empty object */
 80028fc:	bf00      	nop
    input_buffer->depth--;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <parse_object+0x1b8>
        head->prev = current_item;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	60da      	str	r2, [r3, #12]
    item->child = head;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	609a      	str	r2, [r3, #8]
    return true;
 800292a:	2301      	movs	r3, #1
 800292c:	e00d      	b.n	800294a <parse_object+0x1ee>

fail:
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <parse_object+0x1e0>
            goto fail; /* allocation failure */
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <parse_object+0x1e0>
            goto fail; /* failed to parse name */
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 800293a:	bf00      	nop
    if (head != NULL)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <parse_object+0x1ec>
    {
        cJSON_Delete(head);
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7fe fb06 	bl	8000f54 <cJSON_Delete>
    }

    return false;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b088      	sub	sp, #32
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <print_object+0x22>
    {
        return false;
 8002970:	2300      	movs	r3, #0
 8002972:	e108      	b.n	8002b86 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <print_object+0x2e>
 800297c:	2302      	movs	r3, #2
 800297e:	e000      	b.n	8002982 <print_object+0x30>
 8002980:	2301      	movs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	4619      	mov	r1, r3
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f7fe fc62 	bl	8001254 <ensure>
 8002990:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <print_object+0x4a>
    {
        return false;
 8002998:	2300      	movs	r3, #0
 800299a:	e0f4      	b.n	8002b86 <print_object+0x234>
    }

    *output_pointer++ = '{';
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	61fa      	str	r2, [r7, #28]
 80029a2:	227b      	movs	r2, #123	; 0x7b
 80029a4:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	61fa      	str	r2, [r7, #28]
 80029be:	220a      	movs	r2, #10
 80029c0:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	441a      	add	r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	609a      	str	r2, [r3, #8]

    while (current_item)
 80029ce:	e0a0      	b.n	8002b12 <print_object+0x1c0>
    {
        if (output_buffer->format)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d022      	beq.n	8002a1e <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4619      	mov	r1, r3
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f7fe fc38 	bl	8001254 <ensure>
 80029e4:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <print_object+0x9e>
            {
                return false;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e0ca      	b.n	8002b86 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	e007      	b.n	8002a06 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	61fa      	str	r2, [r7, #28]
 80029fc:	2209      	movs	r2, #9
 80029fe:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d3f2      	bcc.n	80029f6 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	441a      	add	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f8ef 	bl	8001c08 <print_string_ptr>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <print_object+0xe2>
        {
            return false;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e0a8      	b.n	8002b86 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002a34:	6838      	ldr	r0, [r7, #0]
 8002a36:	f7fe fcaa 	bl	800138e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <print_object+0xf4>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e000      	b.n	8002a48 <print_object+0xf6>
 8002a46:	2301      	movs	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	6838      	ldr	r0, [r7, #0]
 8002a4e:	f7fe fc01 	bl	8001254 <ensure>
 8002a52:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <print_object+0x10c>
        {
            return false;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e093      	b.n	8002b86 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	61fa      	str	r2, [r7, #28]
 8002a64:	223a      	movs	r2, #58	; 0x3a
 8002a66:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	61fa      	str	r2, [r7, #28]
 8002a76:	2209      	movs	r2, #9
 8002a78:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	441a      	add	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	69b8      	ldr	r0, [r7, #24]
 8002a8a:	f7ff fc77 	bl	800237c <print_value>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <print_object+0x146>
        {
            return false;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e076      	b.n	8002b86 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f7fe fc78 	bl	800138e <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <print_object+0x158>
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	e000      	b.n	8002aac <print_object+0x15a>
 8002aaa:	2200      	movs	r2, #0
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <print_object+0x166>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <print_object+0x168>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6838      	ldr	r0, [r7, #0]
 8002ac6:	f7fe fbc5 	bl	8001254 <ensure>
 8002aca:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <print_object+0x184>
        {
            return false;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e057      	b.n	8002b86 <print_object+0x234>
        }
        if (current_item->next)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	61fa      	str	r2, [r7, #28]
 8002ae4:	222c      	movs	r2, #44	; 0x2c
 8002ae6:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	220a      	movs	r2, #10
 8002af8:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	441a      	add	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f af5b 	bne.w	80029d0 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <print_object+0x1d8>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	3301      	adds	r3, #1
 8002b28:	e000      	b.n	8002b2c <print_object+0x1da>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6838      	ldr	r0, [r7, #0]
 8002b30:	f7fe fb90 	bl	8001254 <ensure>
 8002b34:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <print_object+0x1ee>
    {
        return false;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e022      	b.n	8002b86 <print_object+0x234>
    }
    if (output_buffer->format)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e007      	b.n	8002b5e <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	61fa      	str	r2, [r7, #28]
 8002b54:	2209      	movs	r2, #9
 8002b56:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d3f1      	bcc.n	8002b4e <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	61fa      	str	r2, [r7, #28]
 8002b70:	227d      	movs	r2, #125	; 0x7d
 8002b72:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	60da      	str	r2, [r3, #12]

    return true;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_DMA_Init+0x38>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <MX_DMA_Init+0x38>)
 8002b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_DMA_Init+0x38>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2011      	movs	r0, #17
 8002bb4:	f001 f905 	bl	8003dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002bb8:	2011      	movs	r0, #17
 8002bba:	f001 f91e 	bl	8003dfa <HAL_NVIC_EnableIRQ>

}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800

08002bcc <HAL_ETH_MspInit>:
  }

}

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08e      	sub	sp, #56	; 0x38
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4e      	ldr	r2, [pc, #312]	; (8002d24 <HAL_ETH_MspInit+0x158>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f040 8096 	bne.w	8002d1c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002bf0:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4a46      	ldr	r2, [pc, #280]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c12:	6313      	str	r3, [r2, #48]	; 0x30
 8002c14:	4b44      	ldr	r3, [pc, #272]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4a40      	ldr	r2, [pc, #256]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6313      	str	r3, [r2, #48]	; 0x30
 8002c44:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	6313      	str	r3, [r2, #48]	; 0x30
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_ETH_MspInit+0x15c>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c98:	2332      	movs	r3, #50	; 0x32
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ca8:	230b      	movs	r3, #11
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	481e      	ldr	r0, [pc, #120]	; (8002d2c <HAL_ETH_MspInit+0x160>)
 8002cb4:	f002 fb18 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cb8:	2386      	movs	r3, #134	; 0x86
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cc8:	230b      	movs	r3, #11
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4817      	ldr	r0, [pc, #92]	; (8002d30 <HAL_ETH_MspInit+0x164>)
 8002cd4:	f002 fb08 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cea:	230b      	movs	r3, #11
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480f      	ldr	r0, [pc, #60]	; (8002d34 <HAL_ETH_MspInit+0x168>)
 8002cf6:	f002 faf7 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002cfa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d0c:	230b      	movs	r3, #11
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d14:	4619      	mov	r1, r3
 8002d16:	4808      	ldr	r0, [pc, #32]	; (8002d38 <HAL_ETH_MspInit+0x16c>)
 8002d18:	f002 fae6 	bl	80052e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3738      	adds	r7, #56	; 0x38
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40028000 	.word	0x40028000
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020000 	.word	0x40020000
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40021800 	.word	0x40021800

08002d3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a45      	ldr	r2, [pc, #276]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d6a:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db2:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <MX_GPIO_Init+0x130>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002de2:	2200      	movs	r2, #0
 8002de4:	f244 0181 	movw	r1, #16513	; 0x4081
 8002de8:	4821      	ldr	r0, [pc, #132]	; (8002e70 <MX_GPIO_Init+0x134>)
 8002dea:	f002 fc27 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2140      	movs	r1, #64	; 0x40
 8002df2:	4820      	ldr	r0, [pc, #128]	; (8002e74 <MX_GPIO_Init+0x138>)
 8002df4:	f002 fc22 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <MX_GPIO_Init+0x13c>)
 8002e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481b      	ldr	r0, [pc, #108]	; (8002e7c <MX_GPIO_Init+0x140>)
 8002e0e:	f002 fa6b 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002e12:	f244 0381 	movw	r3, #16513	; 0x4081
 8002e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4811      	ldr	r0, [pc, #68]	; (8002e70 <MX_GPIO_Init+0x134>)
 8002e2c:	f002 fa5c 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	480b      	ldr	r0, [pc, #44]	; (8002e74 <MX_GPIO_Init+0x138>)
 8002e48:	f002 fa4e 	bl	80052e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_GPIO_Init+0x138>)
 8002e60:	f002 fa42 	bl	80052e8 <HAL_GPIO_Init>

}
 8002e64:	bf00      	nop
 8002e66:	3730      	adds	r7, #48	; 0x30
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40020400 	.word	0x40020400
 8002e74:	40021800 	.word	0x40021800
 8002e78:	10110000 	.word	0x10110000
 8002e7c:	40020800 	.word	0x40020800

08002e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e84:	f000 fe43 	bl	8003b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e88:	f000 f816 	bl	8002eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e8c:	f7ff ff56 	bl	8002d3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e90:	f7ff fe7e 	bl	8002b90 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002e94:	f000 fc94 	bl	80037c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002e98:	f000 fd86 	bl	80039a8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8002e9c:	f004 fcbe 	bl	800781c <MX_LWIP_Init>
  MX_USART2_UART_Init();
 8002ea0:	f000 fc5e 	bl	8003760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8002ea4:	f000 f8b0 	bl	8003008 <tcp_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <main+0x34>)
 8002eaa:	f004 ffdb 	bl	8007e64 <ethernetif_input>
	      sys_check_timeouts();
 8002eae:	f00c fec3 	bl	800fc38 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8002eb2:	e7f9      	b.n	8002ea8 <main+0x28>
 8002eb4:	20000a50 	.word	0x20000a50

08002eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0b4      	sub	sp, #208	; 0xd0
 8002ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ebe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ec2:	2230      	movs	r2, #48	; 0x30
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f00f fbf7 	bl	80126ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ecc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	2284      	movs	r2, #132	; 0x84
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f00f fbe8 	bl	80126ba <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002eea:	f002 fd09 	bl	8005900 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <SystemClock_Config+0x134>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <SystemClock_Config+0x134>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <SystemClock_Config+0x134>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <SystemClock_Config+0x138>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f0e:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <SystemClock_Config+0x138>)
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <SystemClock_Config+0x138>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f30:	2302      	movs	r3, #2
 8002f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002f50:	2308      	movs	r3, #8
 8002f52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fce0 	bl	8005920 <HAL_RCC_OscConfig>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002f66:	f000 f847 	bl	8002ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f6a:	230f      	movs	r3, #15
 8002f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f70:	2302      	movs	r3, #2
 8002f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f90:	2105      	movs	r1, #5
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 ff68 	bl	8005e68 <HAL_RCC_ClockConfig>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002f9e:	f000 f82b 	bl	8002ff8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <SystemClock_Config+0x13c>)
 8002fa4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002fa6:	23c0      	movs	r3, #192	; 0xc0
 8002fa8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002faa:	2302      	movs	r3, #2
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002fc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 f940 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8002fde:	f000 f80b 	bl	8002ff8 <Error_Handler>
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	37d0      	adds	r7, #208	; 0xd0
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	00200180 	.word	0x00200180

08002ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <tcp_echoserver_init>:
 * @brief: Init echo server
 * @param: none
 * @ret: none
 */
void tcp_echoserver_init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Create new connection control block */
  tcp_echoserver_pcb = tcp_new();
 800300c:	f008 f856 	bl	800b0bc <tcp_new>
 8003010:	4602      	mov	r2, r0
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003014:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d020      	beq.n	8003060 <tcp_echoserver_init+0x58>
  {
    if (tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, SERVER_TCP_PORT) == ERR_OK)
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f640 5205 	movw	r2, #3333	; 0xd05
 8003026:	4910      	ldr	r1, [pc, #64]	; (8003068 <tcp_echoserver_init+0x60>)
 8003028:	4618      	mov	r0, r3
 800302a:	f006 ffa7 	bl	8009f7c <tcp_bind>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <tcp_echoserver_init+0x4c>
    {
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	21ff      	movs	r1, #255	; 0xff
 800303a:	4618      	mov	r0, r3
 800303c:	f007 f856 	bl	800a0ec <tcp_listen_with_backlog>
 8003040:	4602      	mov	r2, r0
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003044:	601a      	str	r2, [r3, #0]
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <tcp_echoserver_init+0x64>)
 800304c:	4618      	mov	r0, r3
 800304e:	f008 f8b5 	bl	800b1bc <tcp_accept>
    {
      /* Set selected element free, clear all settings for it */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8003052:	e005      	b.n	8003060 <tcp_echoserver_init+0x58>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <tcp_echoserver_init+0x5c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	2001      	movs	r0, #1
 800305c:	f005 fbf8 	bl	8008850 <memp_free>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000214 	.word	0x20000214
 8003068:	0801886c 	.word	0x0801886c
 800306c:	08003071 	.word	0x08003071

08003070 <tcp_echoserver_accept>:
 * @param  newpcb: pointer to new made connection
 * @param  err: not used
 * @retval err_t: error status
 */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
  /* Unused arguments to prevent warnings */
  (void)arg;
  (void)err;

  /* Set priority for new connection */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800307e:	2101      	movs	r1, #1
 8003080:	68b8      	ldr	r0, [r7, #8]
 8003082:	f007 fe29 	bl	800acd8 <tcp_setprio>

  /* allocate structure with info about tcp connection */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8003086:	200c      	movs	r0, #12
 8003088:	f005 fa28 	bl	80084dc <mem_malloc>
 800308c:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01f      	beq.n	80030d4 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2200      	movs	r2, #0
 80030a4:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]

    /* Pass structure data do new connection */
    tcp_arg(newpcb, es);
 80030ac:	6939      	ldr	r1, [r7, #16]
 80030ae:	68b8      	ldr	r0, [r7, #8]
 80030b0:	f008 f80c 	bl	800b0cc <tcp_arg>

    /* prepare to receive data */
    tcp_recv(newpcb, tcp_echoserver_recv);
 80030b4:	490d      	ldr	r1, [pc, #52]	; (80030ec <tcp_echoserver_accept+0x7c>)
 80030b6:	68b8      	ldr	r0, [r7, #8]
 80030b8:	f008 f81a 	bl	800b0f0 <tcp_recv>

    /* if error ocure then tha t callback will be */
    tcp_err(newpcb, tcp_echoserver_error);
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <tcp_echoserver_accept+0x80>)
 80030be:	68b8      	ldr	r0, [r7, #8]
 80030c0:	f008 f85a 	bl	800b178 <tcp_err>

    /* waits for connection */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	490b      	ldr	r1, [pc, #44]	; (80030f4 <tcp_echoserver_accept+0x84>)
 80030c8:	68b8      	ldr	r0, [r7, #8]
 80030ca:	f008 f88f 	bl	800b1ec <tcp_poll>

    ret_err = ERR_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
 80030d2:	e005      	b.n	80030e0 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /* Close connection */
    tcp_echoserver_connection_close(newpcb, es);
 80030d4:	6939      	ldr	r1, [r7, #16]
 80030d6:	68b8      	ldr	r0, [r7, #8]
 80030d8:	f000 fa0c 	bl	80034f4 <tcp_echoserver_connection_close>
    /* return error */
    ret_err = ERR_MEM;
 80030dc:	23ff      	movs	r3, #255	; 0xff
 80030de:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80030e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	080030f9 	.word	0x080030f9
 80030f0:	0800322d 	.word	0x0800322d
 80030f4:	08003251 	.word	0x08003251

080030f8 <tcp_echoserver_recv>:
 * @param  tpcb: pointer to connection data
 * @param  p: pointer to buffer that conteins data
 * @retval err_t: error status
 */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <tcp_echoserver_recv+0x20>
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <tcp_echoserver_recv+0x124>)
 800310e:	22a5      	movs	r2, #165	; 0xa5
 8003110:	4943      	ldr	r1, [pc, #268]	; (8003220 <tcp_echoserver_recv+0x128>)
 8003112:	4844      	ldr	r0, [pc, #272]	; (8003224 <tcp_echoserver_recv+0x12c>)
 8003114:	f00f fb82 	bl	801281c <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	61bb      	str	r3, [r7, #24]

  /* If buffer is empty */
  if (p == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <tcp_echoserver_recv+0x58>
  {
    /* Close connection */
    es->state = ES_CLOSING;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2203      	movs	r2, #3
 8003126:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <tcp_echoserver_recv+0x42>
    {
       /* Close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	68b8      	ldr	r0, [r7, #8]
 8003134:	f000 f9de 	bl	80034f4 <tcp_echoserver_connection_close>
 8003138:	e007      	b.n	800314a <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* Callback function used when data was received */
      tcp_sent(tpcb, tcp_echoserver_sent);
 800313a:	493b      	ldr	r1, [pc, #236]	; (8003228 <tcp_echoserver_recv+0x130>)
 800313c:	68b8      	ldr	r0, [r7, #8]
 800313e:	f007 fff9 	bl	800b134 <tcp_sent>

      /* Send data back to server */
      tcp_echoserver_send(tpcb, es);
 8003142:	69b9      	ldr	r1, [r7, #24]
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f000 f8db 	bl	8003300 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e05f      	b.n	8003210 <tcp_echoserver_recv+0x118>
  }
  else if(err != ERR_OK)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <tcp_echoserver_recv+0x78>
  {
	/* Error occure, clear buffer  */
    if (p != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f006 f96d 	bl	8009444 <pbuf_free>
    }
    ret_err = err;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	e04f      	b.n	8003210 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d110      	bne.n	800319a <tcp_echoserver_recv+0xa2>
  {
	/* connection accept, first data received, chunk in p->payload */
    es->state = ES_RECEIVED;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]

    /* write data to structuce*/
    es->p = p;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]

    tcp_sent(tpcb, tcp_echoserver_sent);
 8003184:	4928      	ldr	r1, [pc, #160]	; (8003228 <tcp_echoserver_recv+0x130>)
 8003186:	68b8      	ldr	r0, [r7, #8]
 8003188:	f007 ffd4 	bl	800b134 <tcp_sent>

    /* Send data */
    tcp_echoserver_send(tpcb, es);
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	68b8      	ldr	r0, [r7, #8]
 8003190:	f000 f8b6 	bl	8003300 <tcp_echoserver_send>

    ret_err = ERR_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e03a      	b.n	8003210 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d115      	bne.n	80031ce <tcp_echoserver_recv+0xd6>
  {
	/* All data received */
    if(es->p == NULL)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]

      tcp_echoserver_send(tpcb, es);
 80031b0:	69b9      	ldr	r1, [r7, #24]
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	f000 f8a4 	bl	8003300 <tcp_echoserver_send>
 80031b8:	e006      	b.n	80031c8 <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain two to the end of what we recv'ed previously */
      ptr = es->p;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f006 fa56 	bl	8009674 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e020      	b.n	8003210 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d10e      	bne.n	80031f4 <tcp_echoserver_recv+0xfc>
  {
    //odd case, remote side closing twice, free all trash data
    tcp_recved(tpcb, p->tot_len);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	891b      	ldrh	r3, [r3, #8]
 80031da:	4619      	mov	r1, r3
 80031dc:	68b8      	ldr	r0, [r7, #8]
 80031de:	f007 f89b 	bl	800a318 <tcp_recved>
    es->p = NULL;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f006 f92b 	bl	8009444 <pbuf_free>
    ret_err = ERR_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e00d      	b.n	8003210 <tcp_echoserver_recv+0x118>
  }
  else
  {
    //unkown es->state, trash data
    tcp_recved(tpcb, p->tot_len);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	891b      	ldrh	r3, [r3, #8]
 80031f8:	4619      	mov	r1, r3
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	f007 f88c 	bl	800a318 <tcp_recved>
    es->p = NULL;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f006 f91c 	bl	8009444 <pbuf_free>
    ret_err = ERR_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8003210:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	08015d34 	.word	0x08015d34
 8003220:	08015d58 	.word	0x08015d58
 8003224:	08015d64 	.word	0x08015d64
 8003228:	080032b1 	.word	0x080032b1

0800322c <tcp_echoserver_error>:
 * @param  arg: pass structure data
 * @param  err: not used
 * @retval none
 */
static void tcp_echoserver_error(void *arg, err_t err)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  (void)err;

  es = (struct tcp_echoserver_struct *)arg;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <tcp_echoserver_error+0x1c>
  {
    /* free structure */
    mem_free(es);
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f004 ffe4 	bl	8008210 <mem_free>
  }
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <tcp_echoserver_poll>:
 * @param  arg: pass structure data
 * @param  tcp_pcb: pointer to data structure
 * @retval err_t: error status
 */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d017      	beq.n	8003294 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 800326c:	490f      	ldr	r1, [pc, #60]	; (80032ac <tcp_echoserver_poll+0x5c>)
 800326e:	6838      	ldr	r0, [r7, #0]
 8003270:	f007 ff60 	bl	800b134 <tcp_sent>
      /* There is data in pbuf, chain try to send it */
      tcp_echoserver_send(tpcb, es);
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	6838      	ldr	r0, [r7, #0]
 8003278:	f000 f842 	bl	8003300 <tcp_echoserver_send>
 800327c:	e007      	b.n	800328e <tcp_echoserver_poll+0x3e>
    }
    else
    {
       /* No data in chain */
      if(es->state == ES_CLOSING)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d103      	bne.n	800328e <tcp_echoserver_poll+0x3e>
      {
        /* Close connection */
        tcp_echoserver_connection_close(tpcb, es);
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	6838      	ldr	r0, [r7, #0]
 800328a:	f000 f933 	bl	80034f4 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
 8003292:	e004      	b.n	800329e <tcp_echoserver_poll+0x4e>
  }
  else
  {
	/* Aborts the connection by sending a RST (reset) segment to the remote host */
    tcp_abort(tpcb);
 8003294:	6838      	ldr	r0, [r7, #0]
 8003296:	f006 fe65 	bl	8009f64 <tcp_abort>
    ret_err = ERR_ABRT;
 800329a:	23f3      	movs	r3, #243	; 0xf3
 800329c:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	080032b1 	.word	0x080032b1

080032b0 <tcp_echoserver_sent>:
 * @param  tcp_pcb: pointer to data structure
 * @param  len: data length
 * @retval err_t: error status
 */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	4613      	mov	r3, r2
 80032bc:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  (void)len;

  es = (struct tcp_echoserver_struct *)arg;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <tcp_echoserver_sent+0x32>
  {
    /* data still in buffer */
    tcp_sent(tpcb, tcp_echoserver_sent);
 80032d0:	490a      	ldr	r1, [pc, #40]	; (80032fc <tcp_echoserver_sent+0x4c>)
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	f007 ff2e 	bl	800b134 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 80032d8:	6979      	ldr	r1, [r7, #20]
 80032da:	68b8      	ldr	r0, [r7, #8]
 80032dc:	f000 f810 	bl	8003300 <tcp_echoserver_send>
 80032e0:	e007      	b.n	80032f2 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* No data to send close connection */
    if(es->state == ES_CLOSING)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d103      	bne.n	80032f2 <tcp_echoserver_sent+0x42>
    {
      tcp_echoserver_connection_close(tpcb, es);
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f000 f901 	bl	80034f4 <tcp_echoserver_connection_close>
    }
  }
  return ERR_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	080032b1 	.word	0x080032b1

08003300 <tcp_echoserver_send>:
 * @retval err_t: error status
 */

#define USART_COPY 1
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8003306:	af00      	add	r7, sp, #0
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	6018      	str	r0, [r3, #0]
 800330c:	463b      	mov	r3, r7
 800330e:	6019      	str	r1, [r3, #0]
  struct pbuf *ptr;

#if USART_COPY == 1
  char dane[256] = {0};
 8003310:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003314:	4618      	mov	r0, r3
 8003316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331a:	461a      	mov	r2, r3
 800331c:	2100      	movs	r1, #0
 800331e:	f00f f9cc 	bl	80126ba <memset>
  char buffer[256] = {0};
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	4618      	mov	r0, r3
 8003328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800332c:	461a      	mov	r2, r3
 800332e:	2100      	movs	r1, #0
 8003330:	f00f f9c3 	bl	80126ba <memset>
#endif

  err_t wr_err = ERR_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

  for(int i=0; i<sizze;i++)
 800333a:	2300      	movs	r3, #0
 800333c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8003340:	e00a      	b.n	8003358 <tcp_echoserver_send+0x58>
	  dane1[i]=0;
 8003342:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <tcp_echoserver_send+0x1e8>)
 8003344:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003348:	4413      	add	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<sizze;i++)
 800334e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003352:	3301      	adds	r3, #1
 8003354:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8003358:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800335c:	2bff      	cmp	r3, #255	; 0xff
 800335e:	ddf0      	ble.n	8003342 <tcp_echoserver_send+0x42>

  /* tcp_sndbuf - returns number of bytes in space that is avaliable in output queue */
  while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 8003360:	e0a8      	b.n	80034b4 <tcp_echoserver_send+0x1b4>
  {
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8003362:	463b      	mov	r3, r7
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

#if USART_COPY == 1
    sprintf(dane, "%s",(char *)ptr->payload);
 800336c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f00f fb42 	bl	8012a02 <strcpy>
    for(uint8_t i = 0; i<ptr->len; i++)
 800337e:	2300      	movs	r3, #0
 8003380:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8003384:	e00e      	b.n	80033a4 <tcp_echoserver_send+0xa4>
    {
    	buffer[i] = dane[i];
 8003386:	f897 2217 	ldrb.w	r2, [r7, #535]	; 0x217
 800338a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800338e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8003392:	5c89      	ldrb	r1, [r1, r2]
 8003394:	f107 020c 	add.w	r2, r7, #12
 8003398:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i<ptr->len; i++)
 800339a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800339e:	3301      	adds	r3, #1
 80033a0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 80033a4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80033ae:	895b      	ldrh	r3, [r3, #10]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3e8      	bcc.n	8003386 <tcp_echoserver_send+0x86>
    	//dane1[i]=dane[i];
    }

    /* Close connection */
    if(buffer[0] == 'E' && buffer[1] == 'N' && buffer[2] == 'D') {
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b45      	cmp	r3, #69	; 0x45
 80033bc:	d10f      	bne.n	80033de <tcp_echoserver_send+0xde>
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b4e      	cmp	r3, #78	; 0x4e
 80033c6:	d10a      	bne.n	80033de <tcp_echoserver_send+0xde>
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	789b      	ldrb	r3, [r3, #2]
 80033ce:	2b44      	cmp	r3, #68	; 0x44
 80033d0:	d105      	bne.n	80033de <tcp_echoserver_send+0xde>
    	tcp_echoserver_connection_close(tpcb, es);
 80033d2:	463a      	mov	r2, r7
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	6811      	ldr	r1, [r2, #0]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	f000 f88b 	bl	80034f4 <tcp_echoserver_connection_close>
    else{
      //  Usart_Uart_SendString(USART1, buffer, LF_CR);
    }
#endif

     root = cJSON_Parse((char *)ptr->payload);
 80033de:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fe3b 	bl	8002060 <cJSON_Parse>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <tcp_echoserver_send+0x1ec>)
 80033ee:	601a      	str	r2, [r3, #0]



    rendered = cJSON_Print(root);
 80033f0:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <tcp_echoserver_send+0x1ec>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fec5 	bl	8002184 <cJSON_Print>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <tcp_echoserver_send+0x1f0>)
 80033fe:	601a      	str	r2, [r3, #0]
    sprintf(dane1, "%s",(char *)rendered);
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <tcp_echoserver_send+0x1f0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	4838      	ldr	r0, [pc, #224]	; (80034e8 <tcp_echoserver_send+0x1e8>)
 8003408:	f00f fafb 	bl	8012a02 <strcpy>
    cJSON_Delete(root);
 800340c:	4b37      	ldr	r3, [pc, #220]	; (80034ec <tcp_echoserver_send+0x1ec>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fd9f 	bl	8000f54 <cJSON_Delete>


    //wr_err = tcp_write(tpcb, buffereth, strlen(buffereth), 1);
   // wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
    wr_err = tcp_write(tpcb, dane1, strlen(rendered), 1);
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <tcp_echoserver_send+0x1f0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fc fef8 	bl	8000210 <strlen>
 8003420:	4603      	mov	r3, r0
 8003422:	b29a      	uxth	r2, r3
 8003424:	1d38      	adds	r0, r7, #4
 8003426:	2301      	movs	r3, #1
 8003428:	492f      	ldr	r1, [pc, #188]	; (80034e8 <tcp_echoserver_send+0x1e8>)
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	f00a fd8a 	bl	800df44 <tcp_write>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

    /* Clear data */
    memset(dane, 0x00, sizeof(dane));
 8003436:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800343a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f00f f93a 	bl	80126ba <memset>

    if (wr_err == ERR_OK)
 8003446:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 800344a:	2b00      	cmp	r3, #0
 800344c:	d128      	bne.n	80034a0 <tcp_echoserver_send+0x1a0>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800344e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003452:	895b      	ldrh	r3, [r3, #10]
 8003454:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8003458:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	463b      	mov	r3, r7
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8003464:	463b      	mov	r3, r7
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <tcp_echoserver_send+0x17a>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800346e:	463b      	mov	r3, r7
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f006 f885 	bl	8009584 <pbuf_ref>

      /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800347a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 800347e:	f005 ffe1 	bl	8009444 <pbuf_free>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
      }
      while(freed == 0);
 8003488:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f4      	beq.n	800347a <tcp_echoserver_send+0x17a>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8003490:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	4611      	mov	r1, r2
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	f006 ff3d 	bl	800a318 <tcp_recved>
 800349e:	e009      	b.n	80034b4 <tcp_echoserver_send+0x1b4>
   }
   else if(wr_err == ERR_MEM)
 80034a0:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d104      	bne.n	80034b4 <tcp_echoserver_send+0x1b4>
   {
     /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80034aa:	463b      	mov	r3, r7
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80034b2:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 80034b4:	f997 321f 	ldrsb.w	r3, [r7, #543]	; 0x21f
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <tcp_echoserver_send+0x1dc>
 80034bc:	463b      	mov	r3, r7
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <tcp_echoserver_send+0x1dc>
 80034c6:	463b      	mov	r3, r7
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	895a      	ldrh	r2, [r3, #10]
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80034d6:	429a      	cmp	r2, r3
 80034d8:	f67f af43 	bls.w	8003362 <tcp_echoserver_send+0x62>
   }
   else { }
  }
}
 80034dc:	bf00      	nop
 80034de:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200003e0 	.word	0x200003e0
 80034ec:	200003dc 	.word	0x200003dc
 80034f0:	200004e0 	.word	0x200004e0

080034f4 <tcp_echoserver_connection_close>:
 * @param  *es: struct with data
 * @retval none
 */

static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  //remove all callbacks
  tcp_arg(tpcb, NULL);
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f007 fde3 	bl	800b0cc <tcp_arg>
  tcp_sent(tpcb, NULL);
 8003506:	2100      	movs	r1, #0
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f007 fe13 	bl	800b134 <tcp_sent>
  tcp_recv(tpcb, NULL);
 800350e:	2100      	movs	r1, #0
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f007 fded 	bl	800b0f0 <tcp_recv>
  tcp_err(tpcb, NULL);
 8003516:	2100      	movs	r1, #0
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f007 fe2d 	bl	800b178 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f007 fe62 	bl	800b1ec <tcp_poll>

  /* free structure */
  if (es != NULL)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f004 fe6e 	bl	8008210 <mem_free>
  }

  /* Connection close */
  tcp_close(tpcb);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f006 fc2b 	bl	8009d90 <tcp_close>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_MspInit+0x44>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_MspInit+0x44>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_MspInit+0x44>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_MspInit+0x44>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_MspInit+0x44>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_MspInit+0x44>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359e:	e7fe      	b.n	800359e <HardFault_Handler+0x4>

080035a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a4:	e7fe      	b.n	80035a4 <MemManage_Handler+0x4>

080035a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035aa:	e7fe      	b.n	80035aa <BusFault_Handler+0x4>

080035ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <UsageFault_Handler+0x4>

080035b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e0:	f000 fad2 	bl	8003b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <DMA1_Stream6_IRQHandler+0x10>)
 80035ee:	f000 fccd 	bl	8003f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000564 	.word	0x20000564

080035fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e00a      	b.n	8003624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800360e:	f3af 8000 	nop.w
 8003612:	4601      	mov	r1, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	60ba      	str	r2, [r7, #8]
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	dbf0      	blt.n	800360e <_read+0x12>
	}

return len;
 800362c:	687b      	ldr	r3, [r7, #4]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e009      	b.n	800365c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	60ba      	str	r2, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	dbf1      	blt.n	8003648 <_write+0x12>
	}
	return len;
 8003664:	687b      	ldr	r3, [r7, #4]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_close>:

int _close(int file)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
	return -1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003696:	605a      	str	r2, [r3, #4]
	return 0;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <_isatty>:

int _isatty(int file)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
	return 1;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
	return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <_sbrk+0x50>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <_sbrk+0x16>
		heap_end = &end;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <_sbrk+0x50>)
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <_sbrk+0x54>)
 80036ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <_sbrk+0x50>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <_sbrk+0x50>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	466a      	mov	r2, sp
 80036fe:	4293      	cmp	r3, r2
 8003700:	d905      	bls.n	800370e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <_sbrk+0x58>)
 8003704:	220c      	movs	r2, #12
 8003706:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
 800370c:	e006      	b.n	800371c <_sbrk+0x44>
	}

	heap_end += incr;
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <_sbrk+0x50>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	4a04      	ldr	r2, [pc, #16]	; (8003728 <_sbrk+0x50>)
 8003718:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000218 	.word	0x20000218
 800372c:	20007098 	.word	0x20007098
 8003730:	20007094 	.word	0x20007094

08003734 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <SystemInit+0x28>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <SystemInit+0x28>)
 8003740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <SystemInit+0x28>)
 800374a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800374e:	609a      	str	r2, [r3, #8]
#endif
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <MX_USART2_UART_Init+0x5c>)
 8003768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 800376c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 8003786:	220c      	movs	r2, #12
 8003788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 8003798:	2200      	movs	r2, #0
 800379a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037a2:	4805      	ldr	r0, [pc, #20]	; (80037b8 <MX_USART2_UART_Init+0x58>)
 80037a4:	f003 f946 	bl	8006a34 <HAL_UART_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80037ae:	f7ff fc23 	bl	8002ff8 <Error_Handler>
  }

}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200005c4 	.word	0x200005c4
 80037bc:	40004400 	.word	0x40004400

080037c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <MX_USART3_UART_Init+0x5c>)
 80037c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037e6:	220c      	movs	r2, #12
 80037e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037fe:	2200      	movs	r2, #0
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_USART3_UART_Init+0x58>)
 8003804:	f003 f916 	bl	8006a34 <HAL_UART_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800380e:	f7ff fbf3 	bl	8002ff8 <Error_Handler>
  }

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200004e4 	.word	0x200004e4
 800381c:	40004800 	.word	0x40004800

08003820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a53      	ldr	r2, [pc, #332]	; (800398c <HAL_UART_MspInit+0x16c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d172      	bne.n	8003928 <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_UART_MspInit+0x170>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a46      	ldr	r2, [pc, #280]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b44      	ldr	r3, [pc, #272]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800388a:	2308      	movs	r3, #8
 800388c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388e:	2302      	movs	r3, #2
 8003890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003896:	2303      	movs	r3, #3
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800389a:	2307      	movs	r3, #7
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	4619      	mov	r1, r3
 80038a4:	483b      	ldr	r0, [pc, #236]	; (8003994 <HAL_UART_MspInit+0x174>)
 80038a6:	f001 fd1f 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80038aa:	2320      	movs	r3, #32
 80038ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038ba:	2307      	movs	r3, #7
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038be:	f107 031c 	add.w	r3, r7, #28
 80038c2:	4619      	mov	r1, r3
 80038c4:	4834      	ldr	r0, [pc, #208]	; (8003998 <HAL_UART_MspInit+0x178>)
 80038c6:	f001 fd0f 	bl	80052e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_UART_MspInit+0x180>)
 80038ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038d8:	4b30      	ldr	r3, [pc, #192]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038de:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038f2:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038f8:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_UART_MspInit+0x17c>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_UART_MspInit+0x17c>)
 8003900:	2200      	movs	r2, #0
 8003902:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_UART_MspInit+0x17c>)
 8003906:	2200      	movs	r2, #0
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800390a:	4824      	ldr	r0, [pc, #144]	; (800399c <HAL_UART_MspInit+0x17c>)
 800390c:	f000 fa90 	bl	8003e30 <HAL_DMA_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003916:	f7ff fb6f 	bl	8002ff8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_UART_MspInit+0x17c>)
 800391e:	669a      	str	r2, [r3, #104]	; 0x68
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_UART_MspInit+0x17c>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003926:	e02d      	b.n	8003984 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART3)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_UART_MspInit+0x184>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d128      	bne.n	8003984 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003932:	4b17      	ldr	r3, [pc, #92]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a16      	ldr	r2, [pc, #88]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <HAL_UART_MspInit+0x170>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003950:	f043 0308 	orr.w	r3, r3, #8
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <HAL_UART_MspInit+0x170>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003970:	2303      	movs	r3, #3
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003974:	2307      	movs	r3, #7
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	4619      	mov	r1, r3
 800397e:	4806      	ldr	r0, [pc, #24]	; (8003998 <HAL_UART_MspInit+0x178>)
 8003980:	f001 fcb2 	bl	80052e8 <HAL_GPIO_Init>
}
 8003984:	bf00      	nop
 8003986:	3730      	adds	r7, #48	; 0x30
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40004400 	.word	0x40004400
 8003990:	40023800 	.word	0x40023800
 8003994:	40020000 	.word	0x40020000
 8003998:	40020c00 	.word	0x40020c00
 800399c:	20000564 	.word	0x20000564
 80039a0:	400260a0 	.word	0x400260a0
 80039a4:	40004800 	.word	0x40004800

080039a8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80039ac:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80039b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b6:	2206      	movs	r2, #6
 80039b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039bc:	2202      	movs	r2, #2
 80039be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c8:	2202      	movs	r2, #2
 80039ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039da:	2200      	movs	r2, #0
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80039e4:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80039ea:	4805      	ldr	r0, [pc, #20]	; (8003a00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ec:	f001 fe3f 	bl	800566e <HAL_PCD_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80039f6:	f7ff faff 	bl	8002ff8 <Error_Handler>
  }

}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000644 	.word	0x20000644

08003a04 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	; 0x28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a24:	d141      	bne.n	8003aaa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003a3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a50:	230a      	movs	r3, #10
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4817      	ldr	r0, [pc, #92]	; (8003ab8 <HAL_PCD_MspInit+0xb4>)
 8003a5c:	f001 fc44 	bl	80052e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a6e:	f107 0314 	add.w	r3, r7, #20
 8003a72:	4619      	mov	r1, r3
 8003a74:	4810      	ldr	r0, [pc, #64]	; (8003ab8 <HAL_PCD_MspInit+0xb4>)
 8003a76:	f001 fc37 	bl	80052e8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a84:	6353      	str	r3, [r2, #52]	; 0x34
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_PCD_MspInit+0xb0>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40020000 	.word	0x40020000

08003abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ac2:	e003      	b.n	8003acc <LoopCopyDataInit>

08003ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aca:	3104      	adds	r1, #4

08003acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ad4:	d3f6      	bcc.n	8003ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ad8:	e002      	b.n	8003ae0 <LoopFillZerobss>

08003ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003adc:	f842 3b04 	str.w	r3, [r2], #4

08003ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae0:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ae4:	d3f9      	bcc.n	8003ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ae6:	f7ff fe25 	bl	8003734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aea:	f00e fd5b 	bl	80125a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aee:	f7ff f9c7 	bl	8002e80 <main>
  bx  lr    
 8003af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003af4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003af8:	08018bb4 	.word	0x08018bb4
  ldr  r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b00:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8003b04:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8003b08:	20007098 	.word	0x20007098

08003b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b0c:	e7fe      	b.n	8003b0c <ADC_IRQHandler>

08003b0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b12:	2003      	movs	r0, #3
 8003b14:	f000 f94a 	bl	8003dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f000 f805 	bl	8003b28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b1e:	f7ff fd11 	bl	8003544 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_InitTick+0x54>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_InitTick+0x58>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f965 	bl	8003e16 <HAL_SYSTICK_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00e      	b.n	8003b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b0f      	cmp	r3, #15
 8003b5a:	d80a      	bhi.n	8003b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	f000 f92d 	bl	8003dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b68:	4a06      	ldr	r2, [pc, #24]	; (8003b84 <HAL_InitTick+0x5c>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	20000014 	.word	0x20000014
 8003b84:	20000010 	.word	0x20000010

08003b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_IncTick+0x20>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_IncTick+0x24>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_IncTick+0x24>)
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000014 	.word	0x20000014
 8003bac:	20000a48 	.word	0x20000a48

08003bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_GetTick+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000a48 	.word	0x20000a48

08003bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff ffee 	bl	8003bb0 <HAL_GetTick>
 8003bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d005      	beq.n	8003bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_Delay+0x40>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bee:	bf00      	nop
 8003bf0:	f7ff ffde 	bl	8003bb0 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d8f7      	bhi.n	8003bf0 <HAL_Delay+0x28>
  {
  }
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000014 	.word	0x20000014

08003c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <__NVIC_SetPriorityGrouping+0x40>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <__NVIC_SetPriorityGrouping+0x40>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00
 8003c50:	05fa0000 	.word	0x05fa0000

08003c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <__NVIC_GetPriorityGrouping+0x18>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 0307 	and.w	r3, r3, #7
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db0b      	blt.n	8003c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <__NVIC_EnableIRQ+0x38>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2001      	movs	r0, #1
 8003c92:	fa00 f202 	lsl.w	r2, r0, r2
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	db0a      	blt.n	8003cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	490c      	ldr	r1, [pc, #48]	; (8003cf8 <__NVIC_SetPriority+0x4c>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	440b      	add	r3, r1
 8003cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd4:	e00a      	b.n	8003cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4908      	ldr	r1, [pc, #32]	; (8003cfc <__NVIC_SetPriority+0x50>)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	3b04      	subs	r3, #4
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	440b      	add	r3, r1
 8003cea:	761a      	strb	r2, [r3, #24]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f1c3 0307 	rsb	r3, r3, #7
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf28      	it	cs
 8003d1e:	2304      	movcs	r3, #4
 8003d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d902      	bls.n	8003d30 <NVIC_EncodePriority+0x30>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3b03      	subs	r3, #3
 8003d2e:	e000      	b.n	8003d32 <NVIC_EncodePriority+0x32>
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	401a      	ands	r2, r3
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	43d9      	mvns	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	4313      	orrs	r3, r2
         );
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3724      	adds	r7, #36	; 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d78:	d301      	bcc.n	8003d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e00f      	b.n	8003d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d7e:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <SysTick_Config+0x40>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d86:	210f      	movs	r1, #15
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	f7ff ff8e 	bl	8003cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <SysTick_Config+0x40>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <SysTick_Config+0x40>)
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	e000e010 	.word	0xe000e010

08003dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff29 	bl	8003c0c <__NVIC_SetPriorityGrouping>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd4:	f7ff ff3e 	bl	8003c54 <__NVIC_GetPriorityGrouping>
 8003dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff8e 	bl	8003d00 <NVIC_EncodePriority>
 8003de4:	4602      	mov	r2, r0
 8003de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff5d 	bl	8003cac <__NVIC_SetPriority>
}
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff31 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ffa2 	bl	8003d68 <SysTick_Config>
 8003e24:	4603      	mov	r3, r0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff feb8 	bl	8003bb0 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e099      	b.n	8003f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6c:	e00f      	b.n	8003e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e6e:	f7ff fe9f 	bl	8003bb0 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d908      	bls.n	8003e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e078      	b.n	8003f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e8      	bne.n	8003e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <HAL_DMA_Init+0x158>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d107      	bne.n	8003ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0307 	bic.w	r3, r3, #7
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d117      	bne.n	8003f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f9e9 	bl	800430c <DMA_CheckFifoParam>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2240      	movs	r2, #64	; 0x40
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e016      	b.n	8003f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9a0 	bl	80042a0 <DMA_CalcBaseAndBitshift>
 8003f60:	4603      	mov	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	223f      	movs	r2, #63	; 0x3f
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	f010803f 	.word	0xf010803f

08003f8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f98:	4b92      	ldr	r3, [pc, #584]	; (80041e4 <HAL_DMA_IRQHandler+0x258>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a92      	ldr	r2, [pc, #584]	; (80041e8 <HAL_DMA_IRQHandler+0x25c>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0204 	bic.w	r2, r2, #4
 8003fde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d012      	beq.n	800402e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2201      	movs	r2, #1
 800401c:	409a      	lsls	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	2204      	movs	r2, #4
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d012      	beq.n	8004064 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	2204      	movs	r2, #4
 8004052:	409a      	lsls	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2210      	movs	r2, #16
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d043      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d03c      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	2210      	movs	r2, #16
 8004088:	409a      	lsls	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d018      	beq.n	80040ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d024      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
 80040ba:	e01f      	b.n	80040fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	e016      	b.n	80040fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0208 	bic.w	r2, r2, #8
 80040ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2220      	movs	r2, #32
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 808e 	beq.w	800422a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8086 	beq.w	800422a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	2220      	movs	r2, #32
 8004124:	409a      	lsls	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b05      	cmp	r3, #5
 8004134:	d136      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0216 	bic.w	r2, r2, #22
 8004144:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004154:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_DMA_IRQHandler+0x1da>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0208 	bic.w	r2, r2, #8
 8004174:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	223f      	movs	r2, #63	; 0x3f
 800417c:	409a      	lsls	r2, r3
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d07d      	beq.n	8004296 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
        }
        return;
 80041a2:	e078      	b.n	8004296 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01c      	beq.n	80041ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d030      	beq.n	800422a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	e02b      	b.n	800422a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d027      	beq.n	800422a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
 80041e2:	e022      	b.n	800422a <HAL_DMA_IRQHandler+0x29e>
 80041e4:	2000000c 	.word	0x2000000c
 80041e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0210 	bic.w	r2, r2, #16
 8004208:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	2b00      	cmp	r3, #0
 8004230:	d032      	beq.n	8004298 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d022      	beq.n	8004284 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2205      	movs	r2, #5
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3301      	adds	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	429a      	cmp	r2, r3
 8004260:	d307      	bcc.n	8004272 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f2      	bne.n	8004256 <HAL_DMA_IRQHandler+0x2ca>
 8004270:	e000      	b.n	8004274 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004272:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
 8004294:	e000      	b.n	8004298 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004296:	bf00      	nop
    }
  }
}
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop

080042a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	3b10      	subs	r3, #16
 80042b0:	4a13      	ldr	r2, [pc, #76]	; (8004300 <DMA_CalcBaseAndBitshift+0x60>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <DMA_CalcBaseAndBitshift+0x64>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d908      	bls.n	80042e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <DMA_CalcBaseAndBitshift+0x68>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	1d1a      	adds	r2, r3, #4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	659a      	str	r2, [r3, #88]	; 0x58
 80042de:	e006      	b.n	80042ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <DMA_CalcBaseAndBitshift+0x68>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	aaaaaaab 	.word	0xaaaaaaab
 8004304:	08018794 	.word	0x08018794
 8004308:	fffffc00 	.word	0xfffffc00

0800430c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11f      	bne.n	8004366 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d855      	bhi.n	80043d8 <DMA_CheckFifoParam+0xcc>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <DMA_CheckFifoParam+0x28>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004345 	.word	0x08004345
 8004338:	08004357 	.word	0x08004357
 800433c:	08004345 	.word	0x08004345
 8004340:	080043d9 	.word	0x080043d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d045      	beq.n	80043dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e042      	b.n	80043dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435e:	d13f      	bne.n	80043e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004364:	e03c      	b.n	80043e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d121      	bne.n	80043b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b03      	cmp	r3, #3
 8004374:	d836      	bhi.n	80043e4 <DMA_CheckFifoParam+0xd8>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <DMA_CheckFifoParam+0x70>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	0800438d 	.word	0x0800438d
 8004380:	08004393 	.word	0x08004393
 8004384:	0800438d 	.word	0x0800438d
 8004388:	080043a5 	.word	0x080043a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e02f      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a2:	e021      	b.n	80043e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ac:	d11e      	bne.n	80043ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043b2:	e01b      	b.n	80043ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <DMA_CheckFifoParam+0xb4>
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d003      	beq.n	80043c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043be:	e018      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      break;
 80043c4:	e015      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00e      	beq.n	80043f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      break;
 80043d6:	e00b      	b.n	80043f0 <DMA_CheckFifoParam+0xe4>
      break;
 80043d8:	bf00      	nop
 80043da:	e00a      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043dc:	bf00      	nop
 80043de:	e008      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043e0:	bf00      	nop
 80043e2:	e006      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043e4:	bf00      	nop
 80043e6:	e004      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <DMA_CheckFifoParam+0xe6>
      break;
 80043f0:	bf00      	nop
    }
  } 
  
  return status; 
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004410:	4ba9      	ldr	r3, [pc, #676]	; (80046b8 <HAL_ETH_Init+0x2b8>)
 8004412:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e183      	b.n	800472e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fe fbc6 	bl	8002bcc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004440:	4b9e      	ldr	r3, [pc, #632]	; (80046bc <HAL_ETH_Init+0x2bc>)
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	4a9d      	ldr	r2, [pc, #628]	; (80046bc <HAL_ETH_Init+0x2bc>)
 8004446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444a:	6453      	str	r3, [r2, #68]	; 0x44
 800444c:	4b9b      	ldr	r3, [pc, #620]	; (80046bc <HAL_ETH_Init+0x2bc>)
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004458:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <HAL_ETH_Init+0x2c0>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a98      	ldr	r2, [pc, #608]	; (80046c0 <HAL_ETH_Init+0x2c0>)
 800445e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004462:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004464:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <HAL_ETH_Init+0x2c0>)
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4994      	ldr	r1, [pc, #592]	; (80046c0 <HAL_ETH_Init+0x2c0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800448a:	f7ff fb91 	bl	8003bb0 <HAL_GetTick>
 800448e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004490:	e011      	b.n	80044b6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004492:	f7ff fb8d 	bl	8003bb0 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044a0:	d909      	bls.n	80044b6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2203      	movs	r2, #3
 80044a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e13b      	b.n	800472e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e4      	bne.n	8004492 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f023 031c 	bic.w	r3, r3, #28
 80044d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80044d8:	f001 fe8a 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 80044dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4a78      	ldr	r2, [pc, #480]	; (80046c4 <HAL_ETH_Init+0x2c4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d908      	bls.n	80044f8 <HAL_ETH_Init+0xf8>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4a77      	ldr	r2, [pc, #476]	; (80046c8 <HAL_ETH_Init+0x2c8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d804      	bhi.n	80044f8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f043 0308 	orr.w	r3, r3, #8
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e027      	b.n	8004548 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4a73      	ldr	r2, [pc, #460]	; (80046c8 <HAL_ETH_Init+0x2c8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d908      	bls.n	8004512 <HAL_ETH_Init+0x112>
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4a72      	ldr	r2, [pc, #456]	; (80046cc <HAL_ETH_Init+0x2cc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d804      	bhi.n	8004512 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f043 030c 	orr.w	r3, r3, #12
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e01a      	b.n	8004548 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4a6d      	ldr	r2, [pc, #436]	; (80046cc <HAL_ETH_Init+0x2cc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d903      	bls.n	8004522 <HAL_ETH_Init+0x122>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	4a6c      	ldr	r2, [pc, #432]	; (80046d0 <HAL_ETH_Init+0x2d0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d911      	bls.n	8004546 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	4a6a      	ldr	r2, [pc, #424]	; (80046d0 <HAL_ETH_Init+0x2d0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d908      	bls.n	800453c <HAL_ETH_Init+0x13c>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4a69      	ldr	r2, [pc, #420]	; (80046d4 <HAL_ETH_Init+0x2d4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d804      	bhi.n	800453c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e005      	b.n	8004548 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f043 0310 	orr.w	r3, r3, #16
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e000      	b.n	8004548 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004546:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004550:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004554:	2100      	movs	r1, #0
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fb9a 	bl	8004c90 <HAL_ETH_WritePHYRegister>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004566:	6939      	ldr	r1, [r7, #16]
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fc27 	bl	8004dbc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0d9      	b.n	800472e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800457a:	20ff      	movs	r0, #255	; 0xff
 800457c:	f7ff fb24 	bl	8003bc8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a7 	beq.w	80046d8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7ff fb11 	bl	8003bb0 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	461a      	mov	r2, r3
 8004596:	2101      	movs	r1, #1
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fb11 	bl	8004bc0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800459e:	f7ff fb07 	bl	8003bb0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d90f      	bls.n	80045d0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fc00 	bl	8004dbc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ae      	b.n	800472e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0da      	beq.n	8004590 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80045da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045de:	2100      	movs	r1, #0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fb55 	bl	8004c90 <HAL_ETH_WritePHYRegister>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80045f0:	6939      	ldr	r1, [r7, #16]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fbe2 	bl	8004dbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004600:	2301      	movs	r3, #1
 8004602:	e094      	b.n	800472e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004604:	f7ff fad4 	bl	8003bb0 <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800460a:	f107 030c 	add.w	r3, r7, #12
 800460e:	461a      	mov	r2, r3
 8004610:	2101      	movs	r1, #1
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fad4 	bl	8004bc0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004618:	f7ff faca 	bl	8003bb0 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d90f      	bls.n	800464a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fbc3 	bl	8004dbc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e071      	b.n	800472e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0da      	beq.n	800460a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	461a      	mov	r2, r3
 800465a:	211f      	movs	r1, #31
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 faaf 	bl	8004bc0 <HAL_ETH_ReadPHYRegister>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800466c:	6939      	ldr	r1, [r7, #16]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fba4 	bl	8004dbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800467c:	2301      	movs	r3, #1
 800467e:	e056      	b.n	800472e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	e002      	b.n	800469a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	e037      	b.n	800471c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	e032      	b.n	800471c <HAL_ETH_Init+0x31c>
 80046b6:	bf00      	nop
 80046b8:	03938700 	.word	0x03938700
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40013800 	.word	0x40013800
 80046c4:	01312cff 	.word	0x01312cff
 80046c8:	02160ebf 	.word	0x02160ebf
 80046cc:	039386ff 	.word	0x039386ff
 80046d0:	05f5e0ff 	.word	0x05f5e0ff
 80046d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	2100      	movs	r1, #0
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 facd 	bl	8004c90 <HAL_ETH_WritePHYRegister>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004700:	6939      	ldr	r1, [r7, #16]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fb5a 	bl	8004dbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e00c      	b.n	800472e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004714:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004718:	f7ff fa56 	bl	8003bc8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800471c:	6939      	ldr	r1, [r7, #16]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fb4c 	bl	8004dbc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop

08004738 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_ETH_DMATxDescListInit+0x20>
 8004754:	2302      	movs	r3, #2
 8004756:	e052      	b.n	80047fe <HAL_ETH_DMATxDescListInit+0xc6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e030      	b.n	80047d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	015b      	lsls	r3, r3, #5
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	4413      	add	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004784:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	461a      	mov	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d208      	bcs.n	80047ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3301      	adds	r3, #1
 80047bc:	015b      	lsls	r3, r3, #5
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	4413      	add	r3, r2
 80047c2:	461a      	mov	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e002      	b.n	80047d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3301      	adds	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3ca      	bcc.n	8004774 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	f241 0310 	movw	r3, #4112	; 0x1010
 80047e8:	440b      	add	r3, r1
 80047ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_ETH_DMARxDescListInit+0x20>
 8004826:	2302      	movs	r3, #2
 8004828:	e056      	b.n	80048d8 <HAL_ETH_DMARxDescListInit+0xce>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e034      	b.n	80048b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	015b      	lsls	r3, r3, #5
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004856:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800485e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	461a      	mov	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	429a      	cmp	r2, r3
 8004890:	d208      	bcs.n	80048a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	3301      	adds	r3, #1
 8004896:	015b      	lsls	r3, r3, #5
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4413      	add	r3, r2
 800489c:	461a      	mov	r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e002      	b.n	80048aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	3301      	adds	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3c6      	bcc.n	8004846 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	f241 030c 	movw	r3, #4108	; 0x100c
 80048c2:	440b      	add	r3, r1
 80048c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_ETH_TransmitFrame+0x24>
 8004904:	2302      	movs	r3, #2
 8004906:	e0cd      	b.n	8004aa4 <HAL_ETH_TransmitFrame+0x1c0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800492e:	2301      	movs	r3, #1
 8004930:	e0b8      	b.n	8004aa4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	da09      	bge.n	8004950 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2212      	movs	r2, #18
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0a9      	b.n	8004aa4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004956:	4293      	cmp	r3, r2
 8004958:	d915      	bls.n	8004986 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4a54      	ldr	r2, [pc, #336]	; (8004ab0 <HAL_ETH_TransmitFrame+0x1cc>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <HAL_ETH_TransmitFrame+0x1cc>)
 800496a:	fba3 1302 	umull	r1, r3, r3, r2
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3301      	adds	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e001      	b.n	800498a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d11c      	bne.n	80049ca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800499e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80049aa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80049ba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049c8:	e04b      	b.n	8004a62 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e044      	b.n	8004a5a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049de:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80049fe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d116      	bne.n	8004a38 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a18:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <HAL_ETH_TransmitFrame+0x1d0>)
 8004a1e:	fb02 f203 	mul.w	r2, r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a2a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004a36:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004a46:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3301      	adds	r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d3b6      	bcc.n	80049d0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a6a:	4413      	add	r3, r2
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a7e:	4413      	add	r3, r2
 8004a80:	2204      	movs	r2, #4
 8004a82:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	f241 0304 	movw	r3, #4100	; 0x1004
 8004a8c:	4413      	add	r3, r2
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	ac02b00b 	.word	0xac02b00b
 8004ab4:	fffffa0c 	.word	0xfffffa0c

08004ab8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_ETH_GetReceivedFrame+0x1a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e070      	b.n	8004bb4 <HAL_ETH_GetReceivedFrame+0xfc>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db5a      	blt.n	8004ba2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d030      	beq.n	8004b5c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d103      	bne.n	8004b14 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004b28:	3b04      	subs	r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e02b      	b.n	8004bb4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	461a      	mov	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28
 8004b8a:	e00a      	b.n	8004ba2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b82      	cmp	r3, #130	; 0x82
 8004be0:	d101      	bne.n	8004be6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
 8004be4:	e050      	b.n	8004c88 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2282      	movs	r2, #130	; 0x82
 8004bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 031c 	and.w	r3, r3, #28
 8004bfc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8a1b      	ldrh	r3, [r3, #16]
 8004c02:	02db      	lsls	r3, r3, #11
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004c0c:	897b      	ldrh	r3, [r7, #10]
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f023 0302 	bic.w	r3, r3, #2
 8004c20:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c32:	f7fe ffbd 	bl	8003bb0 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c38:	e015      	b.n	8004c66 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004c3a:	f7fe ffb9 	bl	8003bb0 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d309      	bcc.n	8004c5e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e014      	b.n	8004c88 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e4      	bne.n	8004c3a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b42      	cmp	r3, #66	; 0x42
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e04e      	b.n	8004d54 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2242      	movs	r2, #66	; 0x42
 8004cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f003 031c 	and.w	r3, r3, #28
 8004ccc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8a1b      	ldrh	r3, [r3, #16]
 8004cd2:	02db      	lsls	r3, r3, #11
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004cdc:	897b      	ldrh	r3, [r7, #10]
 8004cde:	019b      	lsls	r3, r3, #6
 8004ce0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d0c:	f7fe ff50 	bl	8003bb0 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d12:	e015      	b.n	8004d40 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004d14:	f7fe ff4c 	bl	8003bb0 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d22:	d309      	bcc.n	8004d38 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e00d      	b.n	8004d54 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e4      	bne.n	8004d14 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_ETH_Start+0x16>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e01f      	b.n	8004db2 <HAL_ETH_Start+0x56>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa1c 	bl	80051c0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa36 	bl	80051fa <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa80 	bl	8005294 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fa4d 	bl	8005234 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa62 	bl	8005264 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b0b0      	sub	sp, #192	; 0xc0
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dd8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004dea:	2300      	movs	r3, #0
 8004dec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e06:	663b      	str	r3, [r7, #96]	; 0x60
 8004e08:	e001      	b.n	8004e0e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e12:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004e90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e94:	4bab      	ldr	r3, [pc, #684]	; (8005144 <ETH_MACDMAConfig+0x388>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004ea0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004ea4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004ea8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004eae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004eb2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004eb6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004ebc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004ec0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004ec4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004ec8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004ecc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004ece:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004ed0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004ed2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ee4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	f7fe fe69 	bl	8003bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004efe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004f00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004f04:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004f08:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004f0e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004f14:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004f1a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004f20:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004f24:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004f2c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004f2e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7fe fe44 	bl	8003bc8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f48:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f52:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004f5c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f6c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004f70:	4013      	ands	r3, r2
 8004f72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f7a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004f7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004f80:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004f86:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004f8c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004f92:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004f98:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004f9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f7fe fe05 	bl	8003bc8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fc6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004fc8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004fcc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	f7fe fdf0 	bl	8003bc8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ff0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ffa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005004:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005016:	2304      	movs	r3, #4
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800501a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800502c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005036:	2300      	movs	r3, #0
 8005038:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800503a:	2300      	movs	r3, #0
 800503c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f241 0318 	movw	r3, #4120	; 0x1018
 8005046:	4413      	add	r3, r2
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800504e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005052:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <ETH_MACDMAConfig+0x38c>)
 8005054:	4013      	ands	r3, r2
 8005056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800505a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800505c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800505e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005060:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005062:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005064:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005066:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005068:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800506a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800506c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800506e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005070:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005072:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005076:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800507a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800507c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f241 0318 	movw	r3, #4120	; 0x1018
 800508e:	4413      	add	r3, r2
 8005090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005094:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f241 0318 	movw	r3, #4120	; 0x1018
 800509e:	4413      	add	r3, r2
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80050a6:	2001      	movs	r0, #1
 80050a8:	f7fe fd8e 	bl	8003bc8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80050b4:	4413      	add	r3, r2
 80050b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050ba:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80050bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80050c0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80050c4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80050c8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80050cc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80050ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80050d2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80050d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80050d6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80050e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80050f4:	2001      	movs	r0, #1
 80050f6:	f7fe fd67 	bl	8003bc8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005102:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005106:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d10d      	bne.n	800512c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	f241 031c 	movw	r3, #4124	; 0x101c
 8005118:	4413      	add	r3, r2
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6811      	ldr	r1, [r2, #0]
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <ETH_MACDMAConfig+0x390>)
 8005122:	431a      	orrs	r2, r3
 8005124:	f241 031c 	movw	r3, #4124	; 0x101c
 8005128:	440b      	add	r3, r1
 800512a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	461a      	mov	r2, r3
 8005132:	2100      	movs	r1, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f80b 	bl	8005150 <ETH_MACAddressConfig>
}
 800513a:	bf00      	nop
 800513c:	37c0      	adds	r7, #192	; 0xc0
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	ff20810f 	.word	0xff20810f
 8005148:	f8de3f23 	.word	0xf8de3f23
 800514c:	00010040 	.word	0x00010040

08005150 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3305      	adds	r3, #5
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	3204      	adds	r2, #4
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <ETH_MACAddressConfig+0x68>)
 8005172:	4413      	add	r3, r2
 8005174:	461a      	mov	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3303      	adds	r3, #3
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	061a      	lsls	r2, r3, #24
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3302      	adds	r3, #2
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3301      	adds	r3, #1
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	4313      	orrs	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	7812      	ldrb	r2, [r2, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <ETH_MACAddressConfig+0x6c>)
 80051a2:	4413      	add	r3, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6013      	str	r3, [r2, #0]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40028040 	.word	0x40028040
 80051bc:	40028044 	.word	0x40028044

080051c0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0208 	orr.w	r2, r2, #8
 80051da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051e4:	2001      	movs	r0, #1
 80051e6:	f7fe fcef 	bl	8003bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0204 	orr.w	r2, r2, #4
 8005214:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800521e:	2001      	movs	r0, #1
 8005220:	f7fe fcd2 	bl	8003bc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f241 0318 	movw	r3, #4120	; 0x1018
 8005244:	4413      	add	r3, r2
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6811      	ldr	r1, [r2, #0]
 800524c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005250:	f241 0318 	movw	r3, #4120	; 0x1018
 8005254:	440b      	add	r3, r1
 8005256:	601a      	str	r2, [r3, #0]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	f241 0318 	movw	r3, #4120	; 0x1018
 8005274:	4413      	add	r3, r2
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6811      	ldr	r1, [r2, #0]
 800527c:	f043 0202 	orr.w	r2, r3, #2
 8005280:	f241 0318 	movw	r3, #4120	; 0x1018
 8005284:	440b      	add	r3, r1
 8005286:	601a      	str	r2, [r3, #0]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80052a8:	4413      	add	r3, r2
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6811      	ldr	r1, [r2, #0]
 80052b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80052b8:	440b      	add	r3, r1
 80052ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80052c4:	4413      	add	r3, r2
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052ca:	2001      	movs	r0, #1
 80052cc:	f7fe fc7c 	bl	8003bc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80052da:	440b      	add	r3, r1
 80052dc:	601a      	str	r2, [r3, #0]
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	; 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80052fe:	2300      	movs	r3, #0
 8005300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005302:	2300      	movs	r3, #0
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	e175      	b.n	80055f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005308:	2201      	movs	r2, #1
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	429a      	cmp	r2, r3
 8005322:	f040 8164 	bne.w	80055ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d00b      	beq.n	8005346 <HAL_GPIO_Init+0x5e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d007      	beq.n	8005346 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800533a:	2b11      	cmp	r3, #17
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b12      	cmp	r3, #18
 8005344:	d130      	bne.n	80053a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	2203      	movs	r2, #3
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800537c:	2201      	movs	r2, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 0201 	and.w	r2, r3, #1
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2203      	movs	r2, #3
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d003      	beq.n	80053e8 <HAL_GPIO_Init+0x100>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b12      	cmp	r3, #18
 80053e6:	d123      	bne.n	8005430 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	08da      	lsrs	r2, r3, #3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3208      	adds	r2, #8
 80053f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	220f      	movs	r2, #15
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4013      	ands	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	fa02 f303 	lsl.w	r3, r2, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4313      	orrs	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	08da      	lsrs	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3208      	adds	r2, #8
 800542a:	69b9      	ldr	r1, [r7, #24]
 800542c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	2203      	movs	r2, #3
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0203 	and.w	r2, r3, #3
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80be 	beq.w	80055ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005472:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_GPIO_Init+0x320>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	4a64      	ldr	r2, [pc, #400]	; (8005608 <HAL_GPIO_Init+0x320>)
 8005478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800547c:	6453      	str	r3, [r2, #68]	; 0x44
 800547e:	4b62      	ldr	r3, [pc, #392]	; (8005608 <HAL_GPIO_Init+0x320>)
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800548a:	4a60      	ldr	r2, [pc, #384]	; (800560c <HAL_GPIO_Init+0x324>)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	3302      	adds	r3, #2
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	220f      	movs	r2, #15
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a57      	ldr	r2, [pc, #348]	; (8005610 <HAL_GPIO_Init+0x328>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d037      	beq.n	8005526 <HAL_GPIO_Init+0x23e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a56      	ldr	r2, [pc, #344]	; (8005614 <HAL_GPIO_Init+0x32c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <HAL_GPIO_Init+0x23a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a55      	ldr	r2, [pc, #340]	; (8005618 <HAL_GPIO_Init+0x330>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02b      	beq.n	800551e <HAL_GPIO_Init+0x236>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a54      	ldr	r2, [pc, #336]	; (800561c <HAL_GPIO_Init+0x334>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d025      	beq.n	800551a <HAL_GPIO_Init+0x232>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a53      	ldr	r2, [pc, #332]	; (8005620 <HAL_GPIO_Init+0x338>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01f      	beq.n	8005516 <HAL_GPIO_Init+0x22e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a52      	ldr	r2, [pc, #328]	; (8005624 <HAL_GPIO_Init+0x33c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d019      	beq.n	8005512 <HAL_GPIO_Init+0x22a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a51      	ldr	r2, [pc, #324]	; (8005628 <HAL_GPIO_Init+0x340>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_GPIO_Init+0x226>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a50      	ldr	r2, [pc, #320]	; (800562c <HAL_GPIO_Init+0x344>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00d      	beq.n	800550a <HAL_GPIO_Init+0x222>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a4f      	ldr	r2, [pc, #316]	; (8005630 <HAL_GPIO_Init+0x348>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <HAL_GPIO_Init+0x21e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a4e      	ldr	r2, [pc, #312]	; (8005634 <HAL_GPIO_Init+0x34c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <HAL_GPIO_Init+0x21a>
 80054fe:	2309      	movs	r3, #9
 8005500:	e012      	b.n	8005528 <HAL_GPIO_Init+0x240>
 8005502:	230a      	movs	r3, #10
 8005504:	e010      	b.n	8005528 <HAL_GPIO_Init+0x240>
 8005506:	2308      	movs	r3, #8
 8005508:	e00e      	b.n	8005528 <HAL_GPIO_Init+0x240>
 800550a:	2307      	movs	r3, #7
 800550c:	e00c      	b.n	8005528 <HAL_GPIO_Init+0x240>
 800550e:	2306      	movs	r3, #6
 8005510:	e00a      	b.n	8005528 <HAL_GPIO_Init+0x240>
 8005512:	2305      	movs	r3, #5
 8005514:	e008      	b.n	8005528 <HAL_GPIO_Init+0x240>
 8005516:	2304      	movs	r3, #4
 8005518:	e006      	b.n	8005528 <HAL_GPIO_Init+0x240>
 800551a:	2303      	movs	r3, #3
 800551c:	e004      	b.n	8005528 <HAL_GPIO_Init+0x240>
 800551e:	2302      	movs	r3, #2
 8005520:	e002      	b.n	8005528 <HAL_GPIO_Init+0x240>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_GPIO_Init+0x240>
 8005526:	2300      	movs	r3, #0
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	f002 0203 	and.w	r2, r2, #3
 800552e:	0092      	lsls	r2, r2, #2
 8005530:	4093      	lsls	r3, r2
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005538:	4934      	ldr	r1, [pc, #208]	; (800560c <HAL_GPIO_Init+0x324>)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	3302      	adds	r3, #2
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005546:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <HAL_GPIO_Init+0x350>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800556a:	4a33      	ldr	r2, [pc, #204]	; (8005638 <HAL_GPIO_Init+0x350>)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005570:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_GPIO_Init+0x350>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005594:	4a28      	ldr	r2, [pc, #160]	; (8005638 <HAL_GPIO_Init+0x350>)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_GPIO_Init+0x350>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <HAL_GPIO_Init+0x350>)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <HAL_GPIO_Init+0x350>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <HAL_GPIO_Init+0x350>)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	f67f ae86 	bls.w	8005308 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3724      	adds	r7, #36	; 0x24
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	40023800 	.word	0x40023800
 800560c:	40013800 	.word	0x40013800
 8005610:	40020000 	.word	0x40020000
 8005614:	40020400 	.word	0x40020400
 8005618:	40020800 	.word	0x40020800
 800561c:	40020c00 	.word	0x40020c00
 8005620:	40021000 	.word	0x40021000
 8005624:	40021400 	.word	0x40021400
 8005628:	40021800 	.word	0x40021800
 800562c:	40021c00 	.word	0x40021c00
 8005630:	40022000 	.word	0x40022000
 8005634:	40022400 	.word	0x40022400
 8005638:	40013c00 	.word	0x40013c00

0800563c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	807b      	strh	r3, [r7, #2]
 8005648:	4613      	mov	r3, r2
 800564a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800564c:	787b      	ldrb	r3, [r7, #1]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005658:	e003      	b.n	8005662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800565a:	887b      	ldrh	r3, [r7, #2]
 800565c:	041a      	lsls	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	619a      	str	r2, [r3, #24]
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800566e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005670:	b08f      	sub	sp, #60	; 0x3c
 8005672:	af0a      	add	r7, sp, #40	; 0x28
 8005674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e116      	b.n	80058ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fe f9b2 	bl	8003a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2203      	movs	r2, #3
 80056a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d102      	bne.n	80056ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fe54 	bl	800736c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	687e      	ldr	r6, [r7, #4]
 80056cc:	466d      	mov	r5, sp
 80056ce:	f106 0410 	add.w	r4, r6, #16
 80056d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056de:	e885 0003 	stmia.w	r5, {r0, r1}
 80056e2:	1d33      	adds	r3, r6, #4
 80056e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056e6:	6838      	ldr	r0, [r7, #0]
 80056e8:	f001 fde8 	bl	80072bc <USB_CoreInit>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e0d7      	b.n	80058ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fe42 	bl	800738e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	e04a      	b.n	80057a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	333d      	adds	r3, #61	; 0x3d
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	333c      	adds	r3, #60	; 0x3c
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	b298      	uxth	r0, r3
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3342      	adds	r3, #66	; 0x42
 800574c:	4602      	mov	r2, r0
 800574e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005750:	7bfa      	ldrb	r2, [r7, #15]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	333f      	adds	r3, #63	; 0x3f
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005764:	7bfa      	ldrb	r2, [r7, #15]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	3344      	adds	r3, #68	; 0x44
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005778:	7bfa      	ldrb	r2, [r7, #15]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	3348      	adds	r3, #72	; 0x48
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	3350      	adds	r3, #80	; 0x50
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	3301      	adds	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d3af      	bcc.n	8005710 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]
 80057b4:	e044      	b.n	8005840 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80057de:	7bfa      	ldrb	r2, [r7, #15]
 80057e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057e2:	7bfa      	ldrb	r2, [r7, #15]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005824:	7bfa      	ldrb	r2, [r7, #15]
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	3301      	adds	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
 8005840:	7bfa      	ldrb	r2, [r7, #15]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d3b5      	bcc.n	80057b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	687e      	ldr	r6, [r7, #4]
 8005852:	466d      	mov	r5, sp
 8005854:	f106 0410 	add.w	r4, r6, #16
 8005858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800585a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800585c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800585e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005860:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005864:	e885 0003 	stmia.w	r5, {r0, r1}
 8005868:	1d33      	adds	r3, r6, #4
 800586a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800586c:	6838      	ldr	r0, [r7, #0]
 800586e:	f001 fdb9 	bl	80073e4 <USB_DevInit>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e014      	b.n	80058ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b01      	cmp	r3, #1
 800589a:	d102      	bne.n	80058a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f80b 	bl	80058b8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 ff6b 	bl	8007782 <USB_DevDisconnect>

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080058b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <HAL_PCDEx_ActivateLPM+0x44>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	10000003 	.word	0x10000003

08005900 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a04      	ldr	r2, [pc, #16]	; (800591c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800590a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590e:	6013      	str	r3, [r2, #0]
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40007000 	.word	0x40007000

08005920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005928:	2300      	movs	r3, #0
 800592a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e291      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8087 	beq.w	8005a52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005944:	4b96      	ldr	r3, [pc, #600]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b04      	cmp	r3, #4
 800594e:	d00c      	beq.n	800596a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005950:	4b93      	ldr	r3, [pc, #588]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 030c 	and.w	r3, r3, #12
 8005958:	2b08      	cmp	r3, #8
 800595a:	d112      	bne.n	8005982 <HAL_RCC_OscConfig+0x62>
 800595c:	4b90      	ldr	r3, [pc, #576]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005964:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005968:	d10b      	bne.n	8005982 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800596a:	4b8d      	ldr	r3, [pc, #564]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d06c      	beq.n	8005a50 <HAL_RCC_OscConfig+0x130>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d168      	bne.n	8005a50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e26b      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598a:	d106      	bne.n	800599a <HAL_RCC_OscConfig+0x7a>
 800598c:	4b84      	ldr	r3, [pc, #528]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a83      	ldr	r2, [pc, #524]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e02e      	b.n	80059f8 <HAL_RCC_OscConfig+0xd8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10c      	bne.n	80059bc <HAL_RCC_OscConfig+0x9c>
 80059a2:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a7e      	ldr	r2, [pc, #504]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	4b7c      	ldr	r3, [pc, #496]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a7b      	ldr	r2, [pc, #492]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e01d      	b.n	80059f8 <HAL_RCC_OscConfig+0xd8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059c4:	d10c      	bne.n	80059e0 <HAL_RCC_OscConfig+0xc0>
 80059c6:	4b76      	ldr	r3, [pc, #472]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a75      	ldr	r2, [pc, #468]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4b73      	ldr	r3, [pc, #460]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a72      	ldr	r2, [pc, #456]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e00b      	b.n	80059f8 <HAL_RCC_OscConfig+0xd8>
 80059e0:	4b6f      	ldr	r3, [pc, #444]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a6e      	ldr	r2, [pc, #440]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	4b6c      	ldr	r3, [pc, #432]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6b      	ldr	r2, [pc, #428]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 80059f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d013      	beq.n	8005a28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe f8d6 	bl	8003bb0 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a08:	f7fe f8d2 	bl	8003bb0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	; 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e21f      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b61      	ldr	r3, [pc, #388]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0xe8>
 8005a26:	e014      	b.n	8005a52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fe f8c2 	bl	8003bb0 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a30:	f7fe f8be 	bl	8003bb0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b64      	cmp	r3, #100	; 0x64
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e20b      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a42:	4b57      	ldr	r3, [pc, #348]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x110>
 8005a4e:	e000      	b.n	8005a52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d069      	beq.n	8005b32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a5e:	4b50      	ldr	r3, [pc, #320]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a6a:	4b4d      	ldr	r3, [pc, #308]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d11c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x190>
 8005a76:	4b4a      	ldr	r3, [pc, #296]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d116      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a82:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_RCC_OscConfig+0x17a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d001      	beq.n	8005a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e1df      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9a:	4b41      	ldr	r3, [pc, #260]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	493d      	ldr	r1, [pc, #244]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aae:	e040      	b.n	8005b32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d023      	beq.n	8005b00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab8:	4b39      	ldr	r3, [pc, #228]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a38      	ldr	r2, [pc, #224]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fe f874 	bl	8003bb0 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005acc:	f7fe f870 	bl	8003bb0 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e1bd      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ade:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f0      	beq.n	8005acc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aea:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4929      	ldr	r1, [pc, #164]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
 8005afe:	e018      	b.n	8005b32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b00:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fe f850 	bl	8003bb0 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b14:	f7fe f84c 	bl	8003bb0 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e199      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b26:	4b1e      	ldr	r3, [pc, #120]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d038      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d019      	beq.n	8005b7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b46:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fe f82d 	bl	8003bb0 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5a:	f7fe f829 	bl	8003bb0 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e176      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x23a>
 8005b78:	e01a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7e:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <HAL_RCC_OscConfig+0x280>)
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b86:	f7fe f813 	bl	8003bb0 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b8e:	f7fe f80f 	bl	8003bb0 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d903      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e15c      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
 8005ba0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba4:	4b91      	ldr	r3, [pc, #580]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ee      	bne.n	8005b8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80a4 	beq.w	8005d06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bbe:	4b8b      	ldr	r3, [pc, #556]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bca:	4b88      	ldr	r3, [pc, #544]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	4a87      	ldr	r2, [pc, #540]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd6:	4b85      	ldr	r3, [pc, #532]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005be2:	2301      	movs	r3, #1
 8005be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be6:	4b82      	ldr	r3, [pc, #520]	; (8005df0 <HAL_RCC_OscConfig+0x4d0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d118      	bne.n	8005c24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005bf2:	4b7f      	ldr	r3, [pc, #508]	; (8005df0 <HAL_RCC_OscConfig+0x4d0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a7e      	ldr	r2, [pc, #504]	; (8005df0 <HAL_RCC_OscConfig+0x4d0>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfe:	f7fd ffd7 	bl	8003bb0 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c06:	f7fd ffd3 	bl	8003bb0 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b64      	cmp	r3, #100	; 0x64
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e120      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c18:	4b75      	ldr	r3, [pc, #468]	; (8005df0 <HAL_RCC_OscConfig+0x4d0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCC_OscConfig+0x31a>
 8005c2c:	4b6f      	ldr	r3, [pc, #444]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	4a6e      	ldr	r2, [pc, #440]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70
 8005c38:	e02d      	b.n	8005c96 <HAL_RCC_OscConfig+0x376>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x33c>
 8005c42:	4b6a      	ldr	r3, [pc, #424]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c46:	4a69      	ldr	r2, [pc, #420]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4e:	4b67      	ldr	r3, [pc, #412]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a66      	ldr	r2, [pc, #408]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5a:	e01c      	b.n	8005c96 <HAL_RCC_OscConfig+0x376>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b05      	cmp	r3, #5
 8005c62:	d10c      	bne.n	8005c7e <HAL_RCC_OscConfig+0x35e>
 8005c64:	4b61      	ldr	r3, [pc, #388]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	4a60      	ldr	r2, [pc, #384]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c6a:	f043 0304 	orr.w	r3, r3, #4
 8005c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c70:	4b5e      	ldr	r3, [pc, #376]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	4a5d      	ldr	r2, [pc, #372]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c7c:	e00b      	b.n	8005c96 <HAL_RCC_OscConfig+0x376>
 8005c7e:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8a:	4b58      	ldr	r3, [pc, #352]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4a57      	ldr	r2, [pc, #348]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005c90:	f023 0304 	bic.w	r3, r3, #4
 8005c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d015      	beq.n	8005cca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9e:	f7fd ff87 	bl	8003bb0 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca6:	f7fd ff83 	bl	8003bb0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e0ce      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	4b4b      	ldr	r3, [pc, #300]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ee      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x386>
 8005cc8:	e014      	b.n	8005cf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cca:	f7fd ff71 	bl	8003bb0 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fd ff6d 	bl	8003bb0 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e0b8      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce8:	4b40      	ldr	r3, [pc, #256]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1ee      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfa:	4b3c      	ldr	r3, [pc, #240]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80a4 	beq.w	8005e58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d06b      	beq.n	8005df4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d149      	bne.n	8005db8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d24:	4b31      	ldr	r3, [pc, #196]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a30      	ldr	r2, [pc, #192]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fd ff3e 	bl	8003bb0 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d38:	f7fd ff3a 	bl	8003bb0 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e087      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d84:	4b19      	ldr	r3, [pc, #100]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fd ff0e 	bl	8003bb0 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d98:	f7fd ff0a 	bl	8003bb0 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e057      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0x478>
 8005db6:	e04f      	b.n	8005e58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a0b      	ldr	r2, [pc, #44]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fd fef4 	bl	8003bb0 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dcc:	f7fd fef0 	bl	8003bb0 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e03d      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <HAL_RCC_OscConfig+0x4cc>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x4ac>
 8005dea:	e035      	b.n	8005e58 <HAL_RCC_OscConfig+0x538>
 8005dec:	40023800 	.word	0x40023800
 8005df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x544>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d028      	beq.n	8005e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d121      	bne.n	8005e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d11a      	bne.n	8005e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e24:	4013      	ands	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d111      	bne.n	8005e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800

08005e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0d0      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e80:	4b6a      	ldr	r3, [pc, #424]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d910      	bls.n	8005eb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8e:	4b67      	ldr	r3, [pc, #412]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 020f 	bic.w	r2, r3, #15
 8005e96:	4965      	ldr	r1, [pc, #404]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	4b63      	ldr	r3, [pc, #396]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0b8      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d020      	beq.n	8005efe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ec8:	4b59      	ldr	r3, [pc, #356]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a58      	ldr	r2, [pc, #352]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ed2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ee0:	4b53      	ldr	r3, [pc, #332]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4a52      	ldr	r2, [pc, #328]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eec:	4b50      	ldr	r3, [pc, #320]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	494d      	ldr	r1, [pc, #308]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d040      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d107      	bne.n	8005f22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f12:	4b47      	ldr	r3, [pc, #284]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d115      	bne.n	8005f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e07f      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d107      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f2a:	4b41      	ldr	r3, [pc, #260]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e073      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e06b      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f4a:	4b39      	ldr	r3, [pc, #228]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f023 0203 	bic.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4936      	ldr	r1, [pc, #216]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f5c:	f7fd fe28 	bl	8003bb0 <HAL_GetTick>
 8005f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f64:	f7fd fe24 	bl	8003bb0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e053      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7a:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 020c 	and.w	r2, r3, #12
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d1eb      	bne.n	8005f64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f8c:	4b27      	ldr	r3, [pc, #156]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d210      	bcs.n	8005fbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 020f 	bic.w	r2, r3, #15
 8005fa2:	4922      	ldr	r1, [pc, #136]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005faa:	4b20      	ldr	r3, [pc, #128]	; (800602c <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e032      	b.n	8006022 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fc8:	4b19      	ldr	r3, [pc, #100]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4916      	ldr	r1, [pc, #88]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	490e      	ldr	r1, [pc, #56]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ffa:	f000 f821 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8005ffe:	4601      	mov	r1, r0
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <HAL_RCC_ClockConfig+0x1c8>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <HAL_RCC_ClockConfig+0x1cc>)
 800600c:	5cd3      	ldrb	r3, [r2, r3]
 800600e:	fa21 f303 	lsr.w	r3, r1, r3
 8006012:	4a09      	ldr	r2, [pc, #36]	; (8006038 <HAL_RCC_ClockConfig+0x1d0>)
 8006014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_RCC_ClockConfig+0x1d4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd fd84 	bl	8003b28 <HAL_InitTick>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40023c00 	.word	0x40023c00
 8006030:	40023800 	.word	0x40023800
 8006034:	0801877c 	.word	0x0801877c
 8006038:	2000000c 	.word	0x2000000c
 800603c:	20000010 	.word	0x20000010

08006040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	607b      	str	r3, [r7, #4]
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	2300      	movs	r3, #0
 8006050:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b04      	cmp	r3, #4
 8006060:	d007      	beq.n	8006072 <HAL_RCC_GetSysClockFreq+0x32>
 8006062:	2b08      	cmp	r3, #8
 8006064:	d008      	beq.n	8006078 <HAL_RCC_GetSysClockFreq+0x38>
 8006066:	2b00      	cmp	r3, #0
 8006068:	f040 80b4 	bne.w	80061d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800606c:	4b5e      	ldr	r3, [pc, #376]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800606e:	60bb      	str	r3, [r7, #8]
      break;
 8006070:	e0b3      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006072:	4b5e      	ldr	r3, [pc, #376]	; (80061ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006074:	60bb      	str	r3, [r7, #8]
      break;
 8006076:	e0b0      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006078:	4b5a      	ldr	r3, [pc, #360]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006080:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006082:	4b58      	ldr	r3, [pc, #352]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d04a      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800608e:	4b55      	ldr	r3, [pc, #340]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	099b      	lsrs	r3, r3, #6
 8006094:	f04f 0400 	mov.w	r4, #0
 8006098:	f240 11ff 	movw	r1, #511	; 0x1ff
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	ea03 0501 	and.w	r5, r3, r1
 80060a4:	ea04 0602 	and.w	r6, r4, r2
 80060a8:	4629      	mov	r1, r5
 80060aa:	4632      	mov	r2, r6
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	f04f 0400 	mov.w	r4, #0
 80060b4:	0154      	lsls	r4, r2, #5
 80060b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060ba:	014b      	lsls	r3, r1, #5
 80060bc:	4619      	mov	r1, r3
 80060be:	4622      	mov	r2, r4
 80060c0:	1b49      	subs	r1, r1, r5
 80060c2:	eb62 0206 	sbc.w	r2, r2, r6
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f04f 0400 	mov.w	r4, #0
 80060ce:	0194      	lsls	r4, r2, #6
 80060d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060d4:	018b      	lsls	r3, r1, #6
 80060d6:	1a5b      	subs	r3, r3, r1
 80060d8:	eb64 0402 	sbc.w	r4, r4, r2
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	00e2      	lsls	r2, r4, #3
 80060e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060ea:	00d9      	lsls	r1, r3, #3
 80060ec:	460b      	mov	r3, r1
 80060ee:	4614      	mov	r4, r2
 80060f0:	195b      	adds	r3, r3, r5
 80060f2:	eb44 0406 	adc.w	r4, r4, r6
 80060f6:	f04f 0100 	mov.w	r1, #0
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	0262      	lsls	r2, r4, #9
 8006100:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006104:	0259      	lsls	r1, r3, #9
 8006106:	460b      	mov	r3, r1
 8006108:	4614      	mov	r4, r2
 800610a:	4618      	mov	r0, r3
 800610c:	4621      	mov	r1, r4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f04f 0400 	mov.w	r4, #0
 8006114:	461a      	mov	r2, r3
 8006116:	4623      	mov	r3, r4
 8006118:	f7fa fd86 	bl	8000c28 <__aeabi_uldivmod>
 800611c:	4603      	mov	r3, r0
 800611e:	460c      	mov	r4, r1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e049      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006124:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	f04f 0400 	mov.w	r4, #0
 800612e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	ea03 0501 	and.w	r5, r3, r1
 800613a:	ea04 0602 	and.w	r6, r4, r2
 800613e:	4629      	mov	r1, r5
 8006140:	4632      	mov	r2, r6
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	f04f 0400 	mov.w	r4, #0
 800614a:	0154      	lsls	r4, r2, #5
 800614c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006150:	014b      	lsls	r3, r1, #5
 8006152:	4619      	mov	r1, r3
 8006154:	4622      	mov	r2, r4
 8006156:	1b49      	subs	r1, r1, r5
 8006158:	eb62 0206 	sbc.w	r2, r2, r6
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	f04f 0400 	mov.w	r4, #0
 8006164:	0194      	lsls	r4, r2, #6
 8006166:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800616a:	018b      	lsls	r3, r1, #6
 800616c:	1a5b      	subs	r3, r3, r1
 800616e:	eb64 0402 	sbc.w	r4, r4, r2
 8006172:	f04f 0100 	mov.w	r1, #0
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	00e2      	lsls	r2, r4, #3
 800617c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006180:	00d9      	lsls	r1, r3, #3
 8006182:	460b      	mov	r3, r1
 8006184:	4614      	mov	r4, r2
 8006186:	195b      	adds	r3, r3, r5
 8006188:	eb44 0406 	adc.w	r4, r4, r6
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	02a2      	lsls	r2, r4, #10
 8006196:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800619a:	0299      	lsls	r1, r3, #10
 800619c:	460b      	mov	r3, r1
 800619e:	4614      	mov	r4, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	4621      	mov	r1, r4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f04f 0400 	mov.w	r4, #0
 80061aa:	461a      	mov	r2, r3
 80061ac:	4623      	mov	r3, r4
 80061ae:	f7fa fd3b 	bl	8000c28 <__aeabi_uldivmod>
 80061b2:	4603      	mov	r3, r0
 80061b4:	460c      	mov	r4, r1
 80061b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	0c1b      	lsrs	r3, r3, #16
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	3301      	adds	r3, #1
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	60bb      	str	r3, [r7, #8]
      break;
 80061d2:	e002      	b.n	80061da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061d6:	60bb      	str	r3, [r7, #8]
      break;
 80061d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061da:	68bb      	ldr	r3, [r7, #8]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e4:	40023800 	.word	0x40023800
 80061e8:	00f42400 	.word	0x00f42400
 80061ec:	007a1200 	.word	0x007a1200

080061f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f4:	4b03      	ldr	r3, [pc, #12]	; (8006204 <HAL_RCC_GetHCLKFreq+0x14>)
 80061f6:	681b      	ldr	r3, [r3, #0]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000000c 	.word	0x2000000c

08006208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800620c:	f7ff fff0 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 8006210:	4601      	mov	r1, r0
 8006212:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	0a9b      	lsrs	r3, r3, #10
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	4a03      	ldr	r2, [pc, #12]	; (800622c <HAL_RCC_GetPCLK1Freq+0x24>)
 800621e:	5cd3      	ldrb	r3, [r2, r3]
 8006220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006224:	4618      	mov	r0, r3
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40023800 	.word	0x40023800
 800622c:	0801878c 	.word	0x0801878c

08006230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006234:	f7ff ffdc 	bl	80061f0 <HAL_RCC_GetHCLKFreq>
 8006238:	4601      	mov	r1, r0
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	0b5b      	lsrs	r3, r3, #13
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	4a03      	ldr	r2, [pc, #12]	; (8006254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006246:	5cd3      	ldrb	r3, [r2, r3]
 8006248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800624c:	4618      	mov	r0, r3
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40023800 	.word	0x40023800
 8006254:	0801878c 	.word	0x0801878c

08006258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d012      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006280:	4b69      	ldr	r3, [pc, #420]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a68      	ldr	r2, [pc, #416]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006286:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800628a:	6093      	str	r3, [r2, #8]
 800628c:	4b66      	ldr	r3, [pc, #408]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006294:	4964      	ldr	r1, [pc, #400]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d017      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062b2:	4b5d      	ldr	r3, [pc, #372]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c0:	4959      	ldr	r1, [pc, #356]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d0:	d101      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80062d2:	2301      	movs	r3, #1
 80062d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d017      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062ee:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	494a      	ldr	r1, [pc, #296]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630c:	d101      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800630e:	2301      	movs	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800631a:	2301      	movs	r3, #1
 800631c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 808b 	beq.w	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800633c:	4b3a      	ldr	r3, [pc, #232]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	4a39      	ldr	r2, [pc, #228]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	6413      	str	r3, [r2, #64]	; 0x40
 8006348:	4b37      	ldr	r3, [pc, #220]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006354:	4b35      	ldr	r3, [pc, #212]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a34      	ldr	r2, [pc, #208]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800635a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006360:	f7fd fc26 	bl	8003bb0 <HAL_GetTick>
 8006364:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006366:	e008      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006368:	f7fd fc22 	bl	8003bb0 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e355      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800637a:	4b2c      	ldr	r3, [pc, #176]	; (800642c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f0      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006386:	4b28      	ldr	r3, [pc, #160]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d035      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d02e      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063a4:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063ae:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063cc:	4b16      	ldr	r3, [pc, #88]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d114      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fd fbea 	bl	8003bb0 <HAL_GetTick>
 80063dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063de:	e00a      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063e0:	f7fd fbe6 	bl	8003bb0 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e317      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0ee      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800640a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800640e:	d111      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800641e:	400b      	ands	r3, r1
 8006420:	4901      	ldr	r1, [pc, #4]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
 8006426:	e00b      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006428:	40023800 	.word	0x40023800
 800642c:	40007000 	.word	0x40007000
 8006430:	0ffffcff 	.word	0x0ffffcff
 8006434:	4bb0      	ldr	r3, [pc, #704]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	4aaf      	ldr	r2, [pc, #700]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800643a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800643e:	6093      	str	r3, [r2, #8]
 8006440:	4bad      	ldr	r3, [pc, #692]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800644c:	49aa      	ldr	r1, [pc, #680]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800644e:	4313      	orrs	r3, r2
 8006450:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	d010      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800645e:	4ba6      	ldr	r3, [pc, #664]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006464:	4aa4      	ldr	r2, [pc, #656]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800646a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800646e:	4ba2      	ldr	r3, [pc, #648]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006470:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	499f      	ldr	r1, [pc, #636]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800648c:	4b9a      	ldr	r3, [pc, #616]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649a:	4997      	ldr	r1, [pc, #604]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064ae:	4b92      	ldr	r3, [pc, #584]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064bc:	498e      	ldr	r1, [pc, #568]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064d0:	4b89      	ldr	r3, [pc, #548]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064de:	4986      	ldr	r1, [pc, #536]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064f2:	4b81      	ldr	r3, [pc, #516]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	497d      	ldr	r1, [pc, #500]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006514:	4b78      	ldr	r3, [pc, #480]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f023 0203 	bic.w	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	4975      	ldr	r1, [pc, #468]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006524:	4313      	orrs	r3, r2
 8006526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006536:	4b70      	ldr	r3, [pc, #448]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653c:	f023 020c 	bic.w	r2, r3, #12
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006544:	496c      	ldr	r1, [pc, #432]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006558:	4b67      	ldr	r3, [pc, #412]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006566:	4964      	ldr	r1, [pc, #400]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800657a:	4b5f      	ldr	r3, [pc, #380]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006580:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	495b      	ldr	r1, [pc, #364]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800659c:	4b56      	ldr	r3, [pc, #344]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	4953      	ldr	r1, [pc, #332]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80065be:	4b4e      	ldr	r3, [pc, #312]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065cc:	494a      	ldr	r1, [pc, #296]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80065e0:	4b45      	ldr	r3, [pc, #276]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ee:	4942      	ldr	r1, [pc, #264]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006602:	4b3d      	ldr	r3, [pc, #244]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006610:	4939      	ldr	r1, [pc, #228]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006624:	4b34      	ldr	r3, [pc, #208]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006632:	4931      	ldr	r1, [pc, #196]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d011      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006646:	4b2c      	ldr	r3, [pc, #176]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006654:	4928      	ldr	r1, [pc, #160]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006664:	d101      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006666:	2301      	movs	r3, #1
 8006668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006676:	2301      	movs	r3, #1
 8006678:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006686:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006694:	4918      	ldr	r1, [pc, #96]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066a8:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b8:	490f      	ldr	r1, [pc, #60]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d005      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ce:	f040 80d8 	bne.w	8006882 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066d2:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066de:	f7fd fa67 	bl	8003bb0 <HAL_GetTick>
 80066e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066e4:	e00a      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066e6:	f7fd fa63 	bl	8003bb0 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b64      	cmp	r3, #100	; 0x64
 80066f2:	d903      	bls.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e196      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80066f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066fc:	4b6c      	ldr	r3, [pc, #432]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ee      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d021      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	2b00      	cmp	r3, #0
 800671a:	d11d      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800671c:	4b64      	ldr	r3, [pc, #400]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800671e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800672a:	4b61      	ldr	r3, [pc, #388]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800672c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	019a      	lsls	r2, r3, #6
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	041b      	lsls	r3, r3, #16
 8006742:	431a      	orrs	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	061b      	lsls	r3, r3, #24
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	071b      	lsls	r3, r3, #28
 8006750:	4957      	ldr	r1, [pc, #348]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006776:	2b00      	cmp	r3, #0
 8006778:	d02e      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006782:	d129      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006784:	4b4a      	ldr	r3, [pc, #296]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006792:	4b47      	ldr	r3, [pc, #284]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006798:	0f1b      	lsrs	r3, r3, #28
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	019a      	lsls	r2, r3, #6
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	041b      	lsls	r3, r3, #16
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	061b      	lsls	r3, r3, #24
 80067b2:	431a      	orrs	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	071b      	lsls	r3, r3, #28
 80067b8:	493d      	ldr	r1, [pc, #244]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067c0:	4b3b      	ldr	r3, [pc, #236]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c6:	f023 021f 	bic.w	r2, r3, #31
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	3b01      	subs	r3, #1
 80067d0:	4937      	ldr	r1, [pc, #220]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01d      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80067e4:	4b32      	ldr	r3, [pc, #200]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ea:	0e1b      	lsrs	r3, r3, #24
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80067f2:	4b2f      	ldr	r3, [pc, #188]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80067f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f8:	0f1b      	lsrs	r3, r3, #28
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	019a      	lsls	r2, r3, #6
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	431a      	orrs	r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	061b      	lsls	r3, r3, #24
 8006812:	431a      	orrs	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	071b      	lsls	r3, r3, #28
 8006818:	4925      	ldr	r1, [pc, #148]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800681a:	4313      	orrs	r3, r2
 800681c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	019a      	lsls	r2, r3, #6
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	061b      	lsls	r3, r3, #24
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	071b      	lsls	r3, r3, #28
 8006848:	4919      	ldr	r1, [pc, #100]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800684a:	4313      	orrs	r3, r2
 800684c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006850:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800685a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800685c:	f7fd f9a8 	bl	8003bb0 <HAL_GetTick>
 8006860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006864:	f7fd f9a4 	bl	8003bb0 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	; 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e0d7      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006876:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 80cd 	bne.w	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006896:	f7fd f98b 	bl	8003bb0 <HAL_GetTick>
 800689a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800689c:	e00a      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800689e:	f7fd f987 	bl	8003bb0 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b64      	cmp	r3, #100	; 0x64
 80068aa:	d903      	bls.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e0ba      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80068b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068b4:	4b5e      	ldr	r3, [pc, #376]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c0:	d0ed      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02e      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12a      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068ea:	4b51      	ldr	r3, [pc, #324]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	0c1b      	lsrs	r3, r3, #16
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068f8:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	0f1b      	lsrs	r3, r3, #28
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	019a      	lsls	r2, r3, #6
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	061b      	lsls	r3, r3, #24
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	071b      	lsls	r3, r3, #28
 800691e:	4944      	ldr	r1, [pc, #272]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006926:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	3b01      	subs	r3, #1
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	493d      	ldr	r1, [pc, #244]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d022      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006954:	d11d      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006956:	4b36      	ldr	r3, [pc, #216]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695c:	0e1b      	lsrs	r3, r3, #24
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006964:	4b32      	ldr	r3, [pc, #200]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	0f1b      	lsrs	r3, r3, #28
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	019a      	lsls	r2, r3, #6
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	061b      	lsls	r3, r3, #24
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	071b      	lsls	r3, r3, #28
 800698a:	4929      	ldr	r1, [pc, #164]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800698c:	4313      	orrs	r3, r2
 800698e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d028      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800699e:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a4:	0e1b      	lsrs	r3, r3, #24
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069ac:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b2:	0c1b      	lsrs	r3, r3, #16
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	019a      	lsls	r2, r3, #6
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	431a      	orrs	r2, r3
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	061b      	lsls	r3, r3, #24
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	071b      	lsls	r3, r3, #28
 80069d2:	4917      	ldr	r1, [pc, #92]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069da:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	4911      	ldr	r1, [pc, #68]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a0e      	ldr	r2, [pc, #56]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80069f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069fc:	f7fd f8d8 	bl	8003bb0 <HAL_GetTick>
 8006a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a04:	f7fd f8d4 	bl	8003bb0 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b64      	cmp	r3, #100	; 0x64
 8006a10:	d901      	bls.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e007      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a16:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a22:	d1ef      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800

08006a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e040      	b.n	8006ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fc fee2 	bl	8003820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2224      	movs	r2, #36	; 0x24
 8006a60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0201 	bic.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f82c 	bl	8006ad0 <UART_SetConfig>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e022      	b.n	8006ac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 faca 	bl	8007024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb51 	bl	8007168 <UART_CheckIdleState>
 8006ac6:	4603      	mov	r3, r0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4bb1      	ldr	r3, [pc, #708]	; (8006dc4 <UART_SetConfig+0x2f4>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	6939      	ldr	r1, [r7, #16]
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a9f      	ldr	r2, [pc, #636]	; (8006dc8 <UART_SetConfig+0x2f8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d121      	bne.n	8006b94 <UART_SetConfig+0xc4>
 8006b50:	4b9e      	ldr	r3, [pc, #632]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d816      	bhi.n	8006b8c <UART_SetConfig+0xbc>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <UART_SetConfig+0x94>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b75 	.word	0x08006b75
 8006b68:	08006b81 	.word	0x08006b81
 8006b6c:	08006b7b 	.word	0x08006b7b
 8006b70:	08006b87 	.word	0x08006b87
 8006b74:	2301      	movs	r3, #1
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e151      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e14e      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006b80:	2304      	movs	r3, #4
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e14b      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006b86:	2308      	movs	r3, #8
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e148      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	bf00      	nop
 8006b92:	e144      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a8d      	ldr	r2, [pc, #564]	; (8006dd0 <UART_SetConfig+0x300>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d134      	bne.n	8006c08 <UART_SetConfig+0x138>
 8006b9e:	4b8b      	ldr	r3, [pc, #556]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba4:	f003 030c 	and.w	r3, r3, #12
 8006ba8:	2b0c      	cmp	r3, #12
 8006baa:	d829      	bhi.n	8006c00 <UART_SetConfig+0x130>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0xe4>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006be9 	.word	0x08006be9
 8006bb8:	08006c01 	.word	0x08006c01
 8006bbc:	08006c01 	.word	0x08006c01
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006c01 	.word	0x08006c01
 8006bcc:	08006c01 	.word	0x08006c01
 8006bd0:	08006c01 	.word	0x08006c01
 8006bd4:	08006bef 	.word	0x08006bef
 8006bd8:	08006c01 	.word	0x08006c01
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c01 	.word	0x08006c01
 8006be4:	08006bfb 	.word	0x08006bfb
 8006be8:	2300      	movs	r3, #0
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e117      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e114      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e111      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e10e      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c00:	2310      	movs	r3, #16
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	bf00      	nop
 8006c06:	e10a      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a71      	ldr	r2, [pc, #452]	; (8006dd4 <UART_SetConfig+0x304>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d120      	bne.n	8006c54 <UART_SetConfig+0x184>
 8006c12:	4b6e      	ldr	r3, [pc, #440]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d00f      	beq.n	8006c40 <UART_SetConfig+0x170>
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d802      	bhi.n	8006c2a <UART_SetConfig+0x15a>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <UART_SetConfig+0x164>
 8006c28:	e010      	b.n	8006c4c <UART_SetConfig+0x17c>
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d005      	beq.n	8006c3a <UART_SetConfig+0x16a>
 8006c2e:	2b30      	cmp	r3, #48	; 0x30
 8006c30:	d009      	beq.n	8006c46 <UART_SetConfig+0x176>
 8006c32:	e00b      	b.n	8006c4c <UART_SetConfig+0x17c>
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e0f1      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e0ee      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c40:	2304      	movs	r3, #4
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e0eb      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c46:	2308      	movs	r3, #8
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e0e8      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	bf00      	nop
 8006c52:	e0e4      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a5f      	ldr	r2, [pc, #380]	; (8006dd8 <UART_SetConfig+0x308>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d120      	bne.n	8006ca0 <UART_SetConfig+0x1d0>
 8006c5e:	4b5b      	ldr	r3, [pc, #364]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d00f      	beq.n	8006c8c <UART_SetConfig+0x1bc>
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d802      	bhi.n	8006c76 <UART_SetConfig+0x1a6>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <UART_SetConfig+0x1b0>
 8006c74:	e010      	b.n	8006c98 <UART_SetConfig+0x1c8>
 8006c76:	2b80      	cmp	r3, #128	; 0x80
 8006c78:	d005      	beq.n	8006c86 <UART_SetConfig+0x1b6>
 8006c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c7c:	d009      	beq.n	8006c92 <UART_SetConfig+0x1c2>
 8006c7e:	e00b      	b.n	8006c98 <UART_SetConfig+0x1c8>
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e0cb      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c86:	2302      	movs	r3, #2
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e0c8      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e0c5      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c92:	2308      	movs	r3, #8
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e0c2      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	bf00      	nop
 8006c9e:	e0be      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4d      	ldr	r2, [pc, #308]	; (8006ddc <UART_SetConfig+0x30c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d124      	bne.n	8006cf4 <UART_SetConfig+0x224>
 8006caa:	4b48      	ldr	r3, [pc, #288]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb8:	d012      	beq.n	8006ce0 <UART_SetConfig+0x210>
 8006cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbe:	d802      	bhi.n	8006cc6 <UART_SetConfig+0x1f6>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <UART_SetConfig+0x204>
 8006cc4:	e012      	b.n	8006cec <UART_SetConfig+0x21c>
 8006cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cca:	d006      	beq.n	8006cda <UART_SetConfig+0x20a>
 8006ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd0:	d009      	beq.n	8006ce6 <UART_SetConfig+0x216>
 8006cd2:	e00b      	b.n	8006cec <UART_SetConfig+0x21c>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e0a1      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e09e      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e09b      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e098      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006cec:	2310      	movs	r3, #16
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	bf00      	nop
 8006cf2:	e094      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a39      	ldr	r2, [pc, #228]	; (8006de0 <UART_SetConfig+0x310>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d124      	bne.n	8006d48 <UART_SetConfig+0x278>
 8006cfe:	4b33      	ldr	r3, [pc, #204]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d0c:	d012      	beq.n	8006d34 <UART_SetConfig+0x264>
 8006d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d12:	d802      	bhi.n	8006d1a <UART_SetConfig+0x24a>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d007      	beq.n	8006d28 <UART_SetConfig+0x258>
 8006d18:	e012      	b.n	8006d40 <UART_SetConfig+0x270>
 8006d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1e:	d006      	beq.n	8006d2e <UART_SetConfig+0x25e>
 8006d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d24:	d009      	beq.n	8006d3a <UART_SetConfig+0x26a>
 8006d26:	e00b      	b.n	8006d40 <UART_SetConfig+0x270>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e077      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	77fb      	strb	r3, [r7, #31]
 8006d32:	e074      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d34:	2304      	movs	r3, #4
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e071      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e06e      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d40:	2310      	movs	r3, #16
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	bf00      	nop
 8006d46:	e06a      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a25      	ldr	r2, [pc, #148]	; (8006de4 <UART_SetConfig+0x314>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d124      	bne.n	8006d9c <UART_SetConfig+0x2cc>
 8006d52:	4b1e      	ldr	r3, [pc, #120]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d012      	beq.n	8006d88 <UART_SetConfig+0x2b8>
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d802      	bhi.n	8006d6e <UART_SetConfig+0x29e>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <UART_SetConfig+0x2ac>
 8006d6c:	e012      	b.n	8006d94 <UART_SetConfig+0x2c4>
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d006      	beq.n	8006d82 <UART_SetConfig+0x2b2>
 8006d74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d78:	d009      	beq.n	8006d8e <UART_SetConfig+0x2be>
 8006d7a:	e00b      	b.n	8006d94 <UART_SetConfig+0x2c4>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e04d      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d82:	2302      	movs	r3, #2
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e04a      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e047      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e044      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d94:	2310      	movs	r3, #16
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	bf00      	nop
 8006d9a:	e040      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a11      	ldr	r2, [pc, #68]	; (8006de8 <UART_SetConfig+0x318>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d139      	bne.n	8006e1a <UART_SetConfig+0x34a>
 8006da6:	4b09      	ldr	r3, [pc, #36]	; (8006dcc <UART_SetConfig+0x2fc>)
 8006da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db4:	d027      	beq.n	8006e06 <UART_SetConfig+0x336>
 8006db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dba:	d817      	bhi.n	8006dec <UART_SetConfig+0x31c>
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01c      	beq.n	8006dfa <UART_SetConfig+0x32a>
 8006dc0:	e027      	b.n	8006e12 <UART_SetConfig+0x342>
 8006dc2:	bf00      	nop
 8006dc4:	efff69f3 	.word	0xefff69f3
 8006dc8:	40011000 	.word	0x40011000
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	40004400 	.word	0x40004400
 8006dd4:	40004800 	.word	0x40004800
 8006dd8:	40004c00 	.word	0x40004c00
 8006ddc:	40005000 	.word	0x40005000
 8006de0:	40011400 	.word	0x40011400
 8006de4:	40007800 	.word	0x40007800
 8006de8:	40007c00 	.word	0x40007c00
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df0:	d006      	beq.n	8006e00 <UART_SetConfig+0x330>
 8006df2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006df6:	d009      	beq.n	8006e0c <UART_SetConfig+0x33c>
 8006df8:	e00b      	b.n	8006e12 <UART_SetConfig+0x342>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e00e      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006e00:	2302      	movs	r3, #2
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e00b      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006e06:	2304      	movs	r3, #4
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e008      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006e12:	2310      	movs	r3, #16
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	bf00      	nop
 8006e18:	e001      	b.n	8006e1e <UART_SetConfig+0x34e>
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e26:	d17f      	bne.n	8006f28 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006e28:	7ffb      	ldrb	r3, [r7, #31]
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d85c      	bhi.n	8006ee8 <UART_SetConfig+0x418>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x364>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e99 	.word	0x08006e99
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006eb1 	.word	0x08006eb1
 8006e48:	08006ee9 	.word	0x08006ee9
 8006e4c:	08006ee9 	.word	0x08006ee9
 8006e50:	08006ee9 	.word	0x08006ee9
 8006e54:	08006ed1 	.word	0x08006ed1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7ff f9d6 	bl	8006208 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	005a      	lsls	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	441a      	add	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	61bb      	str	r3, [r7, #24]
        break;
 8006e76:	e03a      	b.n	8006eee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e78:	f7ff f9da 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 8006e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	005a      	lsls	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	441a      	add	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	61bb      	str	r3, [r7, #24]
        break;
 8006e96:	e02a      	b.n	8006eee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	085a      	lsrs	r2, r3, #1
 8006e9e:	4b5f      	ldr	r3, [pc, #380]	; (800701c <UART_SetConfig+0x54c>)
 8006ea0:	4413      	add	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6852      	ldr	r2, [r2, #4]
 8006ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	61bb      	str	r3, [r7, #24]
        break;
 8006eae:	e01e      	b.n	8006eee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb0:	f7ff f8c6 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8006eb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	005a      	lsls	r2, r3, #1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	441a      	add	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	61bb      	str	r3, [r7, #24]
        break;
 8006ece:	e00e      	b.n	8006eee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	61bb      	str	r3, [r7, #24]
        break;
 8006ee6:	e002      	b.n	8006eee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
        break;
 8006eec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b0f      	cmp	r3, #15
 8006ef2:	d916      	bls.n	8006f22 <UART_SetConfig+0x452>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efa:	d212      	bcs.n	8006f22 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f023 030f 	bic.w	r3, r3, #15
 8006f04:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	897b      	ldrh	r3, [r7, #10]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	897a      	ldrh	r2, [r7, #10]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	e070      	b.n	8007004 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
 8006f26:	e06d      	b.n	8007004 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006f28:	7ffb      	ldrb	r3, [r7, #31]
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d859      	bhi.n	8006fe2 <UART_SetConfig+0x512>
 8006f2e:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0x464>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f77 	.word	0x08006f77
 8006f3c:	08006f95 	.word	0x08006f95
 8006f40:	08006fe3 	.word	0x08006fe3
 8006f44:	08006fad 	.word	0x08006fad
 8006f48:	08006fe3 	.word	0x08006fe3
 8006f4c:	08006fe3 	.word	0x08006fe3
 8006f50:	08006fe3 	.word	0x08006fe3
 8006f54:	08006fcb 	.word	0x08006fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7ff f956 	bl	8006208 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	085a      	lsrs	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	441a      	add	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	61bb      	str	r3, [r7, #24]
        break;
 8006f74:	e038      	b.n	8006fe8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f76:	f7ff f95b 	bl	8006230 <HAL_RCC_GetPCLK2Freq>
 8006f7a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	085a      	lsrs	r2, r3, #1
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	441a      	add	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	61bb      	str	r3, [r7, #24]
        break;
 8006f92:	e029      	b.n	8006fe8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	085a      	lsrs	r2, r3, #1
 8006f9a:	4b21      	ldr	r3, [pc, #132]	; (8007020 <UART_SetConfig+0x550>)
 8006f9c:	4413      	add	r3, r2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6852      	ldr	r2, [r2, #4]
 8006fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	61bb      	str	r3, [r7, #24]
        break;
 8006faa:	e01d      	b.n	8006fe8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fac:	f7ff f848 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8006fb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	085a      	lsrs	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	441a      	add	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	61bb      	str	r3, [r7, #24]
        break;
 8006fc8:	e00e      	b.n	8006fe8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	61bb      	str	r3, [r7, #24]
        break;
 8006fe0:	e002      	b.n	8006fe8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]
        break;
 8006fe6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b0f      	cmp	r3, #15
 8006fec:	d908      	bls.n	8007000 <UART_SetConfig+0x530>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d204      	bcs.n	8007000 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	e001      	b.n	8007004 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	01e84800 	.word	0x01e84800
 8007020:	00f42400 	.word	0x00f42400

08007024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01a      	beq.n	800713a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007122:	d10a      	bne.n	800713a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	605a      	str	r2, [r3, #4]
  }
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af02      	add	r7, sp, #8
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007176:	f7fc fd1b 	bl	8003bb0 <HAL_GetTick>
 800717a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b08      	cmp	r3, #8
 8007188:	d10e      	bne.n	80071a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f814 	bl	80071c6 <UART_WaitOnFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e00a      	b.n	80071be <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d6:	e05d      	b.n	8007294 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d059      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071e0:	f7fc fce6 	bl	8003bb0 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d302      	bcc.n	80071f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d11b      	bne.n	800722e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007204:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e042      	b.n	80072b4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02b      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724a:	d123      	bne.n	8007294 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007254:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007264:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e00f      	b.n	80072b4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69da      	ldr	r2, [r3, #28]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4013      	ands	r3, r2
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d092      	beq.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072bc:	b084      	sub	sp, #16
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	f107 001c 	add.w	r0, r7, #28
 80072ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d120      	bne.n	8007316 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	4b20      	ldr	r3, [pc, #128]	; (8007368 <USB_CoreInit+0xac>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d105      	bne.n	800730a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa52 	bl	80077b4 <USB_CoreReset>
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
 8007314:	e010      	b.n	8007338 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa46 	bl	80077b4 <USB_CoreReset>
 8007328:	4603      	mov	r3, r0
 800732a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	2b01      	cmp	r3, #1
 800733c:	d10b      	bne.n	8007356 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f043 0206 	orr.w	r2, r3, #6
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f043 0220 	orr.w	r2, r3, #32
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007362:	b004      	add	sp, #16
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	ffbdffbf 	.word	0xffbdffbf

0800736c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f023 0201 	bic.w	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d106      	bne.n	80073ba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60da      	str	r2, [r3, #12]
 80073b8:	e00b      	b.n	80073d2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]
 80073cc:	e001      	b.n	80073d2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e003      	b.n	80073da <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80073d2:	2032      	movs	r0, #50	; 0x32
 80073d4:	f7fc fbf8 	bl	8003bc8 <HAL_Delay>

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e4:	b084      	sub	sp, #16
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b086      	sub	sp, #24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	e009      	b.n	8007418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3340      	adds	r3, #64	; 0x40
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	2200      	movs	r2, #0
 8007410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3301      	adds	r3, #1
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	2b0e      	cmp	r3, #14
 800741c:	d9f2      	bls.n	8007404 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11c      	bne.n	800745e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007432:	f043 0302 	orr.w	r3, r3, #2
 8007436:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e005      	b.n	800746a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007470:	461a      	mov	r2, r3
 8007472:	2300      	movs	r3, #0
 8007474:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747c:	4619      	mov	r1, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007484:	461a      	mov	r2, r3
 8007486:	680b      	ldr	r3, [r1, #0]
 8007488:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10c      	bne.n	80074aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d104      	bne.n	80074a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f959 	bl	8007750 <USB_SetDevSpeed>
 800749e:	e018      	b.n	80074d2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f954 	bl	8007750 <USB_SetDevSpeed>
 80074a8:	e013      	b.n	80074d2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d10c      	bne.n	80074ca <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f949 	bl	8007750 <USB_SetDevSpeed>
 80074be:	e008      	b.n	80074d2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074c0:	2101      	movs	r1, #1
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f944 	bl	8007750 <USB_SetDevSpeed>
 80074c8:	e003      	b.n	80074d2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ca:	2103      	movs	r1, #3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f93f 	bl	8007750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074d2:	2110      	movs	r1, #16
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8f3 	bl	80076c0 <USB_FlushTxFifo>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f911 	bl	800770c <USB_FlushRxFifo>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	461a      	mov	r2, r3
 80074fc:	2300      	movs	r3, #0
 80074fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	461a      	mov	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	461a      	mov	r2, r3
 8007514:	2300      	movs	r3, #0
 8007516:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	e043      	b.n	80075a6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007534:	d118      	bne.n	8007568 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007548:	461a      	mov	r2, r3
 800754a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e013      	b.n	800757a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	461a      	mov	r2, r3
 8007560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e008      	b.n	800757a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007574:	461a      	mov	r2, r3
 8007576:	2300      	movs	r3, #0
 8007578:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007586:	461a      	mov	r2, r3
 8007588:	2300      	movs	r3, #0
 800758a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	461a      	mov	r2, r3
 800759a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800759e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	3301      	adds	r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d3b7      	bcc.n	800751e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ae:	2300      	movs	r3, #0
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	e043      	b.n	800763c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ca:	d118      	bne.n	80075fe <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	461a      	mov	r2, r3
 80075e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	e013      	b.n	8007610 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	461a      	mov	r2, r3
 80075f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e008      	b.n	8007610 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760a:	461a      	mov	r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761c:	461a      	mov	r2, r3
 800761e:	2300      	movs	r3, #0
 8007620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	461a      	mov	r2, r3
 8007630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007634:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	3301      	adds	r3, #1
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d3b7      	bcc.n	80075b4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007656:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007664:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f043 0210 	orr.w	r2, r3, #16
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <USB_DevInit+0x2d4>)
 800767e:	4313      	orrs	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d005      	beq.n	8007696 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f043 0208 	orr.w	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d105      	bne.n	80076a8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <USB_DevInit+0x2d8>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b4:	b004      	add	sp, #16
 80076b6:	4770      	bx	lr
 80076b8:	803c3800 	.word	0x803c3800
 80076bc:	40000004 	.word	0x40000004

080076c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	019b      	lsls	r3, r3, #6
 80076d2:	f043 0220 	orr.w	r2, r3, #32
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a09      	ldr	r2, [pc, #36]	; (8007708 <USB_FlushTxFifo+0x48>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d901      	bls.n	80076ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e006      	b.n	80076fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d0f0      	beq.n	80076da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	00030d40 	.word	0x00030d40

0800770c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2210      	movs	r2, #16
 800771c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4a09      	ldr	r2, [pc, #36]	; (800774c <USB_FlushRxFifo+0x40>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d901      	bls.n	8007730 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e006      	b.n	800773e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b10      	cmp	r3, #16
 800773a:	d0f0      	beq.n	800771e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	00030d40 	.word	0x00030d40

08007750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	68f9      	ldr	r1, [r7, #12]
 800776c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007770:	4313      	orrs	r3, r2
 8007772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779c:	f043 0302 	orr.w	r3, r3, #2
 80077a0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80077a2:	2003      	movs	r0, #3
 80077a4:	f7fc fa10 	bl	8003bc8 <HAL_Delay>

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4a13      	ldr	r2, [pc, #76]	; (8007818 <USB_CoreReset+0x64>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d901      	bls.n	80077d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e01b      	b.n	800780a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	daf2      	bge.n	80077c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f043 0201 	orr.w	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a09      	ldr	r2, [pc, #36]	; (8007818 <USB_CoreReset+0x64>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e006      	b.n	800780a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d0f0      	beq.n	80077ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	00030d40 	.word	0x00030d40

0800781c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	  IP_ADDRESS[0] = IP_ADDR0;
 8007822:	4b8b      	ldr	r3, [pc, #556]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007824:	22c0      	movs	r2, #192	; 0xc0
 8007826:	701a      	strb	r2, [r3, #0]
	  IP_ADDRESS[1] = IP_ADDR1;
 8007828:	4b89      	ldr	r3, [pc, #548]	; (8007a50 <MX_LWIP_Init+0x234>)
 800782a:	22a8      	movs	r2, #168	; 0xa8
 800782c:	705a      	strb	r2, [r3, #1]
	  IP_ADDRESS[2] = IP_ADDR2;
 800782e:	4b88      	ldr	r3, [pc, #544]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007830:	2200      	movs	r2, #0
 8007832:	709a      	strb	r2, [r3, #2]
	  IP_ADDRESS[3] = IP_ADDR3;
 8007834:	4b86      	ldr	r3, [pc, #536]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007836:	2206      	movs	r2, #6
 8007838:	70da      	strb	r2, [r3, #3]
	  NETMASK_ADDRESS[0] = NETMASK_ADDR0;
 800783a:	4b86      	ldr	r3, [pc, #536]	; (8007a54 <MX_LWIP_Init+0x238>)
 800783c:	22ff      	movs	r2, #255	; 0xff
 800783e:	701a      	strb	r2, [r3, #0]
	  NETMASK_ADDRESS[1] = NETMASK_ADDR1;
 8007840:	4b84      	ldr	r3, [pc, #528]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007842:	22ff      	movs	r2, #255	; 0xff
 8007844:	705a      	strb	r2, [r3, #1]
	  NETMASK_ADDRESS[2] = NETMASK_ADDR2;
 8007846:	4b83      	ldr	r3, [pc, #524]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	709a      	strb	r2, [r3, #2]
	  NETMASK_ADDRESS[3] = NETMASK_ADDR3;
 800784c:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <MX_LWIP_Init+0x238>)
 800784e:	2200      	movs	r2, #0
 8007850:	70da      	strb	r2, [r3, #3]
	  GATEWAY_ADDRESS[0] = GW_ADDR0;
 8007852:	4b81      	ldr	r3, [pc, #516]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007854:	22c0      	movs	r2, #192	; 0xc0
 8007856:	701a      	strb	r2, [r3, #0]
	  GATEWAY_ADDRESS[1] = GW_ADDR1;
 8007858:	4b7f      	ldr	r3, [pc, #508]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800785a:	22a8      	movs	r2, #168	; 0xa8
 800785c:	705a      	strb	r2, [r3, #1]
	  GATEWAY_ADDRESS[2] = GW_ADDR2;
 800785e:	4b7e      	ldr	r3, [pc, #504]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007860:	2200      	movs	r2, #0
 8007862:	709a      	strb	r2, [r3, #2]
	  GATEWAY_ADDRESS[3] = GW_ADDR3;
 8007864:	4b7c      	ldr	r3, [pc, #496]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007866:	2201      	movs	r2, #1
 8007868:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800786a:	f000 fb7e 	bl	8007f6a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800786e:	4b78      	ldr	r3, [pc, #480]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	061a      	lsls	r2, r3, #24
 8007874:	4b76      	ldr	r3, [pc, #472]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	431a      	orrs	r2, r3
 800787c:	4b74      	ldr	r3, [pc, #464]	; (8007a50 <MX_LWIP_Init+0x234>)
 800787e:	789b      	ldrb	r3, [r3, #2]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	4313      	orrs	r3, r2
 8007884:	4a72      	ldr	r2, [pc, #456]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007886:	78d2      	ldrb	r2, [r2, #3]
 8007888:	4313      	orrs	r3, r2
 800788a:	061a      	lsls	r2, r3, #24
 800788c:	4b70      	ldr	r3, [pc, #448]	; (8007a50 <MX_LWIP_Init+0x234>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	0619      	lsls	r1, r3, #24
 8007892:	4b6f      	ldr	r3, [pc, #444]	; (8007a50 <MX_LWIP_Init+0x234>)
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	041b      	lsls	r3, r3, #16
 8007898:	4319      	orrs	r1, r3
 800789a:	4b6d      	ldr	r3, [pc, #436]	; (8007a50 <MX_LWIP_Init+0x234>)
 800789c:	789b      	ldrb	r3, [r3, #2]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	430b      	orrs	r3, r1
 80078a2:	496b      	ldr	r1, [pc, #428]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078a4:	78c9      	ldrb	r1, [r1, #3]
 80078a6:	430b      	orrs	r3, r1
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078ae:	431a      	orrs	r2, r3
 80078b0:	4b67      	ldr	r3, [pc, #412]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	0619      	lsls	r1, r3, #24
 80078b6:	4b66      	ldr	r3, [pc, #408]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	4319      	orrs	r1, r3
 80078be:	4b64      	ldr	r3, [pc, #400]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078c0:	789b      	ldrb	r3, [r3, #2]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	430b      	orrs	r3, r1
 80078c6:	4962      	ldr	r1, [pc, #392]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078c8:	78c9      	ldrb	r1, [r1, #3]
 80078ca:	430b      	orrs	r3, r1
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078d2:	431a      	orrs	r2, r3
 80078d4:	4b5e      	ldr	r3, [pc, #376]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	0619      	lsls	r1, r3, #24
 80078da:	4b5d      	ldr	r3, [pc, #372]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	041b      	lsls	r3, r3, #16
 80078e0:	4319      	orrs	r1, r3
 80078e2:	4b5b      	ldr	r3, [pc, #364]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	430b      	orrs	r3, r1
 80078ea:	4959      	ldr	r1, [pc, #356]	; (8007a50 <MX_LWIP_Init+0x234>)
 80078ec:	78c9      	ldrb	r1, [r1, #3]
 80078ee:	430b      	orrs	r3, r1
 80078f0:	0e1b      	lsrs	r3, r3, #24
 80078f2:	4313      	orrs	r3, r2
 80078f4:	4a59      	ldr	r2, [pc, #356]	; (8007a5c <MX_LWIP_Init+0x240>)
 80078f6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80078f8:	4b56      	ldr	r3, [pc, #344]	; (8007a54 <MX_LWIP_Init+0x238>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	061a      	lsls	r2, r3, #24
 80078fe:	4b55      	ldr	r3, [pc, #340]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	431a      	orrs	r2, r3
 8007906:	4b53      	ldr	r3, [pc, #332]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007908:	789b      	ldrb	r3, [r3, #2]
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	4313      	orrs	r3, r2
 800790e:	4a51      	ldr	r2, [pc, #324]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007910:	78d2      	ldrb	r2, [r2, #3]
 8007912:	4313      	orrs	r3, r2
 8007914:	061a      	lsls	r2, r3, #24
 8007916:	4b4f      	ldr	r3, [pc, #316]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	0619      	lsls	r1, r3, #24
 800791c:	4b4d      	ldr	r3, [pc, #308]	; (8007a54 <MX_LWIP_Init+0x238>)
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	041b      	lsls	r3, r3, #16
 8007922:	4319      	orrs	r1, r3
 8007924:	4b4b      	ldr	r3, [pc, #300]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007926:	789b      	ldrb	r3, [r3, #2]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	430b      	orrs	r3, r1
 800792c:	4949      	ldr	r1, [pc, #292]	; (8007a54 <MX_LWIP_Init+0x238>)
 800792e:	78c9      	ldrb	r1, [r1, #3]
 8007930:	430b      	orrs	r3, r1
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007938:	431a      	orrs	r2, r3
 800793a:	4b46      	ldr	r3, [pc, #280]	; (8007a54 <MX_LWIP_Init+0x238>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	0619      	lsls	r1, r3, #24
 8007940:	4b44      	ldr	r3, [pc, #272]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	041b      	lsls	r3, r3, #16
 8007946:	4319      	orrs	r1, r3
 8007948:	4b42      	ldr	r3, [pc, #264]	; (8007a54 <MX_LWIP_Init+0x238>)
 800794a:	789b      	ldrb	r3, [r3, #2]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	430b      	orrs	r3, r1
 8007950:	4940      	ldr	r1, [pc, #256]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007952:	78c9      	ldrb	r1, [r1, #3]
 8007954:	430b      	orrs	r3, r1
 8007956:	0a1b      	lsrs	r3, r3, #8
 8007958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800795c:	431a      	orrs	r2, r3
 800795e:	4b3d      	ldr	r3, [pc, #244]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	0619      	lsls	r1, r3, #24
 8007964:	4b3b      	ldr	r3, [pc, #236]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	4319      	orrs	r1, r3
 800796c:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <MX_LWIP_Init+0x238>)
 800796e:	789b      	ldrb	r3, [r3, #2]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	430b      	orrs	r3, r1
 8007974:	4937      	ldr	r1, [pc, #220]	; (8007a54 <MX_LWIP_Init+0x238>)
 8007976:	78c9      	ldrb	r1, [r1, #3]
 8007978:	430b      	orrs	r3, r1
 800797a:	0e1b      	lsrs	r3, r3, #24
 800797c:	4313      	orrs	r3, r2
 800797e:	4a38      	ldr	r2, [pc, #224]	; (8007a60 <MX_LWIP_Init+0x244>)
 8007980:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007982:	4b35      	ldr	r3, [pc, #212]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	061a      	lsls	r2, r3, #24
 8007988:	4b33      	ldr	r3, [pc, #204]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	041b      	lsls	r3, r3, #16
 800798e:	431a      	orrs	r2, r3
 8007990:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007992:	789b      	ldrb	r3, [r3, #2]
 8007994:	021b      	lsls	r3, r3, #8
 8007996:	4313      	orrs	r3, r2
 8007998:	4a2f      	ldr	r2, [pc, #188]	; (8007a58 <MX_LWIP_Init+0x23c>)
 800799a:	78d2      	ldrb	r2, [r2, #3]
 800799c:	4313      	orrs	r3, r2
 800799e:	061a      	lsls	r2, r3, #24
 80079a0:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	0619      	lsls	r1, r3, #24
 80079a6:	4b2c      	ldr	r3, [pc, #176]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	4319      	orrs	r1, r3
 80079ae:	4b2a      	ldr	r3, [pc, #168]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079b0:	789b      	ldrb	r3, [r3, #2]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	430b      	orrs	r3, r1
 80079b6:	4928      	ldr	r1, [pc, #160]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079b8:	78c9      	ldrb	r1, [r1, #3]
 80079ba:	430b      	orrs	r3, r1
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079c2:	431a      	orrs	r2, r3
 80079c4:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	0619      	lsls	r1, r3, #24
 80079ca:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	041b      	lsls	r3, r3, #16
 80079d0:	4319      	orrs	r1, r3
 80079d2:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079d4:	789b      	ldrb	r3, [r3, #2]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	430b      	orrs	r3, r1
 80079da:	491f      	ldr	r1, [pc, #124]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079dc:	78c9      	ldrb	r1, [r1, #3]
 80079de:	430b      	orrs	r3, r1
 80079e0:	0a1b      	lsrs	r3, r3, #8
 80079e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079e6:	431a      	orrs	r2, r3
 80079e8:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	0619      	lsls	r1, r3, #24
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	4319      	orrs	r1, r3
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <MX_LWIP_Init+0x23c>)
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	430b      	orrs	r3, r1
 80079fe:	4916      	ldr	r1, [pc, #88]	; (8007a58 <MX_LWIP_Init+0x23c>)
 8007a00:	78c9      	ldrb	r1, [r1, #3]
 8007a02:	430b      	orrs	r3, r1
 8007a04:	0e1b      	lsrs	r3, r3, #24
 8007a06:	4313      	orrs	r3, r2
 8007a08:	4a16      	ldr	r2, [pc, #88]	; (8007a64 <MX_LWIP_Init+0x248>)
 8007a0a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007a0c:	4b16      	ldr	r3, [pc, #88]	; (8007a68 <MX_LWIP_Init+0x24c>)
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <MX_LWIP_Init+0x250>)
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	2300      	movs	r3, #0
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <MX_LWIP_Init+0x248>)
 8007a1a:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <MX_LWIP_Init+0x244>)
 8007a1c:	490f      	ldr	r1, [pc, #60]	; (8007a5c <MX_LWIP_Init+0x240>)
 8007a1e:	4814      	ldr	r0, [pc, #80]	; (8007a70 <MX_LWIP_Init+0x254>)
 8007a20:	f000 ff48 	bl	80088b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007a24:	4812      	ldr	r0, [pc, #72]	; (8007a70 <MX_LWIP_Init+0x254>)
 8007a26:	f001 f8f5 	bl	8008c14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007a2a:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <MX_LWIP_Init+0x254>)
 8007a2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007a30:	089b      	lsrs	r3, r3, #2
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007a3c:	480c      	ldr	r0, [pc, #48]	; (8007a70 <MX_LWIP_Init+0x254>)
 8007a3e:	f001 f8f9 	bl	8008c34 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007a42:	e002      	b.n	8007a4a <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8007a44:	480a      	ldr	r0, [pc, #40]	; (8007a70 <MX_LWIP_Init+0x254>)
 8007a46:	f001 f961 	bl	8008d0c <netif_set_down>
}
 8007a4a:	bf00      	nop
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000a88 	.word	0x20000a88
 8007a54:	20000a84 	.word	0x20000a84
 8007a58:	20000a4c 	.word	0x20000a4c
 8007a5c:	20000a80 	.word	0x20000a80
 8007a60:	20000a8c 	.word	0x20000a8c
 8007a64:	20000a90 	.word	0x20000a90
 8007a68:	080123f9 	.word	0x080123f9
 8007a6c:	08007ea5 	.word	0x08007ea5
 8007a70:	20000a50 	.word	0x20000a50

08007a74 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007a80:	4b49      	ldr	r3, [pc, #292]	; (8007ba8 <low_level_init+0x134>)
 8007a82:	4a4a      	ldr	r2, [pc, #296]	; (8007bac <low_level_init+0x138>)
 8007a84:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007a86:	4b48      	ldr	r3, [pc, #288]	; (8007ba8 <low_level_init+0x134>)
 8007a88:	2201      	movs	r2, #1
 8007a8a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007a8c:	4b46      	ldr	r3, [pc, #280]	; (8007ba8 <low_level_init+0x134>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007a92:	2300      	movs	r3, #0
 8007a94:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007a96:	2380      	movs	r3, #128	; 0x80
 8007a98:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007a9a:	23e1      	movs	r3, #225	; 0xe1
 8007a9c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007aaa:	4a3f      	ldr	r2, [pc, #252]	; (8007ba8 <low_level_init+0x134>)
 8007aac:	f107 0308 	add.w	r3, r7, #8
 8007ab0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007ab2:	4b3d      	ldr	r3, [pc, #244]	; (8007ba8 <low_level_init+0x134>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007ab8:	4b3b      	ldr	r3, [pc, #236]	; (8007ba8 <low_level_init+0x134>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007abe:	4b3a      	ldr	r3, [pc, #232]	; (8007ba8 <low_level_init+0x134>)
 8007ac0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007ac4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007ac6:	4838      	ldr	r0, [pc, #224]	; (8007ba8 <low_level_init+0x134>)
 8007ac8:	f7fc fc9a 	bl	8004400 <HAL_ETH_Init>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d108      	bne.n	8007ae8 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007adc:	f043 0304 	orr.w	r3, r3, #4
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007ae8:	2304      	movs	r3, #4
 8007aea:	4a31      	ldr	r2, [pc, #196]	; (8007bb0 <low_level_init+0x13c>)
 8007aec:	4931      	ldr	r1, [pc, #196]	; (8007bb4 <low_level_init+0x140>)
 8007aee:	482e      	ldr	r0, [pc, #184]	; (8007ba8 <low_level_init+0x134>)
 8007af0:	f7fc fe22 	bl	8004738 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007af4:	2304      	movs	r3, #4
 8007af6:	4a30      	ldr	r2, [pc, #192]	; (8007bb8 <low_level_init+0x144>)
 8007af8:	4930      	ldr	r1, [pc, #192]	; (8007bbc <low_level_init+0x148>)
 8007afa:	482b      	ldr	r0, [pc, #172]	; (8007ba8 <low_level_init+0x134>)
 8007afc:	f7fc fe85 	bl	800480a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2206      	movs	r2, #6
 8007b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007b08:	4b27      	ldr	r3, [pc, #156]	; (8007ba8 <low_level_init+0x134>)
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007b14:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <low_level_init+0x134>)
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	785a      	ldrb	r2, [r3, #1]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007b20:	4b21      	ldr	r3, [pc, #132]	; (8007ba8 <low_level_init+0x134>)
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	789a      	ldrb	r2, [r3, #2]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007b2c:	4b1e      	ldr	r3, [pc, #120]	; (8007ba8 <low_level_init+0x134>)
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	78da      	ldrb	r2, [r3, #3]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007b38:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <low_level_init+0x134>)
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	791a      	ldrb	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007b44:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <low_level_init+0x134>)
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	795a      	ldrb	r2, [r3, #5]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007b56:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007b5e:	f043 030a 	orr.w	r3, r3, #10
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007b6a:	480f      	ldr	r0, [pc, #60]	; (8007ba8 <low_level_init+0x134>)
 8007b6c:	f7fd f8f6 	bl	8004d5c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007b70:	f107 0310 	add.w	r3, r7, #16
 8007b74:	461a      	mov	r2, r3
 8007b76:	211d      	movs	r1, #29
 8007b78:	480b      	ldr	r0, [pc, #44]	; (8007ba8 <low_level_init+0x134>)
 8007b7a:	f7fd f821 	bl	8004bc0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f043 030b 	orr.w	r3, r3, #11
 8007b84:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	211d      	movs	r1, #29
 8007b8c:	4806      	ldr	r0, [pc, #24]	; (8007ba8 <low_level_init+0x134>)
 8007b8e:	f7fd f87f 	bl	8004c90 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007b92:	f107 0310 	add.w	r3, r7, #16
 8007b96:	461a      	mov	r2, r3
 8007b98:	211d      	movs	r1, #29
 8007b9a:	4803      	ldr	r0, [pc, #12]	; (8007ba8 <low_level_init+0x134>)
 8007b9c:	f7fd f810 	bl	8004bc0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8007ba0:	bf00      	nop
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000394 	.word	0x20000394
 8007bac:	40028000 	.word	0x40028000
 8007bb0:	20002364 	.word	0x20002364
 8007bb4:	20000a94 	.word	0x20000a94
 8007bb8:	20000b14 	.word	0x20000b14
 8007bbc:	200022e4 	.word	0x200022e4

08007bc0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007bca:	4b4b      	ldr	r3, [pc, #300]	; (8007cf8 <low_level_output+0x138>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007be2:	4b45      	ldr	r3, [pc, #276]	; (8007cf8 <low_level_output+0x138>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	623b      	str	r3, [r7, #32]
 8007bf0:	e05a      	b.n	8007ca8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da03      	bge.n	8007c02 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007bfa:	23f8      	movs	r3, #248	; 0xf8
 8007bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007c00:	e05c      	b.n	8007cbc <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	895b      	ldrh	r3, [r3, #10]
 8007c06:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007c0c:	e02f      	b.n	8007c6e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	18d0      	adds	r0, r2, r3
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	18d1      	adds	r1, r2, r3
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	f00a fd24 	bl	8012672 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	da03      	bge.n	8007c40 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007c38:	23f8      	movs	r3, #248	; 0xf8
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007c3e:	e03d      	b.n	8007cbc <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007c50:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c5c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c68:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d8c8      	bhi.n	8007c0e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	18d0      	adds	r0, r2, r3
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4413      	add	r3, r2
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f00a fcf0 	bl	8012672 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	623b      	str	r3, [r7, #32]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1a1      	bne.n	8007bf2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007cae:	6979      	ldr	r1, [r7, #20]
 8007cb0:	4811      	ldr	r0, [pc, #68]	; (8007cf8 <low_level_output+0x138>)
 8007cb2:	f7fc fe17 	bl	80048e4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007cbc:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <low_level_output+0x138>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	f241 0314 	movw	r3, #4116	; 0x1014
 8007cc4:	4413      	add	r3, r2
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <low_level_output+0x138>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	f241 0314 	movw	r3, #4116	; 0x1014
 8007cd8:	4413      	add	r3, r2
 8007cda:	2220      	movs	r2, #32
 8007cdc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007cde:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <low_level_output+0x138>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	f241 0304 	movw	r3, #4100	; 0x1004
 8007ce6:	4413      	add	r3, r2
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3728      	adds	r7, #40	; 0x28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000394 	.word	0x20000394

08007cfc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08c      	sub	sp, #48	; 0x30
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007d04:	2300      	movs	r3, #0
 8007d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007d20:	484f      	ldr	r0, [pc, #316]	; (8007e60 <low_level_input+0x164>)
 8007d22:	f7fc fec9 	bl	8004ab8 <HAL_ETH_GetReceivedFrame>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <low_level_input+0x34>
  
    return NULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e092      	b.n	8007e56 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007d30:	4b4b      	ldr	r3, [pc, #300]	; (8007e60 <low_level_input+0x164>)
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007d36:	4b4a      	ldr	r3, [pc, #296]	; (8007e60 <low_level_input+0x164>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007d42:	89fb      	ldrh	r3, [r7, #14]
 8007d44:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007d48:	4619      	mov	r1, r3
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f001 f89a 	bl	8008e84 <pbuf_alloc>
 8007d50:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d04b      	beq.n	8007df0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007d58:	4b41      	ldr	r3, [pc, #260]	; (8007e60 <low_level_input+0x164>)
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d66:	e040      	b.n	8007dea <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	895b      	ldrh	r3, [r3, #10]
 8007d6c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007d72:	e021      	b.n	8007db8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	18d0      	adds	r0, r2, r3
 8007d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	18d1      	adds	r1, r2, r3
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f00a fc71 	bl	8012672 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007da6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007db2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d8d6      	bhi.n	8007d74 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	18d0      	adds	r0, r2, r3
 8007dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f00a fc4b 	bl	8012672 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	4413      	add	r3, r2
 8007de2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1bb      	bne.n	8007d68 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007df0:	4b1b      	ldr	r3, [pc, #108]	; (8007e60 <low_level_input+0x164>)
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	e00b      	b.n	8007e14 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	3301      	adds	r3, #1
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <low_level_input+0x164>)
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d3ee      	bcc.n	8007dfc <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8007e1e:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <low_level_input+0x164>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8007e24:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <low_level_input+0x164>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	f241 0314 	movw	r3, #4116	; 0x1014
 8007e2c:	4413      	add	r3, r2
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00d      	beq.n	8007e54 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <low_level_input+0x164>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007e40:	4413      	add	r3, r2
 8007e42:	2280      	movs	r2, #128	; 0x80
 8007e44:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007e46:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <low_level_input+0x164>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	f241 0308 	movw	r3, #4104	; 0x1008
 8007e4e:	4413      	add	r3, r2
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3730      	adds	r7, #48	; 0x30
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000394 	.word	0x20000394

08007e64 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff ff45 	bl	8007cfc <low_level_input>
 8007e72:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d010      	beq.n	8007e9c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8007e88:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d006      	beq.n	8007e9e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f001 fad7 	bl	8009444 <pbuf_free>
    p = NULL;    
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	e000      	b.n	8007e9e <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007e9c:	bf00      	nop
  }
}
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <ethernetif_init+0x1c>
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <ethernetif_init+0x48>)
 8007eb4:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8007eb8:	490d      	ldr	r1, [pc, #52]	; (8007ef0 <ethernetif_init+0x4c>)
 8007eba:	480e      	ldr	r0, [pc, #56]	; (8007ef4 <ethernetif_init+0x50>)
 8007ebc:	f00a fcae 	bl	801281c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2273      	movs	r2, #115	; 0x73
 8007ec4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2274      	movs	r2, #116	; 0x74
 8007ecc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <ethernetif_init+0x54>)
 8007ed4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a08      	ldr	r2, [pc, #32]	; (8007efc <ethernetif_init+0x58>)
 8007eda:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fdc9 	bl	8007a74 <low_level_init>

  return ERR_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	08015d8c 	.word	0x08015d8c
 8007ef0:	08015da8 	.word	0x08015da8
 8007ef4:	08015db8 	.word	0x08015db8
 8007ef8:	080108c9 	.word	0x080108c9
 8007efc:	08007bc1 	.word	0x08007bc1

08007f00 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f04:	f7fb fe54 	bl	8003bb0 <HAL_GetTick>
 8007f08:	4603      	mov	r3, r0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	4603      	mov	r3, r0
 8007f16:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	b21a      	sxth	r2, r3
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	b21b      	sxth	r3, r3
 8007f26:	4313      	orrs	r3, r2
 8007f28:	b21b      	sxth	r3, r3
 8007f2a:	b29b      	uxth	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	061a      	lsls	r2, r3, #24
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	0a1b      	lsrs	r3, r3, #8
 8007f52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	0e1b      	lsrs	r3, r3, #24
 8007f5c:	4313      	orrs	r3, r2
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007f74:	f000 f8d4 	bl	8008120 <mem_init>
  memp_init();
 8007f78:	f000 fbda 	bl	8008730 <memp_init>
  pbuf_init();
  netif_init();
 8007f7c:	f000 fc92 	bl	80088a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007f80:	f007 fe9c 	bl	800fcbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007f84:	f001 fcfc 	bl	8009980 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007f88:	f007 fe10 	bl	800fbac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <ptr_to_mem+0x20>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	4413      	add	r3, r2
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	2000021c 	.word	0x2000021c

08007fb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a05      	ldr	r2, [pc, #20]	; (8007fd8 <mem_to_ptr+0x20>)
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	b29b      	uxth	r3, r3
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	2000021c 	.word	0x2000021c

08007fdc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007fe4:	4b45      	ldr	r3, [pc, #276]	; (80080fc <plug_holes+0x120>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d206      	bcs.n	8007ffc <plug_holes+0x20>
 8007fee:	4b44      	ldr	r3, [pc, #272]	; (8008100 <plug_holes+0x124>)
 8007ff0:	f240 12df 	movw	r2, #479	; 0x1df
 8007ff4:	4943      	ldr	r1, [pc, #268]	; (8008104 <plug_holes+0x128>)
 8007ff6:	4844      	ldr	r0, [pc, #272]	; (8008108 <plug_holes+0x12c>)
 8007ff8:	f00a fc10 	bl	801281c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007ffc:	4b43      	ldr	r3, [pc, #268]	; (800810c <plug_holes+0x130>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d306      	bcc.n	8008014 <plug_holes+0x38>
 8008006:	4b3e      	ldr	r3, [pc, #248]	; (8008100 <plug_holes+0x124>)
 8008008:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800800c:	4940      	ldr	r1, [pc, #256]	; (8008110 <plug_holes+0x134>)
 800800e:	483e      	ldr	r0, [pc, #248]	; (8008108 <plug_holes+0x12c>)
 8008010:	f00a fc04 	bl	801281c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	791b      	ldrb	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d006      	beq.n	800802a <plug_holes+0x4e>
 800801c:	4b38      	ldr	r3, [pc, #224]	; (8008100 <plug_holes+0x124>)
 800801e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008022:	493c      	ldr	r1, [pc, #240]	; (8008114 <plug_holes+0x138>)
 8008024:	4838      	ldr	r0, [pc, #224]	; (8008108 <plug_holes+0x12c>)
 8008026:	f00a fbf9 	bl	801281c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008032:	d906      	bls.n	8008042 <plug_holes+0x66>
 8008034:	4b32      	ldr	r3, [pc, #200]	; (8008100 <plug_holes+0x124>)
 8008036:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800803a:	4937      	ldr	r1, [pc, #220]	; (8008118 <plug_holes+0x13c>)
 800803c:	4832      	ldr	r0, [pc, #200]	; (8008108 <plug_holes+0x12c>)
 800803e:	f00a fbed 	bl	801281c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff ffa4 	bl	8007f94 <ptr_to_mem>
 800804c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	429a      	cmp	r2, r3
 8008054:	d024      	beq.n	80080a0 <plug_holes+0xc4>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	791b      	ldrb	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d120      	bne.n	80080a0 <plug_holes+0xc4>
 800805e:	4b2b      	ldr	r3, [pc, #172]	; (800810c <plug_holes+0x130>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	429a      	cmp	r2, r3
 8008066:	d01b      	beq.n	80080a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008068:	4b2c      	ldr	r3, [pc, #176]	; (800811c <plug_holes+0x140>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	429a      	cmp	r2, r3
 8008070:	d102      	bne.n	8008078 <plug_holes+0x9c>
      lfree = mem;
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <plug_holes+0x140>)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	881a      	ldrh	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008088:	d00a      	beq.n	80080a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff ff80 	bl	8007f94 <ptr_to_mem>
 8008094:	4604      	mov	r4, r0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff ff8e 	bl	8007fb8 <mem_to_ptr>
 800809c:	4603      	mov	r3, r0
 800809e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff ff75 	bl	8007f94 <ptr_to_mem>
 80080aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d01f      	beq.n	80080f4 <plug_holes+0x118>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d11b      	bne.n	80080f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80080bc:	4b17      	ldr	r3, [pc, #92]	; (800811c <plug_holes+0x140>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d102      	bne.n	80080cc <plug_holes+0xf0>
      lfree = pmem;
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <plug_holes+0x140>)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	881a      	ldrh	r2, [r3, #0]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080dc:	d00a      	beq.n	80080f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff ff56 	bl	8007f94 <ptr_to_mem>
 80080e8:	4604      	mov	r4, r0
 80080ea:	68b8      	ldr	r0, [r7, #8]
 80080ec:	f7ff ff64 	bl	8007fb8 <mem_to_ptr>
 80080f0:	4603      	mov	r3, r0
 80080f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd90      	pop	{r4, r7, pc}
 80080fc:	2000021c 	.word	0x2000021c
 8008100:	08015de0 	.word	0x08015de0
 8008104:	08015e10 	.word	0x08015e10
 8008108:	08015e28 	.word	0x08015e28
 800810c:	20000220 	.word	0x20000220
 8008110:	08015e50 	.word	0x08015e50
 8008114:	08015e6c 	.word	0x08015e6c
 8008118:	08015e88 	.word	0x08015e88
 800811c:	20000224 	.word	0x20000224

08008120 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <mem_init+0x68>)
 8008128:	3303      	adds	r3, #3
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	461a      	mov	r2, r3
 8008130:	4b16      	ldr	r3, [pc, #88]	; (800818c <mem_init+0x6c>)
 8008132:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <mem_init+0x6c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008140:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800814e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8008152:	f7ff ff1f 	bl	8007f94 <ptr_to_mem>
 8008156:	4602      	mov	r2, r0
 8008158:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <mem_init+0x70>)
 800815a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800815c:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <mem_init+0x70>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2201      	movs	r2, #1
 8008162:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <mem_init+0x70>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800816c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800816e:	4b08      	ldr	r3, [pc, #32]	; (8008190 <mem_init+0x70>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008176:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008178:	4b04      	ldr	r3, [pc, #16]	; (800818c <mem_init+0x6c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a05      	ldr	r2, [pc, #20]	; (8008194 <mem_init+0x74>)
 800817e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20003b4c 	.word	0x20003b4c
 800818c:	2000021c 	.word	0x2000021c
 8008190:	20000220 	.word	0x20000220
 8008194:	20000224 	.word	0x20000224

08008198 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff09 	bl	8007fb8 <mem_to_ptr>
 80081a6:	4603      	mov	r3, r0
 80081a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff fef0 	bl	8007f94 <ptr_to_mem>
 80081b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff feea 	bl	8007f94 <ptr_to_mem>
 80081c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081ca:	d818      	bhi.n	80081fe <mem_link_valid+0x66>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	885b      	ldrh	r3, [r3, #2]
 80081d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081d4:	d813      	bhi.n	80081fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80081da:	8afa      	ldrh	r2, [r7, #22]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d004      	beq.n	80081ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	8afa      	ldrh	r2, [r7, #22]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d109      	bne.n	80081fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80081ea:	4b08      	ldr	r3, [pc, #32]	; (800820c <mem_link_valid+0x74>)
 80081ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d006      	beq.n	8008202 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	885b      	ldrh	r3, [r3, #2]
 80081f8:	8afa      	ldrh	r2, [r7, #22]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d001      	beq.n	8008202 <mem_link_valid+0x6a>
    return 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	e000      	b.n	8008204 <mem_link_valid+0x6c>
  }
  return 1;
 8008202:	2301      	movs	r3, #1
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	20000220 	.word	0x20000220

08008210 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d04c      	beq.n	80082b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d007      	beq.n	8008238 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008228:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <mem_free+0xb0>)
 800822a:	f240 2273 	movw	r2, #627	; 0x273
 800822e:	4925      	ldr	r1, [pc, #148]	; (80082c4 <mem_free+0xb4>)
 8008230:	4825      	ldr	r0, [pc, #148]	; (80082c8 <mem_free+0xb8>)
 8008232:	f00a faf3 	bl	801281c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008236:	e040      	b.n	80082ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3b08      	subs	r3, #8
 800823c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800823e:	4b23      	ldr	r3, [pc, #140]	; (80082cc <mem_free+0xbc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d306      	bcc.n	8008256 <mem_free+0x46>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f103 020c 	add.w	r2, r3, #12
 800824e:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <mem_free+0xc0>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d907      	bls.n	8008266 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008256:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <mem_free+0xb0>)
 8008258:	f240 227f 	movw	r2, #639	; 0x27f
 800825c:	491d      	ldr	r1, [pc, #116]	; (80082d4 <mem_free+0xc4>)
 800825e:	481a      	ldr	r0, [pc, #104]	; (80082c8 <mem_free+0xb8>)
 8008260:	f00a fadc 	bl	801281c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008264:	e029      	b.n	80082ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d107      	bne.n	800827e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800826e:	4b14      	ldr	r3, [pc, #80]	; (80082c0 <mem_free+0xb0>)
 8008270:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008274:	4918      	ldr	r1, [pc, #96]	; (80082d8 <mem_free+0xc8>)
 8008276:	4814      	ldr	r0, [pc, #80]	; (80082c8 <mem_free+0xb8>)
 8008278:	f00a fad0 	bl	801281c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800827c:	e01d      	b.n	80082ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff ff8a 	bl	8008198 <mem_link_valid>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <mem_free+0xb0>)
 800828c:	f240 2295 	movw	r2, #661	; 0x295
 8008290:	4912      	ldr	r1, [pc, #72]	; (80082dc <mem_free+0xcc>)
 8008292:	480d      	ldr	r0, [pc, #52]	; (80082c8 <mem_free+0xb8>)
 8008294:	f00a fac2 	bl	801281c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008298:	e00f      	b.n	80082ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80082a0:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <mem_free+0xd0>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d202      	bcs.n	80082b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80082aa:	4a0d      	ldr	r2, [pc, #52]	; (80082e0 <mem_free+0xd0>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f7ff fe93 	bl	8007fdc <plug_holes>
 80082b6:	e000      	b.n	80082ba <mem_free+0xaa>
    return;
 80082b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	08015de0 	.word	0x08015de0
 80082c4:	08015eb4 	.word	0x08015eb4
 80082c8:	08015e28 	.word	0x08015e28
 80082cc:	2000021c 	.word	0x2000021c
 80082d0:	20000220 	.word	0x20000220
 80082d4:	08015ed8 	.word	0x08015ed8
 80082d8:	08015ef4 	.word	0x08015ef4
 80082dc:	08015f1c 	.word	0x08015f1c
 80082e0:	20000224 	.word	0x20000224

080082e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80082f0:	887b      	ldrh	r3, [r7, #2]
 80082f2:	3303      	adds	r3, #3
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f023 0303 	bic.w	r3, r3, #3
 80082fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80082fc:	8bfb      	ldrh	r3, [r7, #30]
 80082fe:	2b0b      	cmp	r3, #11
 8008300:	d801      	bhi.n	8008306 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008302:	230c      	movs	r3, #12
 8008304:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008306:	8bfb      	ldrh	r3, [r7, #30]
 8008308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800830c:	d803      	bhi.n	8008316 <mem_trim+0x32>
 800830e:	8bfa      	ldrh	r2, [r7, #30]
 8008310:	887b      	ldrh	r3, [r7, #2]
 8008312:	429a      	cmp	r2, r3
 8008314:	d201      	bcs.n	800831a <mem_trim+0x36>
    return NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	e0cc      	b.n	80084b4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800831a:	4b68      	ldr	r3, [pc, #416]	; (80084bc <mem_trim+0x1d8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d304      	bcc.n	800832e <mem_trim+0x4a>
 8008324:	4b66      	ldr	r3, [pc, #408]	; (80084c0 <mem_trim+0x1dc>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	429a      	cmp	r2, r3
 800832c:	d306      	bcc.n	800833c <mem_trim+0x58>
 800832e:	4b65      	ldr	r3, [pc, #404]	; (80084c4 <mem_trim+0x1e0>)
 8008330:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008334:	4964      	ldr	r1, [pc, #400]	; (80084c8 <mem_trim+0x1e4>)
 8008336:	4865      	ldr	r0, [pc, #404]	; (80084cc <mem_trim+0x1e8>)
 8008338:	f00a fa70 	bl	801281c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800833c:	4b5f      	ldr	r3, [pc, #380]	; (80084bc <mem_trim+0x1d8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d304      	bcc.n	8008350 <mem_trim+0x6c>
 8008346:	4b5e      	ldr	r3, [pc, #376]	; (80084c0 <mem_trim+0x1dc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d301      	bcc.n	8008354 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	e0af      	b.n	80084b4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3b08      	subs	r3, #8
 8008358:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f7ff fe2c 	bl	8007fb8 <mem_to_ptr>
 8008360:	4603      	mov	r3, r0
 8008362:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	881a      	ldrh	r2, [r3, #0]
 8008368:	8afb      	ldrh	r3, [r7, #22]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b08      	subs	r3, #8
 8008370:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008372:	8bfa      	ldrh	r2, [r7, #30]
 8008374:	8abb      	ldrh	r3, [r7, #20]
 8008376:	429a      	cmp	r2, r3
 8008378:	d906      	bls.n	8008388 <mem_trim+0xa4>
 800837a:	4b52      	ldr	r3, [pc, #328]	; (80084c4 <mem_trim+0x1e0>)
 800837c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008380:	4953      	ldr	r1, [pc, #332]	; (80084d0 <mem_trim+0x1ec>)
 8008382:	4852      	ldr	r0, [pc, #328]	; (80084cc <mem_trim+0x1e8>)
 8008384:	f00a fa4a 	bl	801281c <iprintf>
  if (newsize > size) {
 8008388:	8bfa      	ldrh	r2, [r7, #30]
 800838a:	8abb      	ldrh	r3, [r7, #20]
 800838c:	429a      	cmp	r2, r3
 800838e:	d901      	bls.n	8008394 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008390:	2300      	movs	r3, #0
 8008392:	e08f      	b.n	80084b4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008394:	8bfa      	ldrh	r2, [r7, #30]
 8008396:	8abb      	ldrh	r3, [r7, #20]
 8008398:	429a      	cmp	r2, r3
 800839a:	d101      	bne.n	80083a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	e089      	b.n	80084b4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fdf5 	bl	8007f94 <ptr_to_mem>
 80083aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	791b      	ldrb	r3, [r3, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d13f      	bne.n	8008434 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80083bc:	d106      	bne.n	80083cc <mem_trim+0xe8>
 80083be:	4b41      	ldr	r3, [pc, #260]	; (80084c4 <mem_trim+0x1e0>)
 80083c0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80083c4:	4943      	ldr	r1, [pc, #268]	; (80084d4 <mem_trim+0x1f0>)
 80083c6:	4841      	ldr	r0, [pc, #260]	; (80084cc <mem_trim+0x1e8>)
 80083c8:	f00a fa28 	bl	801281c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80083d2:	8afa      	ldrh	r2, [r7, #22]
 80083d4:	8bfb      	ldrh	r3, [r7, #30]
 80083d6:	4413      	add	r3, r2
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3308      	adds	r3, #8
 80083dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80083de:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <mem_trim+0x1f4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d106      	bne.n	80083f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80083e8:	89fb      	ldrh	r3, [r7, #14]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fdd2 	bl	8007f94 <ptr_to_mem>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b39      	ldr	r3, [pc, #228]	; (80084d8 <mem_trim+0x1f4>)
 80083f4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80083f6:	89fb      	ldrh	r3, [r7, #14]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fdcb 	bl	8007f94 <ptr_to_mem>
 80083fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2200      	movs	r2, #0
 8008404:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	89ba      	ldrh	r2, [r7, #12]
 800840a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	8afa      	ldrh	r2, [r7, #22]
 8008410:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	89fa      	ldrh	r2, [r7, #14]
 8008416:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008420:	d047      	beq.n	80084b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fdb4 	bl	8007f94 <ptr_to_mem>
 800842c:	4602      	mov	r2, r0
 800842e:	89fb      	ldrh	r3, [r7, #14]
 8008430:	8053      	strh	r3, [r2, #2]
 8008432:	e03e      	b.n	80084b2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008434:	8bfb      	ldrh	r3, [r7, #30]
 8008436:	f103 0214 	add.w	r2, r3, #20
 800843a:	8abb      	ldrh	r3, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	d838      	bhi.n	80084b2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008440:	8afa      	ldrh	r2, [r7, #22]
 8008442:	8bfb      	ldrh	r3, [r7, #30]
 8008444:	4413      	add	r3, r2
 8008446:	b29b      	uxth	r3, r3
 8008448:	3308      	adds	r3, #8
 800844a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008454:	d106      	bne.n	8008464 <mem_trim+0x180>
 8008456:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <mem_trim+0x1e0>)
 8008458:	f240 3216 	movw	r2, #790	; 0x316
 800845c:	491d      	ldr	r1, [pc, #116]	; (80084d4 <mem_trim+0x1f0>)
 800845e:	481b      	ldr	r0, [pc, #108]	; (80084cc <mem_trim+0x1e8>)
 8008460:	f00a f9dc 	bl	801281c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008464:	89fb      	ldrh	r3, [r7, #14]
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fd94 	bl	8007f94 <ptr_to_mem>
 800846c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800846e:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <mem_trim+0x1f4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d202      	bcs.n	800847e <mem_trim+0x19a>
      lfree = mem2;
 8008478:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <mem_trim+0x1f4>)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2200      	movs	r2, #0
 8008482:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	8afa      	ldrh	r2, [r7, #22]
 8008490:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	89fa      	ldrh	r2, [r7, #14]
 8008496:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084a0:	d007      	beq.n	80084b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fd74 	bl	8007f94 <ptr_to_mem>
 80084ac:	4602      	mov	r2, r0
 80084ae:	89fb      	ldrh	r3, [r7, #14]
 80084b0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80084b2:	687b      	ldr	r3, [r7, #4]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	2000021c 	.word	0x2000021c
 80084c0:	20000220 	.word	0x20000220
 80084c4:	08015de0 	.word	0x08015de0
 80084c8:	08015f50 	.word	0x08015f50
 80084cc:	08015e28 	.word	0x08015e28
 80084d0:	08015f68 	.word	0x08015f68
 80084d4:	08015f88 	.word	0x08015f88
 80084d8:	20000224 	.word	0x20000224

080084dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <mem_malloc+0x14>
    return NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e0d9      	b.n	80086a4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80084f0:	88fb      	ldrh	r3, [r7, #6]
 80084f2:	3303      	adds	r3, #3
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f023 0303 	bic.w	r3, r3, #3
 80084fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80084fc:	8bbb      	ldrh	r3, [r7, #28]
 80084fe:	2b0b      	cmp	r3, #11
 8008500:	d801      	bhi.n	8008506 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008502:	230c      	movs	r3, #12
 8008504:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008506:	8bbb      	ldrh	r3, [r7, #28]
 8008508:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800850c:	d803      	bhi.n	8008516 <mem_malloc+0x3a>
 800850e:	8bba      	ldrh	r2, [r7, #28]
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	429a      	cmp	r2, r3
 8008514:	d201      	bcs.n	800851a <mem_malloc+0x3e>
    return NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	e0c4      	b.n	80086a4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800851a:	4b64      	ldr	r3, [pc, #400]	; (80086ac <mem_malloc+0x1d0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff fd4a 	bl	8007fb8 <mem_to_ptr>
 8008524:	4603      	mov	r3, r0
 8008526:	83fb      	strh	r3, [r7, #30]
 8008528:	e0b4      	b.n	8008694 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800852a:	8bfb      	ldrh	r3, [r7, #30]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff fd31 	bl	8007f94 <ptr_to_mem>
 8008532:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 80a4 	bne.w	8008686 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	8bfb      	ldrh	r3, [r7, #30]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	f1a3 0208 	sub.w	r2, r3, #8
 800854c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800854e:	429a      	cmp	r2, r3
 8008550:	f0c0 8099 	bcc.w	8008686 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	461a      	mov	r2, r3
 800855a:	8bfb      	ldrh	r3, [r7, #30]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f1a3 0208 	sub.w	r2, r3, #8
 8008562:	8bbb      	ldrh	r3, [r7, #28]
 8008564:	3314      	adds	r3, #20
 8008566:	429a      	cmp	r2, r3
 8008568:	d333      	bcc.n	80085d2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800856a:	8bfa      	ldrh	r2, [r7, #30]
 800856c:	8bbb      	ldrh	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	b29b      	uxth	r3, r3
 8008572:	3308      	adds	r3, #8
 8008574:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008576:	8a7b      	ldrh	r3, [r7, #18]
 8008578:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800857c:	d106      	bne.n	800858c <mem_malloc+0xb0>
 800857e:	4b4c      	ldr	r3, [pc, #304]	; (80086b0 <mem_malloc+0x1d4>)
 8008580:	f240 3287 	movw	r2, #903	; 0x387
 8008584:	494b      	ldr	r1, [pc, #300]	; (80086b4 <mem_malloc+0x1d8>)
 8008586:	484c      	ldr	r0, [pc, #304]	; (80086b8 <mem_malloc+0x1dc>)
 8008588:	f00a f948 	bl	801281c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800858c:	8a7b      	ldrh	r3, [r7, #18]
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff fd00 	bl	8007f94 <ptr_to_mem>
 8008594:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	881a      	ldrh	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8bfa      	ldrh	r2, [r7, #30]
 80085a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	8a7a      	ldrh	r2, [r7, #18]
 80085ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2201      	movs	r2, #1
 80085b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80085be:	d00b      	beq.n	80085d8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fce5 	bl	8007f94 <ptr_to_mem>
 80085ca:	4602      	mov	r2, r0
 80085cc:	8a7b      	ldrh	r3, [r7, #18]
 80085ce:	8053      	strh	r3, [r2, #2]
 80085d0:	e002      	b.n	80085d8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2201      	movs	r2, #1
 80085d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80085d8:	4b34      	ldr	r3, [pc, #208]	; (80086ac <mem_malloc+0x1d0>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d127      	bne.n	8008632 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80085e2:	4b32      	ldr	r3, [pc, #200]	; (80086ac <mem_malloc+0x1d0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80085e8:	e005      	b.n	80085f6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fcd0 	bl	8007f94 <ptr_to_mem>
 80085f4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d004      	beq.n	8008608 <mem_malloc+0x12c>
 80085fe:	4b2f      	ldr	r3, [pc, #188]	; (80086bc <mem_malloc+0x1e0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	429a      	cmp	r2, r3
 8008606:	d1f0      	bne.n	80085ea <mem_malloc+0x10e>
          }
          lfree = cur;
 8008608:	4a28      	ldr	r2, [pc, #160]	; (80086ac <mem_malloc+0x1d0>)
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800860e:	4b27      	ldr	r3, [pc, #156]	; (80086ac <mem_malloc+0x1d0>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <mem_malloc+0x1e0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d00b      	beq.n	8008632 <mem_malloc+0x156>
 800861a:	4b24      	ldr	r3, [pc, #144]	; (80086ac <mem_malloc+0x1d0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d006      	beq.n	8008632 <mem_malloc+0x156>
 8008624:	4b22      	ldr	r3, [pc, #136]	; (80086b0 <mem_malloc+0x1d4>)
 8008626:	f240 32b5 	movw	r2, #949	; 0x3b5
 800862a:	4925      	ldr	r1, [pc, #148]	; (80086c0 <mem_malloc+0x1e4>)
 800862c:	4822      	ldr	r0, [pc, #136]	; (80086b8 <mem_malloc+0x1dc>)
 800862e:	f00a f8f5 	bl	801281c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008632:	8bba      	ldrh	r2, [r7, #28]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	4413      	add	r3, r2
 8008638:	3308      	adds	r3, #8
 800863a:	4a20      	ldr	r2, [pc, #128]	; (80086bc <mem_malloc+0x1e0>)
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	4293      	cmp	r3, r2
 8008640:	d906      	bls.n	8008650 <mem_malloc+0x174>
 8008642:	4b1b      	ldr	r3, [pc, #108]	; (80086b0 <mem_malloc+0x1d4>)
 8008644:	f240 32ba 	movw	r2, #954	; 0x3ba
 8008648:	491e      	ldr	r1, [pc, #120]	; (80086c4 <mem_malloc+0x1e8>)
 800864a:	481b      	ldr	r0, [pc, #108]	; (80086b8 <mem_malloc+0x1dc>)
 800864c:	f00a f8e6 	bl	801281c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d006      	beq.n	8008668 <mem_malloc+0x18c>
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <mem_malloc+0x1d4>)
 800865c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8008660:	4919      	ldr	r1, [pc, #100]	; (80086c8 <mem_malloc+0x1ec>)
 8008662:	4815      	ldr	r0, [pc, #84]	; (80086b8 <mem_malloc+0x1dc>)
 8008664:	f00a f8da 	bl	801281c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <mem_malloc+0x1a4>
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <mem_malloc+0x1d4>)
 8008674:	f240 32be 	movw	r2, #958	; 0x3be
 8008678:	4914      	ldr	r1, [pc, #80]	; (80086cc <mem_malloc+0x1f0>)
 800867a:	480f      	ldr	r0, [pc, #60]	; (80086b8 <mem_malloc+0x1dc>)
 800867c:	f00a f8ce 	bl	801281c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3308      	adds	r3, #8
 8008684:	e00e      	b.n	80086a4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008686:	8bfb      	ldrh	r3, [r7, #30]
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fc83 	bl	8007f94 <ptr_to_mem>
 800868e:	4603      	mov	r3, r0
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008694:	8bfa      	ldrh	r2, [r7, #30]
 8008696:	8bbb      	ldrh	r3, [r7, #28]
 8008698:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800869c:	429a      	cmp	r2, r3
 800869e:	f4ff af44 	bcc.w	800852a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000224 	.word	0x20000224
 80086b0:	08015de0 	.word	0x08015de0
 80086b4:	08015f88 	.word	0x08015f88
 80086b8:	08015e28 	.word	0x08015e28
 80086bc:	20000220 	.word	0x20000220
 80086c0:	08015f9c 	.word	0x08015f9c
 80086c4:	08015fb8 	.word	0x08015fb8
 80086c8:	08015fe8 	.word	0x08015fe8
 80086cc:	08016018 	.word	0x08016018

080086d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	3303      	adds	r3, #3
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e011      	b.n	8008716 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	885b      	ldrh	r3, [r3, #2]
 800871a:	461a      	mov	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4293      	cmp	r3, r2
 8008720:	dbe7      	blt.n	80086f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008736:	2300      	movs	r3, #0
 8008738:	80fb      	strh	r3, [r7, #6]
 800873a:	e009      	b.n	8008750 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800873c:	88fb      	ldrh	r3, [r7, #6]
 800873e:	4a08      	ldr	r2, [pc, #32]	; (8008760 <memp_init+0x30>)
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff ffc3 	bl	80086d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800874a:	88fb      	ldrh	r3, [r7, #6]
 800874c:	3301      	adds	r3, #1
 800874e:	80fb      	strh	r3, [r7, #6]
 8008750:	88fb      	ldrh	r3, [r7, #6]
 8008752:	2b08      	cmp	r3, #8
 8008754:	d9f2      	bls.n	800873c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08018808 	.word	0x08018808

08008764 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d012      	beq.n	80087a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d006      	beq.n	800879c <do_memp_malloc_pool+0x38>
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <do_memp_malloc_pool+0x48>)
 8008790:	f240 1219 	movw	r2, #281	; 0x119
 8008794:	4906      	ldr	r1, [pc, #24]	; (80087b0 <do_memp_malloc_pool+0x4c>)
 8008796:	4807      	ldr	r0, [pc, #28]	; (80087b4 <do_memp_malloc_pool+0x50>)
 8008798:	f00a f840 	bl	801281c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	e000      	b.n	80087a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	0801603c 	.word	0x0801603c
 80087b0:	0801606c 	.word	0x0801606c
 80087b4:	08016090 	.word	0x08016090

080087b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d908      	bls.n	80087da <memp_malloc+0x22>
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <memp_malloc+0x3c>)
 80087ca:	f240 1257 	movw	r2, #343	; 0x157
 80087ce:	490a      	ldr	r1, [pc, #40]	; (80087f8 <memp_malloc+0x40>)
 80087d0:	480a      	ldr	r0, [pc, #40]	; (80087fc <memp_malloc+0x44>)
 80087d2:	f00a f823 	bl	801281c <iprintf>
 80087d6:	2300      	movs	r3, #0
 80087d8:	e008      	b.n	80087ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	4a08      	ldr	r2, [pc, #32]	; (8008800 <memp_malloc+0x48>)
 80087de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff ffbe 	bl	8008764 <do_memp_malloc_pool>
 80087e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80087ea:	68fb      	ldr	r3, [r7, #12]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	0801603c 	.word	0x0801603c
 80087f8:	080160cc 	.word	0x080160cc
 80087fc:	08016090 	.word	0x08016090
 8008800:	08018808 	.word	0x08018808

08008804 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <do_memp_free_pool+0x22>
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <do_memp_free_pool+0x40>)
 800881a:	f240 126d 	movw	r2, #365	; 0x16d
 800881e:	490a      	ldr	r1, [pc, #40]	; (8008848 <do_memp_free_pool+0x44>)
 8008820:	480a      	ldr	r0, [pc, #40]	; (800884c <do_memp_free_pool+0x48>)
 8008822:	f009 fffb 	bl	801281c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	0801603c 	.word	0x0801603c
 8008848:	080160ec 	.word	0x080160ec
 800884c:	08016090 	.word	0x08016090

08008850 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b08      	cmp	r3, #8
 8008860:	d907      	bls.n	8008872 <memp_free+0x22>
 8008862:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <memp_free+0x44>)
 8008864:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008868:	490b      	ldr	r1, [pc, #44]	; (8008898 <memp_free+0x48>)
 800886a:	480c      	ldr	r0, [pc, #48]	; (800889c <memp_free+0x4c>)
 800886c:	f009 ffd6 	bl	801281c <iprintf>
 8008870:	e00c      	b.n	800888c <memp_free+0x3c>

  if (mem == NULL) {
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <memp_free+0x50>)
 800887c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff ffbe 	bl	8008804 <do_memp_free_pool>
 8008888:	e000      	b.n	800888c <memp_free+0x3c>
    return;
 800888a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	0801603c 	.word	0x0801603c
 8008898:	0801610c 	.word	0x0801610c
 800889c:	08016090 	.word	0x08016090
 80088a0:	08018808 	.word	0x08018808

080088a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80088a8:	bf00      	nop
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d108      	bne.n	80088da <netif_add+0x26>
 80088c8:	4b56      	ldr	r3, [pc, #344]	; (8008a24 <netif_add+0x170>)
 80088ca:	f240 1227 	movw	r2, #295	; 0x127
 80088ce:	4956      	ldr	r1, [pc, #344]	; (8008a28 <netif_add+0x174>)
 80088d0:	4856      	ldr	r0, [pc, #344]	; (8008a2c <netif_add+0x178>)
 80088d2:	f009 ffa3 	bl	801281c <iprintf>
 80088d6:	2300      	movs	r3, #0
 80088d8:	e09f      	b.n	8008a1a <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d108      	bne.n	80088f2 <netif_add+0x3e>
 80088e0:	4b50      	ldr	r3, [pc, #320]	; (8008a24 <netif_add+0x170>)
 80088e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80088e6:	4952      	ldr	r1, [pc, #328]	; (8008a30 <netif_add+0x17c>)
 80088e8:	4850      	ldr	r0, [pc, #320]	; (8008a2c <netif_add+0x178>)
 80088ea:	f009 ff97 	bl	801281c <iprintf>
 80088ee:	2300      	movs	r3, #0
 80088f0:	e093      	b.n	8008a1a <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80088f8:	4b4e      	ldr	r3, [pc, #312]	; (8008a34 <netif_add+0x180>)
 80088fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008902:	4b4c      	ldr	r3, [pc, #304]	; (8008a34 <netif_add+0x180>)
 8008904:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800890c:	4b49      	ldr	r3, [pc, #292]	; (8008a34 <netif_add+0x180>)
 800890e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4a44      	ldr	r2, [pc, #272]	; (8008a38 <netif_add+0x184>)
 8008926:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a3a      	ldr	r2, [r7, #32]
 800893a:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800893c:	4b3f      	ldr	r3, [pc, #252]	; (8008a3c <netif_add+0x188>)
 800893e:	781a      	ldrb	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800894a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f914 	bl	8008b80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	4798      	blx	r3
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <netif_add+0xb4>
    return NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	e058      	b.n	8008a1a <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800896e:	2bff      	cmp	r3, #255	; 0xff
 8008970:	d103      	bne.n	800897a <netif_add+0xc6>
        netif->num = 0;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800897e:	4b30      	ldr	r3, [pc, #192]	; (8008a40 <netif_add+0x18c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e02b      	b.n	80089de <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	429a      	cmp	r2, r3
 800898c:	d106      	bne.n	800899c <netif_add+0xe8>
 800898e:	4b25      	ldr	r3, [pc, #148]	; (8008a24 <netif_add+0x170>)
 8008990:	f240 128b 	movw	r2, #395	; 0x18b
 8008994:	492b      	ldr	r1, [pc, #172]	; (8008a44 <netif_add+0x190>)
 8008996:	4825      	ldr	r0, [pc, #148]	; (8008a2c <netif_add+0x178>)
 8008998:	f009 ff40 	bl	801281c <iprintf>
        num_netifs++;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	3301      	adds	r3, #1
 80089a0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2bff      	cmp	r3, #255	; 0xff
 80089a6:	dd06      	ble.n	80089b6 <netif_add+0x102>
 80089a8:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <netif_add+0x170>)
 80089aa:	f240 128d 	movw	r2, #397	; 0x18d
 80089ae:	4926      	ldr	r1, [pc, #152]	; (8008a48 <netif_add+0x194>)
 80089b0:	481e      	ldr	r0, [pc, #120]	; (8008a2c <netif_add+0x178>)
 80089b2:	f009 ff33 	bl	801281c <iprintf>
        if (netif2->num == netif->num) {
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d108      	bne.n	80089d8 <netif_add+0x124>
          netif->num++;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089cc:	3301      	adds	r3, #1
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 80089d6:	e005      	b.n	80089e4 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1d0      	bne.n	8008986 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1be      	bne.n	8008968 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089f0:	2bfe      	cmp	r3, #254	; 0xfe
 80089f2:	d103      	bne.n	80089fc <netif_add+0x148>
    netif_num = 0;
 80089f4:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <netif_add+0x188>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	e006      	b.n	8008a0a <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a02:	3301      	adds	r3, #1
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <netif_add+0x188>)
 8008a08:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <netif_add+0x18c>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008a12:	4a0b      	ldr	r2, [pc, #44]	; (8008a40 <netif_add+0x18c>)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008a18:	68fb      	ldr	r3, [r7, #12]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	08016128 	.word	0x08016128
 8008a28:	080161bc 	.word	0x080161bc
 8008a2c:	08016178 	.word	0x08016178
 8008a30:	080161d8 	.word	0x080161d8
 8008a34:	0801886c 	.word	0x0801886c
 8008a38:	08008d71 	.word	0x08008d71
 8008a3c:	2000024c 	.word	0x2000024c
 8008a40:	20007068 	.word	0x20007068
 8008a44:	080161fc 	.word	0x080161fc
 8008a48:	08016210 	.word	0x08016210

08008a4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f002 fd6d 	bl	800b538 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f007 fab5 	bl	800ffd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <netif_do_set_ipaddr+0x20>
 8008a82:	4b1d      	ldr	r3, [pc, #116]	; (8008af8 <netif_do_set_ipaddr+0x88>)
 8008a84:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008a88:	491c      	ldr	r1, [pc, #112]	; (8008afc <netif_do_set_ipaddr+0x8c>)
 8008a8a:	481d      	ldr	r0, [pc, #116]	; (8008b00 <netif_do_set_ipaddr+0x90>)
 8008a8c:	f009 fec6 	bl	801281c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <netif_do_set_ipaddr+0x34>
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <netif_do_set_ipaddr+0x88>)
 8008a98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008a9c:	4917      	ldr	r1, [pc, #92]	; (8008afc <netif_do_set_ipaddr+0x8c>)
 8008a9e:	4818      	ldr	r0, [pc, #96]	; (8008b00 <netif_do_set_ipaddr+0x90>)
 8008aa0:	f009 febc 	bl	801281c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d01c      	beq.n	8008aec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3304      	adds	r3, #4
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008ac2:	f107 0314 	add.w	r3, r7, #20
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ffbf 	bl	8008a4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <netif_do_set_ipaddr+0x6a>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	e000      	b.n	8008adc <netif_do_set_ipaddr+0x6c>
 8008ada:	2300      	movs	r3, #0
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 f8d2 	bl	8008c8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e000      	b.n	8008aee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	08016128 	.word	0x08016128
 8008afc:	08016240 	.word	0x08016240
 8008b00:	08016178 	.word	0x08016178

08008b04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3308      	adds	r3, #8
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d00a      	beq.n	8008b34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <netif_do_set_netmask+0x26>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	e000      	b.n	8008b2c <netif_do_set_netmask+0x28>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	330c      	adds	r3, #12
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d00a      	beq.n	8008b72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <netif_do_set_gw+0x26>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	e000      	b.n	8008b6a <netif_do_set_gw+0x28>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008b9c:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <netif_set_addr+0x90>)
 8008b9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008ba6:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <netif_set_addr+0x90>)
 8008ba8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008bb0:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <netif_set_addr+0x90>)
 8008bb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <netif_set_addr+0x42>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <netif_set_addr+0x46>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <netif_set_addr+0x48>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff ff49 	bl	8008a70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff ff8e 	bl	8008b04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff ffa8 	bl	8008b42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008bf8:	f107 0310 	add.w	r3, r7, #16
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff ff35 	bl	8008a70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008c06:	bf00      	nop
 8008c08:	3720      	adds	r7, #32
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	0801886c 	.word	0x0801886c

08008c14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008c1c:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <netif_set_default+0x1c>)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	2000706c 	.word	0x2000706c

08008c34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d107      	bne.n	8008c52 <netif_set_up+0x1e>
 8008c42:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <netif_set_up+0x4c>)
 8008c44:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008c48:	490e      	ldr	r1, [pc, #56]	; (8008c84 <netif_set_up+0x50>)
 8008c4a:	480f      	ldr	r0, [pc, #60]	; (8008c88 <netif_set_up+0x54>)
 8008c4c:	f009 fde6 	bl	801281c <iprintf>
 8008c50:	e013      	b.n	8008c7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008c66:	f043 0301 	orr.w	r3, r3, #1
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008c72:	2103      	movs	r1, #3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f809 	bl	8008c8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	08016128 	.word	0x08016128
 8008c84:	080162b0 	.word	0x080162b0
 8008c88:	08016178 	.word	0x08016178

08008c8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <netif_issue_reports+0x20>
 8008c9e:	4b18      	ldr	r3, [pc, #96]	; (8008d00 <netif_issue_reports+0x74>)
 8008ca0:	f240 326d 	movw	r2, #877	; 0x36d
 8008ca4:	4917      	ldr	r1, [pc, #92]	; (8008d04 <netif_issue_reports+0x78>)
 8008ca6:	4818      	ldr	r0, [pc, #96]	; (8008d08 <netif_issue_reports+0x7c>)
 8008ca8:	f009 fdb8 	bl	801281c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d01e      	beq.n	8008cf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008cc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d013      	beq.n	8008cfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00e      	beq.n	8008cfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f008 f8d7 	bl	8010ea4 <etharp_request>
 8008cf6:	e000      	b.n	8008cfa <netif_issue_reports+0x6e>
    return;
 8008cf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	08016128 	.word	0x08016128
 8008d04:	080162cc 	.word	0x080162cc
 8008d08:	08016178 	.word	0x08016178

08008d0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d107      	bne.n	8008d2a <netif_set_down+0x1e>
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <netif_set_down+0x58>)
 8008d1c:	f240 329b 	movw	r2, #923	; 0x39b
 8008d20:	4911      	ldr	r1, [pc, #68]	; (8008d68 <netif_set_down+0x5c>)
 8008d22:	4812      	ldr	r0, [pc, #72]	; (8008d6c <netif_set_down+0x60>)
 8008d24:	f009 fd7a 	bl	801281c <iprintf>
 8008d28:	e019      	b.n	8008d5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d012      	beq.n	8008d5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008d50:	f003 0308 	and.w	r3, r3, #8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f007 fc61 	bl	8010620 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	08016128 	.word	0x08016128
 8008d68:	080162f0 	.word	0x080162f0
 8008d6c:	08016178 	.word	0x08016178

08008d70 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008d7c:	f06f 030b 	mvn.w	r3, #11
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d013      	beq.n	8008dc4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <netif_get_by_index+0x48>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	e00c      	b.n	8008dbe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008daa:	3301      	adds	r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	79fa      	ldrb	r2, [r7, #7]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d101      	bne.n	8008db8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	e006      	b.n	8008dc6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1ef      	bne.n	8008da4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20007068 	.word	0x20007068

08008dd8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <pbuf_free_ooseq+0x38>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008de4:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <pbuf_free_ooseq+0x3c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	607b      	str	r3, [r7, #4]
 8008dea:	e00a      	b.n	8008e02 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f002 fbdd 	bl	800b5b4 <tcp_free_ooseq>
      return;
 8008dfa:	e005      	b.n	8008e08 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	607b      	str	r3, [r7, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1f1      	bne.n	8008dec <pbuf_free_ooseq+0x14>
    }
  }
}
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20007070 	.word	0x20007070
 8008e14:	20007078 	.word	0x20007078

08008e18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008e1c:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <pbuf_pool_is_empty+0x14>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008e22:	bf00      	nop
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20007070 	.word	0x20007070

08008e30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	460b      	mov	r3, r1
 8008e40:	80fb      	strh	r3, [r7, #6]
 8008e42:	4613      	mov	r3, r2
 8008e44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	88fa      	ldrh	r2, [r7, #6]
 8008e56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	88ba      	ldrh	r2, [r7, #4]
 8008e5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008e5e:	8b3b      	ldrh	r3, [r7, #24]
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	7f3a      	ldrb	r2, [r7, #28]
 8008e6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	73da      	strb	r2, [r3, #15]
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	; 0x30
 8008e88:	af02      	add	r7, sp, #8
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	80bb      	strh	r3, [r7, #4]
 8008e92:	4613      	mov	r3, r2
 8008e94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008e9a:	887b      	ldrh	r3, [r7, #2]
 8008e9c:	2b41      	cmp	r3, #65	; 0x41
 8008e9e:	d00b      	beq.n	8008eb8 <pbuf_alloc+0x34>
 8008ea0:	2b41      	cmp	r3, #65	; 0x41
 8008ea2:	dc02      	bgt.n	8008eaa <pbuf_alloc+0x26>
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d007      	beq.n	8008eb8 <pbuf_alloc+0x34>
 8008ea8:	e0c2      	b.n	8009030 <pbuf_alloc+0x1ac>
 8008eaa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008eae:	d00b      	beq.n	8008ec8 <pbuf_alloc+0x44>
 8008eb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008eb4:	d070      	beq.n	8008f98 <pbuf_alloc+0x114>
 8008eb6:	e0bb      	b.n	8009030 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008eb8:	887a      	ldrh	r2, [r7, #2]
 8008eba:	88bb      	ldrh	r3, [r7, #4]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f000 f8d2 	bl	8009068 <pbuf_alloc_reference>
 8008ec4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008ec6:	e0bd      	b.n	8009044 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008ed0:	88bb      	ldrh	r3, [r7, #4]
 8008ed2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008ed4:	2008      	movs	r0, #8
 8008ed6:	f7ff fc6f 	bl	80087b8 <memp_malloc>
 8008eda:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8008ee2:	f7ff ff99 	bl	8008e18 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8008eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eee:	f000 faa9 	bl	8009444 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e0a7      	b.n	8009046 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008ef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ef8:	3303      	adds	r3, #3
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f023 0303 	bic.w	r3, r3, #3
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8b7a      	ldrh	r2, [r7, #26]
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bf28      	it	cs
 8008f0e:	4613      	movcs	r3, r2
 8008f10:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f14:	3310      	adds	r3, #16
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	4413      	add	r3, r2
 8008f1a:	3303      	adds	r3, #3
 8008f1c:	f023 0303 	bic.w	r3, r3, #3
 8008f20:	4618      	mov	r0, r3
 8008f22:	89f9      	ldrh	r1, [r7, #14]
 8008f24:	8b7a      	ldrh	r2, [r7, #26]
 8008f26:	2300      	movs	r3, #0
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	887b      	ldrh	r3, [r7, #2]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4601      	mov	r1, r0
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f7ff ff7c 	bl	8008e30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f003 0303 	and.w	r3, r3, #3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d006      	beq.n	8008f52 <pbuf_alloc+0xce>
 8008f44:	4b42      	ldr	r3, [pc, #264]	; (8009050 <pbuf_alloc+0x1cc>)
 8008f46:	f240 1201 	movw	r2, #257	; 0x101
 8008f4a:	4942      	ldr	r1, [pc, #264]	; (8009054 <pbuf_alloc+0x1d0>)
 8008f4c:	4842      	ldr	r0, [pc, #264]	; (8009058 <pbuf_alloc+0x1d4>)
 8008f4e:	f009 fc65 	bl	801281c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008f52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f54:	3303      	adds	r3, #3
 8008f56:	f023 0303 	bic.w	r3, r3, #3
 8008f5a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008f5e:	d106      	bne.n	8008f6e <pbuf_alloc+0xea>
 8008f60:	4b3b      	ldr	r3, [pc, #236]	; (8009050 <pbuf_alloc+0x1cc>)
 8008f62:	f240 1203 	movw	r2, #259	; 0x103
 8008f66:	493d      	ldr	r1, [pc, #244]	; (800905c <pbuf_alloc+0x1d8>)
 8008f68:	483b      	ldr	r0, [pc, #236]	; (8009058 <pbuf_alloc+0x1d4>)
 8008f6a:	f009 fc57 	bl	801281c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
 8008f78:	e002      	b.n	8008f80 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008f84:	8b7a      	ldrh	r2, [r7, #26]
 8008f86:	89fb      	ldrh	r3, [r7, #14]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008f90:	8b7b      	ldrh	r3, [r7, #26]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d19e      	bne.n	8008ed4 <pbuf_alloc+0x50>
      break;
 8008f96:	e055      	b.n	8009044 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f9a:	3303      	adds	r3, #3
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	88bb      	ldrh	r3, [r7, #4]
 8008fa6:	3303      	adds	r3, #3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008fb4:	8b3b      	ldrh	r3, [r7, #24]
 8008fb6:	3310      	adds	r3, #16
 8008fb8:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008fba:	8b3a      	ldrh	r2, [r7, #24]
 8008fbc:	88bb      	ldrh	r3, [r7, #4]
 8008fbe:	3303      	adds	r3, #3
 8008fc0:	f023 0303 	bic.w	r3, r3, #3
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d306      	bcc.n	8008fd6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008fc8:	8afa      	ldrh	r2, [r7, #22]
 8008fca:	88bb      	ldrh	r3, [r7, #4]
 8008fcc:	3303      	adds	r3, #3
 8008fce:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d201      	bcs.n	8008fda <pbuf_alloc+0x156>
        return NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e035      	b.n	8009046 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008fda:	8afb      	ldrh	r3, [r7, #22]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fa7d 	bl	80084dc <mem_malloc>
 8008fe2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <pbuf_alloc+0x16a>
        return NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e02b      	b.n	8009046 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ff0:	3310      	adds	r3, #16
 8008ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3303      	adds	r3, #3
 8008ff8:	f023 0303 	bic.w	r3, r3, #3
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	88b9      	ldrh	r1, [r7, #4]
 8009000:	88ba      	ldrh	r2, [r7, #4]
 8009002:	2300      	movs	r3, #0
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	887b      	ldrh	r3, [r7, #2]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	460b      	mov	r3, r1
 800900c:	4601      	mov	r1, r0
 800900e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009010:	f7ff ff0e 	bl	8008e30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <pbuf_alloc+0x1be>
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <pbuf_alloc+0x1cc>)
 8009022:	f240 1223 	movw	r2, #291	; 0x123
 8009026:	490e      	ldr	r1, [pc, #56]	; (8009060 <pbuf_alloc+0x1dc>)
 8009028:	480b      	ldr	r0, [pc, #44]	; (8009058 <pbuf_alloc+0x1d4>)
 800902a:	f009 fbf7 	bl	801281c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800902e:	e008      	b.n	8009042 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <pbuf_alloc+0x1cc>)
 8009032:	f240 1227 	movw	r2, #295	; 0x127
 8009036:	490b      	ldr	r1, [pc, #44]	; (8009064 <pbuf_alloc+0x1e0>)
 8009038:	4807      	ldr	r0, [pc, #28]	; (8009058 <pbuf_alloc+0x1d4>)
 800903a:	f009 fbef 	bl	801281c <iprintf>
      return NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	e001      	b.n	8009046 <pbuf_alloc+0x1c2>
      break;
 8009042:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009046:	4618      	mov	r0, r3
 8009048:	3728      	adds	r7, #40	; 0x28
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	08016358 	.word	0x08016358
 8009054:	08016388 	.word	0x08016388
 8009058:	080163b8 	.word	0x080163b8
 800905c:	080163e0 	.word	0x080163e0
 8009060:	08016414 	.word	0x08016414
 8009064:	08016440 	.word	0x08016440

08009068 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	807b      	strh	r3, [r7, #2]
 8009074:	4613      	mov	r3, r2
 8009076:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009078:	883b      	ldrh	r3, [r7, #0]
 800907a:	2b41      	cmp	r3, #65	; 0x41
 800907c:	d009      	beq.n	8009092 <pbuf_alloc_reference+0x2a>
 800907e:	883b      	ldrh	r3, [r7, #0]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d006      	beq.n	8009092 <pbuf_alloc_reference+0x2a>
 8009084:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <pbuf_alloc_reference+0x5c>)
 8009086:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800908a:	490f      	ldr	r1, [pc, #60]	; (80090c8 <pbuf_alloc_reference+0x60>)
 800908c:	480f      	ldr	r0, [pc, #60]	; (80090cc <pbuf_alloc_reference+0x64>)
 800908e:	f009 fbc5 	bl	801281c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009092:	2007      	movs	r0, #7
 8009094:	f7ff fb90 	bl	80087b8 <memp_malloc>
 8009098:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e00b      	b.n	80090bc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80090a4:	8879      	ldrh	r1, [r7, #2]
 80090a6:	887a      	ldrh	r2, [r7, #2]
 80090a8:	2300      	movs	r3, #0
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	883b      	ldrh	r3, [r7, #0]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	460b      	mov	r3, r1
 80090b2:	6879      	ldr	r1, [r7, #4]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff febb 	bl	8008e30 <pbuf_init_alloced_pbuf>
  return p;
 80090ba:	68fb      	ldr	r3, [r7, #12]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	08016358 	.word	0x08016358
 80090c8:	0801645c 	.word	0x0801645c
 80090cc:	080163b8 	.word	0x080163b8

080090d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
 80090dc:	460b      	mov	r3, r1
 80090de:	81bb      	strh	r3, [r7, #12]
 80090e0:	4613      	mov	r3, r2
 80090e2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80090e8:	8a7b      	ldrh	r3, [r7, #18]
 80090ea:	3303      	adds	r3, #3
 80090ec:	f023 0203 	bic.w	r2, r3, #3
 80090f0:	89bb      	ldrh	r3, [r7, #12]
 80090f2:	441a      	add	r2, r3
 80090f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d901      	bls.n	80090fe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e018      	b.n	8009130 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009104:	8a7b      	ldrh	r3, [r7, #18]
 8009106:	3303      	adds	r3, #3
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	6a3a      	ldr	r2, [r7, #32]
 800910e:	4413      	add	r3, r2
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	e001      	b.n	8009118 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	89b9      	ldrh	r1, [r7, #12]
 800911c:	89ba      	ldrh	r2, [r7, #12]
 800911e:	2302      	movs	r3, #2
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	897b      	ldrh	r3, [r7, #10]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	460b      	mov	r3, r1
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	f7ff fe81 	bl	8008e30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800912e:	687b      	ldr	r3, [r7, #4]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d106      	bne.n	8009158 <pbuf_realloc+0x20>
 800914a:	4b3a      	ldr	r3, [pc, #232]	; (8009234 <pbuf_realloc+0xfc>)
 800914c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009150:	4939      	ldr	r1, [pc, #228]	; (8009238 <pbuf_realloc+0x100>)
 8009152:	483a      	ldr	r0, [pc, #232]	; (800923c <pbuf_realloc+0x104>)
 8009154:	f009 fb62 	bl	801281c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	887a      	ldrh	r2, [r7, #2]
 800915e:	429a      	cmp	r2, r3
 8009160:	d264      	bcs.n	800922c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	891a      	ldrh	r2, [r3, #8]
 8009166:	887b      	ldrh	r3, [r7, #2]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800916c:	887b      	ldrh	r3, [r7, #2]
 800916e:	817b      	strh	r3, [r7, #10]
  q = p;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009174:	e018      	b.n	80091a8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	895b      	ldrh	r3, [r3, #10]
 800917a:	897a      	ldrh	r2, [r7, #10]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	891a      	ldrh	r2, [r3, #8]
 8009184:	893b      	ldrh	r3, [r7, #8]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <pbuf_realloc+0x70>
 800919a:	4b26      	ldr	r3, [pc, #152]	; (8009234 <pbuf_realloc+0xfc>)
 800919c:	f240 12af 	movw	r2, #431	; 0x1af
 80091a0:	4927      	ldr	r1, [pc, #156]	; (8009240 <pbuf_realloc+0x108>)
 80091a2:	4826      	ldr	r0, [pc, #152]	; (800923c <pbuf_realloc+0x104>)
 80091a4:	f009 fb3a 	bl	801281c <iprintf>
  while (rem_len > q->len) {
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	895b      	ldrh	r3, [r3, #10]
 80091ac:	897a      	ldrh	r2, [r7, #10]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d8e1      	bhi.n	8009176 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	7b1b      	ldrb	r3, [r3, #12]
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d122      	bne.n	8009204 <pbuf_realloc+0xcc>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	895b      	ldrh	r3, [r3, #10]
 80091c2:	897a      	ldrh	r2, [r7, #10]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d01d      	beq.n	8009204 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	7b5b      	ldrb	r3, [r3, #13]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d117      	bne.n	8009204 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	461a      	mov	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	b29a      	uxth	r2, r3
 80091e0:	897b      	ldrh	r3, [r7, #10]
 80091e2:	4413      	add	r3, r2
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	4619      	mov	r1, r3
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7ff f87b 	bl	80082e4 <mem_trim>
 80091ee:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d106      	bne.n	8009204 <pbuf_realloc+0xcc>
 80091f6:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <pbuf_realloc+0xfc>)
 80091f8:	f240 12bd 	movw	r2, #445	; 0x1bd
 80091fc:	4911      	ldr	r1, [pc, #68]	; (8009244 <pbuf_realloc+0x10c>)
 80091fe:	480f      	ldr	r0, [pc, #60]	; (800923c <pbuf_realloc+0x104>)
 8009200:	f009 fb0c 	bl	801281c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	897a      	ldrh	r2, [r7, #10]
 8009208:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	895a      	ldrh	r2, [r3, #10]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f910 	bl	8009444 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	e000      	b.n	800922e <pbuf_realloc+0xf6>
    return;
 800922c:	bf00      	nop

}
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	08016358 	.word	0x08016358
 8009238:	08016470 	.word	0x08016470
 800923c:	080163b8 	.word	0x080163b8
 8009240:	08016488 	.word	0x08016488
 8009244:	080164a0 	.word	0x080164a0

08009248 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <pbuf_add_header_impl+0x22>
 800925c:	4b2b      	ldr	r3, [pc, #172]	; (800930c <pbuf_add_header_impl+0xc4>)
 800925e:	f240 12df 	movw	r2, #479	; 0x1df
 8009262:	492b      	ldr	r1, [pc, #172]	; (8009310 <pbuf_add_header_impl+0xc8>)
 8009264:	482b      	ldr	r0, [pc, #172]	; (8009314 <pbuf_add_header_impl+0xcc>)
 8009266:	f009 fad9 	bl	801281c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <pbuf_add_header_impl+0x30>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009276:	d301      	bcc.n	800927c <pbuf_add_header_impl+0x34>
    return 1;
 8009278:	2301      	movs	r3, #1
 800927a:	e043      	b.n	8009304 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <pbuf_add_header_impl+0x3e>
    return 0;
 8009282:	2300      	movs	r3, #0
 8009284:	e03e      	b.n	8009304 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	891a      	ldrh	r2, [r3, #8]
 800928e:	8a7b      	ldrh	r3, [r7, #18]
 8009290:	4413      	add	r3, r2
 8009292:	b29b      	uxth	r3, r3
 8009294:	8a7a      	ldrh	r2, [r7, #18]
 8009296:	429a      	cmp	r2, r3
 8009298:	d901      	bls.n	800929e <pbuf_add_header_impl+0x56>
    return 1;
 800929a:	2301      	movs	r3, #1
 800929c:	e032      	b.n	8009304 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	7b1b      	ldrb	r3, [r3, #12]
 80092a2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80092a4:	8a3b      	ldrh	r3, [r7, #16]
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00c      	beq.n	80092c8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	425b      	negs	r3, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3310      	adds	r3, #16
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d20d      	bcs.n	80092e0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e01d      	b.n	8009304 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d006      	beq.n	80092dc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	425b      	negs	r3, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e001      	b.n	80092e0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80092dc:	2301      	movs	r3, #1
 80092de:	e011      	b.n	8009304 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	697a      	ldr	r2, [r7, #20]
 80092e4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	895a      	ldrh	r2, [r3, #10]
 80092ea:	8a7b      	ldrh	r3, [r7, #18]
 80092ec:	4413      	add	r3, r2
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	891a      	ldrh	r2, [r3, #8]
 80092f8:	8a7b      	ldrh	r3, [r7, #18]
 80092fa:	4413      	add	r3, r2
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	811a      	strh	r2, [r3, #8]


  return 0;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	08016358 	.word	0x08016358
 8009310:	080164bc 	.word	0x080164bc
 8009314:	080163b8 	.word	0x080163b8

08009318 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009322:	2200      	movs	r2, #0
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff ff8e 	bl	8009248 <pbuf_add_header_impl>
 800932c:	4603      	mov	r3, r0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <pbuf_remove_header+0x1e>
 8009348:	4b20      	ldr	r3, [pc, #128]	; (80093cc <pbuf_remove_header+0x94>)
 800934a:	f240 224b 	movw	r2, #587	; 0x24b
 800934e:	4920      	ldr	r1, [pc, #128]	; (80093d0 <pbuf_remove_header+0x98>)
 8009350:	4820      	ldr	r0, [pc, #128]	; (80093d4 <pbuf_remove_header+0x9c>)
 8009352:	f009 fa63 	bl	801281c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <pbuf_remove_header+0x2c>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009362:	d301      	bcc.n	8009368 <pbuf_remove_header+0x30>
    return 1;
 8009364:	2301      	movs	r3, #1
 8009366:	e02c      	b.n	80093c2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <pbuf_remove_header+0x3a>
    return 0;
 800936e:	2300      	movs	r3, #0
 8009370:	e027      	b.n	80093c2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	895b      	ldrh	r3, [r3, #10]
 800937a:	89fa      	ldrh	r2, [r7, #14]
 800937c:	429a      	cmp	r2, r3
 800937e:	d908      	bls.n	8009392 <pbuf_remove_header+0x5a>
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <pbuf_remove_header+0x94>)
 8009382:	f240 2255 	movw	r2, #597	; 0x255
 8009386:	4914      	ldr	r1, [pc, #80]	; (80093d8 <pbuf_remove_header+0xa0>)
 8009388:	4812      	ldr	r0, [pc, #72]	; (80093d4 <pbuf_remove_header+0x9c>)
 800938a:	f009 fa47 	bl	801281c <iprintf>
 800938e:	2301      	movs	r3, #1
 8009390:	e017      	b.n	80093c2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	441a      	add	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	895a      	ldrh	r2, [r3, #10]
 80093a8:	89fb      	ldrh	r3, [r7, #14]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	891a      	ldrh	r2, [r3, #8]
 80093b6:	89fb      	ldrh	r3, [r7, #14]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	08016358 	.word	0x08016358
 80093d0:	080164bc 	.word	0x080164bc
 80093d4:	080163b8 	.word	0x080163b8
 80093d8:	080164c8 	.word	0x080164c8

080093dc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	807b      	strh	r3, [r7, #2]
 80093e8:	4613      	mov	r3, r2
 80093ea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80093ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	da08      	bge.n	8009406 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80093f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80093f8:	425b      	negs	r3, r3
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff ff9b 	bl	8009338 <pbuf_remove_header>
 8009402:	4603      	mov	r3, r0
 8009404:	e007      	b.n	8009416 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800940a:	787a      	ldrb	r2, [r7, #1]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff ff1a 	bl	8009248 <pbuf_add_header_impl>
 8009414:	4603      	mov	r3, r0
  }
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800942a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800942e:	2201      	movs	r2, #1
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff ffd2 	bl	80093dc <pbuf_header_impl>
 8009438:	4603      	mov	r3, r0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d106      	bne.n	8009466 <pbuf_free+0x22>
 8009458:	4b38      	ldr	r3, [pc, #224]	; (800953c <pbuf_free+0xf8>)
 800945a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800945e:	4938      	ldr	r1, [pc, #224]	; (8009540 <pbuf_free+0xfc>)
 8009460:	4838      	ldr	r0, [pc, #224]	; (8009544 <pbuf_free+0x100>)
 8009462:	f009 f9db 	bl	801281c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009466:	2300      	movs	r3, #0
 8009468:	e063      	b.n	8009532 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800946e:	e05c      	b.n	800952a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	7b9b      	ldrb	r3, [r3, #14]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <pbuf_free+0x42>
 8009478:	4b30      	ldr	r3, [pc, #192]	; (800953c <pbuf_free+0xf8>)
 800947a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800947e:	4932      	ldr	r1, [pc, #200]	; (8009548 <pbuf_free+0x104>)
 8009480:	4830      	ldr	r0, [pc, #192]	; (8009544 <pbuf_free+0x100>)
 8009482:	f009 f9cb 	bl	801281c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	7b9b      	ldrb	r3, [r3, #14]
 800948a:	3b01      	subs	r3, #1
 800948c:	b2da      	uxtb	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	739a      	strb	r2, [r3, #14]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7b9b      	ldrb	r3, [r3, #14]
 8009496:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009498:	7dbb      	ldrb	r3, [r7, #22]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d143      	bne.n	8009526 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7b1b      	ldrb	r3, [r3, #12]
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7b5b      	ldrb	r3, [r3, #13]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <pbuf_free+0x90>
 80094c6:	4b1d      	ldr	r3, [pc, #116]	; (800953c <pbuf_free+0xf8>)
 80094c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80094cc:	491f      	ldr	r1, [pc, #124]	; (800954c <pbuf_free+0x108>)
 80094ce:	481d      	ldr	r0, [pc, #116]	; (8009544 <pbuf_free+0x100>)
 80094d0:	f009 f9a4 	bl	801281c <iprintf>
        pc->custom_free_function(p);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
 80094dc:	e01d      	b.n	800951a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d104      	bne.n	80094ee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	2008      	movs	r0, #8
 80094e8:	f7ff f9b2 	bl	8008850 <memp_free>
 80094ec:	e015      	b.n	800951a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d104      	bne.n	80094fe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	2007      	movs	r0, #7
 80094f8:	f7ff f9aa 	bl	8008850 <memp_free>
 80094fc:	e00d      	b.n	800951a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <pbuf_free+0xc8>
          mem_free(p);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7fe fe83 	bl	8008210 <mem_free>
 800950a:	e006      	b.n	800951a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800950c:	4b0b      	ldr	r3, [pc, #44]	; (800953c <pbuf_free+0xf8>)
 800950e:	f240 320f 	movw	r2, #783	; 0x30f
 8009512:	490f      	ldr	r1, [pc, #60]	; (8009550 <pbuf_free+0x10c>)
 8009514:	480b      	ldr	r0, [pc, #44]	; (8009544 <pbuf_free+0x100>)
 8009516:	f009 f981 	bl	801281c <iprintf>
        }
      }
      count++;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	3301      	adds	r3, #1
 800951e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	e001      	b.n	800952a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d19f      	bne.n	8009470 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	08016358 	.word	0x08016358
 8009540:	080164bc 	.word	0x080164bc
 8009544:	080163b8 	.word	0x080163b8
 8009548:	080164e8 	.word	0x080164e8
 800954c:	08016500 	.word	0x08016500
 8009550:	08016524 	.word	0x08016524

08009554 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800955c:	2300      	movs	r3, #0
 800955e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009560:	e005      	b.n	800956e <pbuf_clen+0x1a>
    ++len;
 8009562:	89fb      	ldrh	r3, [r7, #14]
 8009564:	3301      	adds	r3, #1
 8009566:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1f6      	bne.n	8009562 <pbuf_clen+0xe>
  }
  return len;
 8009574:	89fb      	ldrh	r3, [r7, #14]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
	...

08009584 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d010      	beq.n	80095b4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	7b9b      	ldrb	r3, [r3, #14]
 8009596:	3301      	adds	r3, #1
 8009598:	b2da      	uxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7b9b      	ldrb	r3, [r3, #14]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <pbuf_ref+0x30>
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <pbuf_ref+0x38>)
 80095a8:	f240 3242 	movw	r2, #834	; 0x342
 80095ac:	4904      	ldr	r1, [pc, #16]	; (80095c0 <pbuf_ref+0x3c>)
 80095ae:	4805      	ldr	r0, [pc, #20]	; (80095c4 <pbuf_ref+0x40>)
 80095b0:	f009 f934 	bl	801281c <iprintf>
  }
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	08016358 	.word	0x08016358
 80095c0:	08016538 	.word	0x08016538
 80095c4:	080163b8 	.word	0x080163b8

080095c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <pbuf_cat+0x16>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d107      	bne.n	80095ee <pbuf_cat+0x26>
 80095de:	4b20      	ldr	r3, [pc, #128]	; (8009660 <pbuf_cat+0x98>)
 80095e0:	f240 325a 	movw	r2, #858	; 0x35a
 80095e4:	491f      	ldr	r1, [pc, #124]	; (8009664 <pbuf_cat+0x9c>)
 80095e6:	4820      	ldr	r0, [pc, #128]	; (8009668 <pbuf_cat+0xa0>)
 80095e8:	f009 f918 	bl	801281c <iprintf>
 80095ec:	e034      	b.n	8009658 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60fb      	str	r3, [r7, #12]
 80095f2:	e00a      	b.n	800960a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	891a      	ldrh	r2, [r3, #8]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	891b      	ldrh	r3, [r3, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1f0      	bne.n	80095f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	891a      	ldrh	r2, [r3, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	895b      	ldrh	r3, [r3, #10]
 800961a:	429a      	cmp	r2, r3
 800961c:	d006      	beq.n	800962c <pbuf_cat+0x64>
 800961e:	4b10      	ldr	r3, [pc, #64]	; (8009660 <pbuf_cat+0x98>)
 8009620:	f240 3262 	movw	r2, #866	; 0x362
 8009624:	4911      	ldr	r1, [pc, #68]	; (800966c <pbuf_cat+0xa4>)
 8009626:	4810      	ldr	r0, [pc, #64]	; (8009668 <pbuf_cat+0xa0>)
 8009628:	f009 f8f8 	bl	801281c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d006      	beq.n	8009642 <pbuf_cat+0x7a>
 8009634:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <pbuf_cat+0x98>)
 8009636:	f240 3263 	movw	r2, #867	; 0x363
 800963a:	490d      	ldr	r1, [pc, #52]	; (8009670 <pbuf_cat+0xa8>)
 800963c:	480a      	ldr	r0, [pc, #40]	; (8009668 <pbuf_cat+0xa0>)
 800963e:	f009 f8ed 	bl	801281c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	891a      	ldrh	r2, [r3, #8]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	4413      	add	r3, r2
 800964c:	b29a      	uxth	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	08016358 	.word	0x08016358
 8009664:	0801654c 	.word	0x0801654c
 8009668:	080163b8 	.word	0x080163b8
 800966c:	08016584 	.word	0x08016584
 8009670:	080165b4 	.word	0x080165b4

08009674 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ffa1 	bl	80095c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009686:	6838      	ldr	r0, [r7, #0]
 8009688:	f7ff ff7c 	bl	8009584 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800969e:	2300      	movs	r3, #0
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	2300      	movs	r3, #0
 80096a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d008      	beq.n	80096be <pbuf_copy+0x2a>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <pbuf_copy+0x2a>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	891a      	ldrh	r2, [r3, #8]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	891b      	ldrh	r3, [r3, #8]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d209      	bcs.n	80096d2 <pbuf_copy+0x3e>
 80096be:	4b57      	ldr	r3, [pc, #348]	; (800981c <pbuf_copy+0x188>)
 80096c0:	f240 32ca 	movw	r2, #970	; 0x3ca
 80096c4:	4956      	ldr	r1, [pc, #344]	; (8009820 <pbuf_copy+0x18c>)
 80096c6:	4857      	ldr	r0, [pc, #348]	; (8009824 <pbuf_copy+0x190>)
 80096c8:	f009 f8a8 	bl	801281c <iprintf>
 80096cc:	f06f 030f 	mvn.w	r3, #15
 80096d0:	e09f      	b.n	8009812 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	895b      	ldrh	r3, [r3, #10]
 80096d6:	461a      	mov	r2, r3
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	1ad2      	subs	r2, r2, r3
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	895b      	ldrh	r3, [r3, #10]
 80096e0:	4619      	mov	r1, r3
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	1acb      	subs	r3, r1, r3
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d306      	bcc.n	80096f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	895b      	ldrh	r3, [r3, #10]
 80096ee:	461a      	mov	r2, r3
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	e005      	b.n	8009704 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	895b      	ldrh	r3, [r3, #10]
 80096fc:	461a      	mov	r2, r3
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	18d0      	adds	r0, r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4619      	mov	r1, r3
 8009718:	f008 ffab 	bl	8012672 <memcpy>
    offset_to += len;
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4413      	add	r3, r2
 800972a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	895b      	ldrh	r3, [r3, #10]
 8009730:	461a      	mov	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4293      	cmp	r3, r2
 8009736:	d906      	bls.n	8009746 <pbuf_copy+0xb2>
 8009738:	4b38      	ldr	r3, [pc, #224]	; (800981c <pbuf_copy+0x188>)
 800973a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800973e:	493a      	ldr	r1, [pc, #232]	; (8009828 <pbuf_copy+0x194>)
 8009740:	4838      	ldr	r0, [pc, #224]	; (8009824 <pbuf_copy+0x190>)
 8009742:	f009 f86b 	bl	801281c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	895b      	ldrh	r3, [r3, #10]
 800974a:	461a      	mov	r2, r3
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4293      	cmp	r3, r2
 8009750:	d906      	bls.n	8009760 <pbuf_copy+0xcc>
 8009752:	4b32      	ldr	r3, [pc, #200]	; (800981c <pbuf_copy+0x188>)
 8009754:	f240 32da 	movw	r2, #986	; 0x3da
 8009758:	4934      	ldr	r1, [pc, #208]	; (800982c <pbuf_copy+0x198>)
 800975a:	4832      	ldr	r0, [pc, #200]	; (8009824 <pbuf_copy+0x190>)
 800975c:	f009 f85e 	bl	801281c <iprintf>
    if (offset_from >= p_from->len) {
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	895b      	ldrh	r3, [r3, #10]
 8009764:	461a      	mov	r2, r3
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	4293      	cmp	r3, r2
 800976a:	d304      	bcc.n	8009776 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	895b      	ldrh	r3, [r3, #10]
 800977a:	461a      	mov	r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	4293      	cmp	r3, r2
 8009780:	d114      	bne.n	80097ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10c      	bne.n	80097ac <pbuf_copy+0x118>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <pbuf_copy+0x118>
 8009798:	4b20      	ldr	r3, [pc, #128]	; (800981c <pbuf_copy+0x188>)
 800979a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800979e:	4924      	ldr	r1, [pc, #144]	; (8009830 <pbuf_copy+0x19c>)
 80097a0:	4820      	ldr	r0, [pc, #128]	; (8009824 <pbuf_copy+0x190>)
 80097a2:	f009 f83b 	bl	801281c <iprintf>
 80097a6:	f06f 030f 	mvn.w	r3, #15
 80097aa:	e032      	b.n	8009812 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d013      	beq.n	80097da <pbuf_copy+0x146>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	895a      	ldrh	r2, [r3, #10]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	891b      	ldrh	r3, [r3, #8]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d10d      	bne.n	80097da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <pbuf_copy+0x146>
 80097c6:	4b15      	ldr	r3, [pc, #84]	; (800981c <pbuf_copy+0x188>)
 80097c8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80097cc:	4919      	ldr	r1, [pc, #100]	; (8009834 <pbuf_copy+0x1a0>)
 80097ce:	4815      	ldr	r0, [pc, #84]	; (8009824 <pbuf_copy+0x190>)
 80097d0:	f009 f824 	bl	801281c <iprintf>
 80097d4:	f06f 0305 	mvn.w	r3, #5
 80097d8:	e01b      	b.n	8009812 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d013      	beq.n	8009808 <pbuf_copy+0x174>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	895a      	ldrh	r2, [r3, #10]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	891b      	ldrh	r3, [r3, #8]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d10d      	bne.n	8009808 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d009      	beq.n	8009808 <pbuf_copy+0x174>
 80097f4:	4b09      	ldr	r3, [pc, #36]	; (800981c <pbuf_copy+0x188>)
 80097f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80097fa:	490e      	ldr	r1, [pc, #56]	; (8009834 <pbuf_copy+0x1a0>)
 80097fc:	4809      	ldr	r0, [pc, #36]	; (8009824 <pbuf_copy+0x190>)
 80097fe:	f009 f80d 	bl	801281c <iprintf>
 8009802:	f06f 0305 	mvn.w	r3, #5
 8009806:	e004      	b.n	8009812 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f47f af61 	bne.w	80096d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	08016358 	.word	0x08016358
 8009820:	08016600 	.word	0x08016600
 8009824:	080163b8 	.word	0x080163b8
 8009828:	08016630 	.word	0x08016630
 800982c:	08016648 	.word	0x08016648
 8009830:	08016664 	.word	0x08016664
 8009834:	08016674 	.word	0x08016674

08009838 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	4611      	mov	r1, r2
 8009844:	461a      	mov	r2, r3
 8009846:	460b      	mov	r3, r1
 8009848:	80fb      	strh	r3, [r7, #6]
 800984a:	4613      	mov	r3, r2
 800984c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d108      	bne.n	800986e <pbuf_copy_partial+0x36>
 800985c:	4b2b      	ldr	r3, [pc, #172]	; (800990c <pbuf_copy_partial+0xd4>)
 800985e:	f240 420a 	movw	r2, #1034	; 0x40a
 8009862:	492b      	ldr	r1, [pc, #172]	; (8009910 <pbuf_copy_partial+0xd8>)
 8009864:	482b      	ldr	r0, [pc, #172]	; (8009914 <pbuf_copy_partial+0xdc>)
 8009866:	f008 ffd9 	bl	801281c <iprintf>
 800986a:	2300      	movs	r3, #0
 800986c:	e04a      	b.n	8009904 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d108      	bne.n	8009886 <pbuf_copy_partial+0x4e>
 8009874:	4b25      	ldr	r3, [pc, #148]	; (800990c <pbuf_copy_partial+0xd4>)
 8009876:	f240 420b 	movw	r2, #1035	; 0x40b
 800987a:	4927      	ldr	r1, [pc, #156]	; (8009918 <pbuf_copy_partial+0xe0>)
 800987c:	4825      	ldr	r0, [pc, #148]	; (8009914 <pbuf_copy_partial+0xdc>)
 800987e:	f008 ffcd 	bl	801281c <iprintf>
 8009882:	2300      	movs	r3, #0
 8009884:	e03e      	b.n	8009904 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	e034      	b.n	80098f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800988c:	88bb      	ldrh	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <pbuf_copy_partial+0x70>
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	895b      	ldrh	r3, [r3, #10]
 8009896:	88ba      	ldrh	r2, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d305      	bcc.n	80098a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	895b      	ldrh	r3, [r3, #10]
 80098a0:	88ba      	ldrh	r2, [r7, #4]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	80bb      	strh	r3, [r7, #4]
 80098a6:	e023      	b.n	80098f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	895a      	ldrh	r2, [r3, #10]
 80098ac:	88bb      	ldrh	r3, [r7, #4]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80098b2:	8b3a      	ldrh	r2, [r7, #24]
 80098b4:	88fb      	ldrh	r3, [r7, #6]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d901      	bls.n	80098be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80098be:	8b7b      	ldrh	r3, [r7, #26]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	18d0      	adds	r0, r2, r3
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	88bb      	ldrh	r3, [r7, #4]
 80098ca:	4413      	add	r3, r2
 80098cc:	8b3a      	ldrh	r2, [r7, #24]
 80098ce:	4619      	mov	r1, r3
 80098d0:	f008 fecf 	bl	8012672 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80098d4:	8afa      	ldrh	r2, [r7, #22]
 80098d6:	8b3b      	ldrh	r3, [r7, #24]
 80098d8:	4413      	add	r3, r2
 80098da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80098dc:	8b7a      	ldrh	r2, [r7, #26]
 80098de:	8b3b      	ldrh	r3, [r7, #24]
 80098e0:	4413      	add	r3, r2
 80098e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80098e4:	88fa      	ldrh	r2, [r7, #6]
 80098e6:	8b3b      	ldrh	r3, [r7, #24]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	61fb      	str	r3, [r7, #28]
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <pbuf_copy_partial+0xca>
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1c4      	bne.n	800988c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009902:	8afb      	ldrh	r3, [r7, #22]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	08016358 	.word	0x08016358
 8009910:	080166a0 	.word	0x080166a0
 8009914:	080163b8 	.word	0x080163b8
 8009918:	080166c0 	.word	0x080166c0

0800991c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	603a      	str	r2, [r7, #0]
 8009926:	71fb      	strb	r3, [r7, #7]
 8009928:	460b      	mov	r3, r1
 800992a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	8919      	ldrh	r1, [r3, #8]
 8009930:	88ba      	ldrh	r2, [r7, #4]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff faa5 	bl	8008e84 <pbuf_alloc>
 800993a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <pbuf_clone+0x2a>
    return NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	e011      	b.n	800996a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f7ff fea3 	bl	8009694 <pbuf_copy>
 800994e:	4603      	mov	r3, r0
 8009950:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009952:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d006      	beq.n	8009968 <pbuf_clone+0x4c>
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <pbuf_clone+0x58>)
 800995c:	f240 5224 	movw	r2, #1316	; 0x524
 8009960:	4905      	ldr	r1, [pc, #20]	; (8009978 <pbuf_clone+0x5c>)
 8009962:	4806      	ldr	r0, [pc, #24]	; (800997c <pbuf_clone+0x60>)
 8009964:	f008 ff5a 	bl	801281c <iprintf>
  return q;
 8009968:	68fb      	ldr	r3, [r7, #12]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	08016358 	.word	0x08016358
 8009978:	080167cc 	.word	0x080167cc
 800997c:	080163b8 	.word	0x080163b8

08009980 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009984:	f008 ff62 	bl	801284c <rand>
 8009988:	4603      	mov	r3, r0
 800998a:	b29b      	uxth	r3, r3
 800998c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009990:	b29b      	uxth	r3, r3
 8009992:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009996:	b29a      	uxth	r2, r3
 8009998:	4b01      	ldr	r3, [pc, #4]	; (80099a0 <tcp_init+0x20>)
 800999a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800999c:	bf00      	nop
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20000016 	.word	0x20000016

080099a4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7d1b      	ldrb	r3, [r3, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d105      	bne.n	80099c0 <tcp_free+0x1c>
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <tcp_free+0x2c>)
 80099b6:	22d4      	movs	r2, #212	; 0xd4
 80099b8:	4906      	ldr	r1, [pc, #24]	; (80099d4 <tcp_free+0x30>)
 80099ba:	4807      	ldr	r0, [pc, #28]	; (80099d8 <tcp_free+0x34>)
 80099bc:	f008 ff2e 	bl	801281c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	2001      	movs	r0, #1
 80099c4:	f7fe ff44 	bl	8008850 <memp_free>
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	08016858 	.word	0x08016858
 80099d4:	08016888 	.word	0x08016888
 80099d8:	0801689c 	.word	0x0801689c

080099dc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7d1b      	ldrb	r3, [r3, #20]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d105      	bne.n	80099f8 <tcp_free_listen+0x1c>
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <tcp_free_listen+0x2c>)
 80099ee:	22df      	movs	r2, #223	; 0xdf
 80099f0:	4906      	ldr	r1, [pc, #24]	; (8009a0c <tcp_free_listen+0x30>)
 80099f2:	4807      	ldr	r0, [pc, #28]	; (8009a10 <tcp_free_listen+0x34>)
 80099f4:	f008 ff12 	bl	801281c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	2002      	movs	r0, #2
 80099fc:	f7fe ff28 	bl	8008850 <memp_free>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	08016858 	.word	0x08016858
 8009a0c:	080168c4 	.word	0x080168c4
 8009a10:	0801689c 	.word	0x0801689c

08009a14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009a18:	f001 f852 	bl	800aac0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009a1c:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <tcp_tmr+0x28>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	3301      	adds	r3, #1
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <tcp_tmr+0x28>)
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <tcp_tmr+0x28>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009a34:	f000 fd06 	bl	800a444 <tcp_slowtmr>
  }
}
 8009a38:	bf00      	nop
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	2000024d 	.word	0x2000024d

08009a40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d105      	bne.n	8009a5c <tcp_remove_listener+0x1c>
 8009a50:	4b0d      	ldr	r3, [pc, #52]	; (8009a88 <tcp_remove_listener+0x48>)
 8009a52:	22ff      	movs	r2, #255	; 0xff
 8009a54:	490d      	ldr	r1, [pc, #52]	; (8009a8c <tcp_remove_listener+0x4c>)
 8009a56:	480e      	ldr	r0, [pc, #56]	; (8009a90 <tcp_remove_listener+0x50>)
 8009a58:	f008 fee0 	bl	801281c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	e00a      	b.n	8009a78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d102      	bne.n	8009a72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	60fb      	str	r3, [r7, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1f1      	bne.n	8009a62 <tcp_remove_listener+0x22>
    }
  }
}
 8009a7e:	bf00      	nop
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	08016858 	.word	0x08016858
 8009a8c:	080168e0 	.word	0x080168e0
 8009a90:	0801689c 	.word	0x0801689c

08009a94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <tcp_listen_closed+0x1c>
 8009aa2:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <tcp_listen_closed+0x60>)
 8009aa4:	f240 1211 	movw	r2, #273	; 0x111
 8009aa8:	4913      	ldr	r1, [pc, #76]	; (8009af8 <tcp_listen_closed+0x64>)
 8009aaa:	4814      	ldr	r0, [pc, #80]	; (8009afc <tcp_listen_closed+0x68>)
 8009aac:	f008 feb6 	bl	801281c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	7d1b      	ldrb	r3, [r3, #20]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d006      	beq.n	8009ac6 <tcp_listen_closed+0x32>
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	; (8009af4 <tcp_listen_closed+0x60>)
 8009aba:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009abe:	4910      	ldr	r1, [pc, #64]	; (8009b00 <tcp_listen_closed+0x6c>)
 8009ac0:	480e      	ldr	r0, [pc, #56]	; (8009afc <tcp_listen_closed+0x68>)
 8009ac2:	f008 feab 	bl	801281c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	e00b      	b.n	8009ae4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009acc:	4a0d      	ldr	r2, [pc, #52]	; (8009b04 <tcp_listen_closed+0x70>)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff ffb1 	bl	8009a40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d9f0      	bls.n	8009acc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	08016858 	.word	0x08016858
 8009af8:	08016908 	.word	0x08016908
 8009afc:	0801689c 	.word	0x0801689c
 8009b00:	08016914 	.word	0x08016914
 8009b04:	08018844 	.word	0x08018844

08009b08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009b08:	b5b0      	push	{r4, r5, r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <tcp_close_shutdown+0x20>
 8009b1a:	4b61      	ldr	r3, [pc, #388]	; (8009ca0 <tcp_close_shutdown+0x198>)
 8009b1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009b20:	4960      	ldr	r1, [pc, #384]	; (8009ca4 <tcp_close_shutdown+0x19c>)
 8009b22:	4861      	ldr	r0, [pc, #388]	; (8009ca8 <tcp_close_shutdown+0x1a0>)
 8009b24:	f008 fe7a 	bl	801281c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d066      	beq.n	8009bfc <tcp_close_shutdown+0xf4>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	7d1b      	ldrb	r3, [r3, #20]
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	d003      	beq.n	8009b3e <tcp_close_shutdown+0x36>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7d1b      	ldrb	r3, [r3, #20]
 8009b3a:	2b07      	cmp	r3, #7
 8009b3c:	d15e      	bne.n	8009bfc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <tcp_close_shutdown+0x48>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009b4e:	d055      	beq.n	8009bfc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8b5b      	ldrh	r3, [r3, #26]
 8009b54:	f003 0310 	and.w	r3, r3, #16
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d106      	bne.n	8009b6a <tcp_close_shutdown+0x62>
 8009b5c:	4b50      	ldr	r3, [pc, #320]	; (8009ca0 <tcp_close_shutdown+0x198>)
 8009b5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009b62:	4952      	ldr	r1, [pc, #328]	; (8009cac <tcp_close_shutdown+0x1a4>)
 8009b64:	4850      	ldr	r0, [pc, #320]	; (8009ca8 <tcp_close_shutdown+0x1a0>)
 8009b66:	f008 fe59 	bl	801281c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009b72:	687d      	ldr	r5, [r7, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3304      	adds	r3, #4
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	8ad2      	ldrh	r2, [r2, #22]
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	8b09      	ldrh	r1, [r1, #24]
 8009b80:	9102      	str	r1, [sp, #8]
 8009b82:	9201      	str	r2, [sp, #4]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	462b      	mov	r3, r5
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f005 fd8b 	bl	800f6a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fb5a 	bl	800b24c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009b98:	4b45      	ldr	r3, [pc, #276]	; (8009cb0 <tcp_close_shutdown+0x1a8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d105      	bne.n	8009bae <tcp_close_shutdown+0xa6>
 8009ba2:	4b43      	ldr	r3, [pc, #268]	; (8009cb0 <tcp_close_shutdown+0x1a8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	4a41      	ldr	r2, [pc, #260]	; (8009cb0 <tcp_close_shutdown+0x1a8>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	e013      	b.n	8009bd6 <tcp_close_shutdown+0xce>
 8009bae:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <tcp_close_shutdown+0x1a8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e00c      	b.n	8009bd0 <tcp_close_shutdown+0xc8>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d104      	bne.n	8009bca <tcp_close_shutdown+0xc2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68da      	ldr	r2, [r3, #12]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	60da      	str	r2, [r3, #12]
 8009bc8:	e005      	b.n	8009bd6 <tcp_close_shutdown+0xce>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1ef      	bne.n	8009bb6 <tcp_close_shutdown+0xae>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	60da      	str	r2, [r3, #12]
 8009bdc:	4b35      	ldr	r3, [pc, #212]	; (8009cb4 <tcp_close_shutdown+0x1ac>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009be2:	4b35      	ldr	r3, [pc, #212]	; (8009cb8 <tcp_close_shutdown+0x1b0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d102      	bne.n	8009bf2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009bec:	f003 ffec 	bl	800dbc8 <tcp_trigger_input_pcb_close>
 8009bf0:	e002      	b.n	8009bf8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff fed6 	bl	80099a4 <tcp_free>
      }
      return ERR_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	e04d      	b.n	8009c98 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	7d1b      	ldrb	r3, [r3, #20]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d02d      	beq.n	8009c60 <tcp_close_shutdown+0x158>
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d036      	beq.n	8009c76 <tcp_close_shutdown+0x16e>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d13f      	bne.n	8009c8c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8adb      	ldrh	r3, [r3, #22]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d021      	beq.n	8009c58 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c14:	4b29      	ldr	r3, [pc, #164]	; (8009cbc <tcp_close_shutdown+0x1b4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d105      	bne.n	8009c2a <tcp_close_shutdown+0x122>
 8009c1e:	4b27      	ldr	r3, [pc, #156]	; (8009cbc <tcp_close_shutdown+0x1b4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	4a25      	ldr	r2, [pc, #148]	; (8009cbc <tcp_close_shutdown+0x1b4>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e013      	b.n	8009c52 <tcp_close_shutdown+0x14a>
 8009c2a:	4b24      	ldr	r3, [pc, #144]	; (8009cbc <tcp_close_shutdown+0x1b4>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	e00c      	b.n	8009c4c <tcp_close_shutdown+0x144>
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d104      	bne.n	8009c46 <tcp_close_shutdown+0x13e>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68da      	ldr	r2, [r3, #12]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	60da      	str	r2, [r3, #12]
 8009c44:	e005      	b.n	8009c52 <tcp_close_shutdown+0x14a>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	60bb      	str	r3, [r7, #8]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1ef      	bne.n	8009c32 <tcp_close_shutdown+0x12a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff fea3 	bl	80099a4 <tcp_free>
      break;
 8009c5e:	e01a      	b.n	8009c96 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff ff17 	bl	8009a94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	4815      	ldr	r0, [pc, #84]	; (8009cc0 <tcp_close_shutdown+0x1b8>)
 8009c6a:	f001 fb3f 	bl	800b2ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff feb4 	bl	80099dc <tcp_free_listen>
      break;
 8009c74:	e00f      	b.n	8009c96 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <tcp_close_shutdown+0x1a8>)
 8009c7a:	f001 fb37 	bl	800b2ec <tcp_pcb_remove>
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <tcp_close_shutdown+0x1ac>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fe8d 	bl	80099a4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009c8a:	e004      	b.n	8009c96 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f819 	bl	8009cc4 <tcp_close_shutdown_fin>
 8009c92:	4603      	mov	r3, r0
 8009c94:	e000      	b.n	8009c98 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009ca0:	08016858 	.word	0x08016858
 8009ca4:	0801692c 	.word	0x0801692c
 8009ca8:	0801689c 	.word	0x0801689c
 8009cac:	0801694c 	.word	0x0801694c
 8009cb0:	20007078 	.word	0x20007078
 8009cb4:	20007074 	.word	0x20007074
 8009cb8:	2000708c 	.word	0x2000708c
 8009cbc:	20007084 	.word	0x20007084
 8009cc0:	20007080 	.word	0x20007080

08009cc4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d106      	bne.n	8009ce0 <tcp_close_shutdown_fin+0x1c>
 8009cd2:	4b2c      	ldr	r3, [pc, #176]	; (8009d84 <tcp_close_shutdown_fin+0xc0>)
 8009cd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009cd8:	492b      	ldr	r1, [pc, #172]	; (8009d88 <tcp_close_shutdown_fin+0xc4>)
 8009cda:	482c      	ldr	r0, [pc, #176]	; (8009d8c <tcp_close_shutdown_fin+0xc8>)
 8009cdc:	f008 fd9e 	bl	801281c <iprintf>

  switch (pcb->state) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7d1b      	ldrb	r3, [r3, #20]
 8009ce4:	2b04      	cmp	r3, #4
 8009ce6:	d010      	beq.n	8009d0a <tcp_close_shutdown_fin+0x46>
 8009ce8:	2b07      	cmp	r3, #7
 8009cea:	d01b      	beq.n	8009d24 <tcp_close_shutdown_fin+0x60>
 8009cec:	2b03      	cmp	r3, #3
 8009cee:	d126      	bne.n	8009d3e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f004 fdd5 	bl	800e8a0 <tcp_send_fin>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d11f      	bne.n	8009d42 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2205      	movs	r2, #5
 8009d06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009d08:	e01b      	b.n	8009d42 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f004 fdc8 	bl	800e8a0 <tcp_send_fin>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d114      	bne.n	8009d46 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2205      	movs	r2, #5
 8009d20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009d22:	e010      	b.n	8009d46 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f004 fdbb 	bl	800e8a0 <tcp_send_fin>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d109      	bne.n	8009d4a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2209      	movs	r2, #9
 8009d3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009d3c:	e005      	b.n	8009d4a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e01c      	b.n	8009d7c <tcp_close_shutdown_fin+0xb8>
      break;
 8009d42:	bf00      	nop
 8009d44:	e002      	b.n	8009d4c <tcp_close_shutdown_fin+0x88>
      break;
 8009d46:	bf00      	nop
 8009d48:	e000      	b.n	8009d4c <tcp_close_shutdown_fin+0x88>
      break;
 8009d4a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d103      	bne.n	8009d5c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f004 fee1 	bl	800eb1c <tcp_output>
 8009d5a:	e00d      	b.n	8009d78 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d64:	d108      	bne.n	8009d78 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	8b5b      	ldrh	r3, [r3, #26]
 8009d6a:	f043 0308 	orr.w	r3, r3, #8
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	e001      	b.n	8009d7c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	08016858 	.word	0x08016858
 8009d88:	08016908 	.word	0x08016908
 8009d8c:	0801689c 	.word	0x0801689c

08009d90 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d109      	bne.n	8009db2 <tcp_close+0x22>
 8009d9e:	4b0f      	ldr	r3, [pc, #60]	; (8009ddc <tcp_close+0x4c>)
 8009da0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009da4:	490e      	ldr	r1, [pc, #56]	; (8009de0 <tcp_close+0x50>)
 8009da6:	480f      	ldr	r0, [pc, #60]	; (8009de4 <tcp_close+0x54>)
 8009da8:	f008 fd38 	bl	801281c <iprintf>
 8009dac:	f06f 030f 	mvn.w	r3, #15
 8009db0:	e00f      	b.n	8009dd2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7d1b      	ldrb	r3, [r3, #20]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d006      	beq.n	8009dc8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	8b5b      	ldrh	r3, [r3, #26]
 8009dbe:	f043 0310 	orr.w	r3, r3, #16
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009dc8:	2101      	movs	r1, #1
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7ff fe9c 	bl	8009b08 <tcp_close_shutdown>
 8009dd0:	4603      	mov	r3, r0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	08016858 	.word	0x08016858
 8009de0:	08016968 	.word	0x08016968
 8009de4:	0801689c 	.word	0x0801689c

08009de8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08e      	sub	sp, #56	; 0x38
 8009dec:	af04      	add	r7, sp, #16
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d107      	bne.n	8009e08 <tcp_abandon+0x20>
 8009df8:	4b52      	ldr	r3, [pc, #328]	; (8009f44 <tcp_abandon+0x15c>)
 8009dfa:	f240 223d 	movw	r2, #573	; 0x23d
 8009dfe:	4952      	ldr	r1, [pc, #328]	; (8009f48 <tcp_abandon+0x160>)
 8009e00:	4852      	ldr	r0, [pc, #328]	; (8009f4c <tcp_abandon+0x164>)
 8009e02:	f008 fd0b 	bl	801281c <iprintf>
 8009e06:	e099      	b.n	8009f3c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7d1b      	ldrb	r3, [r3, #20]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d106      	bne.n	8009e1e <tcp_abandon+0x36>
 8009e10:	4b4c      	ldr	r3, [pc, #304]	; (8009f44 <tcp_abandon+0x15c>)
 8009e12:	f240 2241 	movw	r2, #577	; 0x241
 8009e16:	494e      	ldr	r1, [pc, #312]	; (8009f50 <tcp_abandon+0x168>)
 8009e18:	484c      	ldr	r0, [pc, #304]	; (8009f4c <tcp_abandon+0x164>)
 8009e1a:	f008 fcff 	bl	801281c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7d1b      	ldrb	r3, [r3, #20]
 8009e22:	2b0a      	cmp	r3, #10
 8009e24:	d107      	bne.n	8009e36 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	484a      	ldr	r0, [pc, #296]	; (8009f54 <tcp_abandon+0x16c>)
 8009e2a:	f001 fa5f 	bl	800b2ec <tcp_pcb_remove>
    tcp_free(pcb);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff fdb8 	bl	80099a4 <tcp_free>
 8009e34:	e082      	b.n	8009f3c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e42:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e50:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7d1b      	ldrb	r3, [r3, #20]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d126      	bne.n	8009eae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	8adb      	ldrh	r3, [r3, #22]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d02e      	beq.n	8009ec6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009e68:	4b3b      	ldr	r3, [pc, #236]	; (8009f58 <tcp_abandon+0x170>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d105      	bne.n	8009e7e <tcp_abandon+0x96>
 8009e72:	4b39      	ldr	r3, [pc, #228]	; (8009f58 <tcp_abandon+0x170>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	4a37      	ldr	r2, [pc, #220]	; (8009f58 <tcp_abandon+0x170>)
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	e013      	b.n	8009ea6 <tcp_abandon+0xbe>
 8009e7e:	4b36      	ldr	r3, [pc, #216]	; (8009f58 <tcp_abandon+0x170>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	61fb      	str	r3, [r7, #28]
 8009e84:	e00c      	b.n	8009ea0 <tcp_abandon+0xb8>
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d104      	bne.n	8009e9a <tcp_abandon+0xb2>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	60da      	str	r2, [r3, #12]
 8009e98:	e005      	b.n	8009ea6 <tcp_abandon+0xbe>
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	61fb      	str	r3, [r7, #28]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1ef      	bne.n	8009e86 <tcp_abandon+0x9e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	60da      	str	r2, [r3, #12]
 8009eac:	e00b      	b.n	8009ec6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	8adb      	ldrh	r3, [r3, #22]
 8009eb6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4828      	ldr	r0, [pc, #160]	; (8009f5c <tcp_abandon+0x174>)
 8009ebc:	f001 fa16 	bl	800b2ec <tcp_pcb_remove>
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <tcp_abandon+0x178>)
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fed4 	bl	800ac80 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d004      	beq.n	8009eea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fecb 	bl	800ac80 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fec2 	bl	800ac80 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00e      	beq.n	8009f20 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3304      	adds	r3, #4
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	8b12      	ldrh	r2, [r2, #24]
 8009f0c:	9202      	str	r2, [sp, #8]
 8009f0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009f10:	9201      	str	r2, [sp, #4]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	460b      	mov	r3, r1
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	69b9      	ldr	r1, [r7, #24]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f005 fbc4 	bl	800f6a8 <tcp_rst>
    }
    last_state = pcb->state;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	7d1b      	ldrb	r3, [r3, #20]
 8009f24:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff fd3c 	bl	80099a4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d004      	beq.n	8009f3c <tcp_abandon+0x154>
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f06f 010c 	mvn.w	r1, #12
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	4798      	blx	r3
  }
}
 8009f3c:	3728      	adds	r7, #40	; 0x28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	08016858 	.word	0x08016858
 8009f48:	0801699c 	.word	0x0801699c
 8009f4c:	0801689c 	.word	0x0801689c
 8009f50:	080169b8 	.word	0x080169b8
 8009f54:	20007088 	.word	0x20007088
 8009f58:	20007084 	.word	0x20007084
 8009f5c:	20007078 	.word	0x20007078
 8009f60:	20007074 	.word	0x20007074

08009f64 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff ff3a 	bl	8009de8 <tcp_abandon>
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b088      	sub	sp, #32
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4613      	mov	r3, r2
 8009f88:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009f8a:	2304      	movs	r3, #4
 8009f8c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009f94:	4b3e      	ldr	r3, [pc, #248]	; (800a090 <tcp_bind+0x114>)
 8009f96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d109      	bne.n	8009fb2 <tcp_bind+0x36>
 8009f9e:	4b3d      	ldr	r3, [pc, #244]	; (800a094 <tcp_bind+0x118>)
 8009fa0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8009fa4:	493c      	ldr	r1, [pc, #240]	; (800a098 <tcp_bind+0x11c>)
 8009fa6:	483d      	ldr	r0, [pc, #244]	; (800a09c <tcp_bind+0x120>)
 8009fa8:	f008 fc38 	bl	801281c <iprintf>
 8009fac:	f06f 030f 	mvn.w	r3, #15
 8009fb0:	e06a      	b.n	800a088 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	7d1b      	ldrb	r3, [r3, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <tcp_bind+0x52>
 8009fba:	4b36      	ldr	r3, [pc, #216]	; (800a094 <tcp_bind+0x118>)
 8009fbc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009fc0:	4937      	ldr	r1, [pc, #220]	; (800a0a0 <tcp_bind+0x124>)
 8009fc2:	4836      	ldr	r0, [pc, #216]	; (800a09c <tcp_bind+0x120>)
 8009fc4:	f008 fc2a 	bl	801281c <iprintf>
 8009fc8:	f06f 0305 	mvn.w	r3, #5
 8009fcc:	e05c      	b.n	800a088 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009fce:	88fb      	ldrh	r3, [r7, #6]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009fd4:	f000 f9f0 	bl	800a3b8 <tcp_new_port>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009fdc:	88fb      	ldrh	r3, [r7, #6]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d135      	bne.n	800a04e <tcp_bind+0xd2>
      return ERR_BUF;
 8009fe2:	f06f 0301 	mvn.w	r3, #1
 8009fe6:	e04f      	b.n	800a088 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	e02b      	b.n	800a046 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009fee:	4a2d      	ldr	r2, [pc, #180]	; (800a0a4 <tcp_bind+0x128>)
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	61bb      	str	r3, [r7, #24]
 8009ffa:	e01e      	b.n	800a03a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	8adb      	ldrh	r3, [r3, #22]
 800a000:	88fa      	ldrh	r2, [r7, #6]
 800a002:	429a      	cmp	r2, r3
 800a004:	d116      	bne.n	800a034 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a006:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d010      	beq.n	800a02e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00c      	beq.n	800a02e <tcp_bind+0xb2>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d009      	beq.n	800a02e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d005      	beq.n	800a02e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d102      	bne.n	800a034 <tcp_bind+0xb8>
              return ERR_USE;
 800a02e:	f06f 0307 	mvn.w	r3, #7
 800a032:	e029      	b.n	800a088 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	61bb      	str	r3, [r7, #24]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1dd      	bne.n	8009ffc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	3301      	adds	r3, #1
 800a044:	61fb      	str	r3, [r7, #28]
 800a046:	69fa      	ldr	r2, [r7, #28]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	dbcf      	blt.n	8009fee <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00c      	beq.n	800a06e <tcp_bind+0xf2>
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d008      	beq.n	800a06e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <tcp_bind+0xec>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	e000      	b.n	800a06a <tcp_bind+0xee>
 800a068:	2300      	movs	r3, #0
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	88fa      	ldrh	r2, [r7, #6]
 800a072:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <tcp_bind+0x12c>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	60da      	str	r2, [r3, #12]
 800a07c:	4a0a      	ldr	r2, [pc, #40]	; (800a0a8 <tcp_bind+0x12c>)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6013      	str	r3, [r2, #0]
 800a082:	f005 fcd3 	bl	800fa2c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3720      	adds	r7, #32
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	0801886c 	.word	0x0801886c
 800a094:	08016858 	.word	0x08016858
 800a098:	080169ec 	.word	0x080169ec
 800a09c:	0801689c 	.word	0x0801689c
 800a0a0:	08016a04 	.word	0x08016a04
 800a0a4:	08018844 	.word	0x08018844
 800a0a8:	20007084 	.word	0x20007084

0800a0ac <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d106      	bne.n	800a0ce <tcp_accept_null+0x22>
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <tcp_accept_null+0x34>)
 800a0c2:	f240 320f 	movw	r2, #783	; 0x30f
 800a0c6:	4907      	ldr	r1, [pc, #28]	; (800a0e4 <tcp_accept_null+0x38>)
 800a0c8:	4807      	ldr	r0, [pc, #28]	; (800a0e8 <tcp_accept_null+0x3c>)
 800a0ca:	f008 fba7 	bl	801281c <iprintf>

  tcp_abort(pcb);
 800a0ce:	68b8      	ldr	r0, [r7, #8]
 800a0d0:	f7ff ff48 	bl	8009f64 <tcp_abort>

  return ERR_ABRT;
 800a0d4:	f06f 030c 	mvn.w	r3, #12
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	08016858 	.word	0x08016858
 800a0e4:	08016a2c 	.word	0x08016a2c
 800a0e8:	0801689c 	.word	0x0801689c

0800a0ec <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f806 	bl	800a110 <tcp_listen_with_backlog_and_err>
 800a104:	4603      	mov	r3, r0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b088      	sub	sp, #32
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	460b      	mov	r3, r1
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <tcp_listen_with_backlog_and_err+0x2c>
 800a128:	4b47      	ldr	r3, [pc, #284]	; (800a248 <tcp_listen_with_backlog_and_err+0x138>)
 800a12a:	f240 3259 	movw	r2, #857	; 0x359
 800a12e:	4947      	ldr	r1, [pc, #284]	; (800a24c <tcp_listen_with_backlog_and_err+0x13c>)
 800a130:	4847      	ldr	r0, [pc, #284]	; (800a250 <tcp_listen_with_backlog_and_err+0x140>)
 800a132:	f008 fb73 	bl	801281c <iprintf>
 800a136:	23f0      	movs	r3, #240	; 0xf0
 800a138:	76fb      	strb	r3, [r7, #27]
 800a13a:	e079      	b.n	800a230 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	7d1b      	ldrb	r3, [r3, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d009      	beq.n	800a158 <tcp_listen_with_backlog_and_err+0x48>
 800a144:	4b40      	ldr	r3, [pc, #256]	; (800a248 <tcp_listen_with_backlog_and_err+0x138>)
 800a146:	f240 325a 	movw	r2, #858	; 0x35a
 800a14a:	4942      	ldr	r1, [pc, #264]	; (800a254 <tcp_listen_with_backlog_and_err+0x144>)
 800a14c:	4840      	ldr	r0, [pc, #256]	; (800a250 <tcp_listen_with_backlog_and_err+0x140>)
 800a14e:	f008 fb65 	bl	801281c <iprintf>
 800a152:	23f1      	movs	r3, #241	; 0xf1
 800a154:	76fb      	strb	r3, [r7, #27]
 800a156:	e06b      	b.n	800a230 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d104      	bne.n	800a16a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a164:	23f7      	movs	r3, #247	; 0xf7
 800a166:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a168:	e062      	b.n	800a230 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a16a:	2002      	movs	r0, #2
 800a16c:	f7fe fb24 	bl	80087b8 <memp_malloc>
 800a170:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a178:	23ff      	movs	r3, #255	; 0xff
 800a17a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a17c:	e058      	b.n	800a230 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	691a      	ldr	r2, [r3, #16]
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	8ada      	ldrh	r2, [r3, #22]
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	2201      	movs	r2, #1
 800a192:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	7d5a      	ldrb	r2, [r3, #21]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7a5a      	ldrb	r2, [r3, #9]
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	7ada      	ldrb	r2, [r3, #11]
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	7a9a      	ldrb	r2, [r3, #10]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	8adb      	ldrh	r3, [r3, #22]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d021      	beq.n	800a20e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a1ca:	4b23      	ldr	r3, [pc, #140]	; (800a258 <tcp_listen_with_backlog_and_err+0x148>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d105      	bne.n	800a1e0 <tcp_listen_with_backlog_and_err+0xd0>
 800a1d4:	4b20      	ldr	r3, [pc, #128]	; (800a258 <tcp_listen_with_backlog_and_err+0x148>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	4a1f      	ldr	r2, [pc, #124]	; (800a258 <tcp_listen_with_backlog_and_err+0x148>)
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	e013      	b.n	800a208 <tcp_listen_with_backlog_and_err+0xf8>
 800a1e0:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <tcp_listen_with_backlog_and_err+0x148>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	e00c      	b.n	800a202 <tcp_listen_with_backlog_and_err+0xf2>
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d104      	bne.n	800a1fc <tcp_listen_with_backlog_and_err+0xec>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	e005      	b.n	800a208 <tcp_listen_with_backlog_and_err+0xf8>
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1ef      	bne.n	800a1e8 <tcp_listen_with_backlog_and_err+0xd8>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fbc8 	bl	80099a4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	4a11      	ldr	r2, [pc, #68]	; (800a25c <tcp_listen_with_backlog_and_err+0x14c>)
 800a218:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <tcp_listen_with_backlog_and_err+0x150>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	60da      	str	r2, [r3, #12]
 800a222:	4a0f      	ldr	r2, [pc, #60]	; (800a260 <tcp_listen_with_backlog_and_err+0x150>)
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	f005 fc00 	bl	800fa2c <tcp_timer_needed>
  res = ERR_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7efa      	ldrb	r2, [r7, #27]
 800a23a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a23c:	69fb      	ldr	r3, [r7, #28]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	08016858 	.word	0x08016858
 800a24c:	08016a4c 	.word	0x08016a4c
 800a250:	0801689c 	.word	0x0801689c
 800a254:	08016a7c 	.word	0x08016a7c
 800a258:	20007084 	.word	0x20007084
 800a25c:	0800a0ad 	.word	0x0800a0ad
 800a260:	20007080 	.word	0x20007080

0800a264 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <tcp_update_rcv_ann_wnd+0x1c>
 800a272:	4b25      	ldr	r3, [pc, #148]	; (800a308 <tcp_update_rcv_ann_wnd+0xa4>)
 800a274:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a278:	4924      	ldr	r1, [pc, #144]	; (800a30c <tcp_update_rcv_ann_wnd+0xa8>)
 800a27a:	4825      	ldr	r0, [pc, #148]	; (800a310 <tcp_update_rcv_ann_wnd+0xac>)
 800a27c:	f008 face 	bl	801281c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a288:	4413      	add	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a294:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a298:	bf28      	it	cs
 800a29a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a29e:	b292      	uxth	r2, r2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	db08      	blt.n	800a2bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	e020      	b.n	800a2fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd03      	ble.n	800a2d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a2d0:	e014      	b.n	800a2fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e4:	d306      	bcc.n	800a2f4 <tcp_update_rcv_ann_wnd+0x90>
 800a2e6:	4b08      	ldr	r3, [pc, #32]	; (800a308 <tcp_update_rcv_ann_wnd+0xa4>)
 800a2e8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a2ec:	4909      	ldr	r1, [pc, #36]	; (800a314 <tcp_update_rcv_ann_wnd+0xb0>)
 800a2ee:	4808      	ldr	r0, [pc, #32]	; (800a310 <tcp_update_rcv_ann_wnd+0xac>)
 800a2f0:	f008 fa94 	bl	801281c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a2fc:	2300      	movs	r3, #0
  }
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	08016858 	.word	0x08016858
 800a30c:	08016ab4 	.word	0x08016ab4
 800a310:	0801689c 	.word	0x0801689c
 800a314:	08016ad8 	.word	0x08016ad8

0800a318 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d107      	bne.n	800a33a <tcp_recved+0x22>
 800a32a:	4b1f      	ldr	r3, [pc, #124]	; (800a3a8 <tcp_recved+0x90>)
 800a32c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a330:	491e      	ldr	r1, [pc, #120]	; (800a3ac <tcp_recved+0x94>)
 800a332:	481f      	ldr	r0, [pc, #124]	; (800a3b0 <tcp_recved+0x98>)
 800a334:	f008 fa72 	bl	801281c <iprintf>
 800a338:	e032      	b.n	800a3a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	7d1b      	ldrb	r3, [r3, #20]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d106      	bne.n	800a350 <tcp_recved+0x38>
 800a342:	4b19      	ldr	r3, [pc, #100]	; (800a3a8 <tcp_recved+0x90>)
 800a344:	f240 32d3 	movw	r2, #979	; 0x3d3
 800a348:	491a      	ldr	r1, [pc, #104]	; (800a3b4 <tcp_recved+0x9c>)
 800a34a:	4819      	ldr	r0, [pc, #100]	; (800a3b0 <tcp_recved+0x98>)
 800a34c:	f008 fa66 	bl	801281c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a354:	887b      	ldrh	r3, [r7, #2]
 800a356:	4413      	add	r3, r2
 800a358:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a35a:	89fb      	ldrh	r3, [r7, #14]
 800a35c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a360:	d804      	bhi.n	800a36c <tcp_recved+0x54>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a366:	89fa      	ldrh	r2, [r7, #14]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d204      	bcs.n	800a376 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a372:	851a      	strh	r2, [r3, #40]	; 0x28
 800a374:	e002      	b.n	800a37c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	89fa      	ldrh	r2, [r7, #14]
 800a37a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff ff71 	bl	800a264 <tcp_update_rcv_ann_wnd>
 800a382:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a38a:	d309      	bcc.n	800a3a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	8b5b      	ldrh	r3, [r3, #26]
 800a390:	f043 0302 	orr.w	r3, r3, #2
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f004 fbbe 	bl	800eb1c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08016858 	.word	0x08016858
 800a3ac:	08016af4 	.word	0x08016af4
 800a3b0:	0801689c 	.word	0x0801689c
 800a3b4:	08016b0c 	.word	0x08016b0c

0800a3b8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a3c2:	4b1e      	ldr	r3, [pc, #120]	; (800a43c <tcp_new_port+0x84>)
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <tcp_new_port+0x84>)
 800a3cc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a3ce:	4b1b      	ldr	r3, [pc, #108]	; (800a43c <tcp_new_port+0x84>)
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d103      	bne.n	800a3e2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a3da:	4b18      	ldr	r3, [pc, #96]	; (800a43c <tcp_new_port+0x84>)
 800a3dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a3e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	71fb      	strb	r3, [r7, #7]
 800a3e6:	e01e      	b.n	800a426 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	4a15      	ldr	r2, [pc, #84]	; (800a440 <tcp_new_port+0x88>)
 800a3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	e011      	b.n	800a41a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	8ada      	ldrh	r2, [r3, #22]
 800a3fa:	4b10      	ldr	r3, [pc, #64]	; (800a43c <tcp_new_port+0x84>)
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d108      	bne.n	800a414 <tcp_new_port+0x5c>
        n++;
 800a402:	88bb      	ldrh	r3, [r7, #4]
 800a404:	3301      	adds	r3, #1
 800a406:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a408:	88bb      	ldrh	r3, [r7, #4]
 800a40a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a40e:	d3d8      	bcc.n	800a3c2 <tcp_new_port+0xa>
          return 0;
 800a410:	2300      	movs	r3, #0
 800a412:	e00d      	b.n	800a430 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	603b      	str	r3, [r7, #0]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1ea      	bne.n	800a3f6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	3301      	adds	r3, #1
 800a424:	71fb      	strb	r3, [r7, #7]
 800a426:	79fb      	ldrb	r3, [r7, #7]
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d9dd      	bls.n	800a3e8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a42c:	4b03      	ldr	r3, [pc, #12]	; (800a43c <tcp_new_port+0x84>)
 800a42e:	881b      	ldrh	r3, [r3, #0]
}
 800a430:	4618      	mov	r0, r3
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000016 	.word	0x20000016
 800a440:	08018844 	.word	0x08018844

0800a444 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a444:	b5b0      	push	{r4, r5, r7, lr}
 800a446:	b090      	sub	sp, #64	; 0x40
 800a448:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a450:	4b94      	ldr	r3, [pc, #592]	; (800a6a4 <tcp_slowtmr+0x260>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3301      	adds	r3, #1
 800a456:	4a93      	ldr	r2, [pc, #588]	; (800a6a4 <tcp_slowtmr+0x260>)
 800a458:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a45a:	4b93      	ldr	r3, [pc, #588]	; (800a6a8 <tcp_slowtmr+0x264>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	b2da      	uxtb	r2, r3
 800a462:	4b91      	ldr	r3, [pc, #580]	; (800a6a8 <tcp_slowtmr+0x264>)
 800a464:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a466:	2300      	movs	r3, #0
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a46a:	4b90      	ldr	r3, [pc, #576]	; (800a6ac <tcp_slowtmr+0x268>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a470:	e29d      	b.n	800a9ae <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	7d1b      	ldrb	r3, [r3, #20]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <tcp_slowtmr+0x44>
 800a47a:	4b8d      	ldr	r3, [pc, #564]	; (800a6b0 <tcp_slowtmr+0x26c>)
 800a47c:	f240 42be 	movw	r2, #1214	; 0x4be
 800a480:	498c      	ldr	r1, [pc, #560]	; (800a6b4 <tcp_slowtmr+0x270>)
 800a482:	488d      	ldr	r0, [pc, #564]	; (800a6b8 <tcp_slowtmr+0x274>)
 800a484:	f008 f9ca 	bl	801281c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	7d1b      	ldrb	r3, [r3, #20]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d106      	bne.n	800a49e <tcp_slowtmr+0x5a>
 800a490:	4b87      	ldr	r3, [pc, #540]	; (800a6b0 <tcp_slowtmr+0x26c>)
 800a492:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a496:	4989      	ldr	r1, [pc, #548]	; (800a6bc <tcp_slowtmr+0x278>)
 800a498:	4887      	ldr	r0, [pc, #540]	; (800a6b8 <tcp_slowtmr+0x274>)
 800a49a:	f008 f9bf 	bl	801281c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	7d1b      	ldrb	r3, [r3, #20]
 800a4a2:	2b0a      	cmp	r3, #10
 800a4a4:	d106      	bne.n	800a4b4 <tcp_slowtmr+0x70>
 800a4a6:	4b82      	ldr	r3, [pc, #520]	; (800a6b0 <tcp_slowtmr+0x26c>)
 800a4a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a4ac:	4984      	ldr	r1, [pc, #528]	; (800a6c0 <tcp_slowtmr+0x27c>)
 800a4ae:	4882      	ldr	r0, [pc, #520]	; (800a6b8 <tcp_slowtmr+0x274>)
 800a4b0:	f008 f9b4 	bl	801281c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	7f9a      	ldrb	r2, [r3, #30]
 800a4b8:	4b7b      	ldr	r3, [pc, #492]	; (800a6a8 <tcp_slowtmr+0x264>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d105      	bne.n	800a4cc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a4ca:	e270      	b.n	800a9ae <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a4cc:	4b76      	ldr	r3, [pc, #472]	; (800a6a8 <tcp_slowtmr+0x264>)
 800a4ce:	781a      	ldrb	r2, [r3, #0]
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	7d1b      	ldrb	r3, [r3, #20]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d10a      	bne.n	800a4fe <tcp_slowtmr+0xba>
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d905      	bls.n	800a4fe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a4f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4fc:	e11e      	b.n	800a73c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a504:	2b0b      	cmp	r3, #11
 800a506:	d905      	bls.n	800a514 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a50c:	3301      	adds	r3, #1
 800a50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a512:	e113      	b.n	800a73c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d075      	beq.n	800a60a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a522:	2b00      	cmp	r3, #0
 800a524:	d006      	beq.n	800a534 <tcp_slowtmr+0xf0>
 800a526:	4b62      	ldr	r3, [pc, #392]	; (800a6b0 <tcp_slowtmr+0x26c>)
 800a528:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a52c:	4965      	ldr	r1, [pc, #404]	; (800a6c4 <tcp_slowtmr+0x280>)
 800a52e:	4862      	ldr	r0, [pc, #392]	; (800a6b8 <tcp_slowtmr+0x274>)
 800a530:	f008 f974 	bl	801281c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d106      	bne.n	800a54a <tcp_slowtmr+0x106>
 800a53c:	4b5c      	ldr	r3, [pc, #368]	; (800a6b0 <tcp_slowtmr+0x26c>)
 800a53e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a542:	4961      	ldr	r1, [pc, #388]	; (800a6c8 <tcp_slowtmr+0x284>)
 800a544:	485c      	ldr	r0, [pc, #368]	; (800a6b8 <tcp_slowtmr+0x274>)
 800a546:	f008 f969 	bl	801281c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a550:	2b0b      	cmp	r3, #11
 800a552:	d905      	bls.n	800a560 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a558:	3301      	adds	r3, #1
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a55e:	e0ed      	b.n	800a73c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a566:	3b01      	subs	r3, #1
 800a568:	4a58      	ldr	r2, [pc, #352]	; (800a6cc <tcp_slowtmr+0x288>)
 800a56a:	5cd3      	ldrb	r3, [r2, r3]
 800a56c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a570:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a574:	7c7a      	ldrb	r2, [r7, #17]
 800a576:	429a      	cmp	r2, r3
 800a578:	d907      	bls.n	800a58a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a580:	3301      	adds	r3, #1
 800a582:	b2da      	uxtb	r2, r3
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a590:	7c7a      	ldrb	r2, [r7, #17]
 800a592:	429a      	cmp	r2, r3
 800a594:	f200 80d2 	bhi.w	800a73c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a598:	2301      	movs	r3, #1
 800a59a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d108      	bne.n	800a5b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a8:	f005 f972 	bl	800f890 <tcp_zero_window_probe>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d014      	beq.n	800a5dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	623b      	str	r3, [r7, #32]
 800a5b6:	e011      	b.n	800a5dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5c2:	f004 f825 	bl	800e610 <tcp_split_unsent_seg>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d107      	bne.n	800a5dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a5cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ce:	f004 faa5 	bl	800eb1c <tcp_output>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a5dc:	6a3b      	ldr	r3, [r7, #32]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80ac 	beq.w	800a73c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a5f2:	2b06      	cmp	r3, #6
 800a5f4:	f200 80a2 	bhi.w	800a73c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a5fe:	3301      	adds	r3, #1
 800a600:	b2da      	uxtb	r2, r3
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a608:	e098      	b.n	800a73c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a610:	2b00      	cmp	r3, #0
 800a612:	db0f      	blt.n	800a634 <tcp_slowtmr+0x1f0>
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a61a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a61e:	4293      	cmp	r3, r2
 800a620:	d008      	beq.n	800a634 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3301      	adds	r3, #1
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	b21a      	sxth	r2, r3
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a636:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a640:	429a      	cmp	r2, r3
 800a642:	db7b      	blt.n	800a73c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a646:	f004 fd61 	bl	800f10c <tcp_rexmit_rto_prepare>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d007      	beq.n	800a660 <tcp_slowtmr+0x21c>
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a654:	2b00      	cmp	r3, #0
 800a656:	d171      	bne.n	800a73c <tcp_slowtmr+0x2f8>
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d06d      	beq.n	800a73c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	7d1b      	ldrb	r3, [r3, #20]
 800a664:	2b02      	cmp	r3, #2
 800a666:	d03a      	beq.n	800a6de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a66e:	2b0c      	cmp	r3, #12
 800a670:	bf28      	it	cs
 800a672:	230c      	movcs	r3, #12
 800a674:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a67c:	10db      	asrs	r3, r3, #3
 800a67e:	b21b      	sxth	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a688:	4413      	add	r3, r2
 800a68a:	7efa      	ldrb	r2, [r7, #27]
 800a68c:	4910      	ldr	r1, [pc, #64]	; (800a6d0 <tcp_slowtmr+0x28c>)
 800a68e:	5c8a      	ldrb	r2, [r1, r2]
 800a690:	4093      	lsls	r3, r2
 800a692:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a69a:	4293      	cmp	r3, r2
 800a69c:	dc1a      	bgt.n	800a6d4 <tcp_slowtmr+0x290>
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	b21a      	sxth	r2, r3
 800a6a2:	e019      	b.n	800a6d8 <tcp_slowtmr+0x294>
 800a6a4:	2000707c 	.word	0x2000707c
 800a6a8:	2000024e 	.word	0x2000024e
 800a6ac:	20007078 	.word	0x20007078
 800a6b0:	08016858 	.word	0x08016858
 800a6b4:	08016b9c 	.word	0x08016b9c
 800a6b8:	0801689c 	.word	0x0801689c
 800a6bc:	08016bc8 	.word	0x08016bc8
 800a6c0:	08016bf4 	.word	0x08016bf4
 800a6c4:	08016c24 	.word	0x08016c24
 800a6c8:	08016c58 	.word	0x08016c58
 800a6cc:	0801883c 	.word	0x0801883c
 800a6d0:	0801882c 	.word	0x0801882c
 800a6d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	bf28      	it	cs
 800a6f4:	4613      	movcs	r3, r2
 800a6f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a6f8:	8a7b      	ldrh	r3, [r7, #18]
 800a6fa:	085b      	lsrs	r3, r3, #1
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	b29b      	uxth	r3, r3
 800a712:	429a      	cmp	r2, r3
 800a714:	d206      	bcs.n	800a724 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	2200      	movs	r2, #0
 800a732:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a738:	f004 fd58 	bl	800f1ec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	7d1b      	ldrb	r3, [r3, #20]
 800a740:	2b06      	cmp	r3, #6
 800a742:	d111      	bne.n	800a768 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	8b5b      	ldrh	r3, [r3, #26]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00b      	beq.n	800a768 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a750:	4b9c      	ldr	r3, [pc, #624]	; (800a9c4 <tcp_slowtmr+0x580>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	2b28      	cmp	r3, #40	; 0x28
 800a75c:	d904      	bls.n	800a768 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a762:	3301      	adds	r3, #1
 800a764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76a:	7a5b      	ldrb	r3, [r3, #9]
 800a76c:	f003 0308 	and.w	r3, r3, #8
 800a770:	2b00      	cmp	r3, #0
 800a772:	d04a      	beq.n	800a80a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d003      	beq.n	800a784 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a780:	2b07      	cmp	r3, #7
 800a782:	d142      	bne.n	800a80a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a784:	4b8f      	ldr	r3, [pc, #572]	; (800a9c4 <tcp_slowtmr+0x580>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a794:	4b8c      	ldr	r3, [pc, #560]	; (800a9c8 <tcp_slowtmr+0x584>)
 800a796:	440b      	add	r3, r1
 800a798:	498c      	ldr	r1, [pc, #560]	; (800a9cc <tcp_slowtmr+0x588>)
 800a79a:	fba1 1303 	umull	r1, r3, r1, r3
 800a79e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d90a      	bls.n	800a7ba <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a7ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7b8:	e027      	b.n	800a80a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a7ba:	4b82      	ldr	r3, [pc, #520]	; (800a9c4 <tcp_slowtmr+0x580>)
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	4b7f      	ldr	r3, [pc, #508]	; (800a9d0 <tcp_slowtmr+0x58c>)
 800a7d4:	fb03 f300 	mul.w	r3, r3, r0
 800a7d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a7da:	497c      	ldr	r1, [pc, #496]	; (800a9cc <tcp_slowtmr+0x588>)
 800a7dc:	fba1 1303 	umull	r1, r3, r1, r3
 800a7e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d911      	bls.n	800a80a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800a7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7e8:	f005 f812 	bl	800f810 <tcp_keepalive>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a7f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d107      	bne.n	800a80a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a800:	3301      	adds	r3, #1
 800a802:	b2da      	uxtb	r2, r3
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d011      	beq.n	800a836 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a812:	4b6c      	ldr	r3, [pc, #432]	; (800a9c4 <tcp_slowtmr+0x580>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	1ad2      	subs	r2, r2, r3
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a822:	4619      	mov	r1, r3
 800a824:	460b      	mov	r3, r1
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	440b      	add	r3, r1
 800a82a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d302      	bcc.n	800a836 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a832:	f000 febf 	bl	800b5b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a838:	7d1b      	ldrb	r3, [r3, #20]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d10b      	bne.n	800a856 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a83e:	4b61      	ldr	r3, [pc, #388]	; (800a9c4 <tcp_slowtmr+0x580>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b28      	cmp	r3, #40	; 0x28
 800a84a:	d904      	bls.n	800a856 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a850:	3301      	adds	r3, #1
 800a852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	7d1b      	ldrb	r3, [r3, #20]
 800a85a:	2b09      	cmp	r3, #9
 800a85c:	d10b      	bne.n	800a876 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a85e:	4b59      	ldr	r3, [pc, #356]	; (800a9c4 <tcp_slowtmr+0x580>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	2bf0      	cmp	r3, #240	; 0xf0
 800a86a:	d904      	bls.n	800a876 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800a86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a870:	3301      	adds	r3, #1
 800a872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d060      	beq.n	800a940 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a884:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a888:	f000 fce0 	bl	800b24c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d010      	beq.n	800a8b4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a892:	4b50      	ldr	r3, [pc, #320]	; (800a9d4 <tcp_slowtmr+0x590>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a898:	429a      	cmp	r2, r3
 800a89a:	d106      	bne.n	800a8aa <tcp_slowtmr+0x466>
 800a89c:	4b4e      	ldr	r3, [pc, #312]	; (800a9d8 <tcp_slowtmr+0x594>)
 800a89e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a8a2:	494e      	ldr	r1, [pc, #312]	; (800a9dc <tcp_slowtmr+0x598>)
 800a8a4:	484e      	ldr	r0, [pc, #312]	; (800a9e0 <tcp_slowtmr+0x59c>)
 800a8a6:	f007 ffb9 	bl	801281c <iprintf>
        prev->next = pcb->next;
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	60da      	str	r2, [r3, #12]
 800a8b2:	e00f      	b.n	800a8d4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a8b4:	4b47      	ldr	r3, [pc, #284]	; (800a9d4 <tcp_slowtmr+0x590>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d006      	beq.n	800a8cc <tcp_slowtmr+0x488>
 800a8be:	4b46      	ldr	r3, [pc, #280]	; (800a9d8 <tcp_slowtmr+0x594>)
 800a8c0:	f240 5271 	movw	r2, #1393	; 0x571
 800a8c4:	4947      	ldr	r1, [pc, #284]	; (800a9e4 <tcp_slowtmr+0x5a0>)
 800a8c6:	4846      	ldr	r0, [pc, #280]	; (800a9e0 <tcp_slowtmr+0x59c>)
 800a8c8:	f007 ffa8 	bl	801281c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	4a40      	ldr	r2, [pc, #256]	; (800a9d4 <tcp_slowtmr+0x590>)
 800a8d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a8d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d013      	beq.n	800a904 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a8e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ec:	8ad2      	ldrh	r2, [r2, #22]
 800a8ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8f0:	8b09      	ldrh	r1, [r1, #24]
 800a8f2:	9102      	str	r1, [sp, #8]
 800a8f4:	9201      	str	r2, [sp, #4]
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a900:	f004 fed2 	bl	800f6a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90c:	7d1b      	ldrb	r3, [r3, #20]
 800a90e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a91a:	6838      	ldr	r0, [r7, #0]
 800a91c:	f7ff f842 	bl	80099a4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a920:	4b31      	ldr	r3, [pc, #196]	; (800a9e8 <tcp_slowtmr+0x5a4>)
 800a922:	2200      	movs	r2, #0
 800a924:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <tcp_slowtmr+0x4f2>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f06f 010c 	mvn.w	r1, #12
 800a932:	68b8      	ldr	r0, [r7, #8]
 800a934:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a936:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <tcp_slowtmr+0x5a4>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d037      	beq.n	800a9ae <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800a93e:	e592      	b.n	800a466 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	7f1b      	ldrb	r3, [r3, #28]
 800a94e:	3301      	adds	r3, #1
 800a950:	b2da      	uxtb	r2, r3
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	7f1a      	ldrb	r2, [r3, #28]
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	7f5b      	ldrb	r3, [r3, #29]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d325      	bcc.n	800a9ae <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	2200      	movs	r2, #0
 800a966:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a968:	4b1f      	ldr	r3, [pc, #124]	; (800a9e8 <tcp_slowtmr+0x5a4>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00b      	beq.n	800a990 <tcp_slowtmr+0x54c>
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a97e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a980:	6912      	ldr	r2, [r2, #16]
 800a982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a984:	4610      	mov	r0, r2
 800a986:	4798      	blx	r3
 800a988:	4603      	mov	r3, r0
 800a98a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a98e:	e002      	b.n	800a996 <tcp_slowtmr+0x552>
 800a990:	2300      	movs	r3, #0
 800a992:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a996:	4b14      	ldr	r3, [pc, #80]	; (800a9e8 <tcp_slowtmr+0x5a4>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d000      	beq.n	800a9a0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800a99e:	e562      	b.n	800a466 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a9a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d102      	bne.n	800a9ae <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800a9a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9aa:	f004 f8b7 	bl	800eb1c <tcp_output>
  while (pcb != NULL) {
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f47f ad5e 	bne.w	800a472 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a9ba:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <tcp_slowtmr+0x5a8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a9c0:	e069      	b.n	800aa96 <tcp_slowtmr+0x652>
 800a9c2:	bf00      	nop
 800a9c4:	2000707c 	.word	0x2000707c
 800a9c8:	000a4cb8 	.word	0x000a4cb8
 800a9cc:	10624dd3 	.word	0x10624dd3
 800a9d0:	000124f8 	.word	0x000124f8
 800a9d4:	20007078 	.word	0x20007078
 800a9d8:	08016858 	.word	0x08016858
 800a9dc:	08016c90 	.word	0x08016c90
 800a9e0:	0801689c 	.word	0x0801689c
 800a9e4:	08016cbc 	.word	0x08016cbc
 800a9e8:	20007074 	.word	0x20007074
 800a9ec:	20007088 	.word	0x20007088
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	7d1b      	ldrb	r3, [r3, #20]
 800a9f4:	2b0a      	cmp	r3, #10
 800a9f6:	d006      	beq.n	800aa06 <tcp_slowtmr+0x5c2>
 800a9f8:	4b2a      	ldr	r3, [pc, #168]	; (800aaa4 <tcp_slowtmr+0x660>)
 800a9fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a9fe:	492a      	ldr	r1, [pc, #168]	; (800aaa8 <tcp_slowtmr+0x664>)
 800aa00:	482a      	ldr	r0, [pc, #168]	; (800aaac <tcp_slowtmr+0x668>)
 800aa02:	f007 ff0b 	bl	801281c <iprintf>
    pcb_remove = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aa0c:	4b28      	ldr	r3, [pc, #160]	; (800aab0 <tcp_slowtmr+0x66c>)
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	2bf0      	cmp	r3, #240	; 0xf0
 800aa18:	d904      	bls.n	800aa24 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800aa1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa1e:	3301      	adds	r3, #1
 800aa20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800aa24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d02f      	beq.n	800aa8c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800aa2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa2e:	f000 fc0d 	bl	800b24c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d010      	beq.n	800aa5a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800aa38:	4b1e      	ldr	r3, [pc, #120]	; (800aab4 <tcp_slowtmr+0x670>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d106      	bne.n	800aa50 <tcp_slowtmr+0x60c>
 800aa42:	4b18      	ldr	r3, [pc, #96]	; (800aaa4 <tcp_slowtmr+0x660>)
 800aa44:	f240 52af 	movw	r2, #1455	; 0x5af
 800aa48:	491b      	ldr	r1, [pc, #108]	; (800aab8 <tcp_slowtmr+0x674>)
 800aa4a:	4818      	ldr	r0, [pc, #96]	; (800aaac <tcp_slowtmr+0x668>)
 800aa4c:	f007 fee6 	bl	801281c <iprintf>
        prev->next = pcb->next;
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	60da      	str	r2, [r3, #12]
 800aa58:	e00f      	b.n	800aa7a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800aa5a:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <tcp_slowtmr+0x670>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d006      	beq.n	800aa72 <tcp_slowtmr+0x62e>
 800aa64:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <tcp_slowtmr+0x660>)
 800aa66:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800aa6a:	4914      	ldr	r1, [pc, #80]	; (800aabc <tcp_slowtmr+0x678>)
 800aa6c:	480f      	ldr	r0, [pc, #60]	; (800aaac <tcp_slowtmr+0x668>)
 800aa6e:	f007 fed5 	bl	801281c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	4a0f      	ldr	r2, [pc, #60]	; (800aab4 <tcp_slowtmr+0x670>)
 800aa78:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800aa84:	69f8      	ldr	r0, [r7, #28]
 800aa86:	f7fe ff8d 	bl	80099a4 <tcp_free>
 800aa8a:	e004      	b.n	800aa96 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800aa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1a9      	bne.n	800a9f0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800aa9c:	bf00      	nop
 800aa9e:	3730      	adds	r7, #48	; 0x30
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bdb0      	pop	{r4, r5, r7, pc}
 800aaa4:	08016858 	.word	0x08016858
 800aaa8:	08016ce8 	.word	0x08016ce8
 800aaac:	0801689c 	.word	0x0801689c
 800aab0:	2000707c 	.word	0x2000707c
 800aab4:	20007088 	.word	0x20007088
 800aab8:	08016d18 	.word	0x08016d18
 800aabc:	08016d40 	.word	0x08016d40

0800aac0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800aac6:	4b2d      	ldr	r3, [pc, #180]	; (800ab7c <tcp_fasttmr+0xbc>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	3301      	adds	r3, #1
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	4b2b      	ldr	r3, [pc, #172]	; (800ab7c <tcp_fasttmr+0xbc>)
 800aad0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800aad2:	4b2b      	ldr	r3, [pc, #172]	; (800ab80 <tcp_fasttmr+0xc0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aad8:	e048      	b.n	800ab6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7f9a      	ldrb	r2, [r3, #30]
 800aade:	4b27      	ldr	r3, [pc, #156]	; (800ab7c <tcp_fasttmr+0xbc>)
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d03f      	beq.n	800ab66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800aae6:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <tcp_fasttmr+0xbc>)
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8b5b      	ldrh	r3, [r3, #26]
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d010      	beq.n	800ab1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	8b5b      	ldrh	r3, [r3, #26]
 800aafe:	f043 0302 	orr.w	r3, r3, #2
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f004 f807 	bl	800eb1c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	8b5b      	ldrh	r3, [r3, #26]
 800ab12:	f023 0303 	bic.w	r3, r3, #3
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	8b5b      	ldrh	r3, [r3, #26]
 800ab20:	f003 0308 	and.w	r3, r3, #8
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d009      	beq.n	800ab3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	8b5b      	ldrh	r3, [r3, #26]
 800ab2c:	f023 0308 	bic.w	r3, r3, #8
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff f8c4 	bl	8009cc4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <tcp_fasttmr+0xc4>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f819 	bl	800ab88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ab56:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <tcp_fasttmr+0xc4>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d000      	beq.n	800ab60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ab5e:	e7b8      	b.n	800aad2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	607b      	str	r3, [r7, #4]
 800ab64:	e002      	b.n	800ab6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1b3      	bne.n	800aada <tcp_fasttmr+0x1a>
    }
  }
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2000024e 	.word	0x2000024e
 800ab80:	20007078 	.word	0x20007078
 800ab84:	20007074 	.word	0x20007074

0800ab88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ab88:	b590      	push	{r4, r7, lr}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <tcp_process_refused_data+0x22>
 800ab96:	4b37      	ldr	r3, [pc, #220]	; (800ac74 <tcp_process_refused_data+0xec>)
 800ab98:	f240 6209 	movw	r2, #1545	; 0x609
 800ab9c:	4936      	ldr	r1, [pc, #216]	; (800ac78 <tcp_process_refused_data+0xf0>)
 800ab9e:	4837      	ldr	r0, [pc, #220]	; (800ac7c <tcp_process_refused_data+0xf4>)
 800aba0:	f007 fe3c 	bl	801281c <iprintf>
 800aba4:	f06f 030f 	mvn.w	r3, #15
 800aba8:	e060      	b.n	800ac6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abae:	7b5b      	ldrb	r3, [r3, #13]
 800abb0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <tcp_process_refused_data+0x58>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6918      	ldr	r0, [r3, #16]
 800abd2:	2300      	movs	r3, #0
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	47a0      	blx	r4
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
 800abde:	e007      	b.n	800abf0 <tcp_process_refused_data+0x68>
 800abe0:	2300      	movs	r3, #0
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	2000      	movs	r0, #0
 800abe8:	f000 f8c0 	bl	800ad6c <tcp_recv_null>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800abf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d12a      	bne.n	800ac4e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d033      	beq.n	800ac6a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ac0a:	d005      	beq.n	800ac18 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac10:	3301      	adds	r3, #1
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <tcp_process_refused_data+0xb2>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6918      	ldr	r0, [r3, #16]
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2200      	movs	r2, #0
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	47a0      	blx	r4
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]
 800ac38:	e001      	b.n	800ac3e <tcp_process_refused_data+0xb6>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ac3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac42:	f113 0f0d 	cmn.w	r3, #13
 800ac46:	d110      	bne.n	800ac6a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ac48:	f06f 030c 	mvn.w	r3, #12
 800ac4c:	e00e      	b.n	800ac6c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ac4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac52:	f113 0f0d 	cmn.w	r3, #13
 800ac56:	d102      	bne.n	800ac5e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ac58:	f06f 030c 	mvn.w	r3, #12
 800ac5c:	e006      	b.n	800ac6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ac64:	f06f 0304 	mvn.w	r3, #4
 800ac68:	e000      	b.n	800ac6c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}
 800ac74:	08016858 	.word	0x08016858
 800ac78:	08016d68 	.word	0x08016d68
 800ac7c:	0801689c 	.word	0x0801689c

0800ac80 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ac88:	e007      	b.n	800ac9a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f809 	bl	800aca8 <tcp_seg_free>
    seg = next;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1f4      	bne.n	800ac8a <tcp_segs_free+0xa>
  }
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00c      	beq.n	800acd0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d004      	beq.n	800acc8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fbbe 	bl	8009444 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	2003      	movs	r0, #3
 800accc:	f7fd fdc0 	bl	8008850 <memp_free>
  }
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d107      	bne.n	800acfa <tcp_setprio+0x22>
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <tcp_setprio+0x30>)
 800acec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800acf0:	4906      	ldr	r1, [pc, #24]	; (800ad0c <tcp_setprio+0x34>)
 800acf2:	4807      	ldr	r0, [pc, #28]	; (800ad10 <tcp_setprio+0x38>)
 800acf4:	f007 fd92 	bl	801281c <iprintf>
 800acf8:	e002      	b.n	800ad00 <tcp_setprio+0x28>

  pcb->prio = prio;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	78fa      	ldrb	r2, [r7, #3]
 800acfe:	755a      	strb	r2, [r3, #21]
}
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	08016858 	.word	0x08016858
 800ad0c:	08016d90 	.word	0x08016d90
 800ad10:	0801689c 	.word	0x0801689c

0800ad14 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <tcp_seg_copy+0x1c>
 800ad22:	4b0f      	ldr	r3, [pc, #60]	; (800ad60 <tcp_seg_copy+0x4c>)
 800ad24:	f240 6282 	movw	r2, #1666	; 0x682
 800ad28:	490e      	ldr	r1, [pc, #56]	; (800ad64 <tcp_seg_copy+0x50>)
 800ad2a:	480f      	ldr	r0, [pc, #60]	; (800ad68 <tcp_seg_copy+0x54>)
 800ad2c:	f007 fd76 	bl	801281c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ad30:	2003      	movs	r0, #3
 800ad32:	f7fd fd41 	bl	80087b8 <memp_malloc>
 800ad36:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <tcp_seg_copy+0x2e>
    return NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	e00a      	b.n	800ad58 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ad42:	2210      	movs	r2, #16
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f007 fc93 	bl	8012672 <memcpy>
  pbuf_ref(cseg->p);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fe fc17 	bl	8009584 <pbuf_ref>
  return cseg;
 800ad56:	68fb      	ldr	r3, [r7, #12]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	08016858 	.word	0x08016858
 800ad64:	08016dac 	.word	0x08016dac
 800ad68:	0801689c 	.word	0x0801689c

0800ad6c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d109      	bne.n	800ad94 <tcp_recv_null+0x28>
 800ad80:	4b12      	ldr	r3, [pc, #72]	; (800adcc <tcp_recv_null+0x60>)
 800ad82:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ad86:	4912      	ldr	r1, [pc, #72]	; (800add0 <tcp_recv_null+0x64>)
 800ad88:	4812      	ldr	r0, [pc, #72]	; (800add4 <tcp_recv_null+0x68>)
 800ad8a:	f007 fd47 	bl	801281c <iprintf>
 800ad8e:	f06f 030f 	mvn.w	r3, #15
 800ad92:	e016      	b.n	800adc2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	891b      	ldrh	r3, [r3, #8]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f7ff fab9 	bl	800a318 <tcp_recved>
    pbuf_free(p);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7fe fb4c 	bl	8009444 <pbuf_free>
 800adac:	e008      	b.n	800adc0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800adae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d104      	bne.n	800adc0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800adb6:	68b8      	ldr	r0, [r7, #8]
 800adb8:	f7fe ffea 	bl	8009d90 <tcp_close>
 800adbc:	4603      	mov	r3, r0
 800adbe:	e000      	b.n	800adc2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	08016858 	.word	0x08016858
 800add0:	08016dc8 	.word	0x08016dc8
 800add4:	0801689c 	.word	0x0801689c

0800add8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ade2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	db01      	blt.n	800adee <tcp_kill_prio+0x16>
 800adea:	79fb      	ldrb	r3, [r7, #7]
 800adec:	e000      	b.n	800adf0 <tcp_kill_prio+0x18>
 800adee:	237f      	movs	r3, #127	; 0x7f
 800adf0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d034      	beq.n	800ae62 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800adf8:	7afb      	ldrb	r3, [r7, #11]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae06:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <tcp_kill_prio+0x94>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e01f      	b.n	800ae4e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	7d5b      	ldrb	r3, [r3, #21]
 800ae12:	7afa      	ldrb	r2, [r7, #11]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d80c      	bhi.n	800ae32 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ae1c:	7afa      	ldrb	r2, [r7, #11]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d112      	bne.n	800ae48 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <tcp_kill_prio+0x98>)
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d80a      	bhi.n	800ae48 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ae32:	4b0f      	ldr	r3, [pc, #60]	; (800ae70 <tcp_kill_prio+0x98>)
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	7d5b      	ldrb	r3, [r3, #21]
 800ae46:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1dc      	bne.n	800ae0e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d004      	beq.n	800ae64 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ae5a:	6938      	ldr	r0, [r7, #16]
 800ae5c:	f7ff f882 	bl	8009f64 <tcp_abort>
 800ae60:	e000      	b.n	800ae64 <tcp_kill_prio+0x8c>
    return;
 800ae62:	bf00      	nop
  }
}
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20007078 	.word	0x20007078
 800ae70:	2000707c 	.word	0x2000707c

0800ae74 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	d009      	beq.n	800ae98 <tcp_kill_state+0x24>
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	2b09      	cmp	r3, #9
 800ae88:	d006      	beq.n	800ae98 <tcp_kill_state+0x24>
 800ae8a:	4b1a      	ldr	r3, [pc, #104]	; (800aef4 <tcp_kill_state+0x80>)
 800ae8c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ae90:	4919      	ldr	r1, [pc, #100]	; (800aef8 <tcp_kill_state+0x84>)
 800ae92:	481a      	ldr	r0, [pc, #104]	; (800aefc <tcp_kill_state+0x88>)
 800ae94:	f007 fcc2 	bl	801281c <iprintf>

  inactivity = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aea0:	4b17      	ldr	r3, [pc, #92]	; (800af00 <tcp_kill_state+0x8c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	e017      	b.n	800aed8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	7d1b      	ldrb	r3, [r3, #20]
 800aeac:	79fa      	ldrb	r2, [r7, #7]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d10f      	bne.n	800aed2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aeb2:	4b14      	ldr	r3, [pc, #80]	; (800af04 <tcp_kill_state+0x90>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d807      	bhi.n	800aed2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800aec2:	4b10      	ldr	r3, [pc, #64]	; (800af04 <tcp_kill_state+0x90>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e4      	bne.n	800aea8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800aee4:	2100      	movs	r1, #0
 800aee6:	6938      	ldr	r0, [r7, #16]
 800aee8:	f7fe ff7e 	bl	8009de8 <tcp_abandon>
  }
}
 800aeec:	bf00      	nop
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	08016858 	.word	0x08016858
 800aef8:	08016de4 	.word	0x08016de4
 800aefc:	0801689c 	.word	0x0801689c
 800af00:	20007078 	.word	0x20007078
 800af04:	2000707c 	.word	0x2000707c

0800af08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800af16:	4b12      	ldr	r3, [pc, #72]	; (800af60 <tcp_kill_timewait+0x58>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e012      	b.n	800af44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <tcp_kill_timewait+0x5c>)
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d807      	bhi.n	800af3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800af2e:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <tcp_kill_timewait+0x5c>)
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e9      	bne.n	800af1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800af50:	68b8      	ldr	r0, [r7, #8]
 800af52:	f7ff f807 	bl	8009f64 <tcp_abort>
  }
}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20007088 	.word	0x20007088
 800af64:	2000707c 	.word	0x2000707c

0800af68 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <tcp_handle_closepend+0x48>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800af74:	e014      	b.n	800afa0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	8b5b      	ldrh	r3, [r3, #26]
 800af80:	f003 0308 	and.w	r3, r3, #8
 800af84:	2b00      	cmp	r3, #0
 800af86:	d009      	beq.n	800af9c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	8b5b      	ldrh	r3, [r3, #26]
 800af8c:	f023 0308 	bic.w	r3, r3, #8
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7fe fe94 	bl	8009cc4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e7      	bne.n	800af76 <tcp_handle_closepend+0xe>
  }
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	20007078 	.word	0x20007078

0800afb4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800afbe:	2001      	movs	r0, #1
 800afc0:	f7fd fbfa 	bl	80087b8 <memp_malloc>
 800afc4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d126      	bne.n	800b01a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800afcc:	f7ff ffcc 	bl	800af68 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800afd0:	f7ff ff9a 	bl	800af08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800afd4:	2001      	movs	r0, #1
 800afd6:	f7fd fbef 	bl	80087b8 <memp_malloc>
 800afda:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d11b      	bne.n	800b01a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800afe2:	2009      	movs	r0, #9
 800afe4:	f7ff ff46 	bl	800ae74 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800afe8:	2001      	movs	r0, #1
 800afea:	f7fd fbe5 	bl	80087b8 <memp_malloc>
 800afee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d111      	bne.n	800b01a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aff6:	2008      	movs	r0, #8
 800aff8:	f7ff ff3c 	bl	800ae74 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800affc:	2001      	movs	r0, #1
 800affe:	f7fd fbdb 	bl	80087b8 <memp_malloc>
 800b002:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d107      	bne.n	800b01a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff fee3 	bl	800add8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b012:	2001      	movs	r0, #1
 800b014:	f7fd fbd0 	bl	80087b8 <memp_malloc>
 800b018:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d03f      	beq.n	800b0a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b020:	229c      	movs	r2, #156	; 0x9c
 800b022:	2100      	movs	r1, #0
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f007 fb48 	bl	80126ba <memset>
    pcb->prio = prio;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	79fa      	ldrb	r2, [r7, #7]
 800b02e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b036:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b040:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	22ff      	movs	r2, #255	; 0xff
 800b04e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b056:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2206      	movs	r2, #6
 800b05c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2206      	movs	r2, #6
 800b064:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b06c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2201      	movs	r2, #1
 800b072:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b076:	4b0d      	ldr	r3, [pc, #52]	; (800b0ac <tcp_alloc+0xf8>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <tcp_alloc+0xfc>)
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b08c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a08      	ldr	r2, [pc, #32]	; (800b0b4 <tcp_alloc+0x100>)
 800b094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	4a07      	ldr	r2, [pc, #28]	; (800b0b8 <tcp_alloc+0x104>)
 800b09c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	2000707c 	.word	0x2000707c
 800b0b0:	2000024e 	.word	0x2000024e
 800b0b4:	0800ad6d 	.word	0x0800ad6d
 800b0b8:	006ddd00 	.word	0x006ddd00

0800b0bc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800b0c0:	2040      	movs	r0, #64	; 0x40
 800b0c2:	f7ff ff77 	bl	800afb4 <tcp_alloc>
 800b0c6:	4603      	mov	r3, r0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	611a      	str	r2, [r3, #16]
  }
}
 800b0e2:	bf00      	nop
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00e      	beq.n	800b11e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d106      	bne.n	800b116 <tcp_recv+0x26>
 800b108:	4b07      	ldr	r3, [pc, #28]	; (800b128 <tcp_recv+0x38>)
 800b10a:	f240 72df 	movw	r2, #2015	; 0x7df
 800b10e:	4907      	ldr	r1, [pc, #28]	; (800b12c <tcp_recv+0x3c>)
 800b110:	4807      	ldr	r0, [pc, #28]	; (800b130 <tcp_recv+0x40>)
 800b112:	f007 fb83 	bl	801281c <iprintf>
    pcb->recv = recv;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b11e:	bf00      	nop
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	08016858 	.word	0x08016858
 800b12c:	08016df4 	.word	0x08016df4
 800b130:	0801689c 	.word	0x0801689c

0800b134 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00e      	beq.n	800b162 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	7d1b      	ldrb	r3, [r3, #20]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d106      	bne.n	800b15a <tcp_sent+0x26>
 800b14c:	4b07      	ldr	r3, [pc, #28]	; (800b16c <tcp_sent+0x38>)
 800b14e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b152:	4907      	ldr	r1, [pc, #28]	; (800b170 <tcp_sent+0x3c>)
 800b154:	4807      	ldr	r0, [pc, #28]	; (800b174 <tcp_sent+0x40>)
 800b156:	f007 fb61 	bl	801281c <iprintf>
    pcb->sent = sent;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08016858 	.word	0x08016858
 800b170:	08016e1c 	.word	0x08016e1c
 800b174:	0801689c 	.word	0x0801689c

0800b178 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00e      	beq.n	800b1a6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	7d1b      	ldrb	r3, [r3, #20]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d106      	bne.n	800b19e <tcp_err+0x26>
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <tcp_err+0x38>)
 800b192:	f640 020d 	movw	r2, #2061	; 0x80d
 800b196:	4907      	ldr	r1, [pc, #28]	; (800b1b4 <tcp_err+0x3c>)
 800b198:	4807      	ldr	r0, [pc, #28]	; (800b1b8 <tcp_err+0x40>)
 800b19a:	f007 fb3f 	bl	801281c <iprintf>
    pcb->errf = err;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	08016858 	.word	0x08016858
 800b1b4:	08016e44 	.word	0x08016e44
 800b1b8:	0801689c 	.word	0x0801689c

0800b1bc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d008      	beq.n	800b1de <tcp_accept+0x22>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	7d1b      	ldrb	r3, [r3, #20]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d104      	bne.n	800b1de <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	619a      	str	r2, [r3, #24]
  }
}
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
	...

0800b1ec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d107      	bne.n	800b210 <tcp_poll+0x24>
 800b200:	4b0e      	ldr	r3, [pc, #56]	; (800b23c <tcp_poll+0x50>)
 800b202:	f640 023d 	movw	r2, #2109	; 0x83d
 800b206:	490e      	ldr	r1, [pc, #56]	; (800b240 <tcp_poll+0x54>)
 800b208:	480e      	ldr	r0, [pc, #56]	; (800b244 <tcp_poll+0x58>)
 800b20a:	f007 fb07 	bl	801281c <iprintf>
 800b20e:	e011      	b.n	800b234 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	7d1b      	ldrb	r3, [r3, #20]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d106      	bne.n	800b226 <tcp_poll+0x3a>
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <tcp_poll+0x50>)
 800b21a:	f640 023e 	movw	r2, #2110	; 0x83e
 800b21e:	490a      	ldr	r1, [pc, #40]	; (800b248 <tcp_poll+0x5c>)
 800b220:	4808      	ldr	r0, [pc, #32]	; (800b244 <tcp_poll+0x58>)
 800b222:	f007 fafb 	bl	801281c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	79fa      	ldrb	r2, [r7, #7]
 800b232:	775a      	strb	r2, [r3, #29]
}
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	08016858 	.word	0x08016858
 800b240:	08016e6c 	.word	0x08016e6c
 800b244:	0801689c 	.word	0x0801689c
 800b248:	08016e84 	.word	0x08016e84

0800b24c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d107      	bne.n	800b26a <tcp_pcb_purge+0x1e>
 800b25a:	4b21      	ldr	r3, [pc, #132]	; (800b2e0 <tcp_pcb_purge+0x94>)
 800b25c:	f640 0251 	movw	r2, #2129	; 0x851
 800b260:	4920      	ldr	r1, [pc, #128]	; (800b2e4 <tcp_pcb_purge+0x98>)
 800b262:	4821      	ldr	r0, [pc, #132]	; (800b2e8 <tcp_pcb_purge+0x9c>)
 800b264:	f007 fada 	bl	801281c <iprintf>
 800b268:	e037      	b.n	800b2da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7d1b      	ldrb	r3, [r3, #20]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d033      	beq.n	800b2da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b276:	2b0a      	cmp	r3, #10
 800b278:	d02f      	beq.n	800b2da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d02b      	beq.n	800b2da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe f8d8 	bl	8009444 <pbuf_free>
      pcb->refused_data = NULL;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f986 	bl	800b5b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2ae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fce3 	bl	800ac80 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fcde 	bl	800ac80 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	08016858 	.word	0x08016858
 800b2e4:	08016ea4 	.word	0x08016ea4
 800b2e8:	0801689c 	.word	0x0801689c

0800b2ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <tcp_pcb_remove+0x1e>
 800b2fc:	4b3e      	ldr	r3, [pc, #248]	; (800b3f8 <tcp_pcb_remove+0x10c>)
 800b2fe:	f640 0283 	movw	r2, #2179	; 0x883
 800b302:	493e      	ldr	r1, [pc, #248]	; (800b3fc <tcp_pcb_remove+0x110>)
 800b304:	483e      	ldr	r0, [pc, #248]	; (800b400 <tcp_pcb_remove+0x114>)
 800b306:	f007 fa89 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d106      	bne.n	800b31e <tcp_pcb_remove+0x32>
 800b310:	4b39      	ldr	r3, [pc, #228]	; (800b3f8 <tcp_pcb_remove+0x10c>)
 800b312:	f640 0284 	movw	r2, #2180	; 0x884
 800b316:	493b      	ldr	r1, [pc, #236]	; (800b404 <tcp_pcb_remove+0x118>)
 800b318:	4839      	ldr	r0, [pc, #228]	; (800b400 <tcp_pcb_remove+0x114>)
 800b31a:	f007 fa7f 	bl	801281c <iprintf>

  TCP_RMV(pcblist, pcb);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d105      	bne.n	800b334 <tcp_pcb_remove+0x48>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	e013      	b.n	800b35c <tcp_pcb_remove+0x70>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	e00c      	b.n	800b356 <tcp_pcb_remove+0x6a>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d104      	bne.n	800b350 <tcp_pcb_remove+0x64>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68da      	ldr	r2, [r3, #12]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	60da      	str	r2, [r3, #12]
 800b34e:	e005      	b.n	800b35c <tcp_pcb_remove+0x70>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1ef      	bne.n	800b33c <tcp_pcb_remove+0x50>
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2200      	movs	r2, #0
 800b360:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b362:	6838      	ldr	r0, [r7, #0]
 800b364:	f7ff ff72 	bl	800b24c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	7d1b      	ldrb	r3, [r3, #20]
 800b36c:	2b0a      	cmp	r3, #10
 800b36e:	d013      	beq.n	800b398 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b374:	2b01      	cmp	r3, #1
 800b376:	d00f      	beq.n	800b398 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	8b5b      	ldrh	r3, [r3, #26]
 800b37c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	8b5b      	ldrh	r3, [r3, #26]
 800b388:	f043 0302 	orr.w	r3, r3, #2
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b392:	6838      	ldr	r0, [r7, #0]
 800b394:	f003 fbc2 	bl	800eb1c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	7d1b      	ldrb	r3, [r3, #20]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d020      	beq.n	800b3e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d006      	beq.n	800b3b6 <tcp_pcb_remove+0xca>
 800b3a8:	4b13      	ldr	r3, [pc, #76]	; (800b3f8 <tcp_pcb_remove+0x10c>)
 800b3aa:	f640 0293 	movw	r2, #2195	; 0x893
 800b3ae:	4916      	ldr	r1, [pc, #88]	; (800b408 <tcp_pcb_remove+0x11c>)
 800b3b0:	4813      	ldr	r0, [pc, #76]	; (800b400 <tcp_pcb_remove+0x114>)
 800b3b2:	f007 fa33 	bl	801281c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d006      	beq.n	800b3cc <tcp_pcb_remove+0xe0>
 800b3be:	4b0e      	ldr	r3, [pc, #56]	; (800b3f8 <tcp_pcb_remove+0x10c>)
 800b3c0:	f640 0294 	movw	r2, #2196	; 0x894
 800b3c4:	4911      	ldr	r1, [pc, #68]	; (800b40c <tcp_pcb_remove+0x120>)
 800b3c6:	480e      	ldr	r0, [pc, #56]	; (800b400 <tcp_pcb_remove+0x114>)
 800b3c8:	f007 fa28 	bl	801281c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d006      	beq.n	800b3e2 <tcp_pcb_remove+0xf6>
 800b3d4:	4b08      	ldr	r3, [pc, #32]	; (800b3f8 <tcp_pcb_remove+0x10c>)
 800b3d6:	f640 0296 	movw	r2, #2198	; 0x896
 800b3da:	490d      	ldr	r1, [pc, #52]	; (800b410 <tcp_pcb_remove+0x124>)
 800b3dc:	4808      	ldr	r0, [pc, #32]	; (800b400 <tcp_pcb_remove+0x114>)
 800b3de:	f007 fa1d 	bl	801281c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b3ee:	bf00      	nop
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	08016858 	.word	0x08016858
 800b3fc:	08016ec0 	.word	0x08016ec0
 800b400:	0801689c 	.word	0x0801689c
 800b404:	08016edc 	.word	0x08016edc
 800b408:	08016efc 	.word	0x08016efc
 800b40c:	08016f14 	.word	0x08016f14
 800b410:	08016f30 	.word	0x08016f30

0800b414 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <tcp_next_iss+0x1c>
 800b422:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <tcp_next_iss+0x38>)
 800b424:	f640 02af 	movw	r2, #2223	; 0x8af
 800b428:	4909      	ldr	r1, [pc, #36]	; (800b450 <tcp_next_iss+0x3c>)
 800b42a:	480a      	ldr	r0, [pc, #40]	; (800b454 <tcp_next_iss+0x40>)
 800b42c:	f007 f9f6 	bl	801281c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b430:	4b09      	ldr	r3, [pc, #36]	; (800b458 <tcp_next_iss+0x44>)
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	4b09      	ldr	r3, [pc, #36]	; (800b45c <tcp_next_iss+0x48>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4413      	add	r3, r2
 800b43a:	4a07      	ldr	r2, [pc, #28]	; (800b458 <tcp_next_iss+0x44>)
 800b43c:	6013      	str	r3, [r2, #0]
  return iss;
 800b43e:	4b06      	ldr	r3, [pc, #24]	; (800b458 <tcp_next_iss+0x44>)
 800b440:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	08016858 	.word	0x08016858
 800b450:	08016f48 	.word	0x08016f48
 800b454:	0801689c 	.word	0x0801689c
 800b458:	20000018 	.word	0x20000018
 800b45c:	2000707c 	.word	0x2000707c

0800b460 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
 800b46c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d106      	bne.n	800b482 <tcp_eff_send_mss_netif+0x22>
 800b474:	4b14      	ldr	r3, [pc, #80]	; (800b4c8 <tcp_eff_send_mss_netif+0x68>)
 800b476:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b47a:	4914      	ldr	r1, [pc, #80]	; (800b4cc <tcp_eff_send_mss_netif+0x6c>)
 800b47c:	4814      	ldr	r0, [pc, #80]	; (800b4d0 <tcp_eff_send_mss_netif+0x70>)
 800b47e:	f007 f9cd 	bl	801281c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b488:	89fb      	ldrh	r3, [r7, #14]
 800b48a:	e019      	b.n	800b4c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	8c1b      	ldrh	r3, [r3, #32]
 800b490:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b492:	8afb      	ldrh	r3, [r7, #22]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d012      	beq.n	800b4be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b498:	2328      	movs	r3, #40	; 0x28
 800b49a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b49c:	8afa      	ldrh	r2, [r7, #22]
 800b49e:	8abb      	ldrh	r3, [r7, #20]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d904      	bls.n	800b4ae <tcp_eff_send_mss_netif+0x4e>
 800b4a4:	8afa      	ldrh	r2, [r7, #22]
 800b4a6:	8abb      	ldrh	r3, [r7, #20]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	e000      	b.n	800b4b0 <tcp_eff_send_mss_netif+0x50>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b4b2:	8a7a      	ldrh	r2, [r7, #18]
 800b4b4:	89fb      	ldrh	r3, [r7, #14]
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	bf28      	it	cs
 800b4ba:	4613      	movcs	r3, r2
 800b4bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b4be:	89fb      	ldrh	r3, [r7, #14]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	08016858 	.word	0x08016858
 800b4cc:	08016f64 	.word	0x08016f64
 800b4d0:	0801689c 	.word	0x0801689c

0800b4d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d119      	bne.n	800b51c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b4e8:	4b10      	ldr	r3, [pc, #64]	; (800b52c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b4ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b4ee:	4910      	ldr	r1, [pc, #64]	; (800b530 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b4f0:	4810      	ldr	r0, [pc, #64]	; (800b534 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b4f2:	f007 f993 	bl	801281c <iprintf>

  while (pcb != NULL) {
 800b4f6:	e011      	b.n	800b51c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d108      	bne.n	800b516 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7fe fd2a 	bl	8009f64 <tcp_abort>
      pcb = next;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e002      	b.n	800b51c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1ea      	bne.n	800b4f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b522:	bf00      	nop
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	08016858 	.word	0x08016858
 800b530:	08016f8c 	.word	0x08016f8c
 800b534:	0801689c 	.word	0x0801689c

0800b538 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d02a      	beq.n	800b59e <tcp_netif_ip_addr_changed+0x66>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d026      	beq.n	800b59e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b550:	4b15      	ldr	r3, [pc, #84]	; (800b5a8 <tcp_netif_ip_addr_changed+0x70>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff ffbc 	bl	800b4d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b55c:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <tcp_netif_ip_addr_changed+0x74>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff ffb6 	bl	800b4d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d017      	beq.n	800b59e <tcp_netif_ip_addr_changed+0x66>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d013      	beq.n	800b59e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b576:	4b0e      	ldr	r3, [pc, #56]	; (800b5b0 <tcp_netif_ip_addr_changed+0x78>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	e00c      	b.n	800b598 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d103      	bne.n	800b592 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1ef      	bne.n	800b57e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b59e:	bf00      	nop
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20007078 	.word	0x20007078
 800b5ac:	20007084 	.word	0x20007084
 800b5b0:	20007080 	.word	0x20007080

0800b5b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d007      	beq.n	800b5d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fb59 	bl	800ac80 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b08d      	sub	sp, #52	; 0x34
 800b5e0:	af04      	add	r7, sp, #16
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d105      	bne.n	800b5f8 <tcp_input+0x1c>
 800b5ec:	4b9b      	ldr	r3, [pc, #620]	; (800b85c <tcp_input+0x280>)
 800b5ee:	2283      	movs	r2, #131	; 0x83
 800b5f0:	499b      	ldr	r1, [pc, #620]	; (800b860 <tcp_input+0x284>)
 800b5f2:	489c      	ldr	r0, [pc, #624]	; (800b864 <tcp_input+0x288>)
 800b5f4:	f007 f912 	bl	801281c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4a9a      	ldr	r2, [pc, #616]	; (800b868 <tcp_input+0x28c>)
 800b5fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	895b      	ldrh	r3, [r3, #10]
 800b604:	2b13      	cmp	r3, #19
 800b606:	f240 83c4 	bls.w	800bd92 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b60a:	4b98      	ldr	r3, [pc, #608]	; (800b86c <tcp_input+0x290>)
 800b60c:	695a      	ldr	r2, [r3, #20]
 800b60e:	4b97      	ldr	r3, [pc, #604]	; (800b86c <tcp_input+0x290>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f006 f879 	bl	801170c <ip4_addr_isbroadcast_u32>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f040 83ba 	bne.w	800bd96 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b622:	4b92      	ldr	r3, [pc, #584]	; (800b86c <tcp_input+0x290>)
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b62a:	2be0      	cmp	r3, #224	; 0xe0
 800b62c:	f000 83b3 	beq.w	800bd96 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b630:	4b8d      	ldr	r3, [pc, #564]	; (800b868 <tcp_input+0x28c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	899b      	ldrh	r3, [r3, #12]
 800b636:	b29b      	uxth	r3, r3
 800b638:	4618      	mov	r0, r3
 800b63a:	f7fc fc68 	bl	8007f0e <lwip_htons>
 800b63e:	4603      	mov	r3, r0
 800b640:	0b1b      	lsrs	r3, r3, #12
 800b642:	b29b      	uxth	r3, r3
 800b644:	b2db      	uxtb	r3, r3
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b64a:	7cbb      	ldrb	r3, [r7, #18]
 800b64c:	2b13      	cmp	r3, #19
 800b64e:	f240 83a2 	bls.w	800bd96 <tcp_input+0x7ba>
 800b652:	7cbb      	ldrb	r3, [r7, #18]
 800b654:	b29a      	uxth	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	891b      	ldrh	r3, [r3, #8]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	f200 839b 	bhi.w	800bd96 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b660:	7cbb      	ldrb	r3, [r7, #18]
 800b662:	b29b      	uxth	r3, r3
 800b664:	3b14      	subs	r3, #20
 800b666:	b29a      	uxth	r2, r3
 800b668:	4b81      	ldr	r3, [pc, #516]	; (800b870 <tcp_input+0x294>)
 800b66a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b66c:	4b81      	ldr	r3, [pc, #516]	; (800b874 <tcp_input+0x298>)
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	895a      	ldrh	r2, [r3, #10]
 800b676:	7cbb      	ldrb	r3, [r7, #18]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d309      	bcc.n	800b692 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b67e:	4b7c      	ldr	r3, [pc, #496]	; (800b870 <tcp_input+0x294>)
 800b680:	881a      	ldrh	r2, [r3, #0]
 800b682:	4b7d      	ldr	r3, [pc, #500]	; (800b878 <tcp_input+0x29c>)
 800b684:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b686:	7cbb      	ldrb	r3, [r7, #18]
 800b688:	4619      	mov	r1, r3
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7fd fe54 	bl	8009338 <pbuf_remove_header>
 800b690:	e04e      	b.n	800b730 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d105      	bne.n	800b6a6 <tcp_input+0xca>
 800b69a:	4b70      	ldr	r3, [pc, #448]	; (800b85c <tcp_input+0x280>)
 800b69c:	22c2      	movs	r2, #194	; 0xc2
 800b69e:	4977      	ldr	r1, [pc, #476]	; (800b87c <tcp_input+0x2a0>)
 800b6a0:	4870      	ldr	r0, [pc, #448]	; (800b864 <tcp_input+0x288>)
 800b6a2:	f007 f8bb 	bl	801281c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b6a6:	2114      	movs	r1, #20
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7fd fe45 	bl	8009338 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	895a      	ldrh	r2, [r3, #10]
 800b6b2:	4b71      	ldr	r3, [pc, #452]	; (800b878 <tcp_input+0x29c>)
 800b6b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b6b6:	4b6e      	ldr	r3, [pc, #440]	; (800b870 <tcp_input+0x294>)
 800b6b8:	881a      	ldrh	r2, [r3, #0]
 800b6ba:	4b6f      	ldr	r3, [pc, #444]	; (800b878 <tcp_input+0x29c>)
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b6c2:	4b6d      	ldr	r3, [pc, #436]	; (800b878 <tcp_input+0x29c>)
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7fd fe35 	bl	8009338 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	895b      	ldrh	r3, [r3, #10]
 800b6d4:	8a3a      	ldrh	r2, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	f200 835f 	bhi.w	800bd9a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	4a64      	ldr	r2, [pc, #400]	; (800b874 <tcp_input+0x298>)
 800b6e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	8a3a      	ldrh	r2, [r7, #16]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd fe22 	bl	8009338 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	891a      	ldrh	r2, [r3, #8]
 800b6f8:	8a3b      	ldrh	r3, [r7, #16]
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	895b      	ldrh	r3, [r3, #10]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d005      	beq.n	800b716 <tcp_input+0x13a>
 800b70a:	4b54      	ldr	r3, [pc, #336]	; (800b85c <tcp_input+0x280>)
 800b70c:	22df      	movs	r2, #223	; 0xdf
 800b70e:	495c      	ldr	r1, [pc, #368]	; (800b880 <tcp_input+0x2a4>)
 800b710:	4854      	ldr	r0, [pc, #336]	; (800b864 <tcp_input+0x288>)
 800b712:	f007 f883 	bl	801281c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	891a      	ldrh	r2, [r3, #8]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	891b      	ldrh	r3, [r3, #8]
 800b720:	429a      	cmp	r2, r3
 800b722:	d005      	beq.n	800b730 <tcp_input+0x154>
 800b724:	4b4d      	ldr	r3, [pc, #308]	; (800b85c <tcp_input+0x280>)
 800b726:	22e0      	movs	r2, #224	; 0xe0
 800b728:	4956      	ldr	r1, [pc, #344]	; (800b884 <tcp_input+0x2a8>)
 800b72a:	484e      	ldr	r0, [pc, #312]	; (800b864 <tcp_input+0x288>)
 800b72c:	f007 f876 	bl	801281c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b730:	4b4d      	ldr	r3, [pc, #308]	; (800b868 <tcp_input+0x28c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	b29a      	uxth	r2, r3
 800b738:	4b4b      	ldr	r3, [pc, #300]	; (800b868 <tcp_input+0x28c>)
 800b73a:	681c      	ldr	r4, [r3, #0]
 800b73c:	4610      	mov	r0, r2
 800b73e:	f7fc fbe6 	bl	8007f0e <lwip_htons>
 800b742:	4603      	mov	r3, r0
 800b744:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b746:	4b48      	ldr	r3, [pc, #288]	; (800b868 <tcp_input+0x28c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	885b      	ldrh	r3, [r3, #2]
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	4b46      	ldr	r3, [pc, #280]	; (800b868 <tcp_input+0x28c>)
 800b750:	681c      	ldr	r4, [r3, #0]
 800b752:	4610      	mov	r0, r2
 800b754:	f7fc fbdb 	bl	8007f0e <lwip_htons>
 800b758:	4603      	mov	r3, r0
 800b75a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b75c:	4b42      	ldr	r3, [pc, #264]	; (800b868 <tcp_input+0x28c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	4b41      	ldr	r3, [pc, #260]	; (800b868 <tcp_input+0x28c>)
 800b764:	681c      	ldr	r4, [r3, #0]
 800b766:	4610      	mov	r0, r2
 800b768:	f7fc fbe6 	bl	8007f38 <lwip_htonl>
 800b76c:	4603      	mov	r3, r0
 800b76e:	6063      	str	r3, [r4, #4]
 800b770:	6863      	ldr	r3, [r4, #4]
 800b772:	4a45      	ldr	r2, [pc, #276]	; (800b888 <tcp_input+0x2ac>)
 800b774:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b776:	4b3c      	ldr	r3, [pc, #240]	; (800b868 <tcp_input+0x28c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	689a      	ldr	r2, [r3, #8]
 800b77c:	4b3a      	ldr	r3, [pc, #232]	; (800b868 <tcp_input+0x28c>)
 800b77e:	681c      	ldr	r4, [r3, #0]
 800b780:	4610      	mov	r0, r2
 800b782:	f7fc fbd9 	bl	8007f38 <lwip_htonl>
 800b786:	4603      	mov	r3, r0
 800b788:	60a3      	str	r3, [r4, #8]
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	4a3f      	ldr	r2, [pc, #252]	; (800b88c <tcp_input+0x2b0>)
 800b78e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b790:	4b35      	ldr	r3, [pc, #212]	; (800b868 <tcp_input+0x28c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	89db      	ldrh	r3, [r3, #14]
 800b796:	b29a      	uxth	r2, r3
 800b798:	4b33      	ldr	r3, [pc, #204]	; (800b868 <tcp_input+0x28c>)
 800b79a:	681c      	ldr	r4, [r3, #0]
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7fc fbb6 	bl	8007f0e <lwip_htons>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b7a6:	4b30      	ldr	r3, [pc, #192]	; (800b868 <tcp_input+0x28c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	899b      	ldrh	r3, [r3, #12]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fc fbad 	bl	8007f0e <lwip_htons>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	4b34      	ldr	r3, [pc, #208]	; (800b890 <tcp_input+0x2b4>)
 800b7c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	891a      	ldrh	r2, [r3, #8]
 800b7c6:	4b33      	ldr	r3, [pc, #204]	; (800b894 <tcp_input+0x2b8>)
 800b7c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b7ca:	4b31      	ldr	r3, [pc, #196]	; (800b890 <tcp_input+0x2b4>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	f003 0303 	and.w	r3, r3, #3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00c      	beq.n	800b7f0 <tcp_input+0x214>
    tcplen++;
 800b7d6:	4b2f      	ldr	r3, [pc, #188]	; (800b894 <tcp_input+0x2b8>)
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	4b2d      	ldr	r3, [pc, #180]	; (800b894 <tcp_input+0x2b8>)
 800b7e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	891a      	ldrh	r2, [r3, #8]
 800b7e6:	4b2b      	ldr	r3, [pc, #172]	; (800b894 <tcp_input+0x2b8>)
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	f200 82d7 	bhi.w	800bd9e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7f4:	4b28      	ldr	r3, [pc, #160]	; (800b898 <tcp_input+0x2bc>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	e09d      	b.n	800b938 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	7d1b      	ldrb	r3, [r3, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d105      	bne.n	800b810 <tcp_input+0x234>
 800b804:	4b15      	ldr	r3, [pc, #84]	; (800b85c <tcp_input+0x280>)
 800b806:	22fb      	movs	r2, #251	; 0xfb
 800b808:	4924      	ldr	r1, [pc, #144]	; (800b89c <tcp_input+0x2c0>)
 800b80a:	4816      	ldr	r0, [pc, #88]	; (800b864 <tcp_input+0x288>)
 800b80c:	f007 f806 	bl	801281c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	7d1b      	ldrb	r3, [r3, #20]
 800b814:	2b0a      	cmp	r3, #10
 800b816:	d105      	bne.n	800b824 <tcp_input+0x248>
 800b818:	4b10      	ldr	r3, [pc, #64]	; (800b85c <tcp_input+0x280>)
 800b81a:	22fc      	movs	r2, #252	; 0xfc
 800b81c:	4920      	ldr	r1, [pc, #128]	; (800b8a0 <tcp_input+0x2c4>)
 800b81e:	4811      	ldr	r0, [pc, #68]	; (800b864 <tcp_input+0x288>)
 800b820:	f006 fffc 	bl	801281c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	7d1b      	ldrb	r3, [r3, #20]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d105      	bne.n	800b838 <tcp_input+0x25c>
 800b82c:	4b0b      	ldr	r3, [pc, #44]	; (800b85c <tcp_input+0x280>)
 800b82e:	22fd      	movs	r2, #253	; 0xfd
 800b830:	491c      	ldr	r1, [pc, #112]	; (800b8a4 <tcp_input+0x2c8>)
 800b832:	480c      	ldr	r0, [pc, #48]	; (800b864 <tcp_input+0x288>)
 800b834:	f006 fff2 	bl	801281c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	7a1b      	ldrb	r3, [r3, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d033      	beq.n	800b8a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	7a1a      	ldrb	r2, [r3, #8]
 800b844:	4b09      	ldr	r3, [pc, #36]	; (800b86c <tcp_input+0x290>)
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b84c:	3301      	adds	r3, #1
 800b84e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b850:	429a      	cmp	r2, r3
 800b852:	d029      	beq.n	800b8a8 <tcp_input+0x2cc>
      prev = pcb;
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	61bb      	str	r3, [r7, #24]
      continue;
 800b858:	e06b      	b.n	800b932 <tcp_input+0x356>
 800b85a:	bf00      	nop
 800b85c:	08016fc0 	.word	0x08016fc0
 800b860:	08016ff4 	.word	0x08016ff4
 800b864:	0801700c 	.word	0x0801700c
 800b868:	20000260 	.word	0x20000260
 800b86c:	20003b34 	.word	0x20003b34
 800b870:	20000264 	.word	0x20000264
 800b874:	20000268 	.word	0x20000268
 800b878:	20000266 	.word	0x20000266
 800b87c:	08017034 	.word	0x08017034
 800b880:	08017044 	.word	0x08017044
 800b884:	08017050 	.word	0x08017050
 800b888:	20000270 	.word	0x20000270
 800b88c:	20000274 	.word	0x20000274
 800b890:	2000027c 	.word	0x2000027c
 800b894:	2000027a 	.word	0x2000027a
 800b898:	20007078 	.word	0x20007078
 800b89c:	08017070 	.word	0x08017070
 800b8a0:	08017098 	.word	0x08017098
 800b8a4:	080170c4 	.word	0x080170c4
    }

    if (pcb->remote_port == tcphdr->src &&
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	8b1a      	ldrh	r2, [r3, #24]
 800b8ac:	4b94      	ldr	r3, [pc, #592]	; (800bb00 <tcp_input+0x524>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d13a      	bne.n	800b92e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	8ada      	ldrh	r2, [r3, #22]
 800b8bc:	4b90      	ldr	r3, [pc, #576]	; (800bb00 <tcp_input+0x524>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	885b      	ldrh	r3, [r3, #2]
 800b8c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d132      	bne.n	800b92e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	4b8d      	ldr	r3, [pc, #564]	; (800bb04 <tcp_input+0x528>)
 800b8ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d12c      	bne.n	800b92e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	4b8a      	ldr	r3, [pc, #552]	; (800bb04 <tcp_input+0x528>)
 800b8da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d126      	bne.n	800b92e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	69fa      	ldr	r2, [r7, #28]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d106      	bne.n	800b8f8 <tcp_input+0x31c>
 800b8ea:	4b87      	ldr	r3, [pc, #540]	; (800bb08 <tcp_input+0x52c>)
 800b8ec:	f240 120d 	movw	r2, #269	; 0x10d
 800b8f0:	4986      	ldr	r1, [pc, #536]	; (800bb0c <tcp_input+0x530>)
 800b8f2:	4887      	ldr	r0, [pc, #540]	; (800bb10 <tcp_input+0x534>)
 800b8f4:	f006 ff92 	bl	801281c <iprintf>
      if (prev != NULL) {
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <tcp_input+0x338>
        prev->next = pcb->next;
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	68da      	ldr	r2, [r3, #12]
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b906:	4b83      	ldr	r3, [pc, #524]	; (800bb14 <tcp_input+0x538>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b90e:	4a81      	ldr	r2, [pc, #516]	; (800bb14 <tcp_input+0x538>)
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d111      	bne.n	800b942 <tcp_input+0x366>
 800b91e:	4b7a      	ldr	r3, [pc, #488]	; (800bb08 <tcp_input+0x52c>)
 800b920:	f240 1215 	movw	r2, #277	; 0x115
 800b924:	497c      	ldr	r1, [pc, #496]	; (800bb18 <tcp_input+0x53c>)
 800b926:	487a      	ldr	r0, [pc, #488]	; (800bb10 <tcp_input+0x534>)
 800b928:	f006 ff78 	bl	801281c <iprintf>
      break;
 800b92c:	e009      	b.n	800b942 <tcp_input+0x366>
    }
    prev = pcb;
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f47f af5e 	bne.w	800b7fc <tcp_input+0x220>
 800b940:	e000      	b.n	800b944 <tcp_input+0x368>
      break;
 800b942:	bf00      	nop
  }

  if (pcb == NULL) {
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f040 8095 	bne.w	800ba76 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b94c:	4b73      	ldr	r3, [pc, #460]	; (800bb1c <tcp_input+0x540>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	e03f      	b.n	800b9d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	7d1b      	ldrb	r3, [r3, #20]
 800b958:	2b0a      	cmp	r3, #10
 800b95a:	d006      	beq.n	800b96a <tcp_input+0x38e>
 800b95c:	4b6a      	ldr	r3, [pc, #424]	; (800bb08 <tcp_input+0x52c>)
 800b95e:	f240 121f 	movw	r2, #287	; 0x11f
 800b962:	496f      	ldr	r1, [pc, #444]	; (800bb20 <tcp_input+0x544>)
 800b964:	486a      	ldr	r0, [pc, #424]	; (800bb10 <tcp_input+0x534>)
 800b966:	f006 ff59 	bl	801281c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	7a1b      	ldrb	r3, [r3, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d009      	beq.n	800b986 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	7a1a      	ldrb	r2, [r3, #8]
 800b976:	4b63      	ldr	r3, [pc, #396]	; (800bb04 <tcp_input+0x528>)
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b97e:	3301      	adds	r3, #1
 800b980:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b982:	429a      	cmp	r2, r3
 800b984:	d122      	bne.n	800b9cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	8b1a      	ldrh	r2, [r3, #24]
 800b98a:	4b5d      	ldr	r3, [pc, #372]	; (800bb00 <tcp_input+0x524>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b29b      	uxth	r3, r3
 800b992:	429a      	cmp	r2, r3
 800b994:	d11b      	bne.n	800b9ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	8ada      	ldrh	r2, [r3, #22]
 800b99a:	4b59      	ldr	r3, [pc, #356]	; (800bb00 <tcp_input+0x524>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	885b      	ldrh	r3, [r3, #2]
 800b9a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d113      	bne.n	800b9ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	4b56      	ldr	r3, [pc, #344]	; (800bb04 <tcp_input+0x528>)
 800b9ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d10d      	bne.n	800b9ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	4b53      	ldr	r3, [pc, #332]	; (800bb04 <tcp_input+0x528>)
 800b9b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d107      	bne.n	800b9ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b9be:	69f8      	ldr	r0, [r7, #28]
 800b9c0:	f000 fb52 	bl	800c068 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7fd fd3d 	bl	8009444 <pbuf_free>
        return;
 800b9ca:	e1ee      	b.n	800bdaa <tcp_input+0x7ce>
        continue;
 800b9cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	61fb      	str	r3, [r7, #28]
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1bc      	bne.n	800b954 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b9de:	4b51      	ldr	r3, [pc, #324]	; (800bb24 <tcp_input+0x548>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	617b      	str	r3, [r7, #20]
 800b9e4:	e02a      	b.n	800ba3c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	7a1b      	ldrb	r3, [r3, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00c      	beq.n	800ba08 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	7a1a      	ldrb	r2, [r3, #8]
 800b9f2:	4b44      	ldr	r3, [pc, #272]	; (800bb04 <tcp_input+0x528>)
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d002      	beq.n	800ba08 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	61bb      	str	r3, [r7, #24]
        continue;
 800ba06:	e016      	b.n	800ba36 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	8ada      	ldrh	r2, [r3, #22]
 800ba0c:	4b3c      	ldr	r3, [pc, #240]	; (800bb00 <tcp_input+0x524>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	885b      	ldrh	r3, [r3, #2]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d10c      	bne.n	800ba32 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	4b39      	ldr	r3, [pc, #228]	; (800bb04 <tcp_input+0x528>)
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d00f      	beq.n	800ba44 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <tcp_input+0x46a>
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d009      	beq.n	800ba46 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1d1      	bne.n	800b9e6 <tcp_input+0x40a>
 800ba42:	e000      	b.n	800ba46 <tcp_input+0x46a>
            break;
 800ba44:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d014      	beq.n	800ba76 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	68da      	ldr	r2, [r3, #12]
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ba5a:	4b32      	ldr	r3, [pc, #200]	; (800bb24 <tcp_input+0x548>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ba62:	4a30      	ldr	r2, [pc, #192]	; (800bb24 <tcp_input+0x548>)
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ba68:	6978      	ldr	r0, [r7, #20]
 800ba6a:	f000 f9ff 	bl	800be6c <tcp_listen_input>
      }
      pbuf_free(p);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7fd fce8 	bl	8009444 <pbuf_free>
      return;
 800ba74:	e199      	b.n	800bdaa <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 8160 	beq.w	800bd3e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ba7e:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <tcp_input+0x54c>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	891a      	ldrh	r2, [r3, #8]
 800ba88:	4b27      	ldr	r3, [pc, #156]	; (800bb28 <tcp_input+0x54c>)
 800ba8a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ba8c:	4a26      	ldr	r2, [pc, #152]	; (800bb28 <tcp_input+0x54c>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ba92:	4b1b      	ldr	r3, [pc, #108]	; (800bb00 <tcp_input+0x524>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a24      	ldr	r2, [pc, #144]	; (800bb28 <tcp_input+0x54c>)
 800ba98:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ba9a:	4b24      	ldr	r3, [pc, #144]	; (800bb2c <tcp_input+0x550>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800baa0:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <tcp_input+0x554>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800baa6:	4b23      	ldr	r3, [pc, #140]	; (800bb34 <tcp_input+0x558>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800baac:	4b22      	ldr	r3, [pc, #136]	; (800bb38 <tcp_input+0x55c>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	f003 0308 	and.w	r3, r3, #8
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d006      	beq.n	800bac6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7b5b      	ldrb	r3, [r3, #13]
 800babc:	f043 0301 	orr.w	r3, r3, #1
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d038      	beq.n	800bb40 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bace:	69f8      	ldr	r0, [r7, #28]
 800bad0:	f7ff f85a 	bl	800ab88 <tcp_process_refused_data>
 800bad4:	4603      	mov	r3, r0
 800bad6:	f113 0f0d 	cmn.w	r3, #13
 800bada:	d007      	beq.n	800baec <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d02d      	beq.n	800bb40 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bae4:	4b15      	ldr	r3, [pc, #84]	; (800bb3c <tcp_input+0x560>)
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d029      	beq.n	800bb40 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 8104 	bne.w	800bcfe <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800baf6:	69f8      	ldr	r0, [r7, #28]
 800baf8:	f003 fe28 	bl	800f74c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bafc:	e0ff      	b.n	800bcfe <tcp_input+0x722>
 800bafe:	bf00      	nop
 800bb00:	20000260 	.word	0x20000260
 800bb04:	20003b34 	.word	0x20003b34
 800bb08:	08016fc0 	.word	0x08016fc0
 800bb0c:	080170ec 	.word	0x080170ec
 800bb10:	0801700c 	.word	0x0801700c
 800bb14:	20007078 	.word	0x20007078
 800bb18:	08017118 	.word	0x08017118
 800bb1c:	20007088 	.word	0x20007088
 800bb20:	08017144 	.word	0x08017144
 800bb24:	20007080 	.word	0x20007080
 800bb28:	20000250 	.word	0x20000250
 800bb2c:	20000280 	.word	0x20000280
 800bb30:	2000027d 	.word	0x2000027d
 800bb34:	20000278 	.word	0x20000278
 800bb38:	2000027c 	.word	0x2000027c
 800bb3c:	2000027a 	.word	0x2000027a
      }
    }
    tcp_input_pcb = pcb;
 800bb40:	4a9b      	ldr	r2, [pc, #620]	; (800bdb0 <tcp_input+0x7d4>)
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bb46:	69f8      	ldr	r0, [r7, #28]
 800bb48:	f000 fb0a 	bl	800c160 <tcp_process>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bb50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb54:	f113 0f0d 	cmn.w	r3, #13
 800bb58:	f000 80d3 	beq.w	800bd02 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800bb5c:	4b95      	ldr	r3, [pc, #596]	; (800bdb4 <tcp_input+0x7d8>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d015      	beq.n	800bb94 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d008      	beq.n	800bb84 <tcp_input+0x5a8>
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb78:	69fa      	ldr	r2, [r7, #28]
 800bb7a:	6912      	ldr	r2, [r2, #16]
 800bb7c:	f06f 010d 	mvn.w	r1, #13
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bb84:	69f9      	ldr	r1, [r7, #28]
 800bb86:	488c      	ldr	r0, [pc, #560]	; (800bdb8 <tcp_input+0x7dc>)
 800bb88:	f7ff fbb0 	bl	800b2ec <tcp_pcb_remove>
        tcp_free(pcb);
 800bb8c:	69f8      	ldr	r0, [r7, #28]
 800bb8e:	f7fd ff09 	bl	80099a4 <tcp_free>
 800bb92:	e0c1      	b.n	800bd18 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bb98:	4b88      	ldr	r3, [pc, #544]	; (800bdbc <tcp_input+0x7e0>)
 800bb9a:	881b      	ldrh	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d01d      	beq.n	800bbdc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bba0:	4b86      	ldr	r3, [pc, #536]	; (800bdbc <tcp_input+0x7e0>)
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00a      	beq.n	800bbc6 <tcp_input+0x5ea>
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb6:	69fa      	ldr	r2, [r7, #28]
 800bbb8:	6910      	ldr	r0, [r2, #16]
 800bbba:	89fa      	ldrh	r2, [r7, #14]
 800bbbc:	69f9      	ldr	r1, [r7, #28]
 800bbbe:	4798      	blx	r3
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	74fb      	strb	r3, [r7, #19]
 800bbc4:	e001      	b.n	800bbca <tcp_input+0x5ee>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bbca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbce:	f113 0f0d 	cmn.w	r3, #13
 800bbd2:	f000 8098 	beq.w	800bd06 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bbd6:	4b79      	ldr	r3, [pc, #484]	; (800bdbc <tcp_input+0x7e0>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bbdc:	69f8      	ldr	r0, [r7, #28]
 800bbde:	f000 f905 	bl	800bdec <tcp_input_delayed_close>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f040 8090 	bne.w	800bd0a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bbea:	4b75      	ldr	r3, [pc, #468]	; (800bdc0 <tcp_input+0x7e4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d041      	beq.n	800bc76 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d006      	beq.n	800bc08 <tcp_input+0x62c>
 800bbfa:	4b72      	ldr	r3, [pc, #456]	; (800bdc4 <tcp_input+0x7e8>)
 800bbfc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bc00:	4971      	ldr	r1, [pc, #452]	; (800bdc8 <tcp_input+0x7ec>)
 800bc02:	4872      	ldr	r0, [pc, #456]	; (800bdcc <tcp_input+0x7f0>)
 800bc04:	f006 fe0a 	bl	801281c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	8b5b      	ldrh	r3, [r3, #26]
 800bc0c:	f003 0310 	and.w	r3, r3, #16
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d008      	beq.n	800bc26 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bc14:	4b6a      	ldr	r3, [pc, #424]	; (800bdc0 <tcp_input+0x7e4>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fd fc13 	bl	8009444 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bc1e:	69f8      	ldr	r0, [r7, #28]
 800bc20:	f7fe f9a0 	bl	8009f64 <tcp_abort>
            goto aborted;
 800bc24:	e078      	b.n	800bd18 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00c      	beq.n	800bc4a <tcp_input+0x66e>
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	6918      	ldr	r0, [r3, #16]
 800bc3a:	4b61      	ldr	r3, [pc, #388]	; (800bdc0 <tcp_input+0x7e4>)
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	69f9      	ldr	r1, [r7, #28]
 800bc42:	47a0      	blx	r4
 800bc44:	4603      	mov	r3, r0
 800bc46:	74fb      	strb	r3, [r7, #19]
 800bc48:	e008      	b.n	800bc5c <tcp_input+0x680>
 800bc4a:	4b5d      	ldr	r3, [pc, #372]	; (800bdc0 <tcp_input+0x7e4>)
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	69f9      	ldr	r1, [r7, #28]
 800bc52:	2000      	movs	r0, #0
 800bc54:	f7ff f88a 	bl	800ad6c <tcp_recv_null>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bc5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc60:	f113 0f0d 	cmn.w	r3, #13
 800bc64:	d053      	beq.n	800bd0e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bc66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bc6e:	4b54      	ldr	r3, [pc, #336]	; (800bdc0 <tcp_input+0x7e4>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bc76:	4b4f      	ldr	r3, [pc, #316]	; (800bdb4 <tcp_input+0x7d8>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	f003 0320 	and.w	r3, r3, #32
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d030      	beq.n	800bce4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d009      	beq.n	800bc9e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc8e:	7b5a      	ldrb	r2, [r3, #13]
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc94:	f042 0220 	orr.w	r2, r2, #32
 800bc98:	b2d2      	uxtb	r2, r2
 800bc9a:	735a      	strb	r2, [r3, #13]
 800bc9c:	e022      	b.n	800bce4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bca2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bca6:	d005      	beq.n	800bcb4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcac:	3301      	adds	r3, #1
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00b      	beq.n	800bcd6 <tcp_input+0x6fa>
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	6918      	ldr	r0, [r3, #16]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	2200      	movs	r2, #0
 800bccc:	69f9      	ldr	r1, [r7, #28]
 800bcce:	47a0      	blx	r4
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	74fb      	strb	r3, [r7, #19]
 800bcd4:	e001      	b.n	800bcda <tcp_input+0x6fe>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bcda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcde:	f113 0f0d 	cmn.w	r3, #13
 800bce2:	d016      	beq.n	800bd12 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bce4:	4b32      	ldr	r3, [pc, #200]	; (800bdb0 <tcp_input+0x7d4>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bcea:	69f8      	ldr	r0, [r7, #28]
 800bcec:	f000 f87e 	bl	800bdec <tcp_input_delayed_close>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10f      	bne.n	800bd16 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bcf6:	69f8      	ldr	r0, [r7, #28]
 800bcf8:	f002 ff10 	bl	800eb1c <tcp_output>
 800bcfc:	e00c      	b.n	800bd18 <tcp_input+0x73c>
        goto aborted;
 800bcfe:	bf00      	nop
 800bd00:	e00a      	b.n	800bd18 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bd02:	bf00      	nop
 800bd04:	e008      	b.n	800bd18 <tcp_input+0x73c>
              goto aborted;
 800bd06:	bf00      	nop
 800bd08:	e006      	b.n	800bd18 <tcp_input+0x73c>
          goto aborted;
 800bd0a:	bf00      	nop
 800bd0c:	e004      	b.n	800bd18 <tcp_input+0x73c>
            goto aborted;
 800bd0e:	bf00      	nop
 800bd10:	e002      	b.n	800bd18 <tcp_input+0x73c>
              goto aborted;
 800bd12:	bf00      	nop
 800bd14:	e000      	b.n	800bd18 <tcp_input+0x73c>
          goto aborted;
 800bd16:	bf00      	nop
    tcp_input_pcb = NULL;
 800bd18:	4b25      	ldr	r3, [pc, #148]	; (800bdb0 <tcp_input+0x7d4>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bd1e:	4b28      	ldr	r3, [pc, #160]	; (800bdc0 <tcp_input+0x7e4>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bd24:	4b2a      	ldr	r3, [pc, #168]	; (800bdd0 <tcp_input+0x7f4>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d03d      	beq.n	800bda8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800bd2c:	4b28      	ldr	r3, [pc, #160]	; (800bdd0 <tcp_input+0x7f4>)
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fd fb87 	bl	8009444 <pbuf_free>
      inseg.p = NULL;
 800bd36:	4b26      	ldr	r3, [pc, #152]	; (800bdd0 <tcp_input+0x7f4>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bd3c:	e034      	b.n	800bda8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bd3e:	4b25      	ldr	r3, [pc, #148]	; (800bdd4 <tcp_input+0x7f8>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	899b      	ldrh	r3, [r3, #12]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fc f8e1 	bl	8007f0e <lwip_htons>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d118      	bne.n	800bd8a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd58:	4b1f      	ldr	r3, [pc, #124]	; (800bdd8 <tcp_input+0x7fc>)
 800bd5a:	6819      	ldr	r1, [r3, #0]
 800bd5c:	4b1f      	ldr	r3, [pc, #124]	; (800bddc <tcp_input+0x800>)
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	461a      	mov	r2, r3
 800bd62:	4b1f      	ldr	r3, [pc, #124]	; (800bde0 <tcp_input+0x804>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd68:	4b1a      	ldr	r3, [pc, #104]	; (800bdd4 <tcp_input+0x7f8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd6c:	885b      	ldrh	r3, [r3, #2]
 800bd6e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd70:	4a18      	ldr	r2, [pc, #96]	; (800bdd4 <tcp_input+0x7f8>)
 800bd72:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd74:	8812      	ldrh	r2, [r2, #0]
 800bd76:	b292      	uxth	r2, r2
 800bd78:	9202      	str	r2, [sp, #8]
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	4b19      	ldr	r3, [pc, #100]	; (800bde4 <tcp_input+0x808>)
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	4b19      	ldr	r3, [pc, #100]	; (800bde8 <tcp_input+0x80c>)
 800bd82:	4602      	mov	r2, r0
 800bd84:	2000      	movs	r0, #0
 800bd86:	f003 fc8f 	bl	800f6a8 <tcp_rst>
    pbuf_free(p);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7fd fb5a 	bl	8009444 <pbuf_free>
  return;
 800bd90:	e00a      	b.n	800bda8 <tcp_input+0x7cc>
    goto dropped;
 800bd92:	bf00      	nop
 800bd94:	e004      	b.n	800bda0 <tcp_input+0x7c4>
dropped:
 800bd96:	bf00      	nop
 800bd98:	e002      	b.n	800bda0 <tcp_input+0x7c4>
      goto dropped;
 800bd9a:	bf00      	nop
 800bd9c:	e000      	b.n	800bda0 <tcp_input+0x7c4>
      goto dropped;
 800bd9e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7fd fb4f 	bl	8009444 <pbuf_free>
 800bda6:	e000      	b.n	800bdaa <tcp_input+0x7ce>
  return;
 800bda8:	bf00      	nop
}
 800bdaa:	3724      	adds	r7, #36	; 0x24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd90      	pop	{r4, r7, pc}
 800bdb0:	2000708c 	.word	0x2000708c
 800bdb4:	2000027d 	.word	0x2000027d
 800bdb8:	20007078 	.word	0x20007078
 800bdbc:	20000278 	.word	0x20000278
 800bdc0:	20000280 	.word	0x20000280
 800bdc4:	08016fc0 	.word	0x08016fc0
 800bdc8:	08017174 	.word	0x08017174
 800bdcc:	0801700c 	.word	0x0801700c
 800bdd0:	20000250 	.word	0x20000250
 800bdd4:	20000260 	.word	0x20000260
 800bdd8:	20000274 	.word	0x20000274
 800bddc:	2000027a 	.word	0x2000027a
 800bde0:	20000270 	.word	0x20000270
 800bde4:	20003b44 	.word	0x20003b44
 800bde8:	20003b48 	.word	0x20003b48

0800bdec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d106      	bne.n	800be08 <tcp_input_delayed_close+0x1c>
 800bdfa:	4b17      	ldr	r3, [pc, #92]	; (800be58 <tcp_input_delayed_close+0x6c>)
 800bdfc:	f240 225a 	movw	r2, #602	; 0x25a
 800be00:	4916      	ldr	r1, [pc, #88]	; (800be5c <tcp_input_delayed_close+0x70>)
 800be02:	4817      	ldr	r0, [pc, #92]	; (800be60 <tcp_input_delayed_close+0x74>)
 800be04:	f006 fd0a 	bl	801281c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800be08:	4b16      	ldr	r3, [pc, #88]	; (800be64 <tcp_input_delayed_close+0x78>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	f003 0310 	and.w	r3, r3, #16
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01c      	beq.n	800be4e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	8b5b      	ldrh	r3, [r3, #26]
 800be18:	f003 0310 	and.w	r3, r3, #16
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10d      	bne.n	800be3c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <tcp_input_delayed_close+0x50>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6912      	ldr	r2, [r2, #16]
 800be34:	f06f 010e 	mvn.w	r1, #14
 800be38:	4610      	mov	r0, r2
 800be3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800be3c:	6879      	ldr	r1, [r7, #4]
 800be3e:	480a      	ldr	r0, [pc, #40]	; (800be68 <tcp_input_delayed_close+0x7c>)
 800be40:	f7ff fa54 	bl	800b2ec <tcp_pcb_remove>
    tcp_free(pcb);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f7fd fdad 	bl	80099a4 <tcp_free>
    return 1;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	08016fc0 	.word	0x08016fc0
 800be5c:	08017190 	.word	0x08017190
 800be60:	0801700c 	.word	0x0801700c
 800be64:	2000027d 	.word	0x2000027d
 800be68:	20007078 	.word	0x20007078

0800be6c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800be6c:	b590      	push	{r4, r7, lr}
 800be6e:	b08b      	sub	sp, #44	; 0x2c
 800be70:	af04      	add	r7, sp, #16
 800be72:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800be74:	4b6f      	ldr	r3, [pc, #444]	; (800c034 <tcp_listen_input+0x1c8>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f040 80d3 	bne.w	800c028 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d106      	bne.n	800be96 <tcp_listen_input+0x2a>
 800be88:	4b6b      	ldr	r3, [pc, #428]	; (800c038 <tcp_listen_input+0x1cc>)
 800be8a:	f240 2281 	movw	r2, #641	; 0x281
 800be8e:	496b      	ldr	r1, [pc, #428]	; (800c03c <tcp_listen_input+0x1d0>)
 800be90:	486b      	ldr	r0, [pc, #428]	; (800c040 <tcp_listen_input+0x1d4>)
 800be92:	f006 fcc3 	bl	801281c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800be96:	4b67      	ldr	r3, [pc, #412]	; (800c034 <tcp_listen_input+0x1c8>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	f003 0310 	and.w	r3, r3, #16
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d019      	beq.n	800bed6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bea2:	4b68      	ldr	r3, [pc, #416]	; (800c044 <tcp_listen_input+0x1d8>)
 800bea4:	6819      	ldr	r1, [r3, #0]
 800bea6:	4b68      	ldr	r3, [pc, #416]	; (800c048 <tcp_listen_input+0x1dc>)
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	4b67      	ldr	r3, [pc, #412]	; (800c04c <tcp_listen_input+0x1e0>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800beb2:	4b67      	ldr	r3, [pc, #412]	; (800c050 <tcp_listen_input+0x1e4>)
 800beb4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800beb6:	885b      	ldrh	r3, [r3, #2]
 800beb8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800beba:	4a65      	ldr	r2, [pc, #404]	; (800c050 <tcp_listen_input+0x1e4>)
 800bebc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bebe:	8812      	ldrh	r2, [r2, #0]
 800bec0:	b292      	uxth	r2, r2
 800bec2:	9202      	str	r2, [sp, #8]
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	4b63      	ldr	r3, [pc, #396]	; (800c054 <tcp_listen_input+0x1e8>)
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	4b63      	ldr	r3, [pc, #396]	; (800c058 <tcp_listen_input+0x1ec>)
 800becc:	4602      	mov	r2, r0
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f003 fbea 	bl	800f6a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bed4:	e0aa      	b.n	800c02c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800bed6:	4b57      	ldr	r3, [pc, #348]	; (800c034 <tcp_listen_input+0x1c8>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 80a4 	beq.w	800c02c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7d5b      	ldrb	r3, [r3, #21]
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff f863 	bl	800afb4 <tcp_alloc>
 800beee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d111      	bne.n	800bf1a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00a      	beq.n	800bf14 <tcp_listen_input+0xa8>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6910      	ldr	r0, [r2, #16]
 800bf06:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	4798      	blx	r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73bb      	strb	r3, [r7, #14]
      return;
 800bf12:	e08c      	b.n	800c02e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bf14:	23f0      	movs	r3, #240	; 0xf0
 800bf16:	73bb      	strb	r3, [r7, #14]
      return;
 800bf18:	e089      	b.n	800c02e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bf1a:	4b50      	ldr	r3, [pc, #320]	; (800c05c <tcp_listen_input+0x1f0>)
 800bf1c:	695a      	ldr	r2, [r3, #20]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bf22:	4b4e      	ldr	r3, [pc, #312]	; (800c05c <tcp_listen_input+0x1f0>)
 800bf24:	691a      	ldr	r2, [r3, #16]
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8ada      	ldrh	r2, [r3, #22]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bf32:	4b47      	ldr	r3, [pc, #284]	; (800c050 <tcp_listen_input+0x1e4>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2203      	movs	r2, #3
 800bf42:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bf44:	4b41      	ldr	r3, [pc, #260]	; (800c04c <tcp_listen_input+0x1e0>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bf56:	6978      	ldr	r0, [r7, #20]
 800bf58:	f7ff fa5c 	bl	800b414 <tcp_next_iss>
 800bf5c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bf76:	4b35      	ldr	r3, [pc, #212]	; (800c04c <tcp_listen_input+0x1e0>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	1e5a      	subs	r2, r3, #1
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	691a      	ldr	r2, [r3, #16]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7a5b      	ldrb	r3, [r3, #9]
 800bf92:	f003 030c 	and.w	r3, r3, #12
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	7a1a      	ldrb	r2, [r3, #8]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bfa4:	4b2e      	ldr	r3, [pc, #184]	; (800c060 <tcp_listen_input+0x1f4>)
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	60da      	str	r2, [r3, #12]
 800bfac:	4a2c      	ldr	r2, [pc, #176]	; (800c060 <tcp_listen_input+0x1f4>)
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	f003 fd3b 	bl	800fa2c <tcp_timer_needed>
 800bfb6:	4b2b      	ldr	r3, [pc, #172]	; (800c064 <tcp_listen_input+0x1f8>)
 800bfb8:	2201      	movs	r2, #1
 800bfba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bfbc:	6978      	ldr	r0, [r7, #20]
 800bfbe:	f001 fd8f 	bl	800dae0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bfc2:	4b23      	ldr	r3, [pc, #140]	; (800c050 <tcp_listen_input+0x1e4>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	89db      	ldrh	r3, [r3, #14]
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f005 f8fd 	bl	80111e4 <ip4_route>
 800bfea:	4601      	mov	r1, r0
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	3304      	adds	r3, #4
 800bff0:	461a      	mov	r2, r3
 800bff2:	4620      	mov	r0, r4
 800bff4:	f7ff fa34 	bl	800b460 <tcp_eff_send_mss_netif>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c000:	2112      	movs	r1, #18
 800c002:	6978      	ldr	r0, [r7, #20]
 800c004:	f002 fc9c 	bl	800e940 <tcp_enqueue_flags>
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d004      	beq.n	800c01e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c014:	2100      	movs	r1, #0
 800c016:	6978      	ldr	r0, [r7, #20]
 800c018:	f7fd fee6 	bl	8009de8 <tcp_abandon>
      return;
 800c01c:	e007      	b.n	800c02e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800c01e:	6978      	ldr	r0, [r7, #20]
 800c020:	f002 fd7c 	bl	800eb1c <tcp_output>
  return;
 800c024:	bf00      	nop
 800c026:	e001      	b.n	800c02c <tcp_listen_input+0x1c0>
    return;
 800c028:	bf00      	nop
 800c02a:	e000      	b.n	800c02e <tcp_listen_input+0x1c2>
  return;
 800c02c:	bf00      	nop
}
 800c02e:	371c      	adds	r7, #28
 800c030:	46bd      	mov	sp, r7
 800c032:	bd90      	pop	{r4, r7, pc}
 800c034:	2000027c 	.word	0x2000027c
 800c038:	08016fc0 	.word	0x08016fc0
 800c03c:	080171b8 	.word	0x080171b8
 800c040:	0801700c 	.word	0x0801700c
 800c044:	20000274 	.word	0x20000274
 800c048:	2000027a 	.word	0x2000027a
 800c04c:	20000270 	.word	0x20000270
 800c050:	20000260 	.word	0x20000260
 800c054:	20003b44 	.word	0x20003b44
 800c058:	20003b48 	.word	0x20003b48
 800c05c:	20003b34 	.word	0x20003b34
 800c060:	20007078 	.word	0x20007078
 800c064:	20007074 	.word	0x20007074

0800c068 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af04      	add	r7, sp, #16
 800c06e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c070:	4b30      	ldr	r3, [pc, #192]	; (800c134 <tcp_timewait_input+0xcc>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d154      	bne.n	800c126 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d106      	bne.n	800c090 <tcp_timewait_input+0x28>
 800c082:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <tcp_timewait_input+0xd0>)
 800c084:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c088:	492c      	ldr	r1, [pc, #176]	; (800c13c <tcp_timewait_input+0xd4>)
 800c08a:	482d      	ldr	r0, [pc, #180]	; (800c140 <tcp_timewait_input+0xd8>)
 800c08c:	f006 fbc6 	bl	801281c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c090:	4b28      	ldr	r3, [pc, #160]	; (800c134 <tcp_timewait_input+0xcc>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 0302 	and.w	r3, r3, #2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d02a      	beq.n	800c0f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c09c:	4b29      	ldr	r3, [pc, #164]	; (800c144 <tcp_timewait_input+0xdc>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	db2d      	blt.n	800c106 <tcp_timewait_input+0x9e>
 800c0aa:	4b26      	ldr	r3, [pc, #152]	; (800c144 <tcp_timewait_input+0xdc>)
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c0b6:	440b      	add	r3, r1
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	dc23      	bgt.n	800c106 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0be:	4b22      	ldr	r3, [pc, #136]	; (800c148 <tcp_timewait_input+0xe0>)
 800c0c0:	6819      	ldr	r1, [r3, #0]
 800c0c2:	4b22      	ldr	r3, [pc, #136]	; (800c14c <tcp_timewait_input+0xe4>)
 800c0c4:	881b      	ldrh	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	4b1e      	ldr	r3, [pc, #120]	; (800c144 <tcp_timewait_input+0xdc>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0ce:	4b20      	ldr	r3, [pc, #128]	; (800c150 <tcp_timewait_input+0xe8>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0d2:	885b      	ldrh	r3, [r3, #2]
 800c0d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0d6:	4a1e      	ldr	r2, [pc, #120]	; (800c150 <tcp_timewait_input+0xe8>)
 800c0d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0da:	8812      	ldrh	r2, [r2, #0]
 800c0dc:	b292      	uxth	r2, r2
 800c0de:	9202      	str	r2, [sp, #8]
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	4b1c      	ldr	r3, [pc, #112]	; (800c154 <tcp_timewait_input+0xec>)
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	4b1c      	ldr	r3, [pc, #112]	; (800c158 <tcp_timewait_input+0xf0>)
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f003 fadc 	bl	800f6a8 <tcp_rst>
      return;
 800c0f0:	e01c      	b.n	800c12c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800c0f2:	4b10      	ldr	r3, [pc, #64]	; (800c134 <tcp_timewait_input+0xcc>)
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	f003 0301 	and.w	r3, r3, #1
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d003      	beq.n	800c106 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c0fe:	4b17      	ldr	r3, [pc, #92]	; (800c15c <tcp_timewait_input+0xf4>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c106:	4b11      	ldr	r3, [pc, #68]	; (800c14c <tcp_timewait_input+0xe4>)
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00d      	beq.n	800c12a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	8b5b      	ldrh	r3, [r3, #26]
 800c112:	f043 0302 	orr.w	r3, r3, #2
 800c116:	b29a      	uxth	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f002 fcfd 	bl	800eb1c <tcp_output>
  }
  return;
 800c122:	bf00      	nop
 800c124:	e001      	b.n	800c12a <tcp_timewait_input+0xc2>
    return;
 800c126:	bf00      	nop
 800c128:	e000      	b.n	800c12c <tcp_timewait_input+0xc4>
  return;
 800c12a:	bf00      	nop
}
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	2000027c 	.word	0x2000027c
 800c138:	08016fc0 	.word	0x08016fc0
 800c13c:	080171d8 	.word	0x080171d8
 800c140:	0801700c 	.word	0x0801700c
 800c144:	20000270 	.word	0x20000270
 800c148:	20000274 	.word	0x20000274
 800c14c:	2000027a 	.word	0x2000027a
 800c150:	20000260 	.word	0x20000260
 800c154:	20003b44 	.word	0x20003b44
 800c158:	20003b48 	.word	0x20003b48
 800c15c:	2000707c 	.word	0x2000707c

0800c160 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c160:	b590      	push	{r4, r7, lr}
 800c162:	b08d      	sub	sp, #52	; 0x34
 800c164:	af04      	add	r7, sp, #16
 800c166:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <tcp_process+0x24>
 800c176:	4ba5      	ldr	r3, [pc, #660]	; (800c40c <tcp_process+0x2ac>)
 800c178:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c17c:	49a4      	ldr	r1, [pc, #656]	; (800c410 <tcp_process+0x2b0>)
 800c17e:	48a5      	ldr	r0, [pc, #660]	; (800c414 <tcp_process+0x2b4>)
 800c180:	f006 fb4c 	bl	801281c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c184:	4ba4      	ldr	r3, [pc, #656]	; (800c418 <tcp_process+0x2b8>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d04e      	beq.n	800c22e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	7d1b      	ldrb	r3, [r3, #20]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d108      	bne.n	800c1aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c19c:	4b9f      	ldr	r3, [pc, #636]	; (800c41c <tcp_process+0x2bc>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d123      	bne.n	800c1ec <tcp_process+0x8c>
        acceptable = 1;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	76fb      	strb	r3, [r7, #27]
 800c1a8:	e020      	b.n	800c1ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1ae:	4b9c      	ldr	r3, [pc, #624]	; (800c420 <tcp_process+0x2c0>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d102      	bne.n	800c1bc <tcp_process+0x5c>
        acceptable = 1;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	76fb      	strb	r3, [r7, #27]
 800c1ba:	e017      	b.n	800c1ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c1bc:	4b98      	ldr	r3, [pc, #608]	; (800c420 <tcp_process+0x2c0>)
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	db10      	blt.n	800c1ec <tcp_process+0x8c>
 800c1ca:	4b95      	ldr	r3, [pc, #596]	; (800c420 <tcp_process+0x2c0>)
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	6879      	ldr	r1, [r7, #4]
 800c1d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c1d6:	440b      	add	r3, r1
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	dc06      	bgt.n	800c1ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	8b5b      	ldrh	r3, [r3, #26]
 800c1e2:	f043 0302 	orr.w	r3, r3, #2
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c1ec:	7efb      	ldrb	r3, [r7, #27]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01b      	beq.n	800c22a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7d1b      	ldrb	r3, [r3, #20]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <tcp_process+0xa8>
 800c1fa:	4b84      	ldr	r3, [pc, #528]	; (800c40c <tcp_process+0x2ac>)
 800c1fc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c200:	4988      	ldr	r1, [pc, #544]	; (800c424 <tcp_process+0x2c4>)
 800c202:	4884      	ldr	r0, [pc, #528]	; (800c414 <tcp_process+0x2b4>)
 800c204:	f006 fb0a 	bl	801281c <iprintf>
      recv_flags |= TF_RESET;
 800c208:	4b87      	ldr	r3, [pc, #540]	; (800c428 <tcp_process+0x2c8>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f043 0308 	orr.w	r3, r3, #8
 800c210:	b2da      	uxtb	r2, r3
 800c212:	4b85      	ldr	r3, [pc, #532]	; (800c428 <tcp_process+0x2c8>)
 800c214:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8b5b      	ldrh	r3, [r3, #26]
 800c21a:	f023 0301 	bic.w	r3, r3, #1
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c224:	f06f 030d 	mvn.w	r3, #13
 800c228:	e37a      	b.n	800c920 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c22a:	2300      	movs	r3, #0
 800c22c:	e378      	b.n	800c920 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c22e:	4b7a      	ldr	r3, [pc, #488]	; (800c418 <tcp_process+0x2b8>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	f003 0302 	and.w	r3, r3, #2
 800c236:	2b00      	cmp	r3, #0
 800c238:	d010      	beq.n	800c25c <tcp_process+0xfc>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	7d1b      	ldrb	r3, [r3, #20]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d00c      	beq.n	800c25c <tcp_process+0xfc>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	7d1b      	ldrb	r3, [r3, #20]
 800c246:	2b03      	cmp	r3, #3
 800c248:	d008      	beq.n	800c25c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	8b5b      	ldrh	r3, [r3, #26]
 800c24e:	f043 0302 	orr.w	r3, r3, #2
 800c252:	b29a      	uxth	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	e361      	b.n	800c920 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	8b5b      	ldrh	r3, [r3, #26]
 800c260:	f003 0310 	and.w	r3, r3, #16
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c268:	4b70      	ldr	r3, [pc, #448]	; (800c42c <tcp_process+0x2cc>)
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f001 fc2d 	bl	800dae0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7d1b      	ldrb	r3, [r3, #20]
 800c28a:	3b02      	subs	r3, #2
 800c28c:	2b07      	cmp	r3, #7
 800c28e:	f200 8337 	bhi.w	800c900 <tcp_process+0x7a0>
 800c292:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <tcp_process+0x138>)
 800c294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c298:	0800c2b9 	.word	0x0800c2b9
 800c29c:	0800c4e9 	.word	0x0800c4e9
 800c2a0:	0800c661 	.word	0x0800c661
 800c2a4:	0800c68b 	.word	0x0800c68b
 800c2a8:	0800c7af 	.word	0x0800c7af
 800c2ac:	0800c661 	.word	0x0800c661
 800c2b0:	0800c83b 	.word	0x0800c83b
 800c2b4:	0800c8cb 	.word	0x0800c8cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c2b8:	4b57      	ldr	r3, [pc, #348]	; (800c418 <tcp_process+0x2b8>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	f003 0310 	and.w	r3, r3, #16
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 80e4 	beq.w	800c48e <tcp_process+0x32e>
 800c2c6:	4b54      	ldr	r3, [pc, #336]	; (800c418 <tcp_process+0x2b8>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	f003 0302 	and.w	r3, r3, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80dd 	beq.w	800c48e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	4b50      	ldr	r3, [pc, #320]	; (800c41c <tcp_process+0x2bc>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	f040 80d5 	bne.w	800c48e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c2e4:	4b4e      	ldr	r3, [pc, #312]	; (800c420 <tcp_process+0x2c0>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	1c5a      	adds	r2, r3, #1
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c2f6:	4b49      	ldr	r3, [pc, #292]	; (800c41c <tcp_process+0x2bc>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c2fe:	4b4c      	ldr	r3, [pc, #304]	; (800c430 <tcp_process+0x2d0>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	89db      	ldrh	r3, [r3, #14]
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c318:	4b41      	ldr	r3, [pc, #260]	; (800c420 <tcp_process+0x2c0>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	1e5a      	subs	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2204      	movs	r2, #4
 800c326:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	3304      	adds	r3, #4
 800c330:	4618      	mov	r0, r3
 800c332:	f004 ff57 	bl	80111e4 <ip4_route>
 800c336:	4601      	mov	r1, r0
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3304      	adds	r3, #4
 800c33c:	461a      	mov	r2, r3
 800c33e:	4620      	mov	r0, r4
 800c340:	f7ff f88e 	bl	800b460 <tcp_eff_send_mss_netif>
 800c344:	4603      	mov	r3, r0
 800c346:	461a      	mov	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c350:	009a      	lsls	r2, r3, #2
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	f241 111c 	movw	r1, #4380	; 0x111c
 800c35c:	428b      	cmp	r3, r1
 800c35e:	bf38      	it	cc
 800c360:	460b      	movcc	r3, r1
 800c362:	429a      	cmp	r2, r3
 800c364:	d204      	bcs.n	800c370 <tcp_process+0x210>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	e00d      	b.n	800c38c <tcp_process+0x22c>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	f241 121c 	movw	r2, #4380	; 0x111c
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d904      	bls.n	800c388 <tcp_process+0x228>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	b29b      	uxth	r3, r3
 800c386:	e001      	b.n	800c38c <tcp_process+0x22c>
 800c388:	f241 131c 	movw	r3, #4380	; 0x111c
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <tcp_process+0x24a>
 800c39c:	4b1b      	ldr	r3, [pc, #108]	; (800c40c <tcp_process+0x2ac>)
 800c39e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c3a2:	4924      	ldr	r1, [pc, #144]	; (800c434 <tcp_process+0x2d4>)
 800c3a4:	481b      	ldr	r0, [pc, #108]	; (800c414 <tcp_process+0x2b4>)
 800c3a6:	f006 fa39 	bl	801281c <iprintf>
        --pcb->snd_queuelen;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3be:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d111      	bne.n	800c3ea <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <tcp_process+0x280>
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	; (800c40c <tcp_process+0x2ac>)
 800c3d4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c3d8:	4917      	ldr	r1, [pc, #92]	; (800c438 <tcp_process+0x2d8>)
 800c3da:	480e      	ldr	r0, [pc, #56]	; (800c414 <tcp_process+0x2b4>)
 800c3dc:	f006 fa1e 	bl	801281c <iprintf>
          pcb->unsent = rseg->next;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	66da      	str	r2, [r3, #108]	; 0x6c
 800c3e8:	e003      	b.n	800c3f2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c3f2:	69f8      	ldr	r0, [r7, #28]
 800c3f4:	f7fe fc58 	bl	800aca8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d11d      	bne.n	800c43c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c406:	861a      	strh	r2, [r3, #48]	; 0x30
 800c408:	e01f      	b.n	800c44a <tcp_process+0x2ea>
 800c40a:	bf00      	nop
 800c40c:	08016fc0 	.word	0x08016fc0
 800c410:	080171f8 	.word	0x080171f8
 800c414:	0801700c 	.word	0x0801700c
 800c418:	2000027c 	.word	0x2000027c
 800c41c:	20000274 	.word	0x20000274
 800c420:	20000270 	.word	0x20000270
 800c424:	08017214 	.word	0x08017214
 800c428:	2000027d 	.word	0x2000027d
 800c42c:	2000707c 	.word	0x2000707c
 800c430:	20000260 	.word	0x20000260
 800c434:	08017234 	.word	0x08017234
 800c438:	0801724c 	.word	0x0801724c
        } else {
          pcb->rtime = 0;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00a      	beq.n	800c46a <tcp_process+0x30a>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	6910      	ldr	r0, [r2, #16]
 800c45e:	2200      	movs	r2, #0
 800c460:	6879      	ldr	r1, [r7, #4]
 800c462:	4798      	blx	r3
 800c464:	4603      	mov	r3, r0
 800c466:	76bb      	strb	r3, [r7, #26]
 800c468:	e001      	b.n	800c46e <tcp_process+0x30e>
 800c46a:	2300      	movs	r3, #0
 800c46c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c46e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c472:	f113 0f0d 	cmn.w	r3, #13
 800c476:	d102      	bne.n	800c47e <tcp_process+0x31e>
          return ERR_ABRT;
 800c478:	f06f 030c 	mvn.w	r3, #12
 800c47c:	e250      	b.n	800c920 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8b5b      	ldrh	r3, [r3, #26]
 800c482:	f043 0302 	orr.w	r3, r3, #2
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c48c:	e23a      	b.n	800c904 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c48e:	4b9d      	ldr	r3, [pc, #628]	; (800c704 <tcp_process+0x5a4>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	f003 0310 	and.w	r3, r3, #16
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 8234 	beq.w	800c904 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c49c:	4b9a      	ldr	r3, [pc, #616]	; (800c708 <tcp_process+0x5a8>)
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	4b9a      	ldr	r3, [pc, #616]	; (800c70c <tcp_process+0x5ac>)
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b9a      	ldr	r3, [pc, #616]	; (800c710 <tcp_process+0x5b0>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4ac:	4b99      	ldr	r3, [pc, #612]	; (800c714 <tcp_process+0x5b4>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4b0:	885b      	ldrh	r3, [r3, #2]
 800c4b2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4b4:	4a97      	ldr	r2, [pc, #604]	; (800c714 <tcp_process+0x5b4>)
 800c4b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4b8:	8812      	ldrh	r2, [r2, #0]
 800c4ba:	b292      	uxth	r2, r2
 800c4bc:	9202      	str	r2, [sp, #8]
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	4b95      	ldr	r3, [pc, #596]	; (800c718 <tcp_process+0x5b8>)
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	4b95      	ldr	r3, [pc, #596]	; (800c71c <tcp_process+0x5bc>)
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f003 f8ed 	bl	800f6a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4d4:	2b05      	cmp	r3, #5
 800c4d6:	f200 8215 	bhi.w	800c904 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f002 feab 	bl	800f23c <tcp_rexmit_rto>
      break;
 800c4e6:	e20d      	b.n	800c904 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c4e8:	4b86      	ldr	r3, [pc, #536]	; (800c704 <tcp_process+0x5a4>)
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	f003 0310 	and.w	r3, r3, #16
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f000 80a1 	beq.w	800c638 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4f6:	4b84      	ldr	r3, [pc, #528]	; (800c708 <tcp_process+0x5a8>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	3b01      	subs	r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	db7e      	blt.n	800c604 <tcp_process+0x4a4>
 800c506:	4b80      	ldr	r3, [pc, #512]	; (800c708 <tcp_process+0x5a8>)
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	dc77      	bgt.n	800c604 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2204      	movs	r2, #4
 800c518:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d102      	bne.n	800c528 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c522:	23fa      	movs	r3, #250	; 0xfa
 800c524:	76bb      	strb	r3, [r7, #26]
 800c526:	e01d      	b.n	800c564 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d106      	bne.n	800c540 <tcp_process+0x3e0>
 800c532:	4b7b      	ldr	r3, [pc, #492]	; (800c720 <tcp_process+0x5c0>)
 800c534:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c538:	497a      	ldr	r1, [pc, #488]	; (800c724 <tcp_process+0x5c4>)
 800c53a:	487b      	ldr	r0, [pc, #492]	; (800c728 <tcp_process+0x5c8>)
 800c53c:	f006 f96e 	bl	801281c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00a      	beq.n	800c560 <tcp_process+0x400>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	6910      	ldr	r0, [r2, #16]
 800c554:	2200      	movs	r2, #0
 800c556:	6879      	ldr	r1, [r7, #4]
 800c558:	4798      	blx	r3
 800c55a:	4603      	mov	r3, r0
 800c55c:	76bb      	strb	r3, [r7, #26]
 800c55e:	e001      	b.n	800c564 <tcp_process+0x404>
 800c560:	23f0      	movs	r3, #240	; 0xf0
 800c562:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c564:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c56c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c570:	f113 0f0d 	cmn.w	r3, #13
 800c574:	d002      	beq.n	800c57c <tcp_process+0x41c>
              tcp_abort(pcb);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7fd fcf4 	bl	8009f64 <tcp_abort>
            }
            return ERR_ABRT;
 800c57c:	f06f 030c 	mvn.w	r3, #12
 800c580:	e1ce      	b.n	800c920 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fae0 	bl	800cb48 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c588:	4b68      	ldr	r3, [pc, #416]	; (800c72c <tcp_process+0x5cc>)
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d005      	beq.n	800c59c <tcp_process+0x43c>
            recv_acked--;
 800c590:	4b66      	ldr	r3, [pc, #408]	; (800c72c <tcp_process+0x5cc>)
 800c592:	881b      	ldrh	r3, [r3, #0]
 800c594:	3b01      	subs	r3, #1
 800c596:	b29a      	uxth	r2, r3
 800c598:	4b64      	ldr	r3, [pc, #400]	; (800c72c <tcp_process+0x5cc>)
 800c59a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5a0:	009a      	lsls	r2, r3, #2
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	f241 111c 	movw	r1, #4380	; 0x111c
 800c5ac:	428b      	cmp	r3, r1
 800c5ae:	bf38      	it	cc
 800c5b0:	460b      	movcc	r3, r1
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d204      	bcs.n	800c5c0 <tcp_process+0x460>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	e00d      	b.n	800c5dc <tcp_process+0x47c>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d904      	bls.n	800c5d8 <tcp_process+0x478>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	e001      	b.n	800c5dc <tcp_process+0x47c>
 800c5d8:	f241 131c 	movw	r3, #4380	; 0x111c
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c5e2:	4b53      	ldr	r3, [pc, #332]	; (800c730 <tcp_process+0x5d0>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	f003 0320 	and.w	r3, r3, #32
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d037      	beq.n	800c65e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	8b5b      	ldrh	r3, [r3, #26]
 800c5f2:	f043 0302 	orr.w	r3, r3, #2
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2207      	movs	r2, #7
 800c600:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c602:	e02c      	b.n	800c65e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c604:	4b40      	ldr	r3, [pc, #256]	; (800c708 <tcp_process+0x5a8>)
 800c606:	6819      	ldr	r1, [r3, #0]
 800c608:	4b40      	ldr	r3, [pc, #256]	; (800c70c <tcp_process+0x5ac>)
 800c60a:	881b      	ldrh	r3, [r3, #0]
 800c60c:	461a      	mov	r2, r3
 800c60e:	4b40      	ldr	r3, [pc, #256]	; (800c710 <tcp_process+0x5b0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c614:	4b3f      	ldr	r3, [pc, #252]	; (800c714 <tcp_process+0x5b4>)
 800c616:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c618:	885b      	ldrh	r3, [r3, #2]
 800c61a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c61c:	4a3d      	ldr	r2, [pc, #244]	; (800c714 <tcp_process+0x5b4>)
 800c61e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c620:	8812      	ldrh	r2, [r2, #0]
 800c622:	b292      	uxth	r2, r2
 800c624:	9202      	str	r2, [sp, #8]
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	4b3b      	ldr	r3, [pc, #236]	; (800c718 <tcp_process+0x5b8>)
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	4b3b      	ldr	r3, [pc, #236]	; (800c71c <tcp_process+0x5bc>)
 800c62e:	4602      	mov	r2, r0
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f003 f839 	bl	800f6a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c636:	e167      	b.n	800c908 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c638:	4b32      	ldr	r3, [pc, #200]	; (800c704 <tcp_process+0x5a4>)
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 8161 	beq.w	800c908 <tcp_process+0x7a8>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64a:	1e5a      	subs	r2, r3, #1
 800c64c:	4b30      	ldr	r3, [pc, #192]	; (800c710 <tcp_process+0x5b0>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	429a      	cmp	r2, r3
 800c652:	f040 8159 	bne.w	800c908 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f002 fe12 	bl	800f280 <tcp_rexmit>
      break;
 800c65c:	e154      	b.n	800c908 <tcp_process+0x7a8>
 800c65e:	e153      	b.n	800c908 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fa71 	bl	800cb48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c666:	4b32      	ldr	r3, [pc, #200]	; (800c730 <tcp_process+0x5d0>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	f003 0320 	and.w	r3, r3, #32
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 814c 	beq.w	800c90c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8b5b      	ldrh	r3, [r3, #26]
 800c678:	f043 0302 	orr.w	r3, r3, #2
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2207      	movs	r2, #7
 800c686:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c688:	e140      	b.n	800c90c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fa5c 	bl	800cb48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c690:	4b27      	ldr	r3, [pc, #156]	; (800c730 <tcp_process+0x5d0>)
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	f003 0320 	and.w	r3, r3, #32
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d071      	beq.n	800c780 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c69c:	4b19      	ldr	r3, [pc, #100]	; (800c704 <tcp_process+0x5a4>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f003 0310 	and.w	r3, r3, #16
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d060      	beq.n	800c76a <tcp_process+0x60a>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6ac:	4b16      	ldr	r3, [pc, #88]	; (800c708 <tcp_process+0x5a8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d15a      	bne.n	800c76a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d156      	bne.n	800c76a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	8b5b      	ldrh	r3, [r3, #26]
 800c6c0:	f043 0302 	orr.w	r3, r3, #2
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7fe fdbe 	bl	800b24c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c6d0:	4b18      	ldr	r3, [pc, #96]	; (800c734 <tcp_process+0x5d4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d105      	bne.n	800c6e6 <tcp_process+0x586>
 800c6da:	4b16      	ldr	r3, [pc, #88]	; (800c734 <tcp_process+0x5d4>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	4a14      	ldr	r2, [pc, #80]	; (800c734 <tcp_process+0x5d4>)
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	e02e      	b.n	800c744 <tcp_process+0x5e4>
 800c6e6:	4b13      	ldr	r3, [pc, #76]	; (800c734 <tcp_process+0x5d4>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	617b      	str	r3, [r7, #20]
 800c6ec:	e027      	b.n	800c73e <tcp_process+0x5de>
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d11f      	bne.n	800c738 <tcp_process+0x5d8>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	68da      	ldr	r2, [r3, #12]
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	60da      	str	r2, [r3, #12]
 800c700:	e020      	b.n	800c744 <tcp_process+0x5e4>
 800c702:	bf00      	nop
 800c704:	2000027c 	.word	0x2000027c
 800c708:	20000274 	.word	0x20000274
 800c70c:	2000027a 	.word	0x2000027a
 800c710:	20000270 	.word	0x20000270
 800c714:	20000260 	.word	0x20000260
 800c718:	20003b44 	.word	0x20003b44
 800c71c:	20003b48 	.word	0x20003b48
 800c720:	08016fc0 	.word	0x08016fc0
 800c724:	08017260 	.word	0x08017260
 800c728:	0801700c 	.word	0x0801700c
 800c72c:	20000278 	.word	0x20000278
 800c730:	2000027d 	.word	0x2000027d
 800c734:	20007078 	.word	0x20007078
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	617b      	str	r3, [r7, #20]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1d4      	bne.n	800c6ee <tcp_process+0x58e>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	60da      	str	r2, [r3, #12]
 800c74a:	4b77      	ldr	r3, [pc, #476]	; (800c928 <tcp_process+0x7c8>)
 800c74c:	2201      	movs	r2, #1
 800c74e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	220a      	movs	r2, #10
 800c754:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c756:	4b75      	ldr	r3, [pc, #468]	; (800c92c <tcp_process+0x7cc>)
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	60da      	str	r2, [r3, #12]
 800c75e:	4a73      	ldr	r2, [pc, #460]	; (800c92c <tcp_process+0x7cc>)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6013      	str	r3, [r2, #0]
 800c764:	f003 f962 	bl	800fa2c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c768:	e0d2      	b.n	800c910 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	8b5b      	ldrh	r3, [r3, #26]
 800c76e:	f043 0302 	orr.w	r3, r3, #2
 800c772:	b29a      	uxth	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2208      	movs	r2, #8
 800c77c:	751a      	strb	r2, [r3, #20]
      break;
 800c77e:	e0c7      	b.n	800c910 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c780:	4b6b      	ldr	r3, [pc, #428]	; (800c930 <tcp_process+0x7d0>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f000 80c1 	beq.w	800c910 <tcp_process+0x7b0>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c792:	4b68      	ldr	r3, [pc, #416]	; (800c934 <tcp_process+0x7d4>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	429a      	cmp	r2, r3
 800c798:	f040 80ba 	bne.w	800c910 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f040 80b5 	bne.w	800c910 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2206      	movs	r2, #6
 800c7aa:	751a      	strb	r2, [r3, #20]
      break;
 800c7ac:	e0b0      	b.n	800c910 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f9ca 	bl	800cb48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c7b4:	4b60      	ldr	r3, [pc, #384]	; (800c938 <tcp_process+0x7d8>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	f003 0320 	and.w	r3, r3, #32
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 80a9 	beq.w	800c914 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	8b5b      	ldrh	r3, [r3, #26]
 800c7c6:	f043 0302 	orr.w	r3, r3, #2
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7fe fd3b 	bl	800b24c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c7d6:	4b59      	ldr	r3, [pc, #356]	; (800c93c <tcp_process+0x7dc>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d105      	bne.n	800c7ec <tcp_process+0x68c>
 800c7e0:	4b56      	ldr	r3, [pc, #344]	; (800c93c <tcp_process+0x7dc>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	4a55      	ldr	r2, [pc, #340]	; (800c93c <tcp_process+0x7dc>)
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	e013      	b.n	800c814 <tcp_process+0x6b4>
 800c7ec:	4b53      	ldr	r3, [pc, #332]	; (800c93c <tcp_process+0x7dc>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	613b      	str	r3, [r7, #16]
 800c7f2:	e00c      	b.n	800c80e <tcp_process+0x6ae>
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d104      	bne.n	800c808 <tcp_process+0x6a8>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	e005      	b.n	800c814 <tcp_process+0x6b4>
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1ef      	bne.n	800c7f4 <tcp_process+0x694>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	60da      	str	r2, [r3, #12]
 800c81a:	4b43      	ldr	r3, [pc, #268]	; (800c928 <tcp_process+0x7c8>)
 800c81c:	2201      	movs	r2, #1
 800c81e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	220a      	movs	r2, #10
 800c824:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c826:	4b41      	ldr	r3, [pc, #260]	; (800c92c <tcp_process+0x7cc>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60da      	str	r2, [r3, #12]
 800c82e:	4a3f      	ldr	r2, [pc, #252]	; (800c92c <tcp_process+0x7cc>)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6013      	str	r3, [r2, #0]
 800c834:	f003 f8fa 	bl	800fa2c <tcp_timer_needed>
      }
      break;
 800c838:	e06c      	b.n	800c914 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f984 	bl	800cb48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c840:	4b3b      	ldr	r3, [pc, #236]	; (800c930 <tcp_process+0x7d0>)
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	f003 0310 	and.w	r3, r3, #16
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d065      	beq.n	800c918 <tcp_process+0x7b8>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c850:	4b38      	ldr	r3, [pc, #224]	; (800c934 <tcp_process+0x7d4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	429a      	cmp	r2, r3
 800c856:	d15f      	bne.n	800c918 <tcp_process+0x7b8>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d15b      	bne.n	800c918 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7fe fcf3 	bl	800b24c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c866:	4b35      	ldr	r3, [pc, #212]	; (800c93c <tcp_process+0x7dc>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d105      	bne.n	800c87c <tcp_process+0x71c>
 800c870:	4b32      	ldr	r3, [pc, #200]	; (800c93c <tcp_process+0x7dc>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	4a31      	ldr	r2, [pc, #196]	; (800c93c <tcp_process+0x7dc>)
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	e013      	b.n	800c8a4 <tcp_process+0x744>
 800c87c:	4b2f      	ldr	r3, [pc, #188]	; (800c93c <tcp_process+0x7dc>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60fb      	str	r3, [r7, #12]
 800c882:	e00c      	b.n	800c89e <tcp_process+0x73e>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d104      	bne.n	800c898 <tcp_process+0x738>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68da      	ldr	r2, [r3, #12]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	60da      	str	r2, [r3, #12]
 800c896:	e005      	b.n	800c8a4 <tcp_process+0x744>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1ef      	bne.n	800c884 <tcp_process+0x724>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	60da      	str	r2, [r3, #12]
 800c8aa:	4b1f      	ldr	r3, [pc, #124]	; (800c928 <tcp_process+0x7c8>)
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	220a      	movs	r2, #10
 800c8b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c8b6:	4b1d      	ldr	r3, [pc, #116]	; (800c92c <tcp_process+0x7cc>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60da      	str	r2, [r3, #12]
 800c8be:	4a1b      	ldr	r2, [pc, #108]	; (800c92c <tcp_process+0x7cc>)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	f003 f8b2 	bl	800fa2c <tcp_timer_needed>
      }
      break;
 800c8c8:	e026      	b.n	800c918 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 f93c 	bl	800cb48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c8d0:	4b17      	ldr	r3, [pc, #92]	; (800c930 <tcp_process+0x7d0>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	f003 0310 	and.w	r3, r3, #16
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01f      	beq.n	800c91c <tcp_process+0x7bc>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8e0:	4b14      	ldr	r3, [pc, #80]	; (800c934 <tcp_process+0x7d4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d119      	bne.n	800c91c <tcp_process+0x7bc>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d115      	bne.n	800c91c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c8f0:	4b11      	ldr	r3, [pc, #68]	; (800c938 <tcp_process+0x7d8>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	f043 0310 	orr.w	r3, r3, #16
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	4b0f      	ldr	r3, [pc, #60]	; (800c938 <tcp_process+0x7d8>)
 800c8fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c8fe:	e00d      	b.n	800c91c <tcp_process+0x7bc>
    default:
      break;
 800c900:	bf00      	nop
 800c902:	e00c      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c904:	bf00      	nop
 800c906:	e00a      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c908:	bf00      	nop
 800c90a:	e008      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c90c:	bf00      	nop
 800c90e:	e006      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c910:	bf00      	nop
 800c912:	e004      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c914:	bf00      	nop
 800c916:	e002      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c918:	bf00      	nop
 800c91a:	e000      	b.n	800c91e <tcp_process+0x7be>
      break;
 800c91c:	bf00      	nop
  }
  return ERR_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3724      	adds	r7, #36	; 0x24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd90      	pop	{r4, r7, pc}
 800c928:	20007074 	.word	0x20007074
 800c92c:	20007088 	.word	0x20007088
 800c930:	2000027c 	.word	0x2000027c
 800c934:	20000274 	.word	0x20000274
 800c938:	2000027d 	.word	0x2000027d
 800c93c:	20007078 	.word	0x20007078

0800c940 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c940:	b590      	push	{r4, r7, lr}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d106      	bne.n	800c95e <tcp_oos_insert_segment+0x1e>
 800c950:	4b3b      	ldr	r3, [pc, #236]	; (800ca40 <tcp_oos_insert_segment+0x100>)
 800c952:	f240 421f 	movw	r2, #1055	; 0x41f
 800c956:	493b      	ldr	r1, [pc, #236]	; (800ca44 <tcp_oos_insert_segment+0x104>)
 800c958:	483b      	ldr	r0, [pc, #236]	; (800ca48 <tcp_oos_insert_segment+0x108>)
 800c95a:	f005 ff5f 	bl	801281c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	899b      	ldrh	r3, [r3, #12]
 800c964:	b29b      	uxth	r3, r3
 800c966:	4618      	mov	r0, r3
 800c968:	f7fb fad1 	bl	8007f0e <lwip_htons>
 800c96c:	4603      	mov	r3, r0
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	f003 0301 	and.w	r3, r3, #1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d028      	beq.n	800c9ca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c978:	6838      	ldr	r0, [r7, #0]
 800c97a:	f7fe f981 	bl	800ac80 <tcp_segs_free>
    next = NULL;
 800c97e:	2300      	movs	r3, #0
 800c980:	603b      	str	r3, [r7, #0]
 800c982:	e056      	b.n	800ca32 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	899b      	ldrh	r3, [r3, #12]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fb fabe 	bl	8007f0e <lwip_htons>
 800c992:	4603      	mov	r3, r0
 800c994:	b2db      	uxtb	r3, r3
 800c996:	f003 0301 	and.w	r3, r3, #1
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00d      	beq.n	800c9ba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	899b      	ldrh	r3, [r3, #12]
 800c9a4:	b29c      	uxth	r4, r3
 800c9a6:	2001      	movs	r0, #1
 800c9a8:	f7fb fab1 	bl	8007f0e <lwip_htons>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	4322      	orrs	r2, r4
 800c9b6:	b292      	uxth	r2, r2
 800c9b8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7fe f96f 	bl	800aca8 <tcp_seg_free>
    while (next &&
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00e      	beq.n	800c9ee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	891b      	ldrh	r3, [r3, #8]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	4b1d      	ldr	r3, [pc, #116]	; (800ca4c <tcp_oos_insert_segment+0x10c>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	441a      	add	r2, r3
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	8909      	ldrh	r1, [r1, #8]
 800c9e6:	440b      	add	r3, r1
 800c9e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	daca      	bge.n	800c984 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01e      	beq.n	800ca32 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	891b      	ldrh	r3, [r3, #8]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4b14      	ldr	r3, [pc, #80]	; (800ca4c <tcp_oos_insert_segment+0x10c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	441a      	add	r2, r3
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	dd12      	ble.n	800ca32 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	4b0d      	ldr	r3, [pc, #52]	; (800ca4c <tcp_oos_insert_segment+0x10c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	891b      	ldrh	r3, [r3, #8]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f7fc fb83 	bl	8009138 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	601a      	str	r2, [r3, #0]
}
 800ca38:	bf00      	nop
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd90      	pop	{r4, r7, pc}
 800ca40:	08016fc0 	.word	0x08016fc0
 800ca44:	08017280 	.word	0x08017280
 800ca48:	0801700c 	.word	0x0801700c
 800ca4c:	20000270 	.word	0x20000270

0800ca50 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ca50:	b5b0      	push	{r4, r5, r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ca5e:	e03e      	b.n	800cade <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fc fd70 	bl	8009554 <pbuf_clen>
 800ca74:	4603      	mov	r3, r0
 800ca76:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca7e:	8a7a      	ldrh	r2, [r7, #18]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d906      	bls.n	800ca92 <tcp_free_acked_segments+0x42>
 800ca84:	4b2a      	ldr	r3, [pc, #168]	; (800cb30 <tcp_free_acked_segments+0xe0>)
 800ca86:	f240 4257 	movw	r2, #1111	; 0x457
 800ca8a:	492a      	ldr	r1, [pc, #168]	; (800cb34 <tcp_free_acked_segments+0xe4>)
 800ca8c:	482a      	ldr	r0, [pc, #168]	; (800cb38 <tcp_free_acked_segments+0xe8>)
 800ca8e:	f005 fec5 	bl	801281c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ca98:	8a7b      	ldrh	r3, [r7, #18]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	891a      	ldrh	r2, [r3, #8]
 800caa8:	4b24      	ldr	r3, [pc, #144]	; (800cb3c <tcp_free_acked_segments+0xec>)
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	4413      	add	r3, r2
 800caae:	b29a      	uxth	r2, r3
 800cab0:	4b22      	ldr	r3, [pc, #136]	; (800cb3c <tcp_free_acked_segments+0xec>)
 800cab2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cab4:	6978      	ldr	r0, [r7, #20]
 800cab6:	f7fe f8f7 	bl	800aca8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00c      	beq.n	800cade <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d109      	bne.n	800cade <tcp_free_acked_segments+0x8e>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d106      	bne.n	800cade <tcp_free_acked_segments+0x8e>
 800cad0:	4b17      	ldr	r3, [pc, #92]	; (800cb30 <tcp_free_acked_segments+0xe0>)
 800cad2:	f240 4262 	movw	r2, #1122	; 0x462
 800cad6:	491a      	ldr	r1, [pc, #104]	; (800cb40 <tcp_free_acked_segments+0xf0>)
 800cad8:	4817      	ldr	r0, [pc, #92]	; (800cb38 <tcp_free_acked_segments+0xe8>)
 800cada:	f005 fe9f 	bl	801281c <iprintf>
  while (seg_list != NULL &&
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d020      	beq.n	800cb26 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	4618      	mov	r0, r3
 800caec:	f7fb fa24 	bl	8007f38 <lwip_htonl>
 800caf0:	4604      	mov	r4, r0
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	891b      	ldrh	r3, [r3, #8]
 800caf6:	461d      	mov	r5, r3
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	899b      	ldrh	r3, [r3, #12]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fb fa04 	bl	8007f0e <lwip_htons>
 800cb06:	4603      	mov	r3, r0
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	f003 0303 	and.w	r3, r3, #3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <tcp_free_acked_segments+0xc6>
 800cb12:	2301      	movs	r3, #1
 800cb14:	e000      	b.n	800cb18 <tcp_free_acked_segments+0xc8>
 800cb16:	2300      	movs	r3, #0
 800cb18:	442b      	add	r3, r5
 800cb1a:	18e2      	adds	r2, r4, r3
 800cb1c:	4b09      	ldr	r3, [pc, #36]	; (800cb44 <tcp_free_acked_segments+0xf4>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dd9c      	ble.n	800ca60 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cb26:	68bb      	ldr	r3, [r7, #8]
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3718      	adds	r7, #24
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bdb0      	pop	{r4, r5, r7, pc}
 800cb30:	08016fc0 	.word	0x08016fc0
 800cb34:	080172a8 	.word	0x080172a8
 800cb38:	0801700c 	.word	0x0801700c
 800cb3c:	20000278 	.word	0x20000278
 800cb40:	080172d0 	.word	0x080172d0
 800cb44:	20000274 	.word	0x20000274

0800cb48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cb48:	b5b0      	push	{r4, r5, r7, lr}
 800cb4a:	b094      	sub	sp, #80	; 0x50
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <tcp_receive+0x20>
 800cb5a:	4ba6      	ldr	r3, [pc, #664]	; (800cdf4 <tcp_receive+0x2ac>)
 800cb5c:	f240 427b 	movw	r2, #1147	; 0x47b
 800cb60:	49a5      	ldr	r1, [pc, #660]	; (800cdf8 <tcp_receive+0x2b0>)
 800cb62:	48a6      	ldr	r0, [pc, #664]	; (800cdfc <tcp_receive+0x2b4>)
 800cb64:	f005 fe5a 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	7d1b      	ldrb	r3, [r3, #20]
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d806      	bhi.n	800cb7e <tcp_receive+0x36>
 800cb70:	4ba0      	ldr	r3, [pc, #640]	; (800cdf4 <tcp_receive+0x2ac>)
 800cb72:	f240 427c 	movw	r2, #1148	; 0x47c
 800cb76:	49a2      	ldr	r1, [pc, #648]	; (800ce00 <tcp_receive+0x2b8>)
 800cb78:	48a0      	ldr	r0, [pc, #640]	; (800cdfc <tcp_receive+0x2b4>)
 800cb7a:	f005 fe4f 	bl	801281c <iprintf>

  if (flags & TCP_ACK) {
 800cb7e:	4ba1      	ldr	r3, [pc, #644]	; (800ce04 <tcp_receive+0x2bc>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 8263 	beq.w	800d052 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb92:	461a      	mov	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb98:	4413      	add	r3, r2
 800cb9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cba0:	4b99      	ldr	r3, [pc, #612]	; (800ce08 <tcp_receive+0x2c0>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	db1b      	blt.n	800cbe2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbae:	4b96      	ldr	r3, [pc, #600]	; (800ce08 <tcp_receive+0x2c0>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d106      	bne.n	800cbc4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cbba:	4b94      	ldr	r3, [pc, #592]	; (800ce0c <tcp_receive+0x2c4>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	db0e      	blt.n	800cbe2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cbc8:	4b90      	ldr	r3, [pc, #576]	; (800ce0c <tcp_receive+0x2c4>)
 800cbca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d125      	bne.n	800cc1c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cbd0:	4b8f      	ldr	r3, [pc, #572]	; (800ce10 <tcp_receive+0x2c8>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	89db      	ldrh	r3, [r3, #14]
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d91c      	bls.n	800cc1c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cbe2:	4b8b      	ldr	r3, [pc, #556]	; (800ce10 <tcp_receive+0x2c8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	89db      	ldrh	r3, [r3, #14]
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d205      	bcs.n	800cc0c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cc0c:	4b7e      	ldr	r3, [pc, #504]	; (800ce08 <tcp_receive+0x2c0>)
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cc14:	4b7d      	ldr	r3, [pc, #500]	; (800ce0c <tcp_receive+0x2c4>)
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cc1c:	4b7b      	ldr	r3, [pc, #492]	; (800ce0c <tcp_receive+0x2c4>)
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	dc58      	bgt.n	800ccdc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cc2a:	4b7a      	ldr	r3, [pc, #488]	; (800ce14 <tcp_receive+0x2cc>)
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d14b      	bne.n	800ccca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cc3c:	4413      	add	r3, r2
 800cc3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d142      	bne.n	800ccca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	db3d      	blt.n	800ccca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc52:	4b6e      	ldr	r3, [pc, #440]	; (800ce0c <tcp_receive+0x2c4>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d137      	bne.n	800ccca <tcp_receive+0x182>
              found_dupack = 1;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc64:	2bff      	cmp	r3, #255	; 0xff
 800cc66:	d007      	beq.n	800cc78 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc6e:	3301      	adds	r3, #1
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d91b      	bls.n	800ccba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc8c:	4413      	add	r3, r2
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d30a      	bcc.n	800ccb0 <tcp_receive+0x168>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cca4:	4413      	add	r3, r2
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ccae:	e004      	b.n	800ccba <tcp_receive+0x172>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d902      	bls.n	800ccca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f002 fb47 	bl	800f358 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ccca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f040 8160 	bne.w	800cf92 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ccda:	e15a      	b.n	800cf92 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ccdc:	4b4b      	ldr	r3, [pc, #300]	; (800ce0c <tcp_receive+0x2c4>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	3b01      	subs	r3, #1
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f2c0 814d 	blt.w	800cf88 <tcp_receive+0x440>
 800ccee:	4b47      	ldr	r3, [pc, #284]	; (800ce0c <tcp_receive+0x2c4>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f300 8145 	bgt.w	800cf88 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	8b5b      	ldrh	r3, [r3, #26]
 800cd02:	f003 0304 	and.w	r3, r3, #4
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d010      	beq.n	800cd2c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	8b5b      	ldrh	r3, [r3, #26]
 800cd0e:	f023 0304 	bic.w	r3, r3, #4
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd3a:	10db      	asrs	r3, r3, #3
 800cd3c:	b21b      	sxth	r3, r3
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	4413      	add	r3, r2
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	b21a      	sxth	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cd54:	4b2d      	ldr	r3, [pc, #180]	; (800ce0c <tcp_receive+0x2c4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cd6c:	4b27      	ldr	r3, [pc, #156]	; (800ce0c <tcp_receive+0x2c4>)
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7d1b      	ldrb	r3, [r3, #20]
 800cd78:	2b03      	cmp	r3, #3
 800cd7a:	f240 8096 	bls.w	800ceaa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d244      	bcs.n	800ce18 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	8b5b      	ldrh	r3, [r3, #26]
 800cd92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <tcp_receive+0x256>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <tcp_receive+0x258>
 800cd9e:	2302      	movs	r3, #2
 800cda0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cda4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdae:	fb12 f303 	smulbb	r3, r2, r3
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	bf28      	it	cs
 800cdba:	4613      	movcs	r3, r2
 800cdbc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cdc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cdc6:	4413      	add	r3, r2
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d309      	bcc.n	800cde8 <tcp_receive+0x2a0>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cdda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cddc:	4413      	add	r3, r2
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cde6:	e060      	b.n	800ceaa <tcp_receive+0x362>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cdf2:	e05a      	b.n	800ceaa <tcp_receive+0x362>
 800cdf4:	08016fc0 	.word	0x08016fc0
 800cdf8:	080172f0 	.word	0x080172f0
 800cdfc:	0801700c 	.word	0x0801700c
 800ce00:	0801730c 	.word	0x0801730c
 800ce04:	2000027c 	.word	0x2000027c
 800ce08:	20000270 	.word	0x20000270
 800ce0c:	20000274 	.word	0x20000274
 800ce10:	20000260 	.word	0x20000260
 800ce14:	2000027a 	.word	0x2000027a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ce1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce20:	4413      	add	r3, r2
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d309      	bcc.n	800ce42 <tcp_receive+0x2fa>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ce34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce36:	4413      	add	r3, r2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ce40:	e004      	b.n	800ce4c <tcp_receive+0x304>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d326      	bcc.n	800ceaa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce7c:	4413      	add	r3, r2
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d30a      	bcc.n	800cea0 <tcp_receive+0x358>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce94:	4413      	add	r3, r2
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ce9e:	e004      	b.n	800ceaa <tcp_receive+0x362>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb2:	4a98      	ldr	r2, [pc, #608]	; (800d114 <tcp_receive+0x5cc>)
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff fdcb 	bl	800ca50 <tcp_free_acked_segments>
 800ceba:	4602      	mov	r2, r0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec8:	4a93      	ldr	r2, [pc, #588]	; (800d118 <tcp_receive+0x5d0>)
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff fdc0 	bl	800ca50 <tcp_free_acked_segments>
 800ced0:	4602      	mov	r2, r0
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d104      	bne.n	800cee8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cee4:	861a      	strh	r2, [r3, #48]	; 0x30
 800cee6:	e002      	b.n	800ceee <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d103      	bne.n	800cf04 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cf0a:	4b84      	ldr	r3, [pc, #528]	; (800d11c <tcp_receive+0x5d4>)
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	4413      	add	r3, r2
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	8b5b      	ldrh	r3, [r3, #26]
 800cf1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d035      	beq.n	800cf90 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d118      	bne.n	800cf5e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d00c      	beq.n	800cf4e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fa fff9 	bl	8007f38 <lwip_htonl>
 800cf46:	4603      	mov	r3, r0
 800cf48:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dc20      	bgt.n	800cf90 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	8b5b      	ldrh	r3, [r3, #26]
 800cf52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf5c:	e018      	b.n	800cf90 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7fa ffe4 	bl	8007f38 <lwip_htonl>
 800cf70:	4603      	mov	r3, r0
 800cf72:	1ae3      	subs	r3, r4, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	dc0b      	bgt.n	800cf90 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	8b5b      	ldrh	r3, [r3, #26]
 800cf7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf86:	e003      	b.n	800cf90 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f002 fbdf 	bl	800f74c <tcp_send_empty_ack>
 800cf8e:	e000      	b.n	800cf92 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf90:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d05b      	beq.n	800d052 <tcp_receive+0x50a>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf9e:	4b60      	ldr	r3, [pc, #384]	; (800d120 <tcp_receive+0x5d8>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	da54      	bge.n	800d052 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cfa8:	4b5e      	ldr	r3, [pc, #376]	; (800d124 <tcp_receive+0x5dc>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cfbc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cfc6:	10db      	asrs	r3, r3, #3
 800cfc8:	b21b      	sxth	r3, r3
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cfe0:	4413      	add	r3, r2
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	b21a      	sxth	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cfea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	da05      	bge.n	800cffe <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800cff2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cff6:	425b      	negs	r3, r3
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cffe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d008:	109b      	asrs	r3, r3, #2
 800d00a:	b21b      	sxth	r3, r3
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	b29b      	uxth	r3, r3
 800d012:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d022:	4413      	add	r3, r2
 800d024:	b29b      	uxth	r3, r3
 800d026:	b21a      	sxth	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d032:	10db      	asrs	r3, r3, #3
 800d034:	b21b      	sxth	r3, r3
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d03e:	b29b      	uxth	r3, r3
 800d040:	4413      	add	r3, r2
 800d042:	b29b      	uxth	r3, r3
 800d044:	b21a      	sxth	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d052:	4b35      	ldr	r3, [pc, #212]	; (800d128 <tcp_receive+0x5e0>)
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 84e1 	beq.w	800da1e <tcp_receive+0xed6>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7d1b      	ldrb	r3, [r3, #20]
 800d060:	2b06      	cmp	r3, #6
 800d062:	f200 84dc 	bhi.w	800da1e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d06a:	4b30      	ldr	r3, [pc, #192]	; (800d12c <tcp_receive+0x5e4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	3b01      	subs	r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	f2c0 808e 	blt.w	800d194 <tcp_receive+0x64c>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d07c:	4b2a      	ldr	r3, [pc, #168]	; (800d128 <tcp_receive+0x5e0>)
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	4619      	mov	r1, r3
 800d082:	4b2a      	ldr	r3, [pc, #168]	; (800d12c <tcp_receive+0x5e4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	440b      	add	r3, r1
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	3301      	adds	r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f300 8081 	bgt.w	800d194 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d092:	4b27      	ldr	r3, [pc, #156]	; (800d130 <tcp_receive+0x5e8>)
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d09c:	4b23      	ldr	r3, [pc, #140]	; (800d12c <tcp_receive+0x5e4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d0a4:	4b22      	ldr	r3, [pc, #136]	; (800d130 <tcp_receive+0x5e8>)
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <tcp_receive+0x572>
 800d0ac:	4b21      	ldr	r3, [pc, #132]	; (800d134 <tcp_receive+0x5ec>)
 800d0ae:	f240 5294 	movw	r2, #1428	; 0x594
 800d0b2:	4921      	ldr	r1, [pc, #132]	; (800d138 <tcp_receive+0x5f0>)
 800d0b4:	4821      	ldr	r0, [pc, #132]	; (800d13c <tcp_receive+0x5f4>)
 800d0b6:	f005 fbb1 	bl	801281c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d906      	bls.n	800d0d2 <tcp_receive+0x58a>
 800d0c4:	4b1b      	ldr	r3, [pc, #108]	; (800d134 <tcp_receive+0x5ec>)
 800d0c6:	f240 5295 	movw	r2, #1429	; 0x595
 800d0ca:	491d      	ldr	r1, [pc, #116]	; (800d140 <tcp_receive+0x5f8>)
 800d0cc:	481b      	ldr	r0, [pc, #108]	; (800d13c <tcp_receive+0x5f4>)
 800d0ce:	f005 fba5 	bl	801281c <iprintf>
      off = (u16_t)off32;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d0d8:	4b15      	ldr	r3, [pc, #84]	; (800d130 <tcp_receive+0x5e8>)
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	891b      	ldrh	r3, [r3, #8]
 800d0de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d906      	bls.n	800d0f4 <tcp_receive+0x5ac>
 800d0e6:	4b13      	ldr	r3, [pc, #76]	; (800d134 <tcp_receive+0x5ec>)
 800d0e8:	f240 5297 	movw	r2, #1431	; 0x597
 800d0ec:	4915      	ldr	r1, [pc, #84]	; (800d144 <tcp_receive+0x5fc>)
 800d0ee:	4813      	ldr	r0, [pc, #76]	; (800d13c <tcp_receive+0x5f4>)
 800d0f0:	f005 fb94 	bl	801281c <iprintf>
      inseg.len -= off;
 800d0f4:	4b0e      	ldr	r3, [pc, #56]	; (800d130 <tcp_receive+0x5e8>)
 800d0f6:	891a      	ldrh	r2, [r3, #8]
 800d0f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <tcp_receive+0x5e8>)
 800d102:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d104:	4b0a      	ldr	r3, [pc, #40]	; (800d130 <tcp_receive+0x5e8>)
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	891a      	ldrh	r2, [r3, #8]
 800d10a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d112:	e029      	b.n	800d168 <tcp_receive+0x620>
 800d114:	08017328 	.word	0x08017328
 800d118:	08017330 	.word	0x08017330
 800d11c:	20000278 	.word	0x20000278
 800d120:	20000274 	.word	0x20000274
 800d124:	2000707c 	.word	0x2000707c
 800d128:	2000027a 	.word	0x2000027a
 800d12c:	20000270 	.word	0x20000270
 800d130:	20000250 	.word	0x20000250
 800d134:	08016fc0 	.word	0x08016fc0
 800d138:	08017338 	.word	0x08017338
 800d13c:	0801700c 	.word	0x0801700c
 800d140:	08017348 	.word	0x08017348
 800d144:	08017358 	.word	0x08017358
        off -= p->len;
 800d148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d14a:	895b      	ldrh	r3, [r3, #10]
 800d14c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d158:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d15a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d15e:	2200      	movs	r2, #0
 800d160:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d16a:	895b      	ldrh	r3, [r3, #10]
 800d16c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d170:	429a      	cmp	r2, r3
 800d172:	d8e9      	bhi.n	800d148 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d174:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d178:	4619      	mov	r1, r3
 800d17a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d17c:	f7fc f8dc 	bl	8009338 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d184:	4a91      	ldr	r2, [pc, #580]	; (800d3cc <tcp_receive+0x884>)
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	4b91      	ldr	r3, [pc, #580]	; (800d3d0 <tcp_receive+0x888>)
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	4a8f      	ldr	r2, [pc, #572]	; (800d3cc <tcp_receive+0x884>)
 800d18e:	6812      	ldr	r2, [r2, #0]
 800d190:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d192:	e00d      	b.n	800d1b0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d194:	4b8d      	ldr	r3, [pc, #564]	; (800d3cc <tcp_receive+0x884>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	da06      	bge.n	800d1b0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	8b5b      	ldrh	r3, [r3, #26]
 800d1a6:	f043 0302 	orr.w	r3, r3, #2
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d1b0:	4b86      	ldr	r3, [pc, #536]	; (800d3cc <tcp_receive+0x884>)
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f2c0 842a 	blt.w	800da14 <tcp_receive+0xecc>
 800d1c0:	4b82      	ldr	r3, [pc, #520]	; (800d3cc <tcp_receive+0x884>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c8:	6879      	ldr	r1, [r7, #4]
 800d1ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d1cc:	440b      	add	r3, r1
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f300 841e 	bgt.w	800da14 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1dc:	4b7b      	ldr	r3, [pc, #492]	; (800d3cc <tcp_receive+0x884>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	f040 829a 	bne.w	800d71a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d1e6:	4b7a      	ldr	r3, [pc, #488]	; (800d3d0 <tcp_receive+0x888>)
 800d1e8:	891c      	ldrh	r4, [r3, #8]
 800d1ea:	4b79      	ldr	r3, [pc, #484]	; (800d3d0 <tcp_receive+0x888>)
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	899b      	ldrh	r3, [r3, #12]
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fa fe8b 	bl	8007f0e <lwip_htons>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f003 0303 	and.w	r3, r3, #3
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <tcp_receive+0x6c0>
 800d204:	2301      	movs	r3, #1
 800d206:	e000      	b.n	800d20a <tcp_receive+0x6c2>
 800d208:	2300      	movs	r3, #0
 800d20a:	4423      	add	r3, r4
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	4b71      	ldr	r3, [pc, #452]	; (800d3d4 <tcp_receive+0x88c>)
 800d210:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d216:	4b6f      	ldr	r3, [pc, #444]	; (800d3d4 <tcp_receive+0x88c>)
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d275      	bcs.n	800d30a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d21e:	4b6c      	ldr	r3, [pc, #432]	; (800d3d0 <tcp_receive+0x888>)
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	899b      	ldrh	r3, [r3, #12]
 800d224:	b29b      	uxth	r3, r3
 800d226:	4618      	mov	r0, r3
 800d228:	f7fa fe71 	bl	8007f0e <lwip_htons>
 800d22c:	4603      	mov	r3, r0
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	f003 0301 	and.w	r3, r3, #1
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01f      	beq.n	800d278 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d238:	4b65      	ldr	r3, [pc, #404]	; (800d3d0 <tcp_receive+0x888>)
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	899b      	ldrh	r3, [r3, #12]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	b21b      	sxth	r3, r3
 800d242:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d246:	b21c      	sxth	r4, r3
 800d248:	4b61      	ldr	r3, [pc, #388]	; (800d3d0 <tcp_receive+0x888>)
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	899b      	ldrh	r3, [r3, #12]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	4618      	mov	r0, r3
 800d252:	f7fa fe5c 	bl	8007f0e <lwip_htons>
 800d256:	4603      	mov	r3, r0
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d260:	b29b      	uxth	r3, r3
 800d262:	4618      	mov	r0, r3
 800d264:	f7fa fe53 	bl	8007f0e <lwip_htons>
 800d268:	4603      	mov	r3, r0
 800d26a:	b21b      	sxth	r3, r3
 800d26c:	4323      	orrs	r3, r4
 800d26e:	b21a      	sxth	r2, r3
 800d270:	4b57      	ldr	r3, [pc, #348]	; (800d3d0 <tcp_receive+0x888>)
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	b292      	uxth	r2, r2
 800d276:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d27c:	4b54      	ldr	r3, [pc, #336]	; (800d3d0 <tcp_receive+0x888>)
 800d27e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d280:	4b53      	ldr	r3, [pc, #332]	; (800d3d0 <tcp_receive+0x888>)
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	899b      	ldrh	r3, [r3, #12]
 800d286:	b29b      	uxth	r3, r3
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fa fe40 	bl	8007f0e <lwip_htons>
 800d28e:	4603      	mov	r3, r0
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d005      	beq.n	800d2a6 <tcp_receive+0x75e>
            inseg.len -= 1;
 800d29a:	4b4d      	ldr	r3, [pc, #308]	; (800d3d0 <tcp_receive+0x888>)
 800d29c:	891b      	ldrh	r3, [r3, #8]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	4b4b      	ldr	r3, [pc, #300]	; (800d3d0 <tcp_receive+0x888>)
 800d2a4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d2a6:	4b4a      	ldr	r3, [pc, #296]	; (800d3d0 <tcp_receive+0x888>)
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	4b49      	ldr	r3, [pc, #292]	; (800d3d0 <tcp_receive+0x888>)
 800d2ac:	891b      	ldrh	r3, [r3, #8]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7fb ff41 	bl	8009138 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d2b6:	4b46      	ldr	r3, [pc, #280]	; (800d3d0 <tcp_receive+0x888>)
 800d2b8:	891c      	ldrh	r4, [r3, #8]
 800d2ba:	4b45      	ldr	r3, [pc, #276]	; (800d3d0 <tcp_receive+0x888>)
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	899b      	ldrh	r3, [r3, #12]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fa fe23 	bl	8007f0e <lwip_htons>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f003 0303 	and.w	r3, r3, #3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d001      	beq.n	800d2d8 <tcp_receive+0x790>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e000      	b.n	800d2da <tcp_receive+0x792>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4423      	add	r3, r4
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	4b3d      	ldr	r3, [pc, #244]	; (800d3d4 <tcp_receive+0x88c>)
 800d2e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d2e2:	4b3c      	ldr	r3, [pc, #240]	; (800d3d4 <tcp_receive+0x88c>)
 800d2e4:	881b      	ldrh	r3, [r3, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	4b38      	ldr	r3, [pc, #224]	; (800d3cc <tcp_receive+0x884>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	441a      	add	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d2f6:	440b      	add	r3, r1
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d006      	beq.n	800d30a <tcp_receive+0x7c2>
 800d2fc:	4b36      	ldr	r3, [pc, #216]	; (800d3d8 <tcp_receive+0x890>)
 800d2fe:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d302:	4936      	ldr	r1, [pc, #216]	; (800d3dc <tcp_receive+0x894>)
 800d304:	4836      	ldr	r0, [pc, #216]	; (800d3e0 <tcp_receive+0x898>)
 800d306:	f005 fa89 	bl	801281c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80e7 	beq.w	800d4e2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d314:	4b2e      	ldr	r3, [pc, #184]	; (800d3d0 <tcp_receive+0x888>)
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	899b      	ldrh	r3, [r3, #12]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fa fdf6 	bl	8007f0e <lwip_htons>
 800d322:	4603      	mov	r3, r0
 800d324:	b2db      	uxtb	r3, r3
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d010      	beq.n	800d350 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d32e:	e00a      	b.n	800d346 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d334:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f7fd fcb1 	bl	800aca8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1f0      	bne.n	800d330 <tcp_receive+0x7e8>
 800d34e:	e0c8      	b.n	800d4e2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d354:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d356:	e052      	b.n	800d3fe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	4618      	mov	r0, r3
 800d362:	f7fa fdd4 	bl	8007f0e <lwip_htons>
 800d366:	4603      	mov	r3, r0
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d03d      	beq.n	800d3ee <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d372:	4b17      	ldr	r3, [pc, #92]	; (800d3d0 <tcp_receive+0x888>)
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	899b      	ldrh	r3, [r3, #12]
 800d378:	b29b      	uxth	r3, r3
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fa fdc7 	bl	8007f0e <lwip_htons>
 800d380:	4603      	mov	r3, r0
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d130      	bne.n	800d3ee <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d38c:	4b10      	ldr	r3, [pc, #64]	; (800d3d0 <tcp_receive+0x888>)
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	899b      	ldrh	r3, [r3, #12]
 800d392:	b29c      	uxth	r4, r3
 800d394:	2001      	movs	r0, #1
 800d396:	f7fa fdba 	bl	8007f0e <lwip_htons>
 800d39a:	4603      	mov	r3, r0
 800d39c:	461a      	mov	r2, r3
 800d39e:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <tcp_receive+0x888>)
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	4322      	orrs	r2, r4
 800d3a4:	b292      	uxth	r2, r2
 800d3a6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d3a8:	4b09      	ldr	r3, [pc, #36]	; (800d3d0 <tcp_receive+0x888>)
 800d3aa:	891c      	ldrh	r4, [r3, #8]
 800d3ac:	4b08      	ldr	r3, [pc, #32]	; (800d3d0 <tcp_receive+0x888>)
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	899b      	ldrh	r3, [r3, #12]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fa fdaa 	bl	8007f0e <lwip_htons>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	f003 0303 	and.w	r3, r3, #3
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00e      	beq.n	800d3e4 <tcp_receive+0x89c>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e00d      	b.n	800d3e6 <tcp_receive+0x89e>
 800d3ca:	bf00      	nop
 800d3cc:	20000270 	.word	0x20000270
 800d3d0:	20000250 	.word	0x20000250
 800d3d4:	2000027a 	.word	0x2000027a
 800d3d8:	08016fc0 	.word	0x08016fc0
 800d3dc:	08017368 	.word	0x08017368
 800d3e0:	0801700c 	.word	0x0801700c
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4423      	add	r3, r4
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	4b98      	ldr	r3, [pc, #608]	; (800d64c <tcp_receive+0xb04>)
 800d3ec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d3f8:	6938      	ldr	r0, [r7, #16]
 800d3fa:	f7fd fc55 	bl	800aca8 <tcp_seg_free>
            while (next &&
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00e      	beq.n	800d422 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d404:	4b91      	ldr	r3, [pc, #580]	; (800d64c <tcp_receive+0xb04>)
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	461a      	mov	r2, r3
 800d40a:	4b91      	ldr	r3, [pc, #580]	; (800d650 <tcp_receive+0xb08>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	441a      	add	r2, r3
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d418:	8909      	ldrh	r1, [r1, #8]
 800d41a:	440b      	add	r3, r1
 800d41c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d41e:	2b00      	cmp	r3, #0
 800d420:	da9a      	bge.n	800d358 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d424:	2b00      	cmp	r3, #0
 800d426:	d059      	beq.n	800d4dc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d428:	4b88      	ldr	r3, [pc, #544]	; (800d64c <tcp_receive+0xb04>)
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	461a      	mov	r2, r3
 800d42e:	4b88      	ldr	r3, [pc, #544]	; (800d650 <tcp_receive+0xb08>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	441a      	add	r2, r3
 800d434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	dd4d      	ble.n	800d4dc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	b29a      	uxth	r2, r3
 800d448:	4b81      	ldr	r3, [pc, #516]	; (800d650 <tcp_receive+0xb08>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	b29a      	uxth	r2, r3
 800d452:	4b80      	ldr	r3, [pc, #512]	; (800d654 <tcp_receive+0xb0c>)
 800d454:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d456:	4b7f      	ldr	r3, [pc, #508]	; (800d654 <tcp_receive+0xb0c>)
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	899b      	ldrh	r3, [r3, #12]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fa fd55 	bl	8007f0e <lwip_htons>
 800d464:	4603      	mov	r3, r0
 800d466:	b2db      	uxtb	r3, r3
 800d468:	f003 0302 	and.w	r3, r3, #2
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d005      	beq.n	800d47c <tcp_receive+0x934>
                inseg.len -= 1;
 800d470:	4b78      	ldr	r3, [pc, #480]	; (800d654 <tcp_receive+0xb0c>)
 800d472:	891b      	ldrh	r3, [r3, #8]
 800d474:	3b01      	subs	r3, #1
 800d476:	b29a      	uxth	r2, r3
 800d478:	4b76      	ldr	r3, [pc, #472]	; (800d654 <tcp_receive+0xb0c>)
 800d47a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d47c:	4b75      	ldr	r3, [pc, #468]	; (800d654 <tcp_receive+0xb0c>)
 800d47e:	685a      	ldr	r2, [r3, #4]
 800d480:	4b74      	ldr	r3, [pc, #464]	; (800d654 <tcp_receive+0xb0c>)
 800d482:	891b      	ldrh	r3, [r3, #8]
 800d484:	4619      	mov	r1, r3
 800d486:	4610      	mov	r0, r2
 800d488:	f7fb fe56 	bl	8009138 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d48c:	4b71      	ldr	r3, [pc, #452]	; (800d654 <tcp_receive+0xb0c>)
 800d48e:	891c      	ldrh	r4, [r3, #8]
 800d490:	4b70      	ldr	r3, [pc, #448]	; (800d654 <tcp_receive+0xb0c>)
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	b29b      	uxth	r3, r3
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fa fd38 	bl	8007f0e <lwip_htons>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 0303 	and.w	r3, r3, #3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <tcp_receive+0x966>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <tcp_receive+0x968>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4423      	add	r3, r4
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	4b65      	ldr	r3, [pc, #404]	; (800d64c <tcp_receive+0xb04>)
 800d4b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d4b8:	4b64      	ldr	r3, [pc, #400]	; (800d64c <tcp_receive+0xb04>)
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b64      	ldr	r3, [pc, #400]	; (800d650 <tcp_receive+0xb08>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	441a      	add	r2, r3
 800d4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d006      	beq.n	800d4dc <tcp_receive+0x994>
 800d4ce:	4b62      	ldr	r3, [pc, #392]	; (800d658 <tcp_receive+0xb10>)
 800d4d0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800d4d4:	4961      	ldr	r1, [pc, #388]	; (800d65c <tcp_receive+0xb14>)
 800d4d6:	4862      	ldr	r0, [pc, #392]	; (800d660 <tcp_receive+0xb18>)
 800d4d8:	f005 f9a0 	bl	801281c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d4e2:	4b5a      	ldr	r3, [pc, #360]	; (800d64c <tcp_receive+0xb04>)
 800d4e4:	881b      	ldrh	r3, [r3, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	4b59      	ldr	r3, [pc, #356]	; (800d650 <tcp_receive+0xb08>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	441a      	add	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4f6:	4b55      	ldr	r3, [pc, #340]	; (800d64c <tcp_receive+0xb04>)
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d206      	bcs.n	800d50c <tcp_receive+0x9c4>
 800d4fe:	4b56      	ldr	r3, [pc, #344]	; (800d658 <tcp_receive+0xb10>)
 800d500:	f240 6207 	movw	r2, #1543	; 0x607
 800d504:	4957      	ldr	r1, [pc, #348]	; (800d664 <tcp_receive+0xb1c>)
 800d506:	4856      	ldr	r0, [pc, #344]	; (800d660 <tcp_receive+0xb18>)
 800d508:	f005 f988 	bl	801281c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d510:	4b4e      	ldr	r3, [pc, #312]	; (800d64c <tcp_receive+0xb04>)
 800d512:	881b      	ldrh	r3, [r3, #0]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	b29a      	uxth	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7fc fea1 	bl	800a264 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d522:	4b4c      	ldr	r3, [pc, #304]	; (800d654 <tcp_receive+0xb0c>)
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	891b      	ldrh	r3, [r3, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d006      	beq.n	800d53a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d52c:	4b49      	ldr	r3, [pc, #292]	; (800d654 <tcp_receive+0xb0c>)
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	4a4d      	ldr	r2, [pc, #308]	; (800d668 <tcp_receive+0xb20>)
 800d532:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d534:	4b47      	ldr	r3, [pc, #284]	; (800d654 <tcp_receive+0xb0c>)
 800d536:	2200      	movs	r2, #0
 800d538:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d53a:	4b46      	ldr	r3, [pc, #280]	; (800d654 <tcp_receive+0xb0c>)
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	899b      	ldrh	r3, [r3, #12]
 800d540:	b29b      	uxth	r3, r3
 800d542:	4618      	mov	r0, r3
 800d544:	f7fa fce3 	bl	8007f0e <lwip_htons>
 800d548:	4603      	mov	r3, r0
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 80b8 	beq.w	800d6c6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d556:	4b45      	ldr	r3, [pc, #276]	; (800d66c <tcp_receive+0xb24>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	f043 0320 	orr.w	r3, r3, #32
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	4b42      	ldr	r3, [pc, #264]	; (800d66c <tcp_receive+0xb24>)
 800d562:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d564:	e0af      	b.n	800d6c6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d56a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	4a36      	ldr	r2, [pc, #216]	; (800d650 <tcp_receive+0xb08>)
 800d576:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	891b      	ldrh	r3, [r3, #8]
 800d57c:	461c      	mov	r4, r3
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	899b      	ldrh	r3, [r3, #12]
 800d584:	b29b      	uxth	r3, r3
 800d586:	4618      	mov	r0, r3
 800d588:	f7fa fcc1 	bl	8007f0e <lwip_htons>
 800d58c:	4603      	mov	r3, r0
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	f003 0303 	and.w	r3, r3, #3
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <tcp_receive+0xa54>
 800d598:	2301      	movs	r3, #1
 800d59a:	e000      	b.n	800d59e <tcp_receive+0xa56>
 800d59c:	2300      	movs	r3, #0
 800d59e:	191a      	adds	r2, r3, r4
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a4:	441a      	add	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ae:	461c      	mov	r4, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	461d      	mov	r5, r3
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	899b      	ldrh	r3, [r3, #12]
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fa fca5 	bl	8007f0e <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	f003 0303 	and.w	r3, r3, #3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <tcp_receive+0xa8c>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e000      	b.n	800d5d6 <tcp_receive+0xa8e>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	442b      	add	r3, r5
 800d5d8:	429c      	cmp	r4, r3
 800d5da:	d206      	bcs.n	800d5ea <tcp_receive+0xaa2>
 800d5dc:	4b1e      	ldr	r3, [pc, #120]	; (800d658 <tcp_receive+0xb10>)
 800d5de:	f240 622c 	movw	r2, #1580	; 0x62c
 800d5e2:	4923      	ldr	r1, [pc, #140]	; (800d670 <tcp_receive+0xb28>)
 800d5e4:	481e      	ldr	r0, [pc, #120]	; (800d660 <tcp_receive+0xb18>)
 800d5e6:	f005 f919 	bl	801281c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	891b      	ldrh	r3, [r3, #8]
 800d5ee:	461c      	mov	r4, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	899b      	ldrh	r3, [r3, #12]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fa fc88 	bl	8007f0e <lwip_htons>
 800d5fe:	4603      	mov	r3, r0
 800d600:	b2db      	uxtb	r3, r3
 800d602:	f003 0303 	and.w	r3, r3, #3
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <tcp_receive+0xac6>
 800d60a:	2301      	movs	r3, #1
 800d60c:	e000      	b.n	800d610 <tcp_receive+0xac8>
 800d60e:	2300      	movs	r3, #0
 800d610:	1919      	adds	r1, r3, r4
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d616:	b28b      	uxth	r3, r1
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7fc fe1f 	bl	800a264 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	891b      	ldrh	r3, [r3, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d028      	beq.n	800d682 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <tcp_receive+0xb20>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d01d      	beq.n	800d674 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d638:	4b0b      	ldr	r3, [pc, #44]	; (800d668 <tcp_receive+0xb20>)
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	4619      	mov	r1, r3
 800d642:	4610      	mov	r0, r2
 800d644:	f7fb ffc0 	bl	80095c8 <pbuf_cat>
 800d648:	e018      	b.n	800d67c <tcp_receive+0xb34>
 800d64a:	bf00      	nop
 800d64c:	2000027a 	.word	0x2000027a
 800d650:	20000270 	.word	0x20000270
 800d654:	20000250 	.word	0x20000250
 800d658:	08016fc0 	.word	0x08016fc0
 800d65c:	080173a0 	.word	0x080173a0
 800d660:	0801700c 	.word	0x0801700c
 800d664:	080173dc 	.word	0x080173dc
 800d668:	20000280 	.word	0x20000280
 800d66c:	2000027d 	.word	0x2000027d
 800d670:	080173fc 	.word	0x080173fc
            } else {
              recv_data = cseg->p;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	4a70      	ldr	r2, [pc, #448]	; (800d83c <tcp_receive+0xcf4>)
 800d67a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	2200      	movs	r2, #0
 800d680:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	899b      	ldrh	r3, [r3, #12]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fa fc3f 	bl	8007f0e <lwip_htons>
 800d690:	4603      	mov	r3, r0
 800d692:	b2db      	uxtb	r3, r3
 800d694:	f003 0301 	and.w	r3, r3, #1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00d      	beq.n	800d6b8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d69c:	4b68      	ldr	r3, [pc, #416]	; (800d840 <tcp_receive+0xcf8>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	f043 0320 	orr.w	r3, r3, #32
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	4b66      	ldr	r3, [pc, #408]	; (800d840 <tcp_receive+0xcf8>)
 800d6a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	7d1b      	ldrb	r3, [r3, #20]
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d102      	bne.n	800d6b8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2207      	movs	r2, #7
 800d6b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d6c0:	68b8      	ldr	r0, [r7, #8]
 800d6c2:	f7fd faf1 	bl	800aca8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d008      	beq.n	800d6e0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	685a      	ldr	r2, [r3, #4]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	f43f af43 	beq.w	800d566 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	8b5b      	ldrh	r3, [r3, #26]
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00e      	beq.n	800d70a <tcp_receive+0xbc2>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	8b5b      	ldrh	r3, [r3, #26]
 800d6f0:	f023 0301 	bic.w	r3, r3, #1
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	835a      	strh	r2, [r3, #26]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	8b5b      	ldrh	r3, [r3, #26]
 800d6fe:	f043 0302 	orr.w	r3, r3, #2
 800d702:	b29a      	uxth	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d708:	e188      	b.n	800da1c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	8b5b      	ldrh	r3, [r3, #26]
 800d70e:	f043 0301 	orr.w	r3, r3, #1
 800d712:	b29a      	uxth	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d718:	e180      	b.n	800da1c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d722:	4848      	ldr	r0, [pc, #288]	; (800d844 <tcp_receive+0xcfc>)
 800d724:	f7fd faf6 	bl	800ad14 <tcp_seg_copy>
 800d728:	4602      	mov	r2, r0
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	675a      	str	r2, [r3, #116]	; 0x74
 800d72e:	e16d      	b.n	800da0c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d730:	2300      	movs	r3, #0
 800d732:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d738:	63bb      	str	r3, [r7, #56]	; 0x38
 800d73a:	e157      	b.n	800d9ec <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	4b41      	ldr	r3, [pc, #260]	; (800d848 <tcp_receive+0xd00>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	429a      	cmp	r2, r3
 800d748:	d11d      	bne.n	800d786 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d74a:	4b3e      	ldr	r3, [pc, #248]	; (800d844 <tcp_receive+0xcfc>)
 800d74c:	891a      	ldrh	r2, [r3, #8]
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	891b      	ldrh	r3, [r3, #8]
 800d752:	429a      	cmp	r2, r3
 800d754:	f240 814f 	bls.w	800d9f6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d758:	483a      	ldr	r0, [pc, #232]	; (800d844 <tcp_receive+0xcfc>)
 800d75a:	f7fd fadb 	bl	800ad14 <tcp_seg_copy>
 800d75e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 8149 	beq.w	800d9fa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800d768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	e002      	b.n	800d77c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	697a      	ldr	r2, [r7, #20]
 800d77a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d77c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d77e:	6978      	ldr	r0, [r7, #20]
 800d780:	f7ff f8de 	bl	800c940 <tcp_oos_insert_segment>
                }
                break;
 800d784:	e139      	b.n	800d9fa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d117      	bne.n	800d7bc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d78c:	4b2e      	ldr	r3, [pc, #184]	; (800d848 <tcp_receive+0xd00>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	2b00      	cmp	r3, #0
 800d79a:	da57      	bge.n	800d84c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d79c:	4829      	ldr	r0, [pc, #164]	; (800d844 <tcp_receive+0xcfc>)
 800d79e:	f7fd fab9 	bl	800ad14 <tcp_seg_copy>
 800d7a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f000 8129 	beq.w	800d9fe <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	69ba      	ldr	r2, [r7, #24]
 800d7b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d7b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7b4:	69b8      	ldr	r0, [r7, #24]
 800d7b6:	f7ff f8c3 	bl	800c940 <tcp_oos_insert_segment>
                  }
                  break;
 800d7ba:	e120      	b.n	800d9fe <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d7bc:	4b22      	ldr	r3, [pc, #136]	; (800d848 <tcp_receive+0xd00>)
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	db3e      	blt.n	800d84c <tcp_receive+0xd04>
 800d7ce:	4b1e      	ldr	r3, [pc, #120]	; (800d848 <tcp_receive+0xd00>)
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	1ad3      	subs	r3, r2, r3
 800d7da:	3301      	adds	r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	dc35      	bgt.n	800d84c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d7e0:	4818      	ldr	r0, [pc, #96]	; (800d844 <tcp_receive+0xcfc>)
 800d7e2:	f7fd fa97 	bl	800ad14 <tcp_seg_copy>
 800d7e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 8109 	beq.w	800da02 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7f8:	8912      	ldrh	r2, [r2, #8]
 800d7fa:	441a      	add	r2, r3
 800d7fc:	4b12      	ldr	r3, [pc, #72]	; (800d848 <tcp_receive+0xd00>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	dd12      	ble.n	800d82c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d806:	4b10      	ldr	r3, [pc, #64]	; (800d848 <tcp_receive+0xd00>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	b29b      	uxth	r3, r3
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	b29a      	uxth	r2, r3
 800d818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d81a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f7fb fc86 	bl	8009138 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d82e:	69fa      	ldr	r2, [r7, #28]
 800d830:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d834:	69f8      	ldr	r0, [r7, #28]
 800d836:	f7ff f883 	bl	800c940 <tcp_oos_insert_segment>
                  }
                  break;
 800d83a:	e0e2      	b.n	800da02 <tcp_receive+0xeba>
 800d83c:	20000280 	.word	0x20000280
 800d840:	2000027d 	.word	0x2000027d
 800d844:	20000250 	.word	0x20000250
 800d848:	20000270 	.word	0x20000270
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	f040 80c6 	bne.w	800d9e6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d85a:	4b80      	ldr	r3, [pc, #512]	; (800da5c <tcp_receive+0xf14>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d866:	2b00      	cmp	r3, #0
 800d868:	f340 80bd 	ble.w	800d9e6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	899b      	ldrh	r3, [r3, #12]
 800d872:	b29b      	uxth	r3, r3
 800d874:	4618      	mov	r0, r3
 800d876:	f7fa fb4a 	bl	8007f0e <lwip_htons>
 800d87a:	4603      	mov	r3, r0
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	f040 80bf 	bne.w	800da06 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d888:	4875      	ldr	r0, [pc, #468]	; (800da60 <tcp_receive+0xf18>)
 800d88a:	f7fd fa43 	bl	800ad14 <tcp_seg_copy>
 800d88e:	4602      	mov	r2, r0
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 80b6 	beq.w	800da0a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8a6:	8912      	ldrh	r2, [r2, #8]
 800d8a8:	441a      	add	r2, r3
 800d8aa:	4b6c      	ldr	r3, [pc, #432]	; (800da5c <tcp_receive+0xf14>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dd12      	ble.n	800d8da <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d8b4:	4b69      	ldr	r3, [pc, #420]	; (800da5c <tcp_receive+0xf14>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8cc:	685a      	ldr	r2, [r3, #4]
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d0:	891b      	ldrh	r3, [r3, #8]
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	f7fb fc2f 	bl	8009138 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d8da:	4b62      	ldr	r3, [pc, #392]	; (800da64 <tcp_receive+0xf1c>)
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	4b5e      	ldr	r3, [pc, #376]	; (800da5c <tcp_receive+0xf14>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	441a      	add	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d8ee:	440b      	add	r3, r1
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f340 8089 	ble.w	800da0a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	899b      	ldrh	r3, [r3, #12]
 800d900:	b29b      	uxth	r3, r3
 800d902:	4618      	mov	r0, r3
 800d904:	f7fa fb03 	bl	8007f0e <lwip_htons>
 800d908:	4603      	mov	r3, r0
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d022      	beq.n	800d95a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	899b      	ldrh	r3, [r3, #12]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	b21b      	sxth	r3, r3
 800d920:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d924:	b21c      	sxth	r4, r3
 800d926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	899b      	ldrh	r3, [r3, #12]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	4618      	mov	r0, r3
 800d932:	f7fa faec 	bl	8007f0e <lwip_htons>
 800d936:	4603      	mov	r3, r0
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d940:	b29b      	uxth	r3, r3
 800d942:	4618      	mov	r0, r3
 800d944:	f7fa fae3 	bl	8007f0e <lwip_htons>
 800d948:	4603      	mov	r3, r0
 800d94a:	b21b      	sxth	r3, r3
 800d94c:	4323      	orrs	r3, r4
 800d94e:	b21a      	sxth	r2, r3
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	b292      	uxth	r2, r2
 800d958:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95e:	b29a      	uxth	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d964:	4413      	add	r3, r2
 800d966:	b299      	uxth	r1, r3
 800d968:	4b3c      	ldr	r3, [pc, #240]	; (800da5c <tcp_receive+0xf14>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	1a8a      	subs	r2, r1, r2
 800d974:	b292      	uxth	r2, r2
 800d976:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	891b      	ldrh	r3, [r3, #8]
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fb fbd6 	bl	8009138 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	891c      	ldrh	r4, [r3, #8]
 800d992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	899b      	ldrh	r3, [r3, #12]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fa fab6 	bl	8007f0e <lwip_htons>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	f003 0303 	and.w	r3, r3, #3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d001      	beq.n	800d9b2 <tcp_receive+0xe6a>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e000      	b.n	800d9b4 <tcp_receive+0xe6c>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	4423      	add	r3, r4
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	4b2a      	ldr	r3, [pc, #168]	; (800da64 <tcp_receive+0xf1c>)
 800d9ba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d9bc:	4b29      	ldr	r3, [pc, #164]	; (800da64 <tcp_receive+0xf1c>)
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	4b26      	ldr	r3, [pc, #152]	; (800da5c <tcp_receive+0xf14>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	441a      	add	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9cc:	6879      	ldr	r1, [r7, #4]
 800d9ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d9d0:	440b      	add	r3, r1
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d019      	beq.n	800da0a <tcp_receive+0xec2>
 800d9d6:	4b24      	ldr	r3, [pc, #144]	; (800da68 <tcp_receive+0xf20>)
 800d9d8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d9dc:	4923      	ldr	r1, [pc, #140]	; (800da6c <tcp_receive+0xf24>)
 800d9de:	4824      	ldr	r0, [pc, #144]	; (800da70 <tcp_receive+0xf28>)
 800d9e0:	f004 ff1c 	bl	801281c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d9e4:	e011      	b.n	800da0a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f47f aea4 	bne.w	800d73c <tcp_receive+0xbf4>
 800d9f4:	e00a      	b.n	800da0c <tcp_receive+0xec4>
                break;
 800d9f6:	bf00      	nop
 800d9f8:	e008      	b.n	800da0c <tcp_receive+0xec4>
                break;
 800d9fa:	bf00      	nop
 800d9fc:	e006      	b.n	800da0c <tcp_receive+0xec4>
                  break;
 800d9fe:	bf00      	nop
 800da00:	e004      	b.n	800da0c <tcp_receive+0xec4>
                  break;
 800da02:	bf00      	nop
 800da04:	e002      	b.n	800da0c <tcp_receive+0xec4>
                  break;
 800da06:	bf00      	nop
 800da08:	e000      	b.n	800da0c <tcp_receive+0xec4>
                break;
 800da0a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f001 fe9d 	bl	800f74c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800da12:	e003      	b.n	800da1c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f001 fe99 	bl	800f74c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800da1a:	e01a      	b.n	800da52 <tcp_receive+0xf0a>
 800da1c:	e019      	b.n	800da52 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800da1e:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <tcp_receive+0xf14>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	db0a      	blt.n	800da42 <tcp_receive+0xefa>
 800da2c:	4b0b      	ldr	r3, [pc, #44]	; (800da5c <tcp_receive+0xf14>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	6879      	ldr	r1, [r7, #4]
 800da36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da38:	440b      	add	r3, r1
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	3301      	adds	r3, #1
 800da3e:	2b00      	cmp	r3, #0
 800da40:	dd07      	ble.n	800da52 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	8b5b      	ldrh	r3, [r3, #26]
 800da46:	f043 0302 	orr.w	r3, r3, #2
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800da50:	e7ff      	b.n	800da52 <tcp_receive+0xf0a>
 800da52:	bf00      	nop
 800da54:	3750      	adds	r7, #80	; 0x50
 800da56:	46bd      	mov	sp, r7
 800da58:	bdb0      	pop	{r4, r5, r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20000270 	.word	0x20000270
 800da60:	20000250 	.word	0x20000250
 800da64:	2000027a 	.word	0x2000027a
 800da68:	08016fc0 	.word	0x08016fc0
 800da6c:	08017368 	.word	0x08017368
 800da70:	0801700c 	.word	0x0801700c

0800da74 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800da7a:	4b15      	ldr	r3, [pc, #84]	; (800dad0 <tcp_get_next_optbyte+0x5c>)
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	b291      	uxth	r1, r2
 800da82:	4a13      	ldr	r2, [pc, #76]	; (800dad0 <tcp_get_next_optbyte+0x5c>)
 800da84:	8011      	strh	r1, [r2, #0]
 800da86:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800da88:	4b12      	ldr	r3, [pc, #72]	; (800dad4 <tcp_get_next_optbyte+0x60>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d004      	beq.n	800da9a <tcp_get_next_optbyte+0x26>
 800da90:	4b11      	ldr	r3, [pc, #68]	; (800dad8 <tcp_get_next_optbyte+0x64>)
 800da92:	881b      	ldrh	r3, [r3, #0]
 800da94:	88fa      	ldrh	r2, [r7, #6]
 800da96:	429a      	cmp	r2, r3
 800da98:	d208      	bcs.n	800daac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800da9a:	4b10      	ldr	r3, [pc, #64]	; (800dadc <tcp_get_next_optbyte+0x68>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3314      	adds	r3, #20
 800daa0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800daa2:	88fb      	ldrh	r3, [r7, #6]
 800daa4:	683a      	ldr	r2, [r7, #0]
 800daa6:	4413      	add	r3, r2
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	e00b      	b.n	800dac4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800daac:	88fb      	ldrh	r3, [r7, #6]
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <tcp_get_next_optbyte+0x64>)
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800daba:	4b06      	ldr	r3, [pc, #24]	; (800dad4 <tcp_get_next_optbyte+0x60>)
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	797b      	ldrb	r3, [r7, #5]
 800dac0:	4413      	add	r3, r2
 800dac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	2000026c 	.word	0x2000026c
 800dad4:	20000268 	.word	0x20000268
 800dad8:	20000266 	.word	0x20000266
 800dadc:	20000260 	.word	0x20000260

0800dae0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <tcp_parseopt+0x1c>
 800daee:	4b31      	ldr	r3, [pc, #196]	; (800dbb4 <tcp_parseopt+0xd4>)
 800daf0:	f240 727d 	movw	r2, #1917	; 0x77d
 800daf4:	4930      	ldr	r1, [pc, #192]	; (800dbb8 <tcp_parseopt+0xd8>)
 800daf6:	4831      	ldr	r0, [pc, #196]	; (800dbbc <tcp_parseopt+0xdc>)
 800daf8:	f004 fe90 	bl	801281c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dafc:	4b30      	ldr	r3, [pc, #192]	; (800dbc0 <tcp_parseopt+0xe0>)
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d053      	beq.n	800dbac <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800db04:	4b2f      	ldr	r3, [pc, #188]	; (800dbc4 <tcp_parseopt+0xe4>)
 800db06:	2200      	movs	r2, #0
 800db08:	801a      	strh	r2, [r3, #0]
 800db0a:	e043      	b.n	800db94 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800db0c:	f7ff ffb2 	bl	800da74 <tcp_get_next_optbyte>
 800db10:	4603      	mov	r3, r0
 800db12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	2b01      	cmp	r3, #1
 800db18:	d03c      	beq.n	800db94 <tcp_parseopt+0xb4>
 800db1a:	2b02      	cmp	r3, #2
 800db1c:	d002      	beq.n	800db24 <tcp_parseopt+0x44>
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d03f      	beq.n	800dba2 <tcp_parseopt+0xc2>
 800db22:	e026      	b.n	800db72 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800db24:	f7ff ffa6 	bl	800da74 <tcp_get_next_optbyte>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d13b      	bne.n	800dba6 <tcp_parseopt+0xc6>
 800db2e:	4b25      	ldr	r3, [pc, #148]	; (800dbc4 <tcp_parseopt+0xe4>)
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	3302      	adds	r3, #2
 800db34:	4a22      	ldr	r2, [pc, #136]	; (800dbc0 <tcp_parseopt+0xe0>)
 800db36:	8812      	ldrh	r2, [r2, #0]
 800db38:	4293      	cmp	r3, r2
 800db3a:	dc34      	bgt.n	800dba6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800db3c:	f7ff ff9a 	bl	800da74 <tcp_get_next_optbyte>
 800db40:	4603      	mov	r3, r0
 800db42:	b29b      	uxth	r3, r3
 800db44:	021b      	lsls	r3, r3, #8
 800db46:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800db48:	f7ff ff94 	bl	800da74 <tcp_get_next_optbyte>
 800db4c:	4603      	mov	r3, r0
 800db4e:	b29a      	uxth	r2, r3
 800db50:	89bb      	ldrh	r3, [r7, #12]
 800db52:	4313      	orrs	r3, r2
 800db54:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800db56:	89bb      	ldrh	r3, [r7, #12]
 800db58:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800db5c:	d804      	bhi.n	800db68 <tcp_parseopt+0x88>
 800db5e:	89bb      	ldrh	r3, [r7, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <tcp_parseopt+0x88>
 800db64:	89ba      	ldrh	r2, [r7, #12]
 800db66:	e001      	b.n	800db6c <tcp_parseopt+0x8c>
 800db68:	f44f 7206 	mov.w	r2, #536	; 0x218
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800db70:	e010      	b.n	800db94 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800db72:	f7ff ff7f 	bl	800da74 <tcp_get_next_optbyte>
 800db76:	4603      	mov	r3, r0
 800db78:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800db7a:	7afb      	ldrb	r3, [r7, #11]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d914      	bls.n	800dbaa <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800db80:	7afb      	ldrb	r3, [r7, #11]
 800db82:	b29a      	uxth	r2, r3
 800db84:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <tcp_parseopt+0xe4>)
 800db86:	881b      	ldrh	r3, [r3, #0]
 800db88:	4413      	add	r3, r2
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	3b02      	subs	r3, #2
 800db8e:	b29a      	uxth	r2, r3
 800db90:	4b0c      	ldr	r3, [pc, #48]	; (800dbc4 <tcp_parseopt+0xe4>)
 800db92:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800db94:	4b0b      	ldr	r3, [pc, #44]	; (800dbc4 <tcp_parseopt+0xe4>)
 800db96:	881a      	ldrh	r2, [r3, #0]
 800db98:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <tcp_parseopt+0xe0>)
 800db9a:	881b      	ldrh	r3, [r3, #0]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d3b5      	bcc.n	800db0c <tcp_parseopt+0x2c>
 800dba0:	e004      	b.n	800dbac <tcp_parseopt+0xcc>
          return;
 800dba2:	bf00      	nop
 800dba4:	e002      	b.n	800dbac <tcp_parseopt+0xcc>
            return;
 800dba6:	bf00      	nop
 800dba8:	e000      	b.n	800dbac <tcp_parseopt+0xcc>
            return;
 800dbaa:	bf00      	nop
      }
    }
  }
}
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	08016fc0 	.word	0x08016fc0
 800dbb8:	08017424 	.word	0x08017424
 800dbbc:	0801700c 	.word	0x0801700c
 800dbc0:	20000264 	.word	0x20000264
 800dbc4:	2000026c 	.word	0x2000026c

0800dbc8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800dbcc:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <tcp_trigger_input_pcb_close+0x1c>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	f043 0310 	orr.w	r3, r3, #16
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	4b03      	ldr	r3, [pc, #12]	; (800dbe4 <tcp_trigger_input_pcb_close+0x1c>)
 800dbd8:	701a      	strb	r2, [r3, #0]
}
 800dbda:	bf00      	nop
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	2000027d 	.word	0x2000027d

0800dbe8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <tcp_route+0x28>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	7a1b      	ldrb	r3, [r3, #8]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d006      	beq.n	800dc10 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7a1b      	ldrb	r3, [r3, #8]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fb f8c0 	bl	8008d8c <netif_get_by_index>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	e003      	b.n	800dc18 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f003 fae7 	bl	80111e4 <ip4_route>
 800dc16:	4603      	mov	r3, r0
  }
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800dc20:	b590      	push	{r4, r7, lr}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	603b      	str	r3, [r7, #0]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d105      	bne.n	800dc42 <tcp_create_segment+0x22>
 800dc36:	4b44      	ldr	r3, [pc, #272]	; (800dd48 <tcp_create_segment+0x128>)
 800dc38:	22a3      	movs	r2, #163	; 0xa3
 800dc3a:	4944      	ldr	r1, [pc, #272]	; (800dd4c <tcp_create_segment+0x12c>)
 800dc3c:	4844      	ldr	r0, [pc, #272]	; (800dd50 <tcp_create_segment+0x130>)
 800dc3e:	f004 fded 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d105      	bne.n	800dc54 <tcp_create_segment+0x34>
 800dc48:	4b3f      	ldr	r3, [pc, #252]	; (800dd48 <tcp_create_segment+0x128>)
 800dc4a:	22a4      	movs	r2, #164	; 0xa4
 800dc4c:	4941      	ldr	r1, [pc, #260]	; (800dd54 <tcp_create_segment+0x134>)
 800dc4e:	4840      	ldr	r0, [pc, #256]	; (800dd50 <tcp_create_segment+0x130>)
 800dc50:	f004 fde4 	bl	801281c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dc62:	2003      	movs	r0, #3
 800dc64:	f7fa fda8 	bl	80087b8 <memp_malloc>
 800dc68:	6138      	str	r0, [r7, #16]
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d104      	bne.n	800dc7a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dc70:	68b8      	ldr	r0, [r7, #8]
 800dc72:	f7fb fbe7 	bl	8009444 <pbuf_free>
    return NULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e061      	b.n	800dd3e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dc80:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	2200      	movs	r2, #0
 800dc86:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	891a      	ldrh	r2, [r3, #8]
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d205      	bcs.n	800dca6 <tcp_create_segment+0x86>
 800dc9a:	4b2b      	ldr	r3, [pc, #172]	; (800dd48 <tcp_create_segment+0x128>)
 800dc9c:	22b0      	movs	r2, #176	; 0xb0
 800dc9e:	492e      	ldr	r1, [pc, #184]	; (800dd58 <tcp_create_segment+0x138>)
 800dca0:	482b      	ldr	r0, [pc, #172]	; (800dd50 <tcp_create_segment+0x130>)
 800dca2:	f004 fdbb 	bl	801281c <iprintf>
  seg->len = p->tot_len - optlen;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	891a      	ldrh	r2, [r3, #8]
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dcb6:	2114      	movs	r1, #20
 800dcb8:	68b8      	ldr	r0, [r7, #8]
 800dcba:	f7fb fb2d 	bl	8009318 <pbuf_add_header>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d004      	beq.n	800dcce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dcc4:	6938      	ldr	r0, [r7, #16]
 800dcc6:	f7fc ffef 	bl	800aca8 <tcp_seg_free>
    return NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	e037      	b.n	800dd3e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	685a      	ldr	r2, [r3, #4]
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	8ada      	ldrh	r2, [r3, #22]
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	68dc      	ldr	r4, [r3, #12]
 800dce0:	4610      	mov	r0, r2
 800dce2:	f7fa f914 	bl	8007f0e <lwip_htons>
 800dce6:	4603      	mov	r3, r0
 800dce8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	8b1a      	ldrh	r2, [r3, #24]
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	68dc      	ldr	r4, [r3, #12]
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fa f90b 	bl	8007f0e <lwip_htons>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	68dc      	ldr	r4, [r3, #12]
 800dd00:	6838      	ldr	r0, [r7, #0]
 800dd02:	f7fa f919 	bl	8007f38 <lwip_htonl>
 800dd06:	4603      	mov	r3, r0
 800dd08:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
 800dd0c:	089b      	lsrs	r3, r3, #2
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	3305      	adds	r3, #5
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	031b      	lsls	r3, r3, #12
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	68dc      	ldr	r4, [r3, #12]
 800dd26:	4610      	mov	r0, r2
 800dd28:	f7fa f8f1 	bl	8007f0e <lwip_htons>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	2200      	movs	r2, #0
 800dd36:	749a      	strb	r2, [r3, #18]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	74da      	strb	r2, [r3, #19]
  return seg;
 800dd3c:	693b      	ldr	r3, [r7, #16]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	371c      	adds	r7, #28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd90      	pop	{r4, r7, pc}
 800dd46:	bf00      	nop
 800dd48:	08017440 	.word	0x08017440
 800dd4c:	08017474 	.word	0x08017474
 800dd50:	08017494 	.word	0x08017494
 800dd54:	080174bc 	.word	0x080174bc
 800dd58:	080174e0 	.word	0x080174e0

0800dd5c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	607b      	str	r3, [r7, #4]
 800dd64:	4603      	mov	r3, r0
 800dd66:	73fb      	strb	r3, [r7, #15]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	81bb      	strh	r3, [r7, #12]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800dd70:	89bb      	ldrh	r3, [r7, #12]
 800dd72:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <tcp_pbuf_prealloc+0x2a>
 800dd7a:	4b30      	ldr	r3, [pc, #192]	; (800de3c <tcp_pbuf_prealloc+0xe0>)
 800dd7c:	22e8      	movs	r2, #232	; 0xe8
 800dd7e:	4930      	ldr	r1, [pc, #192]	; (800de40 <tcp_pbuf_prealloc+0xe4>)
 800dd80:	4830      	ldr	r0, [pc, #192]	; (800de44 <tcp_pbuf_prealloc+0xe8>)
 800dd82:	f004 fd4b 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d105      	bne.n	800dd98 <tcp_pbuf_prealloc+0x3c>
 800dd8c:	4b2b      	ldr	r3, [pc, #172]	; (800de3c <tcp_pbuf_prealloc+0xe0>)
 800dd8e:	22e9      	movs	r2, #233	; 0xe9
 800dd90:	492d      	ldr	r1, [pc, #180]	; (800de48 <tcp_pbuf_prealloc+0xec>)
 800dd92:	482c      	ldr	r0, [pc, #176]	; (800de44 <tcp_pbuf_prealloc+0xe8>)
 800dd94:	f004 fd42 	bl	801281c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800dd98:	89ba      	ldrh	r2, [r7, #12]
 800dd9a:	897b      	ldrh	r3, [r7, #10]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d221      	bcs.n	800dde4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dda0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dda4:	f003 0302 	and.w	r3, r3, #2
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d111      	bne.n	800ddd0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	8b5b      	ldrh	r3, [r3, #26]
 800ddb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d115      	bne.n	800dde4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ddb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d007      	beq.n	800ddd0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d103      	bne.n	800ddd0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ddc8:	6a3b      	ldr	r3, [r7, #32]
 800ddca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d009      	beq.n	800dde4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ddd0:	89bb      	ldrh	r3, [r7, #12]
 800ddd2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ddd6:	f023 0203 	bic.w	r2, r3, #3
 800ddda:	897b      	ldrh	r3, [r7, #10]
 800dddc:	4293      	cmp	r3, r2
 800ddde:	bf28      	it	cs
 800dde0:	4613      	movcs	r3, r2
 800dde2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800dde4:	8af9      	ldrh	r1, [r7, #22]
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fb f849 	bl	8008e84 <pbuf_alloc>
 800ddf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e019      	b.n	800de32 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d006      	beq.n	800de14 <tcp_pbuf_prealloc+0xb8>
 800de06:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <tcp_pbuf_prealloc+0xe0>)
 800de08:	f240 120b 	movw	r2, #267	; 0x10b
 800de0c:	490f      	ldr	r1, [pc, #60]	; (800de4c <tcp_pbuf_prealloc+0xf0>)
 800de0e:	480d      	ldr	r0, [pc, #52]	; (800de44 <tcp_pbuf_prealloc+0xe8>)
 800de10:	f004 fd04 	bl	801281c <iprintf>
  *oversize = p->len - length;
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	895a      	ldrh	r2, [r3, #10]
 800de18:	89bb      	ldrh	r3, [r7, #12]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	89ba      	ldrh	r2, [r7, #12]
 800de26:	811a      	strh	r2, [r3, #8]
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	891a      	ldrh	r2, [r3, #8]
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	815a      	strh	r2, [r3, #10]
  return p;
 800de30:	693b      	ldr	r3, [r7, #16]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	08017440 	.word	0x08017440
 800de40:	080174f8 	.word	0x080174f8
 800de44:	08017494 	.word	0x08017494
 800de48:	0801751c 	.word	0x0801751c
 800de4c:	0801753c 	.word	0x0801753c

0800de50 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d106      	bne.n	800de70 <tcp_write_checks+0x20>
 800de62:	4b33      	ldr	r3, [pc, #204]	; (800df30 <tcp_write_checks+0xe0>)
 800de64:	f240 1233 	movw	r2, #307	; 0x133
 800de68:	4932      	ldr	r1, [pc, #200]	; (800df34 <tcp_write_checks+0xe4>)
 800de6a:	4833      	ldr	r0, [pc, #204]	; (800df38 <tcp_write_checks+0xe8>)
 800de6c:	f004 fcd6 	bl	801281c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
 800de74:	2b04      	cmp	r3, #4
 800de76:	d00e      	beq.n	800de96 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800de7c:	2b07      	cmp	r3, #7
 800de7e:	d00a      	beq.n	800de96 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800de84:	2b02      	cmp	r3, #2
 800de86:	d006      	beq.n	800de96 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800de8c:	2b03      	cmp	r3, #3
 800de8e:	d002      	beq.n	800de96 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800de90:	f06f 030a 	mvn.w	r3, #10
 800de94:	e048      	b.n	800df28 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800de96:	887b      	ldrh	r3, [r7, #2]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d101      	bne.n	800dea0 <tcp_write_checks+0x50>
    return ERR_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	e043      	b.n	800df28 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dea6:	887a      	ldrh	r2, [r7, #2]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d909      	bls.n	800dec0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	8b5b      	ldrh	r3, [r3, #26]
 800deb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800deba:	f04f 33ff 	mov.w	r3, #4294967295
 800debe:	e033      	b.n	800df28 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dec6:	2b08      	cmp	r3, #8
 800dec8:	d909      	bls.n	800dede <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	8b5b      	ldrh	r3, [r3, #26]
 800dece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ded8:	f04f 33ff 	mov.w	r3, #4294967295
 800dedc:	e024      	b.n	800df28 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00f      	beq.n	800df08 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deec:	2b00      	cmp	r3, #0
 800deee:	d11a      	bne.n	800df26 <tcp_write_checks+0xd6>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800def4:	2b00      	cmp	r3, #0
 800def6:	d116      	bne.n	800df26 <tcp_write_checks+0xd6>
 800def8:	4b0d      	ldr	r3, [pc, #52]	; (800df30 <tcp_write_checks+0xe0>)
 800defa:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800defe:	490f      	ldr	r1, [pc, #60]	; (800df3c <tcp_write_checks+0xec>)
 800df00:	480d      	ldr	r0, [pc, #52]	; (800df38 <tcp_write_checks+0xe8>)
 800df02:	f004 fc8b 	bl	801281c <iprintf>
 800df06:	e00e      	b.n	800df26 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d103      	bne.n	800df18 <tcp_write_checks+0xc8>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d006      	beq.n	800df26 <tcp_write_checks+0xd6>
 800df18:	4b05      	ldr	r3, [pc, #20]	; (800df30 <tcp_write_checks+0xe0>)
 800df1a:	f240 1259 	movw	r2, #345	; 0x159
 800df1e:	4908      	ldr	r1, [pc, #32]	; (800df40 <tcp_write_checks+0xf0>)
 800df20:	4805      	ldr	r0, [pc, #20]	; (800df38 <tcp_write_checks+0xe8>)
 800df22:	f004 fc7b 	bl	801281c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3708      	adds	r7, #8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	08017440 	.word	0x08017440
 800df34:	08017550 	.word	0x08017550
 800df38:	08017494 	.word	0x08017494
 800df3c:	08017570 	.word	0x08017570
 800df40:	080175ac 	.word	0x080175ac

0800df44 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800df44:	b590      	push	{r4, r7, lr}
 800df46:	b09b      	sub	sp, #108	; 0x6c
 800df48:	af04      	add	r7, sp, #16
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4611      	mov	r1, r2
 800df50:	461a      	mov	r2, r3
 800df52:	460b      	mov	r3, r1
 800df54:	80fb      	strh	r3, [r7, #6]
 800df56:	4613      	mov	r3, r2
 800df58:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800df5a:	2300      	movs	r3, #0
 800df5c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	653b      	str	r3, [r7, #80]	; 0x50
 800df62:	2300      	movs	r3, #0
 800df64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df66:	2300      	movs	r3, #0
 800df68:	64bb      	str	r3, [r7, #72]	; 0x48
 800df6a:	2300      	movs	r3, #0
 800df6c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800df6e:	2300      	movs	r3, #0
 800df70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800df7a:	2300      	movs	r3, #0
 800df7c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d109      	bne.n	800dfa0 <tcp_write+0x5c>
 800df8c:	4ba5      	ldr	r3, [pc, #660]	; (800e224 <tcp_write+0x2e0>)
 800df8e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800df92:	49a5      	ldr	r1, [pc, #660]	; (800e228 <tcp_write+0x2e4>)
 800df94:	48a5      	ldr	r0, [pc, #660]	; (800e22c <tcp_write+0x2e8>)
 800df96:	f004 fc41 	bl	801281c <iprintf>
 800df9a:	f06f 030f 	mvn.w	r3, #15
 800df9e:	e32c      	b.n	800e5fa <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfa6:	085b      	lsrs	r3, r3, #1
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	bf28      	it	cs
 800dfb2:	4613      	movcs	r3, r2
 800dfb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800dfb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d102      	bne.n	800dfc2 <tcp_write+0x7e>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfc0:	e000      	b.n	800dfc4 <tcp_write+0x80>
 800dfc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d109      	bne.n	800dfe0 <tcp_write+0x9c>
 800dfcc:	4b95      	ldr	r3, [pc, #596]	; (800e224 <tcp_write+0x2e0>)
 800dfce:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800dfd2:	4997      	ldr	r1, [pc, #604]	; (800e230 <tcp_write+0x2ec>)
 800dfd4:	4895      	ldr	r0, [pc, #596]	; (800e22c <tcp_write+0x2e8>)
 800dfd6:	f004 fc21 	bl	801281c <iprintf>
 800dfda:	f06f 030f 	mvn.w	r3, #15
 800dfde:	e30c      	b.n	800e5fa <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f7ff ff33 	bl	800de50 <tcp_write_checks>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800dff0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <tcp_write+0xba>
    return err;
 800dff8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800dffc:	e2fd      	b.n	800e5fa <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e004:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e008:	2300      	movs	r3, #0
 800e00a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 80f7 	beq.w	800e206 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e01c:	653b      	str	r3, [r7, #80]	; 0x50
 800e01e:	e002      	b.n	800e026 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1f8      	bne.n	800e020 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e030:	7a9b      	ldrb	r3, [r3, #10]
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	b29b      	uxth	r3, r3
 800e036:	f003 0304 	and.w	r3, r3, #4
 800e03a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e03c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e040:	891b      	ldrh	r3, [r3, #8]
 800e042:	4619      	mov	r1, r3
 800e044:	8c3b      	ldrh	r3, [r7, #32]
 800e046:	440b      	add	r3, r1
 800e048:	429a      	cmp	r2, r3
 800e04a:	da06      	bge.n	800e05a <tcp_write+0x116>
 800e04c:	4b75      	ldr	r3, [pc, #468]	; (800e224 <tcp_write+0x2e0>)
 800e04e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e052:	4978      	ldr	r1, [pc, #480]	; (800e234 <tcp_write+0x2f0>)
 800e054:	4875      	ldr	r0, [pc, #468]	; (800e22c <tcp_write+0x2e8>)
 800e056:	f004 fbe1 	bl	801281c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e05c:	891a      	ldrh	r2, [r3, #8]
 800e05e:	8c3b      	ldrh	r3, [r7, #32]
 800e060:	4413      	add	r3, r2
 800e062:	b29b      	uxth	r3, r3
 800e064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e070:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e072:	8a7b      	ldrh	r3, [r7, #18]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d027      	beq.n	800e0c8 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e078:	8a7b      	ldrh	r3, [r7, #18]
 800e07a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d206      	bcs.n	800e08e <tcp_write+0x14a>
 800e080:	4b68      	ldr	r3, [pc, #416]	; (800e224 <tcp_write+0x2e0>)
 800e082:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e086:	496c      	ldr	r1, [pc, #432]	; (800e238 <tcp_write+0x2f4>)
 800e088:	4868      	ldr	r0, [pc, #416]	; (800e22c <tcp_write+0x2e8>)
 800e08a:	f004 fbc7 	bl	801281c <iprintf>
      seg = last_unsent;
 800e08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e090:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e092:	8a7b      	ldrh	r3, [r7, #18]
 800e094:	88fa      	ldrh	r2, [r7, #6]
 800e096:	429a      	cmp	r2, r3
 800e098:	d901      	bls.n	800e09e <tcp_write+0x15a>
 800e09a:	8a7b      	ldrh	r3, [r7, #18]
 800e09c:	e000      	b.n	800e0a0 <tcp_write+0x15c>
 800e09e:	88fb      	ldrh	r3, [r7, #6]
 800e0a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	bfa8      	it	ge
 800e0a6:	4613      	movge	r3, r2
 800e0a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e0aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e0b6:	8a7a      	ldrh	r2, [r7, #18]
 800e0b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e0c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e0c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0c4:	1ad3      	subs	r3, r2, r3
 800e0c6:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e0c8:	8a7b      	ldrh	r3, [r7, #18]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00b      	beq.n	800e0e6 <tcp_write+0x1a2>
 800e0ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0d2:	88fb      	ldrh	r3, [r7, #6]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d006      	beq.n	800e0e6 <tcp_write+0x1a2>
 800e0d8:	4b52      	ldr	r3, [pc, #328]	; (800e224 <tcp_write+0x2e0>)
 800e0da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0de:	4957      	ldr	r1, [pc, #348]	; (800e23c <tcp_write+0x2f8>)
 800e0e0:	4852      	ldr	r0, [pc, #328]	; (800e22c <tcp_write+0x2e8>)
 800e0e2:	f004 fb9b 	bl	801281c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e0e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e0ea:	88fb      	ldrh	r3, [r7, #6]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	f080 8168 	bcs.w	800e3c2 <tcp_write+0x47e>
 800e0f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 8164 	beq.w	800e3c2 <tcp_write+0x47e>
 800e0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0fc:	891b      	ldrh	r3, [r3, #8]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f000 815f 	beq.w	800e3c2 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e104:	88fa      	ldrh	r2, [r7, #6]
 800e106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e10a:	1ad2      	subs	r2, r2, r3
 800e10c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e10e:	4293      	cmp	r3, r2
 800e110:	bfa8      	it	ge
 800e112:	4613      	movge	r3, r2
 800e114:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e118:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e11a:	797b      	ldrb	r3, [r7, #5]
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	2b00      	cmp	r3, #0
 800e122:	d027      	beq.n	800e174 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e124:	f107 0012 	add.w	r0, r7, #18
 800e128:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e12a:	8bf9      	ldrh	r1, [r7, #30]
 800e12c:	2301      	movs	r3, #1
 800e12e:	9302      	str	r3, [sp, #8]
 800e130:	797b      	ldrb	r3, [r7, #5]
 800e132:	9301      	str	r3, [sp, #4]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	4603      	mov	r3, r0
 800e13a:	2000      	movs	r0, #0
 800e13c:	f7ff fe0e 	bl	800dd5c <tcp_pbuf_prealloc>
 800e140:	6578      	str	r0, [r7, #84]	; 0x54
 800e142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8226 	beq.w	800e596 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e14c:	6858      	ldr	r0, [r3, #4]
 800e14e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e152:	68ba      	ldr	r2, [r7, #8]
 800e154:	4413      	add	r3, r2
 800e156:	8bfa      	ldrh	r2, [r7, #30]
 800e158:	4619      	mov	r1, r3
 800e15a:	f004 fa8a 	bl	8012672 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e15e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e160:	f7fb f9f8 	bl	8009554 <pbuf_clen>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e16c:	4413      	add	r3, r2
 800e16e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e172:	e041      	b.n	800e1f8 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	637b      	str	r3, [r7, #52]	; 0x34
 800e17a:	e002      	b.n	800e182 <tcp_write+0x23e>
 800e17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	637b      	str	r3, [r7, #52]	; 0x34
 800e182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1f8      	bne.n	800e17c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18c:	7b1b      	ldrb	r3, [r3, #12]
 800e18e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e192:	2b00      	cmp	r3, #0
 800e194:	d115      	bne.n	800e1c2 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e19c:	8952      	ldrh	r2, [r2, #10]
 800e19e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d10d      	bne.n	800e1c2 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e1a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d006      	beq.n	800e1bc <tcp_write+0x278>
 800e1ae:	4b1d      	ldr	r3, [pc, #116]	; (800e224 <tcp_write+0x2e0>)
 800e1b0:	f240 2231 	movw	r2, #561	; 0x231
 800e1b4:	4922      	ldr	r1, [pc, #136]	; (800e240 <tcp_write+0x2fc>)
 800e1b6:	481d      	ldr	r0, [pc, #116]	; (800e22c <tcp_write+0x2e8>)
 800e1b8:	f004 fb30 	bl	801281c <iprintf>
          extendlen = seglen;
 800e1bc:	8bfb      	ldrh	r3, [r7, #30]
 800e1be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e1c0:	e01a      	b.n	800e1f8 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e1c2:	8bfb      	ldrh	r3, [r7, #30]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	f7fa fe5b 	bl	8008e84 <pbuf_alloc>
 800e1ce:	6578      	str	r0, [r7, #84]	; 0x54
 800e1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f000 81e1 	beq.w	800e59a <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e1d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	441a      	add	r2, r3
 800e1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1e2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e1e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e1e6:	f7fb f9b5 	bl	8009554 <pbuf_clen>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e1f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e1fc:	8bfb      	ldrh	r3, [r7, #30]
 800e1fe:	4413      	add	r3, r2
 800e200:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e204:	e0dd      	b.n	800e3c2 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 80d8 	beq.w	800e3c2 <tcp_write+0x47e>
 800e212:	4b04      	ldr	r3, [pc, #16]	; (800e224 <tcp_write+0x2e0>)
 800e214:	f240 224b 	movw	r2, #587	; 0x24b
 800e218:	490a      	ldr	r1, [pc, #40]	; (800e244 <tcp_write+0x300>)
 800e21a:	4804      	ldr	r0, [pc, #16]	; (800e22c <tcp_write+0x2e8>)
 800e21c:	f004 fafe 	bl	801281c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e220:	e0cf      	b.n	800e3c2 <tcp_write+0x47e>
 800e222:	bf00      	nop
 800e224:	08017440 	.word	0x08017440
 800e228:	080175e0 	.word	0x080175e0
 800e22c:	08017494 	.word	0x08017494
 800e230:	080175f8 	.word	0x080175f8
 800e234:	0801762c 	.word	0x0801762c
 800e238:	08017644 	.word	0x08017644
 800e23c:	08017664 	.word	0x08017664
 800e240:	08017684 	.word	0x08017684
 800e244:	080176b0 	.word	0x080176b0
    struct pbuf *p;
    u16_t left = len - pos;
 800e248:	88fa      	ldrh	r2, [r7, #6]
 800e24a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e24e:	1ad3      	subs	r3, r2, r3
 800e250:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e252:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e256:	b29b      	uxth	r3, r3
 800e258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e25a:	1ad3      	subs	r3, r2, r3
 800e25c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e25e:	8b7a      	ldrh	r2, [r7, #26]
 800e260:	8bbb      	ldrh	r3, [r7, #28]
 800e262:	4293      	cmp	r3, r2
 800e264:	bf28      	it	cs
 800e266:	4613      	movcs	r3, r2
 800e268:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e26a:	797b      	ldrb	r3, [r7, #5]
 800e26c:	f003 0301 	and.w	r3, r3, #1
 800e270:	2b00      	cmp	r3, #0
 800e272:	d036      	beq.n	800e2e2 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e274:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e278:	b29a      	uxth	r2, r3
 800e27a:	8b3b      	ldrh	r3, [r7, #24]
 800e27c:	4413      	add	r3, r2
 800e27e:	b299      	uxth	r1, r3
 800e280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e282:	2b00      	cmp	r3, #0
 800e284:	bf0c      	ite	eq
 800e286:	2301      	moveq	r3, #1
 800e288:	2300      	movne	r3, #0
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	f107 0012 	add.w	r0, r7, #18
 800e290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e292:	9302      	str	r3, [sp, #8]
 800e294:	797b      	ldrb	r3, [r7, #5]
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	4603      	mov	r3, r0
 800e29e:	2036      	movs	r0, #54	; 0x36
 800e2a0:	f7ff fd5c 	bl	800dd5c <tcp_pbuf_prealloc>
 800e2a4:	6338      	str	r0, [r7, #48]	; 0x30
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f000 8178 	beq.w	800e59e <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b0:	895b      	ldrh	r3, [r3, #10]
 800e2b2:	8b3a      	ldrh	r2, [r7, #24]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d906      	bls.n	800e2c6 <tcp_write+0x382>
 800e2b8:	4b8c      	ldr	r3, [pc, #560]	; (800e4ec <tcp_write+0x5a8>)
 800e2ba:	f240 2267 	movw	r2, #615	; 0x267
 800e2be:	498c      	ldr	r1, [pc, #560]	; (800e4f0 <tcp_write+0x5ac>)
 800e2c0:	488c      	ldr	r0, [pc, #560]	; (800e4f4 <tcp_write+0x5b0>)
 800e2c2:	f004 faab 	bl	801281c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e2ce:	18d0      	adds	r0, r2, r3
 800e2d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	8b3a      	ldrh	r2, [r7, #24]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	f004 f9c9 	bl	8012672 <memcpy>
 800e2e0:	e02f      	b.n	800e342 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e2e2:	8a7b      	ldrh	r3, [r7, #18]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d006      	beq.n	800e2f6 <tcp_write+0x3b2>
 800e2e8:	4b80      	ldr	r3, [pc, #512]	; (800e4ec <tcp_write+0x5a8>)
 800e2ea:	f240 2271 	movw	r2, #625	; 0x271
 800e2ee:	4982      	ldr	r1, [pc, #520]	; (800e4f8 <tcp_write+0x5b4>)
 800e2f0:	4880      	ldr	r0, [pc, #512]	; (800e4f4 <tcp_write+0x5b0>)
 800e2f2:	f004 fa93 	bl	801281c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e2f6:	8b3b      	ldrh	r3, [r7, #24]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	2036      	movs	r0, #54	; 0x36
 800e2fe:	f7fa fdc1 	bl	8008e84 <pbuf_alloc>
 800e302:	6178      	str	r0, [r7, #20]
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	2b00      	cmp	r3, #0
 800e308:	f000 814b 	beq.w	800e5a2 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e30c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	441a      	add	r2, r3
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e318:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e322:	4619      	mov	r1, r3
 800e324:	2036      	movs	r0, #54	; 0x36
 800e326:	f7fa fdad 	bl	8008e84 <pbuf_alloc>
 800e32a:	6338      	str	r0, [r7, #48]	; 0x30
 800e32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d103      	bne.n	800e33a <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e332:	6978      	ldr	r0, [r7, #20]
 800e334:	f7fb f886 	bl	8009444 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e338:	e136      	b.n	800e5a8 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e33a:	6979      	ldr	r1, [r7, #20]
 800e33c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e33e:	f7fb f943 	bl	80095c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e344:	f7fb f906 	bl	8009554 <pbuf_clen>
 800e348:	4603      	mov	r3, r0
 800e34a:	461a      	mov	r2, r3
 800e34c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e350:	4413      	add	r3, r2
 800e352:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e356:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e35a:	2b09      	cmp	r3, #9
 800e35c:	d903      	bls.n	800e366 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e35e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e360:	f7fb f870 	bl	8009444 <pbuf_free>
      goto memerr;
 800e364:	e120      	b.n	800e5a8 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e36a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e36e:	441a      	add	r2, r3
 800e370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	4613      	mov	r3, r2
 800e378:	2200      	movs	r2, #0
 800e37a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f7ff fc4f 	bl	800dc20 <tcp_create_segment>
 800e382:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 810d 	beq.w	800e5a6 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <tcp_write+0x454>
      queue = seg;
 800e392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e394:	647b      	str	r3, [r7, #68]	; 0x44
 800e396:	e00c      	b.n	800e3b2 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d106      	bne.n	800e3ac <tcp_write+0x468>
 800e39e:	4b53      	ldr	r3, [pc, #332]	; (800e4ec <tcp_write+0x5a8>)
 800e3a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e3a4:	4955      	ldr	r1, [pc, #340]	; (800e4fc <tcp_write+0x5b8>)
 800e3a6:	4853      	ldr	r0, [pc, #332]	; (800e4f4 <tcp_write+0x5b0>)
 800e3a8:	f004 fa38 	bl	801281c <iprintf>
      prev_seg->next = seg;
 800e3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3b0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3b4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e3b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3ba:	8b3b      	ldrh	r3, [r7, #24]
 800e3bc:	4413      	add	r3, r2
 800e3be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e3c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3c6:	88fb      	ldrh	r3, [r7, #6]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	f4ff af3d 	bcc.w	800e248 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e3ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d02c      	beq.n	800e42e <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3da:	e01e      	b.n	800e41a <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800e3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3de:	891a      	ldrh	r2, [r3, #8]
 800e3e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e3e2:	4413      	add	r3, r2
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d110      	bne.n	800e414 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f8:	8952      	ldrh	r2, [r2, #10]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	4618      	mov	r0, r3
 800e402:	f004 f936 	bl	8012672 <memcpy>
        p->len += oversize_used;
 800e406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e408:	895a      	ldrh	r2, [r3, #10]
 800e40a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e40c:	4413      	add	r3, r2
 800e40e:	b29a      	uxth	r2, r3
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1dd      	bne.n	800e3dc <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800e420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e422:	891a      	ldrh	r2, [r3, #8]
 800e424:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e426:	4413      	add	r3, r2
 800e428:	b29a      	uxth	r2, r3
 800e42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e42c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e42e:	8a7a      	ldrh	r2, [r7, #18]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d018      	beq.n	800e46e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d106      	bne.n	800e450 <tcp_write+0x50c>
 800e442:	4b2a      	ldr	r3, [pc, #168]	; (800e4ec <tcp_write+0x5a8>)
 800e444:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e448:	492d      	ldr	r1, [pc, #180]	; (800e500 <tcp_write+0x5bc>)
 800e44a:	482a      	ldr	r0, [pc, #168]	; (800e4f4 <tcp_write+0x5b0>)
 800e44c:	f004 f9e6 	bl	801281c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e456:	4618      	mov	r0, r3
 800e458:	f7fb f8b6 	bl	80095c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e45e:	891a      	ldrh	r2, [r3, #8]
 800e460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e462:	891b      	ldrh	r3, [r3, #8]
 800e464:	4413      	add	r3, r2
 800e466:	b29a      	uxth	r2, r3
 800e468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e46a:	811a      	strh	r2, [r3, #8]
 800e46c:	e037      	b.n	800e4de <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800e46e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e470:	2b00      	cmp	r3, #0
 800e472:	d034      	beq.n	800e4de <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e476:	2b00      	cmp	r3, #0
 800e478:	d003      	beq.n	800e482 <tcp_write+0x53e>
 800e47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d106      	bne.n	800e490 <tcp_write+0x54c>
 800e482:	4b1a      	ldr	r3, [pc, #104]	; (800e4ec <tcp_write+0x5a8>)
 800e484:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e488:	491e      	ldr	r1, [pc, #120]	; (800e504 <tcp_write+0x5c0>)
 800e48a:	481a      	ldr	r0, [pc, #104]	; (800e4f4 <tcp_write+0x5b0>)
 800e48c:	f004 f9c6 	bl	801281c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	62bb      	str	r3, [r7, #40]	; 0x28
 800e496:	e009      	b.n	800e4ac <tcp_write+0x568>
      p->tot_len += extendlen;
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	891a      	ldrh	r2, [r3, #8]
 800e49c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e49e:	4413      	add	r3, r2
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1f1      	bne.n	800e498 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	891a      	ldrh	r2, [r3, #8]
 800e4b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4ba:	4413      	add	r3, r2
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	895a      	ldrh	r2, [r3, #10]
 800e4c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4c8:	4413      	add	r3, r2
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d2:	891a      	ldrh	r2, [r3, #8]
 800e4d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4d6:	4413      	add	r3, r2
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4dc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d111      	bne.n	800e508 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800e4ea:	e010      	b.n	800e50e <tcp_write+0x5ca>
 800e4ec:	08017440 	.word	0x08017440
 800e4f0:	080176e0 	.word	0x080176e0
 800e4f4:	08017494 	.word	0x08017494
 800e4f8:	08017720 	.word	0x08017720
 800e4fc:	08017730 	.word	0x08017730
 800e500:	08017744 	.word	0x08017744
 800e504:	0801777c 	.word	0x0801777c
  } else {
    last_unsent->next = queue;
 800e508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e50a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e50c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e512:	88fb      	ldrh	r3, [r7, #6]
 800e514:	441a      	add	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e520:	88fb      	ldrh	r3, [r7, #6]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	b29a      	uxth	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e532:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d00e      	beq.n	800e55e <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10a      	bne.n	800e55e <tcp_write+0x61a>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d106      	bne.n	800e55e <tcp_write+0x61a>
 800e550:	4b2c      	ldr	r3, [pc, #176]	; (800e604 <tcp_write+0x6c0>)
 800e552:	f240 3213 	movw	r2, #787	; 0x313
 800e556:	492c      	ldr	r1, [pc, #176]	; (800e608 <tcp_write+0x6c4>)
 800e558:	482c      	ldr	r0, [pc, #176]	; (800e60c <tcp_write+0x6c8>)
 800e55a:	f004 f95f 	bl	801281c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e560:	2b00      	cmp	r3, #0
 800e562:	d016      	beq.n	800e592 <tcp_write+0x64e>
 800e564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d012      	beq.n	800e592 <tcp_write+0x64e>
 800e56c:	797b      	ldrb	r3, [r7, #5]
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10d      	bne.n	800e592 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	899b      	ldrh	r3, [r3, #12]
 800e57c:	b29c      	uxth	r4, r3
 800e57e:	2008      	movs	r0, #8
 800e580:	f7f9 fcc5 	bl	8007f0e <lwip_htons>
 800e584:	4603      	mov	r3, r0
 800e586:	461a      	mov	r2, r3
 800e588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	4322      	orrs	r2, r4
 800e58e:	b292      	uxth	r2, r2
 800e590:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	e031      	b.n	800e5fa <tcp_write+0x6b6>
          goto memerr;
 800e596:	bf00      	nop
 800e598:	e006      	b.n	800e5a8 <tcp_write+0x664>
            goto memerr;
 800e59a:	bf00      	nop
 800e59c:	e004      	b.n	800e5a8 <tcp_write+0x664>
        goto memerr;
 800e59e:	bf00      	nop
 800e5a0:	e002      	b.n	800e5a8 <tcp_write+0x664>
        goto memerr;
 800e5a2:	bf00      	nop
 800e5a4:	e000      	b.n	800e5a8 <tcp_write+0x664>
      goto memerr;
 800e5a6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	8b5b      	ldrh	r3, [r3, #26]
 800e5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e5b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <tcp_write+0x67e>
    pbuf_free(concat_p);
 800e5bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e5be:	f7fa ff41 	bl	8009444 <pbuf_free>
  }
  if (queue != NULL) {
 800e5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <tcp_write+0x68a>
    tcp_segs_free(queue);
 800e5c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e5ca:	f7fc fb59 	bl	800ac80 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00e      	beq.n	800e5f6 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10a      	bne.n	800e5f6 <tcp_write+0x6b2>
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d106      	bne.n	800e5f6 <tcp_write+0x6b2>
 800e5e8:	4b06      	ldr	r3, [pc, #24]	; (800e604 <tcp_write+0x6c0>)
 800e5ea:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e5ee:	4906      	ldr	r1, [pc, #24]	; (800e608 <tcp_write+0x6c4>)
 800e5f0:	4806      	ldr	r0, [pc, #24]	; (800e60c <tcp_write+0x6c8>)
 800e5f2:	f004 f913 	bl	801281c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e5f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	375c      	adds	r7, #92	; 0x5c
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd90      	pop	{r4, r7, pc}
 800e602:	bf00      	nop
 800e604:	08017440 	.word	0x08017440
 800e608:	080177b4 	.word	0x080177b4
 800e60c:	08017494 	.word	0x08017494

0800e610 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b08b      	sub	sp, #44	; 0x2c
 800e614:	af02      	add	r7, sp, #8
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	460b      	mov	r3, r1
 800e61a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e61c:	2300      	movs	r3, #0
 800e61e:	61fb      	str	r3, [r7, #28]
 800e620:	2300      	movs	r3, #0
 800e622:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e624:	2300      	movs	r3, #0
 800e626:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d106      	bne.n	800e63c <tcp_split_unsent_seg+0x2c>
 800e62e:	4b95      	ldr	r3, [pc, #596]	; (800e884 <tcp_split_unsent_seg+0x274>)
 800e630:	f240 324b 	movw	r2, #843	; 0x34b
 800e634:	4994      	ldr	r1, [pc, #592]	; (800e888 <tcp_split_unsent_seg+0x278>)
 800e636:	4895      	ldr	r0, [pc, #596]	; (800e88c <tcp_split_unsent_seg+0x27c>)
 800e638:	f004 f8f0 	bl	801281c <iprintf>

  useg = pcb->unsent;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e640:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d102      	bne.n	800e64e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e648:	f04f 33ff 	mov.w	r3, #4294967295
 800e64c:	e116      	b.n	800e87c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e64e:	887b      	ldrh	r3, [r7, #2]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d109      	bne.n	800e668 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e654:	4b8b      	ldr	r3, [pc, #556]	; (800e884 <tcp_split_unsent_seg+0x274>)
 800e656:	f240 3253 	movw	r2, #851	; 0x353
 800e65a:	498d      	ldr	r1, [pc, #564]	; (800e890 <tcp_split_unsent_seg+0x280>)
 800e65c:	488b      	ldr	r0, [pc, #556]	; (800e88c <tcp_split_unsent_seg+0x27c>)
 800e65e:	f004 f8dd 	bl	801281c <iprintf>
    return ERR_VAL;
 800e662:	f06f 0305 	mvn.w	r3, #5
 800e666:	e109      	b.n	800e87c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	891b      	ldrh	r3, [r3, #8]
 800e66c:	887a      	ldrh	r2, [r7, #2]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d301      	bcc.n	800e676 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e672:	2300      	movs	r3, #0
 800e674:	e102      	b.n	800e87c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67a:	887a      	ldrh	r2, [r7, #2]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d906      	bls.n	800e68e <tcp_split_unsent_seg+0x7e>
 800e680:	4b80      	ldr	r3, [pc, #512]	; (800e884 <tcp_split_unsent_seg+0x274>)
 800e682:	f240 325b 	movw	r2, #859	; 0x35b
 800e686:	4983      	ldr	r1, [pc, #524]	; (800e894 <tcp_split_unsent_seg+0x284>)
 800e688:	4880      	ldr	r0, [pc, #512]	; (800e88c <tcp_split_unsent_seg+0x27c>)
 800e68a:	f004 f8c7 	bl	801281c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	891b      	ldrh	r3, [r3, #8]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d106      	bne.n	800e6a4 <tcp_split_unsent_seg+0x94>
 800e696:	4b7b      	ldr	r3, [pc, #492]	; (800e884 <tcp_split_unsent_seg+0x274>)
 800e698:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e69c:	497e      	ldr	r1, [pc, #504]	; (800e898 <tcp_split_unsent_seg+0x288>)
 800e69e:	487b      	ldr	r0, [pc, #492]	; (800e88c <tcp_split_unsent_seg+0x27c>)
 800e6a0:	f004 f8bc 	bl	801281c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	7a9b      	ldrb	r3, [r3, #10]
 800e6a8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e6aa:	7bfb      	ldrb	r3, [r7, #15]
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	f003 0304 	and.w	r3, r3, #4
 800e6b4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	891a      	ldrh	r2, [r3, #8]
 800e6ba:	887b      	ldrh	r3, [r7, #2]
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e6c0:	7bbb      	ldrb	r3, [r7, #14]
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	89bb      	ldrh	r3, [r7, #12]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	2036      	movs	r0, #54	; 0x36
 800e6d2:	f7fa fbd7 	bl	8008e84 <pbuf_alloc>
 800e6d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 80b7 	beq.w	800e84e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	891a      	ldrh	r2, [r3, #8]
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	891b      	ldrh	r3, [r3, #8]
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	887b      	ldrh	r3, [r7, #2]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	6858      	ldr	r0, [r3, #4]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	7bbb      	ldrb	r3, [r7, #14]
 800e6fe:	18d1      	adds	r1, r2, r3
 800e700:	897b      	ldrh	r3, [r7, #10]
 800e702:	89ba      	ldrh	r2, [r7, #12]
 800e704:	f7fb f898 	bl	8009838 <pbuf_copy_partial>
 800e708:	4603      	mov	r3, r0
 800e70a:	461a      	mov	r2, r3
 800e70c:	89bb      	ldrh	r3, [r7, #12]
 800e70e:	4293      	cmp	r3, r2
 800e710:	f040 809f 	bne.w	800e852 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	899b      	ldrh	r3, [r3, #12]
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7f9 fbf6 	bl	8007f0e <lwip_htons>
 800e722:	4603      	mov	r3, r0
 800e724:	b2db      	uxtb	r3, r3
 800e726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e72a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e72c:	2300      	movs	r3, #0
 800e72e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e730:	7efb      	ldrb	r3, [r7, #27]
 800e732:	f003 0308 	and.w	r3, r3, #8
 800e736:	2b00      	cmp	r3, #0
 800e738:	d007      	beq.n	800e74a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e73a:	7efb      	ldrb	r3, [r7, #27]
 800e73c:	f023 0308 	bic.w	r3, r3, #8
 800e740:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e742:	7ebb      	ldrb	r3, [r7, #26]
 800e744:	f043 0308 	orr.w	r3, r3, #8
 800e748:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e74a:	7efb      	ldrb	r3, [r7, #27]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d007      	beq.n	800e764 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e754:	7efb      	ldrb	r3, [r7, #27]
 800e756:	f023 0301 	bic.w	r3, r3, #1
 800e75a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e75c:	7ebb      	ldrb	r3, [r7, #26]
 800e75e:	f043 0301 	orr.w	r3, r3, #1
 800e762:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f9 fbe4 	bl	8007f38 <lwip_htonl>
 800e770:	4602      	mov	r2, r0
 800e772:	887b      	ldrh	r3, [r7, #2]
 800e774:	18d1      	adds	r1, r2, r3
 800e776:	7eba      	ldrb	r2, [r7, #26]
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	460b      	mov	r3, r1
 800e77e:	6939      	ldr	r1, [r7, #16]
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fa4d 	bl	800dc20 <tcp_create_segment>
 800e786:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d063      	beq.n	800e856 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	4618      	mov	r0, r3
 800e794:	f7fa fede 	bl	8009554 <pbuf_clen>
 800e798:	4603      	mov	r3, r0
 800e79a:	461a      	mov	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e7a2:	1a9b      	subs	r3, r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	6858      	ldr	r0, [r3, #4]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	891a      	ldrh	r2, [r3, #8]
 800e7b6:	89bb      	ldrh	r3, [r7, #12]
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	4619      	mov	r1, r3
 800e7be:	f7fa fcbb 	bl	8009138 <pbuf_realloc>
  useg->len -= remainder;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	891a      	ldrh	r2, [r3, #8]
 800e7c6:	89bb      	ldrh	r3, [r7, #12]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	899b      	ldrh	r3, [r3, #12]
 800e7d6:	b29c      	uxth	r4, r3
 800e7d8:	7efb      	ldrb	r3, [r7, #27]
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7f9 fb96 	bl	8007f0e <lwip_htons>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	4322      	orrs	r2, r4
 800e7ec:	b292      	uxth	r2, r2
 800e7ee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fa fead 	bl	8009554 <pbuf_clen>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e804:	4413      	add	r3, r2
 800e806:	b29a      	uxth	r2, r3
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	4618      	mov	r0, r3
 800e814:	f7fa fe9e 	bl	8009554 <pbuf_clen>
 800e818:	4603      	mov	r3, r0
 800e81a:	461a      	mov	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e822:	4413      	add	r3, r2
 800e824:	b29a      	uxth	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	69fa      	ldr	r2, [r7, #28]
 800e838:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d103      	bne.n	800e84a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e016      	b.n	800e87c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e84e:	bf00      	nop
 800e850:	e002      	b.n	800e858 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e852:	bf00      	nop
 800e854:	e000      	b.n	800e858 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e856:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d006      	beq.n	800e86c <tcp_split_unsent_seg+0x25c>
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <tcp_split_unsent_seg+0x274>)
 800e860:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e864:	490d      	ldr	r1, [pc, #52]	; (800e89c <tcp_split_unsent_seg+0x28c>)
 800e866:	4809      	ldr	r0, [pc, #36]	; (800e88c <tcp_split_unsent_seg+0x27c>)
 800e868:	f003 ffd8 	bl	801281c <iprintf>
  if (p != NULL) {
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e872:	6938      	ldr	r0, [r7, #16]
 800e874:	f7fa fde6 	bl	8009444 <pbuf_free>
  }

  return ERR_MEM;
 800e878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3724      	adds	r7, #36	; 0x24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd90      	pop	{r4, r7, pc}
 800e884:	08017440 	.word	0x08017440
 800e888:	080177d4 	.word	0x080177d4
 800e88c:	08017494 	.word	0x08017494
 800e890:	080177f8 	.word	0x080177f8
 800e894:	0801781c 	.word	0x0801781c
 800e898:	0801782c 	.word	0x0801782c
 800e89c:	0801783c 	.word	0x0801783c

0800e8a0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e8a0:	b590      	push	{r4, r7, lr}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d106      	bne.n	800e8bc <tcp_send_fin+0x1c>
 800e8ae:	4b21      	ldr	r3, [pc, #132]	; (800e934 <tcp_send_fin+0x94>)
 800e8b0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e8b4:	4920      	ldr	r1, [pc, #128]	; (800e938 <tcp_send_fin+0x98>)
 800e8b6:	4821      	ldr	r0, [pc, #132]	; (800e93c <tcp_send_fin+0x9c>)
 800e8b8:	f003 ffb0 	bl	801281c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d02e      	beq.n	800e922 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c8:	60fb      	str	r3, [r7, #12]
 800e8ca:	e002      	b.n	800e8d2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1f8      	bne.n	800e8cc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	899b      	ldrh	r3, [r3, #12]
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7f9 fb13 	bl	8007f0e <lwip_htons>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	f003 0307 	and.w	r3, r3, #7
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d116      	bne.n	800e922 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	899b      	ldrh	r3, [r3, #12]
 800e8fa:	b29c      	uxth	r4, r3
 800e8fc:	2001      	movs	r0, #1
 800e8fe:	f7f9 fb06 	bl	8007f0e <lwip_htons>
 800e902:	4603      	mov	r3, r0
 800e904:	461a      	mov	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	4322      	orrs	r2, r4
 800e90c:	b292      	uxth	r2, r2
 800e90e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8b5b      	ldrh	r3, [r3, #26]
 800e914:	f043 0320 	orr.w	r3, r3, #32
 800e918:	b29a      	uxth	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e91e:	2300      	movs	r3, #0
 800e920:	e004      	b.n	800e92c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e922:	2101      	movs	r1, #1
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 f80b 	bl	800e940 <tcp_enqueue_flags>
 800e92a:	4603      	mov	r3, r0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3714      	adds	r7, #20
 800e930:	46bd      	mov	sp, r7
 800e932:	bd90      	pop	{r4, r7, pc}
 800e934:	08017440 	.word	0x08017440
 800e938:	08017848 	.word	0x08017848
 800e93c:	08017494 	.word	0x08017494

0800e940 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b08a      	sub	sp, #40	; 0x28
 800e944:	af02      	add	r7, sp, #8
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e954:	78fb      	ldrb	r3, [r7, #3]
 800e956:	f003 0303 	and.w	r3, r3, #3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d106      	bne.n	800e96c <tcp_enqueue_flags+0x2c>
 800e95e:	4b67      	ldr	r3, [pc, #412]	; (800eafc <tcp_enqueue_flags+0x1bc>)
 800e960:	f240 4212 	movw	r2, #1042	; 0x412
 800e964:	4966      	ldr	r1, [pc, #408]	; (800eb00 <tcp_enqueue_flags+0x1c0>)
 800e966:	4867      	ldr	r0, [pc, #412]	; (800eb04 <tcp_enqueue_flags+0x1c4>)
 800e968:	f003 ff58 	bl	801281c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <tcp_enqueue_flags+0x40>
 800e972:	4b62      	ldr	r3, [pc, #392]	; (800eafc <tcp_enqueue_flags+0x1bc>)
 800e974:	f240 4213 	movw	r2, #1043	; 0x413
 800e978:	4963      	ldr	r1, [pc, #396]	; (800eb08 <tcp_enqueue_flags+0x1c8>)
 800e97a:	4862      	ldr	r0, [pc, #392]	; (800eb04 <tcp_enqueue_flags+0x1c4>)
 800e97c:	f003 ff4e 	bl	801281c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e980:	78fb      	ldrb	r3, [r7, #3]
 800e982:	f003 0302 	and.w	r3, r3, #2
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e98a:	2301      	movs	r3, #1
 800e98c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e98e:	7ffb      	ldrb	r3, [r7, #31]
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	b2db      	uxtb	r3, r3
 800e994:	f003 0304 	and.w	r3, r3, #4
 800e998:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	2036      	movs	r0, #54	; 0x36
 800e9a6:	f7fa fa6d 	bl	8008e84 <pbuf_alloc>
 800e9aa:	6138      	str	r0, [r7, #16]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d109      	bne.n	800e9c6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	8b5b      	ldrh	r3, [r3, #26]
 800e9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c4:	e095      	b.n	800eaf2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	895a      	ldrh	r2, [r3, #10]
 800e9ca:	7dfb      	ldrb	r3, [r7, #23]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d206      	bcs.n	800e9e0 <tcp_enqueue_flags+0xa0>
 800e9d2:	4b4a      	ldr	r3, [pc, #296]	; (800eafc <tcp_enqueue_flags+0x1bc>)
 800e9d4:	f240 423a 	movw	r2, #1082	; 0x43a
 800e9d8:	494c      	ldr	r1, [pc, #304]	; (800eb0c <tcp_enqueue_flags+0x1cc>)
 800e9da:	484a      	ldr	r0, [pc, #296]	; (800eb04 <tcp_enqueue_flags+0x1c4>)
 800e9dc:	f003 ff1e 	bl	801281c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e9e4:	78fa      	ldrb	r2, [r7, #3]
 800e9e6:	7ffb      	ldrb	r3, [r7, #31]
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	6939      	ldr	r1, [r7, #16]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff f916 	bl	800dc20 <tcp_create_segment>
 800e9f4:	60f8      	str	r0, [r7, #12]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d109      	bne.n	800ea10 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	8b5b      	ldrh	r3, [r3, #26]
 800ea00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ea0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea0e:	e070      	b.n	800eaf2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	f003 0303 	and.w	r3, r3, #3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d006      	beq.n	800ea2a <tcp_enqueue_flags+0xea>
 800ea1c:	4b37      	ldr	r3, [pc, #220]	; (800eafc <tcp_enqueue_flags+0x1bc>)
 800ea1e:	f240 4242 	movw	r2, #1090	; 0x442
 800ea22:	493b      	ldr	r1, [pc, #236]	; (800eb10 <tcp_enqueue_flags+0x1d0>)
 800ea24:	4837      	ldr	r0, [pc, #220]	; (800eb04 <tcp_enqueue_flags+0x1c4>)
 800ea26:	f003 fef9 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	891b      	ldrh	r3, [r3, #8]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d006      	beq.n	800ea40 <tcp_enqueue_flags+0x100>
 800ea32:	4b32      	ldr	r3, [pc, #200]	; (800eafc <tcp_enqueue_flags+0x1bc>)
 800ea34:	f240 4243 	movw	r2, #1091	; 0x443
 800ea38:	4936      	ldr	r1, [pc, #216]	; (800eb14 <tcp_enqueue_flags+0x1d4>)
 800ea3a:	4832      	ldr	r0, [pc, #200]	; (800eb04 <tcp_enqueue_flags+0x1c4>)
 800ea3c:	f003 feee 	bl	801281c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d103      	bne.n	800ea50 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ea4e:	e00d      	b.n	800ea6c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea54:	61bb      	str	r3, [r7, #24]
 800ea56:	e002      	b.n	800ea5e <tcp_enqueue_flags+0x11e>
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	61bb      	str	r3, [r7, #24]
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1f8      	bne.n	800ea58 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	f003 0302 	and.w	r3, r3, #2
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d104      	bne.n	800ea88 <tcp_enqueue_flags+0x148>
 800ea7e:	78fb      	ldrb	r3, [r7, #3]
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ea92:	78fb      	ldrb	r3, [r7, #3]
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d006      	beq.n	800eaaa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8b5b      	ldrh	r3, [r3, #26]
 800eaa0:	f043 0320 	orr.w	r3, r3, #32
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fa fd50 	bl	8009554 <pbuf_clen>
 800eab4:	4603      	mov	r3, r0
 800eab6:	461a      	mov	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eabe:	4413      	add	r3, r2
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00e      	beq.n	800eaf0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10a      	bne.n	800eaf0 <tcp_enqueue_flags+0x1b0>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <tcp_enqueue_flags+0x1b0>
 800eae2:	4b06      	ldr	r3, [pc, #24]	; (800eafc <tcp_enqueue_flags+0x1bc>)
 800eae4:	f240 4266 	movw	r2, #1126	; 0x466
 800eae8:	490b      	ldr	r1, [pc, #44]	; (800eb18 <tcp_enqueue_flags+0x1d8>)
 800eaea:	4806      	ldr	r0, [pc, #24]	; (800eb04 <tcp_enqueue_flags+0x1c4>)
 800eaec:	f003 fe96 	bl	801281c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3720      	adds	r7, #32
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	08017440 	.word	0x08017440
 800eb00:	08017864 	.word	0x08017864
 800eb04:	08017494 	.word	0x08017494
 800eb08:	080178bc 	.word	0x080178bc
 800eb0c:	080178dc 	.word	0x080178dc
 800eb10:	08017918 	.word	0x08017918
 800eb14:	08017930 	.word	0x08017930
 800eb18:	0801795c 	.word	0x0801795c

0800eb1c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800eb1c:	b5b0      	push	{r4, r5, r7, lr}
 800eb1e:	b08a      	sub	sp, #40	; 0x28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <tcp_output+0x1c>
 800eb2a:	4ba0      	ldr	r3, [pc, #640]	; (800edac <tcp_output+0x290>)
 800eb2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800eb30:	499f      	ldr	r1, [pc, #636]	; (800edb0 <tcp_output+0x294>)
 800eb32:	48a0      	ldr	r0, [pc, #640]	; (800edb4 <tcp_output+0x298>)
 800eb34:	f003 fe72 	bl	801281c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	7d1b      	ldrb	r3, [r3, #20]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d106      	bne.n	800eb4e <tcp_output+0x32>
 800eb40:	4b9a      	ldr	r3, [pc, #616]	; (800edac <tcp_output+0x290>)
 800eb42:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800eb46:	499c      	ldr	r1, [pc, #624]	; (800edb8 <tcp_output+0x29c>)
 800eb48:	489a      	ldr	r0, [pc, #616]	; (800edb4 <tcp_output+0x298>)
 800eb4a:	f003 fe67 	bl	801281c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eb4e:	4b9b      	ldr	r3, [pc, #620]	; (800edbc <tcp_output+0x2a0>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d101      	bne.n	800eb5c <tcp_output+0x40>
    return ERR_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e1d2      	b.n	800ef02 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d203      	bcs.n	800eb74 <tcp_output+0x58>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb72:	e002      	b.n	800eb7a <tcp_output+0x5e>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb7a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb80:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10b      	bne.n	800eba0 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	8b5b      	ldrh	r3, [r3, #26]
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 81a9 	beq.w	800eee8 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 fdd8 	bl	800f74c <tcp_send_empty_ack>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	e1b0      	b.n	800ef02 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800eba0:	6879      	ldr	r1, [r7, #4]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	3304      	adds	r3, #4
 800eba6:	461a      	mov	r2, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff f81d 	bl	800dbe8 <tcp_route>
 800ebae:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d102      	bne.n	800ebbc <tcp_output+0xa0>
    return ERR_RTE;
 800ebb6:	f06f 0303 	mvn.w	r3, #3
 800ebba:	e1a2      	b.n	800ef02 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d003      	beq.n	800ebca <tcp_output+0xae>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d111      	bne.n	800ebee <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d002      	beq.n	800ebd6 <tcp_output+0xba>
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	e000      	b.n	800ebd8 <tcp_output+0xbc>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d102      	bne.n	800ebe6 <tcp_output+0xca>
      return ERR_RTE;
 800ebe0:	f06f 0303 	mvn.w	r3, #3
 800ebe4:	e18d      	b.n	800ef02 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f9 f99f 	bl	8007f38 <lwip_htonl>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec04:	8912      	ldrh	r2, [r2, #8]
 800ec06:	4413      	add	r3, r2
 800ec08:	69ba      	ldr	r2, [r7, #24]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d227      	bcs.n	800ec5e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec14:	461a      	mov	r2, r3
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d114      	bne.n	800ec46 <tcp_output+0x12a>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d110      	bne.n	800ec46 <tcp_output+0x12a>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10b      	bne.n	800ec46 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	8b5b      	ldrh	r3, [r3, #26]
 800ec4a:	f003 0302 	and.w	r3, r3, #2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f000 814c 	beq.w	800eeec <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 fd79 	bl	800f74c <tcp_send_empty_ack>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	e151      	b.n	800ef02 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec6a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f000 811b 	beq.w	800eeaa <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800ec74:	e002      	b.n	800ec7c <tcp_output+0x160>
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	623b      	str	r3, [r7, #32]
 800ec7c:	6a3b      	ldr	r3, [r7, #32]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d1f8      	bne.n	800ec76 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ec84:	e111      	b.n	800eeaa <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	899b      	ldrh	r3, [r3, #12]
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7f9 f93d 	bl	8007f0e <lwip_htons>
 800ec94:	4603      	mov	r3, r0
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	f003 0304 	and.w	r3, r3, #4
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <tcp_output+0x192>
 800eca0:	4b42      	ldr	r3, [pc, #264]	; (800edac <tcp_output+0x290>)
 800eca2:	f240 5237 	movw	r2, #1335	; 0x537
 800eca6:	4946      	ldr	r1, [pc, #280]	; (800edc0 <tcp_output+0x2a4>)
 800eca8:	4842      	ldr	r0, [pc, #264]	; (800edb4 <tcp_output+0x298>)
 800ecaa:	f003 fdb7 	bl	801281c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d01f      	beq.n	800ecf6 <tcp_output+0x1da>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	8b5b      	ldrh	r3, [r3, #26]
 800ecba:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d119      	bne.n	800ecf6 <tcp_output+0x1da>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00b      	beq.n	800ece2 <tcp_output+0x1c6>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d110      	bne.n	800ecf6 <tcp_output+0x1da>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecd8:	891a      	ldrh	r2, [r3, #8]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d209      	bcs.n	800ecf6 <tcp_output+0x1da>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <tcp_output+0x1da>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ecf2:	2b08      	cmp	r3, #8
 800ecf4:	d901      	bls.n	800ecfa <tcp_output+0x1de>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e000      	b.n	800ecfc <tcp_output+0x1e0>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d106      	bne.n	800ed0e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	8b5b      	ldrh	r3, [r3, #26]
 800ed04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 80e3 	beq.w	800eed4 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7d1b      	ldrb	r3, [r3, #20]
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d00d      	beq.n	800ed32 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ed16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	899b      	ldrh	r3, [r3, #12]
 800ed1c:	b29c      	uxth	r4, r3
 800ed1e:	2010      	movs	r0, #16
 800ed20:	f7f9 f8f5 	bl	8007f0e <lwip_htons>
 800ed24:	4603      	mov	r3, r0
 800ed26:	461a      	mov	r2, r3
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	4322      	orrs	r2, r4
 800ed2e:	b292      	uxth	r2, r2
 800ed30:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ed32:	697a      	ldr	r2, [r7, #20]
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed38:	f000 f908 	bl	800ef4c <tcp_output_segment>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ed40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d009      	beq.n	800ed5c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	8b5b      	ldrh	r3, [r3, #26]
 800ed4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	835a      	strh	r2, [r3, #26]
      return err;
 800ed56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed5a:	e0d2      	b.n	800ef02 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d006      	beq.n	800ed7a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	8b5b      	ldrh	r3, [r3, #26]
 800ed70:	f023 0303 	bic.w	r3, r3, #3
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7f9 f8d9 	bl	8007f38 <lwip_htonl>
 800ed86:	4604      	mov	r4, r0
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	891b      	ldrh	r3, [r3, #8]
 800ed8c:	461d      	mov	r5, r3
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	899b      	ldrh	r3, [r3, #12]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7f9 f8b9 	bl	8007f0e <lwip_htons>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	f003 0303 	and.w	r3, r3, #3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00d      	beq.n	800edc4 <tcp_output+0x2a8>
 800eda8:	2301      	movs	r3, #1
 800edaa:	e00c      	b.n	800edc6 <tcp_output+0x2aa>
 800edac:	08017440 	.word	0x08017440
 800edb0:	08017984 	.word	0x08017984
 800edb4:	08017494 	.word	0x08017494
 800edb8:	0801799c 	.word	0x0801799c
 800edbc:	2000708c 	.word	0x2000708c
 800edc0:	080179c4 	.word	0x080179c4
 800edc4:	2300      	movs	r3, #0
 800edc6:	442b      	add	r3, r5
 800edc8:	4423      	add	r3, r4
 800edca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	da02      	bge.n	800edde <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800edde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede0:	891b      	ldrh	r3, [r3, #8]
 800ede2:	461c      	mov	r4, r3
 800ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	899b      	ldrh	r3, [r3, #12]
 800edea:	b29b      	uxth	r3, r3
 800edec:	4618      	mov	r0, r3
 800edee:	f7f9 f88e 	bl	8007f0e <lwip_htons>
 800edf2:	4603      	mov	r3, r0
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	f003 0303 	and.w	r3, r3, #3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <tcp_output+0x2e6>
 800edfe:	2301      	movs	r3, #1
 800ee00:	e000      	b.n	800ee04 <tcp_output+0x2e8>
 800ee02:	2300      	movs	r3, #0
 800ee04:	4423      	add	r3, r4
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d049      	beq.n	800ee9e <tcp_output+0x382>
      seg->next = NULL;
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d105      	bne.n	800ee24 <tcp_output+0x308>
        pcb->unacked = seg;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee1c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee20:	623b      	str	r3, [r7, #32]
 800ee22:	e03f      	b.n	800eea4 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7f9 f884 	bl	8007f38 <lwip_htonl>
 800ee30:	4604      	mov	r4, r0
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7f9 f87d 	bl	8007f38 <lwip_htonl>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	1ae3      	subs	r3, r4, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	da24      	bge.n	800ee90 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	3370      	adds	r3, #112	; 0x70
 800ee4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ee4c:	e002      	b.n	800ee54 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d011      	beq.n	800ee80 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7f9 f867 	bl	8007f38 <lwip_htonl>
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f9 f860 	bl	8007f38 <lwip_htonl>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dbe6      	blt.n	800ee4e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	e009      	b.n	800eea4 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	623b      	str	r3, [r7, #32]
 800ee9c:	e002      	b.n	800eea4 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ee9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea0:	f7fb ff02 	bl	800aca8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d012      	beq.n	800eed6 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7f9 f83e 	bl	8007f38 <lwip_htonl>
 800eebc:	4602      	mov	r2, r0
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eec2:	1ad3      	subs	r3, r2, r3
 800eec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec6:	8912      	ldrh	r2, [r2, #8]
 800eec8:	4413      	add	r3, r2
  while (seg != NULL &&
 800eeca:	69ba      	ldr	r2, [r7, #24]
 800eecc:	429a      	cmp	r2, r3
 800eece:	f4bf aeda 	bcs.w	800ec86 <tcp_output+0x16a>
 800eed2:	e000      	b.n	800eed6 <tcp_output+0x3ba>
      break;
 800eed4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d108      	bne.n	800eef0 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800eee6:	e004      	b.n	800eef2 <tcp_output+0x3d6>
    goto output_done;
 800eee8:	bf00      	nop
 800eeea:	e002      	b.n	800eef2 <tcp_output+0x3d6>
    goto output_done;
 800eeec:	bf00      	nop
 800eeee:	e000      	b.n	800eef2 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800eef0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	8b5b      	ldrh	r3, [r3, #26]
 800eef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3728      	adds	r7, #40	; 0x28
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bdb0      	pop	{r4, r5, r7, pc}
 800ef0a:	bf00      	nop

0800ef0c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d106      	bne.n	800ef28 <tcp_output_segment_busy+0x1c>
 800ef1a:	4b09      	ldr	r3, [pc, #36]	; (800ef40 <tcp_output_segment_busy+0x34>)
 800ef1c:	f240 529a 	movw	r2, #1434	; 0x59a
 800ef20:	4908      	ldr	r1, [pc, #32]	; (800ef44 <tcp_output_segment_busy+0x38>)
 800ef22:	4809      	ldr	r0, [pc, #36]	; (800ef48 <tcp_output_segment_busy+0x3c>)
 800ef24:	f003 fc7a 	bl	801281c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	7b9b      	ldrb	r3, [r3, #14]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d001      	beq.n	800ef36 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e000      	b.n	800ef38 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	08017440 	.word	0x08017440
 800ef44:	080179dc 	.word	0x080179dc
 800ef48:	08017494 	.word	0x08017494

0800ef4c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ef4c:	b5b0      	push	{r4, r5, r7, lr}
 800ef4e:	b08c      	sub	sp, #48	; 0x30
 800ef50:	af04      	add	r7, sp, #16
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <tcp_output_segment+0x20>
 800ef5e:	4b64      	ldr	r3, [pc, #400]	; (800f0f0 <tcp_output_segment+0x1a4>)
 800ef60:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ef64:	4963      	ldr	r1, [pc, #396]	; (800f0f4 <tcp_output_segment+0x1a8>)
 800ef66:	4864      	ldr	r0, [pc, #400]	; (800f0f8 <tcp_output_segment+0x1ac>)
 800ef68:	f003 fc58 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d106      	bne.n	800ef80 <tcp_output_segment+0x34>
 800ef72:	4b5f      	ldr	r3, [pc, #380]	; (800f0f0 <tcp_output_segment+0x1a4>)
 800ef74:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ef78:	4960      	ldr	r1, [pc, #384]	; (800f0fc <tcp_output_segment+0x1b0>)
 800ef7a:	485f      	ldr	r0, [pc, #380]	; (800f0f8 <tcp_output_segment+0x1ac>)
 800ef7c:	f003 fc4e 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d106      	bne.n	800ef94 <tcp_output_segment+0x48>
 800ef86:	4b5a      	ldr	r3, [pc, #360]	; (800f0f0 <tcp_output_segment+0x1a4>)
 800ef88:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ef8c:	495c      	ldr	r1, [pc, #368]	; (800f100 <tcp_output_segment+0x1b4>)
 800ef8e:	485a      	ldr	r0, [pc, #360]	; (800f0f8 <tcp_output_segment+0x1ac>)
 800ef90:	f003 fc44 	bl	801281c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f7ff ffb9 	bl	800ef0c <tcp_output_segment_busy>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800efa0:	2300      	movs	r3, #0
 800efa2:	e0a0      	b.n	800f0e6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	68dc      	ldr	r4, [r3, #12]
 800efac:	4610      	mov	r0, r2
 800efae:	f7f8 ffc3 	bl	8007f38 <lwip_htonl>
 800efb2:	4603      	mov	r3, r0
 800efb4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	68dc      	ldr	r4, [r3, #12]
 800efbe:	4610      	mov	r0, r2
 800efc0:	f7f8 ffa5 	bl	8007f0e <lwip_htons>
 800efc4:	4603      	mov	r3, r0
 800efc6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800efd0:	441a      	add	r2, r3
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	3314      	adds	r3, #20
 800efdc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	7a9b      	ldrb	r3, [r3, #10]
 800efe2:	f003 0301 	and.w	r3, r3, #1
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d015      	beq.n	800f016 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	3304      	adds	r3, #4
 800efee:	461a      	mov	r2, r3
 800eff0:	6879      	ldr	r1, [r7, #4]
 800eff2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800eff6:	f7fc fa33 	bl	800b460 <tcp_eff_send_mss_netif>
 800effa:	4603      	mov	r3, r0
 800effc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800effe:	8b7b      	ldrh	r3, [r7, #26]
 800f000:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f004:	4618      	mov	r0, r3
 800f006:	f7f8 ff97 	bl	8007f38 <lwip_htonl>
 800f00a:	4602      	mov	r2, r0
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	3304      	adds	r3, #4
 800f014:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	da02      	bge.n	800f026 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2200      	movs	r2, #0
 800f024:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10c      	bne.n	800f048 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f02e:	4b35      	ldr	r3, [pc, #212]	; (800f104 <tcp_output_segment+0x1b8>)
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	68db      	ldr	r3, [r3, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f8 ff7b 	bl	8007f38 <lwip_htonl>
 800f042:	4602      	mov	r2, r0
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	461a      	mov	r2, r3
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	8959      	ldrh	r1, [r3, #10]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	8b3a      	ldrh	r2, [r7, #24]
 800f064:	1a8a      	subs	r2, r1, r2
 800f066:	b292      	uxth	r2, r2
 800f068:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	8919      	ldrh	r1, [r3, #8]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	8b3a      	ldrh	r2, [r7, #24]
 800f076:	1a8a      	subs	r2, r1, r2
 800f078:	b292      	uxth	r2, r2
 800f07a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	68d2      	ldr	r2, [r2, #12]
 800f084:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	741a      	strb	r2, [r3, #16]
 800f08e:	2200      	movs	r2, #0
 800f090:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	f103 0214 	add.w	r2, r3, #20
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	7a9b      	ldrb	r3, [r3, #10]
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	f003 0304 	and.w	r3, r3, #4
 800f0a4:	4413      	add	r3, r2
 800f0a6:	69fa      	ldr	r2, [r7, #28]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d006      	beq.n	800f0ba <tcp_output_segment+0x16e>
 800f0ac:	4b10      	ldr	r3, [pc, #64]	; (800f0f0 <tcp_output_segment+0x1a4>)
 800f0ae:	f240 621c 	movw	r2, #1564	; 0x61c
 800f0b2:	4915      	ldr	r1, [pc, #84]	; (800f108 <tcp_output_segment+0x1bc>)
 800f0b4:	4810      	ldr	r0, [pc, #64]	; (800f0f8 <tcp_output_segment+0x1ac>)
 800f0b6:	f003 fbb1 	bl	801281c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6858      	ldr	r0, [r3, #4]
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	1d1c      	adds	r4, r3, #4
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	7add      	ldrb	r5, [r3, #11]
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	7a9b      	ldrb	r3, [r3, #10]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	9202      	str	r2, [sp, #8]
 800f0d0:	2206      	movs	r2, #6
 800f0d2:	9201      	str	r2, [sp, #4]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	462b      	mov	r3, r5
 800f0d8:	4622      	mov	r2, r4
 800f0da:	f002 fa3f 	bl	801155c <ip4_output_if>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3720      	adds	r7, #32
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	08017440 	.word	0x08017440
 800f0f4:	08017a04 	.word	0x08017a04
 800f0f8:	08017494 	.word	0x08017494
 800f0fc:	08017a24 	.word	0x08017a24
 800f100:	08017a44 	.word	0x08017a44
 800f104:	2000707c 	.word	0x2000707c
 800f108:	08017a68 	.word	0x08017a68

0800f10c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f10c:	b5b0      	push	{r4, r5, r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <tcp_rexmit_rto_prepare+0x1c>
 800f11a:	4b31      	ldr	r3, [pc, #196]	; (800f1e0 <tcp_rexmit_rto_prepare+0xd4>)
 800f11c:	f240 6263 	movw	r2, #1635	; 0x663
 800f120:	4930      	ldr	r1, [pc, #192]	; (800f1e4 <tcp_rexmit_rto_prepare+0xd8>)
 800f122:	4831      	ldr	r0, [pc, #196]	; (800f1e8 <tcp_rexmit_rto_prepare+0xdc>)
 800f124:	f003 fb7a 	bl	801281c <iprintf>

  if (pcb->unacked == NULL) {
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d102      	bne.n	800f136 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f130:	f06f 0305 	mvn.w	r3, #5
 800f134:	e050      	b.n	800f1d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	e00b      	b.n	800f156 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f7ff fee4 	bl	800ef0c <tcp_output_segment_busy>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f14a:	f06f 0305 	mvn.w	r3, #5
 800f14e:	e043      	b.n	800f1d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	60fb      	str	r3, [r7, #12]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1ef      	bne.n	800f13e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7ff fed4 	bl	800ef0c <tcp_output_segment_busy>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d002      	beq.n	800f170 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f16a:	f06f 0305 	mvn.w	r3, #5
 800f16e:	e033      	b.n	800f1d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2200      	movs	r2, #0
 800f184:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8b5b      	ldrh	r3, [r3, #26]
 800f18a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f18e:	b29a      	uxth	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f8 fecc 	bl	8007f38 <lwip_htonl>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	891b      	ldrh	r3, [r3, #8]
 800f1a6:	461d      	mov	r5, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	899b      	ldrh	r3, [r3, #12]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7f8 feac 	bl	8007f0e <lwip_htons>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	f003 0303 	and.w	r3, r3, #3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <tcp_rexmit_rto_prepare+0xba>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <tcp_rexmit_rto_prepare+0xbc>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	442b      	add	r3, r5
 800f1ca:	18e2      	adds	r2, r4, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bdb0      	pop	{r4, r5, r7, pc}
 800f1e0:	08017440 	.word	0x08017440
 800f1e4:	08017a7c 	.word	0x08017a7c
 800f1e8:	08017494 	.word	0x08017494

0800f1ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d106      	bne.n	800f208 <tcp_rexmit_rto_commit+0x1c>
 800f1fa:	4b0d      	ldr	r3, [pc, #52]	; (800f230 <tcp_rexmit_rto_commit+0x44>)
 800f1fc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f200:	490c      	ldr	r1, [pc, #48]	; (800f234 <tcp_rexmit_rto_commit+0x48>)
 800f202:	480d      	ldr	r0, [pc, #52]	; (800f238 <tcp_rexmit_rto_commit+0x4c>)
 800f204:	f003 fb0a 	bl	801281c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f20e:	2bff      	cmp	r3, #255	; 0xff
 800f210:	d007      	beq.n	800f222 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f218:	3301      	adds	r3, #1
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff fc7a 	bl	800eb1c <tcp_output>
}
 800f228:	bf00      	nop
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	08017440 	.word	0x08017440
 800f234:	08017aa0 	.word	0x08017aa0
 800f238:	08017494 	.word	0x08017494

0800f23c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d106      	bne.n	800f258 <tcp_rexmit_rto+0x1c>
 800f24a:	4b0a      	ldr	r3, [pc, #40]	; (800f274 <tcp_rexmit_rto+0x38>)
 800f24c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f250:	4909      	ldr	r1, [pc, #36]	; (800f278 <tcp_rexmit_rto+0x3c>)
 800f252:	480a      	ldr	r0, [pc, #40]	; (800f27c <tcp_rexmit_rto+0x40>)
 800f254:	f003 fae2 	bl	801281c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff ff57 	bl	800f10c <tcp_rexmit_rto_prepare>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff ffc1 	bl	800f1ec <tcp_rexmit_rto_commit>
  }
}
 800f26a:	bf00      	nop
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
 800f272:	bf00      	nop
 800f274:	08017440 	.word	0x08017440
 800f278:	08017ac4 	.word	0x08017ac4
 800f27c:	08017494 	.word	0x08017494

0800f280 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f280:	b590      	push	{r4, r7, lr}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <tcp_rexmit+0x1c>
 800f28e:	4b2f      	ldr	r3, [pc, #188]	; (800f34c <tcp_rexmit+0xcc>)
 800f290:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f294:	492e      	ldr	r1, [pc, #184]	; (800f350 <tcp_rexmit+0xd0>)
 800f296:	482f      	ldr	r0, [pc, #188]	; (800f354 <tcp_rexmit+0xd4>)
 800f298:	f003 fac0 	bl	801281c <iprintf>

  if (pcb->unacked == NULL) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f2a4:	f06f 0305 	mvn.w	r3, #5
 800f2a8:	e04c      	b.n	800f344 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f2b0:	68b8      	ldr	r0, [r7, #8]
 800f2b2:	f7ff fe2b 	bl	800ef0c <tcp_output_segment_busy>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f2bc:	f06f 0305 	mvn.w	r3, #5
 800f2c0:	e040      	b.n	800f344 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	336c      	adds	r3, #108	; 0x6c
 800f2ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f2d0:	e002      	b.n	800f2d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d011      	beq.n	800f304 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7f8 fe25 	bl	8007f38 <lwip_htonl>
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7f8 fe1e 	bl	8007f38 <lwip_htonl>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f300:	2b00      	cmp	r3, #0
 800f302:	dbe6      	blt.n	800f2d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	68ba      	ldr	r2, [r7, #8]
 800f310:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d103      	bne.n	800f322 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f328:	2bff      	cmp	r3, #255	; 0xff
 800f32a:	d007      	beq.n	800f33c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f332:	3301      	adds	r3, #1
 800f334:	b2da      	uxtb	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f342:	2300      	movs	r3, #0
}
 800f344:	4618      	mov	r0, r3
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd90      	pop	{r4, r7, pc}
 800f34c:	08017440 	.word	0x08017440
 800f350:	08017ae0 	.word	0x08017ae0
 800f354:	08017494 	.word	0x08017494

0800f358 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <tcp_rexmit_fast+0x1c>
 800f366:	4b2f      	ldr	r3, [pc, #188]	; (800f424 <tcp_rexmit_fast+0xcc>)
 800f368:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f36c:	492e      	ldr	r1, [pc, #184]	; (800f428 <tcp_rexmit_fast+0xd0>)
 800f36e:	482f      	ldr	r0, [pc, #188]	; (800f42c <tcp_rexmit_fast+0xd4>)
 800f370:	f003 fa54 	bl	801281c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d04f      	beq.n	800f41c <tcp_rexmit_fast+0xc4>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8b5b      	ldrh	r3, [r3, #26]
 800f380:	f003 0304 	and.w	r3, r3, #4
 800f384:	2b00      	cmp	r3, #0
 800f386:	d149      	bne.n	800f41c <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff ff79 	bl	800f280 <tcp_rexmit>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d143      	bne.n	800f41c <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d208      	bcs.n	800f3b6 <tcp_rexmit_fast+0x5e>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	da00      	bge.n	800f3b0 <tcp_rexmit_fast+0x58>
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	105b      	asrs	r3, r3, #1
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	e007      	b.n	800f3c6 <tcp_rexmit_fast+0x6e>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da00      	bge.n	800f3c2 <tcp_rexmit_fast+0x6a>
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	105b      	asrs	r3, r3, #1
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d206      	bcs.n	800f3ec <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	0049      	lsls	r1, r1, #1
 800f3fa:	440b      	add	r3, r1
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	4413      	add	r3, r2
 800f400:	b29a      	uxth	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	8b5b      	ldrh	r3, [r3, #26]
 800f40c:	f043 0304 	orr.w	r3, r3, #4
 800f410:	b29a      	uxth	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f41c:	bf00      	nop
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	08017440 	.word	0x08017440
 800f428:	08017af8 	.word	0x08017af8
 800f42c:	08017494 	.word	0x08017494

0800f430 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b086      	sub	sp, #24
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	607b      	str	r3, [r7, #4]
 800f43a:	460b      	mov	r3, r1
 800f43c:	817b      	strh	r3, [r7, #10]
 800f43e:	4613      	mov	r3, r2
 800f440:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f442:	897a      	ldrh	r2, [r7, #10]
 800f444:	893b      	ldrh	r3, [r7, #8]
 800f446:	4413      	add	r3, r2
 800f448:	b29b      	uxth	r3, r3
 800f44a:	3314      	adds	r3, #20
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f452:	4619      	mov	r1, r3
 800f454:	2022      	movs	r0, #34	; 0x22
 800f456:	f7f9 fd15 	bl	8008e84 <pbuf_alloc>
 800f45a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d04e      	beq.n	800f500 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	895b      	ldrh	r3, [r3, #10]
 800f466:	461a      	mov	r2, r3
 800f468:	897b      	ldrh	r3, [r7, #10]
 800f46a:	3314      	adds	r3, #20
 800f46c:	429a      	cmp	r2, r3
 800f46e:	da06      	bge.n	800f47e <tcp_output_alloc_header_common+0x4e>
 800f470:	4b26      	ldr	r3, [pc, #152]	; (800f50c <tcp_output_alloc_header_common+0xdc>)
 800f472:	f240 7224 	movw	r2, #1828	; 0x724
 800f476:	4926      	ldr	r1, [pc, #152]	; (800f510 <tcp_output_alloc_header_common+0xe0>)
 800f478:	4826      	ldr	r0, [pc, #152]	; (800f514 <tcp_output_alloc_header_common+0xe4>)
 800f47a:	f003 f9cf 	bl	801281c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f484:	8c3b      	ldrh	r3, [r7, #32]
 800f486:	4618      	mov	r0, r3
 800f488:	f7f8 fd41 	bl	8007f0e <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	461a      	mov	r2, r3
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f496:	4618      	mov	r0, r3
 800f498:	f7f8 fd39 	bl	8007f0e <lwip_htons>
 800f49c:	4603      	mov	r3, r0
 800f49e:	461a      	mov	r2, r3
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f7f8 fd44 	bl	8007f38 <lwip_htonl>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f4b6:	897b      	ldrh	r3, [r7, #10]
 800f4b8:	089b      	lsrs	r3, r3, #2
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	3305      	adds	r3, #5
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	031b      	lsls	r3, r3, #12
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7f8 fd1d 	bl	8007f0e <lwip_htons>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f4dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7f8 fd15 	bl	8007f0e <lwip_htons>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	741a      	strb	r2, [r3, #16]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	749a      	strb	r2, [r3, #18]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f500:	697b      	ldr	r3, [r7, #20]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3718      	adds	r7, #24
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	08017440 	.word	0x08017440
 800f510:	08017b18 	.word	0x08017b18
 800f514:	08017494 	.word	0x08017494

0800f518 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f518:	b5b0      	push	{r4, r5, r7, lr}
 800f51a:	b08a      	sub	sp, #40	; 0x28
 800f51c:	af04      	add	r7, sp, #16
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	607b      	str	r3, [r7, #4]
 800f522:	460b      	mov	r3, r1
 800f524:	817b      	strh	r3, [r7, #10]
 800f526:	4613      	mov	r3, r2
 800f528:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d106      	bne.n	800f53e <tcp_output_alloc_header+0x26>
 800f530:	4b15      	ldr	r3, [pc, #84]	; (800f588 <tcp_output_alloc_header+0x70>)
 800f532:	f240 7242 	movw	r2, #1858	; 0x742
 800f536:	4915      	ldr	r1, [pc, #84]	; (800f58c <tcp_output_alloc_header+0x74>)
 800f538:	4815      	ldr	r0, [pc, #84]	; (800f590 <tcp_output_alloc_header+0x78>)
 800f53a:	f003 f96f 	bl	801281c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	8adb      	ldrh	r3, [r3, #22]
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	8b12      	ldrh	r2, [r2, #24]
 800f54a:	68f9      	ldr	r1, [r7, #12]
 800f54c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f54e:	893d      	ldrh	r5, [r7, #8]
 800f550:	897c      	ldrh	r4, [r7, #10]
 800f552:	9103      	str	r1, [sp, #12]
 800f554:	2110      	movs	r1, #16
 800f556:	9102      	str	r1, [sp, #8]
 800f558:	9201      	str	r2, [sp, #4]
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	462a      	mov	r2, r5
 800f560:	4621      	mov	r1, r4
 800f562:	f7ff ff65 	bl	800f430 <tcp_output_alloc_header_common>
 800f566:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d006      	beq.n	800f57c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f576:	441a      	add	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f57c:	697b      	ldr	r3, [r7, #20]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bdb0      	pop	{r4, r5, r7, pc}
 800f586:	bf00      	nop
 800f588:	08017440 	.word	0x08017440
 800f58c:	08017b48 	.word	0x08017b48
 800f590:	08017494 	.word	0x08017494

0800f594 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60f8      	str	r0, [r7, #12]
 800f59c:	60b9      	str	r1, [r7, #8]
 800f59e:	4611      	mov	r1, r2
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	460b      	mov	r3, r1
 800f5a4:	71fb      	strb	r3, [r7, #7]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d106      	bne.n	800f5c2 <tcp_output_fill_options+0x2e>
 800f5b4:	4b13      	ldr	r3, [pc, #76]	; (800f604 <tcp_output_fill_options+0x70>)
 800f5b6:	f240 7256 	movw	r2, #1878	; 0x756
 800f5ba:	4913      	ldr	r1, [pc, #76]	; (800f608 <tcp_output_fill_options+0x74>)
 800f5bc:	4813      	ldr	r0, [pc, #76]	; (800f60c <tcp_output_fill_options+0x78>)
 800f5be:	f003 f92d 	bl	801281c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	3314      	adds	r3, #20
 800f5cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	f103 0214 	add.w	r2, r3, #20
 800f5d4:	8bfb      	ldrh	r3, [r7, #30]
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4619      	mov	r1, r3
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	f003 0304 	and.w	r3, r3, #4
 800f5e2:	440b      	add	r3, r1
 800f5e4:	4413      	add	r3, r2
 800f5e6:	697a      	ldr	r2, [r7, #20]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d006      	beq.n	800f5fa <tcp_output_fill_options+0x66>
 800f5ec:	4b05      	ldr	r3, [pc, #20]	; (800f604 <tcp_output_fill_options+0x70>)
 800f5ee:	f240 7275 	movw	r2, #1909	; 0x775
 800f5f2:	4907      	ldr	r1, [pc, #28]	; (800f610 <tcp_output_fill_options+0x7c>)
 800f5f4:	4805      	ldr	r0, [pc, #20]	; (800f60c <tcp_output_fill_options+0x78>)
 800f5f6:	f003 f911 	bl	801281c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f5fa:	bf00      	nop
 800f5fc:	3720      	adds	r7, #32
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	08017440 	.word	0x08017440
 800f608:	08017b70 	.word	0x08017b70
 800f60c:	08017494 	.word	0x08017494
 800f610:	08017a68 	.word	0x08017a68

0800f614 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b08a      	sub	sp, #40	; 0x28
 800f618:	af04      	add	r7, sp, #16
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d106      	bne.n	800f636 <tcp_output_control_segment+0x22>
 800f628:	4b1c      	ldr	r3, [pc, #112]	; (800f69c <tcp_output_control_segment+0x88>)
 800f62a:	f240 7287 	movw	r2, #1927	; 0x787
 800f62e:	491c      	ldr	r1, [pc, #112]	; (800f6a0 <tcp_output_control_segment+0x8c>)
 800f630:	481c      	ldr	r0, [pc, #112]	; (800f6a4 <tcp_output_control_segment+0x90>)
 800f632:	f003 f8f3 	bl	801281c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f636:	683a      	ldr	r2, [r7, #0]
 800f638:	6879      	ldr	r1, [r7, #4]
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f7fe fad4 	bl	800dbe8 <tcp_route>
 800f640:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d102      	bne.n	800f64e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f648:	23fc      	movs	r3, #252	; 0xfc
 800f64a:	75fb      	strb	r3, [r7, #23]
 800f64c:	e01c      	b.n	800f688 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d006      	beq.n	800f662 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	7adb      	ldrb	r3, [r3, #11]
 800f658:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	7a9b      	ldrb	r3, [r3, #10]
 800f65e:	757b      	strb	r3, [r7, #21]
 800f660:	e003      	b.n	800f66a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f662:	23ff      	movs	r3, #255	; 0xff
 800f664:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f666:	2300      	movs	r3, #0
 800f668:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f66a:	7dba      	ldrb	r2, [r7, #22]
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	9302      	str	r3, [sp, #8]
 800f670:	2306      	movs	r3, #6
 800f672:	9301      	str	r3, [sp, #4]
 800f674:	7d7b      	ldrb	r3, [r7, #21]
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	4613      	mov	r3, r2
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	68b8      	ldr	r0, [r7, #8]
 800f680:	f001 ff6c 	bl	801155c <ip4_output_if>
 800f684:	4603      	mov	r3, r0
 800f686:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f688:	68b8      	ldr	r0, [r7, #8]
 800f68a:	f7f9 fedb 	bl	8009444 <pbuf_free>
  return err;
 800f68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3718      	adds	r7, #24
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	08017440 	.word	0x08017440
 800f6a0:	08017b98 	.word	0x08017b98
 800f6a4:	08017494 	.word	0x08017494

0800f6a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f6a8:	b590      	push	{r4, r7, lr}
 800f6aa:	b08b      	sub	sp, #44	; 0x2c
 800f6ac:	af04      	add	r7, sp, #16
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
 800f6b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d106      	bne.n	800f6ca <tcp_rst+0x22>
 800f6bc:	4b1f      	ldr	r3, [pc, #124]	; (800f73c <tcp_rst+0x94>)
 800f6be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f6c2:	491f      	ldr	r1, [pc, #124]	; (800f740 <tcp_rst+0x98>)
 800f6c4:	481f      	ldr	r0, [pc, #124]	; (800f744 <tcp_rst+0x9c>)
 800f6c6:	f003 f8a9 	bl	801281c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d106      	bne.n	800f6de <tcp_rst+0x36>
 800f6d0:	4b1a      	ldr	r3, [pc, #104]	; (800f73c <tcp_rst+0x94>)
 800f6d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f6d6:	491c      	ldr	r1, [pc, #112]	; (800f748 <tcp_rst+0xa0>)
 800f6d8:	481a      	ldr	r0, [pc, #104]	; (800f744 <tcp_rst+0x9c>)
 800f6da:	f003 f89f 	bl	801281c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f6de:	2300      	movs	r3, #0
 800f6e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f6e2:	f246 0308 	movw	r3, #24584	; 0x6008
 800f6e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f6e8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ea:	b29c      	uxth	r4, r3
 800f6ec:	68b8      	ldr	r0, [r7, #8]
 800f6ee:	f7f8 fc23 	bl	8007f38 <lwip_htonl>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	8abb      	ldrh	r3, [r7, #20]
 800f6f6:	9303      	str	r3, [sp, #12]
 800f6f8:	2314      	movs	r3, #20
 800f6fa:	9302      	str	r3, [sp, #8]
 800f6fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f6fe:	9301      	str	r3, [sp, #4]
 800f700:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f702:	9300      	str	r3, [sp, #0]
 800f704:	4613      	mov	r3, r2
 800f706:	2200      	movs	r2, #0
 800f708:	4621      	mov	r1, r4
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f7ff fe90 	bl	800f430 <tcp_output_alloc_header_common>
 800f710:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00c      	beq.n	800f732 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f718:	7dfb      	ldrb	r3, [r7, #23]
 800f71a:	2200      	movs	r2, #0
 800f71c:	6939      	ldr	r1, [r7, #16]
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff ff38 	bl	800f594 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f726:	683a      	ldr	r2, [r7, #0]
 800f728:	6939      	ldr	r1, [r7, #16]
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f7ff ff72 	bl	800f614 <tcp_output_control_segment>
 800f730:	e000      	b.n	800f734 <tcp_rst+0x8c>
    return;
 800f732:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	bd90      	pop	{r4, r7, pc}
 800f73a:	bf00      	nop
 800f73c:	08017440 	.word	0x08017440
 800f740:	08017bc4 	.word	0x08017bc4
 800f744:	08017494 	.word	0x08017494
 800f748:	08017be0 	.word	0x08017be0

0800f74c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f74c:	b590      	push	{r4, r7, lr}
 800f74e:	b087      	sub	sp, #28
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f754:	2300      	movs	r3, #0
 800f756:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f758:	2300      	movs	r3, #0
 800f75a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d106      	bne.n	800f770 <tcp_send_empty_ack+0x24>
 800f762:	4b28      	ldr	r3, [pc, #160]	; (800f804 <tcp_send_empty_ack+0xb8>)
 800f764:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f768:	4927      	ldr	r1, [pc, #156]	; (800f808 <tcp_send_empty_ack+0xbc>)
 800f76a:	4828      	ldr	r0, [pc, #160]	; (800f80c <tcp_send_empty_ack+0xc0>)
 800f76c:	f003 f856 	bl	801281c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	b2db      	uxtb	r3, r3
 800f776:	f003 0304 	and.w	r3, r3, #4
 800f77a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f77c:	7d7b      	ldrb	r3, [r7, #21]
 800f77e:	b29c      	uxth	r4, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f784:	4618      	mov	r0, r3
 800f786:	f7f8 fbd7 	bl	8007f38 <lwip_htonl>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2200      	movs	r2, #0
 800f78e:	4621      	mov	r1, r4
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff fec1 	bl	800f518 <tcp_output_alloc_header>
 800f796:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d109      	bne.n	800f7b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	8b5b      	ldrh	r3, [r3, #26]
 800f7a2:	f043 0303 	orr.w	r3, r3, #3
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f7ac:	f06f 0301 	mvn.w	r3, #1
 800f7b0:	e023      	b.n	800f7fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f7b2:	7dbb      	ldrb	r3, [r7, #22]
 800f7b4:	7dfa      	ldrb	r2, [r7, #23]
 800f7b6:	6939      	ldr	r1, [r7, #16]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff feeb 	bl	800f594 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	6939      	ldr	r1, [r7, #16]
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff ff24 	bl	800f614 <tcp_output_control_segment>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f7d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	8b5b      	ldrh	r3, [r3, #26]
 800f7dc:	f043 0303 	orr.w	r3, r3, #3
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	835a      	strh	r2, [r3, #26]
 800f7e6:	e006      	b.n	800f7f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	8b5b      	ldrh	r3, [r3, #26]
 800f7ec:	f023 0303 	bic.w	r3, r3, #3
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f7f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	371c      	adds	r7, #28
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd90      	pop	{r4, r7, pc}
 800f802:	bf00      	nop
 800f804:	08017440 	.word	0x08017440
 800f808:	08017bfc 	.word	0x08017bfc
 800f80c:	08017494 	.word	0x08017494

0800f810 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f810:	b590      	push	{r4, r7, lr}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f818:	2300      	movs	r3, #0
 800f81a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d106      	bne.n	800f830 <tcp_keepalive+0x20>
 800f822:	4b18      	ldr	r3, [pc, #96]	; (800f884 <tcp_keepalive+0x74>)
 800f824:	f640 0224 	movw	r2, #2084	; 0x824
 800f828:	4917      	ldr	r1, [pc, #92]	; (800f888 <tcp_keepalive+0x78>)
 800f82a:	4818      	ldr	r0, [pc, #96]	; (800f88c <tcp_keepalive+0x7c>)
 800f82c:	f002 fff6 	bl	801281c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f830:	7dfb      	ldrb	r3, [r7, #23]
 800f832:	b29c      	uxth	r4, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f838:	3b01      	subs	r3, #1
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7f8 fb7c 	bl	8007f38 <lwip_htonl>
 800f840:	4603      	mov	r3, r0
 800f842:	2200      	movs	r2, #0
 800f844:	4621      	mov	r1, r4
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff fe66 	bl	800f518 <tcp_output_alloc_header>
 800f84c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d102      	bne.n	800f85a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f854:	f04f 33ff 	mov.w	r3, #4294967295
 800f858:	e010      	b.n	800f87c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	2200      	movs	r2, #0
 800f85e:	6939      	ldr	r1, [r7, #16]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff fe97 	bl	800f594 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3304      	adds	r3, #4
 800f86c:	6939      	ldr	r1, [r7, #16]
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff fed0 	bl	800f614 <tcp_output_control_segment>
 800f874:	4603      	mov	r3, r0
 800f876:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f878:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	371c      	adds	r7, #28
 800f880:	46bd      	mov	sp, r7
 800f882:	bd90      	pop	{r4, r7, pc}
 800f884:	08017440 	.word	0x08017440
 800f888:	08017c1c 	.word	0x08017c1c
 800f88c:	08017494 	.word	0x08017494

0800f890 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f890:	b590      	push	{r4, r7, lr}
 800f892:	b08b      	sub	sp, #44	; 0x2c
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f898:	2300      	movs	r3, #0
 800f89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d106      	bne.n	800f8b2 <tcp_zero_window_probe+0x22>
 800f8a4:	4b4c      	ldr	r3, [pc, #304]	; (800f9d8 <tcp_zero_window_probe+0x148>)
 800f8a6:	f640 024f 	movw	r2, #2127	; 0x84f
 800f8aa:	494c      	ldr	r1, [pc, #304]	; (800f9dc <tcp_zero_window_probe+0x14c>)
 800f8ac:	484c      	ldr	r0, [pc, #304]	; (800f9e0 <tcp_zero_window_probe+0x150>)
 800f8ae:	f002 ffb5 	bl	801281c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f8b8:	6a3b      	ldr	r3, [r7, #32]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e086      	b.n	800f9d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f8c8:	2bff      	cmp	r3, #255	; 0xff
 800f8ca:	d007      	beq.n	800f8dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f8dc:	6a3b      	ldr	r3, [r7, #32]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	899b      	ldrh	r3, [r3, #12]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7f8 fb12 	bl	8007f0e <lwip_htons>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d005      	beq.n	800f902 <tcp_zero_window_probe+0x72>
 800f8f6:	6a3b      	ldr	r3, [r7, #32]
 800f8f8:	891b      	ldrh	r3, [r3, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <tcp_zero_window_probe+0x72>
 800f8fe:	2301      	movs	r3, #1
 800f900:	e000      	b.n	800f904 <tcp_zero_window_probe+0x74>
 800f902:	2300      	movs	r3, #0
 800f904:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f906:	7ffb      	ldrb	r3, [r7, #31]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	bf0c      	ite	eq
 800f90c:	2301      	moveq	r3, #1
 800f90e:	2300      	movne	r3, #0
 800f910:	b2db      	uxtb	r3, r3
 800f912:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f918:	b299      	uxth	r1, r3
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	8bba      	ldrh	r2, [r7, #28]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7ff fdf8 	bl	800f518 <tcp_output_alloc_header>
 800f928:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d102      	bne.n	800f936 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f930:	f04f 33ff 	mov.w	r3, #4294967295
 800f934:	e04c      	b.n	800f9d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f93c:	7ffb      	ldrb	r3, [r7, #31]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d011      	beq.n	800f966 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	899b      	ldrh	r3, [r3, #12]
 800f946:	b29b      	uxth	r3, r3
 800f948:	b21b      	sxth	r3, r3
 800f94a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f94e:	b21c      	sxth	r4, r3
 800f950:	2011      	movs	r0, #17
 800f952:	f7f8 fadc 	bl	8007f0e <lwip_htons>
 800f956:	4603      	mov	r3, r0
 800f958:	b21b      	sxth	r3, r3
 800f95a:	4323      	orrs	r3, r4
 800f95c:	b21b      	sxth	r3, r3
 800f95e:	b29a      	uxth	r2, r3
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	819a      	strh	r2, [r3, #12]
 800f964:	e010      	b.n	800f988 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	3314      	adds	r3, #20
 800f96c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f96e:	6a3b      	ldr	r3, [r7, #32]
 800f970:	6858      	ldr	r0, [r3, #4]
 800f972:	6a3b      	ldr	r3, [r7, #32]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	891a      	ldrh	r2, [r3, #8]
 800f978:	6a3b      	ldr	r3, [r7, #32]
 800f97a:	891b      	ldrh	r3, [r3, #8]
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	b29b      	uxth	r3, r3
 800f980:	2201      	movs	r2, #1
 800f982:	6939      	ldr	r1, [r7, #16]
 800f984:	f7f9 ff58 	bl	8009838 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f8 fad2 	bl	8007f38 <lwip_htonl>
 800f994:	4603      	mov	r3, r0
 800f996:	3301      	adds	r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	da02      	bge.n	800f9ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	69b9      	ldr	r1, [r7, #24]
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f7ff fded 	bl	800f594 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3304      	adds	r3, #4
 800f9c0:	69b9      	ldr	r1, [r7, #24]
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff fe26 	bl	800f614 <tcp_output_control_segment>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f9cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	372c      	adds	r7, #44	; 0x2c
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd90      	pop	{r4, r7, pc}
 800f9d8:	08017440 	.word	0x08017440
 800f9dc:	08017c38 	.word	0x08017c38
 800f9e0:	08017494 	.word	0x08017494

0800f9e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f9ec:	f7fa f812 	bl	8009a14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f9f0:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <tcpip_tcp_timer+0x38>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d103      	bne.n	800fa00 <tcpip_tcp_timer+0x1c>
 800f9f8:	4b09      	ldr	r3, [pc, #36]	; (800fa20 <tcpip_tcp_timer+0x3c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d005      	beq.n	800fa0c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fa00:	2200      	movs	r2, #0
 800fa02:	4908      	ldr	r1, [pc, #32]	; (800fa24 <tcpip_tcp_timer+0x40>)
 800fa04:	20fa      	movs	r0, #250	; 0xfa
 800fa06:	f000 f8f1 	bl	800fbec <sys_timeout>
 800fa0a:	e002      	b.n	800fa12 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fa0c:	4b06      	ldr	r3, [pc, #24]	; (800fa28 <tcpip_tcp_timer+0x44>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	601a      	str	r2, [r3, #0]
  }
}
 800fa12:	bf00      	nop
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20007078 	.word	0x20007078
 800fa20:	20007088 	.word	0x20007088
 800fa24:	0800f9e5 	.word	0x0800f9e5
 800fa28:	2000028c 	.word	0x2000028c

0800fa2c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fa30:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <tcp_timer_needed+0x30>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d10f      	bne.n	800fa58 <tcp_timer_needed+0x2c>
 800fa38:	4b09      	ldr	r3, [pc, #36]	; (800fa60 <tcp_timer_needed+0x34>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d103      	bne.n	800fa48 <tcp_timer_needed+0x1c>
 800fa40:	4b08      	ldr	r3, [pc, #32]	; (800fa64 <tcp_timer_needed+0x38>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d007      	beq.n	800fa58 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fa48:	4b04      	ldr	r3, [pc, #16]	; (800fa5c <tcp_timer_needed+0x30>)
 800fa4a:	2201      	movs	r2, #1
 800fa4c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fa4e:	2200      	movs	r2, #0
 800fa50:	4905      	ldr	r1, [pc, #20]	; (800fa68 <tcp_timer_needed+0x3c>)
 800fa52:	20fa      	movs	r0, #250	; 0xfa
 800fa54:	f000 f8ca 	bl	800fbec <sys_timeout>
  }
}
 800fa58:	bf00      	nop
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	2000028c 	.word	0x2000028c
 800fa60:	20007078 	.word	0x20007078
 800fa64:	20007088 	.word	0x20007088
 800fa68:	0800f9e5 	.word	0x0800f9e5

0800fa6c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b086      	sub	sp, #24
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	60f8      	str	r0, [r7, #12]
 800fa74:	60b9      	str	r1, [r7, #8]
 800fa76:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fa78:	2006      	movs	r0, #6
 800fa7a:	f7f8 fe9d 	bl	80087b8 <memp_malloc>
 800fa7e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d109      	bne.n	800fa9a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d151      	bne.n	800fb30 <sys_timeout_abs+0xc4>
 800fa8c:	4b2a      	ldr	r3, [pc, #168]	; (800fb38 <sys_timeout_abs+0xcc>)
 800fa8e:	22be      	movs	r2, #190	; 0xbe
 800fa90:	492a      	ldr	r1, [pc, #168]	; (800fb3c <sys_timeout_abs+0xd0>)
 800fa92:	482b      	ldr	r0, [pc, #172]	; (800fb40 <sys_timeout_abs+0xd4>)
 800fa94:	f002 fec2 	bl	801281c <iprintf>
    return;
 800fa98:	e04a      	b.n	800fb30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fab2:	4b24      	ldr	r3, [pc, #144]	; (800fb44 <sys_timeout_abs+0xd8>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d103      	bne.n	800fac2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800faba:	4a22      	ldr	r2, [pc, #136]	; (800fb44 <sys_timeout_abs+0xd8>)
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	6013      	str	r3, [r2, #0]
    return;
 800fac0:	e037      	b.n	800fb32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	685a      	ldr	r2, [r3, #4]
 800fac6:	4b1f      	ldr	r3, [pc, #124]	; (800fb44 <sys_timeout_abs+0xd8>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	1ad3      	subs	r3, r2, r3
 800face:	0fdb      	lsrs	r3, r3, #31
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d007      	beq.n	800faea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fada:	4b1a      	ldr	r3, [pc, #104]	; (800fb44 <sys_timeout_abs+0xd8>)
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fae2:	4a18      	ldr	r2, [pc, #96]	; (800fb44 <sys_timeout_abs+0xd8>)
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	e023      	b.n	800fb32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800faea:	4b16      	ldr	r3, [pc, #88]	; (800fb44 <sys_timeout_abs+0xd8>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	617b      	str	r3, [r7, #20]
 800faf0:	e01a      	b.n	800fb28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00b      	beq.n	800fb12 <sys_timeout_abs+0xa6>
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	685a      	ldr	r2, [r3, #4]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	0fdb      	lsrs	r3, r3, #31
 800fb08:	f003 0301 	and.w	r3, r3, #1
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	693a      	ldr	r2, [r7, #16]
 800fb1e:	601a      	str	r2, [r3, #0]
        break;
 800fb20:	e007      	b.n	800fb32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	617b      	str	r3, [r7, #20]
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e1      	bne.n	800faf2 <sys_timeout_abs+0x86>
 800fb2e:	e000      	b.n	800fb32 <sys_timeout_abs+0xc6>
    return;
 800fb30:	bf00      	nop
      }
    }
  }
}
 800fb32:	3718      	adds	r7, #24
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	08017c5c 	.word	0x08017c5c
 800fb3c:	08017c90 	.word	0x08017c90
 800fb40:	08017cd0 	.word	0x08017cd0
 800fb44:	20000284 	.word	0x20000284

0800fb48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	4798      	blx	r3

  now = sys_now();
 800fb5a:	f7f8 f9d1 	bl	8007f00 <sys_now>
 800fb5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <lwip_cyclic_timer+0x5c>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4413      	add	r3, r2
 800fb6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	0fdb      	lsrs	r3, r3, #31
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d009      	beq.n	800fb92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	4413      	add	r3, r2
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	4907      	ldr	r1, [pc, #28]	; (800fba8 <lwip_cyclic_timer+0x60>)
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7ff ff6e 	bl	800fa6c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fb90:	e004      	b.n	800fb9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	4904      	ldr	r1, [pc, #16]	; (800fba8 <lwip_cyclic_timer+0x60>)
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f7ff ff68 	bl	800fa6c <sys_timeout_abs>
}
 800fb9c:	bf00      	nop
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	20000288 	.word	0x20000288
 800fba8:	0800fb49 	.word	0x0800fb49

0800fbac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	607b      	str	r3, [r7, #4]
 800fbb6:	e00e      	b.n	800fbd6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fbb8:	4a0a      	ldr	r2, [pc, #40]	; (800fbe4 <sys_timeouts_init+0x38>)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	00db      	lsls	r3, r3, #3
 800fbc4:	4a07      	ldr	r2, [pc, #28]	; (800fbe4 <sys_timeouts_init+0x38>)
 800fbc6:	4413      	add	r3, r2
 800fbc8:	461a      	mov	r2, r3
 800fbca:	4907      	ldr	r1, [pc, #28]	; (800fbe8 <sys_timeouts_init+0x3c>)
 800fbcc:	f000 f80e 	bl	800fbec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	607b      	str	r3, [r7, #4]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d9ed      	bls.n	800fbb8 <sys_timeouts_init+0xc>
  }
}
 800fbdc:	bf00      	nop
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	08018854 	.word	0x08018854
 800fbe8:	0800fb49 	.word	0x0800fb49

0800fbec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbfe:	d306      	bcc.n	800fc0e <sys_timeout+0x22>
 800fc00:	4b0a      	ldr	r3, [pc, #40]	; (800fc2c <sys_timeout+0x40>)
 800fc02:	f240 1229 	movw	r2, #297	; 0x129
 800fc06:	490a      	ldr	r1, [pc, #40]	; (800fc30 <sys_timeout+0x44>)
 800fc08:	480a      	ldr	r0, [pc, #40]	; (800fc34 <sys_timeout+0x48>)
 800fc0a:	f002 fe07 	bl	801281c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800fc0e:	f7f8 f977 	bl	8007f00 <sys_now>
 800fc12:	4602      	mov	r2, r0
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4413      	add	r3, r2
 800fc18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	68b9      	ldr	r1, [r7, #8]
 800fc1e:	6978      	ldr	r0, [r7, #20]
 800fc20:	f7ff ff24 	bl	800fa6c <sys_timeout_abs>
#endif
}
 800fc24:	bf00      	nop
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	08017c5c 	.word	0x08017c5c
 800fc30:	08017cf8 	.word	0x08017cf8
 800fc34:	08017cd0 	.word	0x08017cd0

0800fc38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800fc3e:	f7f8 f95f 	bl	8007f00 <sys_now>
 800fc42:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800fc44:	4b1a      	ldr	r3, [pc, #104]	; (800fcb0 <sys_check_timeouts+0x78>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d001      	beq.n	800fc52 <sys_check_timeouts+0x1a>
 800fc4e:	f7f9 f8c3 	bl	8008dd8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800fc52:	4b18      	ldr	r3, [pc, #96]	; (800fcb4 <sys_check_timeouts+0x7c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d022      	beq.n	800fca4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	0fdb      	lsrs	r3, r3, #31
 800fc68:	f003 0301 	and.w	r3, r3, #1
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d11a      	bne.n	800fca8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a0f      	ldr	r2, [pc, #60]	; (800fcb4 <sys_check_timeouts+0x7c>)
 800fc78:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	4a0b      	ldr	r2, [pc, #44]	; (800fcb8 <sys_check_timeouts+0x80>)
 800fc8c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fc8e:	68b9      	ldr	r1, [r7, #8]
 800fc90:	2006      	movs	r0, #6
 800fc92:	f7f8 fddd 	bl	8008850 <memp_free>
    if (handler != NULL) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d0d3      	beq.n	800fc44 <sys_check_timeouts+0xc>
      handler(arg);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6838      	ldr	r0, [r7, #0]
 800fca0:	4798      	blx	r3
  do {
 800fca2:	e7cf      	b.n	800fc44 <sys_check_timeouts+0xc>
      return;
 800fca4:	bf00      	nop
 800fca6:	e000      	b.n	800fcaa <sys_check_timeouts+0x72>
      return;
 800fca8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	20007070 	.word	0x20007070
 800fcb4:	20000284 	.word	0x20000284
 800fcb8:	20000288 	.word	0x20000288

0800fcbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fcc0:	f002 fdc4 	bl	801284c <rand>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	4b01      	ldr	r3, [pc, #4]	; (800fcdc <udp_init+0x20>)
 800fcd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fcd8:	bf00      	nop
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	2000001c 	.word	0x2000001c

0800fce0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d105      	bne.n	800fd00 <udp_input_local_match+0x20>
 800fcf4:	4b27      	ldr	r3, [pc, #156]	; (800fd94 <udp_input_local_match+0xb4>)
 800fcf6:	2287      	movs	r2, #135	; 0x87
 800fcf8:	4927      	ldr	r1, [pc, #156]	; (800fd98 <udp_input_local_match+0xb8>)
 800fcfa:	4828      	ldr	r0, [pc, #160]	; (800fd9c <udp_input_local_match+0xbc>)
 800fcfc:	f002 fd8e 	bl	801281c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d105      	bne.n	800fd12 <udp_input_local_match+0x32>
 800fd06:	4b23      	ldr	r3, [pc, #140]	; (800fd94 <udp_input_local_match+0xb4>)
 800fd08:	2288      	movs	r2, #136	; 0x88
 800fd0a:	4925      	ldr	r1, [pc, #148]	; (800fda0 <udp_input_local_match+0xc0>)
 800fd0c:	4823      	ldr	r0, [pc, #140]	; (800fd9c <udp_input_local_match+0xbc>)
 800fd0e:	f002 fd85 	bl	801281c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	7a1b      	ldrb	r3, [r3, #8]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00b      	beq.n	800fd32 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	7a1a      	ldrb	r2, [r3, #8]
 800fd1e:	4b21      	ldr	r3, [pc, #132]	; (800fda4 <udp_input_local_match+0xc4>)
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd26:	3301      	adds	r3, #1
 800fd28:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d001      	beq.n	800fd32 <udp_input_local_match+0x52>
    return 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e02b      	b.n	800fd8a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d018      	beq.n	800fd6a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d013      	beq.n	800fd66 <udp_input_local_match+0x86>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00f      	beq.n	800fd66 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fd46:	4b17      	ldr	r3, [pc, #92]	; (800fda4 <udp_input_local_match+0xc4>)
 800fd48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4e:	d00a      	beq.n	800fd66 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	4b13      	ldr	r3, [pc, #76]	; (800fda4 <udp_input_local_match+0xc4>)
 800fd56:	695b      	ldr	r3, [r3, #20]
 800fd58:	405a      	eors	r2, r3
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	3308      	adds	r3, #8
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d110      	bne.n	800fd88 <udp_input_local_match+0xa8>
          return 1;
 800fd66:	2301      	movs	r3, #1
 800fd68:	e00f      	b.n	800fd8a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d009      	beq.n	800fd84 <udp_input_local_match+0xa4>
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d005      	beq.n	800fd84 <udp_input_local_match+0xa4>
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	4b09      	ldr	r3, [pc, #36]	; (800fda4 <udp_input_local_match+0xc4>)
 800fd7e:	695b      	ldr	r3, [r3, #20]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d101      	bne.n	800fd88 <udp_input_local_match+0xa8>
        return 1;
 800fd84:	2301      	movs	r3, #1
 800fd86:	e000      	b.n	800fd8a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	08017d44 	.word	0x08017d44
 800fd98:	08017d74 	.word	0x08017d74
 800fd9c:	08017d98 	.word	0x08017d98
 800fda0:	08017dc0 	.word	0x08017dc0
 800fda4:	20003b34 	.word	0x20003b34

0800fda8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fda8:	b590      	push	{r4, r7, lr}
 800fdaa:	b08d      	sub	sp, #52	; 0x34
 800fdac:	af02      	add	r7, sp, #8
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d105      	bne.n	800fdc8 <udp_input+0x20>
 800fdbc:	4b7c      	ldr	r3, [pc, #496]	; (800ffb0 <udp_input+0x208>)
 800fdbe:	22cf      	movs	r2, #207	; 0xcf
 800fdc0:	497c      	ldr	r1, [pc, #496]	; (800ffb4 <udp_input+0x20c>)
 800fdc2:	487d      	ldr	r0, [pc, #500]	; (800ffb8 <udp_input+0x210>)
 800fdc4:	f002 fd2a 	bl	801281c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d105      	bne.n	800fdda <udp_input+0x32>
 800fdce:	4b78      	ldr	r3, [pc, #480]	; (800ffb0 <udp_input+0x208>)
 800fdd0:	22d0      	movs	r2, #208	; 0xd0
 800fdd2:	497a      	ldr	r1, [pc, #488]	; (800ffbc <udp_input+0x214>)
 800fdd4:	4878      	ldr	r0, [pc, #480]	; (800ffb8 <udp_input+0x210>)
 800fdd6:	f002 fd21 	bl	801281c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	895b      	ldrh	r3, [r3, #10]
 800fdde:	2b07      	cmp	r3, #7
 800fde0:	d803      	bhi.n	800fdea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f7f9 fb2e 	bl	8009444 <pbuf_free>
    goto end;
 800fde8:	e0de      	b.n	800ffa8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fdf0:	4b73      	ldr	r3, [pc, #460]	; (800ffc0 <udp_input+0x218>)
 800fdf2:	695a      	ldr	r2, [r3, #20]
 800fdf4:	4b72      	ldr	r3, [pc, #456]	; (800ffc0 <udp_input+0x218>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	4610      	mov	r0, r2
 800fdfc:	f001 fc86 	bl	801170c <ip4_addr_isbroadcast_u32>
 800fe00:	4603      	mov	r3, r0
 800fe02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	881b      	ldrh	r3, [r3, #0]
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7f8 f87f 	bl	8007f0e <lwip_htons>
 800fe10:	4603      	mov	r3, r0
 800fe12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	885b      	ldrh	r3, [r3, #2]
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7f8 f877 	bl	8007f0e <lwip_htons>
 800fe20:	4603      	mov	r3, r0
 800fe22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fe24:	2300      	movs	r3, #0
 800fe26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe30:	4b64      	ldr	r3, [pc, #400]	; (800ffc4 <udp_input+0x21c>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	627b      	str	r3, [r7, #36]	; 0x24
 800fe36:	e054      	b.n	800fee2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	8a5b      	ldrh	r3, [r3, #18]
 800fe3c:	89fa      	ldrh	r2, [r7, #14]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d14a      	bne.n	800fed8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fe42:	7cfb      	ldrb	r3, [r7, #19]
 800fe44:	461a      	mov	r2, r3
 800fe46:	6839      	ldr	r1, [r7, #0]
 800fe48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe4a:	f7ff ff49 	bl	800fce0 <udp_input_local_match>
 800fe4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d041      	beq.n	800fed8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	7c1b      	ldrb	r3, [r3, #16]
 800fe58:	f003 0304 	and.w	r3, r3, #4
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d11d      	bne.n	800fe9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d102      	bne.n	800fe6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	61fb      	str	r3, [r7, #28]
 800fe6a:	e017      	b.n	800fe9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fe6c:	7cfb      	ldrb	r3, [r7, #19]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d014      	beq.n	800fe9c <udp_input+0xf4>
 800fe72:	4b53      	ldr	r3, [pc, #332]	; (800ffc0 <udp_input+0x218>)
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe7a:	d10f      	bne.n	800fe9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	681a      	ldr	r2, [r3, #0]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	3304      	adds	r3, #4
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d008      	beq.n	800fe9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	3304      	adds	r3, #4
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d101      	bne.n	800fe9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	8a9b      	ldrh	r3, [r3, #20]
 800fea0:	8a3a      	ldrh	r2, [r7, #16]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d118      	bne.n	800fed8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d005      	beq.n	800feba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800feae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb0:	685a      	ldr	r2, [r3, #4]
 800feb2:	4b43      	ldr	r3, [pc, #268]	; (800ffc0 <udp_input+0x218>)
 800feb4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d10e      	bne.n	800fed8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d014      	beq.n	800feea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec2:	68da      	ldr	r2, [r3, #12]
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fec8:	4b3e      	ldr	r3, [pc, #248]	; (800ffc4 <udp_input+0x21c>)
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fece:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fed0:	4a3c      	ldr	r2, [pc, #240]	; (800ffc4 <udp_input+0x21c>)
 800fed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fed6:	e008      	b.n	800feea <udp_input+0x142>
      }
    }

    prev = pcb;
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	627b      	str	r3, [r7, #36]	; 0x24
 800fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1a7      	bne.n	800fe38 <udp_input+0x90>
 800fee8:	e000      	b.n	800feec <udp_input+0x144>
        break;
 800feea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800feec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <udp_input+0x15a>
    for_us = 1;
 800fefc:	2301      	movs	r3, #1
 800fefe:	76fb      	strb	r3, [r7, #27]
 800ff00:	e00a      	b.n	800ff18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	3304      	adds	r3, #4
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	4b2d      	ldr	r3, [pc, #180]	; (800ffc0 <udp_input+0x218>)
 800ff0a:	695b      	ldr	r3, [r3, #20]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	bf0c      	ite	eq
 800ff10:	2301      	moveq	r3, #1
 800ff12:	2300      	movne	r3, #0
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ff18:	7efb      	ldrb	r3, [r7, #27]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d041      	beq.n	800ffa2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ff1e:	2108      	movs	r1, #8
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f7f9 fa09 	bl	8009338 <pbuf_remove_header>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00a      	beq.n	800ff42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ff2c:	4b20      	ldr	r3, [pc, #128]	; (800ffb0 <udp_input+0x208>)
 800ff2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ff32:	4925      	ldr	r1, [pc, #148]	; (800ffc8 <udp_input+0x220>)
 800ff34:	4820      	ldr	r0, [pc, #128]	; (800ffb8 <udp_input+0x210>)
 800ff36:	f002 fc71 	bl	801281c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7f9 fa82 	bl	8009444 <pbuf_free>
      goto end;
 800ff40:	e032      	b.n	800ffa8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d012      	beq.n	800ff6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	699b      	ldr	r3, [r3, #24]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d00a      	beq.n	800ff66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	699c      	ldr	r4, [r3, #24]
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	69d8      	ldr	r0, [r3, #28]
 800ff58:	8a3b      	ldrh	r3, [r7, #16]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	4b1b      	ldr	r3, [pc, #108]	; (800ffcc <udp_input+0x224>)
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ff64:	e021      	b.n	800ffaa <udp_input+0x202>
        pbuf_free(p);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7f9 fa6c 	bl	8009444 <pbuf_free>
        goto end;
 800ff6c:	e01c      	b.n	800ffa8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ff6e:	7cfb      	ldrb	r3, [r7, #19]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d112      	bne.n	800ff9a <udp_input+0x1f2>
 800ff74:	4b12      	ldr	r3, [pc, #72]	; (800ffc0 <udp_input+0x218>)
 800ff76:	695b      	ldr	r3, [r3, #20]
 800ff78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff7c:	2be0      	cmp	r3, #224	; 0xe0
 800ff7e:	d00c      	beq.n	800ff9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ff80:	4b0f      	ldr	r3, [pc, #60]	; (800ffc0 <udp_input+0x218>)
 800ff82:	899b      	ldrh	r3, [r3, #12]
 800ff84:	3308      	adds	r3, #8
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	b21b      	sxth	r3, r3
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f7f9 fa46 	bl	800941e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ff92:	2103      	movs	r1, #3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f001 f89b 	bl	80110d0 <icmp_dest_unreach>
      pbuf_free(p);
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7f9 fa52 	bl	8009444 <pbuf_free>
  return;
 800ffa0:	e003      	b.n	800ffaa <udp_input+0x202>
    pbuf_free(p);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7f9 fa4e 	bl	8009444 <pbuf_free>
  return;
 800ffa8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ffaa:	372c      	adds	r7, #44	; 0x2c
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd90      	pop	{r4, r7, pc}
 800ffb0:	08017d44 	.word	0x08017d44
 800ffb4:	08017de8 	.word	0x08017de8
 800ffb8:	08017d98 	.word	0x08017d98
 800ffbc:	08017e00 	.word	0x08017e00
 800ffc0:	20003b34 	.word	0x20003b34
 800ffc4:	20007090 	.word	0x20007090
 800ffc8:	08017e1c 	.word	0x08017e1c
 800ffcc:	20003b44 	.word	0x20003b44

0800ffd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d01e      	beq.n	801001e <udp_netif_ip_addr_changed+0x4e>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d01a      	beq.n	801001e <udp_netif_ip_addr_changed+0x4e>
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d017      	beq.n	801001e <udp_netif_ip_addr_changed+0x4e>
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d013      	beq.n	801001e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fff6:	4b0d      	ldr	r3, [pc, #52]	; (801002c <udp_netif_ip_addr_changed+0x5c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	60fb      	str	r3, [r7, #12]
 800fffc:	e00c      	b.n	8010018 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d103      	bne.n	8010012 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	60fb      	str	r3, [r7, #12]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1ef      	bne.n	800fffe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801001e:	bf00      	nop
 8010020:	3714      	adds	r7, #20
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	20007090 	.word	0x20007090

08010030 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010038:	4915      	ldr	r1, [pc, #84]	; (8010090 <etharp_free_entry+0x60>)
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	4613      	mov	r3, r2
 801003e:	005b      	lsls	r3, r3, #1
 8010040:	4413      	add	r3, r2
 8010042:	00db      	lsls	r3, r3, #3
 8010044:	440b      	add	r3, r1
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d013      	beq.n	8010074 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801004c:	4910      	ldr	r1, [pc, #64]	; (8010090 <etharp_free_entry+0x60>)
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	4613      	mov	r3, r2
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	4413      	add	r3, r2
 8010056:	00db      	lsls	r3, r3, #3
 8010058:	440b      	add	r3, r1
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4618      	mov	r0, r3
 801005e:	f7f9 f9f1 	bl	8009444 <pbuf_free>
    arp_table[i].q = NULL;
 8010062:	490b      	ldr	r1, [pc, #44]	; (8010090 <etharp_free_entry+0x60>)
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	4613      	mov	r3, r2
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	440b      	add	r3, r1
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010074:	4906      	ldr	r1, [pc, #24]	; (8010090 <etharp_free_entry+0x60>)
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	4613      	mov	r3, r2
 801007a:	005b      	lsls	r3, r3, #1
 801007c:	4413      	add	r3, r2
 801007e:	00db      	lsls	r3, r3, #3
 8010080:	440b      	add	r3, r1
 8010082:	3314      	adds	r3, #20
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	20000290 	.word	0x20000290

08010094 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801009a:	2300      	movs	r3, #0
 801009c:	607b      	str	r3, [r7, #4]
 801009e:	e096      	b.n	80101ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80100a0:	494f      	ldr	r1, [pc, #316]	; (80101e0 <etharp_tmr+0x14c>)
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	4613      	mov	r3, r2
 80100a6:	005b      	lsls	r3, r3, #1
 80100a8:	4413      	add	r3, r2
 80100aa:	00db      	lsls	r3, r3, #3
 80100ac:	440b      	add	r3, r1
 80100ae:	3314      	adds	r3, #20
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80100b4:	78fb      	ldrb	r3, [r7, #3]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f000 8086 	beq.w	80101c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80100bc:	4948      	ldr	r1, [pc, #288]	; (80101e0 <etharp_tmr+0x14c>)
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	4613      	mov	r3, r2
 80100c2:	005b      	lsls	r3, r3, #1
 80100c4:	4413      	add	r3, r2
 80100c6:	00db      	lsls	r3, r3, #3
 80100c8:	440b      	add	r3, r1
 80100ca:	3312      	adds	r3, #18
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	3301      	adds	r3, #1
 80100d0:	b298      	uxth	r0, r3
 80100d2:	4943      	ldr	r1, [pc, #268]	; (80101e0 <etharp_tmr+0x14c>)
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	4613      	mov	r3, r2
 80100d8:	005b      	lsls	r3, r3, #1
 80100da:	4413      	add	r3, r2
 80100dc:	00db      	lsls	r3, r3, #3
 80100de:	440b      	add	r3, r1
 80100e0:	3312      	adds	r3, #18
 80100e2:	4602      	mov	r2, r0
 80100e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80100e6:	493e      	ldr	r1, [pc, #248]	; (80101e0 <etharp_tmr+0x14c>)
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	4613      	mov	r3, r2
 80100ec:	005b      	lsls	r3, r3, #1
 80100ee:	4413      	add	r3, r2
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	440b      	add	r3, r1
 80100f4:	3312      	adds	r3, #18
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80100fc:	d215      	bcs.n	801012a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80100fe:	4938      	ldr	r1, [pc, #224]	; (80101e0 <etharp_tmr+0x14c>)
 8010100:	687a      	ldr	r2, [r7, #4]
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	440b      	add	r3, r1
 801010c:	3314      	adds	r3, #20
 801010e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010110:	2b01      	cmp	r3, #1
 8010112:	d10e      	bne.n	8010132 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010114:	4932      	ldr	r1, [pc, #200]	; (80101e0 <etharp_tmr+0x14c>)
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	4613      	mov	r3, r2
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	4413      	add	r3, r2
 801011e:	00db      	lsls	r3, r3, #3
 8010120:	440b      	add	r3, r1
 8010122:	3312      	adds	r3, #18
 8010124:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010126:	2b04      	cmp	r3, #4
 8010128:	d903      	bls.n	8010132 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7ff ff80 	bl	8010030 <etharp_free_entry>
 8010130:	e04a      	b.n	80101c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010132:	492b      	ldr	r1, [pc, #172]	; (80101e0 <etharp_tmr+0x14c>)
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	4613      	mov	r3, r2
 8010138:	005b      	lsls	r3, r3, #1
 801013a:	4413      	add	r3, r2
 801013c:	00db      	lsls	r3, r3, #3
 801013e:	440b      	add	r3, r1
 8010140:	3314      	adds	r3, #20
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b03      	cmp	r3, #3
 8010146:	d10a      	bne.n	801015e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010148:	4925      	ldr	r1, [pc, #148]	; (80101e0 <etharp_tmr+0x14c>)
 801014a:	687a      	ldr	r2, [r7, #4]
 801014c:	4613      	mov	r3, r2
 801014e:	005b      	lsls	r3, r3, #1
 8010150:	4413      	add	r3, r2
 8010152:	00db      	lsls	r3, r3, #3
 8010154:	440b      	add	r3, r1
 8010156:	3314      	adds	r3, #20
 8010158:	2204      	movs	r2, #4
 801015a:	701a      	strb	r2, [r3, #0]
 801015c:	e034      	b.n	80101c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801015e:	4920      	ldr	r1, [pc, #128]	; (80101e0 <etharp_tmr+0x14c>)
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	4613      	mov	r3, r2
 8010164:	005b      	lsls	r3, r3, #1
 8010166:	4413      	add	r3, r2
 8010168:	00db      	lsls	r3, r3, #3
 801016a:	440b      	add	r3, r1
 801016c:	3314      	adds	r3, #20
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	2b04      	cmp	r3, #4
 8010172:	d10a      	bne.n	801018a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010174:	491a      	ldr	r1, [pc, #104]	; (80101e0 <etharp_tmr+0x14c>)
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	4613      	mov	r3, r2
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	4413      	add	r3, r2
 801017e:	00db      	lsls	r3, r3, #3
 8010180:	440b      	add	r3, r1
 8010182:	3314      	adds	r3, #20
 8010184:	2202      	movs	r2, #2
 8010186:	701a      	strb	r2, [r3, #0]
 8010188:	e01e      	b.n	80101c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801018a:	4915      	ldr	r1, [pc, #84]	; (80101e0 <etharp_tmr+0x14c>)
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	4613      	mov	r3, r2
 8010190:	005b      	lsls	r3, r3, #1
 8010192:	4413      	add	r3, r2
 8010194:	00db      	lsls	r3, r3, #3
 8010196:	440b      	add	r3, r1
 8010198:	3314      	adds	r3, #20
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d113      	bne.n	80101c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80101a0:	490f      	ldr	r1, [pc, #60]	; (80101e0 <etharp_tmr+0x14c>)
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	4613      	mov	r3, r2
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	4413      	add	r3, r2
 80101aa:	00db      	lsls	r3, r3, #3
 80101ac:	440b      	add	r3, r1
 80101ae:	3308      	adds	r3, #8
 80101b0:	6818      	ldr	r0, [r3, #0]
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	4613      	mov	r3, r2
 80101b6:	005b      	lsls	r3, r3, #1
 80101b8:	4413      	add	r3, r2
 80101ba:	00db      	lsls	r3, r3, #3
 80101bc:	4a08      	ldr	r2, [pc, #32]	; (80101e0 <etharp_tmr+0x14c>)
 80101be:	4413      	add	r3, r2
 80101c0:	3304      	adds	r3, #4
 80101c2:	4619      	mov	r1, r3
 80101c4:	f000 fe6e 	bl	8010ea4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	3301      	adds	r3, #1
 80101cc:	607b      	str	r3, [r7, #4]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2b09      	cmp	r3, #9
 80101d2:	f77f af65 	ble.w	80100a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80101d6:	bf00      	nop
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	20000290 	.word	0x20000290

080101e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b08a      	sub	sp, #40	; 0x28
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	460b      	mov	r3, r1
 80101ee:	607a      	str	r2, [r7, #4]
 80101f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80101f2:	230a      	movs	r3, #10
 80101f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80101f6:	230a      	movs	r3, #10
 80101f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80101fa:	230a      	movs	r3, #10
 80101fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010202:	230a      	movs	r3, #10
 8010204:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010206:	2300      	movs	r3, #0
 8010208:	83bb      	strh	r3, [r7, #28]
 801020a:	2300      	movs	r3, #0
 801020c:	837b      	strh	r3, [r7, #26]
 801020e:	2300      	movs	r3, #0
 8010210:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010212:	2300      	movs	r3, #0
 8010214:	843b      	strh	r3, [r7, #32]
 8010216:	e0ae      	b.n	8010376 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801021c:	49a6      	ldr	r1, [pc, #664]	; (80104b8 <etharp_find_entry+0x2d4>)
 801021e:	4613      	mov	r3, r2
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	4413      	add	r3, r2
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	440b      	add	r3, r1
 8010228:	3314      	adds	r3, #20
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801022e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010232:	2b0a      	cmp	r3, #10
 8010234:	d105      	bne.n	8010242 <etharp_find_entry+0x5e>
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801023c:	8c3b      	ldrh	r3, [r7, #32]
 801023e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010240:	e095      	b.n	801036e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010242:	7dfb      	ldrb	r3, [r7, #23]
 8010244:	2b00      	cmp	r3, #0
 8010246:	f000 8092 	beq.w	801036e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d009      	beq.n	8010264 <etharp_find_entry+0x80>
 8010250:	7dfb      	ldrb	r3, [r7, #23]
 8010252:	2b01      	cmp	r3, #1
 8010254:	d806      	bhi.n	8010264 <etharp_find_entry+0x80>
 8010256:	4b99      	ldr	r3, [pc, #612]	; (80104bc <etharp_find_entry+0x2d8>)
 8010258:	f44f 7292 	mov.w	r2, #292	; 0x124
 801025c:	4998      	ldr	r1, [pc, #608]	; (80104c0 <etharp_find_entry+0x2dc>)
 801025e:	4899      	ldr	r0, [pc, #612]	; (80104c4 <etharp_find_entry+0x2e0>)
 8010260:	f002 fadc 	bl	801281c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d020      	beq.n	80102ac <etharp_find_entry+0xc8>
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	6819      	ldr	r1, [r3, #0]
 801026e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010272:	4891      	ldr	r0, [pc, #580]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010274:	4613      	mov	r3, r2
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	4413      	add	r3, r2
 801027a:	00db      	lsls	r3, r3, #3
 801027c:	4403      	add	r3, r0
 801027e:	3304      	adds	r3, #4
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	4299      	cmp	r1, r3
 8010284:	d112      	bne.n	80102ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00c      	beq.n	80102a6 <etharp_find_entry+0xc2>
 801028c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010290:	4989      	ldr	r1, [pc, #548]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010292:	4613      	mov	r3, r2
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	4413      	add	r3, r2
 8010298:	00db      	lsls	r3, r3, #3
 801029a:	440b      	add	r3, r1
 801029c:	3308      	adds	r3, #8
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d102      	bne.n	80102ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80102a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102aa:	e100      	b.n	80104ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d140      	bne.n	8010334 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80102b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102b6:	4980      	ldr	r1, [pc, #512]	; (80104b8 <etharp_find_entry+0x2d4>)
 80102b8:	4613      	mov	r3, r2
 80102ba:	005b      	lsls	r3, r3, #1
 80102bc:	4413      	add	r3, r2
 80102be:	00db      	lsls	r3, r3, #3
 80102c0:	440b      	add	r3, r1
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d01a      	beq.n	80102fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80102c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102cc:	497a      	ldr	r1, [pc, #488]	; (80104b8 <etharp_find_entry+0x2d4>)
 80102ce:	4613      	mov	r3, r2
 80102d0:	005b      	lsls	r3, r3, #1
 80102d2:	4413      	add	r3, r2
 80102d4:	00db      	lsls	r3, r3, #3
 80102d6:	440b      	add	r3, r1
 80102d8:	3312      	adds	r3, #18
 80102da:	881b      	ldrh	r3, [r3, #0]
 80102dc:	8bba      	ldrh	r2, [r7, #28]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d845      	bhi.n	801036e <etharp_find_entry+0x18a>
            old_queue = i;
 80102e2:	8c3b      	ldrh	r3, [r7, #32]
 80102e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80102e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102ea:	4973      	ldr	r1, [pc, #460]	; (80104b8 <etharp_find_entry+0x2d4>)
 80102ec:	4613      	mov	r3, r2
 80102ee:	005b      	lsls	r3, r3, #1
 80102f0:	4413      	add	r3, r2
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	440b      	add	r3, r1
 80102f6:	3312      	adds	r3, #18
 80102f8:	881b      	ldrh	r3, [r3, #0]
 80102fa:	83bb      	strh	r3, [r7, #28]
 80102fc:	e037      	b.n	801036e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80102fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010302:	496d      	ldr	r1, [pc, #436]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010304:	4613      	mov	r3, r2
 8010306:	005b      	lsls	r3, r3, #1
 8010308:	4413      	add	r3, r2
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	440b      	add	r3, r1
 801030e:	3312      	adds	r3, #18
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	8b7a      	ldrh	r2, [r7, #26]
 8010314:	429a      	cmp	r2, r3
 8010316:	d82a      	bhi.n	801036e <etharp_find_entry+0x18a>
            old_pending = i;
 8010318:	8c3b      	ldrh	r3, [r7, #32]
 801031a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801031c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010320:	4965      	ldr	r1, [pc, #404]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010322:	4613      	mov	r3, r2
 8010324:	005b      	lsls	r3, r3, #1
 8010326:	4413      	add	r3, r2
 8010328:	00db      	lsls	r3, r3, #3
 801032a:	440b      	add	r3, r1
 801032c:	3312      	adds	r3, #18
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	837b      	strh	r3, [r7, #26]
 8010332:	e01c      	b.n	801036e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010334:	7dfb      	ldrb	r3, [r7, #23]
 8010336:	2b01      	cmp	r3, #1
 8010338:	d919      	bls.n	801036e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801033a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801033e:	495e      	ldr	r1, [pc, #376]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010340:	4613      	mov	r3, r2
 8010342:	005b      	lsls	r3, r3, #1
 8010344:	4413      	add	r3, r2
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	440b      	add	r3, r1
 801034a:	3312      	adds	r3, #18
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	8b3a      	ldrh	r2, [r7, #24]
 8010350:	429a      	cmp	r2, r3
 8010352:	d80c      	bhi.n	801036e <etharp_find_entry+0x18a>
            old_stable = i;
 8010354:	8c3b      	ldrh	r3, [r7, #32]
 8010356:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801035c:	4956      	ldr	r1, [pc, #344]	; (80104b8 <etharp_find_entry+0x2d4>)
 801035e:	4613      	mov	r3, r2
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	4413      	add	r3, r2
 8010364:	00db      	lsls	r3, r3, #3
 8010366:	440b      	add	r3, r1
 8010368:	3312      	adds	r3, #18
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801036e:	8c3b      	ldrh	r3, [r7, #32]
 8010370:	3301      	adds	r3, #1
 8010372:	b29b      	uxth	r3, r3
 8010374:	843b      	strh	r3, [r7, #32]
 8010376:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801037a:	2b09      	cmp	r3, #9
 801037c:	f77f af4c 	ble.w	8010218 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010380:	7afb      	ldrb	r3, [r7, #11]
 8010382:	f003 0302 	and.w	r3, r3, #2
 8010386:	2b00      	cmp	r3, #0
 8010388:	d108      	bne.n	801039c <etharp_find_entry+0x1b8>
 801038a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801038e:	2b0a      	cmp	r3, #10
 8010390:	d107      	bne.n	80103a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010392:	7afb      	ldrb	r3, [r7, #11]
 8010394:	f003 0301 	and.w	r3, r3, #1
 8010398:	2b00      	cmp	r3, #0
 801039a:	d102      	bne.n	80103a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801039c:	f04f 33ff 	mov.w	r3, #4294967295
 80103a0:	e085      	b.n	80104ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80103a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80103a6:	2b09      	cmp	r3, #9
 80103a8:	dc02      	bgt.n	80103b0 <etharp_find_entry+0x1cc>
    i = empty;
 80103aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ac:	843b      	strh	r3, [r7, #32]
 80103ae:	e039      	b.n	8010424 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80103b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80103b4:	2b09      	cmp	r3, #9
 80103b6:	dc14      	bgt.n	80103e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80103b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80103bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103c0:	493d      	ldr	r1, [pc, #244]	; (80104b8 <etharp_find_entry+0x2d4>)
 80103c2:	4613      	mov	r3, r2
 80103c4:	005b      	lsls	r3, r3, #1
 80103c6:	4413      	add	r3, r2
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	440b      	add	r3, r1
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d018      	beq.n	8010404 <etharp_find_entry+0x220>
 80103d2:	4b3a      	ldr	r3, [pc, #232]	; (80104bc <etharp_find_entry+0x2d8>)
 80103d4:	f240 126d 	movw	r2, #365	; 0x16d
 80103d8:	493b      	ldr	r1, [pc, #236]	; (80104c8 <etharp_find_entry+0x2e4>)
 80103da:	483a      	ldr	r0, [pc, #232]	; (80104c4 <etharp_find_entry+0x2e0>)
 80103dc:	f002 fa1e 	bl	801281c <iprintf>
 80103e0:	e010      	b.n	8010404 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80103e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80103e6:	2b09      	cmp	r3, #9
 80103e8:	dc02      	bgt.n	80103f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80103ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80103ec:	843b      	strh	r3, [r7, #32]
 80103ee:	e009      	b.n	8010404 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80103f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80103f4:	2b09      	cmp	r3, #9
 80103f6:	dc02      	bgt.n	80103fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80103f8:	8bfb      	ldrh	r3, [r7, #30]
 80103fa:	843b      	strh	r3, [r7, #32]
 80103fc:	e002      	b.n	8010404 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80103fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010402:	e054      	b.n	80104ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010408:	2b09      	cmp	r3, #9
 801040a:	dd06      	ble.n	801041a <etharp_find_entry+0x236>
 801040c:	4b2b      	ldr	r3, [pc, #172]	; (80104bc <etharp_find_entry+0x2d8>)
 801040e:	f240 127f 	movw	r2, #383	; 0x17f
 8010412:	492e      	ldr	r1, [pc, #184]	; (80104cc <etharp_find_entry+0x2e8>)
 8010414:	482b      	ldr	r0, [pc, #172]	; (80104c4 <etharp_find_entry+0x2e0>)
 8010416:	f002 fa01 	bl	801281c <iprintf>
    etharp_free_entry(i);
 801041a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff fe06 	bl	8010030 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010428:	2b09      	cmp	r3, #9
 801042a:	dd06      	ble.n	801043a <etharp_find_entry+0x256>
 801042c:	4b23      	ldr	r3, [pc, #140]	; (80104bc <etharp_find_entry+0x2d8>)
 801042e:	f240 1283 	movw	r2, #387	; 0x183
 8010432:	4926      	ldr	r1, [pc, #152]	; (80104cc <etharp_find_entry+0x2e8>)
 8010434:	4823      	ldr	r0, [pc, #140]	; (80104c4 <etharp_find_entry+0x2e0>)
 8010436:	f002 f9f1 	bl	801281c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801043a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801043e:	491e      	ldr	r1, [pc, #120]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010440:	4613      	mov	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	440b      	add	r3, r1
 801044a:	3314      	adds	r3, #20
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d006      	beq.n	8010460 <etharp_find_entry+0x27c>
 8010452:	4b1a      	ldr	r3, [pc, #104]	; (80104bc <etharp_find_entry+0x2d8>)
 8010454:	f240 1285 	movw	r2, #389	; 0x185
 8010458:	491d      	ldr	r1, [pc, #116]	; (80104d0 <etharp_find_entry+0x2ec>)
 801045a:	481a      	ldr	r0, [pc, #104]	; (80104c4 <etharp_find_entry+0x2e0>)
 801045c:	f002 f9de 	bl	801281c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00b      	beq.n	801047e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010466:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6819      	ldr	r1, [r3, #0]
 801046e:	4812      	ldr	r0, [pc, #72]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010470:	4613      	mov	r3, r2
 8010472:	005b      	lsls	r3, r3, #1
 8010474:	4413      	add	r3, r2
 8010476:	00db      	lsls	r3, r3, #3
 8010478:	4403      	add	r3, r0
 801047a:	3304      	adds	r3, #4
 801047c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801047e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010482:	490d      	ldr	r1, [pc, #52]	; (80104b8 <etharp_find_entry+0x2d4>)
 8010484:	4613      	mov	r3, r2
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	4413      	add	r3, r2
 801048a:	00db      	lsls	r3, r3, #3
 801048c:	440b      	add	r3, r1
 801048e:	3312      	adds	r3, #18
 8010490:	2200      	movs	r2, #0
 8010492:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010498:	4907      	ldr	r1, [pc, #28]	; (80104b8 <etharp_find_entry+0x2d4>)
 801049a:	4613      	mov	r3, r2
 801049c:	005b      	lsls	r3, r3, #1
 801049e:	4413      	add	r3, r2
 80104a0:	00db      	lsls	r3, r3, #3
 80104a2:	440b      	add	r3, r1
 80104a4:	3308      	adds	r3, #8
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80104aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3728      	adds	r7, #40	; 0x28
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20000290 	.word	0x20000290
 80104bc:	080180a8 	.word	0x080180a8
 80104c0:	080180e0 	.word	0x080180e0
 80104c4:	08018120 	.word	0x08018120
 80104c8:	08018148 	.word	0x08018148
 80104cc:	08018160 	.word	0x08018160
 80104d0:	08018174 	.word	0x08018174

080104d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b088      	sub	sp, #32
 80104d8:	af02      	add	r7, sp, #8
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	607a      	str	r2, [r7, #4]
 80104e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104e8:	2b06      	cmp	r3, #6
 80104ea:	d006      	beq.n	80104fa <etharp_update_arp_entry+0x26>
 80104ec:	4b48      	ldr	r3, [pc, #288]	; (8010610 <etharp_update_arp_entry+0x13c>)
 80104ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 80104f2:	4948      	ldr	r1, [pc, #288]	; (8010614 <etharp_update_arp_entry+0x140>)
 80104f4:	4848      	ldr	r0, [pc, #288]	; (8010618 <etharp_update_arp_entry+0x144>)
 80104f6:	f002 f991 	bl	801281c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d012      	beq.n	8010526 <etharp_update_arp_entry+0x52>
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d00e      	beq.n	8010526 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	68f9      	ldr	r1, [r7, #12]
 801050e:	4618      	mov	r0, r3
 8010510:	f001 f8fc 	bl	801170c <ip4_addr_isbroadcast_u32>
 8010514:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010516:	2b00      	cmp	r3, #0
 8010518:	d105      	bne.n	8010526 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010522:	2be0      	cmp	r3, #224	; 0xe0
 8010524:	d102      	bne.n	801052c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010526:	f06f 030f 	mvn.w	r3, #15
 801052a:	e06c      	b.n	8010606 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801052c:	78fb      	ldrb	r3, [r7, #3]
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	4619      	mov	r1, r3
 8010532:	68b8      	ldr	r0, [r7, #8]
 8010534:	f7ff fe56 	bl	80101e4 <etharp_find_entry>
 8010538:	4603      	mov	r3, r0
 801053a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801053c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010540:	2b00      	cmp	r3, #0
 8010542:	da02      	bge.n	801054a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010544:	8afb      	ldrh	r3, [r7, #22]
 8010546:	b25b      	sxtb	r3, r3
 8010548:	e05d      	b.n	8010606 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801054a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801054e:	4933      	ldr	r1, [pc, #204]	; (801061c <etharp_update_arp_entry+0x148>)
 8010550:	4613      	mov	r3, r2
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	4413      	add	r3, r2
 8010556:	00db      	lsls	r3, r3, #3
 8010558:	440b      	add	r3, r1
 801055a:	3314      	adds	r3, #20
 801055c:	2202      	movs	r2, #2
 801055e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010560:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010564:	492d      	ldr	r1, [pc, #180]	; (801061c <etharp_update_arp_entry+0x148>)
 8010566:	4613      	mov	r3, r2
 8010568:	005b      	lsls	r3, r3, #1
 801056a:	4413      	add	r3, r2
 801056c:	00db      	lsls	r3, r3, #3
 801056e:	440b      	add	r3, r1
 8010570:	3308      	adds	r3, #8
 8010572:	68fa      	ldr	r2, [r7, #12]
 8010574:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010576:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801057a:	4613      	mov	r3, r2
 801057c:	005b      	lsls	r3, r3, #1
 801057e:	4413      	add	r3, r2
 8010580:	00db      	lsls	r3, r3, #3
 8010582:	3308      	adds	r3, #8
 8010584:	4a25      	ldr	r2, [pc, #148]	; (801061c <etharp_update_arp_entry+0x148>)
 8010586:	4413      	add	r3, r2
 8010588:	3304      	adds	r3, #4
 801058a:	2206      	movs	r2, #6
 801058c:	6879      	ldr	r1, [r7, #4]
 801058e:	4618      	mov	r0, r3
 8010590:	f002 f86f 	bl	8012672 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010594:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010598:	4920      	ldr	r1, [pc, #128]	; (801061c <etharp_update_arp_entry+0x148>)
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	440b      	add	r3, r1
 80105a4:	3312      	adds	r3, #18
 80105a6:	2200      	movs	r2, #0
 80105a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80105aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105ae:	491b      	ldr	r1, [pc, #108]	; (801061c <etharp_update_arp_entry+0x148>)
 80105b0:	4613      	mov	r3, r2
 80105b2:	005b      	lsls	r3, r3, #1
 80105b4:	4413      	add	r3, r2
 80105b6:	00db      	lsls	r3, r3, #3
 80105b8:	440b      	add	r3, r1
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d021      	beq.n	8010604 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80105c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105c4:	4915      	ldr	r1, [pc, #84]	; (801061c <etharp_update_arp_entry+0x148>)
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	440b      	add	r3, r1
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80105d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80105d8:	4910      	ldr	r1, [pc, #64]	; (801061c <etharp_update_arp_entry+0x148>)
 80105da:	4613      	mov	r3, r2
 80105dc:	005b      	lsls	r3, r3, #1
 80105de:	4413      	add	r3, r2
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	440b      	add	r3, r1
 80105e4:	2200      	movs	r2, #0
 80105e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80105ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6939      	ldr	r1, [r7, #16]
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f001 ff8b 	bl	8012514 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80105fe:	6938      	ldr	r0, [r7, #16]
 8010600:	f7f8 ff20 	bl	8009444 <pbuf_free>
  }
  return ERR_OK;
 8010604:	2300      	movs	r3, #0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3718      	adds	r7, #24
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	080180a8 	.word	0x080180a8
 8010614:	080181a0 	.word	0x080181a0
 8010618:	08018120 	.word	0x08018120
 801061c:	20000290 	.word	0x20000290

08010620 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010628:	2300      	movs	r3, #0
 801062a:	60fb      	str	r3, [r7, #12]
 801062c:	e01e      	b.n	801066c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801062e:	4913      	ldr	r1, [pc, #76]	; (801067c <etharp_cleanup_netif+0x5c>)
 8010630:	68fa      	ldr	r2, [r7, #12]
 8010632:	4613      	mov	r3, r2
 8010634:	005b      	lsls	r3, r3, #1
 8010636:	4413      	add	r3, r2
 8010638:	00db      	lsls	r3, r3, #3
 801063a:	440b      	add	r3, r1
 801063c:	3314      	adds	r3, #20
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010642:	7afb      	ldrb	r3, [r7, #11]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00e      	beq.n	8010666 <etharp_cleanup_netif+0x46>
 8010648:	490c      	ldr	r1, [pc, #48]	; (801067c <etharp_cleanup_netif+0x5c>)
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	4613      	mov	r3, r2
 801064e:	005b      	lsls	r3, r3, #1
 8010650:	4413      	add	r3, r2
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	440b      	add	r3, r1
 8010656:	3308      	adds	r3, #8
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	687a      	ldr	r2, [r7, #4]
 801065c:	429a      	cmp	r2, r3
 801065e:	d102      	bne.n	8010666 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f7ff fce5 	bl	8010030 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	3301      	adds	r3, #1
 801066a:	60fb      	str	r3, [r7, #12]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2b09      	cmp	r3, #9
 8010670:	dddd      	ble.n	801062e <etharp_cleanup_netif+0xe>
    }
  }
}
 8010672:	bf00      	nop
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	20000290 	.word	0x20000290

08010680 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010680:	b5b0      	push	{r4, r5, r7, lr}
 8010682:	b08a      	sub	sp, #40	; 0x28
 8010684:	af04      	add	r7, sp, #16
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d107      	bne.n	80106a0 <etharp_input+0x20>
 8010690:	4b3d      	ldr	r3, [pc, #244]	; (8010788 <etharp_input+0x108>)
 8010692:	f240 228a 	movw	r2, #650	; 0x28a
 8010696:	493d      	ldr	r1, [pc, #244]	; (801078c <etharp_input+0x10c>)
 8010698:	483d      	ldr	r0, [pc, #244]	; (8010790 <etharp_input+0x110>)
 801069a:	f002 f8bf 	bl	801281c <iprintf>
 801069e:	e06f      	b.n	8010780 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	881b      	ldrh	r3, [r3, #0]
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106b0:	d10c      	bne.n	80106cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80106b6:	2b06      	cmp	r3, #6
 80106b8:	d108      	bne.n	80106cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80106be:	2b04      	cmp	r3, #4
 80106c0:	d104      	bne.n	80106cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	885b      	ldrh	r3, [r3, #2]
 80106c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80106c8:	2b08      	cmp	r3, #8
 80106ca:	d003      	beq.n	80106d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7f8 feb9 	bl	8009444 <pbuf_free>
    return;
 80106d2:	e055      	b.n	8010780 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	330e      	adds	r3, #14
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	3318      	adds	r3, #24
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	3304      	adds	r3, #4
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <etharp_input+0x74>
    for_us = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	75fb      	strb	r3, [r7, #23]
 80106f2:	e009      	b.n	8010708 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	3304      	adds	r3, #4
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	429a      	cmp	r2, r3
 80106fe:	bf0c      	ite	eq
 8010700:	2301      	moveq	r3, #1
 8010702:	2300      	movne	r3, #0
 8010704:	b2db      	uxtb	r3, r3
 8010706:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	f103 0208 	add.w	r2, r3, #8
 801070e:	7dfb      	ldrb	r3, [r7, #23]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d001      	beq.n	8010718 <etharp_input+0x98>
 8010714:	2301      	movs	r3, #1
 8010716:	e000      	b.n	801071a <etharp_input+0x9a>
 8010718:	2302      	movs	r3, #2
 801071a:	f107 010c 	add.w	r1, r7, #12
 801071e:	6838      	ldr	r0, [r7, #0]
 8010720:	f7ff fed8 	bl	80104d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	88db      	ldrh	r3, [r3, #6]
 8010728:	b29b      	uxth	r3, r3
 801072a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801072e:	d003      	beq.n	8010738 <etharp_input+0xb8>
 8010730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010734:	d01e      	beq.n	8010774 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010736:	e020      	b.n	801077a <etharp_input+0xfa>
      if (for_us) {
 8010738:	7dfb      	ldrb	r3, [r7, #23]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d01c      	beq.n	8010778 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010754:	693a      	ldr	r2, [r7, #16]
 8010756:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010758:	2102      	movs	r1, #2
 801075a:	9103      	str	r1, [sp, #12]
 801075c:	f107 010c 	add.w	r1, r7, #12
 8010760:	9102      	str	r1, [sp, #8]
 8010762:	9201      	str	r2, [sp, #4]
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	462b      	mov	r3, r5
 8010768:	4622      	mov	r2, r4
 801076a:	4601      	mov	r1, r0
 801076c:	6838      	ldr	r0, [r7, #0]
 801076e:	f000 faeb 	bl	8010d48 <etharp_raw>
      break;
 8010772:	e001      	b.n	8010778 <etharp_input+0xf8>
      break;
 8010774:	bf00      	nop
 8010776:	e000      	b.n	801077a <etharp_input+0xfa>
      break;
 8010778:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7f8 fe62 	bl	8009444 <pbuf_free>
}
 8010780:	3718      	adds	r7, #24
 8010782:	46bd      	mov	sp, r7
 8010784:	bdb0      	pop	{r4, r5, r7, pc}
 8010786:	bf00      	nop
 8010788:	080180a8 	.word	0x080180a8
 801078c:	080181f8 	.word	0x080181f8
 8010790:	08018120 	.word	0x08018120

08010794 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b086      	sub	sp, #24
 8010798:	af02      	add	r7, sp, #8
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	4613      	mov	r3, r2
 80107a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80107a2:	79fa      	ldrb	r2, [r7, #7]
 80107a4:	4944      	ldr	r1, [pc, #272]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 80107a6:	4613      	mov	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	4413      	add	r3, r2
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	440b      	add	r3, r1
 80107b0:	3314      	adds	r3, #20
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d806      	bhi.n	80107c6 <etharp_output_to_arp_index+0x32>
 80107b8:	4b40      	ldr	r3, [pc, #256]	; (80108bc <etharp_output_to_arp_index+0x128>)
 80107ba:	f240 22ef 	movw	r2, #751	; 0x2ef
 80107be:	4940      	ldr	r1, [pc, #256]	; (80108c0 <etharp_output_to_arp_index+0x12c>)
 80107c0:	4840      	ldr	r0, [pc, #256]	; (80108c4 <etharp_output_to_arp_index+0x130>)
 80107c2:	f002 f82b 	bl	801281c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80107c6:	79fa      	ldrb	r2, [r7, #7]
 80107c8:	493b      	ldr	r1, [pc, #236]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 80107ca:	4613      	mov	r3, r2
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	4413      	add	r3, r2
 80107d0:	00db      	lsls	r3, r3, #3
 80107d2:	440b      	add	r3, r1
 80107d4:	3314      	adds	r3, #20
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2b02      	cmp	r3, #2
 80107da:	d153      	bne.n	8010884 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80107dc:	79fa      	ldrb	r2, [r7, #7]
 80107de:	4936      	ldr	r1, [pc, #216]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 80107e0:	4613      	mov	r3, r2
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	4413      	add	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	440b      	add	r3, r1
 80107ea:	3312      	adds	r3, #18
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80107f2:	d919      	bls.n	8010828 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80107f4:	79fa      	ldrb	r2, [r7, #7]
 80107f6:	4613      	mov	r3, r2
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	4413      	add	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	4a2e      	ldr	r2, [pc, #184]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 8010800:	4413      	add	r3, r2
 8010802:	3304      	adds	r3, #4
 8010804:	4619      	mov	r1, r3
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	f000 fb4c 	bl	8010ea4 <etharp_request>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d138      	bne.n	8010884 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010812:	79fa      	ldrb	r2, [r7, #7]
 8010814:	4928      	ldr	r1, [pc, #160]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 8010816:	4613      	mov	r3, r2
 8010818:	005b      	lsls	r3, r3, #1
 801081a:	4413      	add	r3, r2
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	440b      	add	r3, r1
 8010820:	3314      	adds	r3, #20
 8010822:	2203      	movs	r2, #3
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	e02d      	b.n	8010884 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010828:	79fa      	ldrb	r2, [r7, #7]
 801082a:	4923      	ldr	r1, [pc, #140]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 801082c:	4613      	mov	r3, r2
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	4413      	add	r3, r2
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	440b      	add	r3, r1
 8010836:	3312      	adds	r3, #18
 8010838:	881b      	ldrh	r3, [r3, #0]
 801083a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801083e:	d321      	bcc.n	8010884 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010840:	79fa      	ldrb	r2, [r7, #7]
 8010842:	4613      	mov	r3, r2
 8010844:	005b      	lsls	r3, r3, #1
 8010846:	4413      	add	r3, r2
 8010848:	00db      	lsls	r3, r3, #3
 801084a:	4a1b      	ldr	r2, [pc, #108]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 801084c:	4413      	add	r3, r2
 801084e:	1d19      	adds	r1, r3, #4
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	4613      	mov	r3, r2
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	4413      	add	r3, r2
 8010858:	00db      	lsls	r3, r3, #3
 801085a:	3308      	adds	r3, #8
 801085c:	4a16      	ldr	r2, [pc, #88]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 801085e:	4413      	add	r3, r2
 8010860:	3304      	adds	r3, #4
 8010862:	461a      	mov	r2, r3
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f000 fafb 	bl	8010e60 <etharp_request_dst>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d109      	bne.n	8010884 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010870:	79fa      	ldrb	r2, [r7, #7]
 8010872:	4911      	ldr	r1, [pc, #68]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 8010874:	4613      	mov	r3, r2
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	4413      	add	r3, r2
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	440b      	add	r3, r1
 801087e:	3314      	adds	r3, #20
 8010880:	2203      	movs	r2, #3
 8010882:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801088a:	79fa      	ldrb	r2, [r7, #7]
 801088c:	4613      	mov	r3, r2
 801088e:	005b      	lsls	r3, r3, #1
 8010890:	4413      	add	r3, r2
 8010892:	00db      	lsls	r3, r3, #3
 8010894:	3308      	adds	r3, #8
 8010896:	4a08      	ldr	r2, [pc, #32]	; (80108b8 <etharp_output_to_arp_index+0x124>)
 8010898:	4413      	add	r3, r2
 801089a:	1d1a      	adds	r2, r3, #4
 801089c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	4613      	mov	r3, r2
 80108a4:	460a      	mov	r2, r1
 80108a6:	68b9      	ldr	r1, [r7, #8]
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f001 fe33 	bl	8012514 <ethernet_output>
 80108ae:	4603      	mov	r3, r0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3710      	adds	r7, #16
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	20000290 	.word	0x20000290
 80108bc:	080180a8 	.word	0x080180a8
 80108c0:	08018218 	.word	0x08018218
 80108c4:	08018120 	.word	0x08018120

080108c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b08a      	sub	sp, #40	; 0x28
 80108cc:	af02      	add	r7, sp, #8
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d106      	bne.n	80108ec <etharp_output+0x24>
 80108de:	4b73      	ldr	r3, [pc, #460]	; (8010aac <etharp_output+0x1e4>)
 80108e0:	f240 321e 	movw	r2, #798	; 0x31e
 80108e4:	4972      	ldr	r1, [pc, #456]	; (8010ab0 <etharp_output+0x1e8>)
 80108e6:	4873      	ldr	r0, [pc, #460]	; (8010ab4 <etharp_output+0x1ec>)
 80108e8:	f001 ff98 	bl	801281c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d106      	bne.n	8010900 <etharp_output+0x38>
 80108f2:	4b6e      	ldr	r3, [pc, #440]	; (8010aac <etharp_output+0x1e4>)
 80108f4:	f240 321f 	movw	r2, #799	; 0x31f
 80108f8:	496f      	ldr	r1, [pc, #444]	; (8010ab8 <etharp_output+0x1f0>)
 80108fa:	486e      	ldr	r0, [pc, #440]	; (8010ab4 <etharp_output+0x1ec>)
 80108fc:	f001 ff8e 	bl	801281c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d106      	bne.n	8010914 <etharp_output+0x4c>
 8010906:	4b69      	ldr	r3, [pc, #420]	; (8010aac <etharp_output+0x1e4>)
 8010908:	f44f 7248 	mov.w	r2, #800	; 0x320
 801090c:	496b      	ldr	r1, [pc, #428]	; (8010abc <etharp_output+0x1f4>)
 801090e:	4869      	ldr	r0, [pc, #420]	; (8010ab4 <etharp_output+0x1ec>)
 8010910:	f001 ff84 	bl	801281c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	68f9      	ldr	r1, [r7, #12]
 801091a:	4618      	mov	r0, r3
 801091c:	f000 fef6 	bl	801170c <ip4_addr_isbroadcast_u32>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d002      	beq.n	801092c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010926:	4b66      	ldr	r3, [pc, #408]	; (8010ac0 <etharp_output+0x1f8>)
 8010928:	61fb      	str	r3, [r7, #28]
 801092a:	e0af      	b.n	8010a8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010934:	2be0      	cmp	r3, #224	; 0xe0
 8010936:	d118      	bne.n	801096a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010938:	2301      	movs	r3, #1
 801093a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801093c:	2300      	movs	r3, #0
 801093e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010940:	235e      	movs	r3, #94	; 0x5e
 8010942:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	3301      	adds	r3, #1
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801094e:	b2db      	uxtb	r3, r3
 8010950:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	3302      	adds	r3, #2
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	3303      	adds	r3, #3
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010962:	f107 0310 	add.w	r3, r7, #16
 8010966:	61fb      	str	r3, [r7, #28]
 8010968:	e090      	b.n	8010a8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	3304      	adds	r3, #4
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	405a      	eors	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	3308      	adds	r3, #8
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4013      	ands	r3, r2
 801097e:	2b00      	cmp	r3, #0
 8010980:	d012      	beq.n	80109a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010988:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801098c:	4293      	cmp	r3, r2
 801098e:	d00b      	beq.n	80109a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	330c      	adds	r3, #12
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d003      	beq.n	80109a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	330c      	adds	r3, #12
 801099e:	61bb      	str	r3, [r7, #24]
 80109a0:	e002      	b.n	80109a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80109a2:	f06f 0303 	mvn.w	r3, #3
 80109a6:	e07d      	b.n	8010aa4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109a8:	4b46      	ldr	r3, [pc, #280]	; (8010ac4 <etharp_output+0x1fc>)
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	4619      	mov	r1, r3
 80109ae:	4a46      	ldr	r2, [pc, #280]	; (8010ac8 <etharp_output+0x200>)
 80109b0:	460b      	mov	r3, r1
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	440b      	add	r3, r1
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	4413      	add	r3, r2
 80109ba:	3314      	adds	r3, #20
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d925      	bls.n	8010a0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80109c2:	4b40      	ldr	r3, [pc, #256]	; (8010ac4 <etharp_output+0x1fc>)
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	4619      	mov	r1, r3
 80109c8:	4a3f      	ldr	r2, [pc, #252]	; (8010ac8 <etharp_output+0x200>)
 80109ca:	460b      	mov	r3, r1
 80109cc:	005b      	lsls	r3, r3, #1
 80109ce:	440b      	add	r3, r1
 80109d0:	00db      	lsls	r3, r3, #3
 80109d2:	4413      	add	r3, r2
 80109d4:	3308      	adds	r3, #8
 80109d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d117      	bne.n	8010a0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80109de:	69bb      	ldr	r3, [r7, #24]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	4b38      	ldr	r3, [pc, #224]	; (8010ac4 <etharp_output+0x1fc>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	4618      	mov	r0, r3
 80109e8:	4937      	ldr	r1, [pc, #220]	; (8010ac8 <etharp_output+0x200>)
 80109ea:	4603      	mov	r3, r0
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	4403      	add	r3, r0
 80109f0:	00db      	lsls	r3, r3, #3
 80109f2:	440b      	add	r3, r1
 80109f4:	3304      	adds	r3, #4
 80109f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d108      	bne.n	8010a0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80109fc:	4b31      	ldr	r3, [pc, #196]	; (8010ac4 <etharp_output+0x1fc>)
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	461a      	mov	r2, r3
 8010a02:	68b9      	ldr	r1, [r7, #8]
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f7ff fec5 	bl	8010794 <etharp_output_to_arp_index>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	e04a      	b.n	8010aa4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a0e:	2300      	movs	r3, #0
 8010a10:	75fb      	strb	r3, [r7, #23]
 8010a12:	e031      	b.n	8010a78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a14:	7dfa      	ldrb	r2, [r7, #23]
 8010a16:	492c      	ldr	r1, [pc, #176]	; (8010ac8 <etharp_output+0x200>)
 8010a18:	4613      	mov	r3, r2
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	4413      	add	r3, r2
 8010a1e:	00db      	lsls	r3, r3, #3
 8010a20:	440b      	add	r3, r1
 8010a22:	3314      	adds	r3, #20
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d923      	bls.n	8010a72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010a2a:	7dfa      	ldrb	r2, [r7, #23]
 8010a2c:	4926      	ldr	r1, [pc, #152]	; (8010ac8 <etharp_output+0x200>)
 8010a2e:	4613      	mov	r3, r2
 8010a30:	005b      	lsls	r3, r3, #1
 8010a32:	4413      	add	r3, r2
 8010a34:	00db      	lsls	r3, r3, #3
 8010a36:	440b      	add	r3, r1
 8010a38:	3308      	adds	r3, #8
 8010a3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d117      	bne.n	8010a72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	6819      	ldr	r1, [r3, #0]
 8010a46:	7dfa      	ldrb	r2, [r7, #23]
 8010a48:	481f      	ldr	r0, [pc, #124]	; (8010ac8 <etharp_output+0x200>)
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	005b      	lsls	r3, r3, #1
 8010a4e:	4413      	add	r3, r2
 8010a50:	00db      	lsls	r3, r3, #3
 8010a52:	4403      	add	r3, r0
 8010a54:	3304      	adds	r3, #4
 8010a56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010a58:	4299      	cmp	r1, r3
 8010a5a:	d10a      	bne.n	8010a72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010a5c:	4a19      	ldr	r2, [pc, #100]	; (8010ac4 <etharp_output+0x1fc>)
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
 8010a60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010a62:	7dfb      	ldrb	r3, [r7, #23]
 8010a64:	461a      	mov	r2, r3
 8010a66:	68b9      	ldr	r1, [r7, #8]
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f7ff fe93 	bl	8010794 <etharp_output_to_arp_index>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	e018      	b.n	8010aa4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
 8010a74:	3301      	adds	r3, #1
 8010a76:	75fb      	strb	r3, [r7, #23]
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	2b09      	cmp	r3, #9
 8010a7c:	d9ca      	bls.n	8010a14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010a7e:	68ba      	ldr	r2, [r7, #8]
 8010a80:	69b9      	ldr	r1, [r7, #24]
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 f822 	bl	8010acc <etharp_query>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	e00b      	b.n	8010aa4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8010a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	68b9      	ldr	r1, [r7, #8]
 8010a9c:	68f8      	ldr	r0, [r7, #12]
 8010a9e:	f001 fd39 	bl	8012514 <ethernet_output>
 8010aa2:	4603      	mov	r3, r0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3720      	adds	r7, #32
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}
 8010aac:	080180a8 	.word	0x080180a8
 8010ab0:	080181f8 	.word	0x080181f8
 8010ab4:	08018120 	.word	0x08018120
 8010ab8:	08018248 	.word	0x08018248
 8010abc:	080181e8 	.word	0x080181e8
 8010ac0:	08018870 	.word	0x08018870
 8010ac4:	20000380 	.word	0x20000380
 8010ac8:	20000290 	.word	0x20000290

08010acc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b08c      	sub	sp, #48	; 0x30
 8010ad0:	af02      	add	r7, sp, #8
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	3322      	adds	r3, #34	; 0x22
 8010adc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010ade:	23ff      	movs	r3, #255	; 0xff
 8010ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68f9      	ldr	r1, [r7, #12]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fe0c 	bl	801170c <ip4_addr_isbroadcast_u32>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10c      	bne.n	8010b14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b02:	2be0      	cmp	r3, #224	; 0xe0
 8010b04:	d006      	beq.n	8010b14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d003      	beq.n	8010b14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d102      	bne.n	8010b1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b14:	f06f 030f 	mvn.w	r3, #15
 8010b18:	e102      	b.n	8010d20 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010b1a:	68fa      	ldr	r2, [r7, #12]
 8010b1c:	2101      	movs	r1, #1
 8010b1e:	68b8      	ldr	r0, [r7, #8]
 8010b20:	f7ff fb60 	bl	80101e4 <etharp_find_entry>
 8010b24:	4603      	mov	r3, r0
 8010b26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	da02      	bge.n	8010b36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010b30:	8a7b      	ldrh	r3, [r7, #18]
 8010b32:	b25b      	sxtb	r3, r3
 8010b34:	e0f4      	b.n	8010d20 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010b36:	8a7b      	ldrh	r3, [r7, #18]
 8010b38:	2b7e      	cmp	r3, #126	; 0x7e
 8010b3a:	d906      	bls.n	8010b4a <etharp_query+0x7e>
 8010b3c:	4b7a      	ldr	r3, [pc, #488]	; (8010d28 <etharp_query+0x25c>)
 8010b3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010b42:	497a      	ldr	r1, [pc, #488]	; (8010d2c <etharp_query+0x260>)
 8010b44:	487a      	ldr	r0, [pc, #488]	; (8010d30 <etharp_query+0x264>)
 8010b46:	f001 fe69 	bl	801281c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010b4a:	8a7b      	ldrh	r3, [r7, #18]
 8010b4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010b4e:	7c7a      	ldrb	r2, [r7, #17]
 8010b50:	4978      	ldr	r1, [pc, #480]	; (8010d34 <etharp_query+0x268>)
 8010b52:	4613      	mov	r3, r2
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	4413      	add	r3, r2
 8010b58:	00db      	lsls	r3, r3, #3
 8010b5a:	440b      	add	r3, r1
 8010b5c:	3314      	adds	r3, #20
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d115      	bne.n	8010b90 <etharp_query+0xc4>
    is_new_entry = 1;
 8010b64:	2301      	movs	r3, #1
 8010b66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010b68:	7c7a      	ldrb	r2, [r7, #17]
 8010b6a:	4972      	ldr	r1, [pc, #456]	; (8010d34 <etharp_query+0x268>)
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	005b      	lsls	r3, r3, #1
 8010b70:	4413      	add	r3, r2
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	440b      	add	r3, r1
 8010b76:	3314      	adds	r3, #20
 8010b78:	2201      	movs	r2, #1
 8010b7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010b7c:	7c7a      	ldrb	r2, [r7, #17]
 8010b7e:	496d      	ldr	r1, [pc, #436]	; (8010d34 <etharp_query+0x268>)
 8010b80:	4613      	mov	r3, r2
 8010b82:	005b      	lsls	r3, r3, #1
 8010b84:	4413      	add	r3, r2
 8010b86:	00db      	lsls	r3, r3, #3
 8010b88:	440b      	add	r3, r1
 8010b8a:	3308      	adds	r3, #8
 8010b8c:	68fa      	ldr	r2, [r7, #12]
 8010b8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010b90:	7c7a      	ldrb	r2, [r7, #17]
 8010b92:	4968      	ldr	r1, [pc, #416]	; (8010d34 <etharp_query+0x268>)
 8010b94:	4613      	mov	r3, r2
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	440b      	add	r3, r1
 8010b9e:	3314      	adds	r3, #20
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d011      	beq.n	8010bca <etharp_query+0xfe>
 8010ba6:	7c7a      	ldrb	r2, [r7, #17]
 8010ba8:	4962      	ldr	r1, [pc, #392]	; (8010d34 <etharp_query+0x268>)
 8010baa:	4613      	mov	r3, r2
 8010bac:	005b      	lsls	r3, r3, #1
 8010bae:	4413      	add	r3, r2
 8010bb0:	00db      	lsls	r3, r3, #3
 8010bb2:	440b      	add	r3, r1
 8010bb4:	3314      	adds	r3, #20
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d806      	bhi.n	8010bca <etharp_query+0xfe>
 8010bbc:	4b5a      	ldr	r3, [pc, #360]	; (8010d28 <etharp_query+0x25c>)
 8010bbe:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010bc2:	495d      	ldr	r1, [pc, #372]	; (8010d38 <etharp_query+0x26c>)
 8010bc4:	485a      	ldr	r0, [pc, #360]	; (8010d30 <etharp_query+0x264>)
 8010bc6:	f001 fe29 	bl	801281c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010bca:	6a3b      	ldr	r3, [r7, #32]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d102      	bne.n	8010bd6 <etharp_query+0x10a>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d10c      	bne.n	8010bf0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f000 f963 	bl	8010ea4 <etharp_request>
 8010bde:	4603      	mov	r3, r0
 8010be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d102      	bne.n	8010bf0 <etharp_query+0x124>
      return result;
 8010bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010bee:	e097      	b.n	8010d20 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <etharp_query+0x138>
 8010bf6:	4b4c      	ldr	r3, [pc, #304]	; (8010d28 <etharp_query+0x25c>)
 8010bf8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010bfc:	494f      	ldr	r1, [pc, #316]	; (8010d3c <etharp_query+0x270>)
 8010bfe:	484c      	ldr	r0, [pc, #304]	; (8010d30 <etharp_query+0x264>)
 8010c00:	f001 fe0c 	bl	801281c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010c04:	7c7a      	ldrb	r2, [r7, #17]
 8010c06:	494b      	ldr	r1, [pc, #300]	; (8010d34 <etharp_query+0x268>)
 8010c08:	4613      	mov	r3, r2
 8010c0a:	005b      	lsls	r3, r3, #1
 8010c0c:	4413      	add	r3, r2
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	440b      	add	r3, r1
 8010c12:	3314      	adds	r3, #20
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d918      	bls.n	8010c4c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010c1a:	4a49      	ldr	r2, [pc, #292]	; (8010d40 <etharp_query+0x274>)
 8010c1c:	7c7b      	ldrb	r3, [r7, #17]
 8010c1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010c20:	7c7a      	ldrb	r2, [r7, #17]
 8010c22:	4613      	mov	r3, r2
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	4413      	add	r3, r2
 8010c28:	00db      	lsls	r3, r3, #3
 8010c2a:	3308      	adds	r3, #8
 8010c2c:	4a41      	ldr	r2, [pc, #260]	; (8010d34 <etharp_query+0x268>)
 8010c2e:	4413      	add	r3, r2
 8010c30:	1d1a      	adds	r2, r3, #4
 8010c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	4613      	mov	r3, r2
 8010c3a:	697a      	ldr	r2, [r7, #20]
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f001 fc68 	bl	8012514 <ethernet_output>
 8010c44:	4603      	mov	r3, r0
 8010c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c4a:	e067      	b.n	8010d1c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010c4c:	7c7a      	ldrb	r2, [r7, #17]
 8010c4e:	4939      	ldr	r1, [pc, #228]	; (8010d34 <etharp_query+0x268>)
 8010c50:	4613      	mov	r3, r2
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	4413      	add	r3, r2
 8010c56:	00db      	lsls	r3, r3, #3
 8010c58:	440b      	add	r3, r1
 8010c5a:	3314      	adds	r3, #20
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d15c      	bne.n	8010d1c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010c62:	2300      	movs	r3, #0
 8010c64:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010c6a:	e01c      	b.n	8010ca6 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	895a      	ldrh	r2, [r3, #10]
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	891b      	ldrh	r3, [r3, #8]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d10a      	bne.n	8010c8e <etharp_query+0x1c2>
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d006      	beq.n	8010c8e <etharp_query+0x1c2>
 8010c80:	4b29      	ldr	r3, [pc, #164]	; (8010d28 <etharp_query+0x25c>)
 8010c82:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010c86:	492f      	ldr	r1, [pc, #188]	; (8010d44 <etharp_query+0x278>)
 8010c88:	4829      	ldr	r0, [pc, #164]	; (8010d30 <etharp_query+0x264>)
 8010c8a:	f001 fdc7 	bl	801281c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010c8e:	69fb      	ldr	r3, [r7, #28]
 8010c90:	7b1b      	ldrb	r3, [r3, #12]
 8010c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d002      	beq.n	8010ca0 <etharp_query+0x1d4>
        copy_needed = 1;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	61bb      	str	r3, [r7, #24]
        break;
 8010c9e:	e005      	b.n	8010cac <etharp_query+0x1e0>
      }
      p = p->next;
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1df      	bne.n	8010c6c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8010cac:	69bb      	ldr	r3, [r7, #24]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d007      	beq.n	8010cc2 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010cb8:	200e      	movs	r0, #14
 8010cba:	f7f8 fe2f 	bl	800991c <pbuf_clone>
 8010cbe:	61f8      	str	r0, [r7, #28]
 8010cc0:	e004      	b.n	8010ccc <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010cc6:	69f8      	ldr	r0, [r7, #28]
 8010cc8:	f7f8 fc5c 	bl	8009584 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d021      	beq.n	8010d16 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010cd2:	7c7a      	ldrb	r2, [r7, #17]
 8010cd4:	4917      	ldr	r1, [pc, #92]	; (8010d34 <etharp_query+0x268>)
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	005b      	lsls	r3, r3, #1
 8010cda:	4413      	add	r3, r2
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	440b      	add	r3, r1
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00a      	beq.n	8010cfc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010ce6:	7c7a      	ldrb	r2, [r7, #17]
 8010ce8:	4912      	ldr	r1, [pc, #72]	; (8010d34 <etharp_query+0x268>)
 8010cea:	4613      	mov	r3, r2
 8010cec:	005b      	lsls	r3, r3, #1
 8010cee:	4413      	add	r3, r2
 8010cf0:	00db      	lsls	r3, r3, #3
 8010cf2:	440b      	add	r3, r1
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7f8 fba4 	bl	8009444 <pbuf_free>
      }
      arp_table[i].q = p;
 8010cfc:	7c7a      	ldrb	r2, [r7, #17]
 8010cfe:	490d      	ldr	r1, [pc, #52]	; (8010d34 <etharp_query+0x268>)
 8010d00:	4613      	mov	r3, r2
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	4413      	add	r3, r2
 8010d06:	00db      	lsls	r3, r3, #3
 8010d08:	440b      	add	r3, r1
 8010d0a:	69fa      	ldr	r2, [r7, #28]
 8010d0c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d14:	e002      	b.n	8010d1c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010d16:	23ff      	movs	r3, #255	; 0xff
 8010d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010d1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3728      	adds	r7, #40	; 0x28
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	080180a8 	.word	0x080180a8
 8010d2c:	08018254 	.word	0x08018254
 8010d30:	08018120 	.word	0x08018120
 8010d34:	20000290 	.word	0x20000290
 8010d38:	08018264 	.word	0x08018264
 8010d3c:	08018248 	.word	0x08018248
 8010d40:	20000380 	.word	0x20000380
 8010d44:	0801828c 	.word	0x0801828c

08010d48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b08a      	sub	sp, #40	; 0x28
 8010d4c:	af02      	add	r7, sp, #8
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010d56:	2300      	movs	r3, #0
 8010d58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d106      	bne.n	8010d6e <etharp_raw+0x26>
 8010d60:	4b3a      	ldr	r3, [pc, #232]	; (8010e4c <etharp_raw+0x104>)
 8010d62:	f240 4257 	movw	r2, #1111	; 0x457
 8010d66:	493a      	ldr	r1, [pc, #232]	; (8010e50 <etharp_raw+0x108>)
 8010d68:	483a      	ldr	r0, [pc, #232]	; (8010e54 <etharp_raw+0x10c>)
 8010d6a:	f001 fd57 	bl	801281c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d72:	211c      	movs	r1, #28
 8010d74:	200e      	movs	r0, #14
 8010d76:	f7f8 f885 	bl	8008e84 <pbuf_alloc>
 8010d7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d102      	bne.n	8010d88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010d82:	f04f 33ff 	mov.w	r3, #4294967295
 8010d86:	e05d      	b.n	8010e44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	895b      	ldrh	r3, [r3, #10]
 8010d8c:	2b1b      	cmp	r3, #27
 8010d8e:	d806      	bhi.n	8010d9e <etharp_raw+0x56>
 8010d90:	4b2e      	ldr	r3, [pc, #184]	; (8010e4c <etharp_raw+0x104>)
 8010d92:	f240 4263 	movw	r2, #1123	; 0x463
 8010d96:	4930      	ldr	r1, [pc, #192]	; (8010e58 <etharp_raw+0x110>)
 8010d98:	482e      	ldr	r0, [pc, #184]	; (8010e54 <etharp_raw+0x10c>)
 8010d9a:	f001 fd3f 	bl	801281c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010da4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7f7 f8b1 	bl	8007f0e <lwip_htons>
 8010dac:	4603      	mov	r3, r0
 8010dae:	461a      	mov	r2, r3
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dba:	2b06      	cmp	r3, #6
 8010dbc:	d006      	beq.n	8010dcc <etharp_raw+0x84>
 8010dbe:	4b23      	ldr	r3, [pc, #140]	; (8010e4c <etharp_raw+0x104>)
 8010dc0:	f240 426a 	movw	r2, #1130	; 0x46a
 8010dc4:	4925      	ldr	r1, [pc, #148]	; (8010e5c <etharp_raw+0x114>)
 8010dc6:	4823      	ldr	r0, [pc, #140]	; (8010e54 <etharp_raw+0x10c>)
 8010dc8:	f001 fd28 	bl	801281c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	3308      	adds	r3, #8
 8010dd0:	2206      	movs	r2, #6
 8010dd2:	6839      	ldr	r1, [r7, #0]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f001 fc4c 	bl	8012672 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	3312      	adds	r3, #18
 8010dde:	2206      	movs	r2, #6
 8010de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010de2:	4618      	mov	r0, r3
 8010de4:	f001 fc45 	bl	8012672 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	330e      	adds	r3, #14
 8010dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dee:	6812      	ldr	r2, [r2, #0]
 8010df0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	3318      	adds	r3, #24
 8010df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010df8:	6812      	ldr	r2, [r2, #0]
 8010dfa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	701a      	strb	r2, [r3, #0]
 8010e02:	2200      	movs	r2, #0
 8010e04:	f042 0201 	orr.w	r2, r2, #1
 8010e08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f042 0208 	orr.w	r2, r2, #8
 8010e12:	709a      	strb	r2, [r3, #2]
 8010e14:	2200      	movs	r2, #0
 8010e16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2206      	movs	r2, #6
 8010e1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	2204      	movs	r2, #4
 8010e22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010e24:	f640 0306 	movw	r3, #2054	; 0x806
 8010e28:	9300      	str	r3, [sp, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	68ba      	ldr	r2, [r7, #8]
 8010e2e:	69b9      	ldr	r1, [r7, #24]
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	f001 fb6f 	bl	8012514 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010e36:	69b8      	ldr	r0, [r7, #24]
 8010e38:	f7f8 fb04 	bl	8009444 <pbuf_free>
  p = NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010e40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	080180a8 	.word	0x080180a8
 8010e50:	080181f8 	.word	0x080181f8
 8010e54:	08018120 	.word	0x08018120
 8010e58:	080182a8 	.word	0x080182a8
 8010e5c:	080182dc 	.word	0x080182dc

08010e60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b088      	sub	sp, #32
 8010e64:	af04      	add	r7, sp, #16
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	9203      	str	r2, [sp, #12]
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	9202      	str	r2, [sp, #8]
 8010e84:	4a06      	ldr	r2, [pc, #24]	; (8010ea0 <etharp_request_dst+0x40>)
 8010e86:	9201      	str	r2, [sp, #4]
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	f7ff ff5a 	bl	8010d48 <etharp_raw>
 8010e94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3710      	adds	r7, #16
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	08018878 	.word	0x08018878

08010ea4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
 8010eac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010eae:	4a05      	ldr	r2, [pc, #20]	; (8010ec4 <etharp_request+0x20>)
 8010eb0:	6839      	ldr	r1, [r7, #0]
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7ff ffd4 	bl	8010e60 <etharp_request_dst>
 8010eb8:	4603      	mov	r3, r0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	08018870 	.word	0x08018870

08010ec8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b08e      	sub	sp, #56	; 0x38
 8010ecc:	af04      	add	r7, sp, #16
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010ed2:	4b79      	ldr	r3, [pc, #484]	; (80110b8 <icmp_input+0x1f0>)
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	f003 030f 	and.w	r3, r3, #15
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010eea:	2b13      	cmp	r3, #19
 8010eec:	f240 80cd 	bls.w	801108a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	895b      	ldrh	r3, [r3, #10]
 8010ef4:	2b03      	cmp	r3, #3
 8010ef6:	f240 80ca 	bls.w	801108e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010f04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 80b7 	beq.w	801107c <icmp_input+0x1b4>
 8010f0e:	2b08      	cmp	r3, #8
 8010f10:	f040 80b7 	bne.w	8011082 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010f14:	4b69      	ldr	r3, [pc, #420]	; (80110bc <icmp_input+0x1f4>)
 8010f16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f18:	4b67      	ldr	r3, [pc, #412]	; (80110b8 <icmp_input+0x1f0>)
 8010f1a:	695b      	ldr	r3, [r3, #20]
 8010f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f20:	2be0      	cmp	r3, #224	; 0xe0
 8010f22:	f000 80bb 	beq.w	801109c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010f26:	4b64      	ldr	r3, [pc, #400]	; (80110b8 <icmp_input+0x1f0>)
 8010f28:	695a      	ldr	r2, [r3, #20]
 8010f2a:	4b63      	ldr	r3, [pc, #396]	; (80110b8 <icmp_input+0x1f0>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4619      	mov	r1, r3
 8010f30:	4610      	mov	r0, r2
 8010f32:	f000 fbeb 	bl	801170c <ip4_addr_isbroadcast_u32>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f040 80b1 	bne.w	80110a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	891b      	ldrh	r3, [r3, #8]
 8010f42:	2b07      	cmp	r3, #7
 8010f44:	f240 80a5 	bls.w	8011092 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f4a:	330e      	adds	r3, #14
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f7f8 f9e2 	bl	8009318 <pbuf_add_header>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d04b      	beq.n	8010ff2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	891a      	ldrh	r2, [r3, #8]
 8010f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f60:	4413      	add	r3, r2
 8010f62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	891b      	ldrh	r3, [r3, #8]
 8010f68:	8b7a      	ldrh	r2, [r7, #26]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	f0c0 809a 	bcc.w	80110a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010f70:	8b7b      	ldrh	r3, [r7, #26]
 8010f72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f76:	4619      	mov	r1, r3
 8010f78:	200e      	movs	r0, #14
 8010f7a:	f7f7 ff83 	bl	8008e84 <pbuf_alloc>
 8010f7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f000 8090 	beq.w	80110a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	895b      	ldrh	r3, [r3, #10]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f90:	3308      	adds	r3, #8
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d203      	bcs.n	8010f9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010f96:	6978      	ldr	r0, [r7, #20]
 8010f98:	f7f8 fa54 	bl	8009444 <pbuf_free>
          goto icmperr;
 8010f9c:	e085      	b.n	80110aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f001 fb63 	bl	8012672 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fae:	4619      	mov	r1, r3
 8010fb0:	6978      	ldr	r0, [r7, #20]
 8010fb2:	f7f8 f9c1 	bl	8009338 <pbuf_remove_header>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d009      	beq.n	8010fd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010fbc:	4b40      	ldr	r3, [pc, #256]	; (80110c0 <icmp_input+0x1f8>)
 8010fbe:	22b6      	movs	r2, #182	; 0xb6
 8010fc0:	4940      	ldr	r1, [pc, #256]	; (80110c4 <icmp_input+0x1fc>)
 8010fc2:	4841      	ldr	r0, [pc, #260]	; (80110c8 <icmp_input+0x200>)
 8010fc4:	f001 fc2a 	bl	801281c <iprintf>
          pbuf_free(r);
 8010fc8:	6978      	ldr	r0, [r7, #20]
 8010fca:	f7f8 fa3b 	bl	8009444 <pbuf_free>
          goto icmperr;
 8010fce:	e06c      	b.n	80110aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010fd0:	6879      	ldr	r1, [r7, #4]
 8010fd2:	6978      	ldr	r0, [r7, #20]
 8010fd4:	f7f8 fb5e 	bl	8009694 <pbuf_copy>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d003      	beq.n	8010fe6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010fde:	6978      	ldr	r0, [r7, #20]
 8010fe0:	f7f8 fa30 	bl	8009444 <pbuf_free>
          goto icmperr;
 8010fe4:	e061      	b.n	80110aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7f8 fa2c 	bl	8009444 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	607b      	str	r3, [r7, #4]
 8010ff0:	e00f      	b.n	8011012 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ff4:	330e      	adds	r3, #14
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7f8 f99d 	bl	8009338 <pbuf_remove_header>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d006      	beq.n	8011012 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011004:	4b2e      	ldr	r3, [pc, #184]	; (80110c0 <icmp_input+0x1f8>)
 8011006:	22c7      	movs	r2, #199	; 0xc7
 8011008:	4930      	ldr	r1, [pc, #192]	; (80110cc <icmp_input+0x204>)
 801100a:	482f      	ldr	r0, [pc, #188]	; (80110c8 <icmp_input+0x200>)
 801100c:	f001 fc06 	bl	801281c <iprintf>
          goto icmperr;
 8011010:	e04b      	b.n	80110aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801101a:	4619      	mov	r1, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f7f8 f97b 	bl	8009318 <pbuf_add_header>
 8011022:	4603      	mov	r3, r0
 8011024:	2b00      	cmp	r3, #0
 8011026:	d12b      	bne.n	8011080 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011036:	4b20      	ldr	r3, [pc, #128]	; (80110b8 <icmp_input+0x1f0>)
 8011038:	691a      	ldr	r2, [r3, #16]
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	2200      	movs	r2, #0
 8011042:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	2200      	movs	r2, #0
 8011048:	709a      	strb	r2, [r3, #2]
 801104a:	2200      	movs	r2, #0
 801104c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	22ff      	movs	r2, #255	; 0xff
 8011052:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2200      	movs	r2, #0
 8011058:	729a      	strb	r2, [r3, #10]
 801105a:	2200      	movs	r2, #0
 801105c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	9302      	str	r3, [sp, #8]
 8011062:	2301      	movs	r3, #1
 8011064:	9301      	str	r3, [sp, #4]
 8011066:	2300      	movs	r3, #0
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	23ff      	movs	r3, #255	; 0xff
 801106c:	2200      	movs	r2, #0
 801106e:	69f9      	ldr	r1, [r7, #28]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 fa73 	bl	801155c <ip4_output_if>
 8011076:	4603      	mov	r3, r0
 8011078:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801107a:	e001      	b.n	8011080 <icmp_input+0x1b8>
      break;
 801107c:	bf00      	nop
 801107e:	e000      	b.n	8011082 <icmp_input+0x1ba>
      break;
 8011080:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f7f8 f9de 	bl	8009444 <pbuf_free>
  return;
 8011088:	e013      	b.n	80110b2 <icmp_input+0x1ea>
    goto lenerr;
 801108a:	bf00      	nop
 801108c:	e002      	b.n	8011094 <icmp_input+0x1cc>
    goto lenerr;
 801108e:	bf00      	nop
 8011090:	e000      	b.n	8011094 <icmp_input+0x1cc>
        goto lenerr;
 8011092:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7f8 f9d5 	bl	8009444 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801109a:	e00a      	b.n	80110b2 <icmp_input+0x1ea>
        goto icmperr;
 801109c:	bf00      	nop
 801109e:	e004      	b.n	80110aa <icmp_input+0x1e2>
        goto icmperr;
 80110a0:	bf00      	nop
 80110a2:	e002      	b.n	80110aa <icmp_input+0x1e2>
          goto icmperr;
 80110a4:	bf00      	nop
 80110a6:	e000      	b.n	80110aa <icmp_input+0x1e2>
          goto icmperr;
 80110a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7f8 f9ca 	bl	8009444 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80110b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80110b2:	3728      	adds	r7, #40	; 0x28
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	20003b34 	.word	0x20003b34
 80110bc:	20003b48 	.word	0x20003b48
 80110c0:	08018320 	.word	0x08018320
 80110c4:	08018358 	.word	0x08018358
 80110c8:	08018390 	.word	0x08018390
 80110cc:	080183b8 	.word	0x080183b8

080110d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	460b      	mov	r3, r1
 80110da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80110dc:	78fb      	ldrb	r3, [r7, #3]
 80110de:	461a      	mov	r2, r3
 80110e0:	2103      	movs	r1, #3
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 f814 	bl	8011110 <icmp_send_response>
}
 80110e8:	bf00      	nop
 80110ea:	3708      	adds	r7, #8
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	460b      	mov	r3, r1
 80110fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80110fc:	78fb      	ldrb	r3, [r7, #3]
 80110fe:	461a      	mov	r2, r3
 8011100:	210b      	movs	r1, #11
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f000 f804 	bl	8011110 <icmp_send_response>
}
 8011108:	bf00      	nop
 801110a:	3708      	adds	r7, #8
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b08c      	sub	sp, #48	; 0x30
 8011114:	af04      	add	r7, sp, #16
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	460b      	mov	r3, r1
 801111a:	70fb      	strb	r3, [r7, #3]
 801111c:	4613      	mov	r3, r2
 801111e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011120:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011124:	2124      	movs	r1, #36	; 0x24
 8011126:	2022      	movs	r0, #34	; 0x22
 8011128:	f7f7 feac 	bl	8008e84 <pbuf_alloc>
 801112c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d04c      	beq.n	80111ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	895b      	ldrh	r3, [r3, #10]
 8011138:	2b23      	cmp	r3, #35	; 0x23
 801113a:	d806      	bhi.n	801114a <icmp_send_response+0x3a>
 801113c:	4b26      	ldr	r3, [pc, #152]	; (80111d8 <icmp_send_response+0xc8>)
 801113e:	f240 1269 	movw	r2, #361	; 0x169
 8011142:	4926      	ldr	r1, [pc, #152]	; (80111dc <icmp_send_response+0xcc>)
 8011144:	4826      	ldr	r0, [pc, #152]	; (80111e0 <icmp_send_response+0xd0>)
 8011146:	f001 fb69 	bl	801281c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	78fa      	ldrb	r2, [r7, #3]
 801115a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	78ba      	ldrb	r2, [r7, #2]
 8011160:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	2200      	movs	r2, #0
 8011166:	711a      	strb	r2, [r3, #4]
 8011168:	2200      	movs	r2, #0
 801116a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	2200      	movs	r2, #0
 8011170:	719a      	strb	r2, [r3, #6]
 8011172:	2200      	movs	r2, #0
 8011174:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	f103 0008 	add.w	r0, r3, #8
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	221c      	movs	r2, #28
 8011184:	4619      	mov	r1, r3
 8011186:	f001 fa74 	bl	8012672 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011190:	f107 030c 	add.w	r3, r7, #12
 8011194:	4618      	mov	r0, r3
 8011196:	f000 f825 	bl	80111e4 <ip4_route>
 801119a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d011      	beq.n	80111c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2200      	movs	r2, #0
 80111a6:	709a      	strb	r2, [r3, #2]
 80111a8:	2200      	movs	r2, #0
 80111aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80111ac:	f107 020c 	add.w	r2, r7, #12
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	9302      	str	r3, [sp, #8]
 80111b4:	2301      	movs	r3, #1
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	2300      	movs	r3, #0
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	23ff      	movs	r3, #255	; 0xff
 80111be:	2100      	movs	r1, #0
 80111c0:	69f8      	ldr	r0, [r7, #28]
 80111c2:	f000 f9cb 	bl	801155c <ip4_output_if>
  }
  pbuf_free(q);
 80111c6:	69f8      	ldr	r0, [r7, #28]
 80111c8:	f7f8 f93c 	bl	8009444 <pbuf_free>
 80111cc:	e000      	b.n	80111d0 <icmp_send_response+0xc0>
    return;
 80111ce:	bf00      	nop
}
 80111d0:	3720      	adds	r7, #32
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	08018320 	.word	0x08018320
 80111dc:	080183ec 	.word	0x080183ec
 80111e0:	08018390 	.word	0x08018390

080111e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b085      	sub	sp, #20
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80111ec:	4b33      	ldr	r3, [pc, #204]	; (80112bc <ip4_route+0xd8>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	60fb      	str	r3, [r7, #12]
 80111f2:	e036      	b.n	8011262 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80111fa:	f003 0301 	and.w	r3, r3, #1
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	2b00      	cmp	r3, #0
 8011202:	d02b      	beq.n	801125c <ip4_route+0x78>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801120a:	089b      	lsrs	r3, r3, #2
 801120c:	f003 0301 	and.w	r3, r3, #1
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d022      	beq.n	801125c <ip4_route+0x78>
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	3304      	adds	r3, #4
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d01d      	beq.n	801125c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	3304      	adds	r3, #4
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	405a      	eors	r2, r3
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3308      	adds	r3, #8
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	4013      	ands	r3, r2
 8011234:	2b00      	cmp	r3, #0
 8011236:	d101      	bne.n	801123c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	e038      	b.n	80112ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011242:	f003 0302 	and.w	r3, r3, #2
 8011246:	2b00      	cmp	r3, #0
 8011248:	d108      	bne.n	801125c <ip4_route+0x78>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	330c      	adds	r3, #12
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	429a      	cmp	r2, r3
 8011256:	d101      	bne.n	801125c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	e028      	b.n	80112ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	60fb      	str	r3, [r7, #12]
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d1c5      	bne.n	80111f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011268:	4b15      	ldr	r3, [pc, #84]	; (80112c0 <ip4_route+0xdc>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d01a      	beq.n	80112a6 <ip4_route+0xc2>
 8011270:	4b13      	ldr	r3, [pc, #76]	; (80112c0 <ip4_route+0xdc>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011278:	f003 0301 	and.w	r3, r3, #1
 801127c:	2b00      	cmp	r3, #0
 801127e:	d012      	beq.n	80112a6 <ip4_route+0xc2>
 8011280:	4b0f      	ldr	r3, [pc, #60]	; (80112c0 <ip4_route+0xdc>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011288:	f003 0304 	and.w	r3, r3, #4
 801128c:	2b00      	cmp	r3, #0
 801128e:	d00a      	beq.n	80112a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011290:	4b0b      	ldr	r3, [pc, #44]	; (80112c0 <ip4_route+0xdc>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3304      	adds	r3, #4
 8011296:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011298:	2b00      	cmp	r3, #0
 801129a:	d004      	beq.n	80112a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	2b7f      	cmp	r3, #127	; 0x7f
 80112a4:	d101      	bne.n	80112aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80112a6:	2300      	movs	r3, #0
 80112a8:	e001      	b.n	80112ae <ip4_route+0xca>
  }

  return netif_default;
 80112aa:	4b05      	ldr	r3, [pc, #20]	; (80112c0 <ip4_route+0xdc>)
 80112ac:	681b      	ldr	r3, [r3, #0]
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3714      	adds	r7, #20
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	20007068 	.word	0x20007068
 80112c0:	2000706c 	.word	0x2000706c

080112c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80112d2:	f003 0301 	and.w	r3, r3, #1
 80112d6:	b2db      	uxtb	r3, r3
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d016      	beq.n	801130a <ip4_input_accept+0x46>
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	3304      	adds	r3, #4
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d011      	beq.n	801130a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80112e6:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <ip4_input_accept+0x50>)
 80112e8:	695a      	ldr	r2, [r3, #20]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3304      	adds	r3, #4
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d008      	beq.n	8011306 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80112f4:	4b07      	ldr	r3, [pc, #28]	; (8011314 <ip4_input_accept+0x50>)
 80112f6:	695b      	ldr	r3, [r3, #20]
 80112f8:	6879      	ldr	r1, [r7, #4]
 80112fa:	4618      	mov	r0, r3
 80112fc:	f000 fa06 	bl	801170c <ip4_addr_isbroadcast_u32>
 8011300:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011306:	2301      	movs	r3, #1
 8011308:	e000      	b.n	801130c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	20003b34 	.word	0x20003b34

08011318 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	091b      	lsrs	r3, r3, #4
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b04      	cmp	r3, #4
 8011332:	d004      	beq.n	801133e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f7f8 f885 	bl	8009444 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801133a:	2300      	movs	r3, #0
 801133c:	e105      	b.n	801154a <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	f003 030f 	and.w	r3, r3, #15
 8011346:	b2db      	uxtb	r3, r3
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	b2db      	uxtb	r3, r3
 801134c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	885b      	ldrh	r3, [r3, #2]
 8011352:	b29b      	uxth	r3, r3
 8011354:	4618      	mov	r0, r3
 8011356:	f7f6 fdda 	bl	8007f0e <lwip_htons>
 801135a:	4603      	mov	r3, r0
 801135c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	891b      	ldrh	r3, [r3, #8]
 8011362:	89ba      	ldrh	r2, [r7, #12]
 8011364:	429a      	cmp	r2, r3
 8011366:	d204      	bcs.n	8011372 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011368:	89bb      	ldrh	r3, [r7, #12]
 801136a:	4619      	mov	r1, r3
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7f7 fee3 	bl	8009138 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	895b      	ldrh	r3, [r3, #10]
 8011376:	89fa      	ldrh	r2, [r7, #14]
 8011378:	429a      	cmp	r2, r3
 801137a:	d807      	bhi.n	801138c <ip4_input+0x74>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	891b      	ldrh	r3, [r3, #8]
 8011380:	89ba      	ldrh	r2, [r7, #12]
 8011382:	429a      	cmp	r2, r3
 8011384:	d802      	bhi.n	801138c <ip4_input+0x74>
 8011386:	89fb      	ldrh	r3, [r7, #14]
 8011388:	2b13      	cmp	r3, #19
 801138a:	d804      	bhi.n	8011396 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7f8 f859 	bl	8009444 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	e0d9      	b.n	801154a <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	4a6e      	ldr	r2, [pc, #440]	; (8011554 <ip4_input+0x23c>)
 801139c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	4a6c      	ldr	r2, [pc, #432]	; (8011554 <ip4_input+0x23c>)
 80113a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80113a6:	4b6b      	ldr	r3, [pc, #428]	; (8011554 <ip4_input+0x23c>)
 80113a8:	695b      	ldr	r3, [r3, #20]
 80113aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113ae:	2be0      	cmp	r3, #224	; 0xe0
 80113b0:	d112      	bne.n	80113d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80113b8:	f003 0301 	and.w	r3, r3, #1
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d007      	beq.n	80113d2 <ip4_input+0xba>
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	3304      	adds	r3, #4
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d002      	beq.n	80113d2 <ip4_input+0xba>
      netif = inp;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	613b      	str	r3, [r7, #16]
 80113d0:	e02a      	b.n	8011428 <ip4_input+0x110>
    } else {
      netif = NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	613b      	str	r3, [r7, #16]
 80113d6:	e027      	b.n	8011428 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80113d8:	6838      	ldr	r0, [r7, #0]
 80113da:	f7ff ff73 	bl	80112c4 <ip4_input_accept>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <ip4_input+0xd2>
      netif = inp;
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	613b      	str	r3, [r7, #16]
 80113e8:	e01e      	b.n	8011428 <ip4_input+0x110>
    } else {
      netif = NULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80113ee:	4b59      	ldr	r3, [pc, #356]	; (8011554 <ip4_input+0x23c>)
 80113f0:	695b      	ldr	r3, [r3, #20]
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	2b7f      	cmp	r3, #127	; 0x7f
 80113f6:	d017      	beq.n	8011428 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80113f8:	4b57      	ldr	r3, [pc, #348]	; (8011558 <ip4_input+0x240>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	613b      	str	r3, [r7, #16]
 80113fe:	e00e      	b.n	801141e <ip4_input+0x106>
          if (netif == inp) {
 8011400:	693a      	ldr	r2, [r7, #16]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	429a      	cmp	r2, r3
 8011406:	d006      	beq.n	8011416 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011408:	6938      	ldr	r0, [r7, #16]
 801140a:	f7ff ff5b 	bl	80112c4 <ip4_input_accept>
 801140e:	4603      	mov	r3, r0
 8011410:	2b00      	cmp	r3, #0
 8011412:	d108      	bne.n	8011426 <ip4_input+0x10e>
 8011414:	e000      	b.n	8011418 <ip4_input+0x100>
            continue;
 8011416:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	613b      	str	r3, [r7, #16]
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1ed      	bne.n	8011400 <ip4_input+0xe8>
 8011424:	e000      	b.n	8011428 <ip4_input+0x110>
            break;
 8011426:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011428:	4b4a      	ldr	r3, [pc, #296]	; (8011554 <ip4_input+0x23c>)
 801142a:	691b      	ldr	r3, [r3, #16]
 801142c:	6839      	ldr	r1, [r7, #0]
 801142e:	4618      	mov	r0, r3
 8011430:	f000 f96c 	bl	801170c <ip4_addr_isbroadcast_u32>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d105      	bne.n	8011446 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801143a:	4b46      	ldr	r3, [pc, #280]	; (8011554 <ip4_input+0x23c>)
 801143c:	691b      	ldr	r3, [r3, #16]
 801143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011442:	2be0      	cmp	r3, #224	; 0xe0
 8011444:	d104      	bne.n	8011450 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7f7 fffc 	bl	8009444 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	e07c      	b.n	801154a <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d104      	bne.n	8011460 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7f7 fff4 	bl	8009444 <pbuf_free>
    return ERR_OK;
 801145c:	2300      	movs	r3, #0
 801145e:	e074      	b.n	801154a <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	88db      	ldrh	r3, [r3, #6]
 8011464:	b29b      	uxth	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801146c:	4013      	ands	r3, r2
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00b      	beq.n	801148a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f000 fc90 	bl	8011d98 <ip4_reass>
 8011478:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d101      	bne.n	8011484 <ip4_input+0x16c>
      return ERR_OK;
 8011480:	2300      	movs	r3, #0
 8011482:	e062      	b.n	801154a <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801148a:	4a32      	ldr	r2, [pc, #200]	; (8011554 <ip4_input+0x23c>)
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011490:	4a30      	ldr	r2, [pc, #192]	; (8011554 <ip4_input+0x23c>)
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011496:	4a2f      	ldr	r2, [pc, #188]	; (8011554 <ip4_input+0x23c>)
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	f003 030f 	and.w	r3, r3, #15
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	4b29      	ldr	r3, [pc, #164]	; (8011554 <ip4_input+0x23c>)
 80114ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80114b0:	89fb      	ldrh	r3, [r7, #14]
 80114b2:	4619      	mov	r1, r3
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f7f7 ff3f 	bl	8009338 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	7a5b      	ldrb	r3, [r3, #9]
 80114be:	2b06      	cmp	r3, #6
 80114c0:	d009      	beq.n	80114d6 <ip4_input+0x1be>
 80114c2:	2b11      	cmp	r3, #17
 80114c4:	d002      	beq.n	80114cc <ip4_input+0x1b4>
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d00a      	beq.n	80114e0 <ip4_input+0x1c8>
 80114ca:	e00e      	b.n	80114ea <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80114cc:	6839      	ldr	r1, [r7, #0]
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f7fe fc6a 	bl	800fda8 <udp_input>
        break;
 80114d4:	e026      	b.n	8011524 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80114d6:	6839      	ldr	r1, [r7, #0]
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7fa f87f 	bl	800b5dc <tcp_input>
        break;
 80114de:	e021      	b.n	8011524 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff fcf0 	bl	8010ec8 <icmp_input>
        break;
 80114e8:	e01c      	b.n	8011524 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80114ea:	4b1a      	ldr	r3, [pc, #104]	; (8011554 <ip4_input+0x23c>)
 80114ec:	695b      	ldr	r3, [r3, #20]
 80114ee:	6939      	ldr	r1, [r7, #16]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f000 f90b 	bl	801170c <ip4_addr_isbroadcast_u32>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10f      	bne.n	801151c <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114fc:	4b15      	ldr	r3, [pc, #84]	; (8011554 <ip4_input+0x23c>)
 80114fe:	695b      	ldr	r3, [r3, #20]
 8011500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011504:	2be0      	cmp	r3, #224	; 0xe0
 8011506:	d009      	beq.n	801151c <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801150c:	4619      	mov	r1, r3
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f7f7 ff85 	bl	800941e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011514:	2102      	movs	r1, #2
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7ff fdda 	bl	80110d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7f7 ff91 	bl	8009444 <pbuf_free>
        break;
 8011522:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011524:	4b0b      	ldr	r3, [pc, #44]	; (8011554 <ip4_input+0x23c>)
 8011526:	2200      	movs	r2, #0
 8011528:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801152a:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <ip4_input+0x23c>)
 801152c:	2200      	movs	r2, #0
 801152e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011530:	4b08      	ldr	r3, [pc, #32]	; (8011554 <ip4_input+0x23c>)
 8011532:	2200      	movs	r2, #0
 8011534:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011536:	4b07      	ldr	r3, [pc, #28]	; (8011554 <ip4_input+0x23c>)
 8011538:	2200      	movs	r2, #0
 801153a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801153c:	4b05      	ldr	r3, [pc, #20]	; (8011554 <ip4_input+0x23c>)
 801153e:	2200      	movs	r2, #0
 8011540:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011542:	4b04      	ldr	r3, [pc, #16]	; (8011554 <ip4_input+0x23c>)
 8011544:	2200      	movs	r2, #0
 8011546:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011548:	2300      	movs	r3, #0
}
 801154a:	4618      	mov	r0, r3
 801154c:	3718      	adds	r7, #24
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	20003b34 	.word	0x20003b34
 8011558:	20007068 	.word	0x20007068

0801155c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b08a      	sub	sp, #40	; 0x28
 8011560:	af04      	add	r7, sp, #16
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d009      	beq.n	8011588 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d003      	beq.n	8011582 <ip4_output_if+0x26>
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d102      	bne.n	8011588 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011584:	3304      	adds	r3, #4
 8011586:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011588:	78fa      	ldrb	r2, [r7, #3]
 801158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158c:	9302      	str	r3, [sp, #8]
 801158e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	4613      	mov	r3, r2
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	6979      	ldr	r1, [r7, #20]
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f000 f805 	bl	80115b0 <ip4_output_if_src>
 80115a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b088      	sub	sp, #32
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	60f8      	str	r0, [r7, #12]
 80115b8:	60b9      	str	r1, [r7, #8]
 80115ba:	607a      	str	r2, [r7, #4]
 80115bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	7b9b      	ldrb	r3, [r3, #14]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d006      	beq.n	80115d4 <ip4_output_if_src+0x24>
 80115c6:	4b4b      	ldr	r3, [pc, #300]	; (80116f4 <ip4_output_if_src+0x144>)
 80115c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80115cc:	494a      	ldr	r1, [pc, #296]	; (80116f8 <ip4_output_if_src+0x148>)
 80115ce:	484b      	ldr	r0, [pc, #300]	; (80116fc <ip4_output_if_src+0x14c>)
 80115d0:	f001 f924 	bl	801281c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d060      	beq.n	801169c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80115da:	2314      	movs	r3, #20
 80115dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80115de:	2114      	movs	r1, #20
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f7f7 fe99 	bl	8009318 <pbuf_add_header>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80115ec:	f06f 0301 	mvn.w	r3, #1
 80115f0:	e07c      	b.n	80116ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	895b      	ldrh	r3, [r3, #10]
 80115fc:	2b13      	cmp	r3, #19
 80115fe:	d806      	bhi.n	801160e <ip4_output_if_src+0x5e>
 8011600:	4b3c      	ldr	r3, [pc, #240]	; (80116f4 <ip4_output_if_src+0x144>)
 8011602:	f240 3289 	movw	r2, #905	; 0x389
 8011606:	493e      	ldr	r1, [pc, #248]	; (8011700 <ip4_output_if_src+0x150>)
 8011608:	483c      	ldr	r0, [pc, #240]	; (80116fc <ip4_output_if_src+0x14c>)
 801160a:	f001 f907 	bl	801281c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	78fa      	ldrb	r2, [r7, #3]
 8011612:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801161a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011624:	8b7b      	ldrh	r3, [r7, #26]
 8011626:	089b      	lsrs	r3, r3, #2
 8011628:	b29b      	uxth	r3, r3
 801162a:	b2db      	uxtb	r3, r3
 801162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011630:	b2da      	uxtb	r2, r3
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801163c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	891b      	ldrh	r3, [r3, #8]
 8011642:	4618      	mov	r0, r3
 8011644:	f7f6 fc63 	bl	8007f0e <lwip_htons>
 8011648:	4603      	mov	r3, r0
 801164a:	461a      	mov	r2, r3
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	2200      	movs	r2, #0
 8011654:	719a      	strb	r2, [r3, #6]
 8011656:	2200      	movs	r2, #0
 8011658:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801165a:	4b2a      	ldr	r3, [pc, #168]	; (8011704 <ip4_output_if_src+0x154>)
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	4618      	mov	r0, r3
 8011660:	f7f6 fc55 	bl	8007f0e <lwip_htons>
 8011664:	4603      	mov	r3, r0
 8011666:	461a      	mov	r2, r3
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801166c:	4b25      	ldr	r3, [pc, #148]	; (8011704 <ip4_output_if_src+0x154>)
 801166e:	881b      	ldrh	r3, [r3, #0]
 8011670:	3301      	adds	r3, #1
 8011672:	b29a      	uxth	r2, r3
 8011674:	4b23      	ldr	r3, [pc, #140]	; (8011704 <ip4_output_if_src+0x154>)
 8011676:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d104      	bne.n	8011688 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801167e:	4b22      	ldr	r3, [pc, #136]	; (8011708 <ip4_output_if_src+0x158>)
 8011680:	681a      	ldr	r2, [r3, #0]
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	60da      	str	r2, [r3, #12]
 8011686:	e003      	b.n	8011690 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	2200      	movs	r2, #0
 8011694:	729a      	strb	r2, [r3, #10]
 8011696:	2200      	movs	r2, #0
 8011698:	72da      	strb	r2, [r3, #11]
 801169a:	e00f      	b.n	80116bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	895b      	ldrh	r3, [r3, #10]
 80116a0:	2b13      	cmp	r3, #19
 80116a2:	d802      	bhi.n	80116aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80116a4:	f06f 0301 	mvn.w	r3, #1
 80116a8:	e020      	b.n	80116ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	691b      	ldr	r3, [r3, #16]
 80116b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80116b6:	f107 0314 	add.w	r3, r7, #20
 80116ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80116bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116be:	8c1b      	ldrh	r3, [r3, #32]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d00c      	beq.n	80116de <ip4_output_if_src+0x12e>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	891a      	ldrh	r2, [r3, #8]
 80116c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ca:	8c1b      	ldrh	r3, [r3, #32]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d906      	bls.n	80116de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116d4:	68f8      	ldr	r0, [r7, #12]
 80116d6:	f000 fd4b 	bl	8012170 <ip4_frag>
 80116da:	4603      	mov	r3, r0
 80116dc:	e006      	b.n	80116ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	695b      	ldr	r3, [r3, #20]
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	68f9      	ldr	r1, [r7, #12]
 80116e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116e8:	4798      	blx	r3
 80116ea:	4603      	mov	r3, r0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3720      	adds	r7, #32
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	08018418 	.word	0x08018418
 80116f8:	0801844c 	.word	0x0801844c
 80116fc:	08018458 	.word	0x08018458
 8011700:	08018480 	.word	0x08018480
 8011704:	20000382 	.word	0x20000382
 8011708:	0801886c 	.word	0x0801886c

0801170c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011720:	d002      	beq.n	8011728 <ip4_addr_isbroadcast_u32+0x1c>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011728:	2301      	movs	r3, #1
 801172a:	e02a      	b.n	8011782 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011732:	f003 0302 	and.w	r3, r3, #2
 8011736:	2b00      	cmp	r3, #0
 8011738:	d101      	bne.n	801173e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801173a:	2300      	movs	r3, #0
 801173c:	e021      	b.n	8011782 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	3304      	adds	r3, #4
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	429a      	cmp	r2, r3
 8011748:	d101      	bne.n	801174e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801174a:	2300      	movs	r3, #0
 801174c:	e019      	b.n	8011782 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	3304      	adds	r3, #4
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	405a      	eors	r2, r3
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	3308      	adds	r3, #8
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4013      	ands	r3, r2
 8011760:	2b00      	cmp	r3, #0
 8011762:	d10d      	bne.n	8011780 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	3308      	adds	r3, #8
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	43da      	mvns	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	3308      	adds	r3, #8
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011778:	429a      	cmp	r2, r3
 801177a:	d101      	bne.n	8011780 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801177c:	2301      	movs	r3, #1
 801177e:	e000      	b.n	8011782 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011780:	2300      	movs	r3, #0
  }
}
 8011782:	4618      	mov	r0, r3
 8011784:	3714      	adds	r7, #20
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
	...

08011790 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801179a:	4b12      	ldr	r3, [pc, #72]	; (80117e4 <ip_reass_tmr+0x54>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80117a0:	e018      	b.n	80117d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	7fdb      	ldrb	r3, [r3, #31]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d00b      	beq.n	80117c2 <ip_reass_tmr+0x32>
      r->timer--;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	7fdb      	ldrb	r3, [r3, #31]
 80117ae:	3b01      	subs	r3, #1
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e008      	b.n	80117d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f000 f80a 	bl	80117e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1e3      	bne.n	80117a2 <ip_reass_tmr+0x12>
    }
  }
}
 80117da:	bf00      	nop
 80117dc:	3710      	adds	r7, #16
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
 80117e2:	bf00      	nop
 80117e4:	20000384 	.word	0x20000384

080117e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b088      	sub	sp, #32
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80117f2:	2300      	movs	r3, #0
 80117f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80117f6:	683a      	ldr	r2, [r7, #0]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d105      	bne.n	801180a <ip_reass_free_complete_datagram+0x22>
 80117fe:	4b45      	ldr	r3, [pc, #276]	; (8011914 <ip_reass_free_complete_datagram+0x12c>)
 8011800:	22ab      	movs	r2, #171	; 0xab
 8011802:	4945      	ldr	r1, [pc, #276]	; (8011918 <ip_reass_free_complete_datagram+0x130>)
 8011804:	4845      	ldr	r0, [pc, #276]	; (801191c <ip_reass_free_complete_datagram+0x134>)
 8011806:	f001 f809 	bl	801281c <iprintf>
  if (prev != NULL) {
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00a      	beq.n	8011826 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	429a      	cmp	r2, r3
 8011818:	d005      	beq.n	8011826 <ip_reass_free_complete_datagram+0x3e>
 801181a:	4b3e      	ldr	r3, [pc, #248]	; (8011914 <ip_reass_free_complete_datagram+0x12c>)
 801181c:	22ad      	movs	r2, #173	; 0xad
 801181e:	4940      	ldr	r1, [pc, #256]	; (8011920 <ip_reass_free_complete_datagram+0x138>)
 8011820:	483e      	ldr	r0, [pc, #248]	; (801191c <ip_reass_free_complete_datagram+0x134>)
 8011822:	f000 fffb 	bl	801281c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	889b      	ldrh	r3, [r3, #4]
 8011832:	b29b      	uxth	r3, r3
 8011834:	2b00      	cmp	r3, #0
 8011836:	d12a      	bne.n	801188e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	6858      	ldr	r0, [r3, #4]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	3308      	adds	r3, #8
 801184e:	2214      	movs	r2, #20
 8011850:	4619      	mov	r1, r3
 8011852:	f000 ff0e 	bl	8012672 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011856:	2101      	movs	r1, #1
 8011858:	69b8      	ldr	r0, [r7, #24]
 801185a:	f7ff fc49 	bl	80110f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801185e:	69b8      	ldr	r0, [r7, #24]
 8011860:	f7f7 fe78 	bl	8009554 <pbuf_clen>
 8011864:	4603      	mov	r3, r0
 8011866:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011868:	8bfa      	ldrh	r2, [r7, #30]
 801186a:	8a7b      	ldrh	r3, [r7, #18]
 801186c:	4413      	add	r3, r2
 801186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011872:	db05      	blt.n	8011880 <ip_reass_free_complete_datagram+0x98>
 8011874:	4b27      	ldr	r3, [pc, #156]	; (8011914 <ip_reass_free_complete_datagram+0x12c>)
 8011876:	22bc      	movs	r2, #188	; 0xbc
 8011878:	492a      	ldr	r1, [pc, #168]	; (8011924 <ip_reass_free_complete_datagram+0x13c>)
 801187a:	4828      	ldr	r0, [pc, #160]	; (801191c <ip_reass_free_complete_datagram+0x134>)
 801187c:	f000 ffce 	bl	801281c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011880:	8bfa      	ldrh	r2, [r7, #30]
 8011882:	8a7b      	ldrh	r3, [r7, #18]
 8011884:	4413      	add	r3, r2
 8011886:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011888:	69b8      	ldr	r0, [r7, #24]
 801188a:	f7f7 fddb 	bl	8009444 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011894:	e01f      	b.n	80118d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f7f7 fe54 	bl	8009554 <pbuf_clen>
 80118ac:	4603      	mov	r3, r0
 80118ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80118b0:	8bfa      	ldrh	r2, [r7, #30]
 80118b2:	8a7b      	ldrh	r3, [r7, #18]
 80118b4:	4413      	add	r3, r2
 80118b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118ba:	db05      	blt.n	80118c8 <ip_reass_free_complete_datagram+0xe0>
 80118bc:	4b15      	ldr	r3, [pc, #84]	; (8011914 <ip_reass_free_complete_datagram+0x12c>)
 80118be:	22cc      	movs	r2, #204	; 0xcc
 80118c0:	4918      	ldr	r1, [pc, #96]	; (8011924 <ip_reass_free_complete_datagram+0x13c>)
 80118c2:	4816      	ldr	r0, [pc, #88]	; (801191c <ip_reass_free_complete_datagram+0x134>)
 80118c4:	f000 ffaa 	bl	801281c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80118c8:	8bfa      	ldrh	r2, [r7, #30]
 80118ca:	8a7b      	ldrh	r3, [r7, #18]
 80118cc:	4413      	add	r3, r2
 80118ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f7f7 fdb7 	bl	8009444 <pbuf_free>
  while (p != NULL) {
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1dc      	bne.n	8011896 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 f8c2 	bl	8011a68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80118e4:	4b10      	ldr	r3, [pc, #64]	; (8011928 <ip_reass_free_complete_datagram+0x140>)
 80118e6:	881b      	ldrh	r3, [r3, #0]
 80118e8:	8bfa      	ldrh	r2, [r7, #30]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d905      	bls.n	80118fa <ip_reass_free_complete_datagram+0x112>
 80118ee:	4b09      	ldr	r3, [pc, #36]	; (8011914 <ip_reass_free_complete_datagram+0x12c>)
 80118f0:	22d2      	movs	r2, #210	; 0xd2
 80118f2:	490e      	ldr	r1, [pc, #56]	; (801192c <ip_reass_free_complete_datagram+0x144>)
 80118f4:	4809      	ldr	r0, [pc, #36]	; (801191c <ip_reass_free_complete_datagram+0x134>)
 80118f6:	f000 ff91 	bl	801281c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80118fa:	4b0b      	ldr	r3, [pc, #44]	; (8011928 <ip_reass_free_complete_datagram+0x140>)
 80118fc:	881a      	ldrh	r2, [r3, #0]
 80118fe:	8bfb      	ldrh	r3, [r7, #30]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	b29a      	uxth	r2, r3
 8011904:	4b08      	ldr	r3, [pc, #32]	; (8011928 <ip_reass_free_complete_datagram+0x140>)
 8011906:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011908:	8bfb      	ldrh	r3, [r7, #30]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3720      	adds	r7, #32
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	080184b0 	.word	0x080184b0
 8011918:	080184ec 	.word	0x080184ec
 801191c:	080184f8 	.word	0x080184f8
 8011920:	08018520 	.word	0x08018520
 8011924:	08018534 	.word	0x08018534
 8011928:	20000388 	.word	0x20000388
 801192c:	08018554 	.word	0x08018554

08011930 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b08a      	sub	sp, #40	; 0x28
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801193a:	2300      	movs	r3, #0
 801193c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801193e:	2300      	movs	r3, #0
 8011940:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011942:	2300      	movs	r3, #0
 8011944:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011946:	2300      	movs	r3, #0
 8011948:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801194e:	4b28      	ldr	r3, [pc, #160]	; (80119f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011954:	e030      	b.n	80119b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011958:	695a      	ldr	r2, [r3, #20]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	429a      	cmp	r2, r3
 8011960:	d10c      	bne.n	801197c <ip_reass_remove_oldest_datagram+0x4c>
 8011962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011964:	699a      	ldr	r2, [r3, #24]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	691b      	ldr	r3, [r3, #16]
 801196a:	429a      	cmp	r2, r3
 801196c:	d106      	bne.n	801197c <ip_reass_remove_oldest_datagram+0x4c>
 801196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011970:	899a      	ldrh	r2, [r3, #12]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	889b      	ldrh	r3, [r3, #4]
 8011976:	b29b      	uxth	r3, r3
 8011978:	429a      	cmp	r2, r3
 801197a:	d014      	beq.n	80119a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	3301      	adds	r3, #1
 8011980:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011982:	6a3b      	ldr	r3, [r7, #32]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d104      	bne.n	8011992 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	61bb      	str	r3, [r7, #24]
 8011990:	e009      	b.n	80119a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011994:	7fda      	ldrb	r2, [r3, #31]
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	7fdb      	ldrb	r3, [r3, #31]
 801199a:	429a      	cmp	r2, r3
 801199c:	d803      	bhi.n	80119a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80119a2:	69fb      	ldr	r3, [r7, #28]
 80119a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80119a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d001      	beq.n	80119b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80119b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d1cb      	bne.n	8011956 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80119be:	6a3b      	ldr	r3, [r7, #32]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d008      	beq.n	80119d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80119c4:	69b9      	ldr	r1, [r7, #24]
 80119c6:	6a38      	ldr	r0, [r7, #32]
 80119c8:	f7ff ff0e 	bl	80117e8 <ip_reass_free_complete_datagram>
 80119cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80119ce:	697a      	ldr	r2, [r7, #20]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	4413      	add	r3, r2
 80119d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80119d6:	697a      	ldr	r2, [r7, #20]
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	429a      	cmp	r2, r3
 80119dc:	da02      	bge.n	80119e4 <ip_reass_remove_oldest_datagram+0xb4>
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	dcac      	bgt.n	801193e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80119e4:	697b      	ldr	r3, [r7, #20]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3728      	adds	r7, #40	; 0x28
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	20000384 	.word	0x20000384

080119f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80119fe:	2004      	movs	r0, #4
 8011a00:	f7f6 feda 	bl	80087b8 <memp_malloc>
 8011a04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d110      	bne.n	8011a2e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff ff8e 	bl	8011930 <ip_reass_remove_oldest_datagram>
 8011a14:	4602      	mov	r2, r0
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	dc03      	bgt.n	8011a24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011a1c:	2004      	movs	r0, #4
 8011a1e:	f7f6 fecb 	bl	80087b8 <memp_malloc>
 8011a22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e016      	b.n	8011a5c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011a2e:	2220      	movs	r2, #32
 8011a30:	2100      	movs	r1, #0
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f000 fe41 	bl	80126ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	220f      	movs	r2, #15
 8011a3c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011a3e:	4b09      	ldr	r3, [pc, #36]	; (8011a64 <ip_reass_enqueue_new_datagram+0x70>)
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011a46:	4a07      	ldr	r2, [pc, #28]	; (8011a64 <ip_reass_enqueue_new_datagram+0x70>)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3308      	adds	r3, #8
 8011a50:	2214      	movs	r2, #20
 8011a52:	6879      	ldr	r1, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f000 fe0c 	bl	8012672 <memcpy>
  return ipr;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	20000384 	.word	0x20000384

08011a68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011a72:	4b10      	ldr	r3, [pc, #64]	; (8011ab4 <ip_reass_dequeue_datagram+0x4c>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d104      	bne.n	8011a86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a0c      	ldr	r2, [pc, #48]	; (8011ab4 <ip_reass_dequeue_datagram+0x4c>)
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	e00d      	b.n	8011aa2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d106      	bne.n	8011a9a <ip_reass_dequeue_datagram+0x32>
 8011a8c:	4b0a      	ldr	r3, [pc, #40]	; (8011ab8 <ip_reass_dequeue_datagram+0x50>)
 8011a8e:	f240 1245 	movw	r2, #325	; 0x145
 8011a92:	490a      	ldr	r1, [pc, #40]	; (8011abc <ip_reass_dequeue_datagram+0x54>)
 8011a94:	480a      	ldr	r0, [pc, #40]	; (8011ac0 <ip_reass_dequeue_datagram+0x58>)
 8011a96:	f000 fec1 	bl	801281c <iprintf>
    prev->next = ipr->next;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011aa2:	6879      	ldr	r1, [r7, #4]
 8011aa4:	2004      	movs	r0, #4
 8011aa6:	f7f6 fed3 	bl	8008850 <memp_free>
}
 8011aaa:	bf00      	nop
 8011aac:	3708      	adds	r7, #8
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	20000384 	.word	0x20000384
 8011ab8:	080184b0 	.word	0x080184b0
 8011abc:	08018578 	.word	0x08018578
 8011ac0:	080184f8 	.word	0x080184f8

08011ac4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08c      	sub	sp, #48	; 0x30
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	885b      	ldrh	r3, [r3, #2]
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7f6 fa12 	bl	8007f0e <lwip_htons>
 8011aea:	4603      	mov	r3, r0
 8011aec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	f003 030f 	and.w	r3, r3, #15
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011afc:	7e7b      	ldrb	r3, [r7, #25]
 8011afe:	b29b      	uxth	r3, r3
 8011b00:	8b7a      	ldrh	r2, [r7, #26]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d202      	bcs.n	8011b0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b06:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0a:	e135      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011b0c:	7e7b      	ldrb	r3, [r7, #25]
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	8b7a      	ldrh	r2, [r7, #26]
 8011b12:	1ad3      	subs	r3, r2, r3
 8011b14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	88db      	ldrh	r3, [r3, #6]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7f6 f9f6 	bl	8007f0e <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b36:	2200      	movs	r2, #0
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	705a      	strb	r2, [r3, #1]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	709a      	strb	r2, [r3, #2]
 8011b42:	2200      	movs	r2, #0
 8011b44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b48:	8afa      	ldrh	r2, [r7, #22]
 8011b4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011b4c:	8afa      	ldrh	r2, [r7, #22]
 8011b4e:	8b7b      	ldrh	r3, [r7, #26]
 8011b50:	4413      	add	r3, r2
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5a:	88db      	ldrh	r3, [r3, #6]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	8afa      	ldrh	r2, [r7, #22]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d902      	bls.n	8011b6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b64:	f04f 33ff 	mov.w	r3, #4294967295
 8011b68:	e106      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8011b70:	e068      	b.n	8011c44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7a:	889b      	ldrh	r3, [r3, #4]
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	889b      	ldrh	r3, [r3, #4]
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d235      	bcs.n	8011bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d020      	beq.n	8011bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b96:	889b      	ldrh	r3, [r3, #4]
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9c:	88db      	ldrh	r3, [r3, #6]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d307      	bcc.n	8011bb4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	88db      	ldrh	r3, [r3, #6]
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	889b      	ldrh	r3, [r3, #4]
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d902      	bls.n	8011bba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb8:	e0de      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc2:	88db      	ldrh	r3, [r3, #6]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc8:	889b      	ldrh	r3, [r3, #4]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d03d      	beq.n	8011c4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011bd4:	e03a      	b.n	8011c4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd8:	88db      	ldrh	r3, [r3, #6]
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	889b      	ldrh	r3, [r3, #4]
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d902      	bls.n	8011bec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011be6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bea:	e0c5      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	605a      	str	r2, [r3, #4]
      break;
 8011bf2:	e02b      	b.n	8011c4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf6:	889b      	ldrh	r3, [r3, #4]
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	889b      	ldrh	r3, [r3, #4]
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d102      	bne.n	8011c0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c04:	f04f 33ff 	mov.w	r3, #4294967295
 8011c08:	e0b6      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0c:	889b      	ldrh	r3, [r3, #4]
 8011c0e:	b29a      	uxth	r2, r3
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	88db      	ldrh	r3, [r3, #6]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d202      	bcs.n	8011c20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c1e:	e0ab      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d009      	beq.n	8011c3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c28:	88db      	ldrh	r3, [r3, #6]
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	889b      	ldrh	r3, [r3, #4]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d001      	beq.n	8011c3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011c36:	2300      	movs	r3, #0
 8011c38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d193      	bne.n	8011b72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011c4a:	e000      	b.n	8011c4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011c4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d12d      	bne.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d01c      	beq.n	8011c94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5c:	88db      	ldrh	r3, [r3, #6]
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	889b      	ldrh	r3, [r3, #4]
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d906      	bls.n	8011c78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011c6a:	4b45      	ldr	r3, [pc, #276]	; (8011d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011c70:	4944      	ldr	r1, [pc, #272]	; (8011d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011c72:	4845      	ldr	r0, [pc, #276]	; (8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c74:	f000 fdd2 	bl	801281c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c80:	88db      	ldrh	r3, [r3, #6]
 8011c82:	b29a      	uxth	r2, r3
 8011c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c86:	889b      	ldrh	r3, [r3, #4]
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d010      	beq.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	623b      	str	r3, [r7, #32]
 8011c92:	e00d      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d006      	beq.n	8011caa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011c9c:	4b38      	ldr	r3, [pc, #224]	; (8011d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c9e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8011ca2:	493a      	ldr	r1, [pc, #232]	; (8011d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011ca4:	4838      	ldr	r0, [pc, #224]	; (8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011ca6:	f000 fdb9 	bl	801281c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d105      	bne.n	8011cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	7f9b      	ldrb	r3, [r3, #30]
 8011cba:	f003 0301 	and.w	r3, r3, #1
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d059      	beq.n	8011d76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011cc2:	6a3b      	ldr	r3, [r7, #32]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d04f      	beq.n	8011d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d006      	beq.n	8011cde <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	889b      	ldrh	r3, [r3, #4]
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d002      	beq.n	8011ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	623b      	str	r3, [r7, #32]
 8011ce2:	e041      	b.n	8011d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011cee:	e012      	b.n	8011d16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	88db      	ldrh	r3, [r3, #6]
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfe:	889b      	ldrh	r3, [r3, #4]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d002      	beq.n	8011d0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011d06:	2300      	movs	r3, #0
 8011d08:	623b      	str	r3, [r7, #32]
            break;
 8011d0a:	e007      	b.n	8011d1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d1e9      	bne.n	8011cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011d1c:	6a3b      	ldr	r3, [r7, #32]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d022      	beq.n	8011d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d106      	bne.n	8011d38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011d2a:	4b15      	ldr	r3, [pc, #84]	; (8011d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d2c:	f240 12df 	movw	r2, #479	; 0x1df
 8011d30:	4917      	ldr	r1, [pc, #92]	; (8011d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d32:	4815      	ldr	r0, [pc, #84]	; (8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d34:	f000 fd72 	bl	801281c <iprintf>
          LWIP_ASSERT("sanity check",
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d106      	bne.n	8011d52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011d44:	4b0e      	ldr	r3, [pc, #56]	; (8011d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d46:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011d4a:	4911      	ldr	r1, [pc, #68]	; (8011d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011d4c:	480e      	ldr	r0, [pc, #56]	; (8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d4e:	f000 fd65 	bl	801281c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d006      	beq.n	8011d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011d5a:	4b09      	ldr	r3, [pc, #36]	; (8011d80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011d5c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011d60:	490c      	ldr	r1, [pc, #48]	; (8011d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011d62:	4809      	ldr	r0, [pc, #36]	; (8011d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011d64:	f000 fd5a 	bl	801281c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	bf14      	ite	ne
 8011d6e:	2301      	movne	r3, #1
 8011d70:	2300      	moveq	r3, #0
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	e000      	b.n	8011d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011d76:	2300      	movs	r3, #0
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3730      	adds	r7, #48	; 0x30
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	080184b0 	.word	0x080184b0
 8011d84:	08018594 	.word	0x08018594
 8011d88:	080184f8 	.word	0x080184f8
 8011d8c:	080185b4 	.word	0x080185b4
 8011d90:	080185ec 	.word	0x080185ec
 8011d94:	080185fc 	.word	0x080185fc

08011d98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b08e      	sub	sp, #56	; 0x38
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	f003 030f 	and.w	r3, r3, #15
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	009b      	lsls	r3, r3, #2
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b14      	cmp	r3, #20
 8011db6:	f040 8167 	bne.w	8012088 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbc:	88db      	ldrh	r3, [r3, #6]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7f6 f8a4 	bl	8007f0e <lwip_htons>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	00db      	lsls	r3, r3, #3
 8011dd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd4:	885b      	ldrh	r3, [r3, #2]
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7f6 f898 	bl	8007f0e <lwip_htons>
 8011dde:	4603      	mov	r3, r0
 8011de0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	f003 030f 	and.w	r3, r3, #15
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	f0c0 8146 	bcc.w	801208c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7f7 fba1 	bl	8009554 <pbuf_clen>
 8011e12:	4603      	mov	r3, r0
 8011e14:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011e16:	4ba3      	ldr	r3, [pc, #652]	; (80120a4 <ip4_reass+0x30c>)
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	8c3b      	ldrh	r3, [r7, #32]
 8011e1e:	4413      	add	r3, r2
 8011e20:	2b0a      	cmp	r3, #10
 8011e22:	dd10      	ble.n	8011e46 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e24:	8c3b      	ldrh	r3, [r7, #32]
 8011e26:	4619      	mov	r1, r3
 8011e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e2a:	f7ff fd81 	bl	8011930 <ip_reass_remove_oldest_datagram>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f000 812d 	beq.w	8012090 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011e36:	4b9b      	ldr	r3, [pc, #620]	; (80120a4 <ip4_reass+0x30c>)
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	8c3b      	ldrh	r3, [r7, #32]
 8011e3e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011e40:	2b0a      	cmp	r3, #10
 8011e42:	f300 8125 	bgt.w	8012090 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e46:	4b98      	ldr	r3, [pc, #608]	; (80120a8 <ip4_reass+0x310>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8011e4c:	e015      	b.n	8011e7a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	695a      	ldr	r2, [r3, #20]
 8011e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d10c      	bne.n	8011e74 <ip4_reass+0xdc>
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5c:	699a      	ldr	r2, [r3, #24]
 8011e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e60:	691b      	ldr	r3, [r3, #16]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d106      	bne.n	8011e74 <ip4_reass+0xdc>
 8011e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e68:	899a      	ldrh	r2, [r3, #12]
 8011e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e6c:	889b      	ldrh	r3, [r3, #4]
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d006      	beq.n	8011e82 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	633b      	str	r3, [r7, #48]	; 0x30
 8011e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d1e6      	bne.n	8011e4e <ip4_reass+0xb6>
 8011e80:	e000      	b.n	8011e84 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011e82:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d109      	bne.n	8011e9e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011e8a:	8c3b      	ldrh	r3, [r7, #32]
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e90:	f7ff fdb0 	bl	80119f4 <ip_reass_enqueue_new_datagram>
 8011e94:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d11c      	bne.n	8011ed6 <ip4_reass+0x13e>
      goto nullreturn;
 8011e9c:	e0f9      	b.n	8012092 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea0:	88db      	ldrh	r3, [r3, #6]
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7f6 f832 	bl	8007f0e <lwip_htons>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d110      	bne.n	8011ed6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb6:	89db      	ldrh	r3, [r3, #14]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7f6 f828 	bl	8007f0e <lwip_htons>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d006      	beq.n	8011ed6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eca:	3308      	adds	r3, #8
 8011ecc:	2214      	movs	r2, #20
 8011ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f000 fbce 	bl	8012672 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	88db      	ldrh	r3, [r3, #6]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	f003 0320 	and.w	r3, r3, #32
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	bf0c      	ite	eq
 8011ee4:	2301      	moveq	r3, #1
 8011ee6:	2300      	movne	r3, #0
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00e      	beq.n	8011f10 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011ef2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ef6:	4413      	add	r3, r2
 8011ef8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011efa:	8b7a      	ldrh	r2, [r7, #26]
 8011efc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011efe:	429a      	cmp	r2, r3
 8011f00:	f0c0 80a0 	bcc.w	8012044 <ip4_reass+0x2ac>
 8011f04:	8b7b      	ldrh	r3, [r7, #26]
 8011f06:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	f200 809a 	bhi.w	8012044 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011f10:	69fa      	ldr	r2, [r7, #28]
 8011f12:	6879      	ldr	r1, [r7, #4]
 8011f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f16:	f7ff fdd5 	bl	8011ac4 <ip_reass_chain_frag_into_datagram_and_validate>
 8011f1a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f22:	f000 8091 	beq.w	8012048 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011f26:	4b5f      	ldr	r3, [pc, #380]	; (80120a4 <ip4_reass+0x30c>)
 8011f28:	881a      	ldrh	r2, [r3, #0]
 8011f2a:	8c3b      	ldrh	r3, [r7, #32]
 8011f2c:	4413      	add	r3, r2
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	4b5c      	ldr	r3, [pc, #368]	; (80120a4 <ip4_reass+0x30c>)
 8011f32:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00d      	beq.n	8011f56 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011f3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f3e:	4413      	add	r3, r2
 8011f40:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f44:	8a7a      	ldrh	r2, [r7, #18]
 8011f46:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4a:	7f9b      	ldrb	r3, [r3, #30]
 8011f4c:	f043 0301 	orr.w	r3, r3, #1
 8011f50:	b2da      	uxtb	r2, r3
 8011f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f54:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d171      	bne.n	8012040 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5e:	8b9b      	ldrh	r3, [r3, #28]
 8011f60:	3314      	adds	r3, #20
 8011f62:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f66:	685b      	ldr	r3, [r3, #4]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f78:	3308      	adds	r3, #8
 8011f7a:	2214      	movs	r2, #20
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f80:	f000 fb77 	bl	8012672 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011f84:	8a3b      	ldrh	r3, [r7, #16]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7f5 ffc1 	bl	8007f0e <lwip_htons>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	461a      	mov	r2, r3
 8011f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f92:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	2200      	movs	r2, #0
 8011f98:	719a      	strb	r2, [r3, #6]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	729a      	strb	r2, [r3, #10]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011fae:	e00d      	b.n	8011fcc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011fb6:	2114      	movs	r1, #20
 8011fb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011fba:	f7f7 f9bd 	bl	8009338 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011fbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7f7 fb01 	bl	80095c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d1ee      	bne.n	8011fb0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011fd2:	4b35      	ldr	r3, [pc, #212]	; (80120a8 <ip4_reass+0x310>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d102      	bne.n	8011fe2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fe0:	e010      	b.n	8012004 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011fe2:	4b31      	ldr	r3, [pc, #196]	; (80120a8 <ip4_reass+0x310>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fe8:	e007      	b.n	8011ffa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d006      	beq.n	8012002 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1f4      	bne.n	8011fea <ip4_reass+0x252>
 8012000:	e000      	b.n	8012004 <ip4_reass+0x26c>
          break;
 8012002:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012008:	f7ff fd2e 	bl	8011a68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7f7 faa1 	bl	8009554 <pbuf_clen>
 8012012:	4603      	mov	r3, r0
 8012014:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012016:	4b23      	ldr	r3, [pc, #140]	; (80120a4 <ip4_reass+0x30c>)
 8012018:	881b      	ldrh	r3, [r3, #0]
 801201a:	8c3a      	ldrh	r2, [r7, #32]
 801201c:	429a      	cmp	r2, r3
 801201e:	d906      	bls.n	801202e <ip4_reass+0x296>
 8012020:	4b22      	ldr	r3, [pc, #136]	; (80120ac <ip4_reass+0x314>)
 8012022:	f240 229b 	movw	r2, #667	; 0x29b
 8012026:	4922      	ldr	r1, [pc, #136]	; (80120b0 <ip4_reass+0x318>)
 8012028:	4822      	ldr	r0, [pc, #136]	; (80120b4 <ip4_reass+0x31c>)
 801202a:	f000 fbf7 	bl	801281c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801202e:	4b1d      	ldr	r3, [pc, #116]	; (80120a4 <ip4_reass+0x30c>)
 8012030:	881a      	ldrh	r2, [r3, #0]
 8012032:	8c3b      	ldrh	r3, [r7, #32]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	b29a      	uxth	r2, r3
 8012038:	4b1a      	ldr	r3, [pc, #104]	; (80120a4 <ip4_reass+0x30c>)
 801203a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	e02c      	b.n	801209a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012040:	2300      	movs	r3, #0
 8012042:	e02a      	b.n	801209a <ip4_reass+0x302>

nullreturn_ipr:
 8012044:	bf00      	nop
 8012046:	e000      	b.n	801204a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012048:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204c:	2b00      	cmp	r3, #0
 801204e:	d106      	bne.n	801205e <ip4_reass+0x2c6>
 8012050:	4b16      	ldr	r3, [pc, #88]	; (80120ac <ip4_reass+0x314>)
 8012052:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012056:	4918      	ldr	r1, [pc, #96]	; (80120b8 <ip4_reass+0x320>)
 8012058:	4816      	ldr	r0, [pc, #88]	; (80120b4 <ip4_reass+0x31c>)
 801205a:	f000 fbdf 	bl	801281c <iprintf>
  if (ipr->p == NULL) {
 801205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d114      	bne.n	8012090 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012066:	4b10      	ldr	r3, [pc, #64]	; (80120a8 <ip4_reass+0x310>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801206c:	429a      	cmp	r2, r3
 801206e:	d006      	beq.n	801207e <ip4_reass+0x2e6>
 8012070:	4b0e      	ldr	r3, [pc, #56]	; (80120ac <ip4_reass+0x314>)
 8012072:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012076:	4911      	ldr	r1, [pc, #68]	; (80120bc <ip4_reass+0x324>)
 8012078:	480e      	ldr	r0, [pc, #56]	; (80120b4 <ip4_reass+0x31c>)
 801207a:	f000 fbcf 	bl	801281c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801207e:	2100      	movs	r1, #0
 8012080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012082:	f7ff fcf1 	bl	8011a68 <ip_reass_dequeue_datagram>
 8012086:	e004      	b.n	8012092 <ip4_reass+0x2fa>
    goto nullreturn;
 8012088:	bf00      	nop
 801208a:	e002      	b.n	8012092 <ip4_reass+0x2fa>
    goto nullreturn;
 801208c:	bf00      	nop
 801208e:	e000      	b.n	8012092 <ip4_reass+0x2fa>
  }

nullreturn:
 8012090:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7f7 f9d6 	bl	8009444 <pbuf_free>
  return NULL;
 8012098:	2300      	movs	r3, #0
}
 801209a:	4618      	mov	r0, r3
 801209c:	3738      	adds	r7, #56	; 0x38
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	20000388 	.word	0x20000388
 80120a8:	20000384 	.word	0x20000384
 80120ac:	080184b0 	.word	0x080184b0
 80120b0:	08018620 	.word	0x08018620
 80120b4:	080184f8 	.word	0x080184f8
 80120b8:	0801863c 	.word	0x0801863c
 80120bc:	08018648 	.word	0x08018648

080120c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80120c4:	2005      	movs	r0, #5
 80120c6:	f7f6 fb77 	bl	80087b8 <memp_malloc>
 80120ca:	4603      	mov	r3, r0
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d106      	bne.n	80120ec <ip_frag_free_pbuf_custom_ref+0x1c>
 80120de:	4b07      	ldr	r3, [pc, #28]	; (80120fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80120e0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80120e4:	4906      	ldr	r1, [pc, #24]	; (8012100 <ip_frag_free_pbuf_custom_ref+0x30>)
 80120e6:	4807      	ldr	r0, [pc, #28]	; (8012104 <ip_frag_free_pbuf_custom_ref+0x34>)
 80120e8:	f000 fb98 	bl	801281c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80120ec:	6879      	ldr	r1, [r7, #4]
 80120ee:	2005      	movs	r0, #5
 80120f0:	f7f6 fbae 	bl	8008850 <memp_free>
}
 80120f4:	bf00      	nop
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	080184b0 	.word	0x080184b0
 8012100:	08018668 	.word	0x08018668
 8012104:	080184f8 	.word	0x080184f8

08012108 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d106      	bne.n	8012128 <ipfrag_free_pbuf_custom+0x20>
 801211a:	4b11      	ldr	r3, [pc, #68]	; (8012160 <ipfrag_free_pbuf_custom+0x58>)
 801211c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012120:	4910      	ldr	r1, [pc, #64]	; (8012164 <ipfrag_free_pbuf_custom+0x5c>)
 8012122:	4811      	ldr	r0, [pc, #68]	; (8012168 <ipfrag_free_pbuf_custom+0x60>)
 8012124:	f000 fb7a 	bl	801281c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	429a      	cmp	r2, r3
 801212e:	d006      	beq.n	801213e <ipfrag_free_pbuf_custom+0x36>
 8012130:	4b0b      	ldr	r3, [pc, #44]	; (8012160 <ipfrag_free_pbuf_custom+0x58>)
 8012132:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012136:	490d      	ldr	r1, [pc, #52]	; (801216c <ipfrag_free_pbuf_custom+0x64>)
 8012138:	480b      	ldr	r0, [pc, #44]	; (8012168 <ipfrag_free_pbuf_custom+0x60>)
 801213a:	f000 fb6f 	bl	801281c <iprintf>
  if (pcr->original != NULL) {
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	695b      	ldr	r3, [r3, #20]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d004      	beq.n	8012150 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	695b      	ldr	r3, [r3, #20]
 801214a:	4618      	mov	r0, r3
 801214c:	f7f7 f97a 	bl	8009444 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff ffbd 	bl	80120d0 <ip_frag_free_pbuf_custom_ref>
}
 8012156:	bf00      	nop
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	080184b0 	.word	0x080184b0
 8012164:	08018674 	.word	0x08018674
 8012168:	080184f8 	.word	0x080184f8
 801216c:	08018680 	.word	0x08018680

08012170 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b094      	sub	sp, #80	; 0x50
 8012174:	af02      	add	r7, sp, #8
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801217c:	2300      	movs	r3, #0
 801217e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	8c1b      	ldrh	r3, [r3, #32]
 8012186:	3b14      	subs	r3, #20
 8012188:	2b00      	cmp	r3, #0
 801218a:	da00      	bge.n	801218e <ip4_frag+0x1e>
 801218c:	3307      	adds	r3, #7
 801218e:	10db      	asrs	r3, r3, #3
 8012190:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012192:	2314      	movs	r3, #20
 8012194:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80121a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	f003 030f 	and.w	r3, r3, #15
 80121a8:	b2db      	uxtb	r3, r3
 80121aa:	009b      	lsls	r3, r3, #2
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	2b14      	cmp	r3, #20
 80121b0:	d002      	beq.n	80121b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80121b2:	f06f 0305 	mvn.w	r3, #5
 80121b6:	e10f      	b.n	80123d8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	895b      	ldrh	r3, [r3, #10]
 80121bc:	2b13      	cmp	r3, #19
 80121be:	d809      	bhi.n	80121d4 <ip4_frag+0x64>
 80121c0:	4b87      	ldr	r3, [pc, #540]	; (80123e0 <ip4_frag+0x270>)
 80121c2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80121c6:	4987      	ldr	r1, [pc, #540]	; (80123e4 <ip4_frag+0x274>)
 80121c8:	4887      	ldr	r0, [pc, #540]	; (80123e8 <ip4_frag+0x278>)
 80121ca:	f000 fb27 	bl	801281c <iprintf>
 80121ce:	f06f 0305 	mvn.w	r3, #5
 80121d2:	e101      	b.n	80123d8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80121d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d6:	88db      	ldrh	r3, [r3, #6]
 80121d8:	b29b      	uxth	r3, r3
 80121da:	4618      	mov	r0, r3
 80121dc:	f7f5 fe97 	bl	8007f0e <lwip_htons>
 80121e0:	4603      	mov	r3, r0
 80121e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80121e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80121ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80121f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	891b      	ldrh	r3, [r3, #8]
 80121fa:	3b14      	subs	r3, #20
 80121fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012200:	e0e0      	b.n	80123c4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012202:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012204:	00db      	lsls	r3, r3, #3
 8012206:	b29b      	uxth	r3, r3
 8012208:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801220c:	4293      	cmp	r3, r2
 801220e:	bf28      	it	cs
 8012210:	4613      	movcs	r3, r2
 8012212:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012214:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012218:	2114      	movs	r1, #20
 801221a:	200e      	movs	r0, #14
 801221c:	f7f6 fe32 	bl	8008e84 <pbuf_alloc>
 8012220:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012224:	2b00      	cmp	r3, #0
 8012226:	f000 80d4 	beq.w	80123d2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222c:	895b      	ldrh	r3, [r3, #10]
 801222e:	2b13      	cmp	r3, #19
 8012230:	d806      	bhi.n	8012240 <ip4_frag+0xd0>
 8012232:	4b6b      	ldr	r3, [pc, #428]	; (80123e0 <ip4_frag+0x270>)
 8012234:	f240 3225 	movw	r2, #805	; 0x325
 8012238:	496c      	ldr	r1, [pc, #432]	; (80123ec <ip4_frag+0x27c>)
 801223a:	486b      	ldr	r0, [pc, #428]	; (80123e8 <ip4_frag+0x278>)
 801223c:	f000 faee 	bl	801281c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	2214      	movs	r2, #20
 8012246:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012248:	4618      	mov	r0, r3
 801224a:	f000 fa12 	bl	8012672 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012254:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012256:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801225a:	e064      	b.n	8012326 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	895a      	ldrh	r2, [r3, #10]
 8012260:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012262:	1ad3      	subs	r3, r2, r3
 8012264:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	895b      	ldrh	r3, [r3, #10]
 801226a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801226c:	429a      	cmp	r2, r3
 801226e:	d906      	bls.n	801227e <ip4_frag+0x10e>
 8012270:	4b5b      	ldr	r3, [pc, #364]	; (80123e0 <ip4_frag+0x270>)
 8012272:	f240 322d 	movw	r2, #813	; 0x32d
 8012276:	495e      	ldr	r1, [pc, #376]	; (80123f0 <ip4_frag+0x280>)
 8012278:	485b      	ldr	r0, [pc, #364]	; (80123e8 <ip4_frag+0x278>)
 801227a:	f000 facf 	bl	801281c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801227e:	8bfa      	ldrh	r2, [r7, #30]
 8012280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012284:	4293      	cmp	r3, r2
 8012286:	bf28      	it	cs
 8012288:	4613      	movcs	r3, r2
 801228a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801228e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012292:	2b00      	cmp	r3, #0
 8012294:	d105      	bne.n	80122a2 <ip4_frag+0x132>
        poff = 0;
 8012296:	2300      	movs	r3, #0
 8012298:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	60fb      	str	r3, [r7, #12]
        continue;
 80122a0:	e041      	b.n	8012326 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80122a2:	f7ff ff0d 	bl	80120c0 <ip_frag_alloc_pbuf_custom_ref>
 80122a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d103      	bne.n	80122b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80122ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122b0:	f7f7 f8c8 	bl	8009444 <pbuf_free>
        goto memerr;
 80122b4:	e08e      	b.n	80123d4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80122b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80122bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122be:	4413      	add	r3, r2
 80122c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80122c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80122c8:	9201      	str	r2, [sp, #4]
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	4603      	mov	r3, r0
 80122ce:	2241      	movs	r2, #65	; 0x41
 80122d0:	2000      	movs	r0, #0
 80122d2:	f7f6 fefd 	bl	80090d0 <pbuf_alloced_custom>
 80122d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d106      	bne.n	80122ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80122de:	69b8      	ldr	r0, [r7, #24]
 80122e0:	f7ff fef6 	bl	80120d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80122e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122e6:	f7f7 f8ad 	bl	8009444 <pbuf_free>
        goto memerr;
 80122ea:	e073      	b.n	80123d4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f7f7 f949 	bl	8009584 <pbuf_ref>
      pcr->original = p;
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	68fa      	ldr	r2, [r7, #12]
 80122f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	4a3e      	ldr	r2, [pc, #248]	; (80123f4 <ip4_frag+0x284>)
 80122fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80122fe:	6979      	ldr	r1, [r7, #20]
 8012300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012302:	f7f7 f961 	bl	80095c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012306:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801230a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012318:	2b00      	cmp	r3, #0
 801231a:	d004      	beq.n	8012326 <ip4_frag+0x1b6>
        poff = 0;
 801231c:	2300      	movs	r3, #0
 801231e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012326:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801232a:	2b00      	cmp	r3, #0
 801232c:	d196      	bne.n	801225c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801232e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012334:	4413      	add	r3, r2
 8012336:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	8c1b      	ldrh	r3, [r3, #32]
 8012340:	3b14      	subs	r3, #20
 8012342:	429a      	cmp	r2, r3
 8012344:	bfd4      	ite	le
 8012346:	2301      	movle	r3, #1
 8012348:	2300      	movgt	r3, #0
 801234a:	b2db      	uxtb	r3, r3
 801234c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801234e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012352:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012356:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012358:	6a3b      	ldr	r3, [r7, #32]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <ip4_frag+0x1f4>
 801235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012360:	2b00      	cmp	r3, #0
 8012362:	d003      	beq.n	801236c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012364:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801236a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801236c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801236e:	4618      	mov	r0, r3
 8012370:	f7f5 fdcd 	bl	8007f0e <lwip_htons>
 8012374:	4603      	mov	r3, r0
 8012376:	461a      	mov	r2, r3
 8012378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801237c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801237e:	3314      	adds	r3, #20
 8012380:	b29b      	uxth	r3, r3
 8012382:	4618      	mov	r0, r3
 8012384:	f7f5 fdc3 	bl	8007f0e <lwip_htons>
 8012388:	4603      	mov	r3, r0
 801238a:	461a      	mov	r2, r3
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012392:	2200      	movs	r2, #0
 8012394:	729a      	strb	r2, [r3, #10]
 8012396:	2200      	movs	r2, #0
 8012398:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	695b      	ldr	r3, [r3, #20]
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123a2:	68b8      	ldr	r0, [r7, #8]
 80123a4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80123a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123a8:	f7f7 f84c 	bl	8009444 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80123ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80123b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80123bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80123be:	4413      	add	r3, r2
 80123c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80123c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f47f af1a 	bne.w	8012202 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80123ce:	2300      	movs	r3, #0
 80123d0:	e002      	b.n	80123d8 <ip4_frag+0x268>
      goto memerr;
 80123d2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80123d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3748      	adds	r7, #72	; 0x48
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	080184b0 	.word	0x080184b0
 80123e4:	0801868c 	.word	0x0801868c
 80123e8:	080184f8 	.word	0x080184f8
 80123ec:	080186a8 	.word	0x080186a8
 80123f0:	080186c8 	.word	0x080186c8
 80123f4:	08012109 	.word	0x08012109

080123f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b086      	sub	sp, #24
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012402:	230e      	movs	r3, #14
 8012404:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	895b      	ldrh	r3, [r3, #10]
 801240a:	2b0e      	cmp	r3, #14
 801240c:	d96e      	bls.n	80124ec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	7bdb      	ldrb	r3, [r3, #15]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801241c:	3301      	adds	r3, #1
 801241e:	b2da      	uxtb	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	7b1a      	ldrb	r2, [r3, #12]
 801242e:	7b5b      	ldrb	r3, [r3, #13]
 8012430:	021b      	lsls	r3, r3, #8
 8012432:	4313      	orrs	r3, r2
 8012434:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	f003 0301 	and.w	r3, r3, #1
 801243e:	2b00      	cmp	r3, #0
 8012440:	d023      	beq.n	801248a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d10f      	bne.n	801246a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	785b      	ldrb	r3, [r3, #1]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d11b      	bne.n	801248a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012456:	2b5e      	cmp	r3, #94	; 0x5e
 8012458:	d117      	bne.n	801248a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	7b5b      	ldrb	r3, [r3, #13]
 801245e:	f043 0310 	orr.w	r3, r3, #16
 8012462:	b2da      	uxtb	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	735a      	strb	r2, [r3, #13]
 8012468:	e00f      	b.n	801248a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2206      	movs	r2, #6
 801246e:	4928      	ldr	r1, [pc, #160]	; (8012510 <ethernet_input+0x118>)
 8012470:	4618      	mov	r0, r3
 8012472:	f000 f8ef 	bl	8012654 <memcmp>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d106      	bne.n	801248a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	7b5b      	ldrb	r3, [r3, #13]
 8012480:	f043 0308 	orr.w	r3, r3, #8
 8012484:	b2da      	uxtb	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801248a:	89fb      	ldrh	r3, [r7, #14]
 801248c:	2b08      	cmp	r3, #8
 801248e:	d003      	beq.n	8012498 <ethernet_input+0xa0>
 8012490:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012494:	d014      	beq.n	80124c0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012496:	e032      	b.n	80124fe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801249e:	f003 0308 	and.w	r3, r3, #8
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d024      	beq.n	80124f0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80124a6:	8afb      	ldrh	r3, [r7, #22]
 80124a8:	4619      	mov	r1, r3
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f7f6 ff44 	bl	8009338 <pbuf_remove_header>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d11e      	bne.n	80124f4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80124b6:	6839      	ldr	r1, [r7, #0]
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f7fe ff2d 	bl	8011318 <ip4_input>
      break;
 80124be:	e013      	b.n	80124e8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80124c6:	f003 0308 	and.w	r3, r3, #8
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d014      	beq.n	80124f8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80124ce:	8afb      	ldrh	r3, [r7, #22]
 80124d0:	4619      	mov	r1, r3
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7f6 ff30 	bl	8009338 <pbuf_remove_header>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d10e      	bne.n	80124fc <ethernet_input+0x104>
        etharp_input(p, netif);
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7fe f8cd 	bl	8010680 <etharp_input>
      break;
 80124e6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80124e8:	2300      	movs	r3, #0
 80124ea:	e00c      	b.n	8012506 <ethernet_input+0x10e>
    goto free_and_return;
 80124ec:	bf00      	nop
 80124ee:	e006      	b.n	80124fe <ethernet_input+0x106>
        goto free_and_return;
 80124f0:	bf00      	nop
 80124f2:	e004      	b.n	80124fe <ethernet_input+0x106>
        goto free_and_return;
 80124f4:	bf00      	nop
 80124f6:	e002      	b.n	80124fe <ethernet_input+0x106>
        goto free_and_return;
 80124f8:	bf00      	nop
 80124fa:	e000      	b.n	80124fe <ethernet_input+0x106>
        goto free_and_return;
 80124fc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7f6 ffa0 	bl	8009444 <pbuf_free>
  return ERR_OK;
 8012504:	2300      	movs	r3, #0
}
 8012506:	4618      	mov	r0, r3
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	08018870 	.word	0x08018870

08012514 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012514:	b580      	push	{r7, lr}
 8012516:	b086      	sub	sp, #24
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012522:	8c3b      	ldrh	r3, [r7, #32]
 8012524:	4618      	mov	r0, r3
 8012526:	f7f5 fcf2 	bl	8007f0e <lwip_htons>
 801252a:	4603      	mov	r3, r0
 801252c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801252e:	210e      	movs	r1, #14
 8012530:	68b8      	ldr	r0, [r7, #8]
 8012532:	f7f6 fef1 	bl	8009318 <pbuf_add_header>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	d125      	bne.n	8012588 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	8afa      	ldrh	r2, [r7, #22]
 8012546:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	2206      	movs	r2, #6
 801254c:	6839      	ldr	r1, [r7, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	f000 f88f 	bl	8012672 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	3306      	adds	r3, #6
 8012558:	2206      	movs	r2, #6
 801255a:	6879      	ldr	r1, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	f000 f888 	bl	8012672 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012568:	2b06      	cmp	r3, #6
 801256a:	d006      	beq.n	801257a <ethernet_output+0x66>
 801256c:	4b0a      	ldr	r3, [pc, #40]	; (8012598 <ethernet_output+0x84>)
 801256e:	f240 1233 	movw	r2, #307	; 0x133
 8012572:	490a      	ldr	r1, [pc, #40]	; (801259c <ethernet_output+0x88>)
 8012574:	480a      	ldr	r0, [pc, #40]	; (80125a0 <ethernet_output+0x8c>)
 8012576:	f000 f951 	bl	801281c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	699b      	ldr	r3, [r3, #24]
 801257e:	68b9      	ldr	r1, [r7, #8]
 8012580:	68f8      	ldr	r0, [r7, #12]
 8012582:	4798      	blx	r3
 8012584:	4603      	mov	r3, r0
 8012586:	e002      	b.n	801258e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012588:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801258a:	f06f 0301 	mvn.w	r3, #1
}
 801258e:	4618      	mov	r0, r3
 8012590:	3718      	adds	r7, #24
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	080186d8 	.word	0x080186d8
 801259c:	08018710 	.word	0x08018710
 80125a0:	08018744 	.word	0x08018744

080125a4 <__libc_init_array>:
 80125a4:	b570      	push	{r4, r5, r6, lr}
 80125a6:	4e0d      	ldr	r6, [pc, #52]	; (80125dc <__libc_init_array+0x38>)
 80125a8:	4c0d      	ldr	r4, [pc, #52]	; (80125e0 <__libc_init_array+0x3c>)
 80125aa:	1ba4      	subs	r4, r4, r6
 80125ac:	10a4      	asrs	r4, r4, #2
 80125ae:	2500      	movs	r5, #0
 80125b0:	42a5      	cmp	r5, r4
 80125b2:	d109      	bne.n	80125c8 <__libc_init_array+0x24>
 80125b4:	4e0b      	ldr	r6, [pc, #44]	; (80125e4 <__libc_init_array+0x40>)
 80125b6:	4c0c      	ldr	r4, [pc, #48]	; (80125e8 <__libc_init_array+0x44>)
 80125b8:	f003 fb7e 	bl	8015cb8 <_init>
 80125bc:	1ba4      	subs	r4, r4, r6
 80125be:	10a4      	asrs	r4, r4, #2
 80125c0:	2500      	movs	r5, #0
 80125c2:	42a5      	cmp	r5, r4
 80125c4:	d105      	bne.n	80125d2 <__libc_init_array+0x2e>
 80125c6:	bd70      	pop	{r4, r5, r6, pc}
 80125c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125cc:	4798      	blx	r3
 80125ce:	3501      	adds	r5, #1
 80125d0:	e7ee      	b.n	80125b0 <__libc_init_array+0xc>
 80125d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125d6:	4798      	blx	r3
 80125d8:	3501      	adds	r5, #1
 80125da:	e7f2      	b.n	80125c2 <__libc_init_array+0x1e>
 80125dc:	08018bac 	.word	0x08018bac
 80125e0:	08018bac 	.word	0x08018bac
 80125e4:	08018bac 	.word	0x08018bac
 80125e8:	08018bb0 	.word	0x08018bb0

080125ec <__locale_ctype_ptr_l>:
 80125ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80125f0:	4770      	bx	lr
	...

080125f4 <__locale_ctype_ptr>:
 80125f4:	4b04      	ldr	r3, [pc, #16]	; (8012608 <__locale_ctype_ptr+0x14>)
 80125f6:	4a05      	ldr	r2, [pc, #20]	; (801260c <__locale_ctype_ptr+0x18>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	6a1b      	ldr	r3, [r3, #32]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	bf08      	it	eq
 8012600:	4613      	moveq	r3, r2
 8012602:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8012606:	4770      	bx	lr
 8012608:	20000020 	.word	0x20000020
 801260c:	20000084 	.word	0x20000084

08012610 <malloc>:
 8012610:	4b02      	ldr	r3, [pc, #8]	; (801261c <malloc+0xc>)
 8012612:	4601      	mov	r1, r0
 8012614:	6818      	ldr	r0, [r3, #0]
 8012616:	f000 b8a7 	b.w	8012768 <_malloc_r>
 801261a:	bf00      	nop
 801261c:	20000020 	.word	0x20000020

08012620 <free>:
 8012620:	4b02      	ldr	r3, [pc, #8]	; (801262c <free+0xc>)
 8012622:	4601      	mov	r1, r0
 8012624:	6818      	ldr	r0, [r3, #0]
 8012626:	f000 b851 	b.w	80126cc <_free_r>
 801262a:	bf00      	nop
 801262c:	20000020 	.word	0x20000020

08012630 <__ascii_mbtowc>:
 8012630:	b082      	sub	sp, #8
 8012632:	b901      	cbnz	r1, 8012636 <__ascii_mbtowc+0x6>
 8012634:	a901      	add	r1, sp, #4
 8012636:	b142      	cbz	r2, 801264a <__ascii_mbtowc+0x1a>
 8012638:	b14b      	cbz	r3, 801264e <__ascii_mbtowc+0x1e>
 801263a:	7813      	ldrb	r3, [r2, #0]
 801263c:	600b      	str	r3, [r1, #0]
 801263e:	7812      	ldrb	r2, [r2, #0]
 8012640:	1c10      	adds	r0, r2, #0
 8012642:	bf18      	it	ne
 8012644:	2001      	movne	r0, #1
 8012646:	b002      	add	sp, #8
 8012648:	4770      	bx	lr
 801264a:	4610      	mov	r0, r2
 801264c:	e7fb      	b.n	8012646 <__ascii_mbtowc+0x16>
 801264e:	f06f 0001 	mvn.w	r0, #1
 8012652:	e7f8      	b.n	8012646 <__ascii_mbtowc+0x16>

08012654 <memcmp>:
 8012654:	b530      	push	{r4, r5, lr}
 8012656:	2400      	movs	r4, #0
 8012658:	42a2      	cmp	r2, r4
 801265a:	d101      	bne.n	8012660 <memcmp+0xc>
 801265c:	2000      	movs	r0, #0
 801265e:	e007      	b.n	8012670 <memcmp+0x1c>
 8012660:	5d03      	ldrb	r3, [r0, r4]
 8012662:	3401      	adds	r4, #1
 8012664:	190d      	adds	r5, r1, r4
 8012666:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801266a:	42ab      	cmp	r3, r5
 801266c:	d0f4      	beq.n	8012658 <memcmp+0x4>
 801266e:	1b58      	subs	r0, r3, r5
 8012670:	bd30      	pop	{r4, r5, pc}

08012672 <memcpy>:
 8012672:	b510      	push	{r4, lr}
 8012674:	1e43      	subs	r3, r0, #1
 8012676:	440a      	add	r2, r1
 8012678:	4291      	cmp	r1, r2
 801267a:	d100      	bne.n	801267e <memcpy+0xc>
 801267c:	bd10      	pop	{r4, pc}
 801267e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012686:	e7f7      	b.n	8012678 <memcpy+0x6>

08012688 <memmove>:
 8012688:	4288      	cmp	r0, r1
 801268a:	b510      	push	{r4, lr}
 801268c:	eb01 0302 	add.w	r3, r1, r2
 8012690:	d807      	bhi.n	80126a2 <memmove+0x1a>
 8012692:	1e42      	subs	r2, r0, #1
 8012694:	4299      	cmp	r1, r3
 8012696:	d00a      	beq.n	80126ae <memmove+0x26>
 8012698:	f811 4b01 	ldrb.w	r4, [r1], #1
 801269c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80126a0:	e7f8      	b.n	8012694 <memmove+0xc>
 80126a2:	4283      	cmp	r3, r0
 80126a4:	d9f5      	bls.n	8012692 <memmove+0xa>
 80126a6:	1881      	adds	r1, r0, r2
 80126a8:	1ad2      	subs	r2, r2, r3
 80126aa:	42d3      	cmn	r3, r2
 80126ac:	d100      	bne.n	80126b0 <memmove+0x28>
 80126ae:	bd10      	pop	{r4, pc}
 80126b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80126b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80126b8:	e7f7      	b.n	80126aa <memmove+0x22>

080126ba <memset>:
 80126ba:	4402      	add	r2, r0
 80126bc:	4603      	mov	r3, r0
 80126be:	4293      	cmp	r3, r2
 80126c0:	d100      	bne.n	80126c4 <memset+0xa>
 80126c2:	4770      	bx	lr
 80126c4:	f803 1b01 	strb.w	r1, [r3], #1
 80126c8:	e7f9      	b.n	80126be <memset+0x4>
	...

080126cc <_free_r>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	4605      	mov	r5, r0
 80126d0:	2900      	cmp	r1, #0
 80126d2:	d045      	beq.n	8012760 <_free_r+0x94>
 80126d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126d8:	1f0c      	subs	r4, r1, #4
 80126da:	2b00      	cmp	r3, #0
 80126dc:	bfb8      	it	lt
 80126de:	18e4      	addlt	r4, r4, r3
 80126e0:	f001 fc90 	bl	8014004 <__malloc_lock>
 80126e4:	4a1f      	ldr	r2, [pc, #124]	; (8012764 <_free_r+0x98>)
 80126e6:	6813      	ldr	r3, [r2, #0]
 80126e8:	4610      	mov	r0, r2
 80126ea:	b933      	cbnz	r3, 80126fa <_free_r+0x2e>
 80126ec:	6063      	str	r3, [r4, #4]
 80126ee:	6014      	str	r4, [r2, #0]
 80126f0:	4628      	mov	r0, r5
 80126f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126f6:	f001 bc86 	b.w	8014006 <__malloc_unlock>
 80126fa:	42a3      	cmp	r3, r4
 80126fc:	d90c      	bls.n	8012718 <_free_r+0x4c>
 80126fe:	6821      	ldr	r1, [r4, #0]
 8012700:	1862      	adds	r2, r4, r1
 8012702:	4293      	cmp	r3, r2
 8012704:	bf04      	itt	eq
 8012706:	681a      	ldreq	r2, [r3, #0]
 8012708:	685b      	ldreq	r3, [r3, #4]
 801270a:	6063      	str	r3, [r4, #4]
 801270c:	bf04      	itt	eq
 801270e:	1852      	addeq	r2, r2, r1
 8012710:	6022      	streq	r2, [r4, #0]
 8012712:	6004      	str	r4, [r0, #0]
 8012714:	e7ec      	b.n	80126f0 <_free_r+0x24>
 8012716:	4613      	mov	r3, r2
 8012718:	685a      	ldr	r2, [r3, #4]
 801271a:	b10a      	cbz	r2, 8012720 <_free_r+0x54>
 801271c:	42a2      	cmp	r2, r4
 801271e:	d9fa      	bls.n	8012716 <_free_r+0x4a>
 8012720:	6819      	ldr	r1, [r3, #0]
 8012722:	1858      	adds	r0, r3, r1
 8012724:	42a0      	cmp	r0, r4
 8012726:	d10b      	bne.n	8012740 <_free_r+0x74>
 8012728:	6820      	ldr	r0, [r4, #0]
 801272a:	4401      	add	r1, r0
 801272c:	1858      	adds	r0, r3, r1
 801272e:	4282      	cmp	r2, r0
 8012730:	6019      	str	r1, [r3, #0]
 8012732:	d1dd      	bne.n	80126f0 <_free_r+0x24>
 8012734:	6810      	ldr	r0, [r2, #0]
 8012736:	6852      	ldr	r2, [r2, #4]
 8012738:	605a      	str	r2, [r3, #4]
 801273a:	4401      	add	r1, r0
 801273c:	6019      	str	r1, [r3, #0]
 801273e:	e7d7      	b.n	80126f0 <_free_r+0x24>
 8012740:	d902      	bls.n	8012748 <_free_r+0x7c>
 8012742:	230c      	movs	r3, #12
 8012744:	602b      	str	r3, [r5, #0]
 8012746:	e7d3      	b.n	80126f0 <_free_r+0x24>
 8012748:	6820      	ldr	r0, [r4, #0]
 801274a:	1821      	adds	r1, r4, r0
 801274c:	428a      	cmp	r2, r1
 801274e:	bf04      	itt	eq
 8012750:	6811      	ldreq	r1, [r2, #0]
 8012752:	6852      	ldreq	r2, [r2, #4]
 8012754:	6062      	str	r2, [r4, #4]
 8012756:	bf04      	itt	eq
 8012758:	1809      	addeq	r1, r1, r0
 801275a:	6021      	streq	r1, [r4, #0]
 801275c:	605c      	str	r4, [r3, #4]
 801275e:	e7c7      	b.n	80126f0 <_free_r+0x24>
 8012760:	bd38      	pop	{r3, r4, r5, pc}
 8012762:	bf00      	nop
 8012764:	2000038c 	.word	0x2000038c

08012768 <_malloc_r>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	1ccd      	adds	r5, r1, #3
 801276c:	f025 0503 	bic.w	r5, r5, #3
 8012770:	3508      	adds	r5, #8
 8012772:	2d0c      	cmp	r5, #12
 8012774:	bf38      	it	cc
 8012776:	250c      	movcc	r5, #12
 8012778:	2d00      	cmp	r5, #0
 801277a:	4606      	mov	r6, r0
 801277c:	db01      	blt.n	8012782 <_malloc_r+0x1a>
 801277e:	42a9      	cmp	r1, r5
 8012780:	d903      	bls.n	801278a <_malloc_r+0x22>
 8012782:	230c      	movs	r3, #12
 8012784:	6033      	str	r3, [r6, #0]
 8012786:	2000      	movs	r0, #0
 8012788:	bd70      	pop	{r4, r5, r6, pc}
 801278a:	f001 fc3b 	bl	8014004 <__malloc_lock>
 801278e:	4a21      	ldr	r2, [pc, #132]	; (8012814 <_malloc_r+0xac>)
 8012790:	6814      	ldr	r4, [r2, #0]
 8012792:	4621      	mov	r1, r4
 8012794:	b991      	cbnz	r1, 80127bc <_malloc_r+0x54>
 8012796:	4c20      	ldr	r4, [pc, #128]	; (8012818 <_malloc_r+0xb0>)
 8012798:	6823      	ldr	r3, [r4, #0]
 801279a:	b91b      	cbnz	r3, 80127a4 <_malloc_r+0x3c>
 801279c:	4630      	mov	r0, r6
 801279e:	f000 f891 	bl	80128c4 <_sbrk_r>
 80127a2:	6020      	str	r0, [r4, #0]
 80127a4:	4629      	mov	r1, r5
 80127a6:	4630      	mov	r0, r6
 80127a8:	f000 f88c 	bl	80128c4 <_sbrk_r>
 80127ac:	1c43      	adds	r3, r0, #1
 80127ae:	d124      	bne.n	80127fa <_malloc_r+0x92>
 80127b0:	230c      	movs	r3, #12
 80127b2:	6033      	str	r3, [r6, #0]
 80127b4:	4630      	mov	r0, r6
 80127b6:	f001 fc26 	bl	8014006 <__malloc_unlock>
 80127ba:	e7e4      	b.n	8012786 <_malloc_r+0x1e>
 80127bc:	680b      	ldr	r3, [r1, #0]
 80127be:	1b5b      	subs	r3, r3, r5
 80127c0:	d418      	bmi.n	80127f4 <_malloc_r+0x8c>
 80127c2:	2b0b      	cmp	r3, #11
 80127c4:	d90f      	bls.n	80127e6 <_malloc_r+0x7e>
 80127c6:	600b      	str	r3, [r1, #0]
 80127c8:	50cd      	str	r5, [r1, r3]
 80127ca:	18cc      	adds	r4, r1, r3
 80127cc:	4630      	mov	r0, r6
 80127ce:	f001 fc1a 	bl	8014006 <__malloc_unlock>
 80127d2:	f104 000b 	add.w	r0, r4, #11
 80127d6:	1d23      	adds	r3, r4, #4
 80127d8:	f020 0007 	bic.w	r0, r0, #7
 80127dc:	1ac3      	subs	r3, r0, r3
 80127de:	d0d3      	beq.n	8012788 <_malloc_r+0x20>
 80127e0:	425a      	negs	r2, r3
 80127e2:	50e2      	str	r2, [r4, r3]
 80127e4:	e7d0      	b.n	8012788 <_malloc_r+0x20>
 80127e6:	428c      	cmp	r4, r1
 80127e8:	684b      	ldr	r3, [r1, #4]
 80127ea:	bf16      	itet	ne
 80127ec:	6063      	strne	r3, [r4, #4]
 80127ee:	6013      	streq	r3, [r2, #0]
 80127f0:	460c      	movne	r4, r1
 80127f2:	e7eb      	b.n	80127cc <_malloc_r+0x64>
 80127f4:	460c      	mov	r4, r1
 80127f6:	6849      	ldr	r1, [r1, #4]
 80127f8:	e7cc      	b.n	8012794 <_malloc_r+0x2c>
 80127fa:	1cc4      	adds	r4, r0, #3
 80127fc:	f024 0403 	bic.w	r4, r4, #3
 8012800:	42a0      	cmp	r0, r4
 8012802:	d005      	beq.n	8012810 <_malloc_r+0xa8>
 8012804:	1a21      	subs	r1, r4, r0
 8012806:	4630      	mov	r0, r6
 8012808:	f000 f85c 	bl	80128c4 <_sbrk_r>
 801280c:	3001      	adds	r0, #1
 801280e:	d0cf      	beq.n	80127b0 <_malloc_r+0x48>
 8012810:	6025      	str	r5, [r4, #0]
 8012812:	e7db      	b.n	80127cc <_malloc_r+0x64>
 8012814:	2000038c 	.word	0x2000038c
 8012818:	20000390 	.word	0x20000390

0801281c <iprintf>:
 801281c:	b40f      	push	{r0, r1, r2, r3}
 801281e:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <iprintf+0x2c>)
 8012820:	b513      	push	{r0, r1, r4, lr}
 8012822:	681c      	ldr	r4, [r3, #0]
 8012824:	b124      	cbz	r4, 8012830 <iprintf+0x14>
 8012826:	69a3      	ldr	r3, [r4, #24]
 8012828:	b913      	cbnz	r3, 8012830 <iprintf+0x14>
 801282a:	4620      	mov	r0, r4
 801282c:	f001 f826 	bl	801387c <__sinit>
 8012830:	ab05      	add	r3, sp, #20
 8012832:	9a04      	ldr	r2, [sp, #16]
 8012834:	68a1      	ldr	r1, [r4, #8]
 8012836:	9301      	str	r3, [sp, #4]
 8012838:	4620      	mov	r0, r4
 801283a:	f002 fb3f 	bl	8014ebc <_vfiprintf_r>
 801283e:	b002      	add	sp, #8
 8012840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012844:	b004      	add	sp, #16
 8012846:	4770      	bx	lr
 8012848:	20000020 	.word	0x20000020

0801284c <rand>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	4b13      	ldr	r3, [pc, #76]	; (801289c <rand+0x50>)
 8012850:	681c      	ldr	r4, [r3, #0]
 8012852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012854:	b97b      	cbnz	r3, 8012876 <rand+0x2a>
 8012856:	2018      	movs	r0, #24
 8012858:	f7ff feda 	bl	8012610 <malloc>
 801285c:	4a10      	ldr	r2, [pc, #64]	; (80128a0 <rand+0x54>)
 801285e:	4b11      	ldr	r3, [pc, #68]	; (80128a4 <rand+0x58>)
 8012860:	63a0      	str	r0, [r4, #56]	; 0x38
 8012862:	e9c0 2300 	strd	r2, r3, [r0]
 8012866:	4b10      	ldr	r3, [pc, #64]	; (80128a8 <rand+0x5c>)
 8012868:	6083      	str	r3, [r0, #8]
 801286a:	230b      	movs	r3, #11
 801286c:	8183      	strh	r3, [r0, #12]
 801286e:	2201      	movs	r2, #1
 8012870:	2300      	movs	r3, #0
 8012872:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012876:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012878:	480c      	ldr	r0, [pc, #48]	; (80128ac <rand+0x60>)
 801287a:	690a      	ldr	r2, [r1, #16]
 801287c:	694b      	ldr	r3, [r1, #20]
 801287e:	4c0c      	ldr	r4, [pc, #48]	; (80128b0 <rand+0x64>)
 8012880:	4350      	muls	r0, r2
 8012882:	fb04 0003 	mla	r0, r4, r3, r0
 8012886:	fba2 2304 	umull	r2, r3, r2, r4
 801288a:	4403      	add	r3, r0
 801288c:	1c54      	adds	r4, r2, #1
 801288e:	f143 0500 	adc.w	r5, r3, #0
 8012892:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8012896:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801289a:	bd38      	pop	{r3, r4, r5, pc}
 801289c:	20000020 	.word	0x20000020
 80128a0:	abcd330e 	.word	0xabcd330e
 80128a4:	e66d1234 	.word	0xe66d1234
 80128a8:	0005deec 	.word	0x0005deec
 80128ac:	5851f42d 	.word	0x5851f42d
 80128b0:	4c957f2d 	.word	0x4c957f2d

080128b4 <realloc>:
 80128b4:	4b02      	ldr	r3, [pc, #8]	; (80128c0 <realloc+0xc>)
 80128b6:	460a      	mov	r2, r1
 80128b8:	4601      	mov	r1, r0
 80128ba:	6818      	ldr	r0, [r3, #0]
 80128bc:	f001 bfb1 	b.w	8014822 <_realloc_r>
 80128c0:	20000020 	.word	0x20000020

080128c4 <_sbrk_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4c06      	ldr	r4, [pc, #24]	; (80128e0 <_sbrk_r+0x1c>)
 80128c8:	2300      	movs	r3, #0
 80128ca:	4605      	mov	r5, r0
 80128cc:	4608      	mov	r0, r1
 80128ce:	6023      	str	r3, [r4, #0]
 80128d0:	f7f0 ff02 	bl	80036d8 <_sbrk>
 80128d4:	1c43      	adds	r3, r0, #1
 80128d6:	d102      	bne.n	80128de <_sbrk_r+0x1a>
 80128d8:	6823      	ldr	r3, [r4, #0]
 80128da:	b103      	cbz	r3, 80128de <_sbrk_r+0x1a>
 80128dc:	602b      	str	r3, [r5, #0]
 80128de:	bd38      	pop	{r3, r4, r5, pc}
 80128e0:	20007094 	.word	0x20007094

080128e4 <siprintf>:
 80128e4:	b40e      	push	{r1, r2, r3}
 80128e6:	b500      	push	{lr}
 80128e8:	b09c      	sub	sp, #112	; 0x70
 80128ea:	ab1d      	add	r3, sp, #116	; 0x74
 80128ec:	9002      	str	r0, [sp, #8]
 80128ee:	9006      	str	r0, [sp, #24]
 80128f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80128f4:	4809      	ldr	r0, [pc, #36]	; (801291c <siprintf+0x38>)
 80128f6:	9107      	str	r1, [sp, #28]
 80128f8:	9104      	str	r1, [sp, #16]
 80128fa:	4909      	ldr	r1, [pc, #36]	; (8012920 <siprintf+0x3c>)
 80128fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012900:	9105      	str	r1, [sp, #20]
 8012902:	6800      	ldr	r0, [r0, #0]
 8012904:	9301      	str	r3, [sp, #4]
 8012906:	a902      	add	r1, sp, #8
 8012908:	f002 f80c 	bl	8014924 <_svfiprintf_r>
 801290c:	9b02      	ldr	r3, [sp, #8]
 801290e:	2200      	movs	r2, #0
 8012910:	701a      	strb	r2, [r3, #0]
 8012912:	b01c      	add	sp, #112	; 0x70
 8012914:	f85d eb04 	ldr.w	lr, [sp], #4
 8012918:	b003      	add	sp, #12
 801291a:	4770      	bx	lr
 801291c:	20000020 	.word	0x20000020
 8012920:	ffff0208 	.word	0xffff0208

08012924 <siscanf>:
 8012924:	b40e      	push	{r1, r2, r3}
 8012926:	b530      	push	{r4, r5, lr}
 8012928:	b09c      	sub	sp, #112	; 0x70
 801292a:	ac1f      	add	r4, sp, #124	; 0x7c
 801292c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012930:	f854 5b04 	ldr.w	r5, [r4], #4
 8012934:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012938:	9002      	str	r0, [sp, #8]
 801293a:	9006      	str	r0, [sp, #24]
 801293c:	f7ed fc68 	bl	8000210 <strlen>
 8012940:	4b0b      	ldr	r3, [pc, #44]	; (8012970 <siscanf+0x4c>)
 8012942:	9003      	str	r0, [sp, #12]
 8012944:	9007      	str	r0, [sp, #28]
 8012946:	930b      	str	r3, [sp, #44]	; 0x2c
 8012948:	480a      	ldr	r0, [pc, #40]	; (8012974 <siscanf+0x50>)
 801294a:	9401      	str	r4, [sp, #4]
 801294c:	2300      	movs	r3, #0
 801294e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012950:	9314      	str	r3, [sp, #80]	; 0x50
 8012952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012956:	f8ad 3016 	strh.w	r3, [sp, #22]
 801295a:	462a      	mov	r2, r5
 801295c:	4623      	mov	r3, r4
 801295e:	a902      	add	r1, sp, #8
 8012960:	6800      	ldr	r0, [r0, #0]
 8012962:	f002 f931 	bl	8014bc8 <__ssvfiscanf_r>
 8012966:	b01c      	add	sp, #112	; 0x70
 8012968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801296c:	b003      	add	sp, #12
 801296e:	4770      	bx	lr
 8012970:	0801299b 	.word	0x0801299b
 8012974:	20000020 	.word	0x20000020

08012978 <__sread>:
 8012978:	b510      	push	{r4, lr}
 801297a:	460c      	mov	r4, r1
 801297c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012980:	f002 fe92 	bl	80156a8 <_read_r>
 8012984:	2800      	cmp	r0, #0
 8012986:	bfab      	itete	ge
 8012988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801298a:	89a3      	ldrhlt	r3, [r4, #12]
 801298c:	181b      	addge	r3, r3, r0
 801298e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012992:	bfac      	ite	ge
 8012994:	6563      	strge	r3, [r4, #84]	; 0x54
 8012996:	81a3      	strhlt	r3, [r4, #12]
 8012998:	bd10      	pop	{r4, pc}

0801299a <__seofread>:
 801299a:	2000      	movs	r0, #0
 801299c:	4770      	bx	lr

0801299e <__swrite>:
 801299e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a2:	461f      	mov	r7, r3
 80129a4:	898b      	ldrh	r3, [r1, #12]
 80129a6:	05db      	lsls	r3, r3, #23
 80129a8:	4605      	mov	r5, r0
 80129aa:	460c      	mov	r4, r1
 80129ac:	4616      	mov	r6, r2
 80129ae:	d505      	bpl.n	80129bc <__swrite+0x1e>
 80129b0:	2302      	movs	r3, #2
 80129b2:	2200      	movs	r2, #0
 80129b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129b8:	f001 fb12 	bl	8013fe0 <_lseek_r>
 80129bc:	89a3      	ldrh	r3, [r4, #12]
 80129be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80129c6:	81a3      	strh	r3, [r4, #12]
 80129c8:	4632      	mov	r2, r6
 80129ca:	463b      	mov	r3, r7
 80129cc:	4628      	mov	r0, r5
 80129ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129d2:	f000 bef1 	b.w	80137b8 <_write_r>

080129d6 <__sseek>:
 80129d6:	b510      	push	{r4, lr}
 80129d8:	460c      	mov	r4, r1
 80129da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129de:	f001 faff 	bl	8013fe0 <_lseek_r>
 80129e2:	1c43      	adds	r3, r0, #1
 80129e4:	89a3      	ldrh	r3, [r4, #12]
 80129e6:	bf15      	itete	ne
 80129e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80129ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80129ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80129f2:	81a3      	strheq	r3, [r4, #12]
 80129f4:	bf18      	it	ne
 80129f6:	81a3      	strhne	r3, [r4, #12]
 80129f8:	bd10      	pop	{r4, pc}

080129fa <__sclose>:
 80129fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129fe:	f000 beed 	b.w	80137dc <_close_r>

08012a02 <strcpy>:
 8012a02:	4603      	mov	r3, r0
 8012a04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a08:	f803 2b01 	strb.w	r2, [r3], #1
 8012a0c:	2a00      	cmp	r2, #0
 8012a0e:	d1f9      	bne.n	8012a04 <strcpy+0x2>
 8012a10:	4770      	bx	lr

08012a12 <strncmp>:
 8012a12:	b510      	push	{r4, lr}
 8012a14:	b16a      	cbz	r2, 8012a32 <strncmp+0x20>
 8012a16:	3901      	subs	r1, #1
 8012a18:	1884      	adds	r4, r0, r2
 8012a1a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012a1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d103      	bne.n	8012a2e <strncmp+0x1c>
 8012a26:	42a0      	cmp	r0, r4
 8012a28:	d001      	beq.n	8012a2e <strncmp+0x1c>
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d1f5      	bne.n	8012a1a <strncmp+0x8>
 8012a2e:	1a98      	subs	r0, r3, r2
 8012a30:	bd10      	pop	{r4, pc}
 8012a32:	4610      	mov	r0, r2
 8012a34:	e7fc      	b.n	8012a30 <strncmp+0x1e>

08012a36 <sulp>:
 8012a36:	b570      	push	{r4, r5, r6, lr}
 8012a38:	4604      	mov	r4, r0
 8012a3a:	460d      	mov	r5, r1
 8012a3c:	ec45 4b10 	vmov	d0, r4, r5
 8012a40:	4616      	mov	r6, r2
 8012a42:	f001 fdad 	bl	80145a0 <__ulp>
 8012a46:	ec51 0b10 	vmov	r0, r1, d0
 8012a4a:	b17e      	cbz	r6, 8012a6c <sulp+0x36>
 8012a4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012a50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dd09      	ble.n	8012a6c <sulp+0x36>
 8012a58:	051b      	lsls	r3, r3, #20
 8012a5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012a5e:	2400      	movs	r4, #0
 8012a60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012a64:	4622      	mov	r2, r4
 8012a66:	462b      	mov	r3, r5
 8012a68:	f7ed fde6 	bl	8000638 <__aeabi_dmul>
 8012a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a70 <_strtod_l>:
 8012a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a74:	461f      	mov	r7, r3
 8012a76:	b0a1      	sub	sp, #132	; 0x84
 8012a78:	2300      	movs	r3, #0
 8012a7a:	4681      	mov	r9, r0
 8012a7c:	4638      	mov	r0, r7
 8012a7e:	460e      	mov	r6, r1
 8012a80:	9217      	str	r2, [sp, #92]	; 0x5c
 8012a82:	931c      	str	r3, [sp, #112]	; 0x70
 8012a84:	f001 faaa 	bl	8013fdc <__localeconv_l>
 8012a88:	4680      	mov	r8, r0
 8012a8a:	6800      	ldr	r0, [r0, #0]
 8012a8c:	f7ed fbc0 	bl	8000210 <strlen>
 8012a90:	f04f 0a00 	mov.w	sl, #0
 8012a94:	4604      	mov	r4, r0
 8012a96:	f04f 0b00 	mov.w	fp, #0
 8012a9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8012a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012a9e:	781a      	ldrb	r2, [r3, #0]
 8012aa0:	2a0d      	cmp	r2, #13
 8012aa2:	d832      	bhi.n	8012b0a <_strtod_l+0x9a>
 8012aa4:	2a09      	cmp	r2, #9
 8012aa6:	d236      	bcs.n	8012b16 <_strtod_l+0xa6>
 8012aa8:	2a00      	cmp	r2, #0
 8012aaa:	d03e      	beq.n	8012b2a <_strtod_l+0xba>
 8012aac:	2300      	movs	r3, #0
 8012aae:	930d      	str	r3, [sp, #52]	; 0x34
 8012ab0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012ab2:	782b      	ldrb	r3, [r5, #0]
 8012ab4:	2b30      	cmp	r3, #48	; 0x30
 8012ab6:	f040 80ac 	bne.w	8012c12 <_strtod_l+0x1a2>
 8012aba:	786b      	ldrb	r3, [r5, #1]
 8012abc:	2b58      	cmp	r3, #88	; 0x58
 8012abe:	d001      	beq.n	8012ac4 <_strtod_l+0x54>
 8012ac0:	2b78      	cmp	r3, #120	; 0x78
 8012ac2:	d167      	bne.n	8012b94 <_strtod_l+0x124>
 8012ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ac6:	9301      	str	r3, [sp, #4]
 8012ac8:	ab1c      	add	r3, sp, #112	; 0x70
 8012aca:	9300      	str	r3, [sp, #0]
 8012acc:	9702      	str	r7, [sp, #8]
 8012ace:	ab1d      	add	r3, sp, #116	; 0x74
 8012ad0:	4a88      	ldr	r2, [pc, #544]	; (8012cf4 <_strtod_l+0x284>)
 8012ad2:	a91b      	add	r1, sp, #108	; 0x6c
 8012ad4:	4648      	mov	r0, r9
 8012ad6:	f000 ffaa 	bl	8013a2e <__gethex>
 8012ada:	f010 0407 	ands.w	r4, r0, #7
 8012ade:	4606      	mov	r6, r0
 8012ae0:	d005      	beq.n	8012aee <_strtod_l+0x7e>
 8012ae2:	2c06      	cmp	r4, #6
 8012ae4:	d12b      	bne.n	8012b3e <_strtod_l+0xce>
 8012ae6:	3501      	adds	r5, #1
 8012ae8:	2300      	movs	r3, #0
 8012aea:	951b      	str	r5, [sp, #108]	; 0x6c
 8012aec:	930d      	str	r3, [sp, #52]	; 0x34
 8012aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f040 859a 	bne.w	801362a <_strtod_l+0xbba>
 8012af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012af8:	b1e3      	cbz	r3, 8012b34 <_strtod_l+0xc4>
 8012afa:	4652      	mov	r2, sl
 8012afc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012b00:	ec43 2b10 	vmov	d0, r2, r3
 8012b04:	b021      	add	sp, #132	; 0x84
 8012b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b0a:	2a2b      	cmp	r2, #43	; 0x2b
 8012b0c:	d015      	beq.n	8012b3a <_strtod_l+0xca>
 8012b0e:	2a2d      	cmp	r2, #45	; 0x2d
 8012b10:	d004      	beq.n	8012b1c <_strtod_l+0xac>
 8012b12:	2a20      	cmp	r2, #32
 8012b14:	d1ca      	bne.n	8012aac <_strtod_l+0x3c>
 8012b16:	3301      	adds	r3, #1
 8012b18:	931b      	str	r3, [sp, #108]	; 0x6c
 8012b1a:	e7bf      	b.n	8012a9c <_strtod_l+0x2c>
 8012b1c:	2201      	movs	r2, #1
 8012b1e:	920d      	str	r2, [sp, #52]	; 0x34
 8012b20:	1c5a      	adds	r2, r3, #1
 8012b22:	921b      	str	r2, [sp, #108]	; 0x6c
 8012b24:	785b      	ldrb	r3, [r3, #1]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1c2      	bne.n	8012ab0 <_strtod_l+0x40>
 8012b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f040 8579 	bne.w	8013626 <_strtod_l+0xbb6>
 8012b34:	4652      	mov	r2, sl
 8012b36:	465b      	mov	r3, fp
 8012b38:	e7e2      	b.n	8012b00 <_strtod_l+0x90>
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	e7ef      	b.n	8012b1e <_strtod_l+0xae>
 8012b3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012b40:	b13a      	cbz	r2, 8012b52 <_strtod_l+0xe2>
 8012b42:	2135      	movs	r1, #53	; 0x35
 8012b44:	a81e      	add	r0, sp, #120	; 0x78
 8012b46:	f001 fe23 	bl	8014790 <__copybits>
 8012b4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012b4c:	4648      	mov	r0, r9
 8012b4e:	f001 fa8f 	bl	8014070 <_Bfree>
 8012b52:	3c01      	subs	r4, #1
 8012b54:	2c04      	cmp	r4, #4
 8012b56:	d806      	bhi.n	8012b66 <_strtod_l+0xf6>
 8012b58:	e8df f004 	tbb	[pc, r4]
 8012b5c:	1714030a 	.word	0x1714030a
 8012b60:	0a          	.byte	0x0a
 8012b61:	00          	.byte	0x00
 8012b62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012b66:	0730      	lsls	r0, r6, #28
 8012b68:	d5c1      	bpl.n	8012aee <_strtod_l+0x7e>
 8012b6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012b6e:	e7be      	b.n	8012aee <_strtod_l+0x7e>
 8012b70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012b74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012b76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012b7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012b7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012b82:	e7f0      	b.n	8012b66 <_strtod_l+0xf6>
 8012b84:	f8df b170 	ldr.w	fp, [pc, #368]	; 8012cf8 <_strtod_l+0x288>
 8012b88:	e7ed      	b.n	8012b66 <_strtod_l+0xf6>
 8012b8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8012b92:	e7e8      	b.n	8012b66 <_strtod_l+0xf6>
 8012b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012b96:	1c5a      	adds	r2, r3, #1
 8012b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8012b9a:	785b      	ldrb	r3, [r3, #1]
 8012b9c:	2b30      	cmp	r3, #48	; 0x30
 8012b9e:	d0f9      	beq.n	8012b94 <_strtod_l+0x124>
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d0a4      	beq.n	8012aee <_strtod_l+0x7e>
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	2500      	movs	r5, #0
 8012ba8:	9306      	str	r3, [sp, #24]
 8012baa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012bac:	9308      	str	r3, [sp, #32]
 8012bae:	9507      	str	r5, [sp, #28]
 8012bb0:	9505      	str	r5, [sp, #20]
 8012bb2:	220a      	movs	r2, #10
 8012bb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012bb6:	7807      	ldrb	r7, [r0, #0]
 8012bb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012bbc:	b2d9      	uxtb	r1, r3
 8012bbe:	2909      	cmp	r1, #9
 8012bc0:	d929      	bls.n	8012c16 <_strtod_l+0x1a6>
 8012bc2:	4622      	mov	r2, r4
 8012bc4:	f8d8 1000 	ldr.w	r1, [r8]
 8012bc8:	f7ff ff23 	bl	8012a12 <strncmp>
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	d031      	beq.n	8012c34 <_strtod_l+0x1c4>
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	9c05      	ldr	r4, [sp, #20]
 8012bd4:	9004      	str	r0, [sp, #16]
 8012bd6:	463b      	mov	r3, r7
 8012bd8:	4602      	mov	r2, r0
 8012bda:	2b65      	cmp	r3, #101	; 0x65
 8012bdc:	d001      	beq.n	8012be2 <_strtod_l+0x172>
 8012bde:	2b45      	cmp	r3, #69	; 0x45
 8012be0:	d114      	bne.n	8012c0c <_strtod_l+0x19c>
 8012be2:	b924      	cbnz	r4, 8012bee <_strtod_l+0x17e>
 8012be4:	b910      	cbnz	r0, 8012bec <_strtod_l+0x17c>
 8012be6:	9b06      	ldr	r3, [sp, #24]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d09e      	beq.n	8012b2a <_strtod_l+0xba>
 8012bec:	2400      	movs	r4, #0
 8012bee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012bf0:	1c73      	adds	r3, r6, #1
 8012bf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8012bf4:	7873      	ldrb	r3, [r6, #1]
 8012bf6:	2b2b      	cmp	r3, #43	; 0x2b
 8012bf8:	d078      	beq.n	8012cec <_strtod_l+0x27c>
 8012bfa:	2b2d      	cmp	r3, #45	; 0x2d
 8012bfc:	d070      	beq.n	8012ce0 <_strtod_l+0x270>
 8012bfe:	f04f 0c00 	mov.w	ip, #0
 8012c02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012c06:	2f09      	cmp	r7, #9
 8012c08:	d97c      	bls.n	8012d04 <_strtod_l+0x294>
 8012c0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8012c0c:	f04f 0e00 	mov.w	lr, #0
 8012c10:	e09a      	b.n	8012d48 <_strtod_l+0x2d8>
 8012c12:	2300      	movs	r3, #0
 8012c14:	e7c7      	b.n	8012ba6 <_strtod_l+0x136>
 8012c16:	9905      	ldr	r1, [sp, #20]
 8012c18:	2908      	cmp	r1, #8
 8012c1a:	bfdd      	ittte	le
 8012c1c:	9907      	ldrle	r1, [sp, #28]
 8012c1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8012c22:	9307      	strle	r3, [sp, #28]
 8012c24:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012c28:	9b05      	ldr	r3, [sp, #20]
 8012c2a:	3001      	adds	r0, #1
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	9305      	str	r3, [sp, #20]
 8012c30:	901b      	str	r0, [sp, #108]	; 0x6c
 8012c32:	e7bf      	b.n	8012bb4 <_strtod_l+0x144>
 8012c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c36:	191a      	adds	r2, r3, r4
 8012c38:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c3a:	9a05      	ldr	r2, [sp, #20]
 8012c3c:	5d1b      	ldrb	r3, [r3, r4]
 8012c3e:	2a00      	cmp	r2, #0
 8012c40:	d037      	beq.n	8012cb2 <_strtod_l+0x242>
 8012c42:	9c05      	ldr	r4, [sp, #20]
 8012c44:	4602      	mov	r2, r0
 8012c46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012c4a:	2909      	cmp	r1, #9
 8012c4c:	d913      	bls.n	8012c76 <_strtod_l+0x206>
 8012c4e:	2101      	movs	r1, #1
 8012c50:	9104      	str	r1, [sp, #16]
 8012c52:	e7c2      	b.n	8012bda <_strtod_l+0x16a>
 8012c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c56:	1c5a      	adds	r2, r3, #1
 8012c58:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c5a:	785b      	ldrb	r3, [r3, #1]
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	2b30      	cmp	r3, #48	; 0x30
 8012c60:	d0f8      	beq.n	8012c54 <_strtod_l+0x1e4>
 8012c62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012c66:	2a08      	cmp	r2, #8
 8012c68:	f200 84e4 	bhi.w	8013634 <_strtod_l+0xbc4>
 8012c6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012c6e:	9208      	str	r2, [sp, #32]
 8012c70:	4602      	mov	r2, r0
 8012c72:	2000      	movs	r0, #0
 8012c74:	4604      	mov	r4, r0
 8012c76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012c7a:	f100 0101 	add.w	r1, r0, #1
 8012c7e:	d012      	beq.n	8012ca6 <_strtod_l+0x236>
 8012c80:	440a      	add	r2, r1
 8012c82:	eb00 0c04 	add.w	ip, r0, r4
 8012c86:	4621      	mov	r1, r4
 8012c88:	270a      	movs	r7, #10
 8012c8a:	458c      	cmp	ip, r1
 8012c8c:	d113      	bne.n	8012cb6 <_strtod_l+0x246>
 8012c8e:	1821      	adds	r1, r4, r0
 8012c90:	2908      	cmp	r1, #8
 8012c92:	f104 0401 	add.w	r4, r4, #1
 8012c96:	4404      	add	r4, r0
 8012c98:	dc19      	bgt.n	8012cce <_strtod_l+0x25e>
 8012c9a:	9b07      	ldr	r3, [sp, #28]
 8012c9c:	210a      	movs	r1, #10
 8012c9e:	fb01 e303 	mla	r3, r1, r3, lr
 8012ca2:	9307      	str	r3, [sp, #28]
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ca8:	1c58      	adds	r0, r3, #1
 8012caa:	901b      	str	r0, [sp, #108]	; 0x6c
 8012cac:	785b      	ldrb	r3, [r3, #1]
 8012cae:	4608      	mov	r0, r1
 8012cb0:	e7c9      	b.n	8012c46 <_strtod_l+0x1d6>
 8012cb2:	9805      	ldr	r0, [sp, #20]
 8012cb4:	e7d3      	b.n	8012c5e <_strtod_l+0x1ee>
 8012cb6:	2908      	cmp	r1, #8
 8012cb8:	f101 0101 	add.w	r1, r1, #1
 8012cbc:	dc03      	bgt.n	8012cc6 <_strtod_l+0x256>
 8012cbe:	9b07      	ldr	r3, [sp, #28]
 8012cc0:	437b      	muls	r3, r7
 8012cc2:	9307      	str	r3, [sp, #28]
 8012cc4:	e7e1      	b.n	8012c8a <_strtod_l+0x21a>
 8012cc6:	2910      	cmp	r1, #16
 8012cc8:	bfd8      	it	le
 8012cca:	437d      	mulle	r5, r7
 8012ccc:	e7dd      	b.n	8012c8a <_strtod_l+0x21a>
 8012cce:	2c10      	cmp	r4, #16
 8012cd0:	bfdc      	itt	le
 8012cd2:	210a      	movle	r1, #10
 8012cd4:	fb01 e505 	mlale	r5, r1, r5, lr
 8012cd8:	e7e4      	b.n	8012ca4 <_strtod_l+0x234>
 8012cda:	2301      	movs	r3, #1
 8012cdc:	9304      	str	r3, [sp, #16]
 8012cde:	e781      	b.n	8012be4 <_strtod_l+0x174>
 8012ce0:	f04f 0c01 	mov.w	ip, #1
 8012ce4:	1cb3      	adds	r3, r6, #2
 8012ce6:	931b      	str	r3, [sp, #108]	; 0x6c
 8012ce8:	78b3      	ldrb	r3, [r6, #2]
 8012cea:	e78a      	b.n	8012c02 <_strtod_l+0x192>
 8012cec:	f04f 0c00 	mov.w	ip, #0
 8012cf0:	e7f8      	b.n	8012ce4 <_strtod_l+0x274>
 8012cf2:	bf00      	nop
 8012cf4:	0801889c 	.word	0x0801889c
 8012cf8:	7ff00000 	.word	0x7ff00000
 8012cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cfe:	1c5f      	adds	r7, r3, #1
 8012d00:	971b      	str	r7, [sp, #108]	; 0x6c
 8012d02:	785b      	ldrb	r3, [r3, #1]
 8012d04:	2b30      	cmp	r3, #48	; 0x30
 8012d06:	d0f9      	beq.n	8012cfc <_strtod_l+0x28c>
 8012d08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012d0c:	2f08      	cmp	r7, #8
 8012d0e:	f63f af7d 	bhi.w	8012c0c <_strtod_l+0x19c>
 8012d12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012d16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d18:	930a      	str	r3, [sp, #40]	; 0x28
 8012d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d1c:	1c5f      	adds	r7, r3, #1
 8012d1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8012d20:	785b      	ldrb	r3, [r3, #1]
 8012d22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012d26:	f1b8 0f09 	cmp.w	r8, #9
 8012d2a:	d937      	bls.n	8012d9c <_strtod_l+0x32c>
 8012d2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012d2e:	1a7f      	subs	r7, r7, r1
 8012d30:	2f08      	cmp	r7, #8
 8012d32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012d36:	dc37      	bgt.n	8012da8 <_strtod_l+0x338>
 8012d38:	45be      	cmp	lr, r7
 8012d3a:	bfa8      	it	ge
 8012d3c:	46be      	movge	lr, r7
 8012d3e:	f1bc 0f00 	cmp.w	ip, #0
 8012d42:	d001      	beq.n	8012d48 <_strtod_l+0x2d8>
 8012d44:	f1ce 0e00 	rsb	lr, lr, #0
 8012d48:	2c00      	cmp	r4, #0
 8012d4a:	d151      	bne.n	8012df0 <_strtod_l+0x380>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	f47f aece 	bne.w	8012aee <_strtod_l+0x7e>
 8012d52:	9a06      	ldr	r2, [sp, #24]
 8012d54:	2a00      	cmp	r2, #0
 8012d56:	f47f aeca 	bne.w	8012aee <_strtod_l+0x7e>
 8012d5a:	9a04      	ldr	r2, [sp, #16]
 8012d5c:	2a00      	cmp	r2, #0
 8012d5e:	f47f aee4 	bne.w	8012b2a <_strtod_l+0xba>
 8012d62:	2b4e      	cmp	r3, #78	; 0x4e
 8012d64:	d027      	beq.n	8012db6 <_strtod_l+0x346>
 8012d66:	dc21      	bgt.n	8012dac <_strtod_l+0x33c>
 8012d68:	2b49      	cmp	r3, #73	; 0x49
 8012d6a:	f47f aede 	bne.w	8012b2a <_strtod_l+0xba>
 8012d6e:	49a0      	ldr	r1, [pc, #640]	; (8012ff0 <_strtod_l+0x580>)
 8012d70:	a81b      	add	r0, sp, #108	; 0x6c
 8012d72:	f001 f88f 	bl	8013e94 <__match>
 8012d76:	2800      	cmp	r0, #0
 8012d78:	f43f aed7 	beq.w	8012b2a <_strtod_l+0xba>
 8012d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d7e:	499d      	ldr	r1, [pc, #628]	; (8012ff4 <_strtod_l+0x584>)
 8012d80:	3b01      	subs	r3, #1
 8012d82:	a81b      	add	r0, sp, #108	; 0x6c
 8012d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8012d86:	f001 f885 	bl	8013e94 <__match>
 8012d8a:	b910      	cbnz	r0, 8012d92 <_strtod_l+0x322>
 8012d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d8e:	3301      	adds	r3, #1
 8012d90:	931b      	str	r3, [sp, #108]	; 0x6c
 8012d92:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013008 <_strtod_l+0x598>
 8012d96:	f04f 0a00 	mov.w	sl, #0
 8012d9a:	e6a8      	b.n	8012aee <_strtod_l+0x7e>
 8012d9c:	210a      	movs	r1, #10
 8012d9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012da2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012da6:	e7b8      	b.n	8012d1a <_strtod_l+0x2aa>
 8012da8:	46be      	mov	lr, r7
 8012daa:	e7c8      	b.n	8012d3e <_strtod_l+0x2ce>
 8012dac:	2b69      	cmp	r3, #105	; 0x69
 8012dae:	d0de      	beq.n	8012d6e <_strtod_l+0x2fe>
 8012db0:	2b6e      	cmp	r3, #110	; 0x6e
 8012db2:	f47f aeba 	bne.w	8012b2a <_strtod_l+0xba>
 8012db6:	4990      	ldr	r1, [pc, #576]	; (8012ff8 <_strtod_l+0x588>)
 8012db8:	a81b      	add	r0, sp, #108	; 0x6c
 8012dba:	f001 f86b 	bl	8013e94 <__match>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	f43f aeb3 	beq.w	8012b2a <_strtod_l+0xba>
 8012dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b28      	cmp	r3, #40	; 0x28
 8012dca:	d10e      	bne.n	8012dea <_strtod_l+0x37a>
 8012dcc:	aa1e      	add	r2, sp, #120	; 0x78
 8012dce:	498b      	ldr	r1, [pc, #556]	; (8012ffc <_strtod_l+0x58c>)
 8012dd0:	a81b      	add	r0, sp, #108	; 0x6c
 8012dd2:	f001 f873 	bl	8013ebc <__hexnan>
 8012dd6:	2805      	cmp	r0, #5
 8012dd8:	d107      	bne.n	8012dea <_strtod_l+0x37a>
 8012dda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012ddc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012de0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012de4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012de8:	e681      	b.n	8012aee <_strtod_l+0x7e>
 8012dea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013010 <_strtod_l+0x5a0>
 8012dee:	e7d2      	b.n	8012d96 <_strtod_l+0x326>
 8012df0:	ebae 0302 	sub.w	r3, lr, r2
 8012df4:	9306      	str	r3, [sp, #24]
 8012df6:	9b05      	ldr	r3, [sp, #20]
 8012df8:	9807      	ldr	r0, [sp, #28]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	bf08      	it	eq
 8012dfe:	4623      	moveq	r3, r4
 8012e00:	2c10      	cmp	r4, #16
 8012e02:	9305      	str	r3, [sp, #20]
 8012e04:	46a0      	mov	r8, r4
 8012e06:	bfa8      	it	ge
 8012e08:	f04f 0810 	movge.w	r8, #16
 8012e0c:	f7ed fb9a 	bl	8000544 <__aeabi_ui2d>
 8012e10:	2c09      	cmp	r4, #9
 8012e12:	4682      	mov	sl, r0
 8012e14:	468b      	mov	fp, r1
 8012e16:	dc13      	bgt.n	8012e40 <_strtod_l+0x3d0>
 8012e18:	9b06      	ldr	r3, [sp, #24]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f43f ae67 	beq.w	8012aee <_strtod_l+0x7e>
 8012e20:	9b06      	ldr	r3, [sp, #24]
 8012e22:	dd7a      	ble.n	8012f1a <_strtod_l+0x4aa>
 8012e24:	2b16      	cmp	r3, #22
 8012e26:	dc61      	bgt.n	8012eec <_strtod_l+0x47c>
 8012e28:	4a75      	ldr	r2, [pc, #468]	; (8013000 <_strtod_l+0x590>)
 8012e2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012e2e:	e9de 0100 	ldrd	r0, r1, [lr]
 8012e32:	4652      	mov	r2, sl
 8012e34:	465b      	mov	r3, fp
 8012e36:	f7ed fbff 	bl	8000638 <__aeabi_dmul>
 8012e3a:	4682      	mov	sl, r0
 8012e3c:	468b      	mov	fp, r1
 8012e3e:	e656      	b.n	8012aee <_strtod_l+0x7e>
 8012e40:	4b6f      	ldr	r3, [pc, #444]	; (8013000 <_strtod_l+0x590>)
 8012e42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012e46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012e4a:	f7ed fbf5 	bl	8000638 <__aeabi_dmul>
 8012e4e:	4606      	mov	r6, r0
 8012e50:	4628      	mov	r0, r5
 8012e52:	460f      	mov	r7, r1
 8012e54:	f7ed fb76 	bl	8000544 <__aeabi_ui2d>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	460b      	mov	r3, r1
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	4639      	mov	r1, r7
 8012e60:	f7ed fa34 	bl	80002cc <__adddf3>
 8012e64:	2c0f      	cmp	r4, #15
 8012e66:	4682      	mov	sl, r0
 8012e68:	468b      	mov	fp, r1
 8012e6a:	ddd5      	ble.n	8012e18 <_strtod_l+0x3a8>
 8012e6c:	9b06      	ldr	r3, [sp, #24]
 8012e6e:	eba4 0808 	sub.w	r8, r4, r8
 8012e72:	4498      	add	r8, r3
 8012e74:	f1b8 0f00 	cmp.w	r8, #0
 8012e78:	f340 8096 	ble.w	8012fa8 <_strtod_l+0x538>
 8012e7c:	f018 030f 	ands.w	r3, r8, #15
 8012e80:	d00a      	beq.n	8012e98 <_strtod_l+0x428>
 8012e82:	495f      	ldr	r1, [pc, #380]	; (8013000 <_strtod_l+0x590>)
 8012e84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012e88:	4652      	mov	r2, sl
 8012e8a:	465b      	mov	r3, fp
 8012e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012e90:	f7ed fbd2 	bl	8000638 <__aeabi_dmul>
 8012e94:	4682      	mov	sl, r0
 8012e96:	468b      	mov	fp, r1
 8012e98:	f038 080f 	bics.w	r8, r8, #15
 8012e9c:	d073      	beq.n	8012f86 <_strtod_l+0x516>
 8012e9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012ea2:	dd47      	ble.n	8012f34 <_strtod_l+0x4c4>
 8012ea4:	2400      	movs	r4, #0
 8012ea6:	46a0      	mov	r8, r4
 8012ea8:	9407      	str	r4, [sp, #28]
 8012eaa:	9405      	str	r4, [sp, #20]
 8012eac:	2322      	movs	r3, #34	; 0x22
 8012eae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013008 <_strtod_l+0x598>
 8012eb2:	f8c9 3000 	str.w	r3, [r9]
 8012eb6:	f04f 0a00 	mov.w	sl, #0
 8012eba:	9b07      	ldr	r3, [sp, #28]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	f43f ae16 	beq.w	8012aee <_strtod_l+0x7e>
 8012ec2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012ec4:	4648      	mov	r0, r9
 8012ec6:	f001 f8d3 	bl	8014070 <_Bfree>
 8012eca:	9905      	ldr	r1, [sp, #20]
 8012ecc:	4648      	mov	r0, r9
 8012ece:	f001 f8cf 	bl	8014070 <_Bfree>
 8012ed2:	4641      	mov	r1, r8
 8012ed4:	4648      	mov	r0, r9
 8012ed6:	f001 f8cb 	bl	8014070 <_Bfree>
 8012eda:	9907      	ldr	r1, [sp, #28]
 8012edc:	4648      	mov	r0, r9
 8012ede:	f001 f8c7 	bl	8014070 <_Bfree>
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	4648      	mov	r0, r9
 8012ee6:	f001 f8c3 	bl	8014070 <_Bfree>
 8012eea:	e600      	b.n	8012aee <_strtod_l+0x7e>
 8012eec:	9a06      	ldr	r2, [sp, #24]
 8012eee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	dbba      	blt.n	8012e6c <_strtod_l+0x3fc>
 8012ef6:	4d42      	ldr	r5, [pc, #264]	; (8013000 <_strtod_l+0x590>)
 8012ef8:	f1c4 040f 	rsb	r4, r4, #15
 8012efc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012f00:	4652      	mov	r2, sl
 8012f02:	465b      	mov	r3, fp
 8012f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f08:	f7ed fb96 	bl	8000638 <__aeabi_dmul>
 8012f0c:	9b06      	ldr	r3, [sp, #24]
 8012f0e:	1b1c      	subs	r4, r3, r4
 8012f10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012f14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f18:	e78d      	b.n	8012e36 <_strtod_l+0x3c6>
 8012f1a:	f113 0f16 	cmn.w	r3, #22
 8012f1e:	dba5      	blt.n	8012e6c <_strtod_l+0x3fc>
 8012f20:	4a37      	ldr	r2, [pc, #220]	; (8013000 <_strtod_l+0x590>)
 8012f22:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012f26:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012f2a:	4650      	mov	r0, sl
 8012f2c:	4659      	mov	r1, fp
 8012f2e:	f7ed fcad 	bl	800088c <__aeabi_ddiv>
 8012f32:	e782      	b.n	8012e3a <_strtod_l+0x3ca>
 8012f34:	2300      	movs	r3, #0
 8012f36:	4e33      	ldr	r6, [pc, #204]	; (8013004 <_strtod_l+0x594>)
 8012f38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	4659      	mov	r1, fp
 8012f40:	461d      	mov	r5, r3
 8012f42:	f1b8 0f01 	cmp.w	r8, #1
 8012f46:	dc21      	bgt.n	8012f8c <_strtod_l+0x51c>
 8012f48:	b10b      	cbz	r3, 8012f4e <_strtod_l+0x4de>
 8012f4a:	4682      	mov	sl, r0
 8012f4c:	468b      	mov	fp, r1
 8012f4e:	4b2d      	ldr	r3, [pc, #180]	; (8013004 <_strtod_l+0x594>)
 8012f50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012f54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012f58:	4652      	mov	r2, sl
 8012f5a:	465b      	mov	r3, fp
 8012f5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012f60:	f7ed fb6a 	bl	8000638 <__aeabi_dmul>
 8012f64:	4b28      	ldr	r3, [pc, #160]	; (8013008 <_strtod_l+0x598>)
 8012f66:	460a      	mov	r2, r1
 8012f68:	400b      	ands	r3, r1
 8012f6a:	4928      	ldr	r1, [pc, #160]	; (801300c <_strtod_l+0x59c>)
 8012f6c:	428b      	cmp	r3, r1
 8012f6e:	4682      	mov	sl, r0
 8012f70:	d898      	bhi.n	8012ea4 <_strtod_l+0x434>
 8012f72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012f76:	428b      	cmp	r3, r1
 8012f78:	bf86      	itte	hi
 8012f7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013014 <_strtod_l+0x5a4>
 8012f7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012f82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012f86:	2300      	movs	r3, #0
 8012f88:	9304      	str	r3, [sp, #16]
 8012f8a:	e077      	b.n	801307c <_strtod_l+0x60c>
 8012f8c:	f018 0f01 	tst.w	r8, #1
 8012f90:	d006      	beq.n	8012fa0 <_strtod_l+0x530>
 8012f92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	f7ed fb4d 	bl	8000638 <__aeabi_dmul>
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	3501      	adds	r5, #1
 8012fa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012fa6:	e7cc      	b.n	8012f42 <_strtod_l+0x4d2>
 8012fa8:	d0ed      	beq.n	8012f86 <_strtod_l+0x516>
 8012faa:	f1c8 0800 	rsb	r8, r8, #0
 8012fae:	f018 020f 	ands.w	r2, r8, #15
 8012fb2:	d00a      	beq.n	8012fca <_strtod_l+0x55a>
 8012fb4:	4b12      	ldr	r3, [pc, #72]	; (8013000 <_strtod_l+0x590>)
 8012fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fba:	4650      	mov	r0, sl
 8012fbc:	4659      	mov	r1, fp
 8012fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc2:	f7ed fc63 	bl	800088c <__aeabi_ddiv>
 8012fc6:	4682      	mov	sl, r0
 8012fc8:	468b      	mov	fp, r1
 8012fca:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012fce:	d0da      	beq.n	8012f86 <_strtod_l+0x516>
 8012fd0:	f1b8 0f1f 	cmp.w	r8, #31
 8012fd4:	dd20      	ble.n	8013018 <_strtod_l+0x5a8>
 8012fd6:	2400      	movs	r4, #0
 8012fd8:	46a0      	mov	r8, r4
 8012fda:	9407      	str	r4, [sp, #28]
 8012fdc:	9405      	str	r4, [sp, #20]
 8012fde:	2322      	movs	r3, #34	; 0x22
 8012fe0:	f04f 0a00 	mov.w	sl, #0
 8012fe4:	f04f 0b00 	mov.w	fp, #0
 8012fe8:	f8c9 3000 	str.w	r3, [r9]
 8012fec:	e765      	b.n	8012eba <_strtod_l+0x44a>
 8012fee:	bf00      	nop
 8012ff0:	0801888e 	.word	0x0801888e
 8012ff4:	08018891 	.word	0x08018891
 8012ff8:	08018897 	.word	0x08018897
 8012ffc:	080188b0 	.word	0x080188b0
 8013000:	08018a80 	.word	0x08018a80
 8013004:	08018a58 	.word	0x08018a58
 8013008:	7ff00000 	.word	0x7ff00000
 801300c:	7ca00000 	.word	0x7ca00000
 8013010:	fff80000 	.word	0xfff80000
 8013014:	7fefffff 	.word	0x7fefffff
 8013018:	f018 0310 	ands.w	r3, r8, #16
 801301c:	bf18      	it	ne
 801301e:	236a      	movne	r3, #106	; 0x6a
 8013020:	4da0      	ldr	r5, [pc, #640]	; (80132a4 <_strtod_l+0x834>)
 8013022:	9304      	str	r3, [sp, #16]
 8013024:	4650      	mov	r0, sl
 8013026:	4659      	mov	r1, fp
 8013028:	2300      	movs	r3, #0
 801302a:	f1b8 0f00 	cmp.w	r8, #0
 801302e:	f300 810a 	bgt.w	8013246 <_strtod_l+0x7d6>
 8013032:	b10b      	cbz	r3, 8013038 <_strtod_l+0x5c8>
 8013034:	4682      	mov	sl, r0
 8013036:	468b      	mov	fp, r1
 8013038:	9b04      	ldr	r3, [sp, #16]
 801303a:	b1bb      	cbz	r3, 801306c <_strtod_l+0x5fc>
 801303c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013040:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013044:	2b00      	cmp	r3, #0
 8013046:	4659      	mov	r1, fp
 8013048:	dd10      	ble.n	801306c <_strtod_l+0x5fc>
 801304a:	2b1f      	cmp	r3, #31
 801304c:	f340 8107 	ble.w	801325e <_strtod_l+0x7ee>
 8013050:	2b34      	cmp	r3, #52	; 0x34
 8013052:	bfde      	ittt	le
 8013054:	3b20      	suble	r3, #32
 8013056:	f04f 32ff 	movle.w	r2, #4294967295
 801305a:	fa02 f303 	lslle.w	r3, r2, r3
 801305e:	f04f 0a00 	mov.w	sl, #0
 8013062:	bfcc      	ite	gt
 8013064:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013068:	ea03 0b01 	andle.w	fp, r3, r1
 801306c:	2200      	movs	r2, #0
 801306e:	2300      	movs	r3, #0
 8013070:	4650      	mov	r0, sl
 8013072:	4659      	mov	r1, fp
 8013074:	f7ed fd48 	bl	8000b08 <__aeabi_dcmpeq>
 8013078:	2800      	cmp	r0, #0
 801307a:	d1ac      	bne.n	8012fd6 <_strtod_l+0x566>
 801307c:	9b07      	ldr	r3, [sp, #28]
 801307e:	9300      	str	r3, [sp, #0]
 8013080:	9a05      	ldr	r2, [sp, #20]
 8013082:	9908      	ldr	r1, [sp, #32]
 8013084:	4623      	mov	r3, r4
 8013086:	4648      	mov	r0, r9
 8013088:	f001 f844 	bl	8014114 <__s2b>
 801308c:	9007      	str	r0, [sp, #28]
 801308e:	2800      	cmp	r0, #0
 8013090:	f43f af08 	beq.w	8012ea4 <_strtod_l+0x434>
 8013094:	9a06      	ldr	r2, [sp, #24]
 8013096:	9b06      	ldr	r3, [sp, #24]
 8013098:	2a00      	cmp	r2, #0
 801309a:	f1c3 0300 	rsb	r3, r3, #0
 801309e:	bfa8      	it	ge
 80130a0:	2300      	movge	r3, #0
 80130a2:	930e      	str	r3, [sp, #56]	; 0x38
 80130a4:	2400      	movs	r4, #0
 80130a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80130aa:	9316      	str	r3, [sp, #88]	; 0x58
 80130ac:	46a0      	mov	r8, r4
 80130ae:	9b07      	ldr	r3, [sp, #28]
 80130b0:	4648      	mov	r0, r9
 80130b2:	6859      	ldr	r1, [r3, #4]
 80130b4:	f000 ffa8 	bl	8014008 <_Balloc>
 80130b8:	9005      	str	r0, [sp, #20]
 80130ba:	2800      	cmp	r0, #0
 80130bc:	f43f aef6 	beq.w	8012eac <_strtod_l+0x43c>
 80130c0:	9b07      	ldr	r3, [sp, #28]
 80130c2:	691a      	ldr	r2, [r3, #16]
 80130c4:	3202      	adds	r2, #2
 80130c6:	f103 010c 	add.w	r1, r3, #12
 80130ca:	0092      	lsls	r2, r2, #2
 80130cc:	300c      	adds	r0, #12
 80130ce:	f7ff fad0 	bl	8012672 <memcpy>
 80130d2:	aa1e      	add	r2, sp, #120	; 0x78
 80130d4:	a91d      	add	r1, sp, #116	; 0x74
 80130d6:	ec4b ab10 	vmov	d0, sl, fp
 80130da:	4648      	mov	r0, r9
 80130dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80130e0:	f001 fad4 	bl	801468c <__d2b>
 80130e4:	901c      	str	r0, [sp, #112]	; 0x70
 80130e6:	2800      	cmp	r0, #0
 80130e8:	f43f aee0 	beq.w	8012eac <_strtod_l+0x43c>
 80130ec:	2101      	movs	r1, #1
 80130ee:	4648      	mov	r0, r9
 80130f0:	f001 f89c 	bl	801422c <__i2b>
 80130f4:	4680      	mov	r8, r0
 80130f6:	2800      	cmp	r0, #0
 80130f8:	f43f aed8 	beq.w	8012eac <_strtod_l+0x43c>
 80130fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80130fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013100:	2e00      	cmp	r6, #0
 8013102:	bfab      	itete	ge
 8013104:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013106:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013108:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801310a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801310c:	bfac      	ite	ge
 801310e:	18f7      	addge	r7, r6, r3
 8013110:	1b9d      	sublt	r5, r3, r6
 8013112:	9b04      	ldr	r3, [sp, #16]
 8013114:	1af6      	subs	r6, r6, r3
 8013116:	4416      	add	r6, r2
 8013118:	4b63      	ldr	r3, [pc, #396]	; (80132a8 <_strtod_l+0x838>)
 801311a:	3e01      	subs	r6, #1
 801311c:	429e      	cmp	r6, r3
 801311e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013122:	f280 80af 	bge.w	8013284 <_strtod_l+0x814>
 8013126:	1b9b      	subs	r3, r3, r6
 8013128:	2b1f      	cmp	r3, #31
 801312a:	eba2 0203 	sub.w	r2, r2, r3
 801312e:	f04f 0101 	mov.w	r1, #1
 8013132:	f300 809b 	bgt.w	801326c <_strtod_l+0x7fc>
 8013136:	fa01 f303 	lsl.w	r3, r1, r3
 801313a:	930f      	str	r3, [sp, #60]	; 0x3c
 801313c:	2300      	movs	r3, #0
 801313e:	930a      	str	r3, [sp, #40]	; 0x28
 8013140:	18be      	adds	r6, r7, r2
 8013142:	9b04      	ldr	r3, [sp, #16]
 8013144:	42b7      	cmp	r7, r6
 8013146:	4415      	add	r5, r2
 8013148:	441d      	add	r5, r3
 801314a:	463b      	mov	r3, r7
 801314c:	bfa8      	it	ge
 801314e:	4633      	movge	r3, r6
 8013150:	42ab      	cmp	r3, r5
 8013152:	bfa8      	it	ge
 8013154:	462b      	movge	r3, r5
 8013156:	2b00      	cmp	r3, #0
 8013158:	bfc2      	ittt	gt
 801315a:	1af6      	subgt	r6, r6, r3
 801315c:	1aed      	subgt	r5, r5, r3
 801315e:	1aff      	subgt	r7, r7, r3
 8013160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013162:	b1bb      	cbz	r3, 8013194 <_strtod_l+0x724>
 8013164:	4641      	mov	r1, r8
 8013166:	461a      	mov	r2, r3
 8013168:	4648      	mov	r0, r9
 801316a:	f001 f8ff 	bl	801436c <__pow5mult>
 801316e:	4680      	mov	r8, r0
 8013170:	2800      	cmp	r0, #0
 8013172:	f43f ae9b 	beq.w	8012eac <_strtod_l+0x43c>
 8013176:	4601      	mov	r1, r0
 8013178:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801317a:	4648      	mov	r0, r9
 801317c:	f001 f85f 	bl	801423e <__multiply>
 8013180:	900c      	str	r0, [sp, #48]	; 0x30
 8013182:	2800      	cmp	r0, #0
 8013184:	f43f ae92 	beq.w	8012eac <_strtod_l+0x43c>
 8013188:	991c      	ldr	r1, [sp, #112]	; 0x70
 801318a:	4648      	mov	r0, r9
 801318c:	f000 ff70 	bl	8014070 <_Bfree>
 8013190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013192:	931c      	str	r3, [sp, #112]	; 0x70
 8013194:	2e00      	cmp	r6, #0
 8013196:	dc7a      	bgt.n	801328e <_strtod_l+0x81e>
 8013198:	9b06      	ldr	r3, [sp, #24]
 801319a:	2b00      	cmp	r3, #0
 801319c:	dd08      	ble.n	80131b0 <_strtod_l+0x740>
 801319e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80131a0:	9905      	ldr	r1, [sp, #20]
 80131a2:	4648      	mov	r0, r9
 80131a4:	f001 f8e2 	bl	801436c <__pow5mult>
 80131a8:	9005      	str	r0, [sp, #20]
 80131aa:	2800      	cmp	r0, #0
 80131ac:	f43f ae7e 	beq.w	8012eac <_strtod_l+0x43c>
 80131b0:	2d00      	cmp	r5, #0
 80131b2:	dd08      	ble.n	80131c6 <_strtod_l+0x756>
 80131b4:	462a      	mov	r2, r5
 80131b6:	9905      	ldr	r1, [sp, #20]
 80131b8:	4648      	mov	r0, r9
 80131ba:	f001 f925 	bl	8014408 <__lshift>
 80131be:	9005      	str	r0, [sp, #20]
 80131c0:	2800      	cmp	r0, #0
 80131c2:	f43f ae73 	beq.w	8012eac <_strtod_l+0x43c>
 80131c6:	2f00      	cmp	r7, #0
 80131c8:	dd08      	ble.n	80131dc <_strtod_l+0x76c>
 80131ca:	4641      	mov	r1, r8
 80131cc:	463a      	mov	r2, r7
 80131ce:	4648      	mov	r0, r9
 80131d0:	f001 f91a 	bl	8014408 <__lshift>
 80131d4:	4680      	mov	r8, r0
 80131d6:	2800      	cmp	r0, #0
 80131d8:	f43f ae68 	beq.w	8012eac <_strtod_l+0x43c>
 80131dc:	9a05      	ldr	r2, [sp, #20]
 80131de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80131e0:	4648      	mov	r0, r9
 80131e2:	f001 f97f 	bl	80144e4 <__mdiff>
 80131e6:	4604      	mov	r4, r0
 80131e8:	2800      	cmp	r0, #0
 80131ea:	f43f ae5f 	beq.w	8012eac <_strtod_l+0x43c>
 80131ee:	68c3      	ldr	r3, [r0, #12]
 80131f0:	930c      	str	r3, [sp, #48]	; 0x30
 80131f2:	2300      	movs	r3, #0
 80131f4:	60c3      	str	r3, [r0, #12]
 80131f6:	4641      	mov	r1, r8
 80131f8:	f001 f95a 	bl	80144b0 <__mcmp>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	da55      	bge.n	80132ac <_strtod_l+0x83c>
 8013200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013202:	b9e3      	cbnz	r3, 801323e <_strtod_l+0x7ce>
 8013204:	f1ba 0f00 	cmp.w	sl, #0
 8013208:	d119      	bne.n	801323e <_strtod_l+0x7ce>
 801320a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801320e:	b9b3      	cbnz	r3, 801323e <_strtod_l+0x7ce>
 8013210:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013214:	0d1b      	lsrs	r3, r3, #20
 8013216:	051b      	lsls	r3, r3, #20
 8013218:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801321c:	d90f      	bls.n	801323e <_strtod_l+0x7ce>
 801321e:	6963      	ldr	r3, [r4, #20]
 8013220:	b913      	cbnz	r3, 8013228 <_strtod_l+0x7b8>
 8013222:	6923      	ldr	r3, [r4, #16]
 8013224:	2b01      	cmp	r3, #1
 8013226:	dd0a      	ble.n	801323e <_strtod_l+0x7ce>
 8013228:	4621      	mov	r1, r4
 801322a:	2201      	movs	r2, #1
 801322c:	4648      	mov	r0, r9
 801322e:	f001 f8eb 	bl	8014408 <__lshift>
 8013232:	4641      	mov	r1, r8
 8013234:	4604      	mov	r4, r0
 8013236:	f001 f93b 	bl	80144b0 <__mcmp>
 801323a:	2800      	cmp	r0, #0
 801323c:	dc67      	bgt.n	801330e <_strtod_l+0x89e>
 801323e:	9b04      	ldr	r3, [sp, #16]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d171      	bne.n	8013328 <_strtod_l+0x8b8>
 8013244:	e63d      	b.n	8012ec2 <_strtod_l+0x452>
 8013246:	f018 0f01 	tst.w	r8, #1
 801324a:	d004      	beq.n	8013256 <_strtod_l+0x7e6>
 801324c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013250:	f7ed f9f2 	bl	8000638 <__aeabi_dmul>
 8013254:	2301      	movs	r3, #1
 8013256:	ea4f 0868 	mov.w	r8, r8, asr #1
 801325a:	3508      	adds	r5, #8
 801325c:	e6e5      	b.n	801302a <_strtod_l+0x5ba>
 801325e:	f04f 32ff 	mov.w	r2, #4294967295
 8013262:	fa02 f303 	lsl.w	r3, r2, r3
 8013266:	ea03 0a0a 	and.w	sl, r3, sl
 801326a:	e6ff      	b.n	801306c <_strtod_l+0x5fc>
 801326c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013270:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013274:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013278:	36e2      	adds	r6, #226	; 0xe2
 801327a:	fa01 f306 	lsl.w	r3, r1, r6
 801327e:	930a      	str	r3, [sp, #40]	; 0x28
 8013280:	910f      	str	r1, [sp, #60]	; 0x3c
 8013282:	e75d      	b.n	8013140 <_strtod_l+0x6d0>
 8013284:	2300      	movs	r3, #0
 8013286:	930a      	str	r3, [sp, #40]	; 0x28
 8013288:	2301      	movs	r3, #1
 801328a:	930f      	str	r3, [sp, #60]	; 0x3c
 801328c:	e758      	b.n	8013140 <_strtod_l+0x6d0>
 801328e:	4632      	mov	r2, r6
 8013290:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013292:	4648      	mov	r0, r9
 8013294:	f001 f8b8 	bl	8014408 <__lshift>
 8013298:	901c      	str	r0, [sp, #112]	; 0x70
 801329a:	2800      	cmp	r0, #0
 801329c:	f47f af7c 	bne.w	8013198 <_strtod_l+0x728>
 80132a0:	e604      	b.n	8012eac <_strtod_l+0x43c>
 80132a2:	bf00      	nop
 80132a4:	080188c8 	.word	0x080188c8
 80132a8:	fffffc02 	.word	0xfffffc02
 80132ac:	465d      	mov	r5, fp
 80132ae:	f040 8086 	bne.w	80133be <_strtod_l+0x94e>
 80132b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80132b8:	b32a      	cbz	r2, 8013306 <_strtod_l+0x896>
 80132ba:	4aaf      	ldr	r2, [pc, #700]	; (8013578 <_strtod_l+0xb08>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d153      	bne.n	8013368 <_strtod_l+0x8f8>
 80132c0:	9b04      	ldr	r3, [sp, #16]
 80132c2:	4650      	mov	r0, sl
 80132c4:	b1d3      	cbz	r3, 80132fc <_strtod_l+0x88c>
 80132c6:	4aad      	ldr	r2, [pc, #692]	; (801357c <_strtod_l+0xb0c>)
 80132c8:	402a      	ands	r2, r5
 80132ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80132ce:	f04f 31ff 	mov.w	r1, #4294967295
 80132d2:	d816      	bhi.n	8013302 <_strtod_l+0x892>
 80132d4:	0d12      	lsrs	r2, r2, #20
 80132d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80132da:	fa01 f303 	lsl.w	r3, r1, r3
 80132de:	4298      	cmp	r0, r3
 80132e0:	d142      	bne.n	8013368 <_strtod_l+0x8f8>
 80132e2:	4ba7      	ldr	r3, [pc, #668]	; (8013580 <_strtod_l+0xb10>)
 80132e4:	429d      	cmp	r5, r3
 80132e6:	d102      	bne.n	80132ee <_strtod_l+0x87e>
 80132e8:	3001      	adds	r0, #1
 80132ea:	f43f addf 	beq.w	8012eac <_strtod_l+0x43c>
 80132ee:	4ba3      	ldr	r3, [pc, #652]	; (801357c <_strtod_l+0xb0c>)
 80132f0:	402b      	ands	r3, r5
 80132f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80132f6:	f04f 0a00 	mov.w	sl, #0
 80132fa:	e7a0      	b.n	801323e <_strtod_l+0x7ce>
 80132fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013300:	e7ed      	b.n	80132de <_strtod_l+0x86e>
 8013302:	460b      	mov	r3, r1
 8013304:	e7eb      	b.n	80132de <_strtod_l+0x86e>
 8013306:	bb7b      	cbnz	r3, 8013368 <_strtod_l+0x8f8>
 8013308:	f1ba 0f00 	cmp.w	sl, #0
 801330c:	d12c      	bne.n	8013368 <_strtod_l+0x8f8>
 801330e:	9904      	ldr	r1, [sp, #16]
 8013310:	4a9a      	ldr	r2, [pc, #616]	; (801357c <_strtod_l+0xb0c>)
 8013312:	465b      	mov	r3, fp
 8013314:	b1f1      	cbz	r1, 8013354 <_strtod_l+0x8e4>
 8013316:	ea02 010b 	and.w	r1, r2, fp
 801331a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801331e:	dc19      	bgt.n	8013354 <_strtod_l+0x8e4>
 8013320:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013324:	f77f ae5b 	ble.w	8012fde <_strtod_l+0x56e>
 8013328:	4a96      	ldr	r2, [pc, #600]	; (8013584 <_strtod_l+0xb14>)
 801332a:	2300      	movs	r3, #0
 801332c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013330:	4650      	mov	r0, sl
 8013332:	4659      	mov	r1, fp
 8013334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013338:	f7ed f97e 	bl	8000638 <__aeabi_dmul>
 801333c:	4682      	mov	sl, r0
 801333e:	468b      	mov	fp, r1
 8013340:	2900      	cmp	r1, #0
 8013342:	f47f adbe 	bne.w	8012ec2 <_strtod_l+0x452>
 8013346:	2800      	cmp	r0, #0
 8013348:	f47f adbb 	bne.w	8012ec2 <_strtod_l+0x452>
 801334c:	2322      	movs	r3, #34	; 0x22
 801334e:	f8c9 3000 	str.w	r3, [r9]
 8013352:	e5b6      	b.n	8012ec2 <_strtod_l+0x452>
 8013354:	4013      	ands	r3, r2
 8013356:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801335a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801335e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013362:	f04f 3aff 	mov.w	sl, #4294967295
 8013366:	e76a      	b.n	801323e <_strtod_l+0x7ce>
 8013368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801336a:	b193      	cbz	r3, 8013392 <_strtod_l+0x922>
 801336c:	422b      	tst	r3, r5
 801336e:	f43f af66 	beq.w	801323e <_strtod_l+0x7ce>
 8013372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013374:	9a04      	ldr	r2, [sp, #16]
 8013376:	4650      	mov	r0, sl
 8013378:	4659      	mov	r1, fp
 801337a:	b173      	cbz	r3, 801339a <_strtod_l+0x92a>
 801337c:	f7ff fb5b 	bl	8012a36 <sulp>
 8013380:	4602      	mov	r2, r0
 8013382:	460b      	mov	r3, r1
 8013384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013388:	f7ec ffa0 	bl	80002cc <__adddf3>
 801338c:	4682      	mov	sl, r0
 801338e:	468b      	mov	fp, r1
 8013390:	e755      	b.n	801323e <_strtod_l+0x7ce>
 8013392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013394:	ea13 0f0a 	tst.w	r3, sl
 8013398:	e7e9      	b.n	801336e <_strtod_l+0x8fe>
 801339a:	f7ff fb4c 	bl	8012a36 <sulp>
 801339e:	4602      	mov	r2, r0
 80133a0:	460b      	mov	r3, r1
 80133a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80133a6:	f7ec ff8f 	bl	80002c8 <__aeabi_dsub>
 80133aa:	2200      	movs	r2, #0
 80133ac:	2300      	movs	r3, #0
 80133ae:	4682      	mov	sl, r0
 80133b0:	468b      	mov	fp, r1
 80133b2:	f7ed fba9 	bl	8000b08 <__aeabi_dcmpeq>
 80133b6:	2800      	cmp	r0, #0
 80133b8:	f47f ae11 	bne.w	8012fde <_strtod_l+0x56e>
 80133bc:	e73f      	b.n	801323e <_strtod_l+0x7ce>
 80133be:	4641      	mov	r1, r8
 80133c0:	4620      	mov	r0, r4
 80133c2:	f001 f9b2 	bl	801472a <__ratio>
 80133c6:	ec57 6b10 	vmov	r6, r7, d0
 80133ca:	2200      	movs	r2, #0
 80133cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80133d0:	ee10 0a10 	vmov	r0, s0
 80133d4:	4639      	mov	r1, r7
 80133d6:	f7ed fbab 	bl	8000b30 <__aeabi_dcmple>
 80133da:	2800      	cmp	r0, #0
 80133dc:	d077      	beq.n	80134ce <_strtod_l+0xa5e>
 80133de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d04a      	beq.n	801347a <_strtod_l+0xa0a>
 80133e4:	4b68      	ldr	r3, [pc, #416]	; (8013588 <_strtod_l+0xb18>)
 80133e6:	2200      	movs	r2, #0
 80133e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80133ec:	4f66      	ldr	r7, [pc, #408]	; (8013588 <_strtod_l+0xb18>)
 80133ee:	2600      	movs	r6, #0
 80133f0:	4b62      	ldr	r3, [pc, #392]	; (801357c <_strtod_l+0xb0c>)
 80133f2:	402b      	ands	r3, r5
 80133f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80133f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80133f8:	4b64      	ldr	r3, [pc, #400]	; (801358c <_strtod_l+0xb1c>)
 80133fa:	429a      	cmp	r2, r3
 80133fc:	f040 80ce 	bne.w	801359c <_strtod_l+0xb2c>
 8013400:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013404:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013408:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801340c:	ec4b ab10 	vmov	d0, sl, fp
 8013410:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013418:	f001 f8c2 	bl	80145a0 <__ulp>
 801341c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013420:	ec53 2b10 	vmov	r2, r3, d0
 8013424:	f7ed f908 	bl	8000638 <__aeabi_dmul>
 8013428:	4652      	mov	r2, sl
 801342a:	465b      	mov	r3, fp
 801342c:	f7ec ff4e 	bl	80002cc <__adddf3>
 8013430:	460b      	mov	r3, r1
 8013432:	4952      	ldr	r1, [pc, #328]	; (801357c <_strtod_l+0xb0c>)
 8013434:	4a56      	ldr	r2, [pc, #344]	; (8013590 <_strtod_l+0xb20>)
 8013436:	4019      	ands	r1, r3
 8013438:	4291      	cmp	r1, r2
 801343a:	4682      	mov	sl, r0
 801343c:	d95b      	bls.n	80134f6 <_strtod_l+0xa86>
 801343e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013440:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013444:	4293      	cmp	r3, r2
 8013446:	d103      	bne.n	8013450 <_strtod_l+0x9e0>
 8013448:	9b08      	ldr	r3, [sp, #32]
 801344a:	3301      	adds	r3, #1
 801344c:	f43f ad2e 	beq.w	8012eac <_strtod_l+0x43c>
 8013450:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013580 <_strtod_l+0xb10>
 8013454:	f04f 3aff 	mov.w	sl, #4294967295
 8013458:	991c      	ldr	r1, [sp, #112]	; 0x70
 801345a:	4648      	mov	r0, r9
 801345c:	f000 fe08 	bl	8014070 <_Bfree>
 8013460:	9905      	ldr	r1, [sp, #20]
 8013462:	4648      	mov	r0, r9
 8013464:	f000 fe04 	bl	8014070 <_Bfree>
 8013468:	4641      	mov	r1, r8
 801346a:	4648      	mov	r0, r9
 801346c:	f000 fe00 	bl	8014070 <_Bfree>
 8013470:	4621      	mov	r1, r4
 8013472:	4648      	mov	r0, r9
 8013474:	f000 fdfc 	bl	8014070 <_Bfree>
 8013478:	e619      	b.n	80130ae <_strtod_l+0x63e>
 801347a:	f1ba 0f00 	cmp.w	sl, #0
 801347e:	d11a      	bne.n	80134b6 <_strtod_l+0xa46>
 8013480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013484:	b9eb      	cbnz	r3, 80134c2 <_strtod_l+0xa52>
 8013486:	2200      	movs	r2, #0
 8013488:	4b3f      	ldr	r3, [pc, #252]	; (8013588 <_strtod_l+0xb18>)
 801348a:	4630      	mov	r0, r6
 801348c:	4639      	mov	r1, r7
 801348e:	f7ed fb45 	bl	8000b1c <__aeabi_dcmplt>
 8013492:	b9c8      	cbnz	r0, 80134c8 <_strtod_l+0xa58>
 8013494:	4630      	mov	r0, r6
 8013496:	4639      	mov	r1, r7
 8013498:	2200      	movs	r2, #0
 801349a:	4b3e      	ldr	r3, [pc, #248]	; (8013594 <_strtod_l+0xb24>)
 801349c:	f7ed f8cc 	bl	8000638 <__aeabi_dmul>
 80134a0:	4606      	mov	r6, r0
 80134a2:	460f      	mov	r7, r1
 80134a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80134a8:	9618      	str	r6, [sp, #96]	; 0x60
 80134aa:	9319      	str	r3, [sp, #100]	; 0x64
 80134ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80134b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80134b4:	e79c      	b.n	80133f0 <_strtod_l+0x980>
 80134b6:	f1ba 0f01 	cmp.w	sl, #1
 80134ba:	d102      	bne.n	80134c2 <_strtod_l+0xa52>
 80134bc:	2d00      	cmp	r5, #0
 80134be:	f43f ad8e 	beq.w	8012fde <_strtod_l+0x56e>
 80134c2:	2200      	movs	r2, #0
 80134c4:	4b34      	ldr	r3, [pc, #208]	; (8013598 <_strtod_l+0xb28>)
 80134c6:	e78f      	b.n	80133e8 <_strtod_l+0x978>
 80134c8:	2600      	movs	r6, #0
 80134ca:	4f32      	ldr	r7, [pc, #200]	; (8013594 <_strtod_l+0xb24>)
 80134cc:	e7ea      	b.n	80134a4 <_strtod_l+0xa34>
 80134ce:	4b31      	ldr	r3, [pc, #196]	; (8013594 <_strtod_l+0xb24>)
 80134d0:	4630      	mov	r0, r6
 80134d2:	4639      	mov	r1, r7
 80134d4:	2200      	movs	r2, #0
 80134d6:	f7ed f8af 	bl	8000638 <__aeabi_dmul>
 80134da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134dc:	4606      	mov	r6, r0
 80134de:	460f      	mov	r7, r1
 80134e0:	b933      	cbnz	r3, 80134f0 <_strtod_l+0xa80>
 80134e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134e6:	9010      	str	r0, [sp, #64]	; 0x40
 80134e8:	9311      	str	r3, [sp, #68]	; 0x44
 80134ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80134ee:	e7df      	b.n	80134b0 <_strtod_l+0xa40>
 80134f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80134f4:	e7f9      	b.n	80134ea <_strtod_l+0xa7a>
 80134f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80134fa:	9b04      	ldr	r3, [sp, #16]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d1ab      	bne.n	8013458 <_strtod_l+0x9e8>
 8013500:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013504:	0d1b      	lsrs	r3, r3, #20
 8013506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013508:	051b      	lsls	r3, r3, #20
 801350a:	429a      	cmp	r2, r3
 801350c:	465d      	mov	r5, fp
 801350e:	d1a3      	bne.n	8013458 <_strtod_l+0x9e8>
 8013510:	4639      	mov	r1, r7
 8013512:	4630      	mov	r0, r6
 8013514:	f7ed fb40 	bl	8000b98 <__aeabi_d2iz>
 8013518:	f7ed f824 	bl	8000564 <__aeabi_i2d>
 801351c:	460b      	mov	r3, r1
 801351e:	4602      	mov	r2, r0
 8013520:	4639      	mov	r1, r7
 8013522:	4630      	mov	r0, r6
 8013524:	f7ec fed0 	bl	80002c8 <__aeabi_dsub>
 8013528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801352a:	4606      	mov	r6, r0
 801352c:	460f      	mov	r7, r1
 801352e:	b933      	cbnz	r3, 801353e <_strtod_l+0xace>
 8013530:	f1ba 0f00 	cmp.w	sl, #0
 8013534:	d103      	bne.n	801353e <_strtod_l+0xace>
 8013536:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801353a:	2d00      	cmp	r5, #0
 801353c:	d06d      	beq.n	801361a <_strtod_l+0xbaa>
 801353e:	a30a      	add	r3, pc, #40	; (adr r3, 8013568 <_strtod_l+0xaf8>)
 8013540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013544:	4630      	mov	r0, r6
 8013546:	4639      	mov	r1, r7
 8013548:	f7ed fae8 	bl	8000b1c <__aeabi_dcmplt>
 801354c:	2800      	cmp	r0, #0
 801354e:	f47f acb8 	bne.w	8012ec2 <_strtod_l+0x452>
 8013552:	a307      	add	r3, pc, #28	; (adr r3, 8013570 <_strtod_l+0xb00>)
 8013554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013558:	4630      	mov	r0, r6
 801355a:	4639      	mov	r1, r7
 801355c:	f7ed fafc 	bl	8000b58 <__aeabi_dcmpgt>
 8013560:	2800      	cmp	r0, #0
 8013562:	f43f af79 	beq.w	8013458 <_strtod_l+0x9e8>
 8013566:	e4ac      	b.n	8012ec2 <_strtod_l+0x452>
 8013568:	94a03595 	.word	0x94a03595
 801356c:	3fdfffff 	.word	0x3fdfffff
 8013570:	35afe535 	.word	0x35afe535
 8013574:	3fe00000 	.word	0x3fe00000
 8013578:	000fffff 	.word	0x000fffff
 801357c:	7ff00000 	.word	0x7ff00000
 8013580:	7fefffff 	.word	0x7fefffff
 8013584:	39500000 	.word	0x39500000
 8013588:	3ff00000 	.word	0x3ff00000
 801358c:	7fe00000 	.word	0x7fe00000
 8013590:	7c9fffff 	.word	0x7c9fffff
 8013594:	3fe00000 	.word	0x3fe00000
 8013598:	bff00000 	.word	0xbff00000
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	b333      	cbz	r3, 80135ee <_strtod_l+0xb7e>
 80135a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80135a6:	d822      	bhi.n	80135ee <_strtod_l+0xb7e>
 80135a8:	a327      	add	r3, pc, #156	; (adr r3, 8013648 <_strtod_l+0xbd8>)
 80135aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ae:	4630      	mov	r0, r6
 80135b0:	4639      	mov	r1, r7
 80135b2:	f7ed fabd 	bl	8000b30 <__aeabi_dcmple>
 80135b6:	b1a0      	cbz	r0, 80135e2 <_strtod_l+0xb72>
 80135b8:	4639      	mov	r1, r7
 80135ba:	4630      	mov	r0, r6
 80135bc:	f7ed fb14 	bl	8000be8 <__aeabi_d2uiz>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	bf08      	it	eq
 80135c4:	2001      	moveq	r0, #1
 80135c6:	f7ec ffbd 	bl	8000544 <__aeabi_ui2d>
 80135ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135cc:	4606      	mov	r6, r0
 80135ce:	460f      	mov	r7, r1
 80135d0:	bb03      	cbnz	r3, 8013614 <_strtod_l+0xba4>
 80135d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135d6:	9012      	str	r0, [sp, #72]	; 0x48
 80135d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80135da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80135de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80135e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80135ea:	1a9b      	subs	r3, r3, r2
 80135ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80135ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 80135f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80135f6:	f000 ffd3 	bl	80145a0 <__ulp>
 80135fa:	4650      	mov	r0, sl
 80135fc:	ec53 2b10 	vmov	r2, r3, d0
 8013600:	4659      	mov	r1, fp
 8013602:	f7ed f819 	bl	8000638 <__aeabi_dmul>
 8013606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801360a:	f7ec fe5f 	bl	80002cc <__adddf3>
 801360e:	4682      	mov	sl, r0
 8013610:	468b      	mov	fp, r1
 8013612:	e772      	b.n	80134fa <_strtod_l+0xa8a>
 8013614:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013618:	e7df      	b.n	80135da <_strtod_l+0xb6a>
 801361a:	a30d      	add	r3, pc, #52	; (adr r3, 8013650 <_strtod_l+0xbe0>)
 801361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013620:	f7ed fa7c 	bl	8000b1c <__aeabi_dcmplt>
 8013624:	e79c      	b.n	8013560 <_strtod_l+0xaf0>
 8013626:	2300      	movs	r3, #0
 8013628:	930d      	str	r3, [sp, #52]	; 0x34
 801362a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801362c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801362e:	6013      	str	r3, [r2, #0]
 8013630:	f7ff ba61 	b.w	8012af6 <_strtod_l+0x86>
 8013634:	2b65      	cmp	r3, #101	; 0x65
 8013636:	f04f 0200 	mov.w	r2, #0
 801363a:	f43f ab4e 	beq.w	8012cda <_strtod_l+0x26a>
 801363e:	2101      	movs	r1, #1
 8013640:	4614      	mov	r4, r2
 8013642:	9104      	str	r1, [sp, #16]
 8013644:	f7ff bacb 	b.w	8012bde <_strtod_l+0x16e>
 8013648:	ffc00000 	.word	0xffc00000
 801364c:	41dfffff 	.word	0x41dfffff
 8013650:	94a03595 	.word	0x94a03595
 8013654:	3fcfffff 	.word	0x3fcfffff

08013658 <strtod>:
 8013658:	4b07      	ldr	r3, [pc, #28]	; (8013678 <strtod+0x20>)
 801365a:	4a08      	ldr	r2, [pc, #32]	; (801367c <strtod+0x24>)
 801365c:	b410      	push	{r4}
 801365e:	681c      	ldr	r4, [r3, #0]
 8013660:	6a23      	ldr	r3, [r4, #32]
 8013662:	2b00      	cmp	r3, #0
 8013664:	bf08      	it	eq
 8013666:	4613      	moveq	r3, r2
 8013668:	460a      	mov	r2, r1
 801366a:	4601      	mov	r1, r0
 801366c:	4620      	mov	r0, r4
 801366e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013672:	f7ff b9fd 	b.w	8012a70 <_strtod_l>
 8013676:	bf00      	nop
 8013678:	20000020 	.word	0x20000020
 801367c:	20000084 	.word	0x20000084

08013680 <_strtol_l.isra.0>:
 8013680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013684:	4680      	mov	r8, r0
 8013686:	4689      	mov	r9, r1
 8013688:	4692      	mov	sl, r2
 801368a:	461e      	mov	r6, r3
 801368c:	460f      	mov	r7, r1
 801368e:	463d      	mov	r5, r7
 8013690:	9808      	ldr	r0, [sp, #32]
 8013692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013696:	f7fe ffa9 	bl	80125ec <__locale_ctype_ptr_l>
 801369a:	4420      	add	r0, r4
 801369c:	7843      	ldrb	r3, [r0, #1]
 801369e:	f013 0308 	ands.w	r3, r3, #8
 80136a2:	d132      	bne.n	801370a <_strtol_l.isra.0+0x8a>
 80136a4:	2c2d      	cmp	r4, #45	; 0x2d
 80136a6:	d132      	bne.n	801370e <_strtol_l.isra.0+0x8e>
 80136a8:	787c      	ldrb	r4, [r7, #1]
 80136aa:	1cbd      	adds	r5, r7, #2
 80136ac:	2201      	movs	r2, #1
 80136ae:	2e00      	cmp	r6, #0
 80136b0:	d05d      	beq.n	801376e <_strtol_l.isra.0+0xee>
 80136b2:	2e10      	cmp	r6, #16
 80136b4:	d109      	bne.n	80136ca <_strtol_l.isra.0+0x4a>
 80136b6:	2c30      	cmp	r4, #48	; 0x30
 80136b8:	d107      	bne.n	80136ca <_strtol_l.isra.0+0x4a>
 80136ba:	782b      	ldrb	r3, [r5, #0]
 80136bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80136c0:	2b58      	cmp	r3, #88	; 0x58
 80136c2:	d14f      	bne.n	8013764 <_strtol_l.isra.0+0xe4>
 80136c4:	786c      	ldrb	r4, [r5, #1]
 80136c6:	2610      	movs	r6, #16
 80136c8:	3502      	adds	r5, #2
 80136ca:	2a00      	cmp	r2, #0
 80136cc:	bf14      	ite	ne
 80136ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80136d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80136d6:	2700      	movs	r7, #0
 80136d8:	fbb1 fcf6 	udiv	ip, r1, r6
 80136dc:	4638      	mov	r0, r7
 80136de:	fb06 1e1c 	mls	lr, r6, ip, r1
 80136e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80136e6:	2b09      	cmp	r3, #9
 80136e8:	d817      	bhi.n	801371a <_strtol_l.isra.0+0x9a>
 80136ea:	461c      	mov	r4, r3
 80136ec:	42a6      	cmp	r6, r4
 80136ee:	dd23      	ble.n	8013738 <_strtol_l.isra.0+0xb8>
 80136f0:	1c7b      	adds	r3, r7, #1
 80136f2:	d007      	beq.n	8013704 <_strtol_l.isra.0+0x84>
 80136f4:	4584      	cmp	ip, r0
 80136f6:	d31c      	bcc.n	8013732 <_strtol_l.isra.0+0xb2>
 80136f8:	d101      	bne.n	80136fe <_strtol_l.isra.0+0x7e>
 80136fa:	45a6      	cmp	lr, r4
 80136fc:	db19      	blt.n	8013732 <_strtol_l.isra.0+0xb2>
 80136fe:	fb00 4006 	mla	r0, r0, r6, r4
 8013702:	2701      	movs	r7, #1
 8013704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013708:	e7eb      	b.n	80136e2 <_strtol_l.isra.0+0x62>
 801370a:	462f      	mov	r7, r5
 801370c:	e7bf      	b.n	801368e <_strtol_l.isra.0+0xe>
 801370e:	2c2b      	cmp	r4, #43	; 0x2b
 8013710:	bf04      	itt	eq
 8013712:	1cbd      	addeq	r5, r7, #2
 8013714:	787c      	ldrbeq	r4, [r7, #1]
 8013716:	461a      	mov	r2, r3
 8013718:	e7c9      	b.n	80136ae <_strtol_l.isra.0+0x2e>
 801371a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801371e:	2b19      	cmp	r3, #25
 8013720:	d801      	bhi.n	8013726 <_strtol_l.isra.0+0xa6>
 8013722:	3c37      	subs	r4, #55	; 0x37
 8013724:	e7e2      	b.n	80136ec <_strtol_l.isra.0+0x6c>
 8013726:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801372a:	2b19      	cmp	r3, #25
 801372c:	d804      	bhi.n	8013738 <_strtol_l.isra.0+0xb8>
 801372e:	3c57      	subs	r4, #87	; 0x57
 8013730:	e7dc      	b.n	80136ec <_strtol_l.isra.0+0x6c>
 8013732:	f04f 37ff 	mov.w	r7, #4294967295
 8013736:	e7e5      	b.n	8013704 <_strtol_l.isra.0+0x84>
 8013738:	1c7b      	adds	r3, r7, #1
 801373a:	d108      	bne.n	801374e <_strtol_l.isra.0+0xce>
 801373c:	2322      	movs	r3, #34	; 0x22
 801373e:	f8c8 3000 	str.w	r3, [r8]
 8013742:	4608      	mov	r0, r1
 8013744:	f1ba 0f00 	cmp.w	sl, #0
 8013748:	d107      	bne.n	801375a <_strtol_l.isra.0+0xda>
 801374a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801374e:	b102      	cbz	r2, 8013752 <_strtol_l.isra.0+0xd2>
 8013750:	4240      	negs	r0, r0
 8013752:	f1ba 0f00 	cmp.w	sl, #0
 8013756:	d0f8      	beq.n	801374a <_strtol_l.isra.0+0xca>
 8013758:	b10f      	cbz	r7, 801375e <_strtol_l.isra.0+0xde>
 801375a:	f105 39ff 	add.w	r9, r5, #4294967295
 801375e:	f8ca 9000 	str.w	r9, [sl]
 8013762:	e7f2      	b.n	801374a <_strtol_l.isra.0+0xca>
 8013764:	2430      	movs	r4, #48	; 0x30
 8013766:	2e00      	cmp	r6, #0
 8013768:	d1af      	bne.n	80136ca <_strtol_l.isra.0+0x4a>
 801376a:	2608      	movs	r6, #8
 801376c:	e7ad      	b.n	80136ca <_strtol_l.isra.0+0x4a>
 801376e:	2c30      	cmp	r4, #48	; 0x30
 8013770:	d0a3      	beq.n	80136ba <_strtol_l.isra.0+0x3a>
 8013772:	260a      	movs	r6, #10
 8013774:	e7a9      	b.n	80136ca <_strtol_l.isra.0+0x4a>
	...

08013778 <_strtol_r>:
 8013778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801377a:	4c06      	ldr	r4, [pc, #24]	; (8013794 <_strtol_r+0x1c>)
 801377c:	4d06      	ldr	r5, [pc, #24]	; (8013798 <_strtol_r+0x20>)
 801377e:	6824      	ldr	r4, [r4, #0]
 8013780:	6a24      	ldr	r4, [r4, #32]
 8013782:	2c00      	cmp	r4, #0
 8013784:	bf08      	it	eq
 8013786:	462c      	moveq	r4, r5
 8013788:	9400      	str	r4, [sp, #0]
 801378a:	f7ff ff79 	bl	8013680 <_strtol_l.isra.0>
 801378e:	b003      	add	sp, #12
 8013790:	bd30      	pop	{r4, r5, pc}
 8013792:	bf00      	nop
 8013794:	20000020 	.word	0x20000020
 8013798:	20000084 	.word	0x20000084

0801379c <__ascii_wctomb>:
 801379c:	b149      	cbz	r1, 80137b2 <__ascii_wctomb+0x16>
 801379e:	2aff      	cmp	r2, #255	; 0xff
 80137a0:	bf85      	ittet	hi
 80137a2:	238a      	movhi	r3, #138	; 0x8a
 80137a4:	6003      	strhi	r3, [r0, #0]
 80137a6:	700a      	strbls	r2, [r1, #0]
 80137a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80137ac:	bf98      	it	ls
 80137ae:	2001      	movls	r0, #1
 80137b0:	4770      	bx	lr
 80137b2:	4608      	mov	r0, r1
 80137b4:	4770      	bx	lr
	...

080137b8 <_write_r>:
 80137b8:	b538      	push	{r3, r4, r5, lr}
 80137ba:	4c07      	ldr	r4, [pc, #28]	; (80137d8 <_write_r+0x20>)
 80137bc:	4605      	mov	r5, r0
 80137be:	4608      	mov	r0, r1
 80137c0:	4611      	mov	r1, r2
 80137c2:	2200      	movs	r2, #0
 80137c4:	6022      	str	r2, [r4, #0]
 80137c6:	461a      	mov	r2, r3
 80137c8:	f7ef ff35 	bl	8003636 <_write>
 80137cc:	1c43      	adds	r3, r0, #1
 80137ce:	d102      	bne.n	80137d6 <_write_r+0x1e>
 80137d0:	6823      	ldr	r3, [r4, #0]
 80137d2:	b103      	cbz	r3, 80137d6 <_write_r+0x1e>
 80137d4:	602b      	str	r3, [r5, #0]
 80137d6:	bd38      	pop	{r3, r4, r5, pc}
 80137d8:	20007094 	.word	0x20007094

080137dc <_close_r>:
 80137dc:	b538      	push	{r3, r4, r5, lr}
 80137de:	4c06      	ldr	r4, [pc, #24]	; (80137f8 <_close_r+0x1c>)
 80137e0:	2300      	movs	r3, #0
 80137e2:	4605      	mov	r5, r0
 80137e4:	4608      	mov	r0, r1
 80137e6:	6023      	str	r3, [r4, #0]
 80137e8:	f7ef ff41 	bl	800366e <_close>
 80137ec:	1c43      	adds	r3, r0, #1
 80137ee:	d102      	bne.n	80137f6 <_close_r+0x1a>
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	b103      	cbz	r3, 80137f6 <_close_r+0x1a>
 80137f4:	602b      	str	r3, [r5, #0]
 80137f6:	bd38      	pop	{r3, r4, r5, pc}
 80137f8:	20007094 	.word	0x20007094

080137fc <std>:
 80137fc:	2300      	movs	r3, #0
 80137fe:	b510      	push	{r4, lr}
 8013800:	4604      	mov	r4, r0
 8013802:	e9c0 3300 	strd	r3, r3, [r0]
 8013806:	6083      	str	r3, [r0, #8]
 8013808:	8181      	strh	r1, [r0, #12]
 801380a:	6643      	str	r3, [r0, #100]	; 0x64
 801380c:	81c2      	strh	r2, [r0, #14]
 801380e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013812:	6183      	str	r3, [r0, #24]
 8013814:	4619      	mov	r1, r3
 8013816:	2208      	movs	r2, #8
 8013818:	305c      	adds	r0, #92	; 0x5c
 801381a:	f7fe ff4e 	bl	80126ba <memset>
 801381e:	4b05      	ldr	r3, [pc, #20]	; (8013834 <std+0x38>)
 8013820:	6263      	str	r3, [r4, #36]	; 0x24
 8013822:	4b05      	ldr	r3, [pc, #20]	; (8013838 <std+0x3c>)
 8013824:	62a3      	str	r3, [r4, #40]	; 0x28
 8013826:	4b05      	ldr	r3, [pc, #20]	; (801383c <std+0x40>)
 8013828:	62e3      	str	r3, [r4, #44]	; 0x2c
 801382a:	4b05      	ldr	r3, [pc, #20]	; (8013840 <std+0x44>)
 801382c:	6224      	str	r4, [r4, #32]
 801382e:	6323      	str	r3, [r4, #48]	; 0x30
 8013830:	bd10      	pop	{r4, pc}
 8013832:	bf00      	nop
 8013834:	08012979 	.word	0x08012979
 8013838:	0801299f 	.word	0x0801299f
 801383c:	080129d7 	.word	0x080129d7
 8013840:	080129fb 	.word	0x080129fb

08013844 <_cleanup_r>:
 8013844:	4901      	ldr	r1, [pc, #4]	; (801384c <_cleanup_r+0x8>)
 8013846:	f000 b885 	b.w	8013954 <_fwalk_reent>
 801384a:	bf00      	nop
 801384c:	08015b49 	.word	0x08015b49

08013850 <__sfmoreglue>:
 8013850:	b570      	push	{r4, r5, r6, lr}
 8013852:	1e4a      	subs	r2, r1, #1
 8013854:	2568      	movs	r5, #104	; 0x68
 8013856:	4355      	muls	r5, r2
 8013858:	460e      	mov	r6, r1
 801385a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801385e:	f7fe ff83 	bl	8012768 <_malloc_r>
 8013862:	4604      	mov	r4, r0
 8013864:	b140      	cbz	r0, 8013878 <__sfmoreglue+0x28>
 8013866:	2100      	movs	r1, #0
 8013868:	e9c0 1600 	strd	r1, r6, [r0]
 801386c:	300c      	adds	r0, #12
 801386e:	60a0      	str	r0, [r4, #8]
 8013870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013874:	f7fe ff21 	bl	80126ba <memset>
 8013878:	4620      	mov	r0, r4
 801387a:	bd70      	pop	{r4, r5, r6, pc}

0801387c <__sinit>:
 801387c:	6983      	ldr	r3, [r0, #24]
 801387e:	b510      	push	{r4, lr}
 8013880:	4604      	mov	r4, r0
 8013882:	bb33      	cbnz	r3, 80138d2 <__sinit+0x56>
 8013884:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013888:	6503      	str	r3, [r0, #80]	; 0x50
 801388a:	4b12      	ldr	r3, [pc, #72]	; (80138d4 <__sinit+0x58>)
 801388c:	4a12      	ldr	r2, [pc, #72]	; (80138d8 <__sinit+0x5c>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	6282      	str	r2, [r0, #40]	; 0x28
 8013892:	4298      	cmp	r0, r3
 8013894:	bf04      	itt	eq
 8013896:	2301      	moveq	r3, #1
 8013898:	6183      	streq	r3, [r0, #24]
 801389a:	f000 f81f 	bl	80138dc <__sfp>
 801389e:	6060      	str	r0, [r4, #4]
 80138a0:	4620      	mov	r0, r4
 80138a2:	f000 f81b 	bl	80138dc <__sfp>
 80138a6:	60a0      	str	r0, [r4, #8]
 80138a8:	4620      	mov	r0, r4
 80138aa:	f000 f817 	bl	80138dc <__sfp>
 80138ae:	2200      	movs	r2, #0
 80138b0:	60e0      	str	r0, [r4, #12]
 80138b2:	2104      	movs	r1, #4
 80138b4:	6860      	ldr	r0, [r4, #4]
 80138b6:	f7ff ffa1 	bl	80137fc <std>
 80138ba:	2201      	movs	r2, #1
 80138bc:	2109      	movs	r1, #9
 80138be:	68a0      	ldr	r0, [r4, #8]
 80138c0:	f7ff ff9c 	bl	80137fc <std>
 80138c4:	2202      	movs	r2, #2
 80138c6:	2112      	movs	r1, #18
 80138c8:	68e0      	ldr	r0, [r4, #12]
 80138ca:	f7ff ff97 	bl	80137fc <std>
 80138ce:	2301      	movs	r3, #1
 80138d0:	61a3      	str	r3, [r4, #24]
 80138d2:	bd10      	pop	{r4, pc}
 80138d4:	08018880 	.word	0x08018880
 80138d8:	08013845 	.word	0x08013845

080138dc <__sfp>:
 80138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138de:	4b1b      	ldr	r3, [pc, #108]	; (801394c <__sfp+0x70>)
 80138e0:	681e      	ldr	r6, [r3, #0]
 80138e2:	69b3      	ldr	r3, [r6, #24]
 80138e4:	4607      	mov	r7, r0
 80138e6:	b913      	cbnz	r3, 80138ee <__sfp+0x12>
 80138e8:	4630      	mov	r0, r6
 80138ea:	f7ff ffc7 	bl	801387c <__sinit>
 80138ee:	3648      	adds	r6, #72	; 0x48
 80138f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138f4:	3b01      	subs	r3, #1
 80138f6:	d503      	bpl.n	8013900 <__sfp+0x24>
 80138f8:	6833      	ldr	r3, [r6, #0]
 80138fa:	b133      	cbz	r3, 801390a <__sfp+0x2e>
 80138fc:	6836      	ldr	r6, [r6, #0]
 80138fe:	e7f7      	b.n	80138f0 <__sfp+0x14>
 8013900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013904:	b16d      	cbz	r5, 8013922 <__sfp+0x46>
 8013906:	3468      	adds	r4, #104	; 0x68
 8013908:	e7f4      	b.n	80138f4 <__sfp+0x18>
 801390a:	2104      	movs	r1, #4
 801390c:	4638      	mov	r0, r7
 801390e:	f7ff ff9f 	bl	8013850 <__sfmoreglue>
 8013912:	6030      	str	r0, [r6, #0]
 8013914:	2800      	cmp	r0, #0
 8013916:	d1f1      	bne.n	80138fc <__sfp+0x20>
 8013918:	230c      	movs	r3, #12
 801391a:	603b      	str	r3, [r7, #0]
 801391c:	4604      	mov	r4, r0
 801391e:	4620      	mov	r0, r4
 8013920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013922:	4b0b      	ldr	r3, [pc, #44]	; (8013950 <__sfp+0x74>)
 8013924:	6665      	str	r5, [r4, #100]	; 0x64
 8013926:	e9c4 5500 	strd	r5, r5, [r4]
 801392a:	60a5      	str	r5, [r4, #8]
 801392c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013930:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013934:	2208      	movs	r2, #8
 8013936:	4629      	mov	r1, r5
 8013938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801393c:	f7fe febd 	bl	80126ba <memset>
 8013940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013948:	e7e9      	b.n	801391e <__sfp+0x42>
 801394a:	bf00      	nop
 801394c:	08018880 	.word	0x08018880
 8013950:	ffff0001 	.word	0xffff0001

08013954 <_fwalk_reent>:
 8013954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013958:	4680      	mov	r8, r0
 801395a:	4689      	mov	r9, r1
 801395c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013960:	2600      	movs	r6, #0
 8013962:	b914      	cbnz	r4, 801396a <_fwalk_reent+0x16>
 8013964:	4630      	mov	r0, r6
 8013966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801396a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801396e:	3f01      	subs	r7, #1
 8013970:	d501      	bpl.n	8013976 <_fwalk_reent+0x22>
 8013972:	6824      	ldr	r4, [r4, #0]
 8013974:	e7f5      	b.n	8013962 <_fwalk_reent+0xe>
 8013976:	89ab      	ldrh	r3, [r5, #12]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d907      	bls.n	801398c <_fwalk_reent+0x38>
 801397c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013980:	3301      	adds	r3, #1
 8013982:	d003      	beq.n	801398c <_fwalk_reent+0x38>
 8013984:	4629      	mov	r1, r5
 8013986:	4640      	mov	r0, r8
 8013988:	47c8      	blx	r9
 801398a:	4306      	orrs	r6, r0
 801398c:	3568      	adds	r5, #104	; 0x68
 801398e:	e7ee      	b.n	801396e <_fwalk_reent+0x1a>

08013990 <rshift>:
 8013990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013992:	6906      	ldr	r6, [r0, #16]
 8013994:	114b      	asrs	r3, r1, #5
 8013996:	429e      	cmp	r6, r3
 8013998:	f100 0414 	add.w	r4, r0, #20
 801399c:	dd30      	ble.n	8013a00 <rshift+0x70>
 801399e:	f011 011f 	ands.w	r1, r1, #31
 80139a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80139a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80139aa:	d108      	bne.n	80139be <rshift+0x2e>
 80139ac:	4621      	mov	r1, r4
 80139ae:	42b2      	cmp	r2, r6
 80139b0:	460b      	mov	r3, r1
 80139b2:	d211      	bcs.n	80139d8 <rshift+0x48>
 80139b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80139b8:	f841 3b04 	str.w	r3, [r1], #4
 80139bc:	e7f7      	b.n	80139ae <rshift+0x1e>
 80139be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80139c2:	f1c1 0c20 	rsb	ip, r1, #32
 80139c6:	40cd      	lsrs	r5, r1
 80139c8:	3204      	adds	r2, #4
 80139ca:	4623      	mov	r3, r4
 80139cc:	42b2      	cmp	r2, r6
 80139ce:	4617      	mov	r7, r2
 80139d0:	d30c      	bcc.n	80139ec <rshift+0x5c>
 80139d2:	601d      	str	r5, [r3, #0]
 80139d4:	b105      	cbz	r5, 80139d8 <rshift+0x48>
 80139d6:	3304      	adds	r3, #4
 80139d8:	1b1a      	subs	r2, r3, r4
 80139da:	42a3      	cmp	r3, r4
 80139dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80139e0:	bf08      	it	eq
 80139e2:	2300      	moveq	r3, #0
 80139e4:	6102      	str	r2, [r0, #16]
 80139e6:	bf08      	it	eq
 80139e8:	6143      	streq	r3, [r0, #20]
 80139ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ec:	683f      	ldr	r7, [r7, #0]
 80139ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80139f2:	433d      	orrs	r5, r7
 80139f4:	f843 5b04 	str.w	r5, [r3], #4
 80139f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80139fc:	40cd      	lsrs	r5, r1
 80139fe:	e7e5      	b.n	80139cc <rshift+0x3c>
 8013a00:	4623      	mov	r3, r4
 8013a02:	e7e9      	b.n	80139d8 <rshift+0x48>

08013a04 <__hexdig_fun>:
 8013a04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013a08:	2b09      	cmp	r3, #9
 8013a0a:	d802      	bhi.n	8013a12 <__hexdig_fun+0xe>
 8013a0c:	3820      	subs	r0, #32
 8013a0e:	b2c0      	uxtb	r0, r0
 8013a10:	4770      	bx	lr
 8013a12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013a16:	2b05      	cmp	r3, #5
 8013a18:	d801      	bhi.n	8013a1e <__hexdig_fun+0x1a>
 8013a1a:	3847      	subs	r0, #71	; 0x47
 8013a1c:	e7f7      	b.n	8013a0e <__hexdig_fun+0xa>
 8013a1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013a22:	2b05      	cmp	r3, #5
 8013a24:	d801      	bhi.n	8013a2a <__hexdig_fun+0x26>
 8013a26:	3827      	subs	r0, #39	; 0x27
 8013a28:	e7f1      	b.n	8013a0e <__hexdig_fun+0xa>
 8013a2a:	2000      	movs	r0, #0
 8013a2c:	4770      	bx	lr

08013a2e <__gethex>:
 8013a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a32:	b08b      	sub	sp, #44	; 0x2c
 8013a34:	468a      	mov	sl, r1
 8013a36:	9002      	str	r0, [sp, #8]
 8013a38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013a3a:	9306      	str	r3, [sp, #24]
 8013a3c:	4690      	mov	r8, r2
 8013a3e:	f000 facd 	bl	8013fdc <__localeconv_l>
 8013a42:	6803      	ldr	r3, [r0, #0]
 8013a44:	9303      	str	r3, [sp, #12]
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ec fbe2 	bl	8000210 <strlen>
 8013a4c:	9b03      	ldr	r3, [sp, #12]
 8013a4e:	9001      	str	r0, [sp, #4]
 8013a50:	4403      	add	r3, r0
 8013a52:	f04f 0b00 	mov.w	fp, #0
 8013a56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013a5a:	9307      	str	r3, [sp, #28]
 8013a5c:	f8da 3000 	ldr.w	r3, [sl]
 8013a60:	3302      	adds	r3, #2
 8013a62:	461f      	mov	r7, r3
 8013a64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013a68:	2830      	cmp	r0, #48	; 0x30
 8013a6a:	d06c      	beq.n	8013b46 <__gethex+0x118>
 8013a6c:	f7ff ffca 	bl	8013a04 <__hexdig_fun>
 8013a70:	4604      	mov	r4, r0
 8013a72:	2800      	cmp	r0, #0
 8013a74:	d16a      	bne.n	8013b4c <__gethex+0x11e>
 8013a76:	9a01      	ldr	r2, [sp, #4]
 8013a78:	9903      	ldr	r1, [sp, #12]
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	f7fe ffc9 	bl	8012a12 <strncmp>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d166      	bne.n	8013b52 <__gethex+0x124>
 8013a84:	9b01      	ldr	r3, [sp, #4]
 8013a86:	5cf8      	ldrb	r0, [r7, r3]
 8013a88:	18fe      	adds	r6, r7, r3
 8013a8a:	f7ff ffbb 	bl	8013a04 <__hexdig_fun>
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d062      	beq.n	8013b58 <__gethex+0x12a>
 8013a92:	4633      	mov	r3, r6
 8013a94:	7818      	ldrb	r0, [r3, #0]
 8013a96:	2830      	cmp	r0, #48	; 0x30
 8013a98:	461f      	mov	r7, r3
 8013a9a:	f103 0301 	add.w	r3, r3, #1
 8013a9e:	d0f9      	beq.n	8013a94 <__gethex+0x66>
 8013aa0:	f7ff ffb0 	bl	8013a04 <__hexdig_fun>
 8013aa4:	fab0 f580 	clz	r5, r0
 8013aa8:	096d      	lsrs	r5, r5, #5
 8013aaa:	4634      	mov	r4, r6
 8013aac:	f04f 0b01 	mov.w	fp, #1
 8013ab0:	463a      	mov	r2, r7
 8013ab2:	4616      	mov	r6, r2
 8013ab4:	3201      	adds	r2, #1
 8013ab6:	7830      	ldrb	r0, [r6, #0]
 8013ab8:	f7ff ffa4 	bl	8013a04 <__hexdig_fun>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d1f8      	bne.n	8013ab2 <__gethex+0x84>
 8013ac0:	9a01      	ldr	r2, [sp, #4]
 8013ac2:	9903      	ldr	r1, [sp, #12]
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	f7fe ffa4 	bl	8012a12 <strncmp>
 8013aca:	b950      	cbnz	r0, 8013ae2 <__gethex+0xb4>
 8013acc:	b954      	cbnz	r4, 8013ae4 <__gethex+0xb6>
 8013ace:	9b01      	ldr	r3, [sp, #4]
 8013ad0:	18f4      	adds	r4, r6, r3
 8013ad2:	4622      	mov	r2, r4
 8013ad4:	4616      	mov	r6, r2
 8013ad6:	3201      	adds	r2, #1
 8013ad8:	7830      	ldrb	r0, [r6, #0]
 8013ada:	f7ff ff93 	bl	8013a04 <__hexdig_fun>
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	d1f8      	bne.n	8013ad4 <__gethex+0xa6>
 8013ae2:	b10c      	cbz	r4, 8013ae8 <__gethex+0xba>
 8013ae4:	1ba4      	subs	r4, r4, r6
 8013ae6:	00a4      	lsls	r4, r4, #2
 8013ae8:	7833      	ldrb	r3, [r6, #0]
 8013aea:	2b50      	cmp	r3, #80	; 0x50
 8013aec:	d001      	beq.n	8013af2 <__gethex+0xc4>
 8013aee:	2b70      	cmp	r3, #112	; 0x70
 8013af0:	d140      	bne.n	8013b74 <__gethex+0x146>
 8013af2:	7873      	ldrb	r3, [r6, #1]
 8013af4:	2b2b      	cmp	r3, #43	; 0x2b
 8013af6:	d031      	beq.n	8013b5c <__gethex+0x12e>
 8013af8:	2b2d      	cmp	r3, #45	; 0x2d
 8013afa:	d033      	beq.n	8013b64 <__gethex+0x136>
 8013afc:	1c71      	adds	r1, r6, #1
 8013afe:	f04f 0900 	mov.w	r9, #0
 8013b02:	7808      	ldrb	r0, [r1, #0]
 8013b04:	f7ff ff7e 	bl	8013a04 <__hexdig_fun>
 8013b08:	1e43      	subs	r3, r0, #1
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	2b18      	cmp	r3, #24
 8013b0e:	d831      	bhi.n	8013b74 <__gethex+0x146>
 8013b10:	f1a0 0210 	sub.w	r2, r0, #16
 8013b14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013b18:	f7ff ff74 	bl	8013a04 <__hexdig_fun>
 8013b1c:	1e43      	subs	r3, r0, #1
 8013b1e:	b2db      	uxtb	r3, r3
 8013b20:	2b18      	cmp	r3, #24
 8013b22:	d922      	bls.n	8013b6a <__gethex+0x13c>
 8013b24:	f1b9 0f00 	cmp.w	r9, #0
 8013b28:	d000      	beq.n	8013b2c <__gethex+0xfe>
 8013b2a:	4252      	negs	r2, r2
 8013b2c:	4414      	add	r4, r2
 8013b2e:	f8ca 1000 	str.w	r1, [sl]
 8013b32:	b30d      	cbz	r5, 8013b78 <__gethex+0x14a>
 8013b34:	f1bb 0f00 	cmp.w	fp, #0
 8013b38:	bf0c      	ite	eq
 8013b3a:	2706      	moveq	r7, #6
 8013b3c:	2700      	movne	r7, #0
 8013b3e:	4638      	mov	r0, r7
 8013b40:	b00b      	add	sp, #44	; 0x2c
 8013b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b46:	f10b 0b01 	add.w	fp, fp, #1
 8013b4a:	e78a      	b.n	8013a62 <__gethex+0x34>
 8013b4c:	2500      	movs	r5, #0
 8013b4e:	462c      	mov	r4, r5
 8013b50:	e7ae      	b.n	8013ab0 <__gethex+0x82>
 8013b52:	463e      	mov	r6, r7
 8013b54:	2501      	movs	r5, #1
 8013b56:	e7c7      	b.n	8013ae8 <__gethex+0xba>
 8013b58:	4604      	mov	r4, r0
 8013b5a:	e7fb      	b.n	8013b54 <__gethex+0x126>
 8013b5c:	f04f 0900 	mov.w	r9, #0
 8013b60:	1cb1      	adds	r1, r6, #2
 8013b62:	e7ce      	b.n	8013b02 <__gethex+0xd4>
 8013b64:	f04f 0901 	mov.w	r9, #1
 8013b68:	e7fa      	b.n	8013b60 <__gethex+0x132>
 8013b6a:	230a      	movs	r3, #10
 8013b6c:	fb03 0202 	mla	r2, r3, r2, r0
 8013b70:	3a10      	subs	r2, #16
 8013b72:	e7cf      	b.n	8013b14 <__gethex+0xe6>
 8013b74:	4631      	mov	r1, r6
 8013b76:	e7da      	b.n	8013b2e <__gethex+0x100>
 8013b78:	1bf3      	subs	r3, r6, r7
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	2b07      	cmp	r3, #7
 8013b80:	dc49      	bgt.n	8013c16 <__gethex+0x1e8>
 8013b82:	9802      	ldr	r0, [sp, #8]
 8013b84:	f000 fa40 	bl	8014008 <_Balloc>
 8013b88:	9b01      	ldr	r3, [sp, #4]
 8013b8a:	f100 0914 	add.w	r9, r0, #20
 8013b8e:	f04f 0b00 	mov.w	fp, #0
 8013b92:	f1c3 0301 	rsb	r3, r3, #1
 8013b96:	4605      	mov	r5, r0
 8013b98:	f8cd 9010 	str.w	r9, [sp, #16]
 8013b9c:	46da      	mov	sl, fp
 8013b9e:	9308      	str	r3, [sp, #32]
 8013ba0:	42b7      	cmp	r7, r6
 8013ba2:	d33b      	bcc.n	8013c1c <__gethex+0x1ee>
 8013ba4:	9804      	ldr	r0, [sp, #16]
 8013ba6:	f840 ab04 	str.w	sl, [r0], #4
 8013baa:	eba0 0009 	sub.w	r0, r0, r9
 8013bae:	1080      	asrs	r0, r0, #2
 8013bb0:	6128      	str	r0, [r5, #16]
 8013bb2:	0147      	lsls	r7, r0, #5
 8013bb4:	4650      	mov	r0, sl
 8013bb6:	f000 faeb 	bl	8014190 <__hi0bits>
 8013bba:	f8d8 6000 	ldr.w	r6, [r8]
 8013bbe:	1a3f      	subs	r7, r7, r0
 8013bc0:	42b7      	cmp	r7, r6
 8013bc2:	dd64      	ble.n	8013c8e <__gethex+0x260>
 8013bc4:	1bbf      	subs	r7, r7, r6
 8013bc6:	4639      	mov	r1, r7
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f000 fdfb 	bl	80147c4 <__any_on>
 8013bce:	4682      	mov	sl, r0
 8013bd0:	b178      	cbz	r0, 8013bf2 <__gethex+0x1c4>
 8013bd2:	1e7b      	subs	r3, r7, #1
 8013bd4:	1159      	asrs	r1, r3, #5
 8013bd6:	f003 021f 	and.w	r2, r3, #31
 8013bda:	f04f 0a01 	mov.w	sl, #1
 8013bde:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013be2:	fa0a f202 	lsl.w	r2, sl, r2
 8013be6:	420a      	tst	r2, r1
 8013be8:	d003      	beq.n	8013bf2 <__gethex+0x1c4>
 8013bea:	4553      	cmp	r3, sl
 8013bec:	dc46      	bgt.n	8013c7c <__gethex+0x24e>
 8013bee:	f04f 0a02 	mov.w	sl, #2
 8013bf2:	4639      	mov	r1, r7
 8013bf4:	4628      	mov	r0, r5
 8013bf6:	f7ff fecb 	bl	8013990 <rshift>
 8013bfa:	443c      	add	r4, r7
 8013bfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013c00:	42a3      	cmp	r3, r4
 8013c02:	da52      	bge.n	8013caa <__gethex+0x27c>
 8013c04:	4629      	mov	r1, r5
 8013c06:	9802      	ldr	r0, [sp, #8]
 8013c08:	f000 fa32 	bl	8014070 <_Bfree>
 8013c0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c0e:	2300      	movs	r3, #0
 8013c10:	6013      	str	r3, [r2, #0]
 8013c12:	27a3      	movs	r7, #163	; 0xa3
 8013c14:	e793      	b.n	8013b3e <__gethex+0x110>
 8013c16:	3101      	adds	r1, #1
 8013c18:	105b      	asrs	r3, r3, #1
 8013c1a:	e7b0      	b.n	8013b7e <__gethex+0x150>
 8013c1c:	1e73      	subs	r3, r6, #1
 8013c1e:	9305      	str	r3, [sp, #20]
 8013c20:	9a07      	ldr	r2, [sp, #28]
 8013c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013c26:	4293      	cmp	r3, r2
 8013c28:	d018      	beq.n	8013c5c <__gethex+0x22e>
 8013c2a:	f1bb 0f20 	cmp.w	fp, #32
 8013c2e:	d107      	bne.n	8013c40 <__gethex+0x212>
 8013c30:	9b04      	ldr	r3, [sp, #16]
 8013c32:	f8c3 a000 	str.w	sl, [r3]
 8013c36:	3304      	adds	r3, #4
 8013c38:	f04f 0a00 	mov.w	sl, #0
 8013c3c:	9304      	str	r3, [sp, #16]
 8013c3e:	46d3      	mov	fp, sl
 8013c40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013c44:	f7ff fede 	bl	8013a04 <__hexdig_fun>
 8013c48:	f000 000f 	and.w	r0, r0, #15
 8013c4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013c50:	ea4a 0a00 	orr.w	sl, sl, r0
 8013c54:	f10b 0b04 	add.w	fp, fp, #4
 8013c58:	9b05      	ldr	r3, [sp, #20]
 8013c5a:	e00d      	b.n	8013c78 <__gethex+0x24a>
 8013c5c:	9b05      	ldr	r3, [sp, #20]
 8013c5e:	9a08      	ldr	r2, [sp, #32]
 8013c60:	4413      	add	r3, r2
 8013c62:	42bb      	cmp	r3, r7
 8013c64:	d3e1      	bcc.n	8013c2a <__gethex+0x1fc>
 8013c66:	4618      	mov	r0, r3
 8013c68:	9a01      	ldr	r2, [sp, #4]
 8013c6a:	9903      	ldr	r1, [sp, #12]
 8013c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c6e:	f7fe fed0 	bl	8012a12 <strncmp>
 8013c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d1d8      	bne.n	8013c2a <__gethex+0x1fc>
 8013c78:	461e      	mov	r6, r3
 8013c7a:	e791      	b.n	8013ba0 <__gethex+0x172>
 8013c7c:	1eb9      	subs	r1, r7, #2
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f000 fda0 	bl	80147c4 <__any_on>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d0b2      	beq.n	8013bee <__gethex+0x1c0>
 8013c88:	f04f 0a03 	mov.w	sl, #3
 8013c8c:	e7b1      	b.n	8013bf2 <__gethex+0x1c4>
 8013c8e:	da09      	bge.n	8013ca4 <__gethex+0x276>
 8013c90:	1bf7      	subs	r7, r6, r7
 8013c92:	4629      	mov	r1, r5
 8013c94:	463a      	mov	r2, r7
 8013c96:	9802      	ldr	r0, [sp, #8]
 8013c98:	f000 fbb6 	bl	8014408 <__lshift>
 8013c9c:	1be4      	subs	r4, r4, r7
 8013c9e:	4605      	mov	r5, r0
 8013ca0:	f100 0914 	add.w	r9, r0, #20
 8013ca4:	f04f 0a00 	mov.w	sl, #0
 8013ca8:	e7a8      	b.n	8013bfc <__gethex+0x1ce>
 8013caa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013cae:	42a0      	cmp	r0, r4
 8013cb0:	dd6a      	ble.n	8013d88 <__gethex+0x35a>
 8013cb2:	1b04      	subs	r4, r0, r4
 8013cb4:	42a6      	cmp	r6, r4
 8013cb6:	dc2e      	bgt.n	8013d16 <__gethex+0x2e8>
 8013cb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013cbc:	2b02      	cmp	r3, #2
 8013cbe:	d022      	beq.n	8013d06 <__gethex+0x2d8>
 8013cc0:	2b03      	cmp	r3, #3
 8013cc2:	d024      	beq.n	8013d0e <__gethex+0x2e0>
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	d115      	bne.n	8013cf4 <__gethex+0x2c6>
 8013cc8:	42a6      	cmp	r6, r4
 8013cca:	d113      	bne.n	8013cf4 <__gethex+0x2c6>
 8013ccc:	2e01      	cmp	r6, #1
 8013cce:	dc0b      	bgt.n	8013ce8 <__gethex+0x2ba>
 8013cd0:	9a06      	ldr	r2, [sp, #24]
 8013cd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013cd6:	6013      	str	r3, [r2, #0]
 8013cd8:	2301      	movs	r3, #1
 8013cda:	612b      	str	r3, [r5, #16]
 8013cdc:	f8c9 3000 	str.w	r3, [r9]
 8013ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013ce2:	2762      	movs	r7, #98	; 0x62
 8013ce4:	601d      	str	r5, [r3, #0]
 8013ce6:	e72a      	b.n	8013b3e <__gethex+0x110>
 8013ce8:	1e71      	subs	r1, r6, #1
 8013cea:	4628      	mov	r0, r5
 8013cec:	f000 fd6a 	bl	80147c4 <__any_on>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d1ed      	bne.n	8013cd0 <__gethex+0x2a2>
 8013cf4:	4629      	mov	r1, r5
 8013cf6:	9802      	ldr	r0, [sp, #8]
 8013cf8:	f000 f9ba 	bl	8014070 <_Bfree>
 8013cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013cfe:	2300      	movs	r3, #0
 8013d00:	6013      	str	r3, [r2, #0]
 8013d02:	2750      	movs	r7, #80	; 0x50
 8013d04:	e71b      	b.n	8013b3e <__gethex+0x110>
 8013d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d0e1      	beq.n	8013cd0 <__gethex+0x2a2>
 8013d0c:	e7f2      	b.n	8013cf4 <__gethex+0x2c6>
 8013d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d1dd      	bne.n	8013cd0 <__gethex+0x2a2>
 8013d14:	e7ee      	b.n	8013cf4 <__gethex+0x2c6>
 8013d16:	1e67      	subs	r7, r4, #1
 8013d18:	f1ba 0f00 	cmp.w	sl, #0
 8013d1c:	d131      	bne.n	8013d82 <__gethex+0x354>
 8013d1e:	b127      	cbz	r7, 8013d2a <__gethex+0x2fc>
 8013d20:	4639      	mov	r1, r7
 8013d22:	4628      	mov	r0, r5
 8013d24:	f000 fd4e 	bl	80147c4 <__any_on>
 8013d28:	4682      	mov	sl, r0
 8013d2a:	117a      	asrs	r2, r7, #5
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	f007 071f 	and.w	r7, r7, #31
 8013d32:	fa03 f707 	lsl.w	r7, r3, r7
 8013d36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013d3a:	4621      	mov	r1, r4
 8013d3c:	421f      	tst	r7, r3
 8013d3e:	4628      	mov	r0, r5
 8013d40:	bf18      	it	ne
 8013d42:	f04a 0a02 	orrne.w	sl, sl, #2
 8013d46:	1b36      	subs	r6, r6, r4
 8013d48:	f7ff fe22 	bl	8013990 <rshift>
 8013d4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013d50:	2702      	movs	r7, #2
 8013d52:	f1ba 0f00 	cmp.w	sl, #0
 8013d56:	d048      	beq.n	8013dea <__gethex+0x3bc>
 8013d58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013d5c:	2b02      	cmp	r3, #2
 8013d5e:	d015      	beq.n	8013d8c <__gethex+0x35e>
 8013d60:	2b03      	cmp	r3, #3
 8013d62:	d017      	beq.n	8013d94 <__gethex+0x366>
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d109      	bne.n	8013d7c <__gethex+0x34e>
 8013d68:	f01a 0f02 	tst.w	sl, #2
 8013d6c:	d006      	beq.n	8013d7c <__gethex+0x34e>
 8013d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8013d72:	ea4a 0a03 	orr.w	sl, sl, r3
 8013d76:	f01a 0f01 	tst.w	sl, #1
 8013d7a:	d10e      	bne.n	8013d9a <__gethex+0x36c>
 8013d7c:	f047 0710 	orr.w	r7, r7, #16
 8013d80:	e033      	b.n	8013dea <__gethex+0x3bc>
 8013d82:	f04f 0a01 	mov.w	sl, #1
 8013d86:	e7d0      	b.n	8013d2a <__gethex+0x2fc>
 8013d88:	2701      	movs	r7, #1
 8013d8a:	e7e2      	b.n	8013d52 <__gethex+0x324>
 8013d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d8e:	f1c3 0301 	rsb	r3, r3, #1
 8013d92:	9315      	str	r3, [sp, #84]	; 0x54
 8013d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d0f0      	beq.n	8013d7c <__gethex+0x34e>
 8013d9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013d9e:	f105 0314 	add.w	r3, r5, #20
 8013da2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013da6:	eb03 010a 	add.w	r1, r3, sl
 8013daa:	f04f 0c00 	mov.w	ip, #0
 8013dae:	4618      	mov	r0, r3
 8013db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013db8:	d01c      	beq.n	8013df4 <__gethex+0x3c6>
 8013dba:	3201      	adds	r2, #1
 8013dbc:	6002      	str	r2, [r0, #0]
 8013dbe:	2f02      	cmp	r7, #2
 8013dc0:	f105 0314 	add.w	r3, r5, #20
 8013dc4:	d138      	bne.n	8013e38 <__gethex+0x40a>
 8013dc6:	f8d8 2000 	ldr.w	r2, [r8]
 8013dca:	3a01      	subs	r2, #1
 8013dcc:	42b2      	cmp	r2, r6
 8013dce:	d10a      	bne.n	8013de6 <__gethex+0x3b8>
 8013dd0:	1171      	asrs	r1, r6, #5
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	f006 061f 	and.w	r6, r6, #31
 8013dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ddc:	fa02 f606 	lsl.w	r6, r2, r6
 8013de0:	421e      	tst	r6, r3
 8013de2:	bf18      	it	ne
 8013de4:	4617      	movne	r7, r2
 8013de6:	f047 0720 	orr.w	r7, r7, #32
 8013dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013dec:	601d      	str	r5, [r3, #0]
 8013dee:	9b06      	ldr	r3, [sp, #24]
 8013df0:	601c      	str	r4, [r3, #0]
 8013df2:	e6a4      	b.n	8013b3e <__gethex+0x110>
 8013df4:	4299      	cmp	r1, r3
 8013df6:	f843 cc04 	str.w	ip, [r3, #-4]
 8013dfa:	d8d8      	bhi.n	8013dae <__gethex+0x380>
 8013dfc:	68ab      	ldr	r3, [r5, #8]
 8013dfe:	4599      	cmp	r9, r3
 8013e00:	db12      	blt.n	8013e28 <__gethex+0x3fa>
 8013e02:	6869      	ldr	r1, [r5, #4]
 8013e04:	9802      	ldr	r0, [sp, #8]
 8013e06:	3101      	adds	r1, #1
 8013e08:	f000 f8fe 	bl	8014008 <_Balloc>
 8013e0c:	692a      	ldr	r2, [r5, #16]
 8013e0e:	3202      	adds	r2, #2
 8013e10:	f105 010c 	add.w	r1, r5, #12
 8013e14:	4683      	mov	fp, r0
 8013e16:	0092      	lsls	r2, r2, #2
 8013e18:	300c      	adds	r0, #12
 8013e1a:	f7fe fc2a 	bl	8012672 <memcpy>
 8013e1e:	4629      	mov	r1, r5
 8013e20:	9802      	ldr	r0, [sp, #8]
 8013e22:	f000 f925 	bl	8014070 <_Bfree>
 8013e26:	465d      	mov	r5, fp
 8013e28:	692b      	ldr	r3, [r5, #16]
 8013e2a:	1c5a      	adds	r2, r3, #1
 8013e2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013e30:	612a      	str	r2, [r5, #16]
 8013e32:	2201      	movs	r2, #1
 8013e34:	615a      	str	r2, [r3, #20]
 8013e36:	e7c2      	b.n	8013dbe <__gethex+0x390>
 8013e38:	692a      	ldr	r2, [r5, #16]
 8013e3a:	454a      	cmp	r2, r9
 8013e3c:	dd0b      	ble.n	8013e56 <__gethex+0x428>
 8013e3e:	2101      	movs	r1, #1
 8013e40:	4628      	mov	r0, r5
 8013e42:	f7ff fda5 	bl	8013990 <rshift>
 8013e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013e4a:	3401      	adds	r4, #1
 8013e4c:	42a3      	cmp	r3, r4
 8013e4e:	f6ff aed9 	blt.w	8013c04 <__gethex+0x1d6>
 8013e52:	2701      	movs	r7, #1
 8013e54:	e7c7      	b.n	8013de6 <__gethex+0x3b8>
 8013e56:	f016 061f 	ands.w	r6, r6, #31
 8013e5a:	d0fa      	beq.n	8013e52 <__gethex+0x424>
 8013e5c:	449a      	add	sl, r3
 8013e5e:	f1c6 0620 	rsb	r6, r6, #32
 8013e62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013e66:	f000 f993 	bl	8014190 <__hi0bits>
 8013e6a:	42b0      	cmp	r0, r6
 8013e6c:	dbe7      	blt.n	8013e3e <__gethex+0x410>
 8013e6e:	e7f0      	b.n	8013e52 <__gethex+0x424>

08013e70 <L_shift>:
 8013e70:	f1c2 0208 	rsb	r2, r2, #8
 8013e74:	0092      	lsls	r2, r2, #2
 8013e76:	b570      	push	{r4, r5, r6, lr}
 8013e78:	f1c2 0620 	rsb	r6, r2, #32
 8013e7c:	6843      	ldr	r3, [r0, #4]
 8013e7e:	6804      	ldr	r4, [r0, #0]
 8013e80:	fa03 f506 	lsl.w	r5, r3, r6
 8013e84:	432c      	orrs	r4, r5
 8013e86:	40d3      	lsrs	r3, r2
 8013e88:	6004      	str	r4, [r0, #0]
 8013e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8013e8e:	4288      	cmp	r0, r1
 8013e90:	d3f4      	bcc.n	8013e7c <L_shift+0xc>
 8013e92:	bd70      	pop	{r4, r5, r6, pc}

08013e94 <__match>:
 8013e94:	b530      	push	{r4, r5, lr}
 8013e96:	6803      	ldr	r3, [r0, #0]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e9e:	b914      	cbnz	r4, 8013ea6 <__match+0x12>
 8013ea0:	6003      	str	r3, [r0, #0]
 8013ea2:	2001      	movs	r0, #1
 8013ea4:	bd30      	pop	{r4, r5, pc}
 8013ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013eae:	2d19      	cmp	r5, #25
 8013eb0:	bf98      	it	ls
 8013eb2:	3220      	addls	r2, #32
 8013eb4:	42a2      	cmp	r2, r4
 8013eb6:	d0f0      	beq.n	8013e9a <__match+0x6>
 8013eb8:	2000      	movs	r0, #0
 8013eba:	e7f3      	b.n	8013ea4 <__match+0x10>

08013ebc <__hexnan>:
 8013ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec0:	680b      	ldr	r3, [r1, #0]
 8013ec2:	6801      	ldr	r1, [r0, #0]
 8013ec4:	115f      	asrs	r7, r3, #5
 8013ec6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013eca:	f013 031f 	ands.w	r3, r3, #31
 8013ece:	b087      	sub	sp, #28
 8013ed0:	bf18      	it	ne
 8013ed2:	3704      	addne	r7, #4
 8013ed4:	2500      	movs	r5, #0
 8013ed6:	1f3e      	subs	r6, r7, #4
 8013ed8:	4682      	mov	sl, r0
 8013eda:	4690      	mov	r8, r2
 8013edc:	9301      	str	r3, [sp, #4]
 8013ede:	f847 5c04 	str.w	r5, [r7, #-4]
 8013ee2:	46b1      	mov	r9, r6
 8013ee4:	4634      	mov	r4, r6
 8013ee6:	9502      	str	r5, [sp, #8]
 8013ee8:	46ab      	mov	fp, r5
 8013eea:	784a      	ldrb	r2, [r1, #1]
 8013eec:	1c4b      	adds	r3, r1, #1
 8013eee:	9303      	str	r3, [sp, #12]
 8013ef0:	b342      	cbz	r2, 8013f44 <__hexnan+0x88>
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	9105      	str	r1, [sp, #20]
 8013ef6:	9204      	str	r2, [sp, #16]
 8013ef8:	f7ff fd84 	bl	8013a04 <__hexdig_fun>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d143      	bne.n	8013f88 <__hexnan+0xcc>
 8013f00:	9a04      	ldr	r2, [sp, #16]
 8013f02:	9905      	ldr	r1, [sp, #20]
 8013f04:	2a20      	cmp	r2, #32
 8013f06:	d818      	bhi.n	8013f3a <__hexnan+0x7e>
 8013f08:	9b02      	ldr	r3, [sp, #8]
 8013f0a:	459b      	cmp	fp, r3
 8013f0c:	dd13      	ble.n	8013f36 <__hexnan+0x7a>
 8013f0e:	454c      	cmp	r4, r9
 8013f10:	d206      	bcs.n	8013f20 <__hexnan+0x64>
 8013f12:	2d07      	cmp	r5, #7
 8013f14:	dc04      	bgt.n	8013f20 <__hexnan+0x64>
 8013f16:	462a      	mov	r2, r5
 8013f18:	4649      	mov	r1, r9
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f7ff ffa8 	bl	8013e70 <L_shift>
 8013f20:	4544      	cmp	r4, r8
 8013f22:	d944      	bls.n	8013fae <__hexnan+0xf2>
 8013f24:	2300      	movs	r3, #0
 8013f26:	f1a4 0904 	sub.w	r9, r4, #4
 8013f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f2e:	f8cd b008 	str.w	fp, [sp, #8]
 8013f32:	464c      	mov	r4, r9
 8013f34:	461d      	mov	r5, r3
 8013f36:	9903      	ldr	r1, [sp, #12]
 8013f38:	e7d7      	b.n	8013eea <__hexnan+0x2e>
 8013f3a:	2a29      	cmp	r2, #41	; 0x29
 8013f3c:	d14a      	bne.n	8013fd4 <__hexnan+0x118>
 8013f3e:	3102      	adds	r1, #2
 8013f40:	f8ca 1000 	str.w	r1, [sl]
 8013f44:	f1bb 0f00 	cmp.w	fp, #0
 8013f48:	d044      	beq.n	8013fd4 <__hexnan+0x118>
 8013f4a:	454c      	cmp	r4, r9
 8013f4c:	d206      	bcs.n	8013f5c <__hexnan+0xa0>
 8013f4e:	2d07      	cmp	r5, #7
 8013f50:	dc04      	bgt.n	8013f5c <__hexnan+0xa0>
 8013f52:	462a      	mov	r2, r5
 8013f54:	4649      	mov	r1, r9
 8013f56:	4620      	mov	r0, r4
 8013f58:	f7ff ff8a 	bl	8013e70 <L_shift>
 8013f5c:	4544      	cmp	r4, r8
 8013f5e:	d928      	bls.n	8013fb2 <__hexnan+0xf6>
 8013f60:	4643      	mov	r3, r8
 8013f62:	f854 2b04 	ldr.w	r2, [r4], #4
 8013f66:	f843 2b04 	str.w	r2, [r3], #4
 8013f6a:	42a6      	cmp	r6, r4
 8013f6c:	d2f9      	bcs.n	8013f62 <__hexnan+0xa6>
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f843 2b04 	str.w	r2, [r3], #4
 8013f74:	429e      	cmp	r6, r3
 8013f76:	d2fb      	bcs.n	8013f70 <__hexnan+0xb4>
 8013f78:	6833      	ldr	r3, [r6, #0]
 8013f7a:	b91b      	cbnz	r3, 8013f84 <__hexnan+0xc8>
 8013f7c:	4546      	cmp	r6, r8
 8013f7e:	d127      	bne.n	8013fd0 <__hexnan+0x114>
 8013f80:	2301      	movs	r3, #1
 8013f82:	6033      	str	r3, [r6, #0]
 8013f84:	2005      	movs	r0, #5
 8013f86:	e026      	b.n	8013fd6 <__hexnan+0x11a>
 8013f88:	3501      	adds	r5, #1
 8013f8a:	2d08      	cmp	r5, #8
 8013f8c:	f10b 0b01 	add.w	fp, fp, #1
 8013f90:	dd06      	ble.n	8013fa0 <__hexnan+0xe4>
 8013f92:	4544      	cmp	r4, r8
 8013f94:	d9cf      	bls.n	8013f36 <__hexnan+0x7a>
 8013f96:	2300      	movs	r3, #0
 8013f98:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f9c:	2501      	movs	r5, #1
 8013f9e:	3c04      	subs	r4, #4
 8013fa0:	6822      	ldr	r2, [r4, #0]
 8013fa2:	f000 000f 	and.w	r0, r0, #15
 8013fa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013faa:	6020      	str	r0, [r4, #0]
 8013fac:	e7c3      	b.n	8013f36 <__hexnan+0x7a>
 8013fae:	2508      	movs	r5, #8
 8013fb0:	e7c1      	b.n	8013f36 <__hexnan+0x7a>
 8013fb2:	9b01      	ldr	r3, [sp, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d0df      	beq.n	8013f78 <__hexnan+0xbc>
 8013fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8013fbc:	f1c3 0320 	rsb	r3, r3, #32
 8013fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8013fc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013fc8:	401a      	ands	r2, r3
 8013fca:	f847 2c04 	str.w	r2, [r7, #-4]
 8013fce:	e7d3      	b.n	8013f78 <__hexnan+0xbc>
 8013fd0:	3e04      	subs	r6, #4
 8013fd2:	e7d1      	b.n	8013f78 <__hexnan+0xbc>
 8013fd4:	2004      	movs	r0, #4
 8013fd6:	b007      	add	sp, #28
 8013fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fdc <__localeconv_l>:
 8013fdc:	30f0      	adds	r0, #240	; 0xf0
 8013fde:	4770      	bx	lr

08013fe0 <_lseek_r>:
 8013fe0:	b538      	push	{r3, r4, r5, lr}
 8013fe2:	4c07      	ldr	r4, [pc, #28]	; (8014000 <_lseek_r+0x20>)
 8013fe4:	4605      	mov	r5, r0
 8013fe6:	4608      	mov	r0, r1
 8013fe8:	4611      	mov	r1, r2
 8013fea:	2200      	movs	r2, #0
 8013fec:	6022      	str	r2, [r4, #0]
 8013fee:	461a      	mov	r2, r3
 8013ff0:	f7ef fb64 	bl	80036bc <_lseek>
 8013ff4:	1c43      	adds	r3, r0, #1
 8013ff6:	d102      	bne.n	8013ffe <_lseek_r+0x1e>
 8013ff8:	6823      	ldr	r3, [r4, #0]
 8013ffa:	b103      	cbz	r3, 8013ffe <_lseek_r+0x1e>
 8013ffc:	602b      	str	r3, [r5, #0]
 8013ffe:	bd38      	pop	{r3, r4, r5, pc}
 8014000:	20007094 	.word	0x20007094

08014004 <__malloc_lock>:
 8014004:	4770      	bx	lr

08014006 <__malloc_unlock>:
 8014006:	4770      	bx	lr

08014008 <_Balloc>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801400c:	4604      	mov	r4, r0
 801400e:	460e      	mov	r6, r1
 8014010:	b93d      	cbnz	r5, 8014022 <_Balloc+0x1a>
 8014012:	2010      	movs	r0, #16
 8014014:	f7fe fafc 	bl	8012610 <malloc>
 8014018:	6260      	str	r0, [r4, #36]	; 0x24
 801401a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801401e:	6005      	str	r5, [r0, #0]
 8014020:	60c5      	str	r5, [r0, #12]
 8014022:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014024:	68eb      	ldr	r3, [r5, #12]
 8014026:	b183      	cbz	r3, 801404a <_Balloc+0x42>
 8014028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014030:	b9b8      	cbnz	r0, 8014062 <_Balloc+0x5a>
 8014032:	2101      	movs	r1, #1
 8014034:	fa01 f506 	lsl.w	r5, r1, r6
 8014038:	1d6a      	adds	r2, r5, #5
 801403a:	0092      	lsls	r2, r2, #2
 801403c:	4620      	mov	r0, r4
 801403e:	f000 fbe2 	bl	8014806 <_calloc_r>
 8014042:	b160      	cbz	r0, 801405e <_Balloc+0x56>
 8014044:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014048:	e00e      	b.n	8014068 <_Balloc+0x60>
 801404a:	2221      	movs	r2, #33	; 0x21
 801404c:	2104      	movs	r1, #4
 801404e:	4620      	mov	r0, r4
 8014050:	f000 fbd9 	bl	8014806 <_calloc_r>
 8014054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014056:	60e8      	str	r0, [r5, #12]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d1e4      	bne.n	8014028 <_Balloc+0x20>
 801405e:	2000      	movs	r0, #0
 8014060:	bd70      	pop	{r4, r5, r6, pc}
 8014062:	6802      	ldr	r2, [r0, #0]
 8014064:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014068:	2300      	movs	r3, #0
 801406a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801406e:	e7f7      	b.n	8014060 <_Balloc+0x58>

08014070 <_Bfree>:
 8014070:	b570      	push	{r4, r5, r6, lr}
 8014072:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014074:	4606      	mov	r6, r0
 8014076:	460d      	mov	r5, r1
 8014078:	b93c      	cbnz	r4, 801408a <_Bfree+0x1a>
 801407a:	2010      	movs	r0, #16
 801407c:	f7fe fac8 	bl	8012610 <malloc>
 8014080:	6270      	str	r0, [r6, #36]	; 0x24
 8014082:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014086:	6004      	str	r4, [r0, #0]
 8014088:	60c4      	str	r4, [r0, #12]
 801408a:	b13d      	cbz	r5, 801409c <_Bfree+0x2c>
 801408c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801408e:	686a      	ldr	r2, [r5, #4]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014096:	6029      	str	r1, [r5, #0]
 8014098:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801409c:	bd70      	pop	{r4, r5, r6, pc}

0801409e <__multadd>:
 801409e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a2:	690d      	ldr	r5, [r1, #16]
 80140a4:	461f      	mov	r7, r3
 80140a6:	4606      	mov	r6, r0
 80140a8:	460c      	mov	r4, r1
 80140aa:	f101 0c14 	add.w	ip, r1, #20
 80140ae:	2300      	movs	r3, #0
 80140b0:	f8dc 0000 	ldr.w	r0, [ip]
 80140b4:	b281      	uxth	r1, r0
 80140b6:	fb02 7101 	mla	r1, r2, r1, r7
 80140ba:	0c0f      	lsrs	r7, r1, #16
 80140bc:	0c00      	lsrs	r0, r0, #16
 80140be:	fb02 7000 	mla	r0, r2, r0, r7
 80140c2:	b289      	uxth	r1, r1
 80140c4:	3301      	adds	r3, #1
 80140c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80140ca:	429d      	cmp	r5, r3
 80140cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80140d0:	f84c 1b04 	str.w	r1, [ip], #4
 80140d4:	dcec      	bgt.n	80140b0 <__multadd+0x12>
 80140d6:	b1d7      	cbz	r7, 801410e <__multadd+0x70>
 80140d8:	68a3      	ldr	r3, [r4, #8]
 80140da:	42ab      	cmp	r3, r5
 80140dc:	dc12      	bgt.n	8014104 <__multadd+0x66>
 80140de:	6861      	ldr	r1, [r4, #4]
 80140e0:	4630      	mov	r0, r6
 80140e2:	3101      	adds	r1, #1
 80140e4:	f7ff ff90 	bl	8014008 <_Balloc>
 80140e8:	6922      	ldr	r2, [r4, #16]
 80140ea:	3202      	adds	r2, #2
 80140ec:	f104 010c 	add.w	r1, r4, #12
 80140f0:	4680      	mov	r8, r0
 80140f2:	0092      	lsls	r2, r2, #2
 80140f4:	300c      	adds	r0, #12
 80140f6:	f7fe fabc 	bl	8012672 <memcpy>
 80140fa:	4621      	mov	r1, r4
 80140fc:	4630      	mov	r0, r6
 80140fe:	f7ff ffb7 	bl	8014070 <_Bfree>
 8014102:	4644      	mov	r4, r8
 8014104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014108:	3501      	adds	r5, #1
 801410a:	615f      	str	r7, [r3, #20]
 801410c:	6125      	str	r5, [r4, #16]
 801410e:	4620      	mov	r0, r4
 8014110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014114 <__s2b>:
 8014114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014118:	460c      	mov	r4, r1
 801411a:	4615      	mov	r5, r2
 801411c:	461f      	mov	r7, r3
 801411e:	2209      	movs	r2, #9
 8014120:	3308      	adds	r3, #8
 8014122:	4606      	mov	r6, r0
 8014124:	fb93 f3f2 	sdiv	r3, r3, r2
 8014128:	2100      	movs	r1, #0
 801412a:	2201      	movs	r2, #1
 801412c:	429a      	cmp	r2, r3
 801412e:	db20      	blt.n	8014172 <__s2b+0x5e>
 8014130:	4630      	mov	r0, r6
 8014132:	f7ff ff69 	bl	8014008 <_Balloc>
 8014136:	9b08      	ldr	r3, [sp, #32]
 8014138:	6143      	str	r3, [r0, #20]
 801413a:	2d09      	cmp	r5, #9
 801413c:	f04f 0301 	mov.w	r3, #1
 8014140:	6103      	str	r3, [r0, #16]
 8014142:	dd19      	ble.n	8014178 <__s2b+0x64>
 8014144:	f104 0809 	add.w	r8, r4, #9
 8014148:	46c1      	mov	r9, r8
 801414a:	442c      	add	r4, r5
 801414c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014150:	4601      	mov	r1, r0
 8014152:	3b30      	subs	r3, #48	; 0x30
 8014154:	220a      	movs	r2, #10
 8014156:	4630      	mov	r0, r6
 8014158:	f7ff ffa1 	bl	801409e <__multadd>
 801415c:	45a1      	cmp	r9, r4
 801415e:	d1f5      	bne.n	801414c <__s2b+0x38>
 8014160:	eb08 0405 	add.w	r4, r8, r5
 8014164:	3c08      	subs	r4, #8
 8014166:	1b2d      	subs	r5, r5, r4
 8014168:	1963      	adds	r3, r4, r5
 801416a:	42bb      	cmp	r3, r7
 801416c:	db07      	blt.n	801417e <__s2b+0x6a>
 801416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014172:	0052      	lsls	r2, r2, #1
 8014174:	3101      	adds	r1, #1
 8014176:	e7d9      	b.n	801412c <__s2b+0x18>
 8014178:	340a      	adds	r4, #10
 801417a:	2509      	movs	r5, #9
 801417c:	e7f3      	b.n	8014166 <__s2b+0x52>
 801417e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014182:	4601      	mov	r1, r0
 8014184:	3b30      	subs	r3, #48	; 0x30
 8014186:	220a      	movs	r2, #10
 8014188:	4630      	mov	r0, r6
 801418a:	f7ff ff88 	bl	801409e <__multadd>
 801418e:	e7eb      	b.n	8014168 <__s2b+0x54>

08014190 <__hi0bits>:
 8014190:	0c02      	lsrs	r2, r0, #16
 8014192:	0412      	lsls	r2, r2, #16
 8014194:	4603      	mov	r3, r0
 8014196:	b9b2      	cbnz	r2, 80141c6 <__hi0bits+0x36>
 8014198:	0403      	lsls	r3, r0, #16
 801419a:	2010      	movs	r0, #16
 801419c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80141a0:	bf04      	itt	eq
 80141a2:	021b      	lsleq	r3, r3, #8
 80141a4:	3008      	addeq	r0, #8
 80141a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80141aa:	bf04      	itt	eq
 80141ac:	011b      	lsleq	r3, r3, #4
 80141ae:	3004      	addeq	r0, #4
 80141b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80141b4:	bf04      	itt	eq
 80141b6:	009b      	lsleq	r3, r3, #2
 80141b8:	3002      	addeq	r0, #2
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	db06      	blt.n	80141cc <__hi0bits+0x3c>
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	d503      	bpl.n	80141ca <__hi0bits+0x3a>
 80141c2:	3001      	adds	r0, #1
 80141c4:	4770      	bx	lr
 80141c6:	2000      	movs	r0, #0
 80141c8:	e7e8      	b.n	801419c <__hi0bits+0xc>
 80141ca:	2020      	movs	r0, #32
 80141cc:	4770      	bx	lr

080141ce <__lo0bits>:
 80141ce:	6803      	ldr	r3, [r0, #0]
 80141d0:	f013 0207 	ands.w	r2, r3, #7
 80141d4:	4601      	mov	r1, r0
 80141d6:	d00b      	beq.n	80141f0 <__lo0bits+0x22>
 80141d8:	07da      	lsls	r2, r3, #31
 80141da:	d423      	bmi.n	8014224 <__lo0bits+0x56>
 80141dc:	0798      	lsls	r0, r3, #30
 80141de:	bf49      	itett	mi
 80141e0:	085b      	lsrmi	r3, r3, #1
 80141e2:	089b      	lsrpl	r3, r3, #2
 80141e4:	2001      	movmi	r0, #1
 80141e6:	600b      	strmi	r3, [r1, #0]
 80141e8:	bf5c      	itt	pl
 80141ea:	600b      	strpl	r3, [r1, #0]
 80141ec:	2002      	movpl	r0, #2
 80141ee:	4770      	bx	lr
 80141f0:	b298      	uxth	r0, r3
 80141f2:	b9a8      	cbnz	r0, 8014220 <__lo0bits+0x52>
 80141f4:	0c1b      	lsrs	r3, r3, #16
 80141f6:	2010      	movs	r0, #16
 80141f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80141fc:	bf04      	itt	eq
 80141fe:	0a1b      	lsreq	r3, r3, #8
 8014200:	3008      	addeq	r0, #8
 8014202:	071a      	lsls	r2, r3, #28
 8014204:	bf04      	itt	eq
 8014206:	091b      	lsreq	r3, r3, #4
 8014208:	3004      	addeq	r0, #4
 801420a:	079a      	lsls	r2, r3, #30
 801420c:	bf04      	itt	eq
 801420e:	089b      	lsreq	r3, r3, #2
 8014210:	3002      	addeq	r0, #2
 8014212:	07da      	lsls	r2, r3, #31
 8014214:	d402      	bmi.n	801421c <__lo0bits+0x4e>
 8014216:	085b      	lsrs	r3, r3, #1
 8014218:	d006      	beq.n	8014228 <__lo0bits+0x5a>
 801421a:	3001      	adds	r0, #1
 801421c:	600b      	str	r3, [r1, #0]
 801421e:	4770      	bx	lr
 8014220:	4610      	mov	r0, r2
 8014222:	e7e9      	b.n	80141f8 <__lo0bits+0x2a>
 8014224:	2000      	movs	r0, #0
 8014226:	4770      	bx	lr
 8014228:	2020      	movs	r0, #32
 801422a:	4770      	bx	lr

0801422c <__i2b>:
 801422c:	b510      	push	{r4, lr}
 801422e:	460c      	mov	r4, r1
 8014230:	2101      	movs	r1, #1
 8014232:	f7ff fee9 	bl	8014008 <_Balloc>
 8014236:	2201      	movs	r2, #1
 8014238:	6144      	str	r4, [r0, #20]
 801423a:	6102      	str	r2, [r0, #16]
 801423c:	bd10      	pop	{r4, pc}

0801423e <__multiply>:
 801423e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014242:	4614      	mov	r4, r2
 8014244:	690a      	ldr	r2, [r1, #16]
 8014246:	6923      	ldr	r3, [r4, #16]
 8014248:	429a      	cmp	r2, r3
 801424a:	bfb8      	it	lt
 801424c:	460b      	movlt	r3, r1
 801424e:	4688      	mov	r8, r1
 8014250:	bfbc      	itt	lt
 8014252:	46a0      	movlt	r8, r4
 8014254:	461c      	movlt	r4, r3
 8014256:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801425a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801425e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014262:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014266:	eb07 0609 	add.w	r6, r7, r9
 801426a:	42b3      	cmp	r3, r6
 801426c:	bfb8      	it	lt
 801426e:	3101      	addlt	r1, #1
 8014270:	f7ff feca 	bl	8014008 <_Balloc>
 8014274:	f100 0514 	add.w	r5, r0, #20
 8014278:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801427c:	462b      	mov	r3, r5
 801427e:	2200      	movs	r2, #0
 8014280:	4573      	cmp	r3, lr
 8014282:	d316      	bcc.n	80142b2 <__multiply+0x74>
 8014284:	f104 0214 	add.w	r2, r4, #20
 8014288:	f108 0114 	add.w	r1, r8, #20
 801428c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014290:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	9b00      	ldr	r3, [sp, #0]
 8014298:	9201      	str	r2, [sp, #4]
 801429a:	4293      	cmp	r3, r2
 801429c:	d80c      	bhi.n	80142b8 <__multiply+0x7a>
 801429e:	2e00      	cmp	r6, #0
 80142a0:	dd03      	ble.n	80142aa <__multiply+0x6c>
 80142a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d05d      	beq.n	8014366 <__multiply+0x128>
 80142aa:	6106      	str	r6, [r0, #16]
 80142ac:	b003      	add	sp, #12
 80142ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b2:	f843 2b04 	str.w	r2, [r3], #4
 80142b6:	e7e3      	b.n	8014280 <__multiply+0x42>
 80142b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80142bc:	f1bb 0f00 	cmp.w	fp, #0
 80142c0:	d023      	beq.n	801430a <__multiply+0xcc>
 80142c2:	4689      	mov	r9, r1
 80142c4:	46ac      	mov	ip, r5
 80142c6:	f04f 0800 	mov.w	r8, #0
 80142ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80142ce:	f8dc a000 	ldr.w	sl, [ip]
 80142d2:	b2a3      	uxth	r3, r4
 80142d4:	fa1f fa8a 	uxth.w	sl, sl
 80142d8:	fb0b a303 	mla	r3, fp, r3, sl
 80142dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80142e0:	f8dc 4000 	ldr.w	r4, [ip]
 80142e4:	4443      	add	r3, r8
 80142e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80142ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80142ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80142f2:	46e2      	mov	sl, ip
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80142fa:	454f      	cmp	r7, r9
 80142fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014300:	f84a 3b04 	str.w	r3, [sl], #4
 8014304:	d82b      	bhi.n	801435e <__multiply+0x120>
 8014306:	f8cc 8004 	str.w	r8, [ip, #4]
 801430a:	9b01      	ldr	r3, [sp, #4]
 801430c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014310:	3204      	adds	r2, #4
 8014312:	f1ba 0f00 	cmp.w	sl, #0
 8014316:	d020      	beq.n	801435a <__multiply+0x11c>
 8014318:	682b      	ldr	r3, [r5, #0]
 801431a:	4689      	mov	r9, r1
 801431c:	46a8      	mov	r8, r5
 801431e:	f04f 0b00 	mov.w	fp, #0
 8014322:	f8b9 c000 	ldrh.w	ip, [r9]
 8014326:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801432a:	fb0a 440c 	mla	r4, sl, ip, r4
 801432e:	445c      	add	r4, fp
 8014330:	46c4      	mov	ip, r8
 8014332:	b29b      	uxth	r3, r3
 8014334:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014338:	f84c 3b04 	str.w	r3, [ip], #4
 801433c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014340:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014344:	0c1b      	lsrs	r3, r3, #16
 8014346:	fb0a b303 	mla	r3, sl, r3, fp
 801434a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801434e:	454f      	cmp	r7, r9
 8014350:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014354:	d805      	bhi.n	8014362 <__multiply+0x124>
 8014356:	f8c8 3004 	str.w	r3, [r8, #4]
 801435a:	3504      	adds	r5, #4
 801435c:	e79b      	b.n	8014296 <__multiply+0x58>
 801435e:	46d4      	mov	ip, sl
 8014360:	e7b3      	b.n	80142ca <__multiply+0x8c>
 8014362:	46e0      	mov	r8, ip
 8014364:	e7dd      	b.n	8014322 <__multiply+0xe4>
 8014366:	3e01      	subs	r6, #1
 8014368:	e799      	b.n	801429e <__multiply+0x60>
	...

0801436c <__pow5mult>:
 801436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014370:	4615      	mov	r5, r2
 8014372:	f012 0203 	ands.w	r2, r2, #3
 8014376:	4606      	mov	r6, r0
 8014378:	460f      	mov	r7, r1
 801437a:	d007      	beq.n	801438c <__pow5mult+0x20>
 801437c:	3a01      	subs	r2, #1
 801437e:	4c21      	ldr	r4, [pc, #132]	; (8014404 <__pow5mult+0x98>)
 8014380:	2300      	movs	r3, #0
 8014382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014386:	f7ff fe8a 	bl	801409e <__multadd>
 801438a:	4607      	mov	r7, r0
 801438c:	10ad      	asrs	r5, r5, #2
 801438e:	d035      	beq.n	80143fc <__pow5mult+0x90>
 8014390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014392:	b93c      	cbnz	r4, 80143a4 <__pow5mult+0x38>
 8014394:	2010      	movs	r0, #16
 8014396:	f7fe f93b 	bl	8012610 <malloc>
 801439a:	6270      	str	r0, [r6, #36]	; 0x24
 801439c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80143a0:	6004      	str	r4, [r0, #0]
 80143a2:	60c4      	str	r4, [r0, #12]
 80143a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80143a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80143ac:	b94c      	cbnz	r4, 80143c2 <__pow5mult+0x56>
 80143ae:	f240 2171 	movw	r1, #625	; 0x271
 80143b2:	4630      	mov	r0, r6
 80143b4:	f7ff ff3a 	bl	801422c <__i2b>
 80143b8:	2300      	movs	r3, #0
 80143ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80143be:	4604      	mov	r4, r0
 80143c0:	6003      	str	r3, [r0, #0]
 80143c2:	f04f 0800 	mov.w	r8, #0
 80143c6:	07eb      	lsls	r3, r5, #31
 80143c8:	d50a      	bpl.n	80143e0 <__pow5mult+0x74>
 80143ca:	4639      	mov	r1, r7
 80143cc:	4622      	mov	r2, r4
 80143ce:	4630      	mov	r0, r6
 80143d0:	f7ff ff35 	bl	801423e <__multiply>
 80143d4:	4639      	mov	r1, r7
 80143d6:	4681      	mov	r9, r0
 80143d8:	4630      	mov	r0, r6
 80143da:	f7ff fe49 	bl	8014070 <_Bfree>
 80143de:	464f      	mov	r7, r9
 80143e0:	106d      	asrs	r5, r5, #1
 80143e2:	d00b      	beq.n	80143fc <__pow5mult+0x90>
 80143e4:	6820      	ldr	r0, [r4, #0]
 80143e6:	b938      	cbnz	r0, 80143f8 <__pow5mult+0x8c>
 80143e8:	4622      	mov	r2, r4
 80143ea:	4621      	mov	r1, r4
 80143ec:	4630      	mov	r0, r6
 80143ee:	f7ff ff26 	bl	801423e <__multiply>
 80143f2:	6020      	str	r0, [r4, #0]
 80143f4:	f8c0 8000 	str.w	r8, [r0]
 80143f8:	4604      	mov	r4, r0
 80143fa:	e7e4      	b.n	80143c6 <__pow5mult+0x5a>
 80143fc:	4638      	mov	r0, r7
 80143fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014402:	bf00      	nop
 8014404:	08018b48 	.word	0x08018b48

08014408 <__lshift>:
 8014408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801440c:	460c      	mov	r4, r1
 801440e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014412:	6923      	ldr	r3, [r4, #16]
 8014414:	6849      	ldr	r1, [r1, #4]
 8014416:	eb0a 0903 	add.w	r9, sl, r3
 801441a:	68a3      	ldr	r3, [r4, #8]
 801441c:	4607      	mov	r7, r0
 801441e:	4616      	mov	r6, r2
 8014420:	f109 0501 	add.w	r5, r9, #1
 8014424:	42ab      	cmp	r3, r5
 8014426:	db32      	blt.n	801448e <__lshift+0x86>
 8014428:	4638      	mov	r0, r7
 801442a:	f7ff fded 	bl	8014008 <_Balloc>
 801442e:	2300      	movs	r3, #0
 8014430:	4680      	mov	r8, r0
 8014432:	f100 0114 	add.w	r1, r0, #20
 8014436:	461a      	mov	r2, r3
 8014438:	4553      	cmp	r3, sl
 801443a:	db2b      	blt.n	8014494 <__lshift+0x8c>
 801443c:	6920      	ldr	r0, [r4, #16]
 801443e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014442:	f104 0314 	add.w	r3, r4, #20
 8014446:	f016 021f 	ands.w	r2, r6, #31
 801444a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801444e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014452:	d025      	beq.n	80144a0 <__lshift+0x98>
 8014454:	f1c2 0e20 	rsb	lr, r2, #32
 8014458:	2000      	movs	r0, #0
 801445a:	681e      	ldr	r6, [r3, #0]
 801445c:	468a      	mov	sl, r1
 801445e:	4096      	lsls	r6, r2
 8014460:	4330      	orrs	r0, r6
 8014462:	f84a 0b04 	str.w	r0, [sl], #4
 8014466:	f853 0b04 	ldr.w	r0, [r3], #4
 801446a:	459c      	cmp	ip, r3
 801446c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014470:	d814      	bhi.n	801449c <__lshift+0x94>
 8014472:	6048      	str	r0, [r1, #4]
 8014474:	b108      	cbz	r0, 801447a <__lshift+0x72>
 8014476:	f109 0502 	add.w	r5, r9, #2
 801447a:	3d01      	subs	r5, #1
 801447c:	4638      	mov	r0, r7
 801447e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014482:	4621      	mov	r1, r4
 8014484:	f7ff fdf4 	bl	8014070 <_Bfree>
 8014488:	4640      	mov	r0, r8
 801448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448e:	3101      	adds	r1, #1
 8014490:	005b      	lsls	r3, r3, #1
 8014492:	e7c7      	b.n	8014424 <__lshift+0x1c>
 8014494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014498:	3301      	adds	r3, #1
 801449a:	e7cd      	b.n	8014438 <__lshift+0x30>
 801449c:	4651      	mov	r1, sl
 801449e:	e7dc      	b.n	801445a <__lshift+0x52>
 80144a0:	3904      	subs	r1, #4
 80144a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80144a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80144aa:	459c      	cmp	ip, r3
 80144ac:	d8f9      	bhi.n	80144a2 <__lshift+0x9a>
 80144ae:	e7e4      	b.n	801447a <__lshift+0x72>

080144b0 <__mcmp>:
 80144b0:	6903      	ldr	r3, [r0, #16]
 80144b2:	690a      	ldr	r2, [r1, #16]
 80144b4:	1a9b      	subs	r3, r3, r2
 80144b6:	b530      	push	{r4, r5, lr}
 80144b8:	d10c      	bne.n	80144d4 <__mcmp+0x24>
 80144ba:	0092      	lsls	r2, r2, #2
 80144bc:	3014      	adds	r0, #20
 80144be:	3114      	adds	r1, #20
 80144c0:	1884      	adds	r4, r0, r2
 80144c2:	4411      	add	r1, r2
 80144c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80144c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80144cc:	4295      	cmp	r5, r2
 80144ce:	d003      	beq.n	80144d8 <__mcmp+0x28>
 80144d0:	d305      	bcc.n	80144de <__mcmp+0x2e>
 80144d2:	2301      	movs	r3, #1
 80144d4:	4618      	mov	r0, r3
 80144d6:	bd30      	pop	{r4, r5, pc}
 80144d8:	42a0      	cmp	r0, r4
 80144da:	d3f3      	bcc.n	80144c4 <__mcmp+0x14>
 80144dc:	e7fa      	b.n	80144d4 <__mcmp+0x24>
 80144de:	f04f 33ff 	mov.w	r3, #4294967295
 80144e2:	e7f7      	b.n	80144d4 <__mcmp+0x24>

080144e4 <__mdiff>:
 80144e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144e8:	460d      	mov	r5, r1
 80144ea:	4607      	mov	r7, r0
 80144ec:	4611      	mov	r1, r2
 80144ee:	4628      	mov	r0, r5
 80144f0:	4614      	mov	r4, r2
 80144f2:	f7ff ffdd 	bl	80144b0 <__mcmp>
 80144f6:	1e06      	subs	r6, r0, #0
 80144f8:	d108      	bne.n	801450c <__mdiff+0x28>
 80144fa:	4631      	mov	r1, r6
 80144fc:	4638      	mov	r0, r7
 80144fe:	f7ff fd83 	bl	8014008 <_Balloc>
 8014502:	2301      	movs	r3, #1
 8014504:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801450c:	bfa4      	itt	ge
 801450e:	4623      	movge	r3, r4
 8014510:	462c      	movge	r4, r5
 8014512:	4638      	mov	r0, r7
 8014514:	6861      	ldr	r1, [r4, #4]
 8014516:	bfa6      	itte	ge
 8014518:	461d      	movge	r5, r3
 801451a:	2600      	movge	r6, #0
 801451c:	2601      	movlt	r6, #1
 801451e:	f7ff fd73 	bl	8014008 <_Balloc>
 8014522:	692b      	ldr	r3, [r5, #16]
 8014524:	60c6      	str	r6, [r0, #12]
 8014526:	6926      	ldr	r6, [r4, #16]
 8014528:	f105 0914 	add.w	r9, r5, #20
 801452c:	f104 0214 	add.w	r2, r4, #20
 8014530:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014534:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014538:	f100 0514 	add.w	r5, r0, #20
 801453c:	f04f 0e00 	mov.w	lr, #0
 8014540:	f852 ab04 	ldr.w	sl, [r2], #4
 8014544:	f859 4b04 	ldr.w	r4, [r9], #4
 8014548:	fa1e f18a 	uxtah	r1, lr, sl
 801454c:	b2a3      	uxth	r3, r4
 801454e:	1ac9      	subs	r1, r1, r3
 8014550:	0c23      	lsrs	r3, r4, #16
 8014552:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014556:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801455a:	b289      	uxth	r1, r1
 801455c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014560:	45c8      	cmp	r8, r9
 8014562:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014566:	4694      	mov	ip, r2
 8014568:	f845 3b04 	str.w	r3, [r5], #4
 801456c:	d8e8      	bhi.n	8014540 <__mdiff+0x5c>
 801456e:	45bc      	cmp	ip, r7
 8014570:	d304      	bcc.n	801457c <__mdiff+0x98>
 8014572:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014576:	b183      	cbz	r3, 801459a <__mdiff+0xb6>
 8014578:	6106      	str	r6, [r0, #16]
 801457a:	e7c5      	b.n	8014508 <__mdiff+0x24>
 801457c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014580:	fa1e f381 	uxtah	r3, lr, r1
 8014584:	141a      	asrs	r2, r3, #16
 8014586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801458a:	b29b      	uxth	r3, r3
 801458c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014590:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014594:	f845 3b04 	str.w	r3, [r5], #4
 8014598:	e7e9      	b.n	801456e <__mdiff+0x8a>
 801459a:	3e01      	subs	r6, #1
 801459c:	e7e9      	b.n	8014572 <__mdiff+0x8e>
	...

080145a0 <__ulp>:
 80145a0:	4b12      	ldr	r3, [pc, #72]	; (80145ec <__ulp+0x4c>)
 80145a2:	ee10 2a90 	vmov	r2, s1
 80145a6:	401a      	ands	r2, r3
 80145a8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	dd04      	ble.n	80145ba <__ulp+0x1a>
 80145b0:	2000      	movs	r0, #0
 80145b2:	4619      	mov	r1, r3
 80145b4:	ec41 0b10 	vmov	d0, r0, r1
 80145b8:	4770      	bx	lr
 80145ba:	425b      	negs	r3, r3
 80145bc:	151b      	asrs	r3, r3, #20
 80145be:	2b13      	cmp	r3, #19
 80145c0:	f04f 0000 	mov.w	r0, #0
 80145c4:	f04f 0100 	mov.w	r1, #0
 80145c8:	dc04      	bgt.n	80145d4 <__ulp+0x34>
 80145ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80145ce:	fa42 f103 	asr.w	r1, r2, r3
 80145d2:	e7ef      	b.n	80145b4 <__ulp+0x14>
 80145d4:	3b14      	subs	r3, #20
 80145d6:	2b1e      	cmp	r3, #30
 80145d8:	f04f 0201 	mov.w	r2, #1
 80145dc:	bfda      	itte	le
 80145de:	f1c3 031f 	rsble	r3, r3, #31
 80145e2:	fa02 f303 	lslle.w	r3, r2, r3
 80145e6:	4613      	movgt	r3, r2
 80145e8:	4618      	mov	r0, r3
 80145ea:	e7e3      	b.n	80145b4 <__ulp+0x14>
 80145ec:	7ff00000 	.word	0x7ff00000

080145f0 <__b2d>:
 80145f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145f2:	6905      	ldr	r5, [r0, #16]
 80145f4:	f100 0714 	add.w	r7, r0, #20
 80145f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80145fc:	1f2e      	subs	r6, r5, #4
 80145fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014602:	4620      	mov	r0, r4
 8014604:	f7ff fdc4 	bl	8014190 <__hi0bits>
 8014608:	f1c0 0320 	rsb	r3, r0, #32
 801460c:	280a      	cmp	r0, #10
 801460e:	600b      	str	r3, [r1, #0]
 8014610:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014688 <__b2d+0x98>
 8014614:	dc14      	bgt.n	8014640 <__b2d+0x50>
 8014616:	f1c0 0e0b 	rsb	lr, r0, #11
 801461a:	fa24 f10e 	lsr.w	r1, r4, lr
 801461e:	42b7      	cmp	r7, r6
 8014620:	ea41 030c 	orr.w	r3, r1, ip
 8014624:	bf34      	ite	cc
 8014626:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801462a:	2100      	movcs	r1, #0
 801462c:	3015      	adds	r0, #21
 801462e:	fa04 f000 	lsl.w	r0, r4, r0
 8014632:	fa21 f10e 	lsr.w	r1, r1, lr
 8014636:	ea40 0201 	orr.w	r2, r0, r1
 801463a:	ec43 2b10 	vmov	d0, r2, r3
 801463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014640:	42b7      	cmp	r7, r6
 8014642:	bf3a      	itte	cc
 8014644:	f1a5 0608 	subcc.w	r6, r5, #8
 8014648:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801464c:	2100      	movcs	r1, #0
 801464e:	380b      	subs	r0, #11
 8014650:	d015      	beq.n	801467e <__b2d+0x8e>
 8014652:	4084      	lsls	r4, r0
 8014654:	f1c0 0520 	rsb	r5, r0, #32
 8014658:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801465c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014660:	42be      	cmp	r6, r7
 8014662:	fa21 fc05 	lsr.w	ip, r1, r5
 8014666:	ea44 030c 	orr.w	r3, r4, ip
 801466a:	bf8c      	ite	hi
 801466c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014670:	2400      	movls	r4, #0
 8014672:	fa01 f000 	lsl.w	r0, r1, r0
 8014676:	40ec      	lsrs	r4, r5
 8014678:	ea40 0204 	orr.w	r2, r0, r4
 801467c:	e7dd      	b.n	801463a <__b2d+0x4a>
 801467e:	ea44 030c 	orr.w	r3, r4, ip
 8014682:	460a      	mov	r2, r1
 8014684:	e7d9      	b.n	801463a <__b2d+0x4a>
 8014686:	bf00      	nop
 8014688:	3ff00000 	.word	0x3ff00000

0801468c <__d2b>:
 801468c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014690:	460e      	mov	r6, r1
 8014692:	2101      	movs	r1, #1
 8014694:	ec59 8b10 	vmov	r8, r9, d0
 8014698:	4615      	mov	r5, r2
 801469a:	f7ff fcb5 	bl	8014008 <_Balloc>
 801469e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80146a2:	4607      	mov	r7, r0
 80146a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80146a8:	bb34      	cbnz	r4, 80146f8 <__d2b+0x6c>
 80146aa:	9301      	str	r3, [sp, #4]
 80146ac:	f1b8 0300 	subs.w	r3, r8, #0
 80146b0:	d027      	beq.n	8014702 <__d2b+0x76>
 80146b2:	a802      	add	r0, sp, #8
 80146b4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80146b8:	f7ff fd89 	bl	80141ce <__lo0bits>
 80146bc:	9900      	ldr	r1, [sp, #0]
 80146be:	b1f0      	cbz	r0, 80146fe <__d2b+0x72>
 80146c0:	9a01      	ldr	r2, [sp, #4]
 80146c2:	f1c0 0320 	rsb	r3, r0, #32
 80146c6:	fa02 f303 	lsl.w	r3, r2, r3
 80146ca:	430b      	orrs	r3, r1
 80146cc:	40c2      	lsrs	r2, r0
 80146ce:	617b      	str	r3, [r7, #20]
 80146d0:	9201      	str	r2, [sp, #4]
 80146d2:	9b01      	ldr	r3, [sp, #4]
 80146d4:	61bb      	str	r3, [r7, #24]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	bf14      	ite	ne
 80146da:	2102      	movne	r1, #2
 80146dc:	2101      	moveq	r1, #1
 80146de:	6139      	str	r1, [r7, #16]
 80146e0:	b1c4      	cbz	r4, 8014714 <__d2b+0x88>
 80146e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80146e6:	4404      	add	r4, r0
 80146e8:	6034      	str	r4, [r6, #0]
 80146ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80146ee:	6028      	str	r0, [r5, #0]
 80146f0:	4638      	mov	r0, r7
 80146f2:	b003      	add	sp, #12
 80146f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146fc:	e7d5      	b.n	80146aa <__d2b+0x1e>
 80146fe:	6179      	str	r1, [r7, #20]
 8014700:	e7e7      	b.n	80146d2 <__d2b+0x46>
 8014702:	a801      	add	r0, sp, #4
 8014704:	f7ff fd63 	bl	80141ce <__lo0bits>
 8014708:	9b01      	ldr	r3, [sp, #4]
 801470a:	617b      	str	r3, [r7, #20]
 801470c:	2101      	movs	r1, #1
 801470e:	6139      	str	r1, [r7, #16]
 8014710:	3020      	adds	r0, #32
 8014712:	e7e5      	b.n	80146e0 <__d2b+0x54>
 8014714:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801471c:	6030      	str	r0, [r6, #0]
 801471e:	6918      	ldr	r0, [r3, #16]
 8014720:	f7ff fd36 	bl	8014190 <__hi0bits>
 8014724:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014728:	e7e1      	b.n	80146ee <__d2b+0x62>

0801472a <__ratio>:
 801472a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472e:	4688      	mov	r8, r1
 8014730:	4669      	mov	r1, sp
 8014732:	4681      	mov	r9, r0
 8014734:	f7ff ff5c 	bl	80145f0 <__b2d>
 8014738:	a901      	add	r1, sp, #4
 801473a:	4640      	mov	r0, r8
 801473c:	ec57 6b10 	vmov	r6, r7, d0
 8014740:	f7ff ff56 	bl	80145f0 <__b2d>
 8014744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014748:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801474c:	eba3 0c02 	sub.w	ip, r3, r2
 8014750:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014754:	1a9b      	subs	r3, r3, r2
 8014756:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801475a:	ec5b ab10 	vmov	sl, fp, d0
 801475e:	2b00      	cmp	r3, #0
 8014760:	bfce      	itee	gt
 8014762:	463a      	movgt	r2, r7
 8014764:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014768:	465a      	movle	r2, fp
 801476a:	4659      	mov	r1, fp
 801476c:	463d      	mov	r5, r7
 801476e:	bfd4      	ite	le
 8014770:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014774:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8014778:	4630      	mov	r0, r6
 801477a:	ee10 2a10 	vmov	r2, s0
 801477e:	460b      	mov	r3, r1
 8014780:	4629      	mov	r1, r5
 8014782:	f7ec f883 	bl	800088c <__aeabi_ddiv>
 8014786:	ec41 0b10 	vmov	d0, r0, r1
 801478a:	b003      	add	sp, #12
 801478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014790 <__copybits>:
 8014790:	3901      	subs	r1, #1
 8014792:	b510      	push	{r4, lr}
 8014794:	1149      	asrs	r1, r1, #5
 8014796:	6914      	ldr	r4, [r2, #16]
 8014798:	3101      	adds	r1, #1
 801479a:	f102 0314 	add.w	r3, r2, #20
 801479e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80147a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80147a6:	42a3      	cmp	r3, r4
 80147a8:	4602      	mov	r2, r0
 80147aa:	d303      	bcc.n	80147b4 <__copybits+0x24>
 80147ac:	2300      	movs	r3, #0
 80147ae:	428a      	cmp	r2, r1
 80147b0:	d305      	bcc.n	80147be <__copybits+0x2e>
 80147b2:	bd10      	pop	{r4, pc}
 80147b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147b8:	f840 2b04 	str.w	r2, [r0], #4
 80147bc:	e7f3      	b.n	80147a6 <__copybits+0x16>
 80147be:	f842 3b04 	str.w	r3, [r2], #4
 80147c2:	e7f4      	b.n	80147ae <__copybits+0x1e>

080147c4 <__any_on>:
 80147c4:	f100 0214 	add.w	r2, r0, #20
 80147c8:	6900      	ldr	r0, [r0, #16]
 80147ca:	114b      	asrs	r3, r1, #5
 80147cc:	4298      	cmp	r0, r3
 80147ce:	b510      	push	{r4, lr}
 80147d0:	db11      	blt.n	80147f6 <__any_on+0x32>
 80147d2:	dd0a      	ble.n	80147ea <__any_on+0x26>
 80147d4:	f011 011f 	ands.w	r1, r1, #31
 80147d8:	d007      	beq.n	80147ea <__any_on+0x26>
 80147da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80147de:	fa24 f001 	lsr.w	r0, r4, r1
 80147e2:	fa00 f101 	lsl.w	r1, r0, r1
 80147e6:	428c      	cmp	r4, r1
 80147e8:	d10b      	bne.n	8014802 <__any_on+0x3e>
 80147ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80147ee:	4293      	cmp	r3, r2
 80147f0:	d803      	bhi.n	80147fa <__any_on+0x36>
 80147f2:	2000      	movs	r0, #0
 80147f4:	bd10      	pop	{r4, pc}
 80147f6:	4603      	mov	r3, r0
 80147f8:	e7f7      	b.n	80147ea <__any_on+0x26>
 80147fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80147fe:	2900      	cmp	r1, #0
 8014800:	d0f5      	beq.n	80147ee <__any_on+0x2a>
 8014802:	2001      	movs	r0, #1
 8014804:	e7f6      	b.n	80147f4 <__any_on+0x30>

08014806 <_calloc_r>:
 8014806:	b538      	push	{r3, r4, r5, lr}
 8014808:	fb02 f401 	mul.w	r4, r2, r1
 801480c:	4621      	mov	r1, r4
 801480e:	f7fd ffab 	bl	8012768 <_malloc_r>
 8014812:	4605      	mov	r5, r0
 8014814:	b118      	cbz	r0, 801481e <_calloc_r+0x18>
 8014816:	4622      	mov	r2, r4
 8014818:	2100      	movs	r1, #0
 801481a:	f7fd ff4e 	bl	80126ba <memset>
 801481e:	4628      	mov	r0, r5
 8014820:	bd38      	pop	{r3, r4, r5, pc}

08014822 <_realloc_r>:
 8014822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014824:	4607      	mov	r7, r0
 8014826:	4614      	mov	r4, r2
 8014828:	460e      	mov	r6, r1
 801482a:	b921      	cbnz	r1, 8014836 <_realloc_r+0x14>
 801482c:	4611      	mov	r1, r2
 801482e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014832:	f7fd bf99 	b.w	8012768 <_malloc_r>
 8014836:	b922      	cbnz	r2, 8014842 <_realloc_r+0x20>
 8014838:	f7fd ff48 	bl	80126cc <_free_r>
 801483c:	4625      	mov	r5, r4
 801483e:	4628      	mov	r0, r5
 8014840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014842:	f001 fa0f 	bl	8015c64 <_malloc_usable_size_r>
 8014846:	42a0      	cmp	r0, r4
 8014848:	d20f      	bcs.n	801486a <_realloc_r+0x48>
 801484a:	4621      	mov	r1, r4
 801484c:	4638      	mov	r0, r7
 801484e:	f7fd ff8b 	bl	8012768 <_malloc_r>
 8014852:	4605      	mov	r5, r0
 8014854:	2800      	cmp	r0, #0
 8014856:	d0f2      	beq.n	801483e <_realloc_r+0x1c>
 8014858:	4631      	mov	r1, r6
 801485a:	4622      	mov	r2, r4
 801485c:	f7fd ff09 	bl	8012672 <memcpy>
 8014860:	4631      	mov	r1, r6
 8014862:	4638      	mov	r0, r7
 8014864:	f7fd ff32 	bl	80126cc <_free_r>
 8014868:	e7e9      	b.n	801483e <_realloc_r+0x1c>
 801486a:	4635      	mov	r5, r6
 801486c:	e7e7      	b.n	801483e <_realloc_r+0x1c>

0801486e <__ssputs_r>:
 801486e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014872:	688e      	ldr	r6, [r1, #8]
 8014874:	429e      	cmp	r6, r3
 8014876:	4682      	mov	sl, r0
 8014878:	460c      	mov	r4, r1
 801487a:	4690      	mov	r8, r2
 801487c:	4699      	mov	r9, r3
 801487e:	d837      	bhi.n	80148f0 <__ssputs_r+0x82>
 8014880:	898a      	ldrh	r2, [r1, #12]
 8014882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014886:	d031      	beq.n	80148ec <__ssputs_r+0x7e>
 8014888:	6825      	ldr	r5, [r4, #0]
 801488a:	6909      	ldr	r1, [r1, #16]
 801488c:	1a6f      	subs	r7, r5, r1
 801488e:	6965      	ldr	r5, [r4, #20]
 8014890:	2302      	movs	r3, #2
 8014892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014896:	fb95 f5f3 	sdiv	r5, r5, r3
 801489a:	f109 0301 	add.w	r3, r9, #1
 801489e:	443b      	add	r3, r7
 80148a0:	429d      	cmp	r5, r3
 80148a2:	bf38      	it	cc
 80148a4:	461d      	movcc	r5, r3
 80148a6:	0553      	lsls	r3, r2, #21
 80148a8:	d530      	bpl.n	801490c <__ssputs_r+0x9e>
 80148aa:	4629      	mov	r1, r5
 80148ac:	f7fd ff5c 	bl	8012768 <_malloc_r>
 80148b0:	4606      	mov	r6, r0
 80148b2:	b950      	cbnz	r0, 80148ca <__ssputs_r+0x5c>
 80148b4:	230c      	movs	r3, #12
 80148b6:	f8ca 3000 	str.w	r3, [sl]
 80148ba:	89a3      	ldrh	r3, [r4, #12]
 80148bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148c0:	81a3      	strh	r3, [r4, #12]
 80148c2:	f04f 30ff 	mov.w	r0, #4294967295
 80148c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ca:	463a      	mov	r2, r7
 80148cc:	6921      	ldr	r1, [r4, #16]
 80148ce:	f7fd fed0 	bl	8012672 <memcpy>
 80148d2:	89a3      	ldrh	r3, [r4, #12]
 80148d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80148d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148dc:	81a3      	strh	r3, [r4, #12]
 80148de:	6126      	str	r6, [r4, #16]
 80148e0:	6165      	str	r5, [r4, #20]
 80148e2:	443e      	add	r6, r7
 80148e4:	1bed      	subs	r5, r5, r7
 80148e6:	6026      	str	r6, [r4, #0]
 80148e8:	60a5      	str	r5, [r4, #8]
 80148ea:	464e      	mov	r6, r9
 80148ec:	454e      	cmp	r6, r9
 80148ee:	d900      	bls.n	80148f2 <__ssputs_r+0x84>
 80148f0:	464e      	mov	r6, r9
 80148f2:	4632      	mov	r2, r6
 80148f4:	4641      	mov	r1, r8
 80148f6:	6820      	ldr	r0, [r4, #0]
 80148f8:	f7fd fec6 	bl	8012688 <memmove>
 80148fc:	68a3      	ldr	r3, [r4, #8]
 80148fe:	1b9b      	subs	r3, r3, r6
 8014900:	60a3      	str	r3, [r4, #8]
 8014902:	6823      	ldr	r3, [r4, #0]
 8014904:	441e      	add	r6, r3
 8014906:	6026      	str	r6, [r4, #0]
 8014908:	2000      	movs	r0, #0
 801490a:	e7dc      	b.n	80148c6 <__ssputs_r+0x58>
 801490c:	462a      	mov	r2, r5
 801490e:	f7ff ff88 	bl	8014822 <_realloc_r>
 8014912:	4606      	mov	r6, r0
 8014914:	2800      	cmp	r0, #0
 8014916:	d1e2      	bne.n	80148de <__ssputs_r+0x70>
 8014918:	6921      	ldr	r1, [r4, #16]
 801491a:	4650      	mov	r0, sl
 801491c:	f7fd fed6 	bl	80126cc <_free_r>
 8014920:	e7c8      	b.n	80148b4 <__ssputs_r+0x46>
	...

08014924 <_svfiprintf_r>:
 8014924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014928:	461d      	mov	r5, r3
 801492a:	898b      	ldrh	r3, [r1, #12]
 801492c:	061f      	lsls	r7, r3, #24
 801492e:	b09d      	sub	sp, #116	; 0x74
 8014930:	4680      	mov	r8, r0
 8014932:	460c      	mov	r4, r1
 8014934:	4616      	mov	r6, r2
 8014936:	d50f      	bpl.n	8014958 <_svfiprintf_r+0x34>
 8014938:	690b      	ldr	r3, [r1, #16]
 801493a:	b96b      	cbnz	r3, 8014958 <_svfiprintf_r+0x34>
 801493c:	2140      	movs	r1, #64	; 0x40
 801493e:	f7fd ff13 	bl	8012768 <_malloc_r>
 8014942:	6020      	str	r0, [r4, #0]
 8014944:	6120      	str	r0, [r4, #16]
 8014946:	b928      	cbnz	r0, 8014954 <_svfiprintf_r+0x30>
 8014948:	230c      	movs	r3, #12
 801494a:	f8c8 3000 	str.w	r3, [r8]
 801494e:	f04f 30ff 	mov.w	r0, #4294967295
 8014952:	e0c8      	b.n	8014ae6 <_svfiprintf_r+0x1c2>
 8014954:	2340      	movs	r3, #64	; 0x40
 8014956:	6163      	str	r3, [r4, #20]
 8014958:	2300      	movs	r3, #0
 801495a:	9309      	str	r3, [sp, #36]	; 0x24
 801495c:	2320      	movs	r3, #32
 801495e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014962:	2330      	movs	r3, #48	; 0x30
 8014964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014968:	9503      	str	r5, [sp, #12]
 801496a:	f04f 0b01 	mov.w	fp, #1
 801496e:	4637      	mov	r7, r6
 8014970:	463d      	mov	r5, r7
 8014972:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014976:	b10b      	cbz	r3, 801497c <_svfiprintf_r+0x58>
 8014978:	2b25      	cmp	r3, #37	; 0x25
 801497a:	d13e      	bne.n	80149fa <_svfiprintf_r+0xd6>
 801497c:	ebb7 0a06 	subs.w	sl, r7, r6
 8014980:	d00b      	beq.n	801499a <_svfiprintf_r+0x76>
 8014982:	4653      	mov	r3, sl
 8014984:	4632      	mov	r2, r6
 8014986:	4621      	mov	r1, r4
 8014988:	4640      	mov	r0, r8
 801498a:	f7ff ff70 	bl	801486e <__ssputs_r>
 801498e:	3001      	adds	r0, #1
 8014990:	f000 80a4 	beq.w	8014adc <_svfiprintf_r+0x1b8>
 8014994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014996:	4453      	add	r3, sl
 8014998:	9309      	str	r3, [sp, #36]	; 0x24
 801499a:	783b      	ldrb	r3, [r7, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	f000 809d 	beq.w	8014adc <_svfiprintf_r+0x1b8>
 80149a2:	2300      	movs	r3, #0
 80149a4:	f04f 32ff 	mov.w	r2, #4294967295
 80149a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149ac:	9304      	str	r3, [sp, #16]
 80149ae:	9307      	str	r3, [sp, #28]
 80149b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149b4:	931a      	str	r3, [sp, #104]	; 0x68
 80149b6:	462f      	mov	r7, r5
 80149b8:	2205      	movs	r2, #5
 80149ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80149be:	4850      	ldr	r0, [pc, #320]	; (8014b00 <_svfiprintf_r+0x1dc>)
 80149c0:	f7eb fc2e 	bl	8000220 <memchr>
 80149c4:	9b04      	ldr	r3, [sp, #16]
 80149c6:	b9d0      	cbnz	r0, 80149fe <_svfiprintf_r+0xda>
 80149c8:	06d9      	lsls	r1, r3, #27
 80149ca:	bf44      	itt	mi
 80149cc:	2220      	movmi	r2, #32
 80149ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149d2:	071a      	lsls	r2, r3, #28
 80149d4:	bf44      	itt	mi
 80149d6:	222b      	movmi	r2, #43	; 0x2b
 80149d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80149dc:	782a      	ldrb	r2, [r5, #0]
 80149de:	2a2a      	cmp	r2, #42	; 0x2a
 80149e0:	d015      	beq.n	8014a0e <_svfiprintf_r+0xea>
 80149e2:	9a07      	ldr	r2, [sp, #28]
 80149e4:	462f      	mov	r7, r5
 80149e6:	2000      	movs	r0, #0
 80149e8:	250a      	movs	r5, #10
 80149ea:	4639      	mov	r1, r7
 80149ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149f0:	3b30      	subs	r3, #48	; 0x30
 80149f2:	2b09      	cmp	r3, #9
 80149f4:	d94d      	bls.n	8014a92 <_svfiprintf_r+0x16e>
 80149f6:	b1b8      	cbz	r0, 8014a28 <_svfiprintf_r+0x104>
 80149f8:	e00f      	b.n	8014a1a <_svfiprintf_r+0xf6>
 80149fa:	462f      	mov	r7, r5
 80149fc:	e7b8      	b.n	8014970 <_svfiprintf_r+0x4c>
 80149fe:	4a40      	ldr	r2, [pc, #256]	; (8014b00 <_svfiprintf_r+0x1dc>)
 8014a00:	1a80      	subs	r0, r0, r2
 8014a02:	fa0b f000 	lsl.w	r0, fp, r0
 8014a06:	4318      	orrs	r0, r3
 8014a08:	9004      	str	r0, [sp, #16]
 8014a0a:	463d      	mov	r5, r7
 8014a0c:	e7d3      	b.n	80149b6 <_svfiprintf_r+0x92>
 8014a0e:	9a03      	ldr	r2, [sp, #12]
 8014a10:	1d11      	adds	r1, r2, #4
 8014a12:	6812      	ldr	r2, [r2, #0]
 8014a14:	9103      	str	r1, [sp, #12]
 8014a16:	2a00      	cmp	r2, #0
 8014a18:	db01      	blt.n	8014a1e <_svfiprintf_r+0xfa>
 8014a1a:	9207      	str	r2, [sp, #28]
 8014a1c:	e004      	b.n	8014a28 <_svfiprintf_r+0x104>
 8014a1e:	4252      	negs	r2, r2
 8014a20:	f043 0302 	orr.w	r3, r3, #2
 8014a24:	9207      	str	r2, [sp, #28]
 8014a26:	9304      	str	r3, [sp, #16]
 8014a28:	783b      	ldrb	r3, [r7, #0]
 8014a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8014a2c:	d10c      	bne.n	8014a48 <_svfiprintf_r+0x124>
 8014a2e:	787b      	ldrb	r3, [r7, #1]
 8014a30:	2b2a      	cmp	r3, #42	; 0x2a
 8014a32:	d133      	bne.n	8014a9c <_svfiprintf_r+0x178>
 8014a34:	9b03      	ldr	r3, [sp, #12]
 8014a36:	1d1a      	adds	r2, r3, #4
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	9203      	str	r2, [sp, #12]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	bfb8      	it	lt
 8014a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a44:	3702      	adds	r7, #2
 8014a46:	9305      	str	r3, [sp, #20]
 8014a48:	4d2e      	ldr	r5, [pc, #184]	; (8014b04 <_svfiprintf_r+0x1e0>)
 8014a4a:	7839      	ldrb	r1, [r7, #0]
 8014a4c:	2203      	movs	r2, #3
 8014a4e:	4628      	mov	r0, r5
 8014a50:	f7eb fbe6 	bl	8000220 <memchr>
 8014a54:	b138      	cbz	r0, 8014a66 <_svfiprintf_r+0x142>
 8014a56:	2340      	movs	r3, #64	; 0x40
 8014a58:	1b40      	subs	r0, r0, r5
 8014a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8014a5e:	9b04      	ldr	r3, [sp, #16]
 8014a60:	4303      	orrs	r3, r0
 8014a62:	3701      	adds	r7, #1
 8014a64:	9304      	str	r3, [sp, #16]
 8014a66:	7839      	ldrb	r1, [r7, #0]
 8014a68:	4827      	ldr	r0, [pc, #156]	; (8014b08 <_svfiprintf_r+0x1e4>)
 8014a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a6e:	2206      	movs	r2, #6
 8014a70:	1c7e      	adds	r6, r7, #1
 8014a72:	f7eb fbd5 	bl	8000220 <memchr>
 8014a76:	2800      	cmp	r0, #0
 8014a78:	d038      	beq.n	8014aec <_svfiprintf_r+0x1c8>
 8014a7a:	4b24      	ldr	r3, [pc, #144]	; (8014b0c <_svfiprintf_r+0x1e8>)
 8014a7c:	bb13      	cbnz	r3, 8014ac4 <_svfiprintf_r+0x1a0>
 8014a7e:	9b03      	ldr	r3, [sp, #12]
 8014a80:	3307      	adds	r3, #7
 8014a82:	f023 0307 	bic.w	r3, r3, #7
 8014a86:	3308      	adds	r3, #8
 8014a88:	9303      	str	r3, [sp, #12]
 8014a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a8c:	444b      	add	r3, r9
 8014a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a90:	e76d      	b.n	801496e <_svfiprintf_r+0x4a>
 8014a92:	fb05 3202 	mla	r2, r5, r2, r3
 8014a96:	2001      	movs	r0, #1
 8014a98:	460f      	mov	r7, r1
 8014a9a:	e7a6      	b.n	80149ea <_svfiprintf_r+0xc6>
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	3701      	adds	r7, #1
 8014aa0:	9305      	str	r3, [sp, #20]
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	250a      	movs	r5, #10
 8014aa6:	4638      	mov	r0, r7
 8014aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014aac:	3a30      	subs	r2, #48	; 0x30
 8014aae:	2a09      	cmp	r2, #9
 8014ab0:	d903      	bls.n	8014aba <_svfiprintf_r+0x196>
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d0c8      	beq.n	8014a48 <_svfiprintf_r+0x124>
 8014ab6:	9105      	str	r1, [sp, #20]
 8014ab8:	e7c6      	b.n	8014a48 <_svfiprintf_r+0x124>
 8014aba:	fb05 2101 	mla	r1, r5, r1, r2
 8014abe:	2301      	movs	r3, #1
 8014ac0:	4607      	mov	r7, r0
 8014ac2:	e7f0      	b.n	8014aa6 <_svfiprintf_r+0x182>
 8014ac4:	ab03      	add	r3, sp, #12
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	4622      	mov	r2, r4
 8014aca:	4b11      	ldr	r3, [pc, #68]	; (8014b10 <_svfiprintf_r+0x1ec>)
 8014acc:	a904      	add	r1, sp, #16
 8014ace:	4640      	mov	r0, r8
 8014ad0:	f3af 8000 	nop.w
 8014ad4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014ad8:	4681      	mov	r9, r0
 8014ada:	d1d6      	bne.n	8014a8a <_svfiprintf_r+0x166>
 8014adc:	89a3      	ldrh	r3, [r4, #12]
 8014ade:	065b      	lsls	r3, r3, #25
 8014ae0:	f53f af35 	bmi.w	801494e <_svfiprintf_r+0x2a>
 8014ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ae6:	b01d      	add	sp, #116	; 0x74
 8014ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aec:	ab03      	add	r3, sp, #12
 8014aee:	9300      	str	r3, [sp, #0]
 8014af0:	4622      	mov	r2, r4
 8014af2:	4b07      	ldr	r3, [pc, #28]	; (8014b10 <_svfiprintf_r+0x1ec>)
 8014af4:	a904      	add	r1, sp, #16
 8014af6:	4640      	mov	r0, r8
 8014af8:	f000 fb6c 	bl	80151d4 <_printf_i>
 8014afc:	e7ea      	b.n	8014ad4 <_svfiprintf_r+0x1b0>
 8014afe:	bf00      	nop
 8014b00:	08018b54 	.word	0x08018b54
 8014b04:	08018b5a 	.word	0x08018b5a
 8014b08:	08018b5e 	.word	0x08018b5e
 8014b0c:	00000000 	.word	0x00000000
 8014b10:	0801486f 	.word	0x0801486f

08014b14 <_sungetc_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	1c4b      	adds	r3, r1, #1
 8014b18:	4614      	mov	r4, r2
 8014b1a:	d103      	bne.n	8014b24 <_sungetc_r+0x10>
 8014b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8014b20:	4628      	mov	r0, r5
 8014b22:	bd38      	pop	{r3, r4, r5, pc}
 8014b24:	8993      	ldrh	r3, [r2, #12]
 8014b26:	f023 0320 	bic.w	r3, r3, #32
 8014b2a:	8193      	strh	r3, [r2, #12]
 8014b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b2e:	6852      	ldr	r2, [r2, #4]
 8014b30:	b2cd      	uxtb	r5, r1
 8014b32:	b18b      	cbz	r3, 8014b58 <_sungetc_r+0x44>
 8014b34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014b36:	4293      	cmp	r3, r2
 8014b38:	dd08      	ble.n	8014b4c <_sungetc_r+0x38>
 8014b3a:	6823      	ldr	r3, [r4, #0]
 8014b3c:	1e5a      	subs	r2, r3, #1
 8014b3e:	6022      	str	r2, [r4, #0]
 8014b40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014b44:	6863      	ldr	r3, [r4, #4]
 8014b46:	3301      	adds	r3, #1
 8014b48:	6063      	str	r3, [r4, #4]
 8014b4a:	e7e9      	b.n	8014b20 <_sungetc_r+0xc>
 8014b4c:	4621      	mov	r1, r4
 8014b4e:	f000 fe7b 	bl	8015848 <__submore>
 8014b52:	2800      	cmp	r0, #0
 8014b54:	d0f1      	beq.n	8014b3a <_sungetc_r+0x26>
 8014b56:	e7e1      	b.n	8014b1c <_sungetc_r+0x8>
 8014b58:	6921      	ldr	r1, [r4, #16]
 8014b5a:	6823      	ldr	r3, [r4, #0]
 8014b5c:	b151      	cbz	r1, 8014b74 <_sungetc_r+0x60>
 8014b5e:	4299      	cmp	r1, r3
 8014b60:	d208      	bcs.n	8014b74 <_sungetc_r+0x60>
 8014b62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014b66:	42a9      	cmp	r1, r5
 8014b68:	d104      	bne.n	8014b74 <_sungetc_r+0x60>
 8014b6a:	3b01      	subs	r3, #1
 8014b6c:	3201      	adds	r2, #1
 8014b6e:	6023      	str	r3, [r4, #0]
 8014b70:	6062      	str	r2, [r4, #4]
 8014b72:	e7d5      	b.n	8014b20 <_sungetc_r+0xc>
 8014b74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8014b7e:	2303      	movs	r3, #3
 8014b80:	63a3      	str	r3, [r4, #56]	; 0x38
 8014b82:	4623      	mov	r3, r4
 8014b84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014b88:	6023      	str	r3, [r4, #0]
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	e7dc      	b.n	8014b48 <_sungetc_r+0x34>

08014b8e <__ssrefill_r>:
 8014b8e:	b510      	push	{r4, lr}
 8014b90:	460c      	mov	r4, r1
 8014b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014b94:	b169      	cbz	r1, 8014bb2 <__ssrefill_r+0x24>
 8014b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b9a:	4299      	cmp	r1, r3
 8014b9c:	d001      	beq.n	8014ba2 <__ssrefill_r+0x14>
 8014b9e:	f7fd fd95 	bl	80126cc <_free_r>
 8014ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ba4:	6063      	str	r3, [r4, #4]
 8014ba6:	2000      	movs	r0, #0
 8014ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8014baa:	b113      	cbz	r3, 8014bb2 <__ssrefill_r+0x24>
 8014bac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014bae:	6023      	str	r3, [r4, #0]
 8014bb0:	bd10      	pop	{r4, pc}
 8014bb2:	6923      	ldr	r3, [r4, #16]
 8014bb4:	6023      	str	r3, [r4, #0]
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	6063      	str	r3, [r4, #4]
 8014bba:	89a3      	ldrh	r3, [r4, #12]
 8014bbc:	f043 0320 	orr.w	r3, r3, #32
 8014bc0:	81a3      	strh	r3, [r4, #12]
 8014bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc6:	e7f3      	b.n	8014bb0 <__ssrefill_r+0x22>

08014bc8 <__ssvfiscanf_r>:
 8014bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bcc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014bd0:	460c      	mov	r4, r1
 8014bd2:	2100      	movs	r1, #0
 8014bd4:	9144      	str	r1, [sp, #272]	; 0x110
 8014bd6:	9145      	str	r1, [sp, #276]	; 0x114
 8014bd8:	499f      	ldr	r1, [pc, #636]	; (8014e58 <__ssvfiscanf_r+0x290>)
 8014bda:	91a0      	str	r1, [sp, #640]	; 0x280
 8014bdc:	f10d 0804 	add.w	r8, sp, #4
 8014be0:	499e      	ldr	r1, [pc, #632]	; (8014e5c <__ssvfiscanf_r+0x294>)
 8014be2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8014e60 <__ssvfiscanf_r+0x298>
 8014be6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014bea:	4606      	mov	r6, r0
 8014bec:	4692      	mov	sl, r2
 8014bee:	91a1      	str	r1, [sp, #644]	; 0x284
 8014bf0:	9300      	str	r3, [sp, #0]
 8014bf2:	270a      	movs	r7, #10
 8014bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f000 812a 	beq.w	8014e52 <__ssvfiscanf_r+0x28a>
 8014bfe:	4655      	mov	r5, sl
 8014c00:	f7fd fcf8 	bl	80125f4 <__locale_ctype_ptr>
 8014c04:	f815 bb01 	ldrb.w	fp, [r5], #1
 8014c08:	4458      	add	r0, fp
 8014c0a:	7843      	ldrb	r3, [r0, #1]
 8014c0c:	f013 0308 	ands.w	r3, r3, #8
 8014c10:	d01c      	beq.n	8014c4c <__ssvfiscanf_r+0x84>
 8014c12:	6863      	ldr	r3, [r4, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	dd12      	ble.n	8014c3e <__ssvfiscanf_r+0x76>
 8014c18:	f7fd fcec 	bl	80125f4 <__locale_ctype_ptr>
 8014c1c:	6823      	ldr	r3, [r4, #0]
 8014c1e:	781a      	ldrb	r2, [r3, #0]
 8014c20:	4410      	add	r0, r2
 8014c22:	7842      	ldrb	r2, [r0, #1]
 8014c24:	0712      	lsls	r2, r2, #28
 8014c26:	d401      	bmi.n	8014c2c <__ssvfiscanf_r+0x64>
 8014c28:	46aa      	mov	sl, r5
 8014c2a:	e7e3      	b.n	8014bf4 <__ssvfiscanf_r+0x2c>
 8014c2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014c2e:	3201      	adds	r2, #1
 8014c30:	9245      	str	r2, [sp, #276]	; 0x114
 8014c32:	6862      	ldr	r2, [r4, #4]
 8014c34:	3301      	adds	r3, #1
 8014c36:	3a01      	subs	r2, #1
 8014c38:	6062      	str	r2, [r4, #4]
 8014c3a:	6023      	str	r3, [r4, #0]
 8014c3c:	e7e9      	b.n	8014c12 <__ssvfiscanf_r+0x4a>
 8014c3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014c40:	4621      	mov	r1, r4
 8014c42:	4630      	mov	r0, r6
 8014c44:	4798      	blx	r3
 8014c46:	2800      	cmp	r0, #0
 8014c48:	d0e6      	beq.n	8014c18 <__ssvfiscanf_r+0x50>
 8014c4a:	e7ed      	b.n	8014c28 <__ssvfiscanf_r+0x60>
 8014c4c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8014c50:	f040 8082 	bne.w	8014d58 <__ssvfiscanf_r+0x190>
 8014c54:	9343      	str	r3, [sp, #268]	; 0x10c
 8014c56:	9341      	str	r3, [sp, #260]	; 0x104
 8014c58:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8014c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8014c5e:	d103      	bne.n	8014c68 <__ssvfiscanf_r+0xa0>
 8014c60:	2310      	movs	r3, #16
 8014c62:	9341      	str	r3, [sp, #260]	; 0x104
 8014c64:	f10a 0502 	add.w	r5, sl, #2
 8014c68:	46aa      	mov	sl, r5
 8014c6a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8014c6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014c72:	2a09      	cmp	r2, #9
 8014c74:	d922      	bls.n	8014cbc <__ssvfiscanf_r+0xf4>
 8014c76:	2203      	movs	r2, #3
 8014c78:	4879      	ldr	r0, [pc, #484]	; (8014e60 <__ssvfiscanf_r+0x298>)
 8014c7a:	f7eb fad1 	bl	8000220 <memchr>
 8014c7e:	b138      	cbz	r0, 8014c90 <__ssvfiscanf_r+0xc8>
 8014c80:	eba0 0309 	sub.w	r3, r0, r9
 8014c84:	2001      	movs	r0, #1
 8014c86:	4098      	lsls	r0, r3
 8014c88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014c8a:	4318      	orrs	r0, r3
 8014c8c:	9041      	str	r0, [sp, #260]	; 0x104
 8014c8e:	46aa      	mov	sl, r5
 8014c90:	f89a 3000 	ldrb.w	r3, [sl]
 8014c94:	2b67      	cmp	r3, #103	; 0x67
 8014c96:	f10a 0501 	add.w	r5, sl, #1
 8014c9a:	d82b      	bhi.n	8014cf4 <__ssvfiscanf_r+0x12c>
 8014c9c:	2b65      	cmp	r3, #101	; 0x65
 8014c9e:	f080 809f 	bcs.w	8014de0 <__ssvfiscanf_r+0x218>
 8014ca2:	2b47      	cmp	r3, #71	; 0x47
 8014ca4:	d810      	bhi.n	8014cc8 <__ssvfiscanf_r+0x100>
 8014ca6:	2b45      	cmp	r3, #69	; 0x45
 8014ca8:	f080 809a 	bcs.w	8014de0 <__ssvfiscanf_r+0x218>
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d06c      	beq.n	8014d8a <__ssvfiscanf_r+0x1c2>
 8014cb0:	2b25      	cmp	r3, #37	; 0x25
 8014cb2:	d051      	beq.n	8014d58 <__ssvfiscanf_r+0x190>
 8014cb4:	2303      	movs	r3, #3
 8014cb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8014cb8:	9742      	str	r7, [sp, #264]	; 0x108
 8014cba:	e027      	b.n	8014d0c <__ssvfiscanf_r+0x144>
 8014cbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014cbe:	fb07 1303 	mla	r3, r7, r3, r1
 8014cc2:	3b30      	subs	r3, #48	; 0x30
 8014cc4:	9343      	str	r3, [sp, #268]	; 0x10c
 8014cc6:	e7cf      	b.n	8014c68 <__ssvfiscanf_r+0xa0>
 8014cc8:	2b5b      	cmp	r3, #91	; 0x5b
 8014cca:	d06a      	beq.n	8014da2 <__ssvfiscanf_r+0x1da>
 8014ccc:	d80c      	bhi.n	8014ce8 <__ssvfiscanf_r+0x120>
 8014cce:	2b58      	cmp	r3, #88	; 0x58
 8014cd0:	d1f0      	bne.n	8014cb4 <__ssvfiscanf_r+0xec>
 8014cd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014cd8:	9241      	str	r2, [sp, #260]	; 0x104
 8014cda:	2210      	movs	r2, #16
 8014cdc:	9242      	str	r2, [sp, #264]	; 0x108
 8014cde:	2b6e      	cmp	r3, #110	; 0x6e
 8014ce0:	bf8c      	ite	hi
 8014ce2:	2304      	movhi	r3, #4
 8014ce4:	2303      	movls	r3, #3
 8014ce6:	e010      	b.n	8014d0a <__ssvfiscanf_r+0x142>
 8014ce8:	2b63      	cmp	r3, #99	; 0x63
 8014cea:	d065      	beq.n	8014db8 <__ssvfiscanf_r+0x1f0>
 8014cec:	2b64      	cmp	r3, #100	; 0x64
 8014cee:	d1e1      	bne.n	8014cb4 <__ssvfiscanf_r+0xec>
 8014cf0:	9742      	str	r7, [sp, #264]	; 0x108
 8014cf2:	e7f4      	b.n	8014cde <__ssvfiscanf_r+0x116>
 8014cf4:	2b70      	cmp	r3, #112	; 0x70
 8014cf6:	d04b      	beq.n	8014d90 <__ssvfiscanf_r+0x1c8>
 8014cf8:	d826      	bhi.n	8014d48 <__ssvfiscanf_r+0x180>
 8014cfa:	2b6e      	cmp	r3, #110	; 0x6e
 8014cfc:	d062      	beq.n	8014dc4 <__ssvfiscanf_r+0x1fc>
 8014cfe:	d84c      	bhi.n	8014d9a <__ssvfiscanf_r+0x1d2>
 8014d00:	2b69      	cmp	r3, #105	; 0x69
 8014d02:	d1d7      	bne.n	8014cb4 <__ssvfiscanf_r+0xec>
 8014d04:	2300      	movs	r3, #0
 8014d06:	9342      	str	r3, [sp, #264]	; 0x108
 8014d08:	2303      	movs	r3, #3
 8014d0a:	9347      	str	r3, [sp, #284]	; 0x11c
 8014d0c:	6863      	ldr	r3, [r4, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dd68      	ble.n	8014de4 <__ssvfiscanf_r+0x21c>
 8014d12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014d14:	0659      	lsls	r1, r3, #25
 8014d16:	d407      	bmi.n	8014d28 <__ssvfiscanf_r+0x160>
 8014d18:	f7fd fc6c 	bl	80125f4 <__locale_ctype_ptr>
 8014d1c:	6823      	ldr	r3, [r4, #0]
 8014d1e:	781a      	ldrb	r2, [r3, #0]
 8014d20:	4410      	add	r0, r2
 8014d22:	7842      	ldrb	r2, [r0, #1]
 8014d24:	0712      	lsls	r2, r2, #28
 8014d26:	d464      	bmi.n	8014df2 <__ssvfiscanf_r+0x22a>
 8014d28:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014d2a:	2b02      	cmp	r3, #2
 8014d2c:	dc73      	bgt.n	8014e16 <__ssvfiscanf_r+0x24e>
 8014d2e:	466b      	mov	r3, sp
 8014d30:	4622      	mov	r2, r4
 8014d32:	a941      	add	r1, sp, #260	; 0x104
 8014d34:	4630      	mov	r0, r6
 8014d36:	f000 fb5f 	bl	80153f8 <_scanf_chars>
 8014d3a:	2801      	cmp	r0, #1
 8014d3c:	f000 8089 	beq.w	8014e52 <__ssvfiscanf_r+0x28a>
 8014d40:	2802      	cmp	r0, #2
 8014d42:	f47f af71 	bne.w	8014c28 <__ssvfiscanf_r+0x60>
 8014d46:	e01d      	b.n	8014d84 <__ssvfiscanf_r+0x1bc>
 8014d48:	2b75      	cmp	r3, #117	; 0x75
 8014d4a:	d0d1      	beq.n	8014cf0 <__ssvfiscanf_r+0x128>
 8014d4c:	2b78      	cmp	r3, #120	; 0x78
 8014d4e:	d0c0      	beq.n	8014cd2 <__ssvfiscanf_r+0x10a>
 8014d50:	2b73      	cmp	r3, #115	; 0x73
 8014d52:	d1af      	bne.n	8014cb4 <__ssvfiscanf_r+0xec>
 8014d54:	2302      	movs	r3, #2
 8014d56:	e7d8      	b.n	8014d0a <__ssvfiscanf_r+0x142>
 8014d58:	6863      	ldr	r3, [r4, #4]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	dd0c      	ble.n	8014d78 <__ssvfiscanf_r+0x1b0>
 8014d5e:	6823      	ldr	r3, [r4, #0]
 8014d60:	781a      	ldrb	r2, [r3, #0]
 8014d62:	455a      	cmp	r2, fp
 8014d64:	d175      	bne.n	8014e52 <__ssvfiscanf_r+0x28a>
 8014d66:	3301      	adds	r3, #1
 8014d68:	6862      	ldr	r2, [r4, #4]
 8014d6a:	6023      	str	r3, [r4, #0]
 8014d6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014d6e:	3a01      	subs	r2, #1
 8014d70:	3301      	adds	r3, #1
 8014d72:	6062      	str	r2, [r4, #4]
 8014d74:	9345      	str	r3, [sp, #276]	; 0x114
 8014d76:	e757      	b.n	8014c28 <__ssvfiscanf_r+0x60>
 8014d78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	4798      	blx	r3
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d0ec      	beq.n	8014d5e <__ssvfiscanf_r+0x196>
 8014d84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d159      	bne.n	8014e3e <__ssvfiscanf_r+0x276>
 8014d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d8e:	e05c      	b.n	8014e4a <__ssvfiscanf_r+0x282>
 8014d90:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014d92:	f042 0220 	orr.w	r2, r2, #32
 8014d96:	9241      	str	r2, [sp, #260]	; 0x104
 8014d98:	e79b      	b.n	8014cd2 <__ssvfiscanf_r+0x10a>
 8014d9a:	2308      	movs	r3, #8
 8014d9c:	9342      	str	r3, [sp, #264]	; 0x108
 8014d9e:	2304      	movs	r3, #4
 8014da0:	e7b3      	b.n	8014d0a <__ssvfiscanf_r+0x142>
 8014da2:	4629      	mov	r1, r5
 8014da4:	4640      	mov	r0, r8
 8014da6:	f000 fc91 	bl	80156cc <__sccl>
 8014daa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014db0:	9341      	str	r3, [sp, #260]	; 0x104
 8014db2:	4605      	mov	r5, r0
 8014db4:	2301      	movs	r3, #1
 8014db6:	e7a8      	b.n	8014d0a <__ssvfiscanf_r+0x142>
 8014db8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dbe:	9341      	str	r3, [sp, #260]	; 0x104
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	e7a2      	b.n	8014d0a <__ssvfiscanf_r+0x142>
 8014dc4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014dc6:	06c3      	lsls	r3, r0, #27
 8014dc8:	f53f af2e 	bmi.w	8014c28 <__ssvfiscanf_r+0x60>
 8014dcc:	9b00      	ldr	r3, [sp, #0]
 8014dce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014dd0:	1d19      	adds	r1, r3, #4
 8014dd2:	9100      	str	r1, [sp, #0]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	07c0      	lsls	r0, r0, #31
 8014dd8:	bf4c      	ite	mi
 8014dda:	801a      	strhmi	r2, [r3, #0]
 8014ddc:	601a      	strpl	r2, [r3, #0]
 8014dde:	e723      	b.n	8014c28 <__ssvfiscanf_r+0x60>
 8014de0:	2305      	movs	r3, #5
 8014de2:	e792      	b.n	8014d0a <__ssvfiscanf_r+0x142>
 8014de4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014de6:	4621      	mov	r1, r4
 8014de8:	4630      	mov	r0, r6
 8014dea:	4798      	blx	r3
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d090      	beq.n	8014d12 <__ssvfiscanf_r+0x14a>
 8014df0:	e7c8      	b.n	8014d84 <__ssvfiscanf_r+0x1bc>
 8014df2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014df4:	3201      	adds	r2, #1
 8014df6:	9245      	str	r2, [sp, #276]	; 0x114
 8014df8:	6862      	ldr	r2, [r4, #4]
 8014dfa:	3a01      	subs	r2, #1
 8014dfc:	2a00      	cmp	r2, #0
 8014dfe:	6062      	str	r2, [r4, #4]
 8014e00:	dd02      	ble.n	8014e08 <__ssvfiscanf_r+0x240>
 8014e02:	3301      	adds	r3, #1
 8014e04:	6023      	str	r3, [r4, #0]
 8014e06:	e787      	b.n	8014d18 <__ssvfiscanf_r+0x150>
 8014e08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014e0a:	4621      	mov	r1, r4
 8014e0c:	4630      	mov	r0, r6
 8014e0e:	4798      	blx	r3
 8014e10:	2800      	cmp	r0, #0
 8014e12:	d081      	beq.n	8014d18 <__ssvfiscanf_r+0x150>
 8014e14:	e7b6      	b.n	8014d84 <__ssvfiscanf_r+0x1bc>
 8014e16:	2b04      	cmp	r3, #4
 8014e18:	dc06      	bgt.n	8014e28 <__ssvfiscanf_r+0x260>
 8014e1a:	466b      	mov	r3, sp
 8014e1c:	4622      	mov	r2, r4
 8014e1e:	a941      	add	r1, sp, #260	; 0x104
 8014e20:	4630      	mov	r0, r6
 8014e22:	f000 fb4d 	bl	80154c0 <_scanf_i>
 8014e26:	e788      	b.n	8014d3a <__ssvfiscanf_r+0x172>
 8014e28:	4b0e      	ldr	r3, [pc, #56]	; (8014e64 <__ssvfiscanf_r+0x29c>)
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	f43f aefc 	beq.w	8014c28 <__ssvfiscanf_r+0x60>
 8014e30:	466b      	mov	r3, sp
 8014e32:	4622      	mov	r2, r4
 8014e34:	a941      	add	r1, sp, #260	; 0x104
 8014e36:	4630      	mov	r0, r6
 8014e38:	f3af 8000 	nop.w
 8014e3c:	e77d      	b.n	8014d3a <__ssvfiscanf_r+0x172>
 8014e3e:	89a3      	ldrh	r3, [r4, #12]
 8014e40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014e44:	bf18      	it	ne
 8014e46:	f04f 30ff 	movne.w	r0, #4294967295
 8014e4a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e52:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014e54:	e7f9      	b.n	8014e4a <__ssvfiscanf_r+0x282>
 8014e56:	bf00      	nop
 8014e58:	08014b15 	.word	0x08014b15
 8014e5c:	08014b8f 	.word	0x08014b8f
 8014e60:	08018b5a 	.word	0x08018b5a
 8014e64:	00000000 	.word	0x00000000

08014e68 <__sfputc_r>:
 8014e68:	6893      	ldr	r3, [r2, #8]
 8014e6a:	3b01      	subs	r3, #1
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	b410      	push	{r4}
 8014e70:	6093      	str	r3, [r2, #8]
 8014e72:	da08      	bge.n	8014e86 <__sfputc_r+0x1e>
 8014e74:	6994      	ldr	r4, [r2, #24]
 8014e76:	42a3      	cmp	r3, r4
 8014e78:	db01      	blt.n	8014e7e <__sfputc_r+0x16>
 8014e7a:	290a      	cmp	r1, #10
 8014e7c:	d103      	bne.n	8014e86 <__sfputc_r+0x1e>
 8014e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e82:	f000 bd1b 	b.w	80158bc <__swbuf_r>
 8014e86:	6813      	ldr	r3, [r2, #0]
 8014e88:	1c58      	adds	r0, r3, #1
 8014e8a:	6010      	str	r0, [r2, #0]
 8014e8c:	7019      	strb	r1, [r3, #0]
 8014e8e:	4608      	mov	r0, r1
 8014e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e94:	4770      	bx	lr

08014e96 <__sfputs_r>:
 8014e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e98:	4606      	mov	r6, r0
 8014e9a:	460f      	mov	r7, r1
 8014e9c:	4614      	mov	r4, r2
 8014e9e:	18d5      	adds	r5, r2, r3
 8014ea0:	42ac      	cmp	r4, r5
 8014ea2:	d101      	bne.n	8014ea8 <__sfputs_r+0x12>
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	e007      	b.n	8014eb8 <__sfputs_r+0x22>
 8014ea8:	463a      	mov	r2, r7
 8014eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eae:	4630      	mov	r0, r6
 8014eb0:	f7ff ffda 	bl	8014e68 <__sfputc_r>
 8014eb4:	1c43      	adds	r3, r0, #1
 8014eb6:	d1f3      	bne.n	8014ea0 <__sfputs_r+0xa>
 8014eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ebc <_vfiprintf_r>:
 8014ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec0:	460c      	mov	r4, r1
 8014ec2:	b09d      	sub	sp, #116	; 0x74
 8014ec4:	4617      	mov	r7, r2
 8014ec6:	461d      	mov	r5, r3
 8014ec8:	4606      	mov	r6, r0
 8014eca:	b118      	cbz	r0, 8014ed4 <_vfiprintf_r+0x18>
 8014ecc:	6983      	ldr	r3, [r0, #24]
 8014ece:	b90b      	cbnz	r3, 8014ed4 <_vfiprintf_r+0x18>
 8014ed0:	f7fe fcd4 	bl	801387c <__sinit>
 8014ed4:	4b7c      	ldr	r3, [pc, #496]	; (80150c8 <_vfiprintf_r+0x20c>)
 8014ed6:	429c      	cmp	r4, r3
 8014ed8:	d158      	bne.n	8014f8c <_vfiprintf_r+0xd0>
 8014eda:	6874      	ldr	r4, [r6, #4]
 8014edc:	89a3      	ldrh	r3, [r4, #12]
 8014ede:	0718      	lsls	r0, r3, #28
 8014ee0:	d55e      	bpl.n	8014fa0 <_vfiprintf_r+0xe4>
 8014ee2:	6923      	ldr	r3, [r4, #16]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d05b      	beq.n	8014fa0 <_vfiprintf_r+0xe4>
 8014ee8:	2300      	movs	r3, #0
 8014eea:	9309      	str	r3, [sp, #36]	; 0x24
 8014eec:	2320      	movs	r3, #32
 8014eee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ef2:	2330      	movs	r3, #48	; 0x30
 8014ef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ef8:	9503      	str	r5, [sp, #12]
 8014efa:	f04f 0b01 	mov.w	fp, #1
 8014efe:	46b8      	mov	r8, r7
 8014f00:	4645      	mov	r5, r8
 8014f02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014f06:	b10b      	cbz	r3, 8014f0c <_vfiprintf_r+0x50>
 8014f08:	2b25      	cmp	r3, #37	; 0x25
 8014f0a:	d154      	bne.n	8014fb6 <_vfiprintf_r+0xfa>
 8014f0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8014f10:	d00b      	beq.n	8014f2a <_vfiprintf_r+0x6e>
 8014f12:	4653      	mov	r3, sl
 8014f14:	463a      	mov	r2, r7
 8014f16:	4621      	mov	r1, r4
 8014f18:	4630      	mov	r0, r6
 8014f1a:	f7ff ffbc 	bl	8014e96 <__sfputs_r>
 8014f1e:	3001      	adds	r0, #1
 8014f20:	f000 80c2 	beq.w	80150a8 <_vfiprintf_r+0x1ec>
 8014f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f26:	4453      	add	r3, sl
 8014f28:	9309      	str	r3, [sp, #36]	; 0x24
 8014f2a:	f898 3000 	ldrb.w	r3, [r8]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	f000 80ba 	beq.w	80150a8 <_vfiprintf_r+0x1ec>
 8014f34:	2300      	movs	r3, #0
 8014f36:	f04f 32ff 	mov.w	r2, #4294967295
 8014f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f3e:	9304      	str	r3, [sp, #16]
 8014f40:	9307      	str	r3, [sp, #28]
 8014f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f46:	931a      	str	r3, [sp, #104]	; 0x68
 8014f48:	46a8      	mov	r8, r5
 8014f4a:	2205      	movs	r2, #5
 8014f4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014f50:	485e      	ldr	r0, [pc, #376]	; (80150cc <_vfiprintf_r+0x210>)
 8014f52:	f7eb f965 	bl	8000220 <memchr>
 8014f56:	9b04      	ldr	r3, [sp, #16]
 8014f58:	bb78      	cbnz	r0, 8014fba <_vfiprintf_r+0xfe>
 8014f5a:	06d9      	lsls	r1, r3, #27
 8014f5c:	bf44      	itt	mi
 8014f5e:	2220      	movmi	r2, #32
 8014f60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f64:	071a      	lsls	r2, r3, #28
 8014f66:	bf44      	itt	mi
 8014f68:	222b      	movmi	r2, #43	; 0x2b
 8014f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f6e:	782a      	ldrb	r2, [r5, #0]
 8014f70:	2a2a      	cmp	r2, #42	; 0x2a
 8014f72:	d02a      	beq.n	8014fca <_vfiprintf_r+0x10e>
 8014f74:	9a07      	ldr	r2, [sp, #28]
 8014f76:	46a8      	mov	r8, r5
 8014f78:	2000      	movs	r0, #0
 8014f7a:	250a      	movs	r5, #10
 8014f7c:	4641      	mov	r1, r8
 8014f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f82:	3b30      	subs	r3, #48	; 0x30
 8014f84:	2b09      	cmp	r3, #9
 8014f86:	d969      	bls.n	801505c <_vfiprintf_r+0x1a0>
 8014f88:	b360      	cbz	r0, 8014fe4 <_vfiprintf_r+0x128>
 8014f8a:	e024      	b.n	8014fd6 <_vfiprintf_r+0x11a>
 8014f8c:	4b50      	ldr	r3, [pc, #320]	; (80150d0 <_vfiprintf_r+0x214>)
 8014f8e:	429c      	cmp	r4, r3
 8014f90:	d101      	bne.n	8014f96 <_vfiprintf_r+0xda>
 8014f92:	68b4      	ldr	r4, [r6, #8]
 8014f94:	e7a2      	b.n	8014edc <_vfiprintf_r+0x20>
 8014f96:	4b4f      	ldr	r3, [pc, #316]	; (80150d4 <_vfiprintf_r+0x218>)
 8014f98:	429c      	cmp	r4, r3
 8014f9a:	bf08      	it	eq
 8014f9c:	68f4      	ldreq	r4, [r6, #12]
 8014f9e:	e79d      	b.n	8014edc <_vfiprintf_r+0x20>
 8014fa0:	4621      	mov	r1, r4
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	f000 fcdc 	bl	8015960 <__swsetup_r>
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	d09d      	beq.n	8014ee8 <_vfiprintf_r+0x2c>
 8014fac:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb0:	b01d      	add	sp, #116	; 0x74
 8014fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb6:	46a8      	mov	r8, r5
 8014fb8:	e7a2      	b.n	8014f00 <_vfiprintf_r+0x44>
 8014fba:	4a44      	ldr	r2, [pc, #272]	; (80150cc <_vfiprintf_r+0x210>)
 8014fbc:	1a80      	subs	r0, r0, r2
 8014fbe:	fa0b f000 	lsl.w	r0, fp, r0
 8014fc2:	4318      	orrs	r0, r3
 8014fc4:	9004      	str	r0, [sp, #16]
 8014fc6:	4645      	mov	r5, r8
 8014fc8:	e7be      	b.n	8014f48 <_vfiprintf_r+0x8c>
 8014fca:	9a03      	ldr	r2, [sp, #12]
 8014fcc:	1d11      	adds	r1, r2, #4
 8014fce:	6812      	ldr	r2, [r2, #0]
 8014fd0:	9103      	str	r1, [sp, #12]
 8014fd2:	2a00      	cmp	r2, #0
 8014fd4:	db01      	blt.n	8014fda <_vfiprintf_r+0x11e>
 8014fd6:	9207      	str	r2, [sp, #28]
 8014fd8:	e004      	b.n	8014fe4 <_vfiprintf_r+0x128>
 8014fda:	4252      	negs	r2, r2
 8014fdc:	f043 0302 	orr.w	r3, r3, #2
 8014fe0:	9207      	str	r2, [sp, #28]
 8014fe2:	9304      	str	r3, [sp, #16]
 8014fe4:	f898 3000 	ldrb.w	r3, [r8]
 8014fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8014fea:	d10e      	bne.n	801500a <_vfiprintf_r+0x14e>
 8014fec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ff2:	d138      	bne.n	8015066 <_vfiprintf_r+0x1aa>
 8014ff4:	9b03      	ldr	r3, [sp, #12]
 8014ff6:	1d1a      	adds	r2, r3, #4
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	9203      	str	r2, [sp, #12]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	bfb8      	it	lt
 8015000:	f04f 33ff 	movlt.w	r3, #4294967295
 8015004:	f108 0802 	add.w	r8, r8, #2
 8015008:	9305      	str	r3, [sp, #20]
 801500a:	4d33      	ldr	r5, [pc, #204]	; (80150d8 <_vfiprintf_r+0x21c>)
 801500c:	f898 1000 	ldrb.w	r1, [r8]
 8015010:	2203      	movs	r2, #3
 8015012:	4628      	mov	r0, r5
 8015014:	f7eb f904 	bl	8000220 <memchr>
 8015018:	b140      	cbz	r0, 801502c <_vfiprintf_r+0x170>
 801501a:	2340      	movs	r3, #64	; 0x40
 801501c:	1b40      	subs	r0, r0, r5
 801501e:	fa03 f000 	lsl.w	r0, r3, r0
 8015022:	9b04      	ldr	r3, [sp, #16]
 8015024:	4303      	orrs	r3, r0
 8015026:	f108 0801 	add.w	r8, r8, #1
 801502a:	9304      	str	r3, [sp, #16]
 801502c:	f898 1000 	ldrb.w	r1, [r8]
 8015030:	482a      	ldr	r0, [pc, #168]	; (80150dc <_vfiprintf_r+0x220>)
 8015032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015036:	2206      	movs	r2, #6
 8015038:	f108 0701 	add.w	r7, r8, #1
 801503c:	f7eb f8f0 	bl	8000220 <memchr>
 8015040:	2800      	cmp	r0, #0
 8015042:	d037      	beq.n	80150b4 <_vfiprintf_r+0x1f8>
 8015044:	4b26      	ldr	r3, [pc, #152]	; (80150e0 <_vfiprintf_r+0x224>)
 8015046:	bb1b      	cbnz	r3, 8015090 <_vfiprintf_r+0x1d4>
 8015048:	9b03      	ldr	r3, [sp, #12]
 801504a:	3307      	adds	r3, #7
 801504c:	f023 0307 	bic.w	r3, r3, #7
 8015050:	3308      	adds	r3, #8
 8015052:	9303      	str	r3, [sp, #12]
 8015054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015056:	444b      	add	r3, r9
 8015058:	9309      	str	r3, [sp, #36]	; 0x24
 801505a:	e750      	b.n	8014efe <_vfiprintf_r+0x42>
 801505c:	fb05 3202 	mla	r2, r5, r2, r3
 8015060:	2001      	movs	r0, #1
 8015062:	4688      	mov	r8, r1
 8015064:	e78a      	b.n	8014f7c <_vfiprintf_r+0xc0>
 8015066:	2300      	movs	r3, #0
 8015068:	f108 0801 	add.w	r8, r8, #1
 801506c:	9305      	str	r3, [sp, #20]
 801506e:	4619      	mov	r1, r3
 8015070:	250a      	movs	r5, #10
 8015072:	4640      	mov	r0, r8
 8015074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015078:	3a30      	subs	r2, #48	; 0x30
 801507a:	2a09      	cmp	r2, #9
 801507c:	d903      	bls.n	8015086 <_vfiprintf_r+0x1ca>
 801507e:	2b00      	cmp	r3, #0
 8015080:	d0c3      	beq.n	801500a <_vfiprintf_r+0x14e>
 8015082:	9105      	str	r1, [sp, #20]
 8015084:	e7c1      	b.n	801500a <_vfiprintf_r+0x14e>
 8015086:	fb05 2101 	mla	r1, r5, r1, r2
 801508a:	2301      	movs	r3, #1
 801508c:	4680      	mov	r8, r0
 801508e:	e7f0      	b.n	8015072 <_vfiprintf_r+0x1b6>
 8015090:	ab03      	add	r3, sp, #12
 8015092:	9300      	str	r3, [sp, #0]
 8015094:	4622      	mov	r2, r4
 8015096:	4b13      	ldr	r3, [pc, #76]	; (80150e4 <_vfiprintf_r+0x228>)
 8015098:	a904      	add	r1, sp, #16
 801509a:	4630      	mov	r0, r6
 801509c:	f3af 8000 	nop.w
 80150a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80150a4:	4681      	mov	r9, r0
 80150a6:	d1d5      	bne.n	8015054 <_vfiprintf_r+0x198>
 80150a8:	89a3      	ldrh	r3, [r4, #12]
 80150aa:	065b      	lsls	r3, r3, #25
 80150ac:	f53f af7e 	bmi.w	8014fac <_vfiprintf_r+0xf0>
 80150b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150b2:	e77d      	b.n	8014fb0 <_vfiprintf_r+0xf4>
 80150b4:	ab03      	add	r3, sp, #12
 80150b6:	9300      	str	r3, [sp, #0]
 80150b8:	4622      	mov	r2, r4
 80150ba:	4b0a      	ldr	r3, [pc, #40]	; (80150e4 <_vfiprintf_r+0x228>)
 80150bc:	a904      	add	r1, sp, #16
 80150be:	4630      	mov	r0, r6
 80150c0:	f000 f888 	bl	80151d4 <_printf_i>
 80150c4:	e7ec      	b.n	80150a0 <_vfiprintf_r+0x1e4>
 80150c6:	bf00      	nop
 80150c8:	08018a14 	.word	0x08018a14
 80150cc:	08018b54 	.word	0x08018b54
 80150d0:	08018a34 	.word	0x08018a34
 80150d4:	080189f4 	.word	0x080189f4
 80150d8:	08018b5a 	.word	0x08018b5a
 80150dc:	08018b5e 	.word	0x08018b5e
 80150e0:	00000000 	.word	0x00000000
 80150e4:	08014e97 	.word	0x08014e97

080150e8 <_printf_common>:
 80150e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150ec:	4691      	mov	r9, r2
 80150ee:	461f      	mov	r7, r3
 80150f0:	688a      	ldr	r2, [r1, #8]
 80150f2:	690b      	ldr	r3, [r1, #16]
 80150f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80150f8:	4293      	cmp	r3, r2
 80150fa:	bfb8      	it	lt
 80150fc:	4613      	movlt	r3, r2
 80150fe:	f8c9 3000 	str.w	r3, [r9]
 8015102:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015106:	4606      	mov	r6, r0
 8015108:	460c      	mov	r4, r1
 801510a:	b112      	cbz	r2, 8015112 <_printf_common+0x2a>
 801510c:	3301      	adds	r3, #1
 801510e:	f8c9 3000 	str.w	r3, [r9]
 8015112:	6823      	ldr	r3, [r4, #0]
 8015114:	0699      	lsls	r1, r3, #26
 8015116:	bf42      	ittt	mi
 8015118:	f8d9 3000 	ldrmi.w	r3, [r9]
 801511c:	3302      	addmi	r3, #2
 801511e:	f8c9 3000 	strmi.w	r3, [r9]
 8015122:	6825      	ldr	r5, [r4, #0]
 8015124:	f015 0506 	ands.w	r5, r5, #6
 8015128:	d107      	bne.n	801513a <_printf_common+0x52>
 801512a:	f104 0a19 	add.w	sl, r4, #25
 801512e:	68e3      	ldr	r3, [r4, #12]
 8015130:	f8d9 2000 	ldr.w	r2, [r9]
 8015134:	1a9b      	subs	r3, r3, r2
 8015136:	42ab      	cmp	r3, r5
 8015138:	dc28      	bgt.n	801518c <_printf_common+0xa4>
 801513a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801513e:	6822      	ldr	r2, [r4, #0]
 8015140:	3300      	adds	r3, #0
 8015142:	bf18      	it	ne
 8015144:	2301      	movne	r3, #1
 8015146:	0692      	lsls	r2, r2, #26
 8015148:	d42d      	bmi.n	80151a6 <_printf_common+0xbe>
 801514a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801514e:	4639      	mov	r1, r7
 8015150:	4630      	mov	r0, r6
 8015152:	47c0      	blx	r8
 8015154:	3001      	adds	r0, #1
 8015156:	d020      	beq.n	801519a <_printf_common+0xb2>
 8015158:	6823      	ldr	r3, [r4, #0]
 801515a:	68e5      	ldr	r5, [r4, #12]
 801515c:	f8d9 2000 	ldr.w	r2, [r9]
 8015160:	f003 0306 	and.w	r3, r3, #6
 8015164:	2b04      	cmp	r3, #4
 8015166:	bf08      	it	eq
 8015168:	1aad      	subeq	r5, r5, r2
 801516a:	68a3      	ldr	r3, [r4, #8]
 801516c:	6922      	ldr	r2, [r4, #16]
 801516e:	bf0c      	ite	eq
 8015170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015174:	2500      	movne	r5, #0
 8015176:	4293      	cmp	r3, r2
 8015178:	bfc4      	itt	gt
 801517a:	1a9b      	subgt	r3, r3, r2
 801517c:	18ed      	addgt	r5, r5, r3
 801517e:	f04f 0900 	mov.w	r9, #0
 8015182:	341a      	adds	r4, #26
 8015184:	454d      	cmp	r5, r9
 8015186:	d11a      	bne.n	80151be <_printf_common+0xd6>
 8015188:	2000      	movs	r0, #0
 801518a:	e008      	b.n	801519e <_printf_common+0xb6>
 801518c:	2301      	movs	r3, #1
 801518e:	4652      	mov	r2, sl
 8015190:	4639      	mov	r1, r7
 8015192:	4630      	mov	r0, r6
 8015194:	47c0      	blx	r8
 8015196:	3001      	adds	r0, #1
 8015198:	d103      	bne.n	80151a2 <_printf_common+0xba>
 801519a:	f04f 30ff 	mov.w	r0, #4294967295
 801519e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151a2:	3501      	adds	r5, #1
 80151a4:	e7c3      	b.n	801512e <_printf_common+0x46>
 80151a6:	18e1      	adds	r1, r4, r3
 80151a8:	1c5a      	adds	r2, r3, #1
 80151aa:	2030      	movs	r0, #48	; 0x30
 80151ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80151b0:	4422      	add	r2, r4
 80151b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80151b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80151ba:	3302      	adds	r3, #2
 80151bc:	e7c5      	b.n	801514a <_printf_common+0x62>
 80151be:	2301      	movs	r3, #1
 80151c0:	4622      	mov	r2, r4
 80151c2:	4639      	mov	r1, r7
 80151c4:	4630      	mov	r0, r6
 80151c6:	47c0      	blx	r8
 80151c8:	3001      	adds	r0, #1
 80151ca:	d0e6      	beq.n	801519a <_printf_common+0xb2>
 80151cc:	f109 0901 	add.w	r9, r9, #1
 80151d0:	e7d8      	b.n	8015184 <_printf_common+0x9c>
	...

080151d4 <_printf_i>:
 80151d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80151dc:	460c      	mov	r4, r1
 80151de:	7e09      	ldrb	r1, [r1, #24]
 80151e0:	b085      	sub	sp, #20
 80151e2:	296e      	cmp	r1, #110	; 0x6e
 80151e4:	4617      	mov	r7, r2
 80151e6:	4606      	mov	r6, r0
 80151e8:	4698      	mov	r8, r3
 80151ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80151ec:	f000 80b3 	beq.w	8015356 <_printf_i+0x182>
 80151f0:	d822      	bhi.n	8015238 <_printf_i+0x64>
 80151f2:	2963      	cmp	r1, #99	; 0x63
 80151f4:	d036      	beq.n	8015264 <_printf_i+0x90>
 80151f6:	d80a      	bhi.n	801520e <_printf_i+0x3a>
 80151f8:	2900      	cmp	r1, #0
 80151fa:	f000 80b9 	beq.w	8015370 <_printf_i+0x19c>
 80151fe:	2958      	cmp	r1, #88	; 0x58
 8015200:	f000 8083 	beq.w	801530a <_printf_i+0x136>
 8015204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015208:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801520c:	e032      	b.n	8015274 <_printf_i+0xa0>
 801520e:	2964      	cmp	r1, #100	; 0x64
 8015210:	d001      	beq.n	8015216 <_printf_i+0x42>
 8015212:	2969      	cmp	r1, #105	; 0x69
 8015214:	d1f6      	bne.n	8015204 <_printf_i+0x30>
 8015216:	6820      	ldr	r0, [r4, #0]
 8015218:	6813      	ldr	r3, [r2, #0]
 801521a:	0605      	lsls	r5, r0, #24
 801521c:	f103 0104 	add.w	r1, r3, #4
 8015220:	d52a      	bpl.n	8015278 <_printf_i+0xa4>
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	6011      	str	r1, [r2, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	da03      	bge.n	8015232 <_printf_i+0x5e>
 801522a:	222d      	movs	r2, #45	; 0x2d
 801522c:	425b      	negs	r3, r3
 801522e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015232:	486f      	ldr	r0, [pc, #444]	; (80153f0 <_printf_i+0x21c>)
 8015234:	220a      	movs	r2, #10
 8015236:	e039      	b.n	80152ac <_printf_i+0xd8>
 8015238:	2973      	cmp	r1, #115	; 0x73
 801523a:	f000 809d 	beq.w	8015378 <_printf_i+0x1a4>
 801523e:	d808      	bhi.n	8015252 <_printf_i+0x7e>
 8015240:	296f      	cmp	r1, #111	; 0x6f
 8015242:	d020      	beq.n	8015286 <_printf_i+0xb2>
 8015244:	2970      	cmp	r1, #112	; 0x70
 8015246:	d1dd      	bne.n	8015204 <_printf_i+0x30>
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	f043 0320 	orr.w	r3, r3, #32
 801524e:	6023      	str	r3, [r4, #0]
 8015250:	e003      	b.n	801525a <_printf_i+0x86>
 8015252:	2975      	cmp	r1, #117	; 0x75
 8015254:	d017      	beq.n	8015286 <_printf_i+0xb2>
 8015256:	2978      	cmp	r1, #120	; 0x78
 8015258:	d1d4      	bne.n	8015204 <_printf_i+0x30>
 801525a:	2378      	movs	r3, #120	; 0x78
 801525c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015260:	4864      	ldr	r0, [pc, #400]	; (80153f4 <_printf_i+0x220>)
 8015262:	e055      	b.n	8015310 <_printf_i+0x13c>
 8015264:	6813      	ldr	r3, [r2, #0]
 8015266:	1d19      	adds	r1, r3, #4
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	6011      	str	r1, [r2, #0]
 801526c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015274:	2301      	movs	r3, #1
 8015276:	e08c      	b.n	8015392 <_printf_i+0x1be>
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	6011      	str	r1, [r2, #0]
 801527c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015280:	bf18      	it	ne
 8015282:	b21b      	sxthne	r3, r3
 8015284:	e7cf      	b.n	8015226 <_printf_i+0x52>
 8015286:	6813      	ldr	r3, [r2, #0]
 8015288:	6825      	ldr	r5, [r4, #0]
 801528a:	1d18      	adds	r0, r3, #4
 801528c:	6010      	str	r0, [r2, #0]
 801528e:	0628      	lsls	r0, r5, #24
 8015290:	d501      	bpl.n	8015296 <_printf_i+0xc2>
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	e002      	b.n	801529c <_printf_i+0xc8>
 8015296:	0668      	lsls	r0, r5, #25
 8015298:	d5fb      	bpl.n	8015292 <_printf_i+0xbe>
 801529a:	881b      	ldrh	r3, [r3, #0]
 801529c:	4854      	ldr	r0, [pc, #336]	; (80153f0 <_printf_i+0x21c>)
 801529e:	296f      	cmp	r1, #111	; 0x6f
 80152a0:	bf14      	ite	ne
 80152a2:	220a      	movne	r2, #10
 80152a4:	2208      	moveq	r2, #8
 80152a6:	2100      	movs	r1, #0
 80152a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80152ac:	6865      	ldr	r5, [r4, #4]
 80152ae:	60a5      	str	r5, [r4, #8]
 80152b0:	2d00      	cmp	r5, #0
 80152b2:	f2c0 8095 	blt.w	80153e0 <_printf_i+0x20c>
 80152b6:	6821      	ldr	r1, [r4, #0]
 80152b8:	f021 0104 	bic.w	r1, r1, #4
 80152bc:	6021      	str	r1, [r4, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d13d      	bne.n	801533e <_printf_i+0x16a>
 80152c2:	2d00      	cmp	r5, #0
 80152c4:	f040 808e 	bne.w	80153e4 <_printf_i+0x210>
 80152c8:	4665      	mov	r5, ip
 80152ca:	2a08      	cmp	r2, #8
 80152cc:	d10b      	bne.n	80152e6 <_printf_i+0x112>
 80152ce:	6823      	ldr	r3, [r4, #0]
 80152d0:	07db      	lsls	r3, r3, #31
 80152d2:	d508      	bpl.n	80152e6 <_printf_i+0x112>
 80152d4:	6923      	ldr	r3, [r4, #16]
 80152d6:	6862      	ldr	r2, [r4, #4]
 80152d8:	429a      	cmp	r2, r3
 80152da:	bfde      	ittt	le
 80152dc:	2330      	movle	r3, #48	; 0x30
 80152de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80152e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80152e6:	ebac 0305 	sub.w	r3, ip, r5
 80152ea:	6123      	str	r3, [r4, #16]
 80152ec:	f8cd 8000 	str.w	r8, [sp]
 80152f0:	463b      	mov	r3, r7
 80152f2:	aa03      	add	r2, sp, #12
 80152f4:	4621      	mov	r1, r4
 80152f6:	4630      	mov	r0, r6
 80152f8:	f7ff fef6 	bl	80150e8 <_printf_common>
 80152fc:	3001      	adds	r0, #1
 80152fe:	d14d      	bne.n	801539c <_printf_i+0x1c8>
 8015300:	f04f 30ff 	mov.w	r0, #4294967295
 8015304:	b005      	add	sp, #20
 8015306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801530a:	4839      	ldr	r0, [pc, #228]	; (80153f0 <_printf_i+0x21c>)
 801530c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015310:	6813      	ldr	r3, [r2, #0]
 8015312:	6821      	ldr	r1, [r4, #0]
 8015314:	1d1d      	adds	r5, r3, #4
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	6015      	str	r5, [r2, #0]
 801531a:	060a      	lsls	r2, r1, #24
 801531c:	d50b      	bpl.n	8015336 <_printf_i+0x162>
 801531e:	07ca      	lsls	r2, r1, #31
 8015320:	bf44      	itt	mi
 8015322:	f041 0120 	orrmi.w	r1, r1, #32
 8015326:	6021      	strmi	r1, [r4, #0]
 8015328:	b91b      	cbnz	r3, 8015332 <_printf_i+0x15e>
 801532a:	6822      	ldr	r2, [r4, #0]
 801532c:	f022 0220 	bic.w	r2, r2, #32
 8015330:	6022      	str	r2, [r4, #0]
 8015332:	2210      	movs	r2, #16
 8015334:	e7b7      	b.n	80152a6 <_printf_i+0xd2>
 8015336:	064d      	lsls	r5, r1, #25
 8015338:	bf48      	it	mi
 801533a:	b29b      	uxthmi	r3, r3
 801533c:	e7ef      	b.n	801531e <_printf_i+0x14a>
 801533e:	4665      	mov	r5, ip
 8015340:	fbb3 f1f2 	udiv	r1, r3, r2
 8015344:	fb02 3311 	mls	r3, r2, r1, r3
 8015348:	5cc3      	ldrb	r3, [r0, r3]
 801534a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801534e:	460b      	mov	r3, r1
 8015350:	2900      	cmp	r1, #0
 8015352:	d1f5      	bne.n	8015340 <_printf_i+0x16c>
 8015354:	e7b9      	b.n	80152ca <_printf_i+0xf6>
 8015356:	6813      	ldr	r3, [r2, #0]
 8015358:	6825      	ldr	r5, [r4, #0]
 801535a:	6961      	ldr	r1, [r4, #20]
 801535c:	1d18      	adds	r0, r3, #4
 801535e:	6010      	str	r0, [r2, #0]
 8015360:	0628      	lsls	r0, r5, #24
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	d501      	bpl.n	801536a <_printf_i+0x196>
 8015366:	6019      	str	r1, [r3, #0]
 8015368:	e002      	b.n	8015370 <_printf_i+0x19c>
 801536a:	066a      	lsls	r2, r5, #25
 801536c:	d5fb      	bpl.n	8015366 <_printf_i+0x192>
 801536e:	8019      	strh	r1, [r3, #0]
 8015370:	2300      	movs	r3, #0
 8015372:	6123      	str	r3, [r4, #16]
 8015374:	4665      	mov	r5, ip
 8015376:	e7b9      	b.n	80152ec <_printf_i+0x118>
 8015378:	6813      	ldr	r3, [r2, #0]
 801537a:	1d19      	adds	r1, r3, #4
 801537c:	6011      	str	r1, [r2, #0]
 801537e:	681d      	ldr	r5, [r3, #0]
 8015380:	6862      	ldr	r2, [r4, #4]
 8015382:	2100      	movs	r1, #0
 8015384:	4628      	mov	r0, r5
 8015386:	f7ea ff4b 	bl	8000220 <memchr>
 801538a:	b108      	cbz	r0, 8015390 <_printf_i+0x1bc>
 801538c:	1b40      	subs	r0, r0, r5
 801538e:	6060      	str	r0, [r4, #4]
 8015390:	6863      	ldr	r3, [r4, #4]
 8015392:	6123      	str	r3, [r4, #16]
 8015394:	2300      	movs	r3, #0
 8015396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801539a:	e7a7      	b.n	80152ec <_printf_i+0x118>
 801539c:	6923      	ldr	r3, [r4, #16]
 801539e:	462a      	mov	r2, r5
 80153a0:	4639      	mov	r1, r7
 80153a2:	4630      	mov	r0, r6
 80153a4:	47c0      	blx	r8
 80153a6:	3001      	adds	r0, #1
 80153a8:	d0aa      	beq.n	8015300 <_printf_i+0x12c>
 80153aa:	6823      	ldr	r3, [r4, #0]
 80153ac:	079b      	lsls	r3, r3, #30
 80153ae:	d413      	bmi.n	80153d8 <_printf_i+0x204>
 80153b0:	68e0      	ldr	r0, [r4, #12]
 80153b2:	9b03      	ldr	r3, [sp, #12]
 80153b4:	4298      	cmp	r0, r3
 80153b6:	bfb8      	it	lt
 80153b8:	4618      	movlt	r0, r3
 80153ba:	e7a3      	b.n	8015304 <_printf_i+0x130>
 80153bc:	2301      	movs	r3, #1
 80153be:	464a      	mov	r2, r9
 80153c0:	4639      	mov	r1, r7
 80153c2:	4630      	mov	r0, r6
 80153c4:	47c0      	blx	r8
 80153c6:	3001      	adds	r0, #1
 80153c8:	d09a      	beq.n	8015300 <_printf_i+0x12c>
 80153ca:	3501      	adds	r5, #1
 80153cc:	68e3      	ldr	r3, [r4, #12]
 80153ce:	9a03      	ldr	r2, [sp, #12]
 80153d0:	1a9b      	subs	r3, r3, r2
 80153d2:	42ab      	cmp	r3, r5
 80153d4:	dcf2      	bgt.n	80153bc <_printf_i+0x1e8>
 80153d6:	e7eb      	b.n	80153b0 <_printf_i+0x1dc>
 80153d8:	2500      	movs	r5, #0
 80153da:	f104 0919 	add.w	r9, r4, #25
 80153de:	e7f5      	b.n	80153cc <_printf_i+0x1f8>
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d1ac      	bne.n	801533e <_printf_i+0x16a>
 80153e4:	7803      	ldrb	r3, [r0, #0]
 80153e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80153ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80153ee:	e76c      	b.n	80152ca <_printf_i+0xf6>
 80153f0:	08018b65 	.word	0x08018b65
 80153f4:	08018b76 	.word	0x08018b76

080153f8 <_scanf_chars>:
 80153f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153fc:	4615      	mov	r5, r2
 80153fe:	688a      	ldr	r2, [r1, #8]
 8015400:	4680      	mov	r8, r0
 8015402:	460c      	mov	r4, r1
 8015404:	b932      	cbnz	r2, 8015414 <_scanf_chars+0x1c>
 8015406:	698a      	ldr	r2, [r1, #24]
 8015408:	2a00      	cmp	r2, #0
 801540a:	bf14      	ite	ne
 801540c:	f04f 32ff 	movne.w	r2, #4294967295
 8015410:	2201      	moveq	r2, #1
 8015412:	608a      	str	r2, [r1, #8]
 8015414:	6822      	ldr	r2, [r4, #0]
 8015416:	06d1      	lsls	r1, r2, #27
 8015418:	bf5f      	itttt	pl
 801541a:	681a      	ldrpl	r2, [r3, #0]
 801541c:	1d11      	addpl	r1, r2, #4
 801541e:	6019      	strpl	r1, [r3, #0]
 8015420:	6817      	ldrpl	r7, [r2, #0]
 8015422:	2600      	movs	r6, #0
 8015424:	69a3      	ldr	r3, [r4, #24]
 8015426:	b1db      	cbz	r3, 8015460 <_scanf_chars+0x68>
 8015428:	2b01      	cmp	r3, #1
 801542a:	d107      	bne.n	801543c <_scanf_chars+0x44>
 801542c:	682b      	ldr	r3, [r5, #0]
 801542e:	6962      	ldr	r2, [r4, #20]
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	5cd3      	ldrb	r3, [r2, r3]
 8015434:	b9a3      	cbnz	r3, 8015460 <_scanf_chars+0x68>
 8015436:	2e00      	cmp	r6, #0
 8015438:	d132      	bne.n	80154a0 <_scanf_chars+0xa8>
 801543a:	e006      	b.n	801544a <_scanf_chars+0x52>
 801543c:	2b02      	cmp	r3, #2
 801543e:	d007      	beq.n	8015450 <_scanf_chars+0x58>
 8015440:	2e00      	cmp	r6, #0
 8015442:	d12d      	bne.n	80154a0 <_scanf_chars+0xa8>
 8015444:	69a3      	ldr	r3, [r4, #24]
 8015446:	2b01      	cmp	r3, #1
 8015448:	d12a      	bne.n	80154a0 <_scanf_chars+0xa8>
 801544a:	2001      	movs	r0, #1
 801544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015450:	f7fd f8d0 	bl	80125f4 <__locale_ctype_ptr>
 8015454:	682b      	ldr	r3, [r5, #0]
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	4418      	add	r0, r3
 801545a:	7843      	ldrb	r3, [r0, #1]
 801545c:	071b      	lsls	r3, r3, #28
 801545e:	d4ef      	bmi.n	8015440 <_scanf_chars+0x48>
 8015460:	6823      	ldr	r3, [r4, #0]
 8015462:	06da      	lsls	r2, r3, #27
 8015464:	bf5e      	ittt	pl
 8015466:	682b      	ldrpl	r3, [r5, #0]
 8015468:	781b      	ldrbpl	r3, [r3, #0]
 801546a:	703b      	strbpl	r3, [r7, #0]
 801546c:	682a      	ldr	r2, [r5, #0]
 801546e:	686b      	ldr	r3, [r5, #4]
 8015470:	f102 0201 	add.w	r2, r2, #1
 8015474:	602a      	str	r2, [r5, #0]
 8015476:	68a2      	ldr	r2, [r4, #8]
 8015478:	f103 33ff 	add.w	r3, r3, #4294967295
 801547c:	f102 32ff 	add.w	r2, r2, #4294967295
 8015480:	606b      	str	r3, [r5, #4]
 8015482:	f106 0601 	add.w	r6, r6, #1
 8015486:	bf58      	it	pl
 8015488:	3701      	addpl	r7, #1
 801548a:	60a2      	str	r2, [r4, #8]
 801548c:	b142      	cbz	r2, 80154a0 <_scanf_chars+0xa8>
 801548e:	2b00      	cmp	r3, #0
 8015490:	dcc8      	bgt.n	8015424 <_scanf_chars+0x2c>
 8015492:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015496:	4629      	mov	r1, r5
 8015498:	4640      	mov	r0, r8
 801549a:	4798      	blx	r3
 801549c:	2800      	cmp	r0, #0
 801549e:	d0c1      	beq.n	8015424 <_scanf_chars+0x2c>
 80154a0:	6823      	ldr	r3, [r4, #0]
 80154a2:	f013 0310 	ands.w	r3, r3, #16
 80154a6:	d105      	bne.n	80154b4 <_scanf_chars+0xbc>
 80154a8:	68e2      	ldr	r2, [r4, #12]
 80154aa:	3201      	adds	r2, #1
 80154ac:	60e2      	str	r2, [r4, #12]
 80154ae:	69a2      	ldr	r2, [r4, #24]
 80154b0:	b102      	cbz	r2, 80154b4 <_scanf_chars+0xbc>
 80154b2:	703b      	strb	r3, [r7, #0]
 80154b4:	6923      	ldr	r3, [r4, #16]
 80154b6:	441e      	add	r6, r3
 80154b8:	6126      	str	r6, [r4, #16]
 80154ba:	2000      	movs	r0, #0
 80154bc:	e7c6      	b.n	801544c <_scanf_chars+0x54>
	...

080154c0 <_scanf_i>:
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	469a      	mov	sl, r3
 80154c6:	4b74      	ldr	r3, [pc, #464]	; (8015698 <_scanf_i+0x1d8>)
 80154c8:	460c      	mov	r4, r1
 80154ca:	4683      	mov	fp, r0
 80154cc:	4616      	mov	r6, r2
 80154ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80154d2:	b087      	sub	sp, #28
 80154d4:	ab03      	add	r3, sp, #12
 80154d6:	68a7      	ldr	r7, [r4, #8]
 80154d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80154dc:	4b6f      	ldr	r3, [pc, #444]	; (801569c <_scanf_i+0x1dc>)
 80154de:	69a1      	ldr	r1, [r4, #24]
 80154e0:	4a6f      	ldr	r2, [pc, #444]	; (80156a0 <_scanf_i+0x1e0>)
 80154e2:	2903      	cmp	r1, #3
 80154e4:	bf08      	it	eq
 80154e6:	461a      	moveq	r2, r3
 80154e8:	1e7b      	subs	r3, r7, #1
 80154ea:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80154ee:	bf84      	itt	hi
 80154f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80154f4:	60a3      	strhi	r3, [r4, #8]
 80154f6:	6823      	ldr	r3, [r4, #0]
 80154f8:	9200      	str	r2, [sp, #0]
 80154fa:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80154fe:	bf88      	it	hi
 8015500:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015504:	f104 091c 	add.w	r9, r4, #28
 8015508:	6023      	str	r3, [r4, #0]
 801550a:	bf8c      	ite	hi
 801550c:	197f      	addhi	r7, r7, r5
 801550e:	2700      	movls	r7, #0
 8015510:	464b      	mov	r3, r9
 8015512:	f04f 0800 	mov.w	r8, #0
 8015516:	9301      	str	r3, [sp, #4]
 8015518:	6831      	ldr	r1, [r6, #0]
 801551a:	ab03      	add	r3, sp, #12
 801551c:	2202      	movs	r2, #2
 801551e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8015522:	7809      	ldrb	r1, [r1, #0]
 8015524:	f7ea fe7c 	bl	8000220 <memchr>
 8015528:	9b01      	ldr	r3, [sp, #4]
 801552a:	b330      	cbz	r0, 801557a <_scanf_i+0xba>
 801552c:	f1b8 0f01 	cmp.w	r8, #1
 8015530:	d15a      	bne.n	80155e8 <_scanf_i+0x128>
 8015532:	6862      	ldr	r2, [r4, #4]
 8015534:	b92a      	cbnz	r2, 8015542 <_scanf_i+0x82>
 8015536:	6822      	ldr	r2, [r4, #0]
 8015538:	2108      	movs	r1, #8
 801553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801553e:	6061      	str	r1, [r4, #4]
 8015540:	6022      	str	r2, [r4, #0]
 8015542:	6822      	ldr	r2, [r4, #0]
 8015544:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015548:	6022      	str	r2, [r4, #0]
 801554a:	68a2      	ldr	r2, [r4, #8]
 801554c:	1e51      	subs	r1, r2, #1
 801554e:	60a1      	str	r1, [r4, #8]
 8015550:	b19a      	cbz	r2, 801557a <_scanf_i+0xba>
 8015552:	6832      	ldr	r2, [r6, #0]
 8015554:	1c51      	adds	r1, r2, #1
 8015556:	6031      	str	r1, [r6, #0]
 8015558:	7812      	ldrb	r2, [r2, #0]
 801555a:	701a      	strb	r2, [r3, #0]
 801555c:	1c5d      	adds	r5, r3, #1
 801555e:	6873      	ldr	r3, [r6, #4]
 8015560:	3b01      	subs	r3, #1
 8015562:	2b00      	cmp	r3, #0
 8015564:	6073      	str	r3, [r6, #4]
 8015566:	dc07      	bgt.n	8015578 <_scanf_i+0xb8>
 8015568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801556c:	4631      	mov	r1, r6
 801556e:	4658      	mov	r0, fp
 8015570:	4798      	blx	r3
 8015572:	2800      	cmp	r0, #0
 8015574:	f040 8086 	bne.w	8015684 <_scanf_i+0x1c4>
 8015578:	462b      	mov	r3, r5
 801557a:	f108 0801 	add.w	r8, r8, #1
 801557e:	f1b8 0f03 	cmp.w	r8, #3
 8015582:	d1c8      	bne.n	8015516 <_scanf_i+0x56>
 8015584:	6862      	ldr	r2, [r4, #4]
 8015586:	b90a      	cbnz	r2, 801558c <_scanf_i+0xcc>
 8015588:	220a      	movs	r2, #10
 801558a:	6062      	str	r2, [r4, #4]
 801558c:	6862      	ldr	r2, [r4, #4]
 801558e:	4945      	ldr	r1, [pc, #276]	; (80156a4 <_scanf_i+0x1e4>)
 8015590:	6960      	ldr	r0, [r4, #20]
 8015592:	9301      	str	r3, [sp, #4]
 8015594:	1a89      	subs	r1, r1, r2
 8015596:	f000 f899 	bl	80156cc <__sccl>
 801559a:	9b01      	ldr	r3, [sp, #4]
 801559c:	f04f 0800 	mov.w	r8, #0
 80155a0:	461d      	mov	r5, r3
 80155a2:	68a3      	ldr	r3, [r4, #8]
 80155a4:	6822      	ldr	r2, [r4, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d03a      	beq.n	8015620 <_scanf_i+0x160>
 80155aa:	6831      	ldr	r1, [r6, #0]
 80155ac:	6960      	ldr	r0, [r4, #20]
 80155ae:	f891 c000 	ldrb.w	ip, [r1]
 80155b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80155b6:	2800      	cmp	r0, #0
 80155b8:	d032      	beq.n	8015620 <_scanf_i+0x160>
 80155ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80155be:	d121      	bne.n	8015604 <_scanf_i+0x144>
 80155c0:	0510      	lsls	r0, r2, #20
 80155c2:	d51f      	bpl.n	8015604 <_scanf_i+0x144>
 80155c4:	f108 0801 	add.w	r8, r8, #1
 80155c8:	b117      	cbz	r7, 80155d0 <_scanf_i+0x110>
 80155ca:	3301      	adds	r3, #1
 80155cc:	3f01      	subs	r7, #1
 80155ce:	60a3      	str	r3, [r4, #8]
 80155d0:	6873      	ldr	r3, [r6, #4]
 80155d2:	3b01      	subs	r3, #1
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	6073      	str	r3, [r6, #4]
 80155d8:	dd1b      	ble.n	8015612 <_scanf_i+0x152>
 80155da:	6833      	ldr	r3, [r6, #0]
 80155dc:	3301      	adds	r3, #1
 80155de:	6033      	str	r3, [r6, #0]
 80155e0:	68a3      	ldr	r3, [r4, #8]
 80155e2:	3b01      	subs	r3, #1
 80155e4:	60a3      	str	r3, [r4, #8]
 80155e6:	e7dc      	b.n	80155a2 <_scanf_i+0xe2>
 80155e8:	f1b8 0f02 	cmp.w	r8, #2
 80155ec:	d1ad      	bne.n	801554a <_scanf_i+0x8a>
 80155ee:	6822      	ldr	r2, [r4, #0]
 80155f0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80155f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80155f8:	d1bf      	bne.n	801557a <_scanf_i+0xba>
 80155fa:	2110      	movs	r1, #16
 80155fc:	6061      	str	r1, [r4, #4]
 80155fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015602:	e7a1      	b.n	8015548 <_scanf_i+0x88>
 8015604:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015608:	6022      	str	r2, [r4, #0]
 801560a:	780b      	ldrb	r3, [r1, #0]
 801560c:	702b      	strb	r3, [r5, #0]
 801560e:	3501      	adds	r5, #1
 8015610:	e7de      	b.n	80155d0 <_scanf_i+0x110>
 8015612:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015616:	4631      	mov	r1, r6
 8015618:	4658      	mov	r0, fp
 801561a:	4798      	blx	r3
 801561c:	2800      	cmp	r0, #0
 801561e:	d0df      	beq.n	80155e0 <_scanf_i+0x120>
 8015620:	6823      	ldr	r3, [r4, #0]
 8015622:	05d9      	lsls	r1, r3, #23
 8015624:	d50c      	bpl.n	8015640 <_scanf_i+0x180>
 8015626:	454d      	cmp	r5, r9
 8015628:	d908      	bls.n	801563c <_scanf_i+0x17c>
 801562a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801562e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015632:	4632      	mov	r2, r6
 8015634:	4658      	mov	r0, fp
 8015636:	4798      	blx	r3
 8015638:	1e6f      	subs	r7, r5, #1
 801563a:	463d      	mov	r5, r7
 801563c:	454d      	cmp	r5, r9
 801563e:	d029      	beq.n	8015694 <_scanf_i+0x1d4>
 8015640:	6822      	ldr	r2, [r4, #0]
 8015642:	f012 0210 	ands.w	r2, r2, #16
 8015646:	d113      	bne.n	8015670 <_scanf_i+0x1b0>
 8015648:	702a      	strb	r2, [r5, #0]
 801564a:	6863      	ldr	r3, [r4, #4]
 801564c:	9e00      	ldr	r6, [sp, #0]
 801564e:	4649      	mov	r1, r9
 8015650:	4658      	mov	r0, fp
 8015652:	47b0      	blx	r6
 8015654:	f8da 3000 	ldr.w	r3, [sl]
 8015658:	6821      	ldr	r1, [r4, #0]
 801565a:	1d1a      	adds	r2, r3, #4
 801565c:	f8ca 2000 	str.w	r2, [sl]
 8015660:	f011 0f20 	tst.w	r1, #32
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	d010      	beq.n	801568a <_scanf_i+0x1ca>
 8015668:	6018      	str	r0, [r3, #0]
 801566a:	68e3      	ldr	r3, [r4, #12]
 801566c:	3301      	adds	r3, #1
 801566e:	60e3      	str	r3, [r4, #12]
 8015670:	eba5 0509 	sub.w	r5, r5, r9
 8015674:	44a8      	add	r8, r5
 8015676:	6925      	ldr	r5, [r4, #16]
 8015678:	4445      	add	r5, r8
 801567a:	6125      	str	r5, [r4, #16]
 801567c:	2000      	movs	r0, #0
 801567e:	b007      	add	sp, #28
 8015680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015684:	f04f 0800 	mov.w	r8, #0
 8015688:	e7ca      	b.n	8015620 <_scanf_i+0x160>
 801568a:	07ca      	lsls	r2, r1, #31
 801568c:	bf4c      	ite	mi
 801568e:	8018      	strhmi	r0, [r3, #0]
 8015690:	6018      	strpl	r0, [r3, #0]
 8015692:	e7ea      	b.n	801566a <_scanf_i+0x1aa>
 8015694:	2001      	movs	r0, #1
 8015696:	e7f2      	b.n	801567e <_scanf_i+0x1be>
 8015698:	0801876c 	.word	0x0801876c
 801569c:	08013779 	.word	0x08013779
 80156a0:	08015825 	.word	0x08015825
 80156a4:	08018b97 	.word	0x08018b97

080156a8 <_read_r>:
 80156a8:	b538      	push	{r3, r4, r5, lr}
 80156aa:	4c07      	ldr	r4, [pc, #28]	; (80156c8 <_read_r+0x20>)
 80156ac:	4605      	mov	r5, r0
 80156ae:	4608      	mov	r0, r1
 80156b0:	4611      	mov	r1, r2
 80156b2:	2200      	movs	r2, #0
 80156b4:	6022      	str	r2, [r4, #0]
 80156b6:	461a      	mov	r2, r3
 80156b8:	f7ed ffa0 	bl	80035fc <_read>
 80156bc:	1c43      	adds	r3, r0, #1
 80156be:	d102      	bne.n	80156c6 <_read_r+0x1e>
 80156c0:	6823      	ldr	r3, [r4, #0]
 80156c2:	b103      	cbz	r3, 80156c6 <_read_r+0x1e>
 80156c4:	602b      	str	r3, [r5, #0]
 80156c6:	bd38      	pop	{r3, r4, r5, pc}
 80156c8:	20007094 	.word	0x20007094

080156cc <__sccl>:
 80156cc:	b570      	push	{r4, r5, r6, lr}
 80156ce:	780b      	ldrb	r3, [r1, #0]
 80156d0:	2b5e      	cmp	r3, #94	; 0x5e
 80156d2:	bf13      	iteet	ne
 80156d4:	1c4a      	addne	r2, r1, #1
 80156d6:	1c8a      	addeq	r2, r1, #2
 80156d8:	784b      	ldrbeq	r3, [r1, #1]
 80156da:	2100      	movne	r1, #0
 80156dc:	bf08      	it	eq
 80156de:	2101      	moveq	r1, #1
 80156e0:	1e44      	subs	r4, r0, #1
 80156e2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80156e6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80156ea:	42ac      	cmp	r4, r5
 80156ec:	d1fb      	bne.n	80156e6 <__sccl+0x1a>
 80156ee:	b913      	cbnz	r3, 80156f6 <__sccl+0x2a>
 80156f0:	3a01      	subs	r2, #1
 80156f2:	4610      	mov	r0, r2
 80156f4:	bd70      	pop	{r4, r5, r6, pc}
 80156f6:	f081 0401 	eor.w	r4, r1, #1
 80156fa:	54c4      	strb	r4, [r0, r3]
 80156fc:	1c51      	adds	r1, r2, #1
 80156fe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8015702:	2d2d      	cmp	r5, #45	; 0x2d
 8015704:	f101 36ff 	add.w	r6, r1, #4294967295
 8015708:	460a      	mov	r2, r1
 801570a:	d006      	beq.n	801571a <__sccl+0x4e>
 801570c:	2d5d      	cmp	r5, #93	; 0x5d
 801570e:	d0f0      	beq.n	80156f2 <__sccl+0x26>
 8015710:	b90d      	cbnz	r5, 8015716 <__sccl+0x4a>
 8015712:	4632      	mov	r2, r6
 8015714:	e7ed      	b.n	80156f2 <__sccl+0x26>
 8015716:	462b      	mov	r3, r5
 8015718:	e7ef      	b.n	80156fa <__sccl+0x2e>
 801571a:	780e      	ldrb	r6, [r1, #0]
 801571c:	2e5d      	cmp	r6, #93	; 0x5d
 801571e:	d0fa      	beq.n	8015716 <__sccl+0x4a>
 8015720:	42b3      	cmp	r3, r6
 8015722:	dcf8      	bgt.n	8015716 <__sccl+0x4a>
 8015724:	3301      	adds	r3, #1
 8015726:	429e      	cmp	r6, r3
 8015728:	54c4      	strb	r4, [r0, r3]
 801572a:	dcfb      	bgt.n	8015724 <__sccl+0x58>
 801572c:	3102      	adds	r1, #2
 801572e:	e7e6      	b.n	80156fe <__sccl+0x32>

08015730 <_strtoul_l.isra.0>:
 8015730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015734:	4680      	mov	r8, r0
 8015736:	4689      	mov	r9, r1
 8015738:	4692      	mov	sl, r2
 801573a:	461e      	mov	r6, r3
 801573c:	460f      	mov	r7, r1
 801573e:	463d      	mov	r5, r7
 8015740:	9808      	ldr	r0, [sp, #32]
 8015742:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015746:	f7fc ff51 	bl	80125ec <__locale_ctype_ptr_l>
 801574a:	4420      	add	r0, r4
 801574c:	7843      	ldrb	r3, [r0, #1]
 801574e:	f013 0308 	ands.w	r3, r3, #8
 8015752:	d130      	bne.n	80157b6 <_strtoul_l.isra.0+0x86>
 8015754:	2c2d      	cmp	r4, #45	; 0x2d
 8015756:	d130      	bne.n	80157ba <_strtoul_l.isra.0+0x8a>
 8015758:	787c      	ldrb	r4, [r7, #1]
 801575a:	1cbd      	adds	r5, r7, #2
 801575c:	2101      	movs	r1, #1
 801575e:	2e00      	cmp	r6, #0
 8015760:	d05c      	beq.n	801581c <_strtoul_l.isra.0+0xec>
 8015762:	2e10      	cmp	r6, #16
 8015764:	d109      	bne.n	801577a <_strtoul_l.isra.0+0x4a>
 8015766:	2c30      	cmp	r4, #48	; 0x30
 8015768:	d107      	bne.n	801577a <_strtoul_l.isra.0+0x4a>
 801576a:	782b      	ldrb	r3, [r5, #0]
 801576c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015770:	2b58      	cmp	r3, #88	; 0x58
 8015772:	d14e      	bne.n	8015812 <_strtoul_l.isra.0+0xe2>
 8015774:	786c      	ldrb	r4, [r5, #1]
 8015776:	2610      	movs	r6, #16
 8015778:	3502      	adds	r5, #2
 801577a:	f04f 32ff 	mov.w	r2, #4294967295
 801577e:	2300      	movs	r3, #0
 8015780:	fbb2 f2f6 	udiv	r2, r2, r6
 8015784:	fb06 fc02 	mul.w	ip, r6, r2
 8015788:	ea6f 0c0c 	mvn.w	ip, ip
 801578c:	4618      	mov	r0, r3
 801578e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015792:	2f09      	cmp	r7, #9
 8015794:	d817      	bhi.n	80157c6 <_strtoul_l.isra.0+0x96>
 8015796:	463c      	mov	r4, r7
 8015798:	42a6      	cmp	r6, r4
 801579a:	dd23      	ble.n	80157e4 <_strtoul_l.isra.0+0xb4>
 801579c:	2b00      	cmp	r3, #0
 801579e:	db1e      	blt.n	80157de <_strtoul_l.isra.0+0xae>
 80157a0:	4282      	cmp	r2, r0
 80157a2:	d31c      	bcc.n	80157de <_strtoul_l.isra.0+0xae>
 80157a4:	d101      	bne.n	80157aa <_strtoul_l.isra.0+0x7a>
 80157a6:	45a4      	cmp	ip, r4
 80157a8:	db19      	blt.n	80157de <_strtoul_l.isra.0+0xae>
 80157aa:	fb00 4006 	mla	r0, r0, r6, r4
 80157ae:	2301      	movs	r3, #1
 80157b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157b4:	e7eb      	b.n	801578e <_strtoul_l.isra.0+0x5e>
 80157b6:	462f      	mov	r7, r5
 80157b8:	e7c1      	b.n	801573e <_strtoul_l.isra.0+0xe>
 80157ba:	2c2b      	cmp	r4, #43	; 0x2b
 80157bc:	bf04      	itt	eq
 80157be:	1cbd      	addeq	r5, r7, #2
 80157c0:	787c      	ldrbeq	r4, [r7, #1]
 80157c2:	4619      	mov	r1, r3
 80157c4:	e7cb      	b.n	801575e <_strtoul_l.isra.0+0x2e>
 80157c6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80157ca:	2f19      	cmp	r7, #25
 80157cc:	d801      	bhi.n	80157d2 <_strtoul_l.isra.0+0xa2>
 80157ce:	3c37      	subs	r4, #55	; 0x37
 80157d0:	e7e2      	b.n	8015798 <_strtoul_l.isra.0+0x68>
 80157d2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80157d6:	2f19      	cmp	r7, #25
 80157d8:	d804      	bhi.n	80157e4 <_strtoul_l.isra.0+0xb4>
 80157da:	3c57      	subs	r4, #87	; 0x57
 80157dc:	e7dc      	b.n	8015798 <_strtoul_l.isra.0+0x68>
 80157de:	f04f 33ff 	mov.w	r3, #4294967295
 80157e2:	e7e5      	b.n	80157b0 <_strtoul_l.isra.0+0x80>
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	da09      	bge.n	80157fc <_strtoul_l.isra.0+0xcc>
 80157e8:	2322      	movs	r3, #34	; 0x22
 80157ea:	f8c8 3000 	str.w	r3, [r8]
 80157ee:	f04f 30ff 	mov.w	r0, #4294967295
 80157f2:	f1ba 0f00 	cmp.w	sl, #0
 80157f6:	d107      	bne.n	8015808 <_strtoul_l.isra.0+0xd8>
 80157f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157fc:	b101      	cbz	r1, 8015800 <_strtoul_l.isra.0+0xd0>
 80157fe:	4240      	negs	r0, r0
 8015800:	f1ba 0f00 	cmp.w	sl, #0
 8015804:	d0f8      	beq.n	80157f8 <_strtoul_l.isra.0+0xc8>
 8015806:	b10b      	cbz	r3, 801580c <_strtoul_l.isra.0+0xdc>
 8015808:	f105 39ff 	add.w	r9, r5, #4294967295
 801580c:	f8ca 9000 	str.w	r9, [sl]
 8015810:	e7f2      	b.n	80157f8 <_strtoul_l.isra.0+0xc8>
 8015812:	2430      	movs	r4, #48	; 0x30
 8015814:	2e00      	cmp	r6, #0
 8015816:	d1b0      	bne.n	801577a <_strtoul_l.isra.0+0x4a>
 8015818:	2608      	movs	r6, #8
 801581a:	e7ae      	b.n	801577a <_strtoul_l.isra.0+0x4a>
 801581c:	2c30      	cmp	r4, #48	; 0x30
 801581e:	d0a4      	beq.n	801576a <_strtoul_l.isra.0+0x3a>
 8015820:	260a      	movs	r6, #10
 8015822:	e7aa      	b.n	801577a <_strtoul_l.isra.0+0x4a>

08015824 <_strtoul_r>:
 8015824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015826:	4c06      	ldr	r4, [pc, #24]	; (8015840 <_strtoul_r+0x1c>)
 8015828:	4d06      	ldr	r5, [pc, #24]	; (8015844 <_strtoul_r+0x20>)
 801582a:	6824      	ldr	r4, [r4, #0]
 801582c:	6a24      	ldr	r4, [r4, #32]
 801582e:	2c00      	cmp	r4, #0
 8015830:	bf08      	it	eq
 8015832:	462c      	moveq	r4, r5
 8015834:	9400      	str	r4, [sp, #0]
 8015836:	f7ff ff7b 	bl	8015730 <_strtoul_l.isra.0>
 801583a:	b003      	add	sp, #12
 801583c:	bd30      	pop	{r4, r5, pc}
 801583e:	bf00      	nop
 8015840:	20000020 	.word	0x20000020
 8015844:	20000084 	.word	0x20000084

08015848 <__submore>:
 8015848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801584c:	460c      	mov	r4, r1
 801584e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015854:	4299      	cmp	r1, r3
 8015856:	d11d      	bne.n	8015894 <__submore+0x4c>
 8015858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801585c:	f7fc ff84 	bl	8012768 <_malloc_r>
 8015860:	b918      	cbnz	r0, 801586a <__submore+0x22>
 8015862:	f04f 30ff 	mov.w	r0, #4294967295
 8015866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801586e:	63a3      	str	r3, [r4, #56]	; 0x38
 8015870:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015874:	6360      	str	r0, [r4, #52]	; 0x34
 8015876:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801587a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801587e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015882:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015886:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801588a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801588e:	6020      	str	r0, [r4, #0]
 8015890:	2000      	movs	r0, #0
 8015892:	e7e8      	b.n	8015866 <__submore+0x1e>
 8015894:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015896:	0077      	lsls	r7, r6, #1
 8015898:	463a      	mov	r2, r7
 801589a:	f7fe ffc2 	bl	8014822 <_realloc_r>
 801589e:	4605      	mov	r5, r0
 80158a0:	2800      	cmp	r0, #0
 80158a2:	d0de      	beq.n	8015862 <__submore+0x1a>
 80158a4:	eb00 0806 	add.w	r8, r0, r6
 80158a8:	4601      	mov	r1, r0
 80158aa:	4632      	mov	r2, r6
 80158ac:	4640      	mov	r0, r8
 80158ae:	f7fc fee0 	bl	8012672 <memcpy>
 80158b2:	f8c4 8000 	str.w	r8, [r4]
 80158b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80158ba:	e7e9      	b.n	8015890 <__submore+0x48>

080158bc <__swbuf_r>:
 80158bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158be:	460e      	mov	r6, r1
 80158c0:	4614      	mov	r4, r2
 80158c2:	4605      	mov	r5, r0
 80158c4:	b118      	cbz	r0, 80158ce <__swbuf_r+0x12>
 80158c6:	6983      	ldr	r3, [r0, #24]
 80158c8:	b90b      	cbnz	r3, 80158ce <__swbuf_r+0x12>
 80158ca:	f7fd ffd7 	bl	801387c <__sinit>
 80158ce:	4b21      	ldr	r3, [pc, #132]	; (8015954 <__swbuf_r+0x98>)
 80158d0:	429c      	cmp	r4, r3
 80158d2:	d12a      	bne.n	801592a <__swbuf_r+0x6e>
 80158d4:	686c      	ldr	r4, [r5, #4]
 80158d6:	69a3      	ldr	r3, [r4, #24]
 80158d8:	60a3      	str	r3, [r4, #8]
 80158da:	89a3      	ldrh	r3, [r4, #12]
 80158dc:	071a      	lsls	r2, r3, #28
 80158de:	d52e      	bpl.n	801593e <__swbuf_r+0x82>
 80158e0:	6923      	ldr	r3, [r4, #16]
 80158e2:	b363      	cbz	r3, 801593e <__swbuf_r+0x82>
 80158e4:	6923      	ldr	r3, [r4, #16]
 80158e6:	6820      	ldr	r0, [r4, #0]
 80158e8:	1ac0      	subs	r0, r0, r3
 80158ea:	6963      	ldr	r3, [r4, #20]
 80158ec:	b2f6      	uxtb	r6, r6
 80158ee:	4283      	cmp	r3, r0
 80158f0:	4637      	mov	r7, r6
 80158f2:	dc04      	bgt.n	80158fe <__swbuf_r+0x42>
 80158f4:	4621      	mov	r1, r4
 80158f6:	4628      	mov	r0, r5
 80158f8:	f000 f926 	bl	8015b48 <_fflush_r>
 80158fc:	bb28      	cbnz	r0, 801594a <__swbuf_r+0x8e>
 80158fe:	68a3      	ldr	r3, [r4, #8]
 8015900:	3b01      	subs	r3, #1
 8015902:	60a3      	str	r3, [r4, #8]
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	1c5a      	adds	r2, r3, #1
 8015908:	6022      	str	r2, [r4, #0]
 801590a:	701e      	strb	r6, [r3, #0]
 801590c:	6963      	ldr	r3, [r4, #20]
 801590e:	3001      	adds	r0, #1
 8015910:	4283      	cmp	r3, r0
 8015912:	d004      	beq.n	801591e <__swbuf_r+0x62>
 8015914:	89a3      	ldrh	r3, [r4, #12]
 8015916:	07db      	lsls	r3, r3, #31
 8015918:	d519      	bpl.n	801594e <__swbuf_r+0x92>
 801591a:	2e0a      	cmp	r6, #10
 801591c:	d117      	bne.n	801594e <__swbuf_r+0x92>
 801591e:	4621      	mov	r1, r4
 8015920:	4628      	mov	r0, r5
 8015922:	f000 f911 	bl	8015b48 <_fflush_r>
 8015926:	b190      	cbz	r0, 801594e <__swbuf_r+0x92>
 8015928:	e00f      	b.n	801594a <__swbuf_r+0x8e>
 801592a:	4b0b      	ldr	r3, [pc, #44]	; (8015958 <__swbuf_r+0x9c>)
 801592c:	429c      	cmp	r4, r3
 801592e:	d101      	bne.n	8015934 <__swbuf_r+0x78>
 8015930:	68ac      	ldr	r4, [r5, #8]
 8015932:	e7d0      	b.n	80158d6 <__swbuf_r+0x1a>
 8015934:	4b09      	ldr	r3, [pc, #36]	; (801595c <__swbuf_r+0xa0>)
 8015936:	429c      	cmp	r4, r3
 8015938:	bf08      	it	eq
 801593a:	68ec      	ldreq	r4, [r5, #12]
 801593c:	e7cb      	b.n	80158d6 <__swbuf_r+0x1a>
 801593e:	4621      	mov	r1, r4
 8015940:	4628      	mov	r0, r5
 8015942:	f000 f80d 	bl	8015960 <__swsetup_r>
 8015946:	2800      	cmp	r0, #0
 8015948:	d0cc      	beq.n	80158e4 <__swbuf_r+0x28>
 801594a:	f04f 37ff 	mov.w	r7, #4294967295
 801594e:	4638      	mov	r0, r7
 8015950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015952:	bf00      	nop
 8015954:	08018a14 	.word	0x08018a14
 8015958:	08018a34 	.word	0x08018a34
 801595c:	080189f4 	.word	0x080189f4

08015960 <__swsetup_r>:
 8015960:	4b32      	ldr	r3, [pc, #200]	; (8015a2c <__swsetup_r+0xcc>)
 8015962:	b570      	push	{r4, r5, r6, lr}
 8015964:	681d      	ldr	r5, [r3, #0]
 8015966:	4606      	mov	r6, r0
 8015968:	460c      	mov	r4, r1
 801596a:	b125      	cbz	r5, 8015976 <__swsetup_r+0x16>
 801596c:	69ab      	ldr	r3, [r5, #24]
 801596e:	b913      	cbnz	r3, 8015976 <__swsetup_r+0x16>
 8015970:	4628      	mov	r0, r5
 8015972:	f7fd ff83 	bl	801387c <__sinit>
 8015976:	4b2e      	ldr	r3, [pc, #184]	; (8015a30 <__swsetup_r+0xd0>)
 8015978:	429c      	cmp	r4, r3
 801597a:	d10f      	bne.n	801599c <__swsetup_r+0x3c>
 801597c:	686c      	ldr	r4, [r5, #4]
 801597e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015982:	b29a      	uxth	r2, r3
 8015984:	0715      	lsls	r5, r2, #28
 8015986:	d42c      	bmi.n	80159e2 <__swsetup_r+0x82>
 8015988:	06d0      	lsls	r0, r2, #27
 801598a:	d411      	bmi.n	80159b0 <__swsetup_r+0x50>
 801598c:	2209      	movs	r2, #9
 801598e:	6032      	str	r2, [r6, #0]
 8015990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015994:	81a3      	strh	r3, [r4, #12]
 8015996:	f04f 30ff 	mov.w	r0, #4294967295
 801599a:	e03e      	b.n	8015a1a <__swsetup_r+0xba>
 801599c:	4b25      	ldr	r3, [pc, #148]	; (8015a34 <__swsetup_r+0xd4>)
 801599e:	429c      	cmp	r4, r3
 80159a0:	d101      	bne.n	80159a6 <__swsetup_r+0x46>
 80159a2:	68ac      	ldr	r4, [r5, #8]
 80159a4:	e7eb      	b.n	801597e <__swsetup_r+0x1e>
 80159a6:	4b24      	ldr	r3, [pc, #144]	; (8015a38 <__swsetup_r+0xd8>)
 80159a8:	429c      	cmp	r4, r3
 80159aa:	bf08      	it	eq
 80159ac:	68ec      	ldreq	r4, [r5, #12]
 80159ae:	e7e6      	b.n	801597e <__swsetup_r+0x1e>
 80159b0:	0751      	lsls	r1, r2, #29
 80159b2:	d512      	bpl.n	80159da <__swsetup_r+0x7a>
 80159b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159b6:	b141      	cbz	r1, 80159ca <__swsetup_r+0x6a>
 80159b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159bc:	4299      	cmp	r1, r3
 80159be:	d002      	beq.n	80159c6 <__swsetup_r+0x66>
 80159c0:	4630      	mov	r0, r6
 80159c2:	f7fc fe83 	bl	80126cc <_free_r>
 80159c6:	2300      	movs	r3, #0
 80159c8:	6363      	str	r3, [r4, #52]	; 0x34
 80159ca:	89a3      	ldrh	r3, [r4, #12]
 80159cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80159d0:	81a3      	strh	r3, [r4, #12]
 80159d2:	2300      	movs	r3, #0
 80159d4:	6063      	str	r3, [r4, #4]
 80159d6:	6923      	ldr	r3, [r4, #16]
 80159d8:	6023      	str	r3, [r4, #0]
 80159da:	89a3      	ldrh	r3, [r4, #12]
 80159dc:	f043 0308 	orr.w	r3, r3, #8
 80159e0:	81a3      	strh	r3, [r4, #12]
 80159e2:	6923      	ldr	r3, [r4, #16]
 80159e4:	b94b      	cbnz	r3, 80159fa <__swsetup_r+0x9a>
 80159e6:	89a3      	ldrh	r3, [r4, #12]
 80159e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80159ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80159f0:	d003      	beq.n	80159fa <__swsetup_r+0x9a>
 80159f2:	4621      	mov	r1, r4
 80159f4:	4630      	mov	r0, r6
 80159f6:	f000 f8f5 	bl	8015be4 <__smakebuf_r>
 80159fa:	89a2      	ldrh	r2, [r4, #12]
 80159fc:	f012 0301 	ands.w	r3, r2, #1
 8015a00:	d00c      	beq.n	8015a1c <__swsetup_r+0xbc>
 8015a02:	2300      	movs	r3, #0
 8015a04:	60a3      	str	r3, [r4, #8]
 8015a06:	6963      	ldr	r3, [r4, #20]
 8015a08:	425b      	negs	r3, r3
 8015a0a:	61a3      	str	r3, [r4, #24]
 8015a0c:	6923      	ldr	r3, [r4, #16]
 8015a0e:	b953      	cbnz	r3, 8015a26 <__swsetup_r+0xc6>
 8015a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015a18:	d1ba      	bne.n	8015990 <__swsetup_r+0x30>
 8015a1a:	bd70      	pop	{r4, r5, r6, pc}
 8015a1c:	0792      	lsls	r2, r2, #30
 8015a1e:	bf58      	it	pl
 8015a20:	6963      	ldrpl	r3, [r4, #20]
 8015a22:	60a3      	str	r3, [r4, #8]
 8015a24:	e7f2      	b.n	8015a0c <__swsetup_r+0xac>
 8015a26:	2000      	movs	r0, #0
 8015a28:	e7f7      	b.n	8015a1a <__swsetup_r+0xba>
 8015a2a:	bf00      	nop
 8015a2c:	20000020 	.word	0x20000020
 8015a30:	08018a14 	.word	0x08018a14
 8015a34:	08018a34 	.word	0x08018a34
 8015a38:	080189f4 	.word	0x080189f4

08015a3c <__sflush_r>:
 8015a3c:	898a      	ldrh	r2, [r1, #12]
 8015a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a42:	4605      	mov	r5, r0
 8015a44:	0710      	lsls	r0, r2, #28
 8015a46:	460c      	mov	r4, r1
 8015a48:	d458      	bmi.n	8015afc <__sflush_r+0xc0>
 8015a4a:	684b      	ldr	r3, [r1, #4]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	dc05      	bgt.n	8015a5c <__sflush_r+0x20>
 8015a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	dc02      	bgt.n	8015a5c <__sflush_r+0x20>
 8015a56:	2000      	movs	r0, #0
 8015a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a5e:	2e00      	cmp	r6, #0
 8015a60:	d0f9      	beq.n	8015a56 <__sflush_r+0x1a>
 8015a62:	2300      	movs	r3, #0
 8015a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a68:	682f      	ldr	r7, [r5, #0]
 8015a6a:	6a21      	ldr	r1, [r4, #32]
 8015a6c:	602b      	str	r3, [r5, #0]
 8015a6e:	d032      	beq.n	8015ad6 <__sflush_r+0x9a>
 8015a70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a72:	89a3      	ldrh	r3, [r4, #12]
 8015a74:	075a      	lsls	r2, r3, #29
 8015a76:	d505      	bpl.n	8015a84 <__sflush_r+0x48>
 8015a78:	6863      	ldr	r3, [r4, #4]
 8015a7a:	1ac0      	subs	r0, r0, r3
 8015a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a7e:	b10b      	cbz	r3, 8015a84 <__sflush_r+0x48>
 8015a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015a82:	1ac0      	subs	r0, r0, r3
 8015a84:	2300      	movs	r3, #0
 8015a86:	4602      	mov	r2, r0
 8015a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a8a:	6a21      	ldr	r1, [r4, #32]
 8015a8c:	4628      	mov	r0, r5
 8015a8e:	47b0      	blx	r6
 8015a90:	1c43      	adds	r3, r0, #1
 8015a92:	89a3      	ldrh	r3, [r4, #12]
 8015a94:	d106      	bne.n	8015aa4 <__sflush_r+0x68>
 8015a96:	6829      	ldr	r1, [r5, #0]
 8015a98:	291d      	cmp	r1, #29
 8015a9a:	d848      	bhi.n	8015b2e <__sflush_r+0xf2>
 8015a9c:	4a29      	ldr	r2, [pc, #164]	; (8015b44 <__sflush_r+0x108>)
 8015a9e:	40ca      	lsrs	r2, r1
 8015aa0:	07d6      	lsls	r6, r2, #31
 8015aa2:	d544      	bpl.n	8015b2e <__sflush_r+0xf2>
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	6062      	str	r2, [r4, #4]
 8015aa8:	04d9      	lsls	r1, r3, #19
 8015aaa:	6922      	ldr	r2, [r4, #16]
 8015aac:	6022      	str	r2, [r4, #0]
 8015aae:	d504      	bpl.n	8015aba <__sflush_r+0x7e>
 8015ab0:	1c42      	adds	r2, r0, #1
 8015ab2:	d101      	bne.n	8015ab8 <__sflush_r+0x7c>
 8015ab4:	682b      	ldr	r3, [r5, #0]
 8015ab6:	b903      	cbnz	r3, 8015aba <__sflush_r+0x7e>
 8015ab8:	6560      	str	r0, [r4, #84]	; 0x54
 8015aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015abc:	602f      	str	r7, [r5, #0]
 8015abe:	2900      	cmp	r1, #0
 8015ac0:	d0c9      	beq.n	8015a56 <__sflush_r+0x1a>
 8015ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ac6:	4299      	cmp	r1, r3
 8015ac8:	d002      	beq.n	8015ad0 <__sflush_r+0x94>
 8015aca:	4628      	mov	r0, r5
 8015acc:	f7fc fdfe 	bl	80126cc <_free_r>
 8015ad0:	2000      	movs	r0, #0
 8015ad2:	6360      	str	r0, [r4, #52]	; 0x34
 8015ad4:	e7c0      	b.n	8015a58 <__sflush_r+0x1c>
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	4628      	mov	r0, r5
 8015ada:	47b0      	blx	r6
 8015adc:	1c41      	adds	r1, r0, #1
 8015ade:	d1c8      	bne.n	8015a72 <__sflush_r+0x36>
 8015ae0:	682b      	ldr	r3, [r5, #0]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d0c5      	beq.n	8015a72 <__sflush_r+0x36>
 8015ae6:	2b1d      	cmp	r3, #29
 8015ae8:	d001      	beq.n	8015aee <__sflush_r+0xb2>
 8015aea:	2b16      	cmp	r3, #22
 8015aec:	d101      	bne.n	8015af2 <__sflush_r+0xb6>
 8015aee:	602f      	str	r7, [r5, #0]
 8015af0:	e7b1      	b.n	8015a56 <__sflush_r+0x1a>
 8015af2:	89a3      	ldrh	r3, [r4, #12]
 8015af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015af8:	81a3      	strh	r3, [r4, #12]
 8015afa:	e7ad      	b.n	8015a58 <__sflush_r+0x1c>
 8015afc:	690f      	ldr	r7, [r1, #16]
 8015afe:	2f00      	cmp	r7, #0
 8015b00:	d0a9      	beq.n	8015a56 <__sflush_r+0x1a>
 8015b02:	0793      	lsls	r3, r2, #30
 8015b04:	680e      	ldr	r6, [r1, #0]
 8015b06:	bf08      	it	eq
 8015b08:	694b      	ldreq	r3, [r1, #20]
 8015b0a:	600f      	str	r7, [r1, #0]
 8015b0c:	bf18      	it	ne
 8015b0e:	2300      	movne	r3, #0
 8015b10:	eba6 0807 	sub.w	r8, r6, r7
 8015b14:	608b      	str	r3, [r1, #8]
 8015b16:	f1b8 0f00 	cmp.w	r8, #0
 8015b1a:	dd9c      	ble.n	8015a56 <__sflush_r+0x1a>
 8015b1c:	4643      	mov	r3, r8
 8015b1e:	463a      	mov	r2, r7
 8015b20:	6a21      	ldr	r1, [r4, #32]
 8015b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b24:	4628      	mov	r0, r5
 8015b26:	47b0      	blx	r6
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	dc06      	bgt.n	8015b3a <__sflush_r+0xfe>
 8015b2c:	89a3      	ldrh	r3, [r4, #12]
 8015b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b32:	81a3      	strh	r3, [r4, #12]
 8015b34:	f04f 30ff 	mov.w	r0, #4294967295
 8015b38:	e78e      	b.n	8015a58 <__sflush_r+0x1c>
 8015b3a:	4407      	add	r7, r0
 8015b3c:	eba8 0800 	sub.w	r8, r8, r0
 8015b40:	e7e9      	b.n	8015b16 <__sflush_r+0xda>
 8015b42:	bf00      	nop
 8015b44:	20400001 	.word	0x20400001

08015b48 <_fflush_r>:
 8015b48:	b538      	push	{r3, r4, r5, lr}
 8015b4a:	690b      	ldr	r3, [r1, #16]
 8015b4c:	4605      	mov	r5, r0
 8015b4e:	460c      	mov	r4, r1
 8015b50:	b1db      	cbz	r3, 8015b8a <_fflush_r+0x42>
 8015b52:	b118      	cbz	r0, 8015b5c <_fflush_r+0x14>
 8015b54:	6983      	ldr	r3, [r0, #24]
 8015b56:	b90b      	cbnz	r3, 8015b5c <_fflush_r+0x14>
 8015b58:	f7fd fe90 	bl	801387c <__sinit>
 8015b5c:	4b0c      	ldr	r3, [pc, #48]	; (8015b90 <_fflush_r+0x48>)
 8015b5e:	429c      	cmp	r4, r3
 8015b60:	d109      	bne.n	8015b76 <_fflush_r+0x2e>
 8015b62:	686c      	ldr	r4, [r5, #4]
 8015b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b68:	b17b      	cbz	r3, 8015b8a <_fflush_r+0x42>
 8015b6a:	4621      	mov	r1, r4
 8015b6c:	4628      	mov	r0, r5
 8015b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b72:	f7ff bf63 	b.w	8015a3c <__sflush_r>
 8015b76:	4b07      	ldr	r3, [pc, #28]	; (8015b94 <_fflush_r+0x4c>)
 8015b78:	429c      	cmp	r4, r3
 8015b7a:	d101      	bne.n	8015b80 <_fflush_r+0x38>
 8015b7c:	68ac      	ldr	r4, [r5, #8]
 8015b7e:	e7f1      	b.n	8015b64 <_fflush_r+0x1c>
 8015b80:	4b05      	ldr	r3, [pc, #20]	; (8015b98 <_fflush_r+0x50>)
 8015b82:	429c      	cmp	r4, r3
 8015b84:	bf08      	it	eq
 8015b86:	68ec      	ldreq	r4, [r5, #12]
 8015b88:	e7ec      	b.n	8015b64 <_fflush_r+0x1c>
 8015b8a:	2000      	movs	r0, #0
 8015b8c:	bd38      	pop	{r3, r4, r5, pc}
 8015b8e:	bf00      	nop
 8015b90:	08018a14 	.word	0x08018a14
 8015b94:	08018a34 	.word	0x08018a34
 8015b98:	080189f4 	.word	0x080189f4

08015b9c <__swhatbuf_r>:
 8015b9c:	b570      	push	{r4, r5, r6, lr}
 8015b9e:	460e      	mov	r6, r1
 8015ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ba4:	2900      	cmp	r1, #0
 8015ba6:	b096      	sub	sp, #88	; 0x58
 8015ba8:	4614      	mov	r4, r2
 8015baa:	461d      	mov	r5, r3
 8015bac:	da07      	bge.n	8015bbe <__swhatbuf_r+0x22>
 8015bae:	2300      	movs	r3, #0
 8015bb0:	602b      	str	r3, [r5, #0]
 8015bb2:	89b3      	ldrh	r3, [r6, #12]
 8015bb4:	061a      	lsls	r2, r3, #24
 8015bb6:	d410      	bmi.n	8015bda <__swhatbuf_r+0x3e>
 8015bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015bbc:	e00e      	b.n	8015bdc <__swhatbuf_r+0x40>
 8015bbe:	466a      	mov	r2, sp
 8015bc0:	f000 f858 	bl	8015c74 <_fstat_r>
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	dbf2      	blt.n	8015bae <__swhatbuf_r+0x12>
 8015bc8:	9a01      	ldr	r2, [sp, #4]
 8015bca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015bce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015bd2:	425a      	negs	r2, r3
 8015bd4:	415a      	adcs	r2, r3
 8015bd6:	602a      	str	r2, [r5, #0]
 8015bd8:	e7ee      	b.n	8015bb8 <__swhatbuf_r+0x1c>
 8015bda:	2340      	movs	r3, #64	; 0x40
 8015bdc:	2000      	movs	r0, #0
 8015bde:	6023      	str	r3, [r4, #0]
 8015be0:	b016      	add	sp, #88	; 0x58
 8015be2:	bd70      	pop	{r4, r5, r6, pc}

08015be4 <__smakebuf_r>:
 8015be4:	898b      	ldrh	r3, [r1, #12]
 8015be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015be8:	079d      	lsls	r5, r3, #30
 8015bea:	4606      	mov	r6, r0
 8015bec:	460c      	mov	r4, r1
 8015bee:	d507      	bpl.n	8015c00 <__smakebuf_r+0x1c>
 8015bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015bf4:	6023      	str	r3, [r4, #0]
 8015bf6:	6123      	str	r3, [r4, #16]
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	6163      	str	r3, [r4, #20]
 8015bfc:	b002      	add	sp, #8
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	ab01      	add	r3, sp, #4
 8015c02:	466a      	mov	r2, sp
 8015c04:	f7ff ffca 	bl	8015b9c <__swhatbuf_r>
 8015c08:	9900      	ldr	r1, [sp, #0]
 8015c0a:	4605      	mov	r5, r0
 8015c0c:	4630      	mov	r0, r6
 8015c0e:	f7fc fdab 	bl	8012768 <_malloc_r>
 8015c12:	b948      	cbnz	r0, 8015c28 <__smakebuf_r+0x44>
 8015c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c18:	059a      	lsls	r2, r3, #22
 8015c1a:	d4ef      	bmi.n	8015bfc <__smakebuf_r+0x18>
 8015c1c:	f023 0303 	bic.w	r3, r3, #3
 8015c20:	f043 0302 	orr.w	r3, r3, #2
 8015c24:	81a3      	strh	r3, [r4, #12]
 8015c26:	e7e3      	b.n	8015bf0 <__smakebuf_r+0xc>
 8015c28:	4b0d      	ldr	r3, [pc, #52]	; (8015c60 <__smakebuf_r+0x7c>)
 8015c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015c2c:	89a3      	ldrh	r3, [r4, #12]
 8015c2e:	6020      	str	r0, [r4, #0]
 8015c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c34:	81a3      	strh	r3, [r4, #12]
 8015c36:	9b00      	ldr	r3, [sp, #0]
 8015c38:	6163      	str	r3, [r4, #20]
 8015c3a:	9b01      	ldr	r3, [sp, #4]
 8015c3c:	6120      	str	r0, [r4, #16]
 8015c3e:	b15b      	cbz	r3, 8015c58 <__smakebuf_r+0x74>
 8015c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c44:	4630      	mov	r0, r6
 8015c46:	f000 f827 	bl	8015c98 <_isatty_r>
 8015c4a:	b128      	cbz	r0, 8015c58 <__smakebuf_r+0x74>
 8015c4c:	89a3      	ldrh	r3, [r4, #12]
 8015c4e:	f023 0303 	bic.w	r3, r3, #3
 8015c52:	f043 0301 	orr.w	r3, r3, #1
 8015c56:	81a3      	strh	r3, [r4, #12]
 8015c58:	89a3      	ldrh	r3, [r4, #12]
 8015c5a:	431d      	orrs	r5, r3
 8015c5c:	81a5      	strh	r5, [r4, #12]
 8015c5e:	e7cd      	b.n	8015bfc <__smakebuf_r+0x18>
 8015c60:	08013845 	.word	0x08013845

08015c64 <_malloc_usable_size_r>:
 8015c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c68:	1f18      	subs	r0, r3, #4
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	bfbc      	itt	lt
 8015c6e:	580b      	ldrlt	r3, [r1, r0]
 8015c70:	18c0      	addlt	r0, r0, r3
 8015c72:	4770      	bx	lr

08015c74 <_fstat_r>:
 8015c74:	b538      	push	{r3, r4, r5, lr}
 8015c76:	4c07      	ldr	r4, [pc, #28]	; (8015c94 <_fstat_r+0x20>)
 8015c78:	2300      	movs	r3, #0
 8015c7a:	4605      	mov	r5, r0
 8015c7c:	4608      	mov	r0, r1
 8015c7e:	4611      	mov	r1, r2
 8015c80:	6023      	str	r3, [r4, #0]
 8015c82:	f7ed fd00 	bl	8003686 <_fstat>
 8015c86:	1c43      	adds	r3, r0, #1
 8015c88:	d102      	bne.n	8015c90 <_fstat_r+0x1c>
 8015c8a:	6823      	ldr	r3, [r4, #0]
 8015c8c:	b103      	cbz	r3, 8015c90 <_fstat_r+0x1c>
 8015c8e:	602b      	str	r3, [r5, #0]
 8015c90:	bd38      	pop	{r3, r4, r5, pc}
 8015c92:	bf00      	nop
 8015c94:	20007094 	.word	0x20007094

08015c98 <_isatty_r>:
 8015c98:	b538      	push	{r3, r4, r5, lr}
 8015c9a:	4c06      	ldr	r4, [pc, #24]	; (8015cb4 <_isatty_r+0x1c>)
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	4605      	mov	r5, r0
 8015ca0:	4608      	mov	r0, r1
 8015ca2:	6023      	str	r3, [r4, #0]
 8015ca4:	f7ed fcff 	bl	80036a6 <_isatty>
 8015ca8:	1c43      	adds	r3, r0, #1
 8015caa:	d102      	bne.n	8015cb2 <_isatty_r+0x1a>
 8015cac:	6823      	ldr	r3, [r4, #0]
 8015cae:	b103      	cbz	r3, 8015cb2 <_isatty_r+0x1a>
 8015cb0:	602b      	str	r3, [r5, #0]
 8015cb2:	bd38      	pop	{r3, r4, r5, pc}
 8015cb4:	20007094 	.word	0x20007094

08015cb8 <_init>:
 8015cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cba:	bf00      	nop
 8015cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cbe:	bc08      	pop	{r3}
 8015cc0:	469e      	mov	lr, r3
 8015cc2:	4770      	bx	lr

08015cc4 <_fini>:
 8015cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cc6:	bf00      	nop
 8015cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cca:	bc08      	pop	{r3}
 8015ccc:	469e      	mov	lr, r3
 8015cce:	4770      	bx	lr
