
ethernet_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f08  0801a1e8  0801a1e8  0002a1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0f0  0801d0f0  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d0f0  0801d0f0  0002d0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0f8  0801d0f8  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d0f8  0801d0f8  0002d0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d0fc  0801d0fc  0002d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801d100  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000732c  200001f4  0801d2f4  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000420  20007520  0801d2f4  00037520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ca1c  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000073d7  00000000  00000000  0006cc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002238  00000000  00000000  00074018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020e0  00000000  00000000  00076250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035f3a  00000000  00000000  00078330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a451  00000000  00000000  000ae26a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001122da  00000000  00000000  000d86bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ea995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a260  00000000  00000000  001eaa10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a1d0 	.word	0x0801a1d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0801a1d0 	.word	0x0801a1d0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b972 	b.w	8000fe4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4688      	mov	r8, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14b      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4615      	mov	r5, r2
 8000d2a:	d967      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0720 	rsb	r7, r2, #32
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d3e:	4095      	lsls	r5, r2
 8000d40:	ea47 0803 	orr.w	r8, r7, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d50:	fa1f fc85 	uxth.w	ip, r5
 8000d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d6a:	f080 811b 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8118 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000d74:	3f02      	subs	r7, #2
 8000d76:	442b      	add	r3, r5
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	192c      	adds	r4, r5, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	f080 8107 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	f240 8104 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000da0:	3802      	subs	r0, #2
 8000da2:	442c      	add	r4, r5
 8000da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000da8:	eba4 040c 	sub.w	r4, r4, ip
 8000dac:	2700      	movs	r7, #0
 8000dae:	b11e      	cbz	r6, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c6 4300 	strd	r4, r3, [r6]
 8000db8:	4639      	mov	r1, r7
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xbe>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80eb 	beq.w	8000f9e <__udivmoddi4+0x286>
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e9c6 0100 	strd	r0, r1, [r6]
 8000dce:	4638      	mov	r0, r7
 8000dd0:	4639      	mov	r1, r7
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f783 	clz	r7, r3
 8000dda:	2f00      	cmp	r7, #0
 8000ddc:	d147      	bne.n	8000e6e <__udivmoddi4+0x156>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd0>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80fa 	bhi.w	8000fdc <__udivmoddi4+0x2c4>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	4698      	mov	r8, r3
 8000df2:	2e00      	cmp	r6, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000df6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xe8>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 808f 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e0a:	1b49      	subs	r1, r1, r5
 8000e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e10:	fa1f f885 	uxth.w	r8, r5
 8000e14:	2701      	movs	r7, #1
 8000e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e1a:	0c23      	lsrs	r3, r4, #16
 8000e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb08 f10c 	mul.w	r1, r8, ip
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4299      	cmp	r1, r3
 8000e36:	f200 80cd 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x14c>
 8000e54:	192c      	adds	r4, r5, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x14a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80b6 	bhi.w	8000fce <__udivmoddi4+0x2b6>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e79f      	b.n	8000dae <__udivmoddi4+0x96>
 8000e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e72:	40bb      	lsls	r3, r7
 8000e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e8c:	4325      	orrs	r5, r4
 8000e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e92:	0c2c      	lsrs	r4, r5, #16
 8000e94:	fb08 3319 	mls	r3, r8, r9, r3
 8000e98:	fa1f fa8e 	uxth.w	sl, lr
 8000e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb8:	f080 8087 	bcs.w	8000fca <__udivmoddi4+0x2b2>
 8000ebc:	429c      	cmp	r4, r3
 8000ebe:	f240 8084 	bls.w	8000fca <__udivmoddi4+0x2b2>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4473      	add	r3, lr
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	b2ad      	uxth	r5, r5
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000edc:	45a2      	cmp	sl, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d26b      	bcs.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eea:	45a2      	cmp	sl, r4
 8000eec:	d969      	bls.n	8000fc2 <__udivmoddi4+0x2aa>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4474      	add	r4, lr
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	eba4 040a 	sub.w	r4, r4, sl
 8000efe:	454c      	cmp	r4, r9
 8000f00:	46c2      	mov	sl, r8
 8000f02:	464b      	mov	r3, r9
 8000f04:	d354      	bcc.n	8000fb0 <__udivmoddi4+0x298>
 8000f06:	d051      	beq.n	8000fac <__udivmoddi4+0x294>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d069      	beq.n	8000fe0 <__udivmoddi4+0x2c8>
 8000f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f10:	eb64 0403 	sbc.w	r4, r4, r3
 8000f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f18:	40fd      	lsrs	r5, r7
 8000f1a:	40fc      	lsrs	r4, r7
 8000f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f20:	e9c6 5400 	strd	r5, r4, [r6]
 8000f24:	2700      	movs	r7, #0
 8000f26:	e747      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f30:	4095      	lsls	r5, r2
 8000f32:	fa01 f002 	lsl.w	r0, r1, r2
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f3e:	4338      	orrs	r0, r7
 8000f40:	0c01      	lsrs	r1, r0, #16
 8000f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f46:	fa1f f885 	uxth.w	r8, r5
 8000f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb07 f308 	mul.w	r3, r7, r8
 8000f56:	428b      	cmp	r3, r1
 8000f58:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x256>
 8000f5e:	1869      	adds	r1, r5, r1
 8000f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f64:	d22f      	bcs.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d92d      	bls.n	8000fc6 <__udivmoddi4+0x2ae>
 8000f6a:	3f02      	subs	r7, #2
 8000f6c:	4429      	add	r1, r5
 8000f6e:	1acb      	subs	r3, r1, r3
 8000f70:	b281      	uxth	r1, r0
 8000f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb00 f308 	mul.w	r3, r0, r8
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x27e>
 8000f86:	1869      	adds	r1, r5, r1
 8000f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f8c:	d217      	bcs.n	8000fbe <__udivmoddi4+0x2a6>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d915      	bls.n	8000fbe <__udivmoddi4+0x2a6>
 8000f92:	3802      	subs	r0, #2
 8000f94:	4429      	add	r1, r5
 8000f96:	1ac9      	subs	r1, r1, r3
 8000f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xfe>
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	e709      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	e6e7      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa8:	4618      	mov	r0, r3
 8000faa:	e6fb      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fac:	4541      	cmp	r1, r8
 8000fae:	d2ab      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fb8:	3801      	subs	r0, #1
 8000fba:	4613      	mov	r3, r2
 8000fbc:	e7a4      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fbe:	4660      	mov	r0, ip
 8000fc0:	e7e9      	b.n	8000f96 <__udivmoddi4+0x27e>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	e795      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc6:	4667      	mov	r7, ip
 8000fc8:	e7d1      	b.n	8000f6e <__udivmoddi4+0x256>
 8000fca:	4681      	mov	r9, r0
 8000fcc:	e77c      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fce:	3802      	subs	r0, #2
 8000fd0:	442c      	add	r4, r5
 8000fd2:	e747      	b.n	8000e64 <__udivmoddi4+0x14c>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	442b      	add	r3, r5
 8000fda:	e72f      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fdc:	4638      	mov	r0, r7
 8000fde:	e708      	b.n	8000df2 <__udivmoddi4+0xda>
 8000fe0:	4637      	mov	r7, r6
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0xa0>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2220      	movs	r2, #32
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f014 fa67 	bl	80154d6 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <MX_ADC1_Init+0x124>)
 800100a:	4a41      	ldr	r2, [pc, #260]	; (8001110 <MX_ADC1_Init+0x128>)
 800100c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <MX_ADC1_Init+0x124>)
 8001010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001014:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <MX_ADC1_Init+0x124>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <MX_ADC1_Init+0x124>)
 800101e:	2201      	movs	r2, #1
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001022:	4b3a      	ldr	r3, [pc, #232]	; (800110c <MX_ADC1_Init+0x124>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <MX_ADC1_Init+0x124>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001030:	4b36      	ldr	r3, [pc, #216]	; (800110c <MX_ADC1_Init+0x124>)
 8001032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <MX_ADC1_Init+0x124>)
 800103a:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <MX_ADC1_Init+0x124>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <MX_ADC1_Init+0x124>)
 8001048:	2201      	movs	r2, #1
 800104a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <MX_ADC1_Init+0x124>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <MX_ADC1_Init+0x124>)
 8001056:	2201      	movs	r2, #1
 8001058:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105a:	482c      	ldr	r0, [pc, #176]	; (800110c <MX_ADC1_Init+0x124>)
 800105c:	f003 fdba 	bl	8004bd4 <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001066:	f002 fd01 	bl	8003a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800106a:	2309      	movs	r3, #9
 800106c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2301      	movs	r3, #1
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001072:	2301      	movs	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	4619      	mov	r1, r3
 800107c:	4823      	ldr	r0, [pc, #140]	; (800110c <MX_ADC1_Init+0x124>)
 800107e:	f003 ff4d 	bl	8004f1c <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001088:	f002 fcf0 	bl	8003a6c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800108c:	2304      	movs	r3, #4
 800108e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001094:	2303      	movs	r3, #3
 8001096:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001098:	2301      	movs	r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800109c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010a0:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <MX_ADC1_Init+0x124>)
 80010b8:	f004 fa70 	bl	800559c <HAL_ADCEx_InjectedConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010c2:	f002 fcd3 	bl	8003a6c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80010c6:	2305      	movs	r3, #5
 80010c8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_ADC1_Init+0x124>)
 80010d4:	f004 fa62 	bl	800559c <HAL_ADCEx_InjectedConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80010de:	f002 fcc5 	bl	8003a6c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 80010e2:	2309      	movs	r3, #9
 80010e4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80010e6:	2303      	movs	r3, #3
 80010e8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <MX_ADC1_Init+0x124>)
 80010f4:	f004 fa52 	bl	800559c <HAL_ADCEx_InjectedConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80010fe:	f002 fcb5 	bl	8003a6c <Error_Handler>
  }

}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200005f0 	.word	0x200005f0
 8001110:	40012000 	.word	0x40012000

08001114 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <HAL_ADC_MspInit+0xb4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d143      	bne.n	80011be <HAL_ADC_MspInit+0xaa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a24      	ldr	r2, [pc, #144]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_ADC_MspInit+0xb8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800117e:	2330      	movs	r3, #48	; 0x30
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480f      	ldr	r0, [pc, #60]	; (80011d0 <HAL_ADC_MspInit+0xbc>)
 8001192:	f005 fc39 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <HAL_ADC_MspInit+0xc0>)
 80011aa:	f005 fc2d 	bl	8006a08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2105      	movs	r1, #5
 80011b2:	2012      	movs	r0, #18
 80011b4:	f004 fc5b 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011b8:	2012      	movs	r0, #18
 80011ba:	f004 fc74 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400

080011d8 <cJSON_GetStringValue>:
{
    return (const char*) (global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item) 
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsString(item)) 
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 ffd3 	bl	800318c <cJSON_IsString>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <cJSON_GetStringValue+0x18>
    {
        return NULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e001      	b.n	80011f4 <cJSON_GetStringValue+0x1c>
    }

    return item->valuestring;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <case_insensitive_strcmp+0x16>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001212:	2301      	movs	r3, #1
 8001214:	e05e      	b.n	80012d4 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d10d      	bne.n	800123a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800121e:	2300      	movs	r3, #0
 8001220:	e058      	b.n	80012d4 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800122a:	2300      	movs	r3, #0
 800122c:	e052      	b.n	80012d4 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3301      	adds	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	f014 f8e6 	bl	8015410 <__locale_ctype_ptr>
 8001244:	4602      	mov	r2, r0
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	3301      	adds	r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d103      	bne.n	800125e <case_insensitive_strcmp+0x62>
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f103 0420 	add.w	r4, r3, #32
 800125c:	e000      	b.n	8001260 <case_insensitive_strcmp+0x64>
 800125e:	7bfc      	ldrb	r4, [r7, #15]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	73bb      	strb	r3, [r7, #14]
 8001266:	f014 f8d3 	bl	8015410 <__locale_ctype_ptr>
 800126a:	4602      	mov	r2, r0
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	3301      	adds	r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <case_insensitive_strcmp+0x86>
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	3320      	adds	r3, #32
 8001280:	e000      	b.n	8001284 <case_insensitive_strcmp+0x88>
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	429c      	cmp	r4, r3
 8001286:	d0cc      	beq.n	8001222 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	737b      	strb	r3, [r7, #13]
 800128e:	f014 f8bf 	bl	8015410 <__locale_ctype_ptr>
 8001292:	4602      	mov	r2, r0
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	3301      	adds	r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d103      	bne.n	80012ac <case_insensitive_strcmp+0xb0>
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	f103 0420 	add.w	r4, r3, #32
 80012aa:	e000      	b.n	80012ae <case_insensitive_strcmp+0xb2>
 80012ac:	7b7c      	ldrb	r4, [r7, #13]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	733b      	strb	r3, [r7, #12]
 80012b4:	f014 f8ac 	bl	8015410 <__locale_ctype_ptr>
 80012b8:	4602      	mov	r2, r0
 80012ba:	7b3b      	ldrb	r3, [r7, #12]
 80012bc:	3301      	adds	r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d102      	bne.n	80012d0 <case_insensitive_strcmp+0xd4>
 80012ca:	7b3b      	ldrb	r3, [r7, #12]
 80012cc:	3320      	adds	r3, #32
 80012ce:	e000      	b.n	80012d2 <case_insensitive_strcmp+0xd6>
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	1ae3      	subs	r3, r4, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}

080012dc <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <cJSON_strdup+0x1c>
    {
        return NULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e015      	b.n	8001324 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7fe ff93 	bl	8000224 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	4798      	blx	r3
 800130c:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001314:	2300      	movs	r3, #0
 8001316:	e005      	b.n	8001324 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f014 f8b6 	bl	801548e <memcpy>

    return copy;
 8001322:	68bb      	ldr	r3, [r7, #8]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2028      	movs	r0, #40	; 0x28
 800133a:	4798      	blx	r3
 800133c:	60f8      	str	r0, [r7, #12]
    if (node)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001344:	2228      	movs	r2, #40	; 0x28
 8001346:	2100      	movs	r1, #0
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f014 f8c4 	bl	80154d6 <memset>
    }

    return node;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001364:	e037      	b.n	80013d6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d108      	bne.n	800138a <cJSON_Delete+0x32>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ffe7 	bl	8001358 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <cJSON_Delete+0x52>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <cJSON_Delete+0x8c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6912      	ldr	r2, [r2, #16]
 80013a6:	4610      	mov	r0, r2
 80013a8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <cJSON_Delete+0x72>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <cJSON_Delete+0x8c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6a12      	ldr	r2, [r2, #32]
 80013c6:	4610      	mov	r0, r2
 80013c8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <cJSON_Delete+0x8c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4798      	blx	r3
        item = next;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1c4      	bne.n	8001366 <cJSON_Delete+0xe>
    }
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000

080013e8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80013ec:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b099      	sub	sp, #100	; 0x64
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	f04f 0400 	mov.w	r4, #0
 800140a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001412:	f7ff ffe9 	bl	80013e8 <get_decimal_point>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <parse_number+0x36>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <parse_number+0x3a>
    {
        return false;
 800142e:	2300      	movs	r3, #0
 8001430:	e104      	b.n	800163c <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001432:	2300      	movs	r3, #0
 8001434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001436:	e09f      	b.n	8001578 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6899      	ldr	r1, [r3, #8]
 8001440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001442:	440b      	add	r3, r1
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3b2b      	subs	r3, #43	; 0x2b
 800144a:	2b3a      	cmp	r3, #58	; 0x3a
 800144c:	f200 80a4 	bhi.w	8001598 <parse_number+0x1a0>
 8001450:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <parse_number+0x60>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	08001545 	.word	0x08001545
 800145c:	08001599 	.word	0x08001599
 8001460:	08001545 	.word	0x08001545
 8001464:	08001563 	.word	0x08001563
 8001468:	08001599 	.word	0x08001599
 800146c:	08001545 	.word	0x08001545
 8001470:	08001545 	.word	0x08001545
 8001474:	08001545 	.word	0x08001545
 8001478:	08001545 	.word	0x08001545
 800147c:	08001545 	.word	0x08001545
 8001480:	08001545 	.word	0x08001545
 8001484:	08001545 	.word	0x08001545
 8001488:	08001545 	.word	0x08001545
 800148c:	08001545 	.word	0x08001545
 8001490:	08001545 	.word	0x08001545
 8001494:	08001599 	.word	0x08001599
 8001498:	08001599 	.word	0x08001599
 800149c:	08001599 	.word	0x08001599
 80014a0:	08001599 	.word	0x08001599
 80014a4:	08001599 	.word	0x08001599
 80014a8:	08001599 	.word	0x08001599
 80014ac:	08001599 	.word	0x08001599
 80014b0:	08001599 	.word	0x08001599
 80014b4:	08001599 	.word	0x08001599
 80014b8:	08001599 	.word	0x08001599
 80014bc:	08001599 	.word	0x08001599
 80014c0:	08001545 	.word	0x08001545
 80014c4:	08001599 	.word	0x08001599
 80014c8:	08001599 	.word	0x08001599
 80014cc:	08001599 	.word	0x08001599
 80014d0:	08001599 	.word	0x08001599
 80014d4:	08001599 	.word	0x08001599
 80014d8:	08001599 	.word	0x08001599
 80014dc:	08001599 	.word	0x08001599
 80014e0:	08001599 	.word	0x08001599
 80014e4:	08001599 	.word	0x08001599
 80014e8:	08001599 	.word	0x08001599
 80014ec:	08001599 	.word	0x08001599
 80014f0:	08001599 	.word	0x08001599
 80014f4:	08001599 	.word	0x08001599
 80014f8:	08001599 	.word	0x08001599
 80014fc:	08001599 	.word	0x08001599
 8001500:	08001599 	.word	0x08001599
 8001504:	08001599 	.word	0x08001599
 8001508:	08001599 	.word	0x08001599
 800150c:	08001599 	.word	0x08001599
 8001510:	08001599 	.word	0x08001599
 8001514:	08001599 	.word	0x08001599
 8001518:	08001599 	.word	0x08001599
 800151c:	08001599 	.word	0x08001599
 8001520:	08001599 	.word	0x08001599
 8001524:	08001599 	.word	0x08001599
 8001528:	08001599 	.word	0x08001599
 800152c:	08001599 	.word	0x08001599
 8001530:	08001599 	.word	0x08001599
 8001534:	08001599 	.word	0x08001599
 8001538:	08001599 	.word	0x08001599
 800153c:	08001599 	.word	0x08001599
 8001540:	08001545 	.word	0x08001545
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	6899      	ldr	r1, [r3, #8]
 800154c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154e:	440b      	add	r3, r1
 8001550:	4413      	add	r3, r2
 8001552:	7819      	ldrb	r1, [r3, #0]
 8001554:	f107 0208 	add.w	r2, r7, #8
 8001558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800155a:	4413      	add	r3, r2
 800155c:	460a      	mov	r2, r1
 800155e:	701a      	strb	r2, [r3, #0]
                break;
 8001560:	e007      	b.n	8001572 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 8001562:	f107 0208 	add.w	r2, r7, #8
 8001566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001568:	4413      	add	r3, r2
 800156a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800156e:	701a      	strb	r2, [r3, #0]
                break;
 8001570:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001574:	3301      	adds	r3, #1
 8001576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157a:	2b3e      	cmp	r3, #62	; 0x3e
 800157c:	d80e      	bhi.n	800159c <parse_number+0x1a4>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00b      	beq.n	800159c <parse_number+0x1a4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800158a:	441a      	add	r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	f4ff af51 	bcc.w	8001438 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001596:	e001      	b.n	800159c <parse_number+0x1a4>
                goto loop_end;
 8001598:	bf00      	nop
 800159a:	e000      	b.n	800159e <parse_number+0x1a6>
loop_end:
 800159c:	bf00      	nop
    number_c_string[i] = '\0';
 800159e:	f107 0208 	add.w	r2, r7, #8
 80015a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015a4:	4413      	add	r3, r2
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80015aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f015 fdb3 	bl	8017120 <strtod>
 80015ba:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80015be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015c0:	f107 0308 	add.w	r3, r7, #8
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d101      	bne.n	80015cc <parse_number+0x1d4>
    {
        return false; /* parse_error */
 80015c8:	2300      	movs	r3, #0
 80015ca:	e037      	b.n	800163c <parse_number+0x244>
    }

    item->valuedouble = number;
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80015d2:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80015d6:	a31d      	add	r3, pc, #116	; (adr r3, 800164c <parse_number+0x254>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015e0:	f7ff fac0 	bl	8000b64 <__aeabi_dcmpge>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	e015      	b.n	8001620 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <parse_number+0x250>)
 80015fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015fe:	f7ff faa7 	bl	8000b50 <__aeabi_dcmple>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	e006      	b.n	8001620 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 8001612:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001616:	f7ff facf 	bl	8000bb8 <__aeabi_d2iz>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2208      	movs	r2, #8
 8001624:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800162c:	4611      	mov	r1, r2
 800162e:	f107 0208 	add.w	r2, r7, #8
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	441a      	add	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	609a      	str	r2, [r3, #8]
    return true;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3764      	adds	r7, #100	; 0x64
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	f3af 8000 	nop.w
 8001648:	c1e00000 	.word	0xc1e00000
 800164c:	ffc00000 	.word	0xffc00000
 8001650:	41dfffff 	.word	0x41dfffff

08001654 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <ensure+0x20>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <ensure+0x24>
    {
        return NULL;
 8001674:	2300      	movs	r3, #0
 8001676:	e086      	b.n	8001786 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <ensure+0x3c>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	d301      	bcc.n	8001690 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800168c:	2300      	movs	r3, #0
 800168e:	e07a      	b.n	8001786 <ensure+0x132>
    }

    if (needed > INT_MAX)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	da01      	bge.n	800169a <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001696:	2300      	movs	r3, #0
 8001698:	e075      	b.n	8001786 <ensure+0x132>
    }

    needed += p->offset + 1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	3301      	adds	r3, #1
 80016a4:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d805      	bhi.n	80016bc <ensure+0x68>
    {
        return p->buffer + p->offset;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4413      	add	r3, r2
 80016ba:	e064      	b.n	8001786 <ensure+0x132>
    }

    if (p->noalloc) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <ensure+0x74>
        return NULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e05e      	b.n	8001786 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ce:	d308      	bcc.n	80016e2 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db03      	blt.n	80016de <ensure+0x8a>
        {
            newsize = INT_MAX;
 80016d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	e004      	b.n	80016e8 <ensure+0x94>
        }
        else
        {
            return NULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	e051      	b.n	8001786 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d018      	beq.n	8001722 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	4610      	mov	r0, r2
 80016fc:	4798      	blx	r3
 80016fe:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d135      	bne.n	8001772 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	4610      	mov	r0, r2
 8001710:	4798      	blx	r3
            p->length = 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

            return NULL;
 800171e:	2300      	movs	r3, #0
 8001720:	e031      	b.n	8001786 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	4798      	blx	r3
 800172a:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4610      	mov	r0, r2
 800173c:	4798      	blx	r3
            p->length = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

            return NULL;
 800174a:	2300      	movs	r3, #0
 800174c:	e01b      	b.n	8001786 <ensure+0x132>
        }
        if (newbuffer)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	461a      	mov	r2, r3
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f013 fe94 	bl	801548e <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4610      	mov	r0, r2
 8001770:	4798      	blx	r3
    }
    p->length = newsize;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4413      	add	r3, r2
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800178e:	b590      	push	{r4, r7, lr}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <update_offset+0x3a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00f      	beq.n	80017c8 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689c      	ldr	r4, [r3, #8]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7fe fd33 	bl	8000224 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	18e2      	adds	r2, r4, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	e000      	b.n	80017ca <update_offset+0x3c>
        return;
 80017c8:	bf00      	nop
}
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80017d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d4:	b087      	sub	sp, #28
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80017dc:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80017e0:	68b8      	ldr	r0, [r7, #8]
 80017e2:	68fe      	ldr	r6, [r7, #12]
 80017e4:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	687e      	ldr	r6, [r7, #4]
 80017ec:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80017f0:	f7ff f9c2 	bl	8000b78 <__aeabi_dcmpgt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <compare_double+0x34>
 80017fa:	68bc      	ldr	r4, [r7, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001802:	e003      	b.n	800180c <compare_double+0x3c>
 8001804:	683c      	ldr	r4, [r7, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800180c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001818:	f7fe fd66 	bl	80002e8 <__aeabi_dsub>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	4698      	mov	r8, r3
 8001822:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <compare_double+0x94>)
 800182c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001830:	f7fe ff12 	bl	8000658 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	4619      	mov	r1, r3
 800183a:	4622      	mov	r2, r4
 800183c:	2301      	movs	r3, #1
 800183e:	461c      	mov	r4, r3
 8001840:	4613      	mov	r3, r2
 8001842:	460a      	mov	r2, r1
 8001844:	4640      	mov	r0, r8
 8001846:	4649      	mov	r1, r9
 8001848:	f7ff f982 	bl	8000b50 <__aeabi_dcmple>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <compare_double+0x86>
 8001852:	2300      	movs	r3, #0
 8001854:	461c      	mov	r4, r3
 8001856:	b2e3      	uxtb	r3, r4
}
 8001858:	4618      	mov	r0, r3
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001862:	bf00      	nop
 8001864:	3cb00000 	.word	0x3cb00000

08001868 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	b093      	sub	sp, #76	; 0x4c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001872:	2300      	movs	r3, #0
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800187c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	831a      	strh	r2, [r3, #24]
    unsigned char decimal_point = get_decimal_point();
 800189c:	f7ff fda4 	bl	80013e8 <get_decimal_point>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <print_number+0x54>
    {
        return false;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e09f      	b.n	80019fc <print_number+0x194>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80018bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018c4:	f7ff f962 	bl	8000b8c <__aeabi_dcmpun>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d121      	bne.n	8001912 <print_number+0xaa>
 80018ce:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80018d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80018d6:	2301      	movs	r3, #1
 80018d8:	461e      	mov	r6, r3
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <print_number+0x19c>)
 80018e0:	4620      	mov	r0, r4
 80018e2:	4629      	mov	r1, r5
 80018e4:	f7ff f952 	bl	8000b8c <__aeabi_dcmpun>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10b      	bne.n	8001906 <print_number+0x9e>
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <print_number+0x19c>)
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7ff f92a 	bl	8000b50 <__aeabi_dcmple>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <print_number+0x9e>
 8001902:	2300      	movs	r3, #0
 8001904:	461e      	mov	r6, r3
 8001906:	b2f3      	uxtb	r3, r6
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <print_number+0xc0>
    {
        length = sprintf((char*)number_buffer, "null");
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4a3c      	ldr	r2, [pc, #240]	; (8001a08 <print_number+0x1a0>)
 8001918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191c:	6018      	str	r0, [r3, #0]
 800191e:	3304      	adds	r3, #4
 8001920:	7019      	strb	r1, [r3, #0]
 8001922:	2304      	movs	r3, #4
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
 8001926:	e027      	b.n	8001978 <print_number+0x110>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001928:	f107 0014 	add.w	r0, r7, #20
 800192c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001930:	4936      	ldr	r1, [pc, #216]	; (8001a0c <print_number+0x1a4>)
 8001932:	f014 fd29 	bl	8016388 <siprintf>
 8001936:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001938:	f107 0208 	add.w	r2, r7, #8
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4933      	ldr	r1, [pc, #204]	; (8001a10 <print_number+0x1a8>)
 8001942:	4618      	mov	r0, r3
 8001944:	f014 fd40 	bl	80163c8 <siscanf>
 8001948:	4603      	mov	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10c      	bne.n	8001968 <print_number+0x100>
 800194e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001952:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001956:	eeb0 0a47 	vmov.f32	s0, s14
 800195a:	eef0 0a67 	vmov.f32	s1, s15
 800195e:	f7ff ff37 	bl	80017d0 <compare_double>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <print_number+0x110>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001968:	f107 0014 	add.w	r0, r7, #20
 800196c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001970:	4928      	ldr	r1, [pc, #160]	; (8001a14 <print_number+0x1ac>)
 8001972:	f014 fd09 	bl	8016388 <siprintf>
 8001976:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197a:	2b00      	cmp	r3, #0
 800197c:	db02      	blt.n	8001984 <print_number+0x11c>
 800197e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001980:	2b19      	cmp	r3, #25
 8001982:	dd01      	ble.n	8001988 <print_number+0x120>
    {
        return false;
 8001984:	2300      	movs	r3, #0
 8001986:	e039      	b.n	80019fc <print_number+0x194>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198a:	3301      	adds	r3, #1
 800198c:	4619      	mov	r1, r3
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f7ff fe60 	bl	8001654 <ensure>
 8001994:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <print_number+0x138>
    {
        return false;
 800199c:	2300      	movs	r3, #0
 800199e:	e02d      	b.n	80019fc <print_number+0x194>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40
 80019a4:	e01a      	b.n	80019dc <print_number+0x174>
    {
        if (number_buffer[i] == decimal_point)
 80019a6:	f107 0214 	add.w	r2, r7, #20
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d105      	bne.n	80019c4 <print_number+0x15c>
        {
            output_pointer[i] = '.';
 80019b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019bc:	4413      	add	r3, r2
 80019be:	222e      	movs	r2, #46	; 0x2e
 80019c0:	701a      	strb	r2, [r3, #0]
            continue;
 80019c2:	e008      	b.n	80019d6 <print_number+0x16e>
        }

        output_pointer[i] = number_buffer[i];
 80019c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c8:	4413      	add	r3, r2
 80019ca:	f107 0114 	add.w	r1, r7, #20
 80019ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019d0:	440a      	add	r2, r1
 80019d2:	7812      	ldrb	r2, [r2, #0]
 80019d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80019d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d8:	3301      	adds	r3, #1
 80019da:	643b      	str	r3, [r7, #64]	; 0x40
 80019dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3e0      	bcc.n	80019a6 <print_number+0x13e>
    }
    output_pointer[i] = '\0';
 80019e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e8:	4413      	add	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f4:	441a      	add	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	609a      	str	r2, [r3, #8]

    return true;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	374c      	adds	r7, #76	; 0x4c
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a04:	7fefffff 	.word	0x7fefffff
 8001a08:	0801a1f4 	.word	0x0801a1f4
 8001a0c:	0801a1fc 	.word	0x0801a1fc
 8001a10:	0801a204 	.word	0x0801a204
 8001a14:	0801a208 	.word	0x0801a208

08001a18 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	e04c      	b.n	8001ac8 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b2f      	cmp	r3, #47	; 0x2f
 8001a38:	d90f      	bls.n	8001a5a <parse_hex4+0x42>
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b39      	cmp	r3, #57	; 0x39
 8001a44:	d809      	bhi.n	8001a5a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	3b30      	subs	r3, #48	; 0x30
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e02d      	b.n	8001ab6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b40      	cmp	r3, #64	; 0x40
 8001a64:	d90f      	bls.n	8001a86 <parse_hex4+0x6e>
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b46      	cmp	r3, #70	; 0x46
 8001a70:	d809      	bhi.n	8001a86 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b37      	subs	r3, #55	; 0x37
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e017      	b.n	8001ab6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b60      	cmp	r3, #96	; 0x60
 8001a90:	d90f      	bls.n	8001ab2 <parse_hex4+0x9a>
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b66      	cmp	r3, #102	; 0x66
 8001a9c:	d809      	bhi.n	8001ab2 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b57      	subs	r3, #87	; 0x57
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e001      	b.n	8001ab6 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e00c      	b.n	8001ad0 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d802      	bhi.n	8001ac2 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d9af      	bls.n	8001a2e <parse_hex4+0x16>
        }
    }

    return h;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	f340 80b7 	ble.w	8001c86 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff7b 	bl	8001a18 <parse_hex4>
 8001b22:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001b2a:	d304      	bcc.n	8001b36 <utf16_literal_to_utf8+0x5a>
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001b32:	f0c0 80aa 	bcc.w	8001c8a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001b3c:	d337      	bcc.n	8001bae <utf16_literal_to_utf8+0xd2>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001b44:	d233      	bcs.n	8001bae <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	3306      	adds	r3, #6
 8001b4a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001b50:	230c      	movs	r3, #12
 8001b52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	f340 8096 	ble.w	8001c8e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b5c      	cmp	r3, #92	; 0x5c
 8001b68:	f040 8093 	bne.w	8001c92 <utf16_literal_to_utf8+0x1b6>
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b75      	cmp	r3, #117	; 0x75
 8001b74:	f040 808d 	bne.w	8001c92 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff4b 	bl	8001a18 <parse_hex4>
 8001b82:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001b8a:	f0c0 8082 	bcc.w	8001c92 <utf16_literal_to_utf8+0x1b6>
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001b94:	d27d      	bcs.n	8001c92 <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	029a      	lsls	r2, r3, #10
 8001b9a:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <utf16_literal_to_utf8+0x1c8>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001bac:	e004      	b.n	8001bb8 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001bae:	2306      	movs	r3, #6
 8001bb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	2b7f      	cmp	r3, #127	; 0x7f
 8001bbc:	d803      	bhi.n	8001bc6 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001bc4:	e01f      	b.n	8001c06 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bcc:	d206      	bcs.n	8001bdc <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001bd4:	23c0      	movs	r3, #192	; 0xc0
 8001bd6:	f887 3020 	strb.w	r3, [r7, #32]
 8001bda:	e014      	b.n	8001c06 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d206      	bcs.n	8001bf2 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001bea:	23e0      	movs	r3, #224	; 0xe0
 8001bec:	f887 3020 	strb.w	r3, [r7, #32]
 8001bf0:	e009      	b.n	8001c06 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001bf8:	d24d      	bcs.n	8001c96 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001c00:	23f0      	movs	r3, #240	; 0xf0
 8001c02:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c10:	e015      	b.n	8001c3e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c24:	440b      	add	r3, r1
 8001c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001c34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001c3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1e5      	bne.n	8001c12 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d909      	bls.n	8001c62 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	b2d9      	uxtb	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e007      	b.n	8001c72 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c7a:	441a      	add	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001c80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c84:	e009      	b.n	8001c9a <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001c86:	bf00      	nop
 8001c88:	e006      	b.n	8001c98 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001c8a:	bf00      	nop
 8001c8c:	e004      	b.n	8001c98 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8001c8e:	bf00      	nop
 8001c90:	e002      	b.n	8001c98 <utf16_literal_to_utf8+0x1bc>

fail:
 8001c92:	bf00      	nop
 8001c94:	e000      	b.n	8001c98 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001c96:	bf00      	nop
    return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	000ffc00 	.word	0x000ffc00

08001ca8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4413      	add	r3, r2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b22      	cmp	r3, #34	; 0x22
 8001ce4:	f040 816c 	bne.w	8001fc0 <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001cf0:	e018      	b.n	8001d24 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b5c      	cmp	r3, #92	; 0x5c
 8001cf8:	d111      	bne.n	8001d1e <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	461a      	mov	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f080 8159 	bcs.w	8001fc4 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	3301      	adds	r3, #1
 8001d22:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d203      	bcs.n	8001d3e <parse_string+0x96>
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b22      	cmp	r3, #34	; 0x22
 8001d3c:	d1d9      	bne.n	8001cf2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	f080 813b 	bcs.w	8001fc8 <parse_string+0x320>
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b22      	cmp	r3, #34	; 0x22
 8001d58:	f040 8136 	bne.w	8001fc8 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	6892      	ldr	r2, [r2, #8]
 8001d66:	440a      	add	r2, r1
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	3201      	adds	r2, #1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4798      	blx	r3
 8001d7e:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8122 	beq.w	8001fcc <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001d8c:	e0fc      	b.n	8001f88 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b5c      	cmp	r3, #92	; 0x5c
 8001d94:	d008      	beq.n	8001da8 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	1c53      	adds	r3, r2, #1
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	60f9      	str	r1, [r7, #12]
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	e0ef      	b.n	8001f88 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f340 810c 	ble.w	8001fd0 <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3301      	adds	r3, #1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3b22      	subs	r3, #34	; 0x22
 8001dc0:	2b53      	cmp	r3, #83	; 0x53
 8001dc2:	f200 8107 	bhi.w	8001fd4 <parse_string+0x32c>
 8001dc6:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <parse_string+0x124>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001f59 	.word	0x08001f59
 8001dd0:	08001fd5 	.word	0x08001fd5
 8001dd4:	08001fd5 	.word	0x08001fd5
 8001dd8:	08001fd5 	.word	0x08001fd5
 8001ddc:	08001fd5 	.word	0x08001fd5
 8001de0:	08001fd5 	.word	0x08001fd5
 8001de4:	08001fd5 	.word	0x08001fd5
 8001de8:	08001fd5 	.word	0x08001fd5
 8001dec:	08001fd5 	.word	0x08001fd5
 8001df0:	08001fd5 	.word	0x08001fd5
 8001df4:	08001fd5 	.word	0x08001fd5
 8001df8:	08001fd5 	.word	0x08001fd5
 8001dfc:	08001fd5 	.word	0x08001fd5
 8001e00:	08001f59 	.word	0x08001f59
 8001e04:	08001fd5 	.word	0x08001fd5
 8001e08:	08001fd5 	.word	0x08001fd5
 8001e0c:	08001fd5 	.word	0x08001fd5
 8001e10:	08001fd5 	.word	0x08001fd5
 8001e14:	08001fd5 	.word	0x08001fd5
 8001e18:	08001fd5 	.word	0x08001fd5
 8001e1c:	08001fd5 	.word	0x08001fd5
 8001e20:	08001fd5 	.word	0x08001fd5
 8001e24:	08001fd5 	.word	0x08001fd5
 8001e28:	08001fd5 	.word	0x08001fd5
 8001e2c:	08001fd5 	.word	0x08001fd5
 8001e30:	08001fd5 	.word	0x08001fd5
 8001e34:	08001fd5 	.word	0x08001fd5
 8001e38:	08001fd5 	.word	0x08001fd5
 8001e3c:	08001fd5 	.word	0x08001fd5
 8001e40:	08001fd5 	.word	0x08001fd5
 8001e44:	08001fd5 	.word	0x08001fd5
 8001e48:	08001fd5 	.word	0x08001fd5
 8001e4c:	08001fd5 	.word	0x08001fd5
 8001e50:	08001fd5 	.word	0x08001fd5
 8001e54:	08001fd5 	.word	0x08001fd5
 8001e58:	08001fd5 	.word	0x08001fd5
 8001e5c:	08001fd5 	.word	0x08001fd5
 8001e60:	08001fd5 	.word	0x08001fd5
 8001e64:	08001fd5 	.word	0x08001fd5
 8001e68:	08001fd5 	.word	0x08001fd5
 8001e6c:	08001fd5 	.word	0x08001fd5
 8001e70:	08001fd5 	.word	0x08001fd5
 8001e74:	08001fd5 	.word	0x08001fd5
 8001e78:	08001fd5 	.word	0x08001fd5
 8001e7c:	08001fd5 	.word	0x08001fd5
 8001e80:	08001fd5 	.word	0x08001fd5
 8001e84:	08001fd5 	.word	0x08001fd5
 8001e88:	08001fd5 	.word	0x08001fd5
 8001e8c:	08001fd5 	.word	0x08001fd5
 8001e90:	08001fd5 	.word	0x08001fd5
 8001e94:	08001fd5 	.word	0x08001fd5
 8001e98:	08001fd5 	.word	0x08001fd5
 8001e9c:	08001fd5 	.word	0x08001fd5
 8001ea0:	08001fd5 	.word	0x08001fd5
 8001ea4:	08001fd5 	.word	0x08001fd5
 8001ea8:	08001fd5 	.word	0x08001fd5
 8001eac:	08001fd5 	.word	0x08001fd5
 8001eb0:	08001fd5 	.word	0x08001fd5
 8001eb4:	08001f59 	.word	0x08001f59
 8001eb8:	08001fd5 	.word	0x08001fd5
 8001ebc:	08001fd5 	.word	0x08001fd5
 8001ec0:	08001fd5 	.word	0x08001fd5
 8001ec4:	08001fd5 	.word	0x08001fd5
 8001ec8:	08001fd5 	.word	0x08001fd5
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001fd5 	.word	0x08001fd5
 8001ed4:	08001fd5 	.word	0x08001fd5
 8001ed8:	08001fd5 	.word	0x08001fd5
 8001edc:	08001f29 	.word	0x08001f29
 8001ee0:	08001fd5 	.word	0x08001fd5
 8001ee4:	08001fd5 	.word	0x08001fd5
 8001ee8:	08001fd5 	.word	0x08001fd5
 8001eec:	08001fd5 	.word	0x08001fd5
 8001ef0:	08001fd5 	.word	0x08001fd5
 8001ef4:	08001fd5 	.word	0x08001fd5
 8001ef8:	08001fd5 	.word	0x08001fd5
 8001efc:	08001f35 	.word	0x08001f35
 8001f00:	08001fd5 	.word	0x08001fd5
 8001f04:	08001fd5 	.word	0x08001fd5
 8001f08:	08001fd5 	.word	0x08001fd5
 8001f0c:	08001f41 	.word	0x08001f41
 8001f10:	08001fd5 	.word	0x08001fd5
 8001f14:	08001f4d 	.word	0x08001f4d
 8001f18:	08001f67 	.word	0x08001f67
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60fa      	str	r2, [r7, #12]
 8001f22:	2208      	movs	r2, #8
 8001f24:	701a      	strb	r2, [r3, #0]
                    break;
 8001f26:	e02b      	b.n	8001f80 <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60fa      	str	r2, [r7, #12]
 8001f2e:	220c      	movs	r2, #12
 8001f30:	701a      	strb	r2, [r3, #0]
                    break;
 8001f32:	e025      	b.n	8001f80 <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	60fa      	str	r2, [r7, #12]
 8001f3a:	220a      	movs	r2, #10
 8001f3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001f3e:	e01f      	b.n	8001f80 <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60fa      	str	r2, [r7, #12]
 8001f46:	220d      	movs	r2, #13
 8001f48:	701a      	strb	r2, [r3, #0]
                    break;
 8001f4a:	e019      	b.n	8001f80 <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60fa      	str	r2, [r7, #12]
 8001f52:	2209      	movs	r2, #9
 8001f54:	701a      	strb	r2, [r3, #0]
                    break;
 8001f56:	e013      	b.n	8001f80 <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60fa      	str	r2, [r7, #12]
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	7852      	ldrb	r2, [r2, #1]
 8001f62:	701a      	strb	r2, [r3, #0]
                    break;
 8001f64:	e00c      	b.n	8001f80 <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f70:	f7ff fdb4 	bl	8001adc <utf16_literal_to_utf8>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d02c      	beq.n	8001fd8 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001f7e:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	4413      	add	r3, r2
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f4ff aefe 	bcc.w	8001d8e <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	609a      	str	r2, [r3, #8]

    return true;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e01e      	b.n	8001ffe <parse_string+0x356>
        goto fail;
 8001fc0:	bf00      	nop
 8001fc2:	e00a      	b.n	8001fda <parse_string+0x332>
                    goto fail;
 8001fc4:	bf00      	nop
 8001fc6:	e008      	b.n	8001fda <parse_string+0x332>

fail:
 8001fc8:	bf00      	nop
 8001fca:	e006      	b.n	8001fda <parse_string+0x332>
            goto fail; /* allocation failure */
 8001fcc:	bf00      	nop
 8001fce:	e004      	b.n	8001fda <parse_string+0x332>
                goto fail;
 8001fd0:	bf00      	nop
 8001fd2:	e002      	b.n	8001fda <parse_string+0x332>
                    goto fail;
 8001fd4:	bf00      	nop
 8001fd6:	e000      	b.n	8001fda <parse_string+0x332>
                        goto fail;
 8001fd8:	bf00      	nop
    if (output != NULL)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	69f8      	ldr	r0, [r7, #28]
 8001fe6:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop

08002008 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <print_string_ptr+0x28>
    {
        return false;
 800202c:	2300      	movs	r3, #0
 800202e:	e0d7      	b.n	80021e0 <print_string_ptr+0x1d8>
    }

    /* empty string */
    if (input == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d111      	bne.n	800205a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8002036:	2103      	movs	r1, #3
 8002038:	6838      	ldr	r0, [r7, #0]
 800203a:	f7ff fb0b 	bl	8001654 <ensure>
 800203e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <print_string_ptr+0x42>
        {
            return false;
 8002046:	2300      	movs	r3, #0
 8002048:	e0ca      	b.n	80021e0 <print_string_ptr+0x1d8>
        }
        strcpy((char*)output, "\"\"");
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <print_string_ptr+0x1e0>)
 800204e:	8811      	ldrh	r1, [r2, #0]
 8002050:	7892      	ldrb	r2, [r2, #2]
 8002052:	8019      	strh	r1, [r3, #0]
 8002054:	709a      	strb	r2, [r3, #2]

        return true;
 8002056:	2301      	movs	r3, #1
 8002058:	e0c2      	b.n	80021e0 <print_string_ptr+0x1d8>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e01c      	b.n	800209a <print_string_ptr+0x92>
    {
        switch (*input_pointer)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b0d      	cmp	r3, #13
 8002066:	dc05      	bgt.n	8002074 <print_string_ptr+0x6c>
 8002068:	2b0c      	cmp	r3, #12
 800206a:	da07      	bge.n	800207c <print_string_ptr+0x74>
 800206c:	3b08      	subs	r3, #8
 800206e:	2b02      	cmp	r3, #2
 8002070:	d808      	bhi.n	8002084 <print_string_ptr+0x7c>
 8002072:	e003      	b.n	800207c <print_string_ptr+0x74>
 8002074:	2b22      	cmp	r3, #34	; 0x22
 8002076:	d001      	beq.n	800207c <print_string_ptr+0x74>
 8002078:	2b5c      	cmp	r3, #92	; 0x5c
 800207a:	d103      	bne.n	8002084 <print_string_ptr+0x7c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
                break;
 8002082:	e007      	b.n	8002094 <print_string_ptr+0x8c>
            default:
                if (*input_pointer < 32)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b1f      	cmp	r3, #31
 800208a:	d802      	bhi.n	8002092 <print_string_ptr+0x8a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3305      	adds	r3, #5
 8002090:	617b      	str	r3, [r7, #20]
                }
                break;
 8002092:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	3301      	adds	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1de      	bne.n	8002060 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3303      	adds	r3, #3
 80020b4:	4619      	mov	r1, r3
 80020b6:	6838      	ldr	r0, [r7, #0]
 80020b8:	f7ff facc 	bl	8001654 <ensure>
 80020bc:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <print_string_ptr+0xc0>
    {
        return false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e08b      	b.n	80021e0 <print_string_ptr+0x1d8>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d117      	bne.n	80020fe <print_string_ptr+0xf6>
    {
        output[0] = '\"';
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2222      	movs	r2, #34	; 0x22
 80020d2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	3301      	adds	r3, #1
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	f013 f9d6 	bl	801548e <memcpy>
        output[output_length + 1] = '\"';
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3301      	adds	r3, #1
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	2222      	movs	r2, #34	; 0x22
 80020ec:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3302      	adds	r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]

        return true;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e070      	b.n	80021e0 <print_string_ptr+0x1d8>
    }

    output[0] = '\"';
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2222      	movs	r2, #34	; 0x22
 8002102:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	3301      	adds	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e056      	b.n	80021be <print_string_ptr+0x1b6>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b1f      	cmp	r3, #31
 8002116:	d90c      	bls.n	8002132 <print_string_ptr+0x12a>
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b22      	cmp	r3, #34	; 0x22
 800211e:	d008      	beq.n	8002132 <print_string_ptr+0x12a>
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b5c      	cmp	r3, #92	; 0x5c
 8002126:	d004      	beq.n	8002132 <print_string_ptr+0x12a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	e03f      	b.n	80021b2 <print_string_ptr+0x1aa>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	61ba      	str	r2, [r7, #24]
 8002138:	225c      	movs	r2, #92	; 0x5c
 800213a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d01b      	beq.n	800217c <print_string_ptr+0x174>
 8002144:	2b0c      	cmp	r3, #12
 8002146:	dc06      	bgt.n	8002156 <print_string_ptr+0x14e>
 8002148:	2b09      	cmp	r3, #9
 800214a:	d023      	beq.n	8002194 <print_string_ptr+0x18c>
 800214c:	2b0a      	cmp	r3, #10
 800214e:	d019      	beq.n	8002184 <print_string_ptr+0x17c>
 8002150:	2b08      	cmp	r3, #8
 8002152:	d00f      	beq.n	8002174 <print_string_ptr+0x16c>
 8002154:	e022      	b.n	800219c <print_string_ptr+0x194>
 8002156:	2b22      	cmp	r3, #34	; 0x22
 8002158:	d008      	beq.n	800216c <print_string_ptr+0x164>
 800215a:	2b5c      	cmp	r3, #92	; 0x5c
 800215c:	d002      	beq.n	8002164 <print_string_ptr+0x15c>
 800215e:	2b0d      	cmp	r3, #13
 8002160:	d014      	beq.n	800218c <print_string_ptr+0x184>
 8002162:	e01b      	b.n	800219c <print_string_ptr+0x194>
            {
                case '\\':
                    *output_pointer = '\\';
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	225c      	movs	r2, #92	; 0x5c
 8002168:	701a      	strb	r2, [r3, #0]
                    break;
 800216a:	e022      	b.n	80021b2 <print_string_ptr+0x1aa>
                case '\"':
                    *output_pointer = '\"';
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2222      	movs	r2, #34	; 0x22
 8002170:	701a      	strb	r2, [r3, #0]
                    break;
 8002172:	e01e      	b.n	80021b2 <print_string_ptr+0x1aa>
                case '\b':
                    *output_pointer = 'b';
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2262      	movs	r2, #98	; 0x62
 8002178:	701a      	strb	r2, [r3, #0]
                    break;
 800217a:	e01a      	b.n	80021b2 <print_string_ptr+0x1aa>
                case '\f':
                    *output_pointer = 'f';
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2266      	movs	r2, #102	; 0x66
 8002180:	701a      	strb	r2, [r3, #0]
                    break;
 8002182:	e016      	b.n	80021b2 <print_string_ptr+0x1aa>
                case '\n':
                    *output_pointer = 'n';
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	226e      	movs	r2, #110	; 0x6e
 8002188:	701a      	strb	r2, [r3, #0]
                    break;
 800218a:	e012      	b.n	80021b2 <print_string_ptr+0x1aa>
                case '\r':
                    *output_pointer = 'r';
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2272      	movs	r2, #114	; 0x72
 8002190:	701a      	strb	r2, [r3, #0]
                    break;
 8002192:	e00e      	b.n	80021b2 <print_string_ptr+0x1aa>
                case '\t':
                    *output_pointer = 't';
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2274      	movs	r2, #116	; 0x74
 8002198:	701a      	strb	r2, [r3, #0]
                    break;
 800219a:	e00a      	b.n	80021b2 <print_string_ptr+0x1aa>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4912      	ldr	r1, [pc, #72]	; (80021ec <print_string_ptr+0x1e4>)
 80021a4:	69b8      	ldr	r0, [r7, #24]
 80021a6:	f014 f8ef 	bl	8016388 <siprintf>
                    output_pointer += 4;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3304      	adds	r3, #4
 80021ae:	61bb      	str	r3, [r7, #24]
                    break;
 80021b0:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3301      	adds	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1a4      	bne.n	8002110 <print_string_ptr+0x108>
            }
        }
    }
    output[output_length + 1] = '\"';
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3301      	adds	r3, #1
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	2222      	movs	r2, #34	; 0x22
 80021d0:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3302      	adds	r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]

    return true;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	0801a210 	.word	0x0801a210
 80021ec:	0801a214 	.word	0x0801a214

080021f0 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff01 	bl	8002008 <print_string_ptr>
 8002206:	4603      	mov	r3, r0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <buffer_skip_whitespace+0x16>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	e02c      	b.n	8002284 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <buffer_skip_whitespace+0x2c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d306      	bcc.n	800224a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	e021      	b.n	8002284 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <buffer_skip_whitespace+0x5c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d207      	bcs.n	800226c <buffer_skip_whitespace+0x5c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b20      	cmp	r3, #32
 800226a:	d9e9      	bls.n	8002240 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	429a      	cmp	r2, r3
 8002276:	d104      	bne.n	8002282 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <skip_utf8_bom+0x1e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <skip_utf8_bom+0x1e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e01c      	b.n	80022ec <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d018      	beq.n	80022ea <skip_utf8_bom+0x5a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	1d1a      	adds	r2, r3, #4
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d211      	bcs.n	80022ea <skip_utf8_bom+0x5a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	2203      	movs	r2, #3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <skip_utf8_bom+0x64>)
 80022d4:	4618      	mov	r0, r3
 80022d6:	f014 f8ee 	bl	80164b6 <strncmp>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	1cda      	adds	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80022ea:	687b      	ldr	r3, [r7, #4]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	0801a21c 	.word	0x0801a21c

080022f8 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800230a:	2300      	movs	r3, #0
 800230c:	e00c      	b.n	8002328 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7fd ff88 	bl	8000224 <strlen>
 8002314:	4603      	mov	r3, r0
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	6979      	ldr	r1, [r7, #20]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f805 	bl	8002330 <cJSON_ParseWithLengthOpts>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	; 0x38
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800233e:	f107 0318 	add.w	r3, r7, #24
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8002356:	4b40      	ldr	r3, [pc, #256]	; (8002458 <cJSON_ParseWithLengthOpts+0x128>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800235c:	4b3e      	ldr	r3, [pc, #248]	; (8002458 <cJSON_ParseWithLengthOpts+0x128>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d042      	beq.n	80023ee <cJSON_ParseWithLengthOpts+0xbe>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03f      	beq.n	80023ee <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800237a:	4a38      	ldr	r2, [pc, #224]	; (800245c <cJSON_ParseWithLengthOpts+0x12c>)
 800237c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002380:	ca07      	ldmia	r2, {r0, r1, r2}
 8002382:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8002386:	4835      	ldr	r0, [pc, #212]	; (800245c <cJSON_ParseWithLengthOpts+0x12c>)
 8002388:	f7fe ffd0 	bl	800132c <cJSON_New_Item>
 800238c:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02e      	beq.n	80023f2 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff79 	bl	8002290 <skip_utf8_bom>
 800239e:	4603      	mov	r3, r0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff35 	bl	8002210 <buffer_skip_whitespace>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023ac:	f000 f89a 	bl	80024e4 <parse_value>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01f      	beq.n	80023f6 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00e      	beq.n	80023da <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80023bc:	f107 0318 	add.w	r3, r7, #24
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff25 	bl	8002210 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d20f      	bcs.n	80023ee <cJSON_ParseWithLengthOpts+0xbe>
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	e02f      	b.n	800244e <cJSON_ParseWithLengthOpts+0x11e>

fail:
 80023ee:	bf00      	nop
 80023f0:	e002      	b.n	80023f8 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 80023f6:	bf00      	nop
    if (item != NULL)
 80023f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 80023fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002400:	f7fe ffaa 	bl	8001358 <cJSON_Delete>
    }

    if (value != NULL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	429a      	cmp	r2, r3
 8002418:	d202      	bcs.n	8002420 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e005      	b.n	800242c <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b01      	subs	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	441a      	add	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <cJSON_ParseWithLengthOpts+0x128>)
 800243e:	461a      	mov	r2, r3
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002448:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3738      	adds	r7, #56	; 0x38
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000210 	.word	0x20000210
 800245c:	20000000 	.word	0x20000000

08002460 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff43 	bl	80022f8 <cJSON_ParseWithOpts>
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <cJSON_PrintPreallocated>:

    return (char*)p.buffer;
}

CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f013 f81f 	bl	80154d6 <memset>

    if ((length < 0) || (buffer == NULL))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db02      	blt.n	80024a4 <cJSON_PrintPreallocated+0x28>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <cJSON_PrintPreallocated+0x2c>
    {
        return false;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e016      	b.n	80024d6 <cJSON_PrintPreallocated+0x5a>
    }

    p.buffer = (unsigned char*)buffer;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	617b      	str	r3, [r7, #20]
    p.length = (size_t)length;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
    p.offset = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
    p.noalloc = true;
 80024b4:	2301      	movs	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    p.format = format;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
    p.hooks = global_hooks;
 80024bc:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <cJSON_PrintPreallocated+0x64>)
 80024be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    return print_value(item, &p);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 f8f4 	bl	80026bc <print_value>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3738      	adds	r7, #56	; 0x38
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <parse_value>:

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <parse_value+0x18>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <parse_value+0x1c>
    {
        return false; /* no input */
 80024fc:	2300      	movs	r3, #0
 80024fe:	e0d2      	b.n	80026a6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01d      	beq.n	8002542 <parse_value+0x5e>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	1d1a      	adds	r2, r3, #4
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	d816      	bhi.n	8002542 <parse_value+0x5e>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4413      	add	r3, r2
 800251e:	2204      	movs	r2, #4
 8002520:	4963      	ldr	r1, [pc, #396]	; (80026b0 <parse_value+0x1cc>)
 8002522:	4618      	mov	r0, r3
 8002524:	f013 ffc7 	bl	80164b6 <strncmp>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2204      	movs	r2, #4
 8002532:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	1d1a      	adds	r2, r3, #4
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	609a      	str	r2, [r3, #8]
        return true;
 800253e:	2301      	movs	r3, #1
 8002540:	e0b1      	b.n	80026a6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01d      	beq.n	8002584 <parse_value+0xa0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	1d5a      	adds	r2, r3, #5
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d816      	bhi.n	8002584 <parse_value+0xa0>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4413      	add	r3, r2
 8002560:	2205      	movs	r2, #5
 8002562:	4954      	ldr	r1, [pc, #336]	; (80026b4 <parse_value+0x1d0>)
 8002564:	4618      	mov	r0, r3
 8002566:	f013 ffa6 	bl	80164b6 <strncmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	1d5a      	adds	r2, r3, #5
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	609a      	str	r2, [r3, #8]
        return true;
 8002580:	2301      	movs	r3, #1
 8002582:	e090      	b.n	80026a6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d020      	beq.n	80025cc <parse_value+0xe8>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d819      	bhi.n	80025cc <parse_value+0xe8>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	2204      	movs	r2, #4
 80025a4:	4944      	ldr	r1, [pc, #272]	; (80026b8 <parse_value+0x1d4>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f013 ff85 	bl	80164b6 <strncmp>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10c      	bne.n	80025cc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	1d1a      	adds	r2, r3, #4
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	609a      	str	r2, [r3, #8]
        return true;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e06c      	b.n	80026a6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d013      	beq.n	80025fa <parse_value+0x116>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d20d      	bcs.n	80025fa <parse_value+0x116>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b22      	cmp	r3, #34	; 0x22
 80025ec:	d105      	bne.n	80025fa <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fb59 	bl	8001ca8 <parse_string>
 80025f6:	4603      	mov	r3, r0
 80025f8:	e055      	b.n	80026a6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <parse_value+0x164>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d21d      	bcs.n	8002648 <parse_value+0x164>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b2d      	cmp	r3, #45	; 0x2d
 800261a:	d00f      	beq.n	800263c <parse_value+0x158>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b2f      	cmp	r3, #47	; 0x2f
 800262a:	d90d      	bls.n	8002648 <parse_value+0x164>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4413      	add	r3, r2
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b39      	cmp	r3, #57	; 0x39
 800263a:	d805      	bhi.n	8002648 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe feda 	bl	80013f8 <parse_number>
 8002644:	4603      	mov	r3, r0
 8002646:	e02e      	b.n	80026a6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d013      	beq.n	8002676 <parse_value+0x192>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20d      	bcs.n	8002676 <parse_value+0x192>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b5b      	cmp	r3, #91	; 0x5b
 8002668:	d105      	bne.n	8002676 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8cb 	bl	8002808 <parse_array>
 8002672:	4603      	mov	r3, r0
 8002674:	e017      	b.n	80026a6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <parse_value+0x1c0>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	d20d      	bcs.n	80026a4 <parse_value+0x1c0>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b7b      	cmp	r3, #123	; 0x7b
 8002696:	d105      	bne.n	80026a4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9fe 	bl	8002a9c <parse_object>
 80026a0:	4603      	mov	r3, r0
 80026a2:	e000      	b.n	80026a6 <parse_value+0x1c2>
    }

    return false;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0801a1f4 	.word	0x0801a1f4
 80026b4:	0801a220 	.word	0x0801a220
 80026b8:	0801a228 	.word	0x0801a228

080026bc <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <print_value+0x1a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <print_value+0x1e>
    {
        return false;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e08b      	b.n	80027f2 <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d04a      	beq.n	800277a <print_value+0xbe>
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	dc06      	bgt.n	80026f6 <print_value+0x3a>
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d034      	beq.n	8002756 <print_value+0x9a>
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d00e      	beq.n	800270e <print_value+0x52>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d01e      	beq.n	8002732 <print_value+0x76>
 80026f4:	e07c      	b.n	80027f0 <print_value+0x134>
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d06e      	beq.n	80027d8 <print_value+0x11c>
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	dc02      	bgt.n	8002704 <print_value+0x48>
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d064      	beq.n	80027cc <print_value+0x110>
 8002702:	e075      	b.n	80027f0 <print_value+0x134>
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d06d      	beq.n	80027e4 <print_value+0x128>
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d03c      	beq.n	8002786 <print_value+0xca>
 800270c:	e070      	b.n	80027f0 <print_value+0x134>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800270e:	2105      	movs	r1, #5
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f7fe ff9f 	bl	8001654 <ensure>
 8002716:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <print_value+0x66>
            {
                return false;
 800271e:	2300      	movs	r3, #0
 8002720:	e067      	b.n	80027f2 <print_value+0x136>
            }
            strcpy((char*)output, "null");
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a35      	ldr	r2, [pc, #212]	; (80027fc <print_value+0x140>)
 8002726:	6810      	ldr	r0, [r2, #0]
 8002728:	6018      	str	r0, [r3, #0]
 800272a:	7912      	ldrb	r2, [r2, #4]
 800272c:	711a      	strb	r2, [r3, #4]
            return true;
 800272e:	2301      	movs	r3, #1
 8002730:	e05f      	b.n	80027f2 <print_value+0x136>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002732:	2106      	movs	r1, #6
 8002734:	6838      	ldr	r0, [r7, #0]
 8002736:	f7fe ff8d 	bl	8001654 <ensure>
 800273a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <print_value+0x8a>
            {
                return false;
 8002742:	2300      	movs	r3, #0
 8002744:	e055      	b.n	80027f2 <print_value+0x136>
            }
            strcpy((char*)output, "false");
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <print_value+0x144>)
 800274a:	6810      	ldr	r0, [r2, #0]
 800274c:	6018      	str	r0, [r3, #0]
 800274e:	8892      	ldrh	r2, [r2, #4]
 8002750:	809a      	strh	r2, [r3, #4]
            return true;
 8002752:	2301      	movs	r3, #1
 8002754:	e04d      	b.n	80027f2 <print_value+0x136>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002756:	2105      	movs	r1, #5
 8002758:	6838      	ldr	r0, [r7, #0]
 800275a:	f7fe ff7b 	bl	8001654 <ensure>
 800275e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <print_value+0xae>
            {
                return false;
 8002766:	2300      	movs	r3, #0
 8002768:	e043      	b.n	80027f2 <print_value+0x136>
            }
            strcpy((char*)output, "true");
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <print_value+0x148>)
 800276e:	6810      	ldr	r0, [r2, #0]
 8002770:	6018      	str	r0, [r3, #0]
 8002772:	7912      	ldrb	r2, [r2, #4]
 8002774:	711a      	strb	r2, [r3, #4]
            return true;
 8002776:	2301      	movs	r3, #1
 8002778:	e03b      	b.n	80027f2 <print_value+0x136>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff f873 	bl	8001868 <print_number>
 8002782:	4603      	mov	r3, r0
 8002784:	e035      	b.n	80027f2 <print_value+0x136>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <print_value+0xda>
            {
                return false;
 8002792:	2300      	movs	r3, #0
 8002794:	e02d      	b.n	80027f2 <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fd42 	bl	8000224 <strlen>
 80027a0:	4603      	mov	r3, r0
 80027a2:	3301      	adds	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	f7fe ff53 	bl	8001654 <ensure>
 80027ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <print_value+0xfe>
            {
                return false;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e01b      	b.n	80027f2 <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	4619      	mov	r1, r3
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f012 fe63 	bl	801548e <memcpy>
            return true;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e012      	b.n	80027f2 <print_value+0x136>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80027cc:	6839      	ldr	r1, [r7, #0]
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fd0e 	bl	80021f0 <print_string>
 80027d4:	4603      	mov	r3, r0
 80027d6:	e00c      	b.n	80027f2 <print_value+0x136>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8d8 	bl	8002990 <print_array>
 80027e0:	4603      	mov	r3, r0
 80027e2:	e006      	b.n	80027f2 <print_value+0x136>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa53 	bl	8002c92 <print_object>
 80027ec:	4603      	mov	r3, r0
 80027ee:	e000      	b.n	80027f2 <print_value+0x136>

        default:
            return false;
 80027f0:	2300      	movs	r3, #0
    }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	0801a1f4 	.word	0x0801a1f4
 8002800:	0801a220 	.word	0x0801a220
 8002804:	0801a228 	.word	0x0801a228

08002808 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002822:	d301      	bcc.n	8002828 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002824:	2300      	movs	r3, #0
 8002826:	e0af      	b.n	8002988 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b5b      	cmp	r3, #91	; 0x5b
 8002840:	f040 8094 	bne.w	800296c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f7ff fcde 	bl	8002210 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <parse_array+0x6e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d207      	bcs.n	8002876 <parse_array+0x6e>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b5d      	cmp	r3, #93	; 0x5d
 8002874:	d061      	beq.n	800293a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <parse_array+0x80>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d305      	bcc.n	8002894 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	609a      	str	r2, [r3, #8]
        goto fail;
 8002892:	e072      	b.n	800297a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	1e5a      	subs	r2, r3, #1
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	3310      	adds	r3, #16
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fd42 	bl	800132c <cJSON_New_Item>
 80028a8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05f      	beq.n	8002970 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	e007      	b.n	80028d0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	f7ff fc98 	bl	8002210 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	6938      	ldr	r0, [r7, #16]
 80028e4:	f7ff fdfe 	bl	80024e4 <parse_value>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d042      	beq.n	8002974 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	f7ff fc8e 	bl	8002210 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <parse_array+0x10e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d207      	bcs.n	8002916 <parse_array+0x10e>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b2c      	cmp	r3, #44	; 0x2c
 8002914:	d0c3      	beq.n	800289e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02d      	beq.n	8002978 <parse_array+0x170>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d227      	bcs.n	8002978 <parse_array+0x170>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b5d      	cmp	r3, #93	; 0x5d
 8002936:	d11f      	bne.n	8002978 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002938:	e000      	b.n	800293c <parse_array+0x134>
        goto success;
 800293a:	bf00      	nop
    input_buffer->depth--;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <parse_array+0x14a>
        head->prev = current_item;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	609a      	str	r2, [r3, #8]

    return true;
 8002968:	2301      	movs	r3, #1
 800296a:	e00d      	b.n	8002988 <parse_array+0x180>
        goto fail;
 800296c:	bf00      	nop
 800296e:	e004      	b.n	800297a <parse_array+0x172>
            goto fail; /* allocation failure */
 8002970:	bf00      	nop
 8002972:	e002      	b.n	800297a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <parse_array+0x172>

fail:
 8002978:	bf00      	nop
    if (head != NULL)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f7fe fce9 	bl	8001358 <cJSON_Delete>
    }

    return false;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <print_array+0x22>
    {
        return false;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e070      	b.n	8002a94 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80029b2:	2101      	movs	r1, #1
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f7fe fe4d 	bl	8001654 <ensure>
 80029ba:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <print_array+0x36>
    {
        return false;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e066      	b.n	8002a94 <print_array+0x104>
    }

    *output_pointer = '[';
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	225b      	movs	r2, #91	; 0x5b
 80029ca:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80029e0:	e03d      	b.n	8002a5e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	6938      	ldr	r0, [r7, #16]
 80029e6:	f7ff fe69 	bl	80026bc <print_value>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <print_array+0x64>
        {
            return false;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e04f      	b.n	8002a94 <print_array+0x104>
        }
        update_offset(output_buffer);
 80029f4:	6838      	ldr	r0, [r7, #0]
 80029f6:	f7fe feca 	bl	800178e <update_offset>
        if (current_element->next)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d02a      	beq.n	8002a58 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <print_array+0x7e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e000      	b.n	8002a10 <print_array+0x80>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3301      	adds	r3, #1
 8002a16:	4619      	mov	r1, r3
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	f7fe fe1b 	bl	8001654 <ensure>
 8002a1e:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <print_array+0x9a>
            {
                return false;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e034      	b.n	8002a94 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	617a      	str	r2, [r7, #20]
 8002a30:	222c      	movs	r2, #44	; 0x2c
 8002a32:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	617a      	str	r2, [r7, #20]
 8002a42:	2220      	movs	r2, #32
 8002a44:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	441a      	add	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1be      	bne.n	80029e2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002a64:	2102      	movs	r1, #2
 8002a66:	6838      	ldr	r0, [r7, #0]
 8002a68:	f7fe fdf4 	bl	8001654 <ensure>
 8002a6c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <print_array+0xe8>
    {
        return false;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e00d      	b.n	8002a94 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	617a      	str	r2, [r7, #20]
 8002a7e:	225d      	movs	r2, #93	; 0x5d
 8002a80:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	60da      	str	r2, [r3, #12]

    return true;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab6:	d301      	bcc.n	8002abc <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e0e6      	b.n	8002c8a <parse_object+0x1ee>
    }
    input_buffer->depth++;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80d0 	beq.w	8002c6e <parse_object+0x1d2>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f080 80c9 	bcs.w	8002c6e <parse_object+0x1d2>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b7b      	cmp	r3, #123	; 0x7b
 8002aea:	f040 80c0 	bne.w	8002c6e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002af8:	6838      	ldr	r0, [r7, #0]
 8002afa:	f7ff fb89 	bl	8002210 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00e      	beq.n	8002b22 <parse_object+0x86>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d208      	bcs.n	8002b22 <parse_object+0x86>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4413      	add	r3, r2
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b7d      	cmp	r3, #125	; 0x7d
 8002b1e:	f000 808d 	beq.w	8002c3c <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <parse_object+0x98>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d305      	bcc.n	8002b40 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	609a      	str	r2, [r3, #8]
        goto fail;
 8002b3e:	e09d      	b.n	8002c7c <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fbec 	bl	800132c <cJSON_New_Item>
 8002b54:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 808a 	beq.w	8002c72 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e007      	b.n	8002b7e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f7ff fb41 	bl	8002210 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	6938      	ldr	r0, [r7, #16]
 8002b92:	f7ff f889 	bl	8001ca8 <parse_string>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d06c      	beq.n	8002c76 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f7ff fb37 	bl	8002210 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d05b      	beq.n	8002c6e <parse_object+0x1d2>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d255      	bcs.n	8002c6e <parse_object+0x1d2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b3a      	cmp	r3, #58	; 0x3a
 8002bd0:	d14d      	bne.n	8002c6e <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002bdc:	6838      	ldr	r0, [r7, #0]
 8002bde:	f7ff fb17 	bl	8002210 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002be2:	6839      	ldr	r1, [r7, #0]
 8002be4:	6938      	ldr	r0, [r7, #16]
 8002be6:	f7ff fc7d 	bl	80024e4 <parse_value>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d044      	beq.n	8002c7a <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	f7ff fb0d 	bl	8002210 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <parse_object+0x17c>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d207      	bcs.n	8002c18 <parse_object+0x17c>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b2c      	cmp	r3, #44	; 0x2c
 8002c16:	d098      	beq.n	8002b4a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d027      	beq.n	8002c6e <parse_object+0x1d2>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d221      	bcs.n	8002c6e <parse_object+0x1d2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b7d      	cmp	r3, #125	; 0x7d
 8002c38:	d119      	bne.n	8002c6e <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 8002c3a:	e000      	b.n	8002c3e <parse_object+0x1a2>
        goto success; /* empty object */
 8002c3c:	bf00      	nop
    input_buffer->depth--;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	1e5a      	subs	r2, r3, #1
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <parse_object+0x1b8>
        head->prev = current_item;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	609a      	str	r2, [r3, #8]
    return true;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00d      	b.n	8002c8a <parse_object+0x1ee>

fail:
 8002c6e:	bf00      	nop
 8002c70:	e004      	b.n	8002c7c <parse_object+0x1e0>
            goto fail; /* allocation failure */
 8002c72:	bf00      	nop
 8002c74:	e002      	b.n	8002c7c <parse_object+0x1e0>
            goto fail; /* failed to parse name */
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 8002c7a:	bf00      	nop
    if (head != NULL)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <parse_object+0x1ec>
    {
        cJSON_Delete(head);
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7fe fb68 	bl	8001358 <cJSON_Delete>
    }

    return false;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b088      	sub	sp, #32
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <print_object+0x22>
    {
        return false;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e108      	b.n	8002ec6 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <print_object+0x2e>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e000      	b.n	8002cc2 <print_object+0x30>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6838      	ldr	r0, [r7, #0]
 8002ccc:	f7fe fcc2 	bl	8001654 <ensure>
 8002cd0:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <print_object+0x4a>
    {
        return false;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e0f4      	b.n	8002ec6 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	61fa      	str	r2, [r7, #28]
 8002ce2:	227b      	movs	r2, #123	; 0x7b
 8002ce4:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	61fa      	str	r2, [r7, #28]
 8002cfe:	220a      	movs	r2, #10
 8002d00:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	441a      	add	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002d0e:	e0a0      	b.n	8002e52 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d022      	beq.n	8002d5e <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f7fe fc98 	bl	8001654 <ensure>
 8002d24:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <print_object+0x9e>
            {
                return false;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e0ca      	b.n	8002ec6 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e007      	b.n	8002d46 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	61fa      	str	r2, [r7, #28]
 8002d3c:	2209      	movs	r2, #9
 8002d3e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d3f2      	bcc.n	8002d36 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	441a      	add	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff f94f 	bl	8002008 <print_string_ptr>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <print_object+0xe2>
        {
            return false;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e0a8      	b.n	8002ec6 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002d74:	6838      	ldr	r0, [r7, #0]
 8002d76:	f7fe fd0a 	bl	800178e <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <print_object+0xf4>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e000      	b.n	8002d88 <print_object+0xf6>
 8002d86:	2301      	movs	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002d8a:	68f9      	ldr	r1, [r7, #12]
 8002d8c:	6838      	ldr	r0, [r7, #0]
 8002d8e:	f7fe fc61 	bl	8001654 <ensure>
 8002d92:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <print_object+0x10c>
        {
            return false;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e093      	b.n	8002ec6 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	61fa      	str	r2, [r7, #28]
 8002da4:	223a      	movs	r2, #58	; 0x3a
 8002da6:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	61fa      	str	r2, [r7, #28]
 8002db6:	2209      	movs	r2, #9
 8002db8:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	441a      	add	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002dc6:	6839      	ldr	r1, [r7, #0]
 8002dc8:	69b8      	ldr	r0, [r7, #24]
 8002dca:	f7ff fc77 	bl	80026bc <print_value>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <print_object+0x146>
        {
            return false;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e076      	b.n	8002ec6 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002dd8:	6838      	ldr	r0, [r7, #0]
 8002dda:	f7fe fcd8 	bl	800178e <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <print_object+0x158>
 8002de6:	2201      	movs	r2, #1
 8002de8:	e000      	b.n	8002dec <print_object+0x15a>
 8002dea:	2200      	movs	r2, #0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <print_object+0x166>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <print_object+0x168>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3301      	adds	r3, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	f7fe fc25 	bl	8001654 <ensure>
 8002e0a:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <print_object+0x184>
        {
            return false;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e057      	b.n	8002ec6 <print_object+0x234>
        }
        if (current_item->next)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	61fa      	str	r2, [r7, #28]
 8002e24:	222c      	movs	r2, #44	; 0x2c
 8002e26:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	61fa      	str	r2, [r7, #28]
 8002e36:	220a      	movs	r2, #10
 8002e38:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	441a      	add	r2, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f af5b 	bne.w	8002d10 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <print_object+0x1d8>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	e000      	b.n	8002e6c <print_object+0x1da>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f7fe fbf0 	bl	8001654 <ensure>
 8002e74:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <print_object+0x1ee>
    {
        return false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e022      	b.n	8002ec6 <print_object+0x234>
    }
    if (output_buffer->format)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d010      	beq.n	8002eaa <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	e007      	b.n	8002e9e <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	61fa      	str	r2, [r7, #28]
 8002e94:	2209      	movs	r2, #9
 8002e96:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d3f1      	bcc.n	8002e8e <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	61fa      	str	r2, [r7, #28]
 8002eb0:	227d      	movs	r2, #125	; 0x7d
 8002eb2:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	60da      	str	r2, [r3, #12]

    return true;
 8002ec4:	2301      	movs	r3, #1
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <get_object_item+0x1c>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <get_object_item+0x20>
    {
        return NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e033      	b.n	8002f56 <get_object_item+0x88>
    }

    current_element = object->child;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002efa:	e002      	b.n	8002f02 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01c      	beq.n	8002f42 <get_object_item+0x74>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <get_object_item+0x74>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4619      	mov	r1, r3
 8002f16:	68b8      	ldr	r0, [r7, #8]
 8002f18:	f7fd f97a 	bl	8000210 <strcmp>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ec      	bne.n	8002efc <get_object_item+0x2e>
 8002f22:	e00e      	b.n	8002f42 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <get_object_item+0x74>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4619      	mov	r1, r3
 8002f36:	68b8      	ldr	r0, [r7, #8]
 8002f38:	f7fe f960 	bl	80011fc <case_insensitive_strcmp>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <get_object_item+0x82>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <get_object_item+0x86>
        return NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <get_object_item+0x88>
    }

    return current_element;
 8002f54:	697b      	ldr	r3, [r7, #20]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffae 	bl	8002ece <get_object_item>
 8002f72:	4603      	mov	r3, r0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	605a      	str	r2, [r3, #4]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <add_item_to_array+0x22>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <add_item_to_array+0x22>
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d101      	bne.n	8002fc4 <add_item_to_array+0x26>
    {
        return false;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e02e      	b.n	8003022 <add_item_to_array+0x84>
    }

    child = array->child;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e01d      	b.n	8003020 <add_item_to_array+0x82>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <add_item_to_array+0x6a>
        {
            suffix_object(child->prev, item);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffc2 	bl	8002f7c <suffix_object>
            array->child->prev = item;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e00e      	b.n	8003020 <add_item_to_array+0x82>
        }
        else
        {
            while (child->next)
            {
                child = child->next;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
            while (child->next)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f8      	bne.n	8003002 <add_item_to_array+0x64>
            }
            suffix_object(child, item);
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff ffb2 	bl	8002f7c <suffix_object>
            array->child->prev = item;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <add_item_to_object+0x30>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <add_item_to_object+0x30>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <add_item_to_object+0x30>
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d101      	bne.n	8003074 <add_item_to_object+0x34>
    {
        return false;
 8003070:	2300      	movs	r3, #0
 8003072:	e036      	b.n	80030e2 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800307a:	68b8      	ldr	r0, [r7, #8]
 800307c:	f7ff ffd5 	bl	800302a <cast_away_const>
 8003080:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e00e      	b.n	80030ac <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f7fe f923 	bl	80012dc <cJSON_strdup>
 8003096:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <add_item_to_object+0x62>
        {
            return false;
 800309e:	2300      	movs	r3, #0
 80030a0:	e01f      	b.n	80030e2 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030aa:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <add_item_to_object+0x8c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6a12      	ldr	r2, [r2, #32]
 80030c8:	4610      	mov	r0, r2
 80030ca:	4798      	blx	r3
    }

    item->string = new_key;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff5f 	bl	8002f9e <add_item_to_array>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <cJSON_AddItemToObject+0x28>)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff9c 	bl	8003040 <add_item_to_object>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003120:	480f      	ldr	r0, [pc, #60]	; (8003160 <cJSON_CreateString+0x48>)
 8003122:	f7fe f903 	bl	800132c <cJSON_New_Item>
 8003126:	60f8      	str	r0, [r7, #12]
    if(item)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2210      	movs	r2, #16
 8003132:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8003134:	490a      	ldr	r1, [pc, #40]	; (8003160 <cJSON_CreateString+0x48>)
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe f8d0 	bl	80012dc <cJSON_strdup>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7fe f904 	bl	8001358 <cJSON_Delete>
            return NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000

08003164 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800316a:	4807      	ldr	r0, [pc, #28]	; (8003188 <cJSON_CreateObject+0x24>)
 800316c:	f7fe f8de 	bl	800132c <cJSON_New_Item>
 8003170:	6078      	str	r0, [r7, #4]
    if (item)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800317e:	687b      	ldr	r3, [r7, #4]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000000 	.word	0x20000000

0800318c <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <cJSON_IsString+0x12>
    {
        return false;
 800319a:	2300      	movs	r3, #0
 800319c:	e007      	b.n	80031ae <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <cJSON_free+0x18>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000000 	.word	0x20000000

080031d8 <HAL_ETH_MspInit>:
  }

}

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4e      	ldr	r2, [pc, #312]	; (8003330 <HAL_ETH_MspInit+0x158>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	f040 8096 	bne.w	8003328 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031fc:	4b4d      	ldr	r3, [pc, #308]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003206:	6313      	str	r3, [r2, #48]	; 0x30
 8003208:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	623b      	str	r3, [r7, #32]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4a46      	ldr	r2, [pc, #280]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800321a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800321e:	6313      	str	r3, [r2, #48]	; 0x30
 8003220:	4b44      	ldr	r3, [pc, #272]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4a40      	ldr	r2, [pc, #256]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003232:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003236:	6313      	str	r3, [r2, #48]	; 0x30
 8003238:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003244:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6313      	str	r3, [r2, #48]	; 0x30
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6313      	str	r3, [r2, #48]	; 0x30
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003274:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	4a2e      	ldr	r2, [pc, #184]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	6313      	str	r3, [r2, #48]	; 0x30
 8003280:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4a28      	ldr	r2, [pc, #160]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 8003292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003296:	6313      	str	r3, [r2, #48]	; 0x30
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_ETH_MspInit+0x15c>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80032a4:	2332      	movs	r3, #50	; 0x32
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b0:	2303      	movs	r3, #3
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032b4:	230b      	movs	r3, #11
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032bc:	4619      	mov	r1, r3
 80032be:	481e      	ldr	r0, [pc, #120]	; (8003338 <HAL_ETH_MspInit+0x160>)
 80032c0:	f003 fba2 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032c4:	2386      	movs	r3, #134	; 0x86
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032d4:	230b      	movs	r3, #11
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	4619      	mov	r1, r3
 80032de:	4817      	ldr	r0, [pc, #92]	; (800333c <HAL_ETH_MspInit+0x164>)
 80032e0:	f003 fb92 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032f6:	230b      	movs	r3, #11
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fe:	4619      	mov	r1, r3
 8003300:	480f      	ldr	r0, [pc, #60]	; (8003340 <HAL_ETH_MspInit+0x168>)
 8003302:	f003 fb81 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003306:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003318:	230b      	movs	r3, #11
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	4619      	mov	r1, r3
 8003322:	4808      	ldr	r0, [pc, #32]	; (8003344 <HAL_ETH_MspInit+0x16c>)
 8003324:	f003 fb70 	bl	8006a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003328:	bf00      	nop
 800332a:	3738      	adds	r7, #56	; 0x38
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40028000 	.word	0x40028000
 8003334:	40023800 	.word	0x40023800
 8003338:	40020800 	.word	0x40020800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40021800 	.word	0x40021800

08003348 <MX_GPIO_Init>:
        * EXTI
     PA6   ------> S_TIM3_CH1
     PC7   ------> S_TIM3_CH2
*/
void MX_GPIO_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	; 0x30
 800334c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800335e:	4b60      	ldr	r3, [pc, #384]	; (80034e0 <MX_GPIO_Init+0x198>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a5f      	ldr	r2, [pc, #380]	; (80034e0 <MX_GPIO_Init+0x198>)
 8003364:	f043 0310 	orr.w	r3, r3, #16
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b5d      	ldr	r3, [pc, #372]	; (80034e0 <MX_GPIO_Init+0x198>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003376:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <MX_GPIO_Init+0x198>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a59      	ldr	r2, [pc, #356]	; (80034e0 <MX_GPIO_Init+0x198>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <MX_GPIO_Init+0x198>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800338e:	4b54      	ldr	r3, [pc, #336]	; (80034e0 <MX_GPIO_Init+0x198>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a53      	ldr	r2, [pc, #332]	; (80034e0 <MX_GPIO_Init+0x198>)
 8003394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <MX_GPIO_Init+0x198>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a4d      	ldr	r2, [pc, #308]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a47      	ldr	r2, [pc, #284]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d6:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033dc:	f043 0308 	orr.w	r3, r3, #8
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ee:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a3b      	ldr	r2, [pc, #236]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <MX_GPIO_Init+0x198>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003406:	2200      	movs	r2, #0
 8003408:	f244 0181 	movw	r1, #16513	; 0x4081
 800340c:	4835      	ldr	r0, [pc, #212]	; (80034e4 <MX_GPIO_Init+0x19c>)
 800340e:	f003 fca5 	bl	8006d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003412:	2200      	movs	r2, #0
 8003414:	2140      	movs	r1, #64	; 0x40
 8003416:	4834      	ldr	r0, [pc, #208]	; (80034e8 <MX_GPIO_Init+0x1a0>)
 8003418:	f003 fca0 	bl	8006d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800341c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003422:	4b32      	ldr	r3, [pc, #200]	; (80034ec <MX_GPIO_Init+0x1a4>)
 8003424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 031c 	add.w	r3, r7, #28
 800342e:	4619      	mov	r1, r3
 8003430:	482f      	ldr	r0, [pc, #188]	; (80034f0 <MX_GPIO_Init+0x1a8>)
 8003432:	f003 fae9 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800343e:	2302      	movs	r3, #2
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003442:	2302      	movs	r3, #2
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003446:	2302      	movs	r3, #2
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 031c 	add.w	r3, r7, #28
 800344e:	4619      	mov	r1, r3
 8003450:	4828      	ldr	r0, [pc, #160]	; (80034f4 <MX_GPIO_Init+0x1ac>)
 8003452:	f003 fad9 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003456:	f244 0381 	movw	r3, #16513	; 0x4081
 800345a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345c:	2301      	movs	r3, #1
 800345e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003468:	f107 031c 	add.w	r3, r7, #28
 800346c:	4619      	mov	r1, r3
 800346e:	481d      	ldr	r0, [pc, #116]	; (80034e4 <MX_GPIO_Init+0x19c>)
 8003470:	f003 faca 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003478:	2301      	movs	r3, #1
 800347a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003480:	2300      	movs	r3, #0
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003484:	f107 031c 	add.w	r3, r7, #28
 8003488:	4619      	mov	r1, r3
 800348a:	4817      	ldr	r0, [pc, #92]	; (80034e8 <MX_GPIO_Init+0x1a0>)
 800348c:	f003 fabc 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003494:	2300      	movs	r3, #0
 8003496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	4811      	ldr	r0, [pc, #68]	; (80034e8 <MX_GPIO_Init+0x1a0>)
 80034a4:	f003 fab0 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034b0:	2302      	movs	r3, #2
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	2302      	movs	r3, #2
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034b8:	2302      	movs	r3, #2
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4619      	mov	r1, r3
 80034c2:	480b      	ldr	r0, [pc, #44]	; (80034f0 <MX_GPIO_Init+0x1a8>)
 80034c4:	f003 faa0 	bl	8006a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	210f      	movs	r1, #15
 80034cc:	2028      	movs	r0, #40	; 0x28
 80034ce:	f002 face 	bl	8005a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034d2:	2028      	movs	r0, #40	; 0x28
 80034d4:	f002 fae7 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

}
 80034d8:	bf00      	nop
 80034da:	3730      	adds	r7, #48	; 0x30
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020400 	.word	0x40020400
 80034e8:	40021800 	.word	0x40021800
 80034ec:	10110000 	.word	0x10110000
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
	{


	}

}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10f      	bne.n	8003542 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if(direction==0)
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <HAL_TIM_PeriodElapsedCallback+0x28>
			counter_angle++;
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003534:	6013      	str	r3, [r2, #0]



	}

}
 8003536:	e004      	b.n	8003542 <HAL_TIM_PeriodElapsedCallback+0x32>
			counter_angle--;
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3b01      	subs	r3, #1
 800353e:	4a06      	ldr	r2, [pc, #24]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003540:	6013      	str	r3, [r2, #0]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40000800 	.word	0x40000800
 8003554:	200006a0 	.word	0x200006a0
 8003558:	200006ac 	.word	0x200006ac
 800355c:	00000000 	.word	0x00000000

08003560 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	uint16_t i,j=0;
 8003568:	2300      	movs	r3, #0
 800356a:	81bb      	strh	r3, [r7, #12]


  	capture_tim8_ccr1= TIM8->CCR1;
 800356c:	4b9e      	ldr	r3, [pc, #632]	; (80037e8 <HAL_ADCEx_InjectedConvCpltCallback+0x288>)
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	4a9e      	ldr	r2, [pc, #632]	; (80037ec <HAL_ADCEx_InjectedConvCpltCallback+0x28c>)
 8003572:	6013      	str	r3, [r2, #0]
  	capture_tim4_ccr1= TIM4->CCR1;
 8003574:	4b9e      	ldr	r3, [pc, #632]	; (80037f0 <HAL_ADCEx_InjectedConvCpltCallback+0x290>)
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	b29a      	uxth	r2, r3
 800357a:	4b9e      	ldr	r3, [pc, #632]	; (80037f4 <HAL_ADCEx_InjectedConvCpltCallback+0x294>)
 800357c:	801a      	strh	r2, [r3, #0]

  	speed=revolution_per_min/capture_tim8_ccr1;
 800357e:	4b9b      	ldr	r3, [pc, #620]	; (80037ec <HAL_ADCEx_InjectedConvCpltCallback+0x28c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fc ffee 	bl	8000564 <__aeabi_ui2d>
 8003588:	4603      	mov	r3, r0
 800358a:	460c      	mov	r4, r1
 800358c:	461a      	mov	r2, r3
 800358e:	4623      	mov	r3, r4
 8003590:	a191      	add	r1, pc, #580	; (adr r1, 80037d8 <HAL_ADCEx_InjectedConvCpltCallback+0x278>)
 8003592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003596:	f7fd f989 	bl	80008ac <__aeabi_ddiv>
 800359a:	4603      	mov	r3, r0
 800359c:	460c      	mov	r4, r1
 800359e:	4618      	mov	r0, r3
 80035a0:	4621      	mov	r1, r4
 80035a2:	f7fd fb51 	bl	8000c48 <__aeabi_d2f>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b93      	ldr	r3, [pc, #588]	; (80037f8 <HAL_ADCEx_InjectedConvCpltCallback+0x298>)
 80035aa:	601a      	str	r2, [r3, #0]

  	if(direction!=0)  // jeżeli
 80035ac:	4b93      	ldr	r3, [pc, #588]	; (80037fc <HAL_ADCEx_InjectedConvCpltCallback+0x29c>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <HAL_ADCEx_InjectedConvCpltCallback+0x66>
  		speed=-speed;
 80035b6:	4b90      	ldr	r3, [pc, #576]	; (80037f8 <HAL_ADCEx_InjectedConvCpltCallback+0x298>)
 80035b8:	edd3 7a00 	vldr	s15, [r3]
 80035bc:	eef1 7a67 	vneg.f32	s15, s15
 80035c0:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <HAL_ADCEx_InjectedConvCpltCallback+0x298>)
 80035c2:	edc3 7a00 	vstr	s15, [r3]

  	if((speed<120) && (speed>-120))
 80035c6:	4b8c      	ldr	r3, [pc, #560]	; (80037f8 <HAL_ADCEx_InjectedConvCpltCallback+0x298>)
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003800 <HAL_ADCEx_InjectedConvCpltCallback+0x2a0>
 80035d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	d50d      	bpl.n	80035f6 <HAL_ADCEx_InjectedConvCpltCallback+0x96>
 80035da:	4b87      	ldr	r3, [pc, #540]	; (80037f8 <HAL_ADCEx_InjectedConvCpltCallback+0x298>)
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003804 <HAL_ADCEx_InjectedConvCpltCallback+0x2a4>
 80035e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	dd03      	ble.n	80035f6 <HAL_ADCEx_InjectedConvCpltCallback+0x96>
  	 speed=0;
 80035ee:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_ADCEx_InjectedConvCpltCallback+0x298>)
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

 	if(counter_angle>=0)
 80035f6:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_ADCEx_InjectedConvCpltCallback+0x2a8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	db0d      	blt.n	800361a <HAL_ADCEx_InjectedConvCpltCallback+0xba>
	   angle=capture_tim4_ccr1 + (counter_angle * 720);
 80035fe:	4b7d      	ldr	r3, [pc, #500]	; (80037f4 <HAL_ADCEx_InjectedConvCpltCallback+0x294>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	4619      	mov	r1, r3
 8003606:	4b80      	ldr	r3, [pc, #512]	; (8003808 <HAL_ADCEx_InjectedConvCpltCallback+0x2a8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	440b      	add	r3, r1
 8003614:	4a7d      	ldr	r2, [pc, #500]	; (800380c <HAL_ADCEx_InjectedConvCpltCallback+0x2ac>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e00b      	b.n	8003632 <HAL_ADCEx_InjectedConvCpltCallback+0xd2>
	else
	   angle=-capture_tim4_ccr1 + (counter_angle * 720);
 800361a:	4b7b      	ldr	r3, [pc, #492]	; (8003808 <HAL_ADCEx_InjectedConvCpltCallback+0x2a8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a73      	ldr	r2, [pc, #460]	; (80037f4 <HAL_ADCEx_InjectedConvCpltCallback+0x294>)
 8003628:	8812      	ldrh	r2, [r2, #0]
 800362a:	b292      	uxth	r2, r2
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	4a77      	ldr	r2, [pc, #476]	; (800380c <HAL_ADCEx_InjectedConvCpltCallback+0x2ac>)
 8003630:	6013      	str	r3, [r2, #0]



	 adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003632:	2101      	movs	r1, #1
 8003634:	4876      	ldr	r0, [pc, #472]	; (8003810 <HAL_ADCEx_InjectedConvCpltCallback+0x2b0>)
 8003636:	f001 ff79 	bl	800552c <HAL_ADCEx_InjectedGetValue>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_ADCEx_InjectedConvCpltCallback+0x2b4>)
 8003640:	601a      	str	r2, [r3, #0]
   //while((hadc1.Instance->SR &= (0x1<<5))!=0){}
    adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003642:	2102      	movs	r1, #2
 8003644:	4872      	ldr	r0, [pc, #456]	; (8003810 <HAL_ADCEx_InjectedConvCpltCallback+0x2b0>)
 8003646:	f001 ff71 	bl	800552c <HAL_ADCEx_InjectedGetValue>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	4b72      	ldr	r3, [pc, #456]	; (8003818 <HAL_ADCEx_InjectedConvCpltCallback+0x2b8>)
 8003650:	601a      	str	r2, [r3, #0]
	//while((hadc1.Instance->SR &= (0x1<<5))!=0){}
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8003652:	2103      	movs	r1, #3
 8003654:	486e      	ldr	r0, [pc, #440]	; (8003810 <HAL_ADCEx_InjectedConvCpltCallback+0x2b0>)
 8003656:	f001 ff69 	bl	800552c <HAL_ADCEx_InjectedGetValue>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	4b6f      	ldr	r3, [pc, #444]	; (800381c <HAL_ADCEx_InjectedConvCpltCallback+0x2bc>)
 8003660:	601a      	str	r2, [r3, #0]


    if(count<5)
 8003662:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_ADCEx_InjectedConvCpltCallback+0x2c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	dc05      	bgt.n	8003676 <HAL_ADCEx_InjectedConvCpltCallback+0x116>
    {
    	count++;
 800366a:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <HAL_ADCEx_InjectedConvCpltCallback+0x2c0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	4a6b      	ldr	r2, [pc, #428]	; (8003820 <HAL_ADCEx_InjectedConvCpltCallback+0x2c0>)
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e0a9      	b.n	80037ca <HAL_ADCEx_InjectedConvCpltCallback+0x26a>
    }
    else if(count==5)
 8003676:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_ADCEx_InjectedConvCpltCallback+0x2c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d111      	bne.n	80036a2 <HAL_ADCEx_InjectedConvCpltCallback+0x142>
    {
    	 count++;
 800367e:	4b68      	ldr	r3, [pc, #416]	; (8003820 <HAL_ADCEx_InjectedConvCpltCallback+0x2c0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	4a66      	ldr	r2, [pc, #408]	; (8003820 <HAL_ADCEx_InjectedConvCpltCallback+0x2c0>)
 8003686:	6013      	str	r3, [r2, #0]
    	 adc_off_Ia=adc_Ia;
 8003688:	4b62      	ldr	r3, [pc, #392]	; (8003814 <HAL_ADCEx_InjectedConvCpltCallback+0x2b4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a65      	ldr	r2, [pc, #404]	; (8003824 <HAL_ADCEx_InjectedConvCpltCallback+0x2c4>)
 800368e:	6013      	str	r3, [r2, #0]
   	 	 adc_off_Ib=adc_Ib;
 8003690:	4b61      	ldr	r3, [pc, #388]	; (8003818 <HAL_ADCEx_InjectedConvCpltCallback+0x2b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a64      	ldr	r2, [pc, #400]	; (8003828 <HAL_ADCEx_InjectedConvCpltCallback+0x2c8>)
 8003696:	6013      	str	r3, [r2, #0]
   	 	 adc_off_Ic=adc_Ic;
 8003698:	4b60      	ldr	r3, [pc, #384]	; (800381c <HAL_ADCEx_InjectedConvCpltCallback+0x2bc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_ADCEx_InjectedConvCpltCallback+0x2cc>)
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e093      	b.n	80037ca <HAL_ADCEx_InjectedConvCpltCallback+0x26a>

    }
    else
    {
    	Ia=-(adc_Ia-adc_off_Ia)* 0.004355;
 80036a2:	4b60      	ldr	r3, [pc, #384]	; (8003824 <HAL_ADCEx_InjectedConvCpltCallback+0x2c4>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <HAL_ADCEx_InjectedConvCpltCallback+0x2b4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc ff69 	bl	8000584 <__aeabi_i2d>
 80036b2:	a34b      	add	r3, pc, #300	; (adr r3, 80037e0 <HAL_ADCEx_InjectedConvCpltCallback+0x280>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f7fc ffce 	bl	8000658 <__aeabi_dmul>
 80036bc:	4603      	mov	r3, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	4618      	mov	r0, r3
 80036c2:	4621      	mov	r1, r4
 80036c4:	f7fd fac0 	bl	8000c48 <__aeabi_d2f>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_ADCEx_InjectedConvCpltCallback+0x2d0>)
 80036cc:	601a      	str	r2, [r3, #0]
    	Ib=-(adc_Ib-adc_off_Ib)* 0.004355;
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <HAL_ADCEx_InjectedConvCpltCallback+0x2c8>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <HAL_ADCEx_InjectedConvCpltCallback+0x2b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff53 	bl	8000584 <__aeabi_i2d>
 80036de:	a340      	add	r3, pc, #256	; (adr r3, 80037e0 <HAL_ADCEx_InjectedConvCpltCallback+0x280>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fc ffb8 	bl	8000658 <__aeabi_dmul>
 80036e8:	4603      	mov	r3, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	4618      	mov	r0, r3
 80036ee:	4621      	mov	r1, r4
 80036f0:	f7fd faaa 	bl	8000c48 <__aeabi_d2f>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b4f      	ldr	r3, [pc, #316]	; (8003834 <HAL_ADCEx_InjectedConvCpltCallback+0x2d4>)
 80036f8:	601a      	str	r2, [r3, #0]
    	Ic=-(adc_Ic-adc_off_Ic)* 0.004355;
 80036fa:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_ADCEx_InjectedConvCpltCallback+0x2cc>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_ADCEx_InjectedConvCpltCallback+0x2bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc ff3d 	bl	8000584 <__aeabi_i2d>
 800370a:	a335      	add	r3, pc, #212	; (adr r3, 80037e0 <HAL_ADCEx_InjectedConvCpltCallback+0x280>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc ffa2 	bl	8000658 <__aeabi_dmul>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4618      	mov	r0, r3
 800371a:	4621      	mov	r1, r4
 800371c:	f7fd fa94 	bl	8000c48 <__aeabi_d2f>
 8003720:	4602      	mov	r2, r0
 8003722:	4b45      	ldr	r3, [pc, #276]	; (8003838 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 8003724:	601a      	str	r2, [r3, #0]

    	pomiar_Ia[0]=Ia;
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <HAL_ADCEx_InjectedConvCpltCallback+0x2d0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a44      	ldr	r2, [pc, #272]	; (800383c <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 800372c:	6013      	str	r3, [r2, #0]
    	pomiar_Ib[0]=Ib;
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_ADCEx_InjectedConvCpltCallback+0x2d4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a43      	ldr	r2, [pc, #268]	; (8003840 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 8003734:	6013      	str	r3, [r2, #0]
    	pomiar_Ic[0]=Ic;
 8003736:	4b40      	ldr	r3, [pc, #256]	; (8003838 <HAL_ADCEx_InjectedConvCpltCallback+0x2d8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a42      	ldr	r2, [pc, #264]	; (8003844 <HAL_ADCEx_InjectedConvCpltCallback+0x2e4>)
 800373c:	6013      	str	r3, [r2, #0]

    	while(i<(size_curr-1))
 800373e:	e023      	b.n	8003788 <HAL_ADCEx_InjectedConvCpltCallback+0x228>
    	{
    		j++;
 8003740:	89bb      	ldrh	r3, [r7, #12]
 8003742:	3301      	adds	r3, #1
 8003744:	81bb      	strh	r3, [r7, #12]
    		pomiar_Ia[j]=pomiar_Ia[i];
 8003746:	89fa      	ldrh	r2, [r7, #14]
 8003748:	89bb      	ldrh	r3, [r7, #12]
 800374a:	493c      	ldr	r1, [pc, #240]	; (800383c <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 800374c:	0092      	lsls	r2, r2, #2
 800374e:	440a      	add	r2, r1
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	493a      	ldr	r1, [pc, #232]	; (800383c <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	601a      	str	r2, [r3, #0]
    		pomiar_Ib[j]=pomiar_Ib[i];
 800375a:	89fa      	ldrh	r2, [r7, #14]
 800375c:	89bb      	ldrh	r3, [r7, #12]
 800375e:	4938      	ldr	r1, [pc, #224]	; (8003840 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	440a      	add	r2, r1
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	601a      	str	r2, [r3, #0]
    		pomiar_Ic[j]=pomiar_Ic[i];
 800376e:	89fa      	ldrh	r2, [r7, #14]
 8003770:	89bb      	ldrh	r3, [r7, #12]
 8003772:	4934      	ldr	r1, [pc, #208]	; (8003844 <HAL_ADCEx_InjectedConvCpltCallback+0x2e4>)
 8003774:	0092      	lsls	r2, r2, #2
 8003776:	440a      	add	r2, r1
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	4932      	ldr	r1, [pc, #200]	; (8003844 <HAL_ADCEx_InjectedConvCpltCallback+0x2e4>)
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	601a      	str	r2, [r3, #0]
    		i++;
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	3301      	adds	r3, #1
 8003786:	81fb      	strh	r3, [r7, #14]
    	while(i<(size_curr-1))
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	2b26      	cmp	r3, #38	; 0x26
 800378c:	d9d8      	bls.n	8003740 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>

    	}

    	limit++;
 800378e:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800379a:	801a      	strh	r2, [r3, #0]
    	if(limit>=size_curr)
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b27      	cmp	r3, #39	; 0x27
 80037a4:	d911      	bls.n	80037ca <HAL_ADCEx_InjectedConvCpltCallback+0x26a>
    	{
    		arm_rms_f322(pomiar_Ia, size_curr, &rms_Ia);
 80037a6:	4a29      	ldr	r2, [pc, #164]	; (800384c <HAL_ADCEx_InjectedConvCpltCallback+0x2ec>)
 80037a8:	2128      	movs	r1, #40	; 0x28
 80037aa:	4824      	ldr	r0, [pc, #144]	; (800383c <HAL_ADCEx_InjectedConvCpltCallback+0x2dc>)
 80037ac:	f007 fa23 	bl	800abf6 <arm_rms_f322>
    		arm_rms_f322(pomiar_Ib, size_curr, &rms_Ib);
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <HAL_ADCEx_InjectedConvCpltCallback+0x2f0>)
 80037b2:	2128      	movs	r1, #40	; 0x28
 80037b4:	4822      	ldr	r0, [pc, #136]	; (8003840 <HAL_ADCEx_InjectedConvCpltCallback+0x2e0>)
 80037b6:	f007 fa1e 	bl	800abf6 <arm_rms_f322>
    		arm_rms_f322(pomiar_Ic, size_curr, &rms_Ic);
 80037ba:	4a26      	ldr	r2, [pc, #152]	; (8003854 <HAL_ADCEx_InjectedConvCpltCallback+0x2f4>)
 80037bc:	2128      	movs	r1, #40	; 0x28
 80037be:	4821      	ldr	r0, [pc, #132]	; (8003844 <HAL_ADCEx_InjectedConvCpltCallback+0x2e4>)
 80037c0:	f007 fa19 	bl	800abf6 <arm_rms_f322>
    		limit=size_curr+1;
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_ADCEx_InjectedConvCpltCallback+0x2e8>)
 80037c6:	2229      	movs	r2, #41	; 0x29
 80037c8:	801a      	strh	r2, [r3, #0]


    }


  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80037ca:	4811      	ldr	r0, [pc, #68]	; (8003810 <HAL_ADCEx_InjectedConvCpltCallback+0x2b0>)
 80037cc:	f001 fdea 	bl	80053a4 <HAL_ADCEx_InjectedStart_IT>

}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	55555555 	.word	0x55555555
 80037dc:	41345855 	.word	0x41345855
 80037e0:	692f6e83 	.word	0x692f6e83
 80037e4:	3f71d68c 	.word	0x3f71d68c
 80037e8:	40010400 	.word	0x40010400
 80037ec:	20000750 	.word	0x20000750
 80037f0:	40000800 	.word	0x40000800
 80037f4:	20000824 	.word	0x20000824
 80037f8:	2000081c 	.word	0x2000081c
 80037fc:	200006a0 	.word	0x200006a0
 8003800:	42f00000 	.word	0x42f00000
 8003804:	c2f00000 	.word	0xc2f00000
 8003808:	200006ac 	.word	0x200006ac
 800380c:	20000760 	.word	0x20000760
 8003810:	200005f0 	.word	0x200005f0
 8003814:	20000758 	.word	0x20000758
 8003818:	20000694 	.word	0x20000694
 800381c:	20000820 	.word	0x20000820
 8003820:	20000778 	.word	0x20000778
 8003824:	200006a8 	.word	0x200006a8
 8003828:	20000774 	.word	0x20000774
 800382c:	20000680 	.word	0x20000680
 8003830:	2000068c 	.word	0x2000068c
 8003834:	20000754 	.word	0x20000754
 8003838:	20000764 	.word	0x20000764
 800383c:	2000077c 	.word	0x2000077c
 8003840:	200006b0 	.word	0x200006b0
 8003844:	2000082c 	.word	0x2000082c
 8003848:	20000688 	.word	0x20000688
 800384c:	200006a4 	.word	0x200006a4
 8003850:	20000690 	.word	0x20000690
 8003854:	20000828 	.word	0x20000828

08003858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800385c:	f001 f93b 	bl	8004ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003860:	f000 f864 	bl	800392c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003864:	f7ff fd70 	bl	8003348 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003868:	f000 ffb8 	bl	80047dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800386c:	f001 f880 	bl	8004970 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8003870:	f006 fe48 	bl	800a504 <MX_LWIP_Init>
  MX_TIM8_Init();
 8003874:	f000 fdc2 	bl	80043fc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003878:	f000 ff80 	bl	800477c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800387c:	f7fd fbb4 	bl	8000fe8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003880:	f000 fd14 	bl	80042ac <MX_TIM1_Init>
  MX_TIM9_Init();
 8003884:	f000 fe4a 	bl	800451c <MX_TIM9_Init>
  MX_TIM4_Init();
 8003888:	f000 fd64 	bl	8004354 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 800388c:	f000 f8f6 	bl	8003a7c <tcp_echoserver_init>



 TIM4->ARR=TIM4_ARR;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <main+0xb0>)
 8003892:	f240 529f 	movw	r2, #1439	; 0x59f
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
 TIM4->PSC=TIM4_PSC;
 8003898:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <main+0xb0>)
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
 HAL_TIM_Base_Start_IT(&htim4);
 800389e:	481b      	ldr	r0, [pc, #108]	; (800390c <main+0xb4>)
 80038a0:	f004 fcc6 	bl	8008230 <HAL_TIM_Base_Start_IT>
 HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_1);
 80038a4:	2100      	movs	r1, #0
 80038a6:	4819      	ldr	r0, [pc, #100]	; (800390c <main+0xb4>)
 80038a8:	f004 fddc 	bl	8008464 <HAL_TIM_Encoder_Start_IT>
 HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_2);
 80038ac:	2104      	movs	r1, #4
 80038ae:	4817      	ldr	r0, [pc, #92]	; (800390c <main+0xb4>)
 80038b0:	f004 fdd8 	bl	8008464 <HAL_TIM_Encoder_Start_IT>

 TIM8->PSC=TIM8_PSC;
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <main+0xb8>)
 80038b6:	2209      	movs	r2, #9
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
 TIM8->ARR=TIM8_ARR;
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <main+0xb8>)
 80038bc:	f64f 72db 	movw	r2, #65499	; 0xffdb
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
 HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);
 80038c2:	2100      	movs	r1, #0
 80038c4:	4813      	ldr	r0, [pc, #76]	; (8003914 <main+0xbc>)
 80038c6:	f004 fd13 	bl	80082f0 <HAL_TIM_IC_Start>

 TIM1->PSC=TIM1_PSC;
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <main+0xc0>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
 TIM1->ARR=TIM1_ARR;
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <main+0xc0>)
 80038d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
 HAL_TIM_Base_Start(&htim1);
 80038d8:	4810      	ldr	r0, [pc, #64]	; (800391c <main+0xc4>)
 80038da:	f004 fc7f 	bl	80081dc <HAL_TIM_Base_Start>
 HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 80038de:	2100      	movs	r1, #0
 80038e0:	480e      	ldr	r0, [pc, #56]	; (800391c <main+0xc4>)
 80038e2:	f004 fd05 	bl	80082f0 <HAL_TIM_IC_Start>


 HAL_ADCEx_InjectedStart_IT(&hadc1);
 80038e6:	480e      	ldr	r0, [pc, #56]	; (8003920 <main+0xc8>)
 80038e8:	f001 fd5c 	bl	80053a4 <HAL_ADCEx_InjectedStart_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <main+0xcc>)
 80038ee:	f007 f92d 	bl	800ab4c <ethernetif_input>
	      sys_check_timeouts();
 80038f2:	f00f f8af 	bl	8012a54 <sys_check_timeouts>

	    direction= (TIM4->CR1 & 0x10);
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <main+0xb0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <main+0xd0>)
 8003904:	701a      	strb	r2, [r3, #0]
	  ethernetif_input(&gnetif);
 8003906:	e7f1      	b.n	80038ec <main+0x94>
 8003908:	40000800 	.word	0x40000800
 800390c:	2000090c 	.word	0x2000090c
 8003910:	40010400 	.word	0x40010400
 8003914:	200008cc 	.word	0x200008cc
 8003918:	40010000 	.word	0x40010000
 800391c:	2000094c 	.word	0x2000094c
 8003920:	200005f0 	.word	0x200005f0
 8003924:	20000ed8 	.word	0x20000ed8
 8003928:	200006a0 	.word	0x200006a0

0800392c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b0b4      	sub	sp, #208	; 0xd0
 8003930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003932:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003936:	2230      	movs	r2, #48	; 0x30
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f011 fdcb 	bl	80154d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003940:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	2284      	movs	r2, #132	; 0x84
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f011 fdbc 	bl	80154d6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800395e:	f003 fb77 	bl	8007050 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <SystemClock_Config+0x134>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a3e      	ldr	r2, [pc, #248]	; (8003a60 <SystemClock_Config+0x134>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <SystemClock_Config+0x134>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800397a:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <SystemClock_Config+0x138>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003982:	4a38      	ldr	r2, [pc, #224]	; (8003a64 <SystemClock_Config+0x138>)
 8003984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <SystemClock_Config+0x138>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003996:	2301      	movs	r3, #1
 8003998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800399c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80039a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039a4:	2302      	movs	r3, #2
 80039a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039b2:	2304      	movs	r3, #4
 80039b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 160;
 80039b8:	23a0      	movs	r3, #160	; 0xa0
 80039ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039be:	2302      	movs	r3, #2
 80039c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80039c4:	2308      	movs	r3, #8
 80039c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 fb4e 	bl	8007070 <HAL_RCC_OscConfig>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80039da:	f000 f847 	bl	8003a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039de:	230f      	movs	r3, #15
 80039e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039e4:	2302      	movs	r3, #2
 80039e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a04:	2105      	movs	r1, #5
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 fdd6 	bl	80075b8 <HAL_RCC_ClockConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003a12:	f000 f82b 	bl	8003a6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <SystemClock_Config+0x13c>)
 8003a18:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003a1a:	23c0      	movs	r3, #192	; 0xc0
 8003a1c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003a22:	2302      	movs	r3, #2
 8003a24:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003a26:	2303      	movs	r3, #3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 ffae 	bl	80079a8 <HAL_RCCEx_PeriphCLKConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8003a52:	f000 f80b 	bl	8003a6c <Error_Handler>
  }
}
 8003a56:	bf00      	nop
 8003a58:	37d0      	adds	r7, #208	; 0xd0
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000
 8003a68:	00200180 	.word	0x00200180

08003a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <tcp_echoserver_init>:
 * @brief: Init echo server
 * @param: none
 * @ret: none
 */
void tcp_echoserver_init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Create new connection control block */
  tcp_echoserver_pcb = tcp_new();
 8003a80:	f00a fa2a 	bl	800ded8 <tcp_new>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003a88:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 8003a8a:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <tcp_echoserver_init+0x58>
  {
    if (tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, SERVER_TCP_PORT) == ERR_OK)
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f640 5205 	movw	r2, #3333	; 0xd05
 8003a9a:	4910      	ldr	r1, [pc, #64]	; (8003adc <tcp_echoserver_init+0x60>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f009 f97b 	bl	800cd98 <tcp_bind>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <tcp_echoserver_init+0x4c>
    {
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	21ff      	movs	r1, #255	; 0xff
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f009 fa2a 	bl	800cf08 <tcp_listen_with_backlog>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003ab8:	601a      	str	r2, [r3, #0]
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4908      	ldr	r1, [pc, #32]	; (8003ae0 <tcp_echoserver_init+0x64>)
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f00a fa89 	bl	800dfd8 <tcp_accept>
    {
      /* Set selected element free, clear all settings for it */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8003ac6:	e005      	b.n	8003ad4 <tcp_echoserver_init+0x58>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <tcp_echoserver_init+0x5c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f007 fdcc 	bl	800b66c <memp_free>
}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000470 	.word	0x20000470
 8003adc:	0801cda4 	.word	0x0801cda4
 8003ae0:	08003ae5 	.word	0x08003ae5

08003ae4 <tcp_echoserver_accept>:
 * @param  newpcb: pointer to new made connection
 * @param  err: not used
 * @retval err_t: error status
 */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  /* Unused arguments to prevent warnings */
  (void)arg;
  (void)err;

  /* Set priority for new connection */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8003af2:	2101      	movs	r1, #1
 8003af4:	68b8      	ldr	r0, [r7, #8]
 8003af6:	f009 fffd 	bl	800daf4 <tcp_setprio>

  /* allocate structure with info about tcp connection */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8003afa:	200c      	movs	r0, #12
 8003afc:	f007 fbfc 	bl	800b2f8 <mem_malloc>
 8003b00:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01f      	beq.n	8003b48 <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2200      	movs	r2, #0
 8003b18:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]

    /* Pass structure data do new connection */
    tcp_arg(newpcb, es);
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f00a f9e0 	bl	800dee8 <tcp_arg>

    /* prepare to receive data */
    tcp_recv(newpcb, tcp_echoserver_recv);
 8003b28:	490d      	ldr	r1, [pc, #52]	; (8003b60 <tcp_echoserver_accept+0x7c>)
 8003b2a:	68b8      	ldr	r0, [r7, #8]
 8003b2c:	f00a f9ee 	bl	800df0c <tcp_recv>

    /* if error ocure then tha t callback will be */
    tcp_err(newpcb, tcp_echoserver_error);
 8003b30:	490c      	ldr	r1, [pc, #48]	; (8003b64 <tcp_echoserver_accept+0x80>)
 8003b32:	68b8      	ldr	r0, [r7, #8]
 8003b34:	f00a fa2e 	bl	800df94 <tcp_err>

    /* waits for connection */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	490b      	ldr	r1, [pc, #44]	; (8003b68 <tcp_echoserver_accept+0x84>)
 8003b3c:	68b8      	ldr	r0, [r7, #8]
 8003b3e:	f00a fa63 	bl	800e008 <tcp_poll>

    ret_err = ERR_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
 8003b46:	e005      	b.n	8003b54 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /* Close connection */
    tcp_echoserver_connection_close(newpcb, es);
 8003b48:	6939      	ldr	r1, [r7, #16]
 8003b4a:	68b8      	ldr	r0, [r7, #8]
 8003b4c:	f000 fa5c 	bl	8004008 <tcp_echoserver_connection_close>
    /* return error */
    ret_err = ERR_MEM;
 8003b50:	23ff      	movs	r3, #255	; 0xff
 8003b52:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8003b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	08003b6d 	.word	0x08003b6d
 8003b64:	08003ca1 	.word	0x08003ca1
 8003b68:	08003cc5 	.word	0x08003cc5

08003b6c <tcp_echoserver_recv>:
 * @param  tpcb: pointer to connection data
 * @param  p: pointer to buffer that conteins data
 * @retval err_t: error status
 */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <tcp_echoserver_recv+0x20>
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <tcp_echoserver_recv+0x124>)
 8003b82:	22a2      	movs	r2, #162	; 0xa2
 8003b84:	4943      	ldr	r1, [pc, #268]	; (8003c94 <tcp_echoserver_recv+0x128>)
 8003b86:	4844      	ldr	r0, [pc, #272]	; (8003c98 <tcp_echoserver_recv+0x12c>)
 8003b88:	f012 fb94 	bl	80162b4 <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	61bb      	str	r3, [r7, #24]

  /* If buffer is empty */
  if (p == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d116      	bne.n	8003bc4 <tcp_echoserver_recv+0x58>
  {
    /* Close connection */
    es->state = ES_CLOSING;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <tcp_echoserver_recv+0x42>
    {
       /* Close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f000 fa2e 	bl	8004008 <tcp_echoserver_connection_close>
 8003bac:	e007      	b.n	8003bbe <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* Callback function used when data was received */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8003bae:	493b      	ldr	r1, [pc, #236]	; (8003c9c <tcp_echoserver_recv+0x130>)
 8003bb0:	68b8      	ldr	r0, [r7, #8]
 8003bb2:	f00a f9cd 	bl	800df50 <tcp_sent>

      /* Send data back to server */
      tcp_echoserver_send(tpcb, es);
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f000 f8db 	bl	8003d74 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e05f      	b.n	8003c84 <tcp_echoserver_recv+0x118>
  }
  else if(err != ERR_OK)
 8003bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <tcp_echoserver_recv+0x78>
  {
	/* Error occure, clear buffer  */
    if (p != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f008 fb41 	bl	800c260 <pbuf_free>
    }
    ret_err = err;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e04f      	b.n	8003c84 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d110      	bne.n	8003c0e <tcp_echoserver_recv+0xa2>
  {
	/* connection accept, first data received, chunk in p->payload */
    es->state = ES_RECEIVED;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* write data to structuce*/
    es->p = p;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]

    tcp_sent(tpcb, tcp_echoserver_sent);
 8003bf8:	4928      	ldr	r1, [pc, #160]	; (8003c9c <tcp_echoserver_recv+0x130>)
 8003bfa:	68b8      	ldr	r0, [r7, #8]
 8003bfc:	f00a f9a8 	bl	800df50 <tcp_sent>

    /* Send data */
    tcp_echoserver_send(tpcb, es);
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 f8b6 	bl	8003d74 <tcp_echoserver_send>

    ret_err = ERR_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e03a      	b.n	8003c84 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d115      	bne.n	8003c42 <tcp_echoserver_recv+0xd6>
  {
	/* All data received */
    if(es->p == NULL)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	609a      	str	r2, [r3, #8]

      tcp_echoserver_send(tpcb, es);
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	68b8      	ldr	r0, [r7, #8]
 8003c28:	f000 f8a4 	bl	8003d74 <tcp_echoserver_send>
 8003c2c:	e006      	b.n	8003c3c <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain two to the end of what we recv'ed previously */
      ptr = es->p;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f008 fc2a 	bl	800c490 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e020      	b.n	8003c84 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d10e      	bne.n	8003c68 <tcp_echoserver_recv+0xfc>
  {
    //odd case, remote side closing twice, free all trash data
    tcp_recved(tpcb, p->tot_len);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	891b      	ldrh	r3, [r3, #8]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	68b8      	ldr	r0, [r7, #8]
 8003c52:	f009 fa6f 	bl	800d134 <tcp_recved>
    es->p = NULL;
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f008 faff 	bl	800c260 <pbuf_free>
    ret_err = ERR_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e00d      	b.n	8003c84 <tcp_echoserver_recv+0x118>
  }
  else
  {
    //unkown es->state, trash data
    tcp_recved(tpcb, p->tot_len);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	891b      	ldrh	r3, [r3, #8]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f009 fa60 	bl	800d134 <tcp_recved>
    es->p = NULL;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f008 faf0 	bl	800c260 <pbuf_free>
    ret_err = ERR_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8003c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	0801a230 	.word	0x0801a230
 8003c94:	0801a254 	.word	0x0801a254
 8003c98:	0801a260 	.word	0x0801a260
 8003c9c:	08003d25 	.word	0x08003d25

08003ca0 <tcp_echoserver_error>:
 * @param  arg: pass structure data
 * @param  err: not used
 * @retval none
 */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  (void)err;

  es = (struct tcp_echoserver_struct *)arg;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <tcp_echoserver_error+0x1c>
  {
    /* free structure */
    mem_free(es);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f007 f9b8 	bl	800b02c <mem_free>
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <tcp_echoserver_poll>:
 * @param  arg: pass structure data
 * @param  tcp_pcb: pointer to data structure
 * @retval err_t: error status
 */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8003ce0:	490f      	ldr	r1, [pc, #60]	; (8003d20 <tcp_echoserver_poll+0x5c>)
 8003ce2:	6838      	ldr	r0, [r7, #0]
 8003ce4:	f00a f934 	bl	800df50 <tcp_sent>
      /* There is data in pbuf, chain try to send it */
      tcp_echoserver_send(tpcb, es);
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6838      	ldr	r0, [r7, #0]
 8003cec:	f000 f842 	bl	8003d74 <tcp_echoserver_send>
 8003cf0:	e007      	b.n	8003d02 <tcp_echoserver_poll+0x3e>
    }
    else
    {
       /* No data in chain */
      if(es->state == ES_CLOSING)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d103      	bne.n	8003d02 <tcp_echoserver_poll+0x3e>
      {
        /* Close connection */
        tcp_echoserver_connection_close(tpcb, es);
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f000 f983 	bl	8004008 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e004      	b.n	8003d12 <tcp_echoserver_poll+0x4e>
  }
  else
  {
	/* Aborts the connection by sending a RST (reset) segment to the remote host */
    tcp_abort(tpcb);
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	f009 f839 	bl	800cd80 <tcp_abort>
    ret_err = ERR_ABRT;
 8003d0e:	23f3      	movs	r3, #243	; 0xf3
 8003d10:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8003d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	08003d25 	.word	0x08003d25

08003d24 <tcp_echoserver_sent>:
 * @param  tcp_pcb: pointer to data structure
 * @param  len: data length
 * @retval err_t: error status
 */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  (void)len;

  es = (struct tcp_echoserver_struct *)arg;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <tcp_echoserver_sent+0x32>
  {
    /* data still in buffer */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8003d44:	490a      	ldr	r1, [pc, #40]	; (8003d70 <tcp_echoserver_sent+0x4c>)
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	f00a f902 	bl	800df50 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	68b8      	ldr	r0, [r7, #8]
 8003d50:	f000 f810 	bl	8003d74 <tcp_echoserver_send>
 8003d54:	e007      	b.n	8003d66 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* No data to send close connection */
    if(es->state == ES_CLOSING)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d103      	bne.n	8003d66 <tcp_echoserver_sent+0x42>
    {
      tcp_echoserver_connection_close(tpcb, es);
 8003d5e:	6979      	ldr	r1, [r7, #20]
 8003d60:	68b8      	ldr	r0, [r7, #8]
 8003d62:	f000 f951 	bl	8004008 <tcp_echoserver_connection_close>
    }
  }
  return ERR_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	08003d25 	.word	0x08003d25

08003d74 <tcp_echoserver_send>:
 * @retval err_t: error status
 */

#define USART_COPY 0
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b099      	sub	sp, #100	; 0x64
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
#if USART_COPY == 1
  char dane[256] = {0};
  char buffer[256] = {0};
#endif

  err_t wr_err = ERR_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  for(int i=0; i<sizee;i++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d88:	e007      	b.n	8003d9a <tcp_echoserver_send+0x26>
	  jstring[i]=0;
 8003d8a:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <tcp_echoserver_send+0x248>)
 8003d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d8e:	4413      	add	r3, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<sizee;i++)
 8003d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d96:	3301      	adds	r3, #1
 8003d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003da0:	dbf3      	blt.n	8003d8a <tcp_echoserver_send+0x16>

  /* tcp_sndbuf - returns number of bytes in space that is avaliable in output queue */
  while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 8003da2:	e0f5      	b.n	8003f90 <tcp_echoserver_send+0x21c>
  {
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	657b      	str	r3, [r7, #84]	; 0x54
     cJSON * root;
     cJSON * settings;
     cJSON *head;


     root = cJSON_Parse((char *)ptr->payload);
 8003daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fb56 	bl	8002460 <cJSON_Parse>
 8003db4:	6538      	str	r0, [r7, #80]	; 0x50
     settings = cJSON_GetObjectItemCaseSensitive(root, "settings");
 8003db6:	4982      	ldr	r1, [pc, #520]	; (8003fc0 <tcp_echoserver_send+0x24c>)
 8003db8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003dba:	f7ff f8d0 	bl	8002f5e <cJSON_GetObjectItemCaseSensitive>
 8003dbe:	64f8      	str	r0, [r7, #76]	; 0x4c



    sprintf(settings_allow, "%s",(char *)(cJSON_GetStringValue(settings)));
 8003dc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003dc2:	f7fd fa09 	bl	80011d8 <cJSON_GetStringValue>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4619      	mov	r1, r3
 8003dca:	487e      	ldr	r0, [pc, #504]	; (8003fc4 <tcp_echoserver_send+0x250>)
 8003dcc:	f012 fb6b 	bl	80164a6 <strcpy>
    sprintf(jstring, "%s",(char *)ptr->payload);
 8003dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4879      	ldr	r0, [pc, #484]	; (8003fbc <tcp_echoserver_send+0x248>)
 8003dd8:	f012 fb65 	bl	80164a6 <strcpy>


    if(settings_allow[0]=='t')
 8003ddc:	4b79      	ldr	r3, [pc, #484]	; (8003fc4 <tcp_echoserver_send+0x250>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b74      	cmp	r3, #116	; 0x74
 8003de4:	d105      	bne.n	8003df2 <tcp_echoserver_send+0x7e>
    	HAL_UART_Transmit_IT(&huart2, jstring, sizeof(jstring));
 8003de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dea:	4974      	ldr	r1, [pc, #464]	; (8003fbc <tcp_echoserver_send+0x248>)
 8003dec:	4876      	ldr	r0, [pc, #472]	; (8003fc8 <tcp_echoserver_send+0x254>)
 8003dee:	f005 fa7b 	bl	80092e8 <HAL_UART_Transmit_IT>
        char  rms_Ia_jstring[10];
        char  rms_Ib_jstring[10];
        char  rms_Ic_jstring[10];


       head = cJSON_CreateObject();
 8003df2:	f7ff f9b7 	bl	8003164 <cJSON_CreateObject>
 8003df6:	64b8      	str	r0, [r7, #72]	; 0x48
       sprintf(speed_jstring,"%4.1f",speed);
 8003df8:	4b74      	ldr	r3, [pc, #464]	; (8003fcc <tcp_echoserver_send+0x258>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fbd3 	bl	80005a8 <__aeabi_f2d>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	4970      	ldr	r1, [pc, #448]	; (8003fd0 <tcp_echoserver_send+0x25c>)
 8003e10:	f012 faba 	bl	8016388 <siprintf>
       sprintf(angle_jstring,"%d",angle);
 8003e14:	4b6f      	ldr	r3, [pc, #444]	; (8003fd4 <tcp_echoserver_send+0x260>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e1c:	496e      	ldr	r1, [pc, #440]	; (8003fd8 <tcp_echoserver_send+0x264>)
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f012 fab2 	bl	8016388 <siprintf>
       sprintf(rms_Ia_jstring,"%1.3f",rms_Ia);
 8003e24:	4b6d      	ldr	r3, [pc, #436]	; (8003fdc <tcp_echoserver_send+0x268>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc fbbd 	bl	80005a8 <__aeabi_f2d>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	f107 0020 	add.w	r0, r7, #32
 8003e36:	461a      	mov	r2, r3
 8003e38:	4623      	mov	r3, r4
 8003e3a:	4969      	ldr	r1, [pc, #420]	; (8003fe0 <tcp_echoserver_send+0x26c>)
 8003e3c:	f012 faa4 	bl	8016388 <siprintf>
       sprintf(rms_Ib_jstring,"%1.3f",rms_Ib);
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <tcp_echoserver_send+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fbaf 	bl	80005a8 <__aeabi_f2d>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	f107 0014 	add.w	r0, r7, #20
 8003e52:	461a      	mov	r2, r3
 8003e54:	4623      	mov	r3, r4
 8003e56:	4962      	ldr	r1, [pc, #392]	; (8003fe0 <tcp_echoserver_send+0x26c>)
 8003e58:	f012 fa96 	bl	8016388 <siprintf>
       sprintf(rms_Ic_jstring,"%1.3f",rms_Ic);
 8003e5c:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <tcp_echoserver_send+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fba1 	bl	80005a8 <__aeabi_f2d>
 8003e66:	4603      	mov	r3, r0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	f107 0008 	add.w	r0, r7, #8
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4623      	mov	r3, r4
 8003e72:	495b      	ldr	r1, [pc, #364]	; (8003fe0 <tcp_echoserver_send+0x26c>)
 8003e74:	f012 fa88 	bl	8016388 <siprintf>



       cJSON_AddItemToObject(head, "speed", cJSON_CreateString(speed_jstring));
 8003e78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f94b 	bl	8003118 <cJSON_CreateString>
 8003e82:	4603      	mov	r3, r0
 8003e84:	461a      	mov	r2, r3
 8003e86:	4959      	ldr	r1, [pc, #356]	; (8003fec <tcp_echoserver_send+0x278>)
 8003e88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e8a:	f7ff f92f 	bl	80030ec <cJSON_AddItemToObject>
       cJSON_AddItemToObject(head, "encoder", cJSON_CreateString(angle_jstring));
 8003e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff f940 	bl	8003118 <cJSON_CreateString>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4954      	ldr	r1, [pc, #336]	; (8003ff0 <tcp_echoserver_send+0x27c>)
 8003e9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ea0:	f7ff f924 	bl	80030ec <cJSON_AddItemToObject>
       cJSON_AddItemToObject(head, "rms_Ia", cJSON_CreateString(rms_Ia_jstring));
 8003ea4:	f107 0320 	add.w	r3, r7, #32
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff f935 	bl	8003118 <cJSON_CreateString>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4950      	ldr	r1, [pc, #320]	; (8003ff4 <tcp_echoserver_send+0x280>)
 8003eb4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003eb6:	f7ff f919 	bl	80030ec <cJSON_AddItemToObject>
       cJSON_AddItemToObject(head, "rms_Ib", cJSON_CreateString(rms_Ib_jstring));
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f92a 	bl	8003118 <cJSON_CreateString>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	494b      	ldr	r1, [pc, #300]	; (8003ff8 <tcp_echoserver_send+0x284>)
 8003eca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ecc:	f7ff f90e 	bl	80030ec <cJSON_AddItemToObject>
       cJSON_AddItemToObject(head, "rms_Ic", cJSON_CreateString(rms_Ic_jstring));
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff f91f 	bl	8003118 <cJSON_CreateString>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	4947      	ldr	r1, [pc, #284]	; (8003ffc <tcp_echoserver_send+0x288>)
 8003ee0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ee2:	f7ff f903 	bl	80030ec <cJSON_AddItemToObject>
       dd=cJSON_PrintPreallocated(head, jstring2, sizeof(jstring2),1 );
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eec:	4944      	ldr	r1, [pc, #272]	; (8004000 <tcp_echoserver_send+0x28c>)
 8003eee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ef0:	f7fe fac4 	bl	800247c <cJSON_PrintPreallocated>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b42      	ldr	r3, [pc, #264]	; (8004004 <tcp_echoserver_send+0x290>)
 8003efa:	601a      	str	r2, [r3, #0]


       cJSON_Delete(head);
 8003efc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003efe:	f7fd fa2b 	bl	8001358 <cJSON_Delete>

       wr_err = tcp_write(tpcb, jstring2, strlen(jstring2), 1);
 8003f02:	483f      	ldr	r0, [pc, #252]	; (8004000 <tcp_echoserver_send+0x28c>)
 8003f04:	f7fc f98e 	bl	8000224 <strlen>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	493c      	ldr	r1, [pc, #240]	; (8004000 <tcp_echoserver_send+0x28c>)
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f00c ff25 	bl	8010d60 <tcp_write>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f



     cJSON_Delete(head);
 8003f1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f1e:	f7fd fa1b 	bl	8001358 <cJSON_Delete>
     cJSON_Delete(root);
 8003f22:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003f24:	f7fd fa18 	bl	8001358 <cJSON_Delete>
     cJSON_free(head);
 8003f28:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f2a:	f7ff f947 	bl	80031bc <cJSON_free>
     cJSON_free(root);
 8003f2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003f30:	f7ff f944 	bl	80031bc <cJSON_free>
   // wr_err = tcp_write(tpcb, jstring2, strlen(rendered2), 1);

    /* Clear data */
   // memset(dane, 0x00, sizeof(dane));

    if (wr_err == ERR_OK)
 8003f34:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d121      	bne.n	8003f80 <tcp_echoserver_send+0x20c>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8003f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f3e:	895b      	ldrh	r3, [r3, #10]
 8003f40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8003f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <tcp_echoserver_send+0x1ea>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f008 fa21 	bl	800c3a0 <pbuf_ref>

      /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8003f5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003f60:	f008 f97e 	bl	800c260 <pbuf_free>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      }
      while(freed == 0);
 8003f6a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f5      	beq.n	8003f5e <tcp_echoserver_send+0x1ea>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8003f72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f009 f8db 	bl	800d134 <tcp_recved>
 8003f7e:	e007      	b.n	8003f90 <tcp_echoserver_send+0x21c>
   }
   else if(wr_err == ERR_MEM)
 8003f80:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d102      	bne.n	8003f90 <tcp_echoserver_send+0x21c>
   {
     /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f8e:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 8003f90:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10c      	bne.n	8003fb2 <tcp_echoserver_send+0x23e>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <tcp_echoserver_send+0x23e>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	895a      	ldrh	r2, [r3, #10]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003fac:	429a      	cmp	r2, r3
 8003fae:	f67f aef9 	bls.w	8003da4 <tcp_echoserver_send+0x30>
   }
   else { }
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3764      	adds	r7, #100	; 0x64
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000218 	.word	0x20000218
 8003fc0:	0801a288 	.word	0x0801a288
 8003fc4:	20000768 	.word	0x20000768
 8003fc8:	20000a4c 	.word	0x20000a4c
 8003fcc:	2000081c 	.word	0x2000081c
 8003fd0:	0801a294 	.word	0x0801a294
 8003fd4:	20000760 	.word	0x20000760
 8003fd8:	0801a29c 	.word	0x0801a29c
 8003fdc:	200006a4 	.word	0x200006a4
 8003fe0:	0801a2a0 	.word	0x0801a2a0
 8003fe4:	20000690 	.word	0x20000690
 8003fe8:	20000828 	.word	0x20000828
 8003fec:	0801a2a8 	.word	0x0801a2a8
 8003ff0:	0801a2b0 	.word	0x0801a2b0
 8003ff4:	0801a2b8 	.word	0x0801a2b8
 8003ff8:	0801a2c0 	.word	0x0801a2c0
 8003ffc:	0801a2c8 	.word	0x0801a2c8
 8004000:	20000344 	.word	0x20000344
 8004004:	2000075c 	.word	0x2000075c

08004008 <tcp_echoserver_connection_close>:
 * @param  *es: struct with data
 * @retval none
 */

static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  //remove all callbacks
  tcp_arg(tpcb, NULL);
 8004012:	2100      	movs	r1, #0
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f009 ff67 	bl	800dee8 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800401a:	2100      	movs	r1, #0
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f009 ff97 	bl	800df50 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8004022:	2100      	movs	r1, #0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f009 ff71 	bl	800df0c <tcp_recv>
  tcp_err(tpcb, NULL);
 800402a:	2100      	movs	r1, #0
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f009 ffb1 	bl	800df94 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f009 ffe6 	bl	800e008 <tcp_poll>

  /* free structure */
  if (es != NULL)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8004042:	6838      	ldr	r0, [r7, #0]
 8004044:	f006 fff2 	bl	800b02c <mem_free>
  }

  /* Connection close */
  tcp_close(tpcb);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f008 fdaf 	bl	800cbac <tcp_close>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_MspInit+0x44>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <HAL_MspInit+0x44>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_MspInit+0x44>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_MspInit+0x44>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_MspInit+0x44>)
 800407c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004080:	6453      	str	r3, [r2, #68]	; 0x44
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_MspInit+0x44>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800

080040a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040b2:	e7fe      	b.n	80040b2 <HardFault_Handler+0x4>

080040b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b8:	e7fe      	b.n	80040b8 <MemManage_Handler+0x4>

080040ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040be:	e7fe      	b.n	80040be <BusFault_Handler+0x4>

080040c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c4:	e7fe      	b.n	80040c4 <UsageFault_Handler+0x4>

080040c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f4:	f000 fd2c 	bl	8004b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f8:	bf00      	nop
 80040fa:	bd80      	pop	{r7, pc}

080040fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004100:	4802      	ldr	r0, [pc, #8]	; (800410c <ADC_IRQHandler+0x10>)
 8004102:	f000 fdab 	bl	8004c5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200005f0 	.word	0x200005f0

08004110 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <TIM4_IRQHandler+0x10>)
 8004116:	f004 f9fc 	bl	8008512 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000090c 	.word	0x2000090c

08004124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004128:	4802      	ldr	r0, [pc, #8]	; (8004134 <USART2_IRQHandler+0x10>)
 800412a:	f005 f939 	bl	80093a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000a4c 	.word	0x20000a4c

08004138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800413c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004140:	f002 fe26 	bl	8006d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}

08004148 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e00a      	b.n	8004170 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800415a:	f3af 8000 	nop.w
 800415e:	4601      	mov	r1, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	60ba      	str	r2, [r7, #8]
 8004166:	b2ca      	uxtb	r2, r1
 8004168:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	3301      	adds	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	dbf0      	blt.n	800415a <_read+0x12>
	}

return len;
 8004178:	687b      	ldr	r3, [r7, #4]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e009      	b.n	80041a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	60ba      	str	r2, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3301      	adds	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	dbf1      	blt.n	8004194 <_write+0x12>
	}
	return len;
 80041b0:	687b      	ldr	r3, [r7, #4]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_close>:

int _close(int file)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
	return -1;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041e2:	605a      	str	r2, [r3, #4]
	return 0;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <_isatty>:

int _isatty(int file)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
	return 1;
 80041fa:	2301      	movs	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
	return 0;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <_sbrk+0x50>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <_sbrk+0x16>
		heap_end = &end;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <_sbrk+0x50>)
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <_sbrk+0x54>)
 8004238:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <_sbrk+0x50>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <_sbrk+0x50>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4413      	add	r3, r2
 8004248:	466a      	mov	r2, sp
 800424a:	4293      	cmp	r3, r2
 800424c:	d905      	bls.n	800425a <_sbrk+0x36>
	{
		errno = ENOMEM;
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <_sbrk+0x58>)
 8004250:	220c      	movs	r2, #12
 8004252:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	e006      	b.n	8004268 <_sbrk+0x44>
	}

	heap_end += incr;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <_sbrk+0x50>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <_sbrk+0x50>)
 8004264:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004266:	68fb      	ldr	r3, [r7, #12]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	20000474 	.word	0x20000474
 8004278:	20007520 	.word	0x20007520
 800427c:	2000751c 	.word	0x2000751c

08004280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <SystemInit+0x28>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <SystemInit+0x28>)
 800428c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <SystemInit+0x28>)
 8004296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800429a:	609a      	str	r2, [r3, #8]
#endif
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <MX_TIM1_Init+0xa0>)
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <MX_TIM1_Init+0xa4>)
 80042ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042d0:	4b1e      	ldr	r3, [pc, #120]	; (800434c <MX_TIM1_Init+0xa0>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <MX_TIM1_Init+0xa0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80042dc:	4b1b      	ldr	r3, [pc, #108]	; (800434c <MX_TIM1_Init+0xa0>)
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e2:	4b1a      	ldr	r3, [pc, #104]	; (800434c <MX_TIM1_Init+0xa0>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042e8:	4b18      	ldr	r3, [pc, #96]	; (800434c <MX_TIM1_Init+0xa0>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <MX_TIM1_Init+0xa0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042f4:	4815      	ldr	r0, [pc, #84]	; (800434c <MX_TIM1_Init+0xa0>)
 80042f6:	f003 ff45 	bl	8008184 <HAL_TIM_Base_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004300:	f7ff fbb4 	bl	8003a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004308:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800430a:	f107 0310 	add.w	r3, r7, #16
 800430e:	4619      	mov	r1, r3
 8004310:	480e      	ldr	r0, [pc, #56]	; (800434c <MX_TIM1_Init+0xa0>)
 8004312:	f004 fab9 	bl	8008888 <HAL_TIM_ConfigClockSource>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800431c:	f7ff fba6 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004320:	2320      	movs	r3, #32
 8004322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8004324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004328:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4806      	ldr	r0, [pc, #24]	; (800434c <MX_TIM1_Init+0xa0>)
 8004334:	f004 fede 	bl	80090f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800433e:	f7ff fb95 	bl	8003a6c <Error_Handler>
  }

}
 8004342:	bf00      	nop
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	2000094c 	.word	0x2000094c
 8004350:	40010000 	.word	0x40010000

08004354 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	; 0x30
 8004358:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f011 f8b7 	bl	80154d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004368:	463b      	mov	r3, r7
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <MX_TIM4_Init+0xa0>)
 8004374:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <MX_TIM4_Init+0xa4>)
 8004376:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004378:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <MX_TIM4_Init+0xa0>)
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <MX_TIM4_Init+0xa0>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <MX_TIM4_Init+0xa0>)
 8004386:	2200      	movs	r2, #0
 8004388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <MX_TIM4_Init+0xa0>)
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <MX_TIM4_Init+0xa0>)
 8004392:	2200      	movs	r2, #0
 8004394:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004396:	2301      	movs	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043aa:	2300      	movs	r3, #0
 80043ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043ae:	2301      	movs	r3, #1
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043b2:	2300      	movs	r3, #0
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	4619      	mov	r1, r3
 80043c0:	480c      	ldr	r0, [pc, #48]	; (80043f4 <MX_TIM4_Init+0xa0>)
 80043c2:	f003 ffbd 	bl	8008340 <HAL_TIM_Encoder_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80043cc:	f7ff fb4e 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043d8:	463b      	mov	r3, r7
 80043da:	4619      	mov	r1, r3
 80043dc:	4805      	ldr	r0, [pc, #20]	; (80043f4 <MX_TIM4_Init+0xa0>)
 80043de:	f004 fe89 	bl	80090f4 <HAL_TIMEx_MasterConfigSynchronization>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80043e8:	f7ff fb40 	bl	8003a6c <Error_Handler>
  }

}
 80043ec:	bf00      	nop
 80043ee:	3730      	adds	r7, #48	; 0x30
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	2000090c 	.word	0x2000090c
 80043f8:	40000800 	.word	0x40000800

080043fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b090      	sub	sp, #64	; 0x40
 8004400:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004410:	f107 031c 	add.w	r3, r7, #28
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800442c:	463b      	mov	r3, r7
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8004438:	4b36      	ldr	r3, [pc, #216]	; (8004514 <MX_TIM8_Init+0x118>)
 800443a:	4a37      	ldr	r2, [pc, #220]	; (8004518 <MX_TIM8_Init+0x11c>)
 800443c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800443e:	4b35      	ldr	r3, [pc, #212]	; (8004514 <MX_TIM8_Init+0x118>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004444:	4b33      	ldr	r3, [pc, #204]	; (8004514 <MX_TIM8_Init+0x118>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800444a:	4b32      	ldr	r3, [pc, #200]	; (8004514 <MX_TIM8_Init+0x118>)
 800444c:	2200      	movs	r2, #0
 800444e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <MX_TIM8_Init+0x118>)
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004456:	4b2f      	ldr	r3, [pc, #188]	; (8004514 <MX_TIM8_Init+0x118>)
 8004458:	2200      	movs	r2, #0
 800445a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800445c:	4b2d      	ldr	r3, [pc, #180]	; (8004514 <MX_TIM8_Init+0x118>)
 800445e:	2200      	movs	r2, #0
 8004460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004462:	482c      	ldr	r0, [pc, #176]	; (8004514 <MX_TIM8_Init+0x118>)
 8004464:	f003 fe8e 	bl	8008184 <HAL_TIM_Base_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800446e:	f7ff fafd 	bl	8003a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800447c:	4619      	mov	r1, r3
 800447e:	4825      	ldr	r0, [pc, #148]	; (8004514 <MX_TIM8_Init+0x118>)
 8004480:	f004 fa02 	bl	8008888 <HAL_TIM_ConfigClockSource>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800448a:	f7ff faef 	bl	8003a6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800448e:	4821      	ldr	r0, [pc, #132]	; (8004514 <MX_TIM8_Init+0x118>)
 8004490:	f003 fef8 	bl	8008284 <HAL_TIM_IC_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800449a:	f7ff fae7 	bl	8003a6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800449e:	2304      	movs	r3, #4
 80044a0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80044a2:	2350      	movs	r3, #80	; 0x50
 80044a4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80044ae:	f107 031c 	add.w	r3, r7, #28
 80044b2:	4619      	mov	r1, r3
 80044b4:	4817      	ldr	r0, [pc, #92]	; (8004514 <MX_TIM8_Init+0x118>)
 80044b6:	f004 faa1 	bl	80089fc <HAL_TIM_SlaveConfigSynchro>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 80044c0:	f7ff fad4 	bl	8003a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044d0:	f107 0310 	add.w	r3, r7, #16
 80044d4:	4619      	mov	r1, r3
 80044d6:	480f      	ldr	r0, [pc, #60]	; (8004514 <MX_TIM8_Init+0x118>)
 80044d8:	f004 fe0c 	bl	80090f4 <HAL_TIMEx_MasterConfigSynchronization>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_TIM8_Init+0xea>
  {
    Error_Handler();
 80044e2:	f7ff fac3 	bl	8003a6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80044e6:	2300      	movs	r3, #0
 80044e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80044ea:	2301      	movs	r3, #1
 80044ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80044f6:	463b      	mov	r3, r7
 80044f8:	2200      	movs	r2, #0
 80044fa:	4619      	mov	r1, r3
 80044fc:	4805      	ldr	r0, [pc, #20]	; (8004514 <MX_TIM8_Init+0x118>)
 80044fe:	f004 f927 	bl	8008750 <HAL_TIM_IC_ConfigChannel>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004508:	f7ff fab0 	bl	8003a6c <Error_Handler>
  }

}
 800450c:	bf00      	nop
 800450e:	3740      	adds	r7, #64	; 0x40
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	200008cc 	.word	0x200008cc
 8004518:	40010400 	.word	0x40010400

0800451c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]

  htim9.Instance = TIM9;
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <MX_TIM9_Init+0x74>)
 8004532:	4a18      	ldr	r2, [pc, #96]	; (8004594 <MX_TIM9_Init+0x78>)
 8004534:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <MX_TIM9_Init+0x74>)
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <MX_TIM9_Init+0x74>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <MX_TIM9_Init+0x74>)
 8004544:	2200      	movs	r2, #0
 8004546:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <MX_TIM9_Init+0x74>)
 800454a:	2200      	movs	r2, #0
 800454c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <MX_TIM9_Init+0x74>)
 8004550:	2200      	movs	r2, #0
 8004552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004554:	480e      	ldr	r0, [pc, #56]	; (8004590 <MX_TIM9_Init+0x74>)
 8004556:	f003 fe15 	bl	8008184 <HAL_TIM_Base_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8004560:	f7ff fa84 	bl	8003a6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004564:	2307      	movs	r3, #7
 8004566:	607b      	str	r3, [r7, #4]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8004568:	2350      	movs	r3, #80	; 0x50
 800456a:	60bb      	str	r3, [r7, #8]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.TriggerFilter = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_SlaveConfigSynchro(&htim9, &sSlaveConfig) != HAL_OK)
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4805      	ldr	r0, [pc, #20]	; (8004590 <MX_TIM9_Init+0x74>)
 800457a:	f004 fa3f 	bl	80089fc <HAL_TIM_SlaveConfigSynchro>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM9_Init+0x6c>
  {
    Error_Handler();
 8004584:	f7ff fa72 	bl	8003a6c <Error_Handler>
  }

}
 8004588:	bf00      	nop
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000098c 	.word	0x2000098c
 8004594:	40014000 	.word	0x40014000

08004598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08e      	sub	sp, #56	; 0x38
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a45      	ldr	r2, [pc, #276]	; (80046cc <HAL_TIM_Base_MspInit+0x134>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d129      	bne.n	800460e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ba:	4b45      	ldr	r3, [pc, #276]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	4a44      	ldr	r2, [pc, #272]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6453      	str	r3, [r2, #68]	; 0x44
 80045c6:	4b42      	ldr	r3, [pc, #264]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	623b      	str	r3, [r7, #32]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045d2:	4b3f      	ldr	r3, [pc, #252]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a3e      	ldr	r2, [pc, #248]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 80045d8:	f043 0310 	orr.w	r3, r3, #16
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b3c      	ldr	r3, [pc, #240]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f0:	2302      	movs	r3, #2
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80045f4:	2302      	movs	r3, #2
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045f8:	2302      	movs	r3, #2
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045fc:	2301      	movs	r3, #1
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004604:	4619      	mov	r1, r3
 8004606:	4833      	ldr	r0, [pc, #204]	; (80046d4 <HAL_TIM_Base_MspInit+0x13c>)
 8004608:	f002 f9fe 	bl	8006a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800460c:	e05a      	b.n	80046c4 <HAL_TIM_Base_MspInit+0x12c>
  else if(tim_baseHandle->Instance==TIM8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <HAL_TIM_Base_MspInit+0x140>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d128      	bne.n	800466a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004618:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 800461e:	f043 0302 	orr.w	r3, r3, #2
 8004622:	6453      	str	r3, [r2, #68]	; 0x44
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	6313      	str	r3, [r2, #48]	; 0x30
 800463c:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004648:	2340      	movs	r3, #64	; 0x40
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464c:	2302      	movs	r3, #2
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004650:	2302      	movs	r3, #2
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004654:	2302      	movs	r3, #2
 8004656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004658:	2303      	movs	r3, #3
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004660:	4619      	mov	r1, r3
 8004662:	481e      	ldr	r0, [pc, #120]	; (80046dc <HAL_TIM_Base_MspInit+0x144>)
 8004664:	f002 f9d0 	bl	8006a08 <HAL_GPIO_Init>
}
 8004668:	e02c      	b.n	80046c4 <HAL_TIM_Base_MspInit+0x12c>
  else if(tim_baseHandle->Instance==TIM9)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <HAL_TIM_Base_MspInit+0x148>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d127      	bne.n	80046c4 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004674:	4b16      	ldr	r3, [pc, #88]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	6453      	str	r3, [r2, #68]	; 0x44
 8004680:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800468c:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 8004692:	f043 0310 	orr.w	r3, r3, #16
 8004696:	6313      	str	r3, [r2, #48]	; 0x30
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <HAL_TIM_Base_MspInit+0x138>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046a4:	2320      	movs	r3, #32
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a8:	2302      	movs	r3, #2
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046ac:	2302      	movs	r3, #2
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046b0:	2302      	movs	r3, #2
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80046b4:	2303      	movs	r3, #3
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046bc:	4619      	mov	r1, r3
 80046be:	4805      	ldr	r0, [pc, #20]	; (80046d4 <HAL_TIM_Base_MspInit+0x13c>)
 80046c0:	f002 f9a2 	bl	8006a08 <HAL_GPIO_Init>
}
 80046c4:	bf00      	nop
 80046c6:	3738      	adds	r7, #56	; 0x38
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d130      	bne.n	8004768 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_TIM_Encoder_MspInit+0x90>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <HAL_TIM_Encoder_MspInit+0x90>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <HAL_TIM_Encoder_MspInit+0x90>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_TIM_Encoder_MspInit+0x90>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a14      	ldr	r2, [pc, #80]	; (8004774 <HAL_TIM_Encoder_MspInit+0x90>)
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_TIM_Encoder_MspInit+0x90>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004736:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800473a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473c:	2302      	movs	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004740:	2302      	movs	r3, #2
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004744:	2302      	movs	r3, #2
 8004746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004748:	2302      	movs	r3, #2
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4619      	mov	r1, r3
 8004752:	4809      	ldr	r0, [pc, #36]	; (8004778 <HAL_TIM_Encoder_MspInit+0x94>)
 8004754:	f002 f958 	bl	8006a08 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004758:	2200      	movs	r2, #0
 800475a:	2101      	movs	r1, #1
 800475c:	201e      	movs	r0, #30
 800475e:	f001 f986 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004762:	201e      	movs	r0, #30
 8004764:	f001 f99f 	bl	8005aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004768:	bf00      	nop
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40000800 	.word	0x40000800
 8004774:	40023800 	.word	0x40023800
 8004778:	40020c00 	.word	0x40020c00

0800477c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <MX_USART2_UART_Init+0x5c>)
 8004784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 8004788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800478c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800478e:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 8004790:	2200      	movs	r2, #0
 8004792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 8004796:	2200      	movs	r2, #0
 8004798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 800479c:	2200      	movs	r2, #0
 800479e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 80047a2:	220c      	movs	r2, #12
 80047a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <MX_USART2_UART_Init+0x58>)
 80047c0:	f004 fd44 	bl	800924c <HAL_UART_Init>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80047ca:	f7ff f94f 	bl	8003a6c <Error_Handler>
  }

}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000a4c 	.word	0x20000a4c
 80047d8:	40004400 	.word	0x40004400

080047dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <MX_USART3_UART_Init+0x58>)
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <MX_USART3_UART_Init+0x5c>)
 80047e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <MX_USART3_UART_Init+0x58>)
 80047e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <MX_USART3_UART_Init+0x58>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <MX_USART3_UART_Init+0x58>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <MX_USART3_UART_Init+0x58>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <MX_USART3_UART_Init+0x58>)
 8004802:	220c      	movs	r2, #12
 8004804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <MX_USART3_UART_Init+0x58>)
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <MX_USART3_UART_Init+0x58>)
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <MX_USART3_UART_Init+0x58>)
 8004814:	2200      	movs	r2, #0
 8004816:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <MX_USART3_UART_Init+0x58>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800481e:	4805      	ldr	r0, [pc, #20]	; (8004834 <MX_USART3_UART_Init+0x58>)
 8004820:	f004 fd14 	bl	800924c <HAL_UART_Init>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800482a:	f7ff f91f 	bl	8003a6c <Error_Handler>
  }

}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200009cc 	.word	0x200009cc
 8004838:	40004800 	.word	0x40004800

0800483c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	; 0x30
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 031c 	add.w	r3, r7, #28
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a40      	ldr	r2, [pc, #256]	; (800495c <HAL_UART_MspInit+0x120>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d14c      	bne.n	80048f8 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a3f      	ldr	r2, [pc, #252]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_UART_MspInit+0x124>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004876:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a39      	ldr	r2, [pc, #228]	; (8004960 <HAL_UART_MspInit+0x124>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800488e:	4b34      	ldr	r3, [pc, #208]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a33      	ldr	r2, [pc, #204]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004894:	f043 0308 	orr.w	r3, r3, #8
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_UART_MspInit+0x124>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048a6:	2308      	movs	r3, #8
 80048a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b2:	2303      	movs	r3, #3
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048b6:	2307      	movs	r3, #7
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f107 031c 	add.w	r3, r7, #28
 80048be:	4619      	mov	r1, r3
 80048c0:	4828      	ldr	r0, [pc, #160]	; (8004964 <HAL_UART_MspInit+0x128>)
 80048c2:	f002 f8a1 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80048c6:	2320      	movs	r3, #32
 80048c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ca:	2302      	movs	r3, #2
 80048cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d2:	2303      	movs	r3, #3
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048d6:	2307      	movs	r3, #7
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048da:	f107 031c 	add.w	r3, r7, #28
 80048de:	4619      	mov	r1, r3
 80048e0:	4821      	ldr	r0, [pc, #132]	; (8004968 <HAL_UART_MspInit+0x12c>)
 80048e2:	f002 f891 	bl	8006a08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 80048e6:	2200      	movs	r2, #0
 80048e8:	2104      	movs	r1, #4
 80048ea:	2026      	movs	r0, #38	; 0x26
 80048ec:	f001 f8bf 	bl	8005a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048f0:	2026      	movs	r0, #38	; 0x26
 80048f2:	f001 f8d8 	bl	8005aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80048f6:	e02d      	b.n	8004954 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_UART_MspInit+0x130>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d128      	bne.n	8004954 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004902:	4b17      	ldr	r3, [pc, #92]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4a16      	ldr	r2, [pc, #88]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_UART_MspInit+0x124>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	6313      	str	r3, [r2, #48]	; 0x30
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <HAL_UART_MspInit+0x124>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004938:	2302      	movs	r3, #2
 800493a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004940:	2303      	movs	r3, #3
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004944:	2307      	movs	r3, #7
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004948:	f107 031c 	add.w	r3, r7, #28
 800494c:	4619      	mov	r1, r3
 800494e:	4806      	ldr	r0, [pc, #24]	; (8004968 <HAL_UART_MspInit+0x12c>)
 8004950:	f002 f85a 	bl	8006a08 <HAL_GPIO_Init>
}
 8004954:	bf00      	nop
 8004956:	3730      	adds	r7, #48	; 0x30
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40004400 	.word	0x40004400
 8004960:	40023800 	.word	0x40023800
 8004964:	40020000 	.word	0x40020000
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40004800 	.word	0x40004800

08004970 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004974:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004976:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800497a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800497e:	2206      	movs	r2, #6
 8004980:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004984:	2202      	movs	r2, #2
 8004986:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004990:	2202      	movs	r2, #2
 8004992:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004996:	2201      	movs	r2, #1
 8004998:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800499c:	2200      	movs	r2, #0
 800499e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80049a6:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80049b2:	4805      	ldr	r0, [pc, #20]	; (80049c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80049b4:	f002 fa04 	bl	8006dc0 <HAL_PCD_Init>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80049be:	f7ff f855 	bl	8003a6c <Error_Handler>
  }

}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000acc 	.word	0x20000acc

080049cc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d4:	f107 0314 	add.w	r3, r7, #20
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049ec:	d141      	bne.n	8004a72 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ee:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6313      	str	r3, [r2, #48]	; 0x30
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004a06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a14:	2303      	movs	r3, #3
 8004a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004a18:	230a      	movs	r3, #10
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1c:	f107 0314 	add.w	r3, r7, #20
 8004a20:	4619      	mov	r1, r3
 8004a22:	4817      	ldr	r0, [pc, #92]	; (8004a80 <HAL_PCD_MspInit+0xb4>)
 8004a24:	f001 fff0 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4810      	ldr	r0, [pc, #64]	; (8004a80 <HAL_PCD_MspInit+0xb4>)
 8004a3e:	f001 ffe3 	bl	8006a08 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 8004a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a46:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	6353      	str	r3, [r2, #52]	; 0x34
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 8004a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a64:	6453      	str	r3, [r2, #68]	; 0x44
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_PCD_MspInit+0xb0>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004a72:	bf00      	nop
 8004a74:	3728      	adds	r7, #40	; 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40020000 	.word	0x40020000

08004a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a8a:	e003      	b.n	8004a94 <LoopCopyDataInit>

08004a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a92:	3104      	adds	r1, #4

08004a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a94:	480b      	ldr	r0, [pc, #44]	; (8004ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a9c:	d3f6      	bcc.n	8004a8c <CopyDataInit>
  ldr  r2, =_sbss
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004aa0:	e002      	b.n	8004aa8 <LoopFillZerobss>

08004aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004aa4:	f842 3b04 	str.w	r3, [r2], #4

08004aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004aac:	d3f9      	bcc.n	8004aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004aae:	f7ff fbe7 	bl	8004280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ab2:	f010 fc85 	bl	80153c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ab6:	f7fe fecf 	bl	8003858 <main>
  bx  lr    
 8004aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004abc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004ac0:	0801d100 	.word	0x0801d100
  ldr  r0, =_sdata
 8004ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ac8:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8004acc:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8004ad0:	20007520 	.word	0x20007520

08004ad4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ad4:	e7fe      	b.n	8004ad4 <CAN1_RX0_IRQHandler>

08004ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ada:	2003      	movs	r0, #3
 8004adc:	f000 ffbc 	bl	8005a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f000 f805 	bl	8004af0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004ae6:	f7ff fab7 	bl	8004058 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_InitTick+0x54>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_InitTick+0x58>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 ffd7 	bl	8005ac2 <HAL_SYSTICK_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00e      	b.n	8004b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b0f      	cmp	r3, #15
 8004b22:	d80a      	bhi.n	8004b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b24:	2200      	movs	r2, #0
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	f000 ff9f 	bl	8005a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b30:	4a06      	ldr	r2, [pc, #24]	; (8004b4c <HAL_InitTick+0x5c>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	2000000c 	.word	0x2000000c
 8004b48:	20000014 	.word	0x20000014
 8004b4c:	20000010 	.word	0x20000010

08004b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_IncTick+0x20>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_IncTick+0x24>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4413      	add	r3, r2
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <HAL_IncTick+0x24>)
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20000014 	.word	0x20000014
 8004b74:	20000ed0 	.word	0x20000ed0

08004b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_GetTick+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000ed0 	.word	0x20000ed0

08004b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b98:	f7ff ffee 	bl	8004b78 <HAL_GetTick>
 8004b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d005      	beq.n	8004bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004baa:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <HAL_Delay+0x40>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bb6:	bf00      	nop
 8004bb8:	f7ff ffde 	bl	8004b78 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d8f7      	bhi.n	8004bb8 <HAL_Delay+0x28>
  {
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000014 	.word	0x20000014

08004bd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e031      	b.n	8004c4e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d109      	bne.n	8004c06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc fa8e 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d116      	bne.n	8004c40 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <HAL_ADC_Init+0x84>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	f043 0202 	orr.w	r2, r3, #2
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fac4 	bl	80051b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3e:	e001      	b.n	8004c44 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	ffffeefd 	.word	0xffffeefd

08004c5c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d049      	beq.n	8004d32 <HAL_ADC_IRQHandler+0xd6>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d046      	beq.n	8004d32 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d12b      	bne.n	8004d22 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d127      	bne.n	8004d22 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d119      	bne.n	8004d22 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0220 	bic.w	r2, r2, #32
 8004cfc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f8db 	bl	8004ede <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0212 	mvn.w	r2, #18
 8004d30:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d057      	beq.n	8004e14 <HAL_ADC_IRQHandler+0x1b8>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d054      	beq.n	8004e14 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d105      	bne.n	8004d82 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d139      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d12b      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d124      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11d      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d119      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fe fbab 	bl	8003560 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f06f 020c 	mvn.w	r2, #12
 8004e12:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <HAL_ADC_IRQHandler+0x21a>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d014      	beq.n	8004e76 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d10d      	bne.n	8004e76 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f843 	bl	8004ef2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0201 	mvn.w	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d015      	beq.n	8004ed6 <HAL_ADC_IRQHandler+0x27a>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d012      	beq.n	8004ed6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	f043 0202 	orr.w	r2, r3, #2
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0220 	mvn.w	r2, #32
 8004ec4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f81d 	bl	8004f06 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0220 	mvn.w	r2, #32
 8004ed4:	601a      	str	r2, [r3, #0]
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e12a      	b.n	800518e <HAL_ADC_ConfigChannel+0x272>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b09      	cmp	r3, #9
 8004f46:	d93a      	bls.n	8004fbe <HAL_ADC_ConfigChannel+0xa2>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f50:	d035      	beq.n	8004fbe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68d9      	ldr	r1, [r3, #12]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	3b1e      	subs	r3, #30
 8004f68:	2207      	movs	r2, #7
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	400a      	ands	r2, r1
 8004f76:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a87      	ldr	r2, [pc, #540]	; (800519c <HAL_ADC_ConfigChannel+0x280>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10a      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68d9      	ldr	r1, [r3, #12]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	061a      	lsls	r2, r3, #24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f96:	e035      	b.n	8005004 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68d9      	ldr	r1, [r3, #12]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4403      	add	r3, r0
 8004fb0:	3b1e      	subs	r3, #30
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fbc:	e022      	b.n	8005004 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6919      	ldr	r1, [r3, #16]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	2207      	movs	r2, #7
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43da      	mvns	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	400a      	ands	r2, r1
 8004fe0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6919      	ldr	r1, [r3, #16]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4403      	add	r3, r0
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b06      	cmp	r3, #6
 800500a:	d824      	bhi.n	8005056 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	3b05      	subs	r3, #5
 800501e:	221f      	movs	r2, #31
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	43da      	mvns	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	400a      	ands	r2, r1
 800502c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	4618      	mov	r0, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	3b05      	subs	r3, #5
 8005048:	fa00 f203 	lsl.w	r2, r0, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	635a      	str	r2, [r3, #52]	; 0x34
 8005054:	e04c      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d824      	bhi.n	80050a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	3b23      	subs	r3, #35	; 0x23
 8005070:	221f      	movs	r2, #31
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	400a      	ands	r2, r1
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	4618      	mov	r0, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	3b23      	subs	r3, #35	; 0x23
 800509a:	fa00 f203 	lsl.w	r2, r0, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
 80050a6:	e023      	b.n	80050f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	3b41      	subs	r3, #65	; 0x41
 80050ba:	221f      	movs	r2, #31
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	43da      	mvns	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	400a      	ands	r2, r1
 80050c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4618      	mov	r0, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	3b41      	subs	r3, #65	; 0x41
 80050e4:	fa00 f203 	lsl.w	r2, r0, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_ADC_ConfigChannel+0x284>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10a      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1f4>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005102:	d105      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <HAL_ADC_ConfigChannel+0x288>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <HAL_ADC_ConfigChannel+0x288>)
 800510a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800510e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a22      	ldr	r2, [pc, #136]	; (80051a0 <HAL_ADC_ConfigChannel+0x284>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d109      	bne.n	800512e <HAL_ADC_ConfigChannel+0x212>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b12      	cmp	r3, #18
 8005120:	d105      	bne.n	800512e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_ADC_ConfigChannel+0x288>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_ADC_ConfigChannel+0x288>)
 8005128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800512c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_ADC_ConfigChannel+0x284>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d125      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x268>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_ADC_ConfigChannel+0x280>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <HAL_ADC_ConfigChannel+0x22e>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b11      	cmp	r3, #17
 8005148:	d11c      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800514a:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <HAL_ADC_ConfigChannel+0x288>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <HAL_ADC_ConfigChannel+0x288>)
 8005150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005154:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <HAL_ADC_ConfigChannel+0x280>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_ADC_ConfigChannel+0x28c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a11      	ldr	r2, [pc, #68]	; (80051ac <HAL_ADC_ConfigChannel+0x290>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	0c9a      	lsrs	r2, r3, #18
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005176:	e002      	b.n	800517e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b01      	subs	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f9      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	10000012 	.word	0x10000012
 80051a0:	40012000 	.word	0x40012000
 80051a4:	40012300 	.word	0x40012300
 80051a8:	2000000c 	.word	0x2000000c
 80051ac:	431bde83 	.word	0x431bde83

080051b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80051b8:	4b78      	ldr	r3, [pc, #480]	; (800539c <ADC_Init+0x1ec>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a77      	ldr	r2, [pc, #476]	; (800539c <ADC_Init+0x1ec>)
 80051be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80051c4:	4b75      	ldr	r3, [pc, #468]	; (800539c <ADC_Init+0x1ec>)
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4973      	ldr	r1, [pc, #460]	; (800539c <ADC_Init+0x1ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6859      	ldr	r1, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6859      	ldr	r1, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	4a58      	ldr	r2, [pc, #352]	; (80053a0 <ADC_Init+0x1f0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005252:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6899      	ldr	r1, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	609a      	str	r2, [r3, #8]
 8005288:	e00f      	b.n	80052aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0202 	bic.w	r2, r2, #2
 80052b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6899      	ldr	r1, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	005a      	lsls	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	3b01      	subs	r3, #1
 8005304:	035a      	lsls	r2, r3, #13
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	e007      	b.n	8005320 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800531e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	3b01      	subs	r3, #1
 800533c:	051a      	lsls	r2, r3, #20
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005362:	025a      	lsls	r2, r3, #9
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6899      	ldr	r1, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	029a      	lsls	r2, r3, #10
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40012300 	.word	0x40012300
 80053a0:	0f000001 	.word	0x0f000001

080053a4 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp1 = 0, tmp2 = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_ADCEx_InjectedStart_IT+0x22>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e0a1      	b.n	800550a <HAL_ADCEx_InjectedStart_IT+0x166>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d018      	beq.n	800540e <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80053ec:	4b4a      	ldr	r3, [pc, #296]	; (8005518 <HAL_ADCEx_InjectedStart_IT+0x174>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a4a      	ldr	r2, [pc, #296]	; (800551c <HAL_ADCEx_InjectedStart_IT+0x178>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0c9a      	lsrs	r2, r3, #18
 80053f8:	4613      	mov	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	4413      	add	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005400:	e002      	b.n	8005408 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b01      	subs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f9      	bne.n	8005402 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d175      	bne.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005420:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <HAL_ADCEx_InjectedStart_IT+0x17c>)
 8005422:	4013      	ands	r3, r2
 8005424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <HAL_ADCEx_InjectedStart_IT+0x9a>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0204 	mvn.w	r2, #4
 800544e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800545e:	605a      	str	r2, [r3, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <HAL_ADCEx_InjectedStart_IT+0x180>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2b00      	cmp	r3, #0
 800546a:	d124      	bne.n	80054b6 <HAL_ADCEx_InjectedStart_IT+0x112>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d034      	beq.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d031      	beq.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80054b2:	609a      	str	r2, [r3, #8]
 80054b4:	e028      	b.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a10      	ldr	r2, [pc, #64]	; (8005528 <HAL_ADCEx_InjectedStart_IT+0x184>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10d      	bne.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_ADCEx_InjectedStart_IT+0x164>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005506:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	2000000c 	.word	0x2000000c
 800551c:	431bde83 	.word	0x431bde83
 8005520:	ffffcffe 	.word	0xffffcffe
 8005524:	40012300 	.word	0x40012300
 8005528:	40012000 	.word	0x40012000

0800552c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0204 	mvn.w	r2, #4
 8005542:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	3b01      	subs	r3, #1
 8005548:	2b03      	cmp	r3, #3
 800554a:	d81f      	bhi.n	800558c <HAL_ADCEx_InjectedGetValue+0x60>
 800554c:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_ADCEx_InjectedGetValue+0x28>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005583 	.word	0x08005583
 8005558:	08005579 	.word	0x08005579
 800555c:	0800556f 	.word	0x0800556f
 8005560:	08005565 	.word	0x08005565
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800556c:	e00f      	b.n	800558e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005574:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005576:	e00a      	b.n	800558e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005580:	e005      	b.n	800558e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005588:	60fb      	str	r3, [r7, #12]
    }
    break;
 800558a:	e000      	b.n	800558e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 800558c:	bf00      	nop
  }
  return tmp;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e171      	b.n	8005898 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b09      	cmp	r3, #9
 80055c2:	d925      	bls.n	8005610 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	4613      	mov	r3, r2
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	4413      	add	r3, r2
 80055d8:	3b1e      	subs	r3, #30
 80055da:	2207      	movs	r2, #7
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43da      	mvns	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	400a      	ands	r2, r1
 80055e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68d9      	ldr	r1, [r3, #12]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	4618      	mov	r0, r3
 80055fc:	4603      	mov	r3, r0
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	4403      	add	r3, r0
 8005602:	3b1e      	subs	r3, #30
 8005604:	409a      	lsls	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	e022      	b.n	8005656 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6919      	ldr	r1, [r3, #16]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	4613      	mov	r3, r2
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4413      	add	r3, r2
 8005624:	2207      	movs	r2, #7
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	400a      	ands	r2, r1
 8005632:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6919      	ldr	r1, [r3, #16]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	4618      	mov	r0, r3
 8005646:	4603      	mov	r3, r0
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	4403      	add	r3, r0
 800564c:	409a      	lsls	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	3b01      	subs	r3, #1
 8005672:	051a      	lsls	r2, r3, #20
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	b2db      	uxtb	r3, r3
 8005692:	3303      	adds	r3, #3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	4613      	mov	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	221f      	movs	r2, #31
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43da      	mvns	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	400a      	ands	r2, r1
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4618      	mov	r0, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	3303      	adds	r3, #3
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	fa00 f203 	lsl.w	r2, r0, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4a6e      	ldr	r2, [pc, #440]	; (80058a4 <HAL_ADCEx_InjectedConfigChannel+0x308>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80056fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6899      	ldr	r1, [r3, #8]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800571e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]
 8005732:	e00f      	b.n	8005754 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005742:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005752:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	7d5b      	ldrb	r3, [r3, #21]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	e007      	b.n	800577e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800577c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	7d1b      	ldrb	r3, [r3, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e007      	b.n	80057a8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057a6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d015      	beq.n	80057dc <HAL_ADCEx_InjectedConfigChannel+0x240>
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d025      	beq.n	8005800 <HAL_ADCEx_InjectedConfigChannel+0x264>
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d135      	bne.n	8005824 <HAL_ADCEx_InjectedConfigChannel+0x288>
  {
    case 1:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6959      	ldr	r1, [r3, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 80057c4:	400b      	ands	r3, r1
 80057c6:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6959      	ldr	r1, [r3, #20]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	615a      	str	r2, [r3, #20]
      break;
 80057da:	e035      	b.n	8005848 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    case 2:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 80057e8:	400b      	ands	r3, r1
 80057ea:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	619a      	str	r2, [r3, #24]
      break;
 80057fe:	e023      	b.n	8005848 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    case 3:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69d9      	ldr	r1, [r3, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b27      	ldr	r3, [pc, #156]	; (80058a8 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 800580c:	400b      	ands	r3, r1
 800580e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69d9      	ldr	r1, [r3, #28]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	61da      	str	r2, [r3, #28]
      break;
 8005822:	e011      	b.n	8005848 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a19      	ldr	r1, [r3, #32]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8005830:	400b      	ands	r3, r1
 8005832:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a19      	ldr	r1, [r3, #32]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	621a      	str	r2, [r3, #32]
      break;
 8005846:	bf00      	nop
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_ADCEx_InjectedConfigChannel+0x310>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d109      	bne.n	8005866 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b12      	cmp	r3, #18
 8005858:	d105      	bne.n	8005866 <HAL_ADCEx_InjectedConfigChannel+0x2ca>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800585a:	4b15      	ldr	r3, [pc, #84]	; (80058b0 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8005860:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005864:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a10      	ldr	r2, [pc, #64]	; (80058ac <HAL_ADCEx_InjectedConfigChannel+0x310>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10e      	bne.n	800588e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a0f      	ldr	r2, [pc, #60]	; (80058b4 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <HAL_ADCEx_InjectedConfigChannel+0x2e6>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b11      	cmp	r3, #17
 8005880:	d105      	bne.n	800588e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8005888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800588c:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	000f0001 	.word	0x000f0001
 80058a8:	fffff000 	.word	0xfffff000
 80058ac:	40012000 	.word	0x40012000
 80058b0:	40012300 	.word	0x40012300
 80058b4:	10000012 	.word	0x10000012

080058b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <__NVIC_SetPriorityGrouping+0x40>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058d4:	4013      	ands	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80058e0:	4b06      	ldr	r3, [pc, #24]	; (80058fc <__NVIC_SetPriorityGrouping+0x44>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058e6:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <__NVIC_SetPriorityGrouping+0x40>)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	60d3      	str	r3, [r2, #12]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	e000ed00 	.word	0xe000ed00
 80058fc:	05fa0000 	.word	0x05fa0000

08005900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <__NVIC_GetPriorityGrouping+0x18>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	f003 0307 	and.w	r3, r3, #7
}
 800590e:	4618      	mov	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	db0b      	blt.n	8005946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	f003 021f 	and.w	r2, r3, #31
 8005934:	4907      	ldr	r1, [pc, #28]	; (8005954 <__NVIC_EnableIRQ+0x38>)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	2001      	movs	r0, #1
 800593e:	fa00 f202 	lsl.w	r2, r0, r2
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000e100 	.word	0xe000e100

08005958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005968:	2b00      	cmp	r3, #0
 800596a:	db0a      	blt.n	8005982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	b2da      	uxtb	r2, r3
 8005970:	490c      	ldr	r1, [pc, #48]	; (80059a4 <__NVIC_SetPriority+0x4c>)
 8005972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005976:	0112      	lsls	r2, r2, #4
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	440b      	add	r3, r1
 800597c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005980:	e00a      	b.n	8005998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	b2da      	uxtb	r2, r3
 8005986:	4908      	ldr	r1, [pc, #32]	; (80059a8 <__NVIC_SetPriority+0x50>)
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	3b04      	subs	r3, #4
 8005990:	0112      	lsls	r2, r2, #4
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	440b      	add	r3, r1
 8005996:	761a      	strb	r2, [r3, #24]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000e100 	.word	0xe000e100
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f1c3 0307 	rsb	r3, r3, #7
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	bf28      	it	cs
 80059ca:	2304      	movcs	r3, #4
 80059cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3304      	adds	r3, #4
 80059d2:	2b06      	cmp	r3, #6
 80059d4:	d902      	bls.n	80059dc <NVIC_EncodePriority+0x30>
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3b03      	subs	r3, #3
 80059da:	e000      	b.n	80059de <NVIC_EncodePriority+0x32>
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43da      	mvns	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	401a      	ands	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059f4:	f04f 31ff 	mov.w	r1, #4294967295
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43d9      	mvns	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a04:	4313      	orrs	r3, r2
         );
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a24:	d301      	bcc.n	8005a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a26:	2301      	movs	r3, #1
 8005a28:	e00f      	b.n	8005a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <SysTick_Config+0x40>)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a32:	210f      	movs	r1, #15
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	f7ff ff8e 	bl	8005958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <SysTick_Config+0x40>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <SysTick_Config+0x40>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	e000e010 	.word	0xe000e010

08005a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ff29 	bl	80058b8 <__NVIC_SetPriorityGrouping>
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	4603      	mov	r3, r0
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a80:	f7ff ff3e 	bl	8005900 <__NVIC_GetPriorityGrouping>
 8005a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f7ff ff8e 	bl	80059ac <NVIC_EncodePriority>
 8005a90:	4602      	mov	r2, r0
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff ff5d 	bl	8005958 <__NVIC_SetPriority>
}
 8005a9e:	bf00      	nop
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	4603      	mov	r3, r0
 8005aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff31 	bl	800591c <__NVIC_EnableIRQ>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff ffa2 	bl	8005a14 <SysTick_Config>
 8005ad0:	4603      	mov	r3, r0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d004      	beq.n	8005af8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e00c      	b.n	8005b12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2205      	movs	r2, #5
 8005afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0201 	bic.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8005b30:	4ba9      	ldr	r3, [pc, #676]	; (8005dd8 <HAL_ETH_Init+0x2b8>)
 8005b32:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e183      	b.n	8005e4e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fd fb3c 	bl	80031d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b60:	4b9e      	ldr	r3, [pc, #632]	; (8005ddc <HAL_ETH_Init+0x2bc>)
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	4a9d      	ldr	r2, [pc, #628]	; (8005ddc <HAL_ETH_Init+0x2bc>)
 8005b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8005b6c:	4b9b      	ldr	r3, [pc, #620]	; (8005ddc <HAL_ETH_Init+0x2bc>)
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005b78:	4b99      	ldr	r3, [pc, #612]	; (8005de0 <HAL_ETH_Init+0x2c0>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4a98      	ldr	r2, [pc, #608]	; (8005de0 <HAL_ETH_Init+0x2c0>)
 8005b7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b82:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005b84:	4b96      	ldr	r3, [pc, #600]	; (8005de0 <HAL_ETH_Init+0x2c0>)
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4994      	ldr	r1, [pc, #592]	; (8005de0 <HAL_ETH_Init+0x2c0>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005baa:	f7fe ffe5 	bl	8004b78 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005bb0:	e011      	b.n	8005bd6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8005bb2:	f7fe ffe1 	bl	8004b78 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bc0:	d909      	bls.n	8005bd6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2203      	movs	r2, #3
 8005bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e13b      	b.n	8005e4e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e4      	bne.n	8005bb2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f023 031c 	bic.w	r3, r3, #28
 8005bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005bf8:	f001 fea2 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 8005bfc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4a78      	ldr	r2, [pc, #480]	; (8005de4 <HAL_ETH_Init+0x2c4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d908      	bls.n	8005c18 <HAL_ETH_Init+0xf8>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4a77      	ldr	r2, [pc, #476]	; (8005de8 <HAL_ETH_Init+0x2c8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d804      	bhi.n	8005c18 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f043 0308 	orr.w	r3, r3, #8
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	e027      	b.n	8005c68 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	4a73      	ldr	r2, [pc, #460]	; (8005de8 <HAL_ETH_Init+0x2c8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d908      	bls.n	8005c32 <HAL_ETH_Init+0x112>
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	4a72      	ldr	r2, [pc, #456]	; (8005dec <HAL_ETH_Init+0x2cc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d804      	bhi.n	8005c32 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f043 030c 	orr.w	r3, r3, #12
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e01a      	b.n	8005c68 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <HAL_ETH_Init+0x2cc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d903      	bls.n	8005c42 <HAL_ETH_Init+0x122>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	4a6c      	ldr	r2, [pc, #432]	; (8005df0 <HAL_ETH_Init+0x2d0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d911      	bls.n	8005c66 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	4a6a      	ldr	r2, [pc, #424]	; (8005df0 <HAL_ETH_Init+0x2d0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d908      	bls.n	8005c5c <HAL_ETH_Init+0x13c>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4a69      	ldr	r2, [pc, #420]	; (8005df4 <HAL_ETH_Init+0x2d4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d804      	bhi.n	8005c5c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	e005      	b.n	8005c68 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f043 0310 	orr.w	r3, r3, #16
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e000      	b.n	8005c68 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005c66:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8005c70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005c74:	2100      	movs	r1, #0
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fb9a 	bl	80063b0 <HAL_ETH_WritePHYRegister>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8005c86:	6939      	ldr	r1, [r7, #16]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fc27 	bl	80064dc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e0d9      	b.n	8005e4e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8005c9a:	20ff      	movs	r0, #255	; 0xff
 8005c9c:	f7fe ff78 	bl	8004b90 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80a7 	beq.w	8005df8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005caa:	f7fe ff65 	bl	8004b78 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb11 	bl	80062e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8005cbe:	f7fe ff5b 	bl	8004b78 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d90f      	bls.n	8005cf0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005cd4:	6939      	ldr	r1, [r7, #16]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fc00 	bl	80064dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e0ae      	b.n	8005e4e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0da      	beq.n	8005cb0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8005cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cfe:	2100      	movs	r1, #0
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fb55 	bl	80063b0 <HAL_ETH_WritePHYRegister>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005d10:	6939      	ldr	r1, [r7, #16]
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fbe2 	bl	80064dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005d20:	2301      	movs	r3, #1
 8005d22:	e094      	b.n	8005e4e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fe ff28 	bl	8004b78 <HAL_GetTick>
 8005d28:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fad4 	bl	80062e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005d38:	f7fe ff1e 	bl	8004b78 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d90f      	bls.n	8005d6a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8005d4e:	6939      	ldr	r1, [r7, #16]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fbc3 	bl	80064dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e071      	b.n	8005e4e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0da      	beq.n	8005d2a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005d74:	f107 030c 	add.w	r3, r7, #12
 8005d78:	461a      	mov	r2, r3
 8005d7a:	211f      	movs	r1, #31
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 faaf 	bl	80062e0 <HAL_ETH_ReadPHYRegister>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005d8c:	6939      	ldr	r1, [r7, #16]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fba4 	bl	80064dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e056      	b.n	8005e4e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	e002      	b.n	8005dba <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]
 8005dca:	e037      	b.n	8005e3c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dd2:	609a      	str	r2, [r3, #8]
 8005dd4:	e032      	b.n	8005e3c <HAL_ETH_Init+0x31c>
 8005dd6:	bf00      	nop
 8005dd8:	03938700 	.word	0x03938700
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	40013800 	.word	0x40013800
 8005de4:	01312cff 	.word	0x01312cff
 8005de8:	02160ebf 	.word	0x02160ebf
 8005dec:	039386ff 	.word	0x039386ff
 8005df0:	05f5e0ff 	.word	0x05f5e0ff
 8005df4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 facd 	bl	80063b0 <HAL_ETH_WritePHYRegister>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005e20:	6939      	ldr	r1, [r7, #16]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fb5a 	bl	80064dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e00c      	b.n	8005e4e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005e34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005e38:	f7fe feaa 	bl	8004b90 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005e3c:	6939      	ldr	r1, [r7, #16]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fb4c 	bl	80064dc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop

08005e58 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_ETH_DMATxDescListInit+0x20>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e052      	b.n	8005f1e <HAL_ETH_DMATxDescListInit+0xc6>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e030      	b.n	8005ef6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015b      	lsls	r3, r3, #5
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ea4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d208      	bcs.n	8005eea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3301      	adds	r3, #1
 8005edc:	015b      	lsls	r3, r3, #5
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	60da      	str	r2, [r3, #12]
 8005ee8:	e002      	b.n	8005ef0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d3ca      	bcc.n	8005e94 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6819      	ldr	r1, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	f241 0310 	movw	r3, #4112	; 0x1010
 8005f08:	440b      	add	r3, r1
 8005f0a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_ETH_DMARxDescListInit+0x20>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e056      	b.n	8005ff8 <HAL_ETH_DMARxDescListInit+0xce>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e034      	b.n	8005fd0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f76:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005f7e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	461a      	mov	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d208      	bcs.n	8005fc4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	015b      	lsls	r3, r3, #5
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4413      	add	r3, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	e002      	b.n	8005fca <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3c6      	bcc.n	8005f66 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	f241 030c 	movw	r3, #4108	; 0x100c
 8005fe2:	440b      	add	r3, r1
 8005fe4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_ETH_TransmitFrame+0x24>
 8006024:	2302      	movs	r3, #2
 8006026:	e0cd      	b.n	80061c4 <HAL_ETH_TransmitFrame+0x1c0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800604e:	2301      	movs	r3, #1
 8006050:	e0b8      	b.n	80061c4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	da09      	bge.n	8006070 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2212      	movs	r2, #18
 8006060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0a9      	b.n	80061c4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006076:	4293      	cmp	r3, r2
 8006078:	d915      	bls.n	80060a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	4a54      	ldr	r2, [pc, #336]	; (80061d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	0a9b      	lsrs	r3, r3, #10
 8006084:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800608a:	fba3 1302 	umull	r1, r3, r3, r2
 800608e:	0a9b      	lsrs	r3, r3, #10
 8006090:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	3301      	adds	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e001      	b.n	80060aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d11c      	bne.n	80060ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80060be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80060ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80060e8:	e04b      	b.n	8006182 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e044      	b.n	800617a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060fe:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d107      	bne.n	8006116 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006114:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800611e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	3b01      	subs	r3, #1
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	d116      	bne.n	8006158 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006138:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <HAL_ETH_TransmitFrame+0x1d0>)
 800613e:	fb02 f203 	mul.w	r2, r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	4413      	add	r3, r2
 8006146:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800614a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006156:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006166:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3301      	adds	r3, #1
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	429a      	cmp	r2, r3
 8006180:	d3b6      	bcc.n	80060f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	f241 0314 	movw	r3, #4116	; 0x1014
 800618a:	4413      	add	r3, r2
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00d      	beq.n	80061b2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	f241 0314 	movw	r3, #4116	; 0x1014
 800619e:	4413      	add	r3, r2
 80061a0:	2204      	movs	r2, #4
 80061a2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	f241 0304 	movw	r3, #4100	; 0x1004
 80061ac:	4413      	add	r3, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	ac02b00b 	.word	0xac02b00b
 80061d4:	fffffa0c 	.word	0xfffffa0c

080061d8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_ETH_GetReceivedFrame+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e070      	b.n	80062d4 <HAL_ETH_GetReceivedFrame+0xfc>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db5a      	blt.n	80062c2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d030      	beq.n	800627c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	2b01      	cmp	r3, #1
 800622a:	d103      	bne.n	8006234 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	0c1b      	lsrs	r3, r3, #16
 8006244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006248:	3b04      	subs	r3, #4
 800624a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e02b      	b.n	80062d4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006286:	2b00      	cmp	r3, #0
 8006288:	d010      	beq.n	80062ac <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	629a      	str	r2, [r3, #40]	; 0x28
 80062aa:	e00a      	b.n	80062c2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	460b      	mov	r3, r1
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b82      	cmp	r3, #130	; 0x82
 8006300:	d101      	bne.n	8006306 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8006302:	2302      	movs	r3, #2
 8006304:	e050      	b.n	80063a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2282      	movs	r2, #130	; 0x82
 800630a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 031c 	and.w	r3, r3, #28
 800631c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8a1b      	ldrh	r3, [r3, #16]
 8006322:	02db      	lsls	r3, r3, #11
 8006324:	b29b      	uxth	r3, r3
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800632c:	897b      	ldrh	r3, [r7, #10]
 800632e:	019b      	lsls	r3, r3, #6
 8006330:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f023 0302 	bic.w	r3, r3, #2
 8006340:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006352:	f7fe fc11 	bl	8004b78 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006358:	e015      	b.n	8006386 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800635a:	f7fe fc0d 	bl	8004b78 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d309      	bcc.n	800637e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e014      	b.n	80063a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e4      	bne.n	800635a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	460b      	mov	r3, r1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b42      	cmp	r3, #66	; 0x42
 80063d0:	d101      	bne.n	80063d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
 80063d4:	e04e      	b.n	8006474 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2242      	movs	r2, #66	; 0x42
 80063da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 031c 	and.w	r3, r3, #28
 80063ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8a1b      	ldrh	r3, [r3, #16]
 80063f2:	02db      	lsls	r3, r3, #11
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80063fc:	897b      	ldrh	r3, [r7, #10]
 80063fe:	019b      	lsls	r3, r3, #6
 8006400:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800642c:	f7fe fba4 	bl	8004b78 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006432:	e015      	b.n	8006460 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8006434:	f7fe fba0 	bl	8004b78 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006442:	d309      	bcc.n	8006458 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e00d      	b.n	8006474 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e4      	bne.n	8006434 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_ETH_Start+0x16>
 800648e:	2302      	movs	r3, #2
 8006490:	e01f      	b.n	80064d2 <HAL_ETH_Start+0x56>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa1c 	bl	80068e0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa36 	bl	800691a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa80 	bl	80069b4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa4d 	bl	8006954 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa62 	bl	8006984 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b0b0      	sub	sp, #192	; 0xc0
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d007      	beq.n	8006502 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006500:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8006502:	2300      	movs	r3, #0
 8006504:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8006506:	2300      	movs	r3, #0
 8006508:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800650a:	2300      	movs	r3, #0
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800650e:	2300      	movs	r3, #0
 8006510:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8006512:	2300      	movs	r3, #0
 8006514:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8006516:	2300      	movs	r3, #0
 8006518:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8006522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006526:	663b      	str	r3, [r7, #96]	; 0x60
 8006528:	e001      	b.n	800652e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800652a:	2300      	movs	r3, #0
 800652c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800652e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006532:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8006534:	2300      	movs	r3, #0
 8006536:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006538:	2300      	movs	r3, #0
 800653a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800653c:	2300      	movs	r3, #0
 800653e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8006540:	2300      	movs	r3, #0
 8006542:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8006544:	2300      	movs	r3, #0
 8006546:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8006552:	2300      	movs	r3, #0
 8006554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800655e:	2300      	movs	r3, #0
 8006560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8006564:	2300      	movs	r3, #0
 8006566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800656a:	2300      	movs	r3, #0
 800656c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8006576:	2300      	movs	r3, #0
 8006578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800659a:	2300      	movs	r3, #0
 800659c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80065b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80065b4:	4bab      	ldr	r3, [pc, #684]	; (8006864 <ETH_MACDMAConfig+0x388>)
 80065b6:	4013      	ands	r3, r2
 80065b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80065bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80065c0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80065c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80065c4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80065c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80065c8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80065ce:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80065d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80065d2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80065d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80065d6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80065dc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80065de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80065e0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80065e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80065e4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80065e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80065e8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80065ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80065ec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80065ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80065f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80065f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006604:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006610:	2001      	movs	r0, #1
 8006612:	f7fe fabd 	bl	8004b90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800661e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006620:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8006622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006624:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8006626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8006628:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800662a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800662e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8006630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8006634:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8006636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800663a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800663c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8006640:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8006644:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800664c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800664e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800665a:	2001      	movs	r0, #1
 800665c:	f7fe fa98 	bl	8004b90 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006668:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006672:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800667c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8006688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800668c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8006690:	4013      	ands	r3, r2
 8006692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8006696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800669a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800669c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80066a0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80066a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80066a6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80066a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80066ac:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80066ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80066b2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80066b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80066b8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80066ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80066cc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80066d8:	2001      	movs	r0, #1
 80066da:	f7fe fa59 	bl	8004b90 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80066e6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80066e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80066ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006702:	2001      	movs	r0, #1
 8006704:	f7fe fa44 	bl	8004b90 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006710:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8006716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800671a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8006720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006724:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006726:	2300      	movs	r3, #0
 8006728:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800672e:	2300      	movs	r3, #0
 8006730:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006732:	2300      	movs	r3, #0
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006736:	2304      	movs	r3, #4
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800673a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8006740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006744:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800674c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8006752:	2380      	movs	r3, #128	; 0x80
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8006756:	2300      	movs	r3, #0
 8006758:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800675a:	2300      	movs	r3, #0
 800675c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	f241 0318 	movw	r3, #4120	; 0x1018
 8006766:	4413      	add	r3, r2
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800676e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006772:	4b3d      	ldr	r3, [pc, #244]	; (8006868 <ETH_MACDMAConfig+0x38c>)
 8006774:	4013      	ands	r3, r2
 8006776:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800677a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800677c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800677e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8006780:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8006782:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8006784:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8006786:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8006788:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800678a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800678c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800678e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8006790:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8006792:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8006796:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800679a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800679c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80067ae:	4413      	add	r3, r2
 80067b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f241 0318 	movw	r3, #4120	; 0x1018
 80067be:	4413      	add	r3, r2
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80067c6:	2001      	movs	r0, #1
 80067c8:	f7fe f9e2 	bl	8004b90 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80067d4:	4413      	add	r3, r2
 80067d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80067da:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80067dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80067e0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80067e4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80067e8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80067ec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80067ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80067f2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80067f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80067f6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006804:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8006814:	2001      	movs	r0, #1
 8006816:	f7fe f9bb 	bl	8004b90 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006826:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d10d      	bne.n	800684c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	f241 031c 	movw	r3, #4124	; 0x101c
 8006838:	4413      	add	r3, r2
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6811      	ldr	r1, [r2, #0]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <ETH_MACDMAConfig+0x390>)
 8006842:	431a      	orrs	r2, r3
 8006844:	f241 031c 	movw	r3, #4124	; 0x101c
 8006848:	440b      	add	r3, r1
 800684a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	461a      	mov	r2, r3
 8006852:	2100      	movs	r1, #0
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f80b 	bl	8006870 <ETH_MACAddressConfig>
}
 800685a:	bf00      	nop
 800685c:	37c0      	adds	r7, #192	; 0xc0
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	ff20810f 	.word	0xff20810f
 8006868:	f8de3f23 	.word	0xf8de3f23
 800686c:	00010040 	.word	0x00010040

08006870 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3305      	adds	r3, #5
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	3204      	adds	r2, #4
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <ETH_MACAddressConfig+0x68>)
 8006892:	4413      	add	r3, r2
 8006894:	461a      	mov	r2, r3
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3303      	adds	r3, #3
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	061a      	lsls	r2, r3, #24
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3302      	adds	r3, #2
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3301      	adds	r3, #1
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	4313      	orrs	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	7812      	ldrb	r2, [r2, #0]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <ETH_MACAddressConfig+0x6c>)
 80068c2:	4413      	add	r3, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6013      	str	r3, [r2, #0]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40028040 	.word	0x40028040
 80068dc:	40028044 	.word	0x40028044

080068e0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006904:	2001      	movs	r0, #1
 8006906:	f7fe f943 	bl	8004b90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0204 	orr.w	r2, r2, #4
 8006934:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800693e:	2001      	movs	r0, #1
 8006940:	f7fe f926 	bl	8004b90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	601a      	str	r2, [r3, #0]
}
 800694c:	bf00      	nop
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	f241 0318 	movw	r3, #4120	; 0x1018
 8006964:	4413      	add	r3, r2
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6811      	ldr	r1, [r2, #0]
 800696c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006970:	f241 0318 	movw	r3, #4120	; 0x1018
 8006974:	440b      	add	r3, r1
 8006976:	601a      	str	r2, [r3, #0]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	f241 0318 	movw	r3, #4120	; 0x1018
 8006994:	4413      	add	r3, r2
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6811      	ldr	r1, [r2, #0]
 800699c:	f043 0202 	orr.w	r2, r3, #2
 80069a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80069a4:	440b      	add	r3, r1
 80069a6:	601a      	str	r2, [r3, #0]
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80069c8:	4413      	add	r3, r2
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6811      	ldr	r1, [r2, #0]
 80069d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80069d8:	440b      	add	r3, r1
 80069da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80069e4:	4413      	add	r3, r2
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80069ea:	2001      	movs	r0, #1
 80069ec:	f7fe f8d0 	bl	8004b90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80069fa:	440b      	add	r3, r1
 80069fc:	601a      	str	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	e175      	b.n	8006d14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a28:	2201      	movs	r2, #1
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	f040 8164 	bne.w	8006d0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d00b      	beq.n	8006a66 <HAL_GPIO_Init+0x5e>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d007      	beq.n	8006a66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a5a:	2b11      	cmp	r3, #17
 8006a5c:	d003      	beq.n	8006a66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b12      	cmp	r3, #18
 8006a64:	d130      	bne.n	8006ac8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	2203      	movs	r2, #3
 8006a72:	fa02 f303 	lsl.w	r3, r2, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	091b      	lsrs	r3, r3, #4
 8006ab2:	f003 0201 	and.w	r2, r3, #1
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4013      	ands	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d003      	beq.n	8006b08 <HAL_GPIO_Init+0x100>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b12      	cmp	r3, #18
 8006b06:	d123      	bne.n	8006b50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	08da      	lsrs	r2, r3, #3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3208      	adds	r2, #8
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	220f      	movs	r2, #15
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	08da      	lsrs	r2, r3, #3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3208      	adds	r2, #8
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	43db      	mvns	r3, r3
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4013      	ands	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 0203 	and.w	r2, r3, #3
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80be 	beq.w	8006d0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b92:	4b65      	ldr	r3, [pc, #404]	; (8006d28 <HAL_GPIO_Init+0x320>)
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	4a64      	ldr	r2, [pc, #400]	; (8006d28 <HAL_GPIO_Init+0x320>)
 8006b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b9e:	4b62      	ldr	r3, [pc, #392]	; (8006d28 <HAL_GPIO_Init+0x320>)
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006baa:	4a60      	ldr	r2, [pc, #384]	; (8006d2c <HAL_GPIO_Init+0x324>)
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	220f      	movs	r2, #15
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a57      	ldr	r2, [pc, #348]	; (8006d30 <HAL_GPIO_Init+0x328>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d037      	beq.n	8006c46 <HAL_GPIO_Init+0x23e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a56      	ldr	r2, [pc, #344]	; (8006d34 <HAL_GPIO_Init+0x32c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d031      	beq.n	8006c42 <HAL_GPIO_Init+0x23a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a55      	ldr	r2, [pc, #340]	; (8006d38 <HAL_GPIO_Init+0x330>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02b      	beq.n	8006c3e <HAL_GPIO_Init+0x236>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a54      	ldr	r2, [pc, #336]	; (8006d3c <HAL_GPIO_Init+0x334>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d025      	beq.n	8006c3a <HAL_GPIO_Init+0x232>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a53      	ldr	r2, [pc, #332]	; (8006d40 <HAL_GPIO_Init+0x338>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01f      	beq.n	8006c36 <HAL_GPIO_Init+0x22e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a52      	ldr	r2, [pc, #328]	; (8006d44 <HAL_GPIO_Init+0x33c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d019      	beq.n	8006c32 <HAL_GPIO_Init+0x22a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a51      	ldr	r2, [pc, #324]	; (8006d48 <HAL_GPIO_Init+0x340>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_GPIO_Init+0x226>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a50      	ldr	r2, [pc, #320]	; (8006d4c <HAL_GPIO_Init+0x344>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00d      	beq.n	8006c2a <HAL_GPIO_Init+0x222>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a4f      	ldr	r2, [pc, #316]	; (8006d50 <HAL_GPIO_Init+0x348>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <HAL_GPIO_Init+0x21e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a4e      	ldr	r2, [pc, #312]	; (8006d54 <HAL_GPIO_Init+0x34c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d101      	bne.n	8006c22 <HAL_GPIO_Init+0x21a>
 8006c1e:	2309      	movs	r3, #9
 8006c20:	e012      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c22:	230a      	movs	r3, #10
 8006c24:	e010      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c26:	2308      	movs	r3, #8
 8006c28:	e00e      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c2a:	2307      	movs	r3, #7
 8006c2c:	e00c      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c2e:	2306      	movs	r3, #6
 8006c30:	e00a      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c32:	2305      	movs	r3, #5
 8006c34:	e008      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c36:	2304      	movs	r3, #4
 8006c38:	e006      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e004      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e002      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <HAL_GPIO_Init+0x240>
 8006c46:	2300      	movs	r3, #0
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	f002 0203 	and.w	r2, r2, #3
 8006c4e:	0092      	lsls	r2, r2, #2
 8006c50:	4093      	lsls	r3, r2
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006c58:	4934      	ldr	r1, [pc, #208]	; (8006d2c <HAL_GPIO_Init+0x324>)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	089b      	lsrs	r3, r3, #2
 8006c5e:	3302      	adds	r3, #2
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c66:	4b3c      	ldr	r3, [pc, #240]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c8a:	4a33      	ldr	r2, [pc, #204]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c90:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cb4:	4a28      	ldr	r2, [pc, #160]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cba:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cde:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d08:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <HAL_GPIO_Init+0x350>)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	3301      	adds	r3, #1
 8006d12:	61fb      	str	r3, [r7, #28]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	f67f ae86 	bls.w	8006a28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3724      	adds	r7, #36	; 0x24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	40013800 	.word	0x40013800
 8006d30:	40020000 	.word	0x40020000
 8006d34:	40020400 	.word	0x40020400
 8006d38:	40020800 	.word	0x40020800
 8006d3c:	40020c00 	.word	0x40020c00
 8006d40:	40021000 	.word	0x40021000
 8006d44:	40021400 	.word	0x40021400
 8006d48:	40021800 	.word	0x40021800
 8006d4c:	40021c00 	.word	0x40021c00
 8006d50:	40022000 	.word	0x40022000
 8006d54:	40022400 	.word	0x40022400
 8006d58:	40013c00 	.word	0x40013c00

08006d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	807b      	strh	r3, [r7, #2]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d6c:	787b      	ldrb	r3, [r7, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d72:	887a      	ldrh	r2, [r7, #2]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006d78:	e003      	b.n	8006d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006d7a:	887b      	ldrh	r3, [r7, #2]
 8006d7c:	041a      	lsls	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	619a      	str	r2, [r3, #24]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d9a:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d9c:	695a      	ldr	r2, [r3, #20]
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fc fba2 	bl	80034f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40013c00 	.word	0x40013c00

08006dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc2:	b08f      	sub	sp, #60	; 0x3c
 8006dc4:	af0a      	add	r7, sp, #40	; 0x28
 8006dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e116      	b.n	8007000 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7fd fded 	bl	80049cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2203      	movs	r2, #3
 8006df6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f003 f91f 	bl	800a054 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	687e      	ldr	r6, [r7, #4]
 8006e1e:	466d      	mov	r5, sp
 8006e20:	f106 0410 	add.w	r4, r6, #16
 8006e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e30:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e34:	1d33      	adds	r3, r6, #4
 8006e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e38:	6838      	ldr	r0, [r7, #0]
 8006e3a:	f003 f8b3 	bl	8009fa4 <USB_CoreInit>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0d7      	b.n	8007000 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f003 f90d 	bl	800a076 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	e04a      	b.n	8006ef8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e62:	7bfa      	ldrb	r2, [r7, #15]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	440b      	add	r3, r1
 8006e70:	333d      	adds	r3, #61	; 0x3d
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	333c      	adds	r3, #60	; 0x3c
 8006e86:	7bfa      	ldrb	r2, [r7, #15]
 8006e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e8a:	7bfa      	ldrb	r2, [r7, #15]
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	b298      	uxth	r0, r3
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3342      	adds	r3, #66	; 0x42
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	333f      	adds	r3, #63	; 0x3f
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006eb6:	7bfa      	ldrb	r2, [r7, #15]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3344      	adds	r3, #68	; 0x44
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006eca:	7bfa      	ldrb	r2, [r7, #15]
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3348      	adds	r3, #72	; 0x48
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ede:	7bfa      	ldrb	r2, [r7, #15]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3350      	adds	r3, #80	; 0x50
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	7bfa      	ldrb	r2, [r7, #15]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3af      	bcc.n	8006e62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	73fb      	strb	r3, [r7, #15]
 8006f06:	e044      	b.n	8006f92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f08:	7bfa      	ldrb	r2, [r7, #15]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f1e:	7bfa      	ldrb	r2, [r7, #15]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006f30:	7bfa      	ldrb	r2, [r7, #15]
 8006f32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f34:	7bfa      	ldrb	r2, [r7, #15]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f4a:	7bfa      	ldrb	r2, [r7, #15]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f60:	7bfa      	ldrb	r2, [r7, #15]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f76:	7bfa      	ldrb	r2, [r7, #15]
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	73fb      	strb	r3, [r7, #15]
 8006f92:	7bfa      	ldrb	r2, [r7, #15]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d3b5      	bcc.n	8006f08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	687e      	ldr	r6, [r7, #4]
 8006fa4:	466d      	mov	r5, sp
 8006fa6:	f106 0410 	add.w	r4, r6, #16
 8006faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fba:	1d33      	adds	r3, r6, #4
 8006fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fbe:	6838      	ldr	r0, [r7, #0]
 8006fc0:	f003 f884 	bl	800a0cc <USB_DevInit>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e014      	b.n	8007000 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d102      	bne.n	8006ff4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f80a 	bl	8007008 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f003 fa36 	bl	800a46a <USB_DevDisconnect>

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007008 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <HAL_PCDEx_ActivateLPM+0x44>)
 8007038:	4313      	orrs	r3, r2
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	10000003 	.word	0x10000003

08007050 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a04      	ldr	r2, [pc, #16]	; (800706c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800705a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40007000 	.word	0x40007000

08007070 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007078:	2300      	movs	r3, #0
 800707a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e291      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 8087 	beq.w	80071a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007094:	4b96      	ldr	r3, [pc, #600]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 030c 	and.w	r3, r3, #12
 800709c:	2b04      	cmp	r3, #4
 800709e:	d00c      	beq.n	80070ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070a0:	4b93      	ldr	r3, [pc, #588]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d112      	bne.n	80070d2 <HAL_RCC_OscConfig+0x62>
 80070ac:	4b90      	ldr	r3, [pc, #576]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b8:	d10b      	bne.n	80070d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ba:	4b8d      	ldr	r3, [pc, #564]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d06c      	beq.n	80071a0 <HAL_RCC_OscConfig+0x130>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d168      	bne.n	80071a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e26b      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070da:	d106      	bne.n	80070ea <HAL_RCC_OscConfig+0x7a>
 80070dc:	4b84      	ldr	r3, [pc, #528]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a83      	ldr	r2, [pc, #524]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e02e      	b.n	8007148 <HAL_RCC_OscConfig+0xd8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0x9c>
 80070f2:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7e      	ldr	r2, [pc, #504]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80070f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b7c      	ldr	r3, [pc, #496]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a7b      	ldr	r2, [pc, #492]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e01d      	b.n	8007148 <HAL_RCC_OscConfig+0xd8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007114:	d10c      	bne.n	8007130 <HAL_RCC_OscConfig+0xc0>
 8007116:	4b76      	ldr	r3, [pc, #472]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a75      	ldr	r2, [pc, #468]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800711c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	4b73      	ldr	r3, [pc, #460]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a72      	ldr	r2, [pc, #456]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	e00b      	b.n	8007148 <HAL_RCC_OscConfig+0xd8>
 8007130:	4b6f      	ldr	r3, [pc, #444]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6e      	ldr	r2, [pc, #440]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4b6c      	ldr	r3, [pc, #432]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a6b      	ldr	r2, [pc, #428]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d013      	beq.n	8007178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007150:	f7fd fd12 	bl	8004b78 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007158:	f7fd fd0e 	bl	8004b78 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b64      	cmp	r3, #100	; 0x64
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e21f      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716a:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0xe8>
 8007176:	e014      	b.n	80071a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fd fcfe 	bl	8004b78 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007180:	f7fd fcfa 	bl	8004b78 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e20b      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	4b57      	ldr	r3, [pc, #348]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x110>
 800719e:	e000      	b.n	80071a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d069      	beq.n	8007282 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ae:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ba:	4b4d      	ldr	r3, [pc, #308]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d11c      	bne.n	8007200 <HAL_RCC_OscConfig+0x190>
 80071c6:	4b4a      	ldr	r3, [pc, #296]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d116      	bne.n	8007200 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_RCC_OscConfig+0x17a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e1df      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ea:	4b41      	ldr	r3, [pc, #260]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	493d      	ldr	r1, [pc, #244]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071fe:	e040      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d023      	beq.n	8007250 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007208:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a38      	ldr	r2, [pc, #224]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7fd fcb0 	bl	8004b78 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800721c:	f7fd fcac 	bl	8004b78 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e1bd      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722e:	4b30      	ldr	r3, [pc, #192]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0f0      	beq.n	800721c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800723a:	4b2d      	ldr	r3, [pc, #180]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4929      	ldr	r1, [pc, #164]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800724a:	4313      	orrs	r3, r2
 800724c:	600b      	str	r3, [r1, #0]
 800724e:	e018      	b.n	8007282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fd fc8c 	bl	8004b78 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007264:	f7fd fc88 	bl	8004b78 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e199      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007276:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d038      	beq.n	8007300 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d019      	beq.n	80072ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 8007298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729a:	4a15      	ldr	r2, [pc, #84]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a2:	f7fd fc69 	bl	8004b78 <HAL_GetTick>
 80072a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072aa:	f7fd fc65 	bl	8004b78 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e176      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80072be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0f0      	beq.n	80072aa <HAL_RCC_OscConfig+0x23a>
 80072c8:	e01a      	b.n	8007300 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80072cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ce:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <HAL_RCC_OscConfig+0x280>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d6:	f7fd fc4f 	bl	8004b78 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072dc:	e00a      	b.n	80072f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072de:	f7fd fc4b 	bl	8004b78 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d903      	bls.n	80072f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e15c      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
 80072f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f4:	4b91      	ldr	r3, [pc, #580]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80072f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1ee      	bne.n	80072de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80a4 	beq.w	8007456 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730e:	4b8b      	ldr	r3, [pc, #556]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10d      	bne.n	8007336 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	4b88      	ldr	r3, [pc, #544]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	4a87      	ldr	r2, [pc, #540]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007324:	6413      	str	r3, [r2, #64]	; 0x40
 8007326:	4b85      	ldr	r3, [pc, #532]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007332:	2301      	movs	r3, #1
 8007334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007336:	4b82      	ldr	r3, [pc, #520]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d118      	bne.n	8007374 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007342:	4b7f      	ldr	r3, [pc, #508]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a7e      	ldr	r2, [pc, #504]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 8007348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800734e:	f7fd fc13 	bl	8004b78 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007356:	f7fd fc0f 	bl	8004b78 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b64      	cmp	r3, #100	; 0x64
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e120      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007368:	4b75      	ldr	r3, [pc, #468]	; (8007540 <HAL_RCC_OscConfig+0x4d0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d106      	bne.n	800738a <HAL_RCC_OscConfig+0x31a>
 800737c:	4b6f      	ldr	r3, [pc, #444]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	4a6e      	ldr	r2, [pc, #440]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	e02d      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <HAL_RCC_OscConfig+0x33c>
 8007392:	4b6a      	ldr	r3, [pc, #424]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	4a69      	ldr	r2, [pc, #420]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	6713      	str	r3, [r2, #112]	; 0x70
 800739e:	4b67      	ldr	r3, [pc, #412]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	4a66      	ldr	r2, [pc, #408]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	6713      	str	r3, [r2, #112]	; 0x70
 80073aa:	e01c      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d10c      	bne.n	80073ce <HAL_RCC_OscConfig+0x35e>
 80073b4:	4b61      	ldr	r3, [pc, #388]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a60      	ldr	r2, [pc, #384]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	f043 0304 	orr.w	r3, r3, #4
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
 80073c0:	4b5e      	ldr	r3, [pc, #376]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	4a5d      	ldr	r2, [pc, #372]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	6713      	str	r3, [r2, #112]	; 0x70
 80073cc:	e00b      	b.n	80073e6 <HAL_RCC_OscConfig+0x376>
 80073ce:	4b5b      	ldr	r3, [pc, #364]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	4a5a      	ldr	r2, [pc, #360]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6713      	str	r3, [r2, #112]	; 0x70
 80073da:	4b58      	ldr	r3, [pc, #352]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	4a57      	ldr	r2, [pc, #348]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d015      	beq.n	800741a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ee:	f7fd fbc3 	bl	8004b78 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f4:	e00a      	b.n	800740c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fd fbbf 	bl	8004b78 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e0ce      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740c:	4b4b      	ldr	r3, [pc, #300]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ee      	beq.n	80073f6 <HAL_RCC_OscConfig+0x386>
 8007418:	e014      	b.n	8007444 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741a:	f7fd fbad 	bl	8004b78 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007420:	e00a      	b.n	8007438 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007422:	f7fd fba9 	bl	8004b78 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	4293      	cmp	r3, r2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e0b8      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007438:	4b40      	ldr	r3, [pc, #256]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800743a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1ee      	bne.n	8007422 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d105      	bne.n	8007456 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744a:	4b3c      	ldr	r3, [pc, #240]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	4a3b      	ldr	r2, [pc, #236]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 80a4 	beq.w	80075a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007460:	4b36      	ldr	r3, [pc, #216]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b08      	cmp	r3, #8
 800746a:	d06b      	beq.n	8007544 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d149      	bne.n	8007508 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007474:	4b31      	ldr	r3, [pc, #196]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a30      	ldr	r2, [pc, #192]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fd fb7a 	bl	8004b78 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007488:	f7fd fb76 	bl	8004b78 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e087      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749a:	4b28      	ldr	r3, [pc, #160]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69da      	ldr	r2, [r3, #28]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	019b      	lsls	r3, r3, #6
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	3b01      	subs	r3, #1
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	061b      	lsls	r3, r3, #24
 80074ca:	4313      	orrs	r3, r2
 80074cc:	4a1b      	ldr	r2, [pc, #108]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d4:	4b19      	ldr	r3, [pc, #100]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e0:	f7fd fb4a 	bl	8004b78 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e8:	f7fd fb46 	bl	8004b78 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e057      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074fa:	4b10      	ldr	r3, [pc, #64]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0f0      	beq.n	80074e8 <HAL_RCC_OscConfig+0x478>
 8007506:	e04f      	b.n	80075a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a0b      	ldr	r2, [pc, #44]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 800750e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007514:	f7fd fb30 	bl	8004b78 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800751c:	f7fd fb2c 	bl	8004b78 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e03d      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <HAL_RCC_OscConfig+0x4cc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f0      	bne.n	800751c <HAL_RCC_OscConfig+0x4ac>
 800753a:	e035      	b.n	80075a8 <HAL_RCC_OscConfig+0x538>
 800753c:	40023800 	.word	0x40023800
 8007540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007544:	4b1b      	ldr	r3, [pc, #108]	; (80075b4 <HAL_RCC_OscConfig+0x544>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d028      	beq.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800755c:	429a      	cmp	r2, r3
 800755e:	d121      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d11a      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007574:	4013      	ands	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800757a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800757c:	4293      	cmp	r3, r2
 800757e:	d111      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	3b01      	subs	r3, #1
 800758e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007590:	429a      	cmp	r2, r3
 8007592:	d107      	bne.n	80075a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023800 	.word	0x40023800

080075b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0d0      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075d0:	4b6a      	ldr	r3, [pc, #424]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 030f 	and.w	r3, r3, #15
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d910      	bls.n	8007600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075de:	4b67      	ldr	r3, [pc, #412]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f023 020f 	bic.w	r2, r3, #15
 80075e6:	4965      	ldr	r1, [pc, #404]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ee:	4b63      	ldr	r3, [pc, #396]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0b8      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d020      	beq.n	800764e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007618:	4b59      	ldr	r3, [pc, #356]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a58      	ldr	r2, [pc, #352]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800761e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007630:	4b53      	ldr	r3, [pc, #332]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4a52      	ldr	r2, [pc, #328]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800763a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800763c:	4b50      	ldr	r3, [pc, #320]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	494d      	ldr	r1, [pc, #308]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d040      	beq.n	80076dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d107      	bne.n	8007672 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007662:	4b47      	ldr	r3, [pc, #284]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d115      	bne.n	800769a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e07f      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d107      	bne.n	800768a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767a:	4b41      	ldr	r3, [pc, #260]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e073      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800768a:	4b3d      	ldr	r3, [pc, #244]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e06b      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800769a:	4b39      	ldr	r3, [pc, #228]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 0203 	bic.w	r2, r3, #3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4936      	ldr	r1, [pc, #216]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ac:	f7fd fa64 	bl	8004b78 <HAL_GetTick>
 80076b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076b2:	e00a      	b.n	80076ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076b4:	f7fd fa60 	bl	8004b78 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e053      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 020c 	and.w	r2, r3, #12
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	429a      	cmp	r2, r3
 80076da:	d1eb      	bne.n	80076b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076dc:	4b27      	ldr	r3, [pc, #156]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d210      	bcs.n	800770c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ea:	4b24      	ldr	r3, [pc, #144]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f023 020f 	bic.w	r2, r3, #15
 80076f2:	4922      	ldr	r1, [pc, #136]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fa:	4b20      	ldr	r3, [pc, #128]	; (800777c <HAL_RCC_ClockConfig+0x1c4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d001      	beq.n	800770c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e032      	b.n	8007772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007718:	4b19      	ldr	r3, [pc, #100]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4916      	ldr	r1, [pc, #88]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007726:	4313      	orrs	r3, r2
 8007728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	490e      	ldr	r1, [pc, #56]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800774a:	f000 f821 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800774e:	4601      	mov	r1, r0
 8007750:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_RCC_ClockConfig+0x1c8>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	f003 030f 	and.w	r3, r3, #15
 800775a:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <HAL_RCC_ClockConfig+0x1cc>)
 800775c:	5cd3      	ldrb	r3, [r2, r3]
 800775e:	fa21 f303 	lsr.w	r3, r1, r3
 8007762:	4a09      	ldr	r2, [pc, #36]	; (8007788 <HAL_RCC_ClockConfig+0x1d0>)
 8007764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <HAL_RCC_ClockConfig+0x1d4>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7fd f9c0 	bl	8004af0 <HAL_InitTick>

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40023c00 	.word	0x40023c00
 8007780:	40023800 	.word	0x40023800
 8007784:	0801ccbc 	.word	0x0801ccbc
 8007788:	2000000c 	.word	0x2000000c
 800778c:	20000010 	.word	0x20000010

08007790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	607b      	str	r3, [r7, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	2300      	movs	r3, #0
 80077a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077a6:	4b63      	ldr	r3, [pc, #396]	; (8007934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 030c 	and.w	r3, r3, #12
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d007      	beq.n	80077c2 <HAL_RCC_GetSysClockFreq+0x32>
 80077b2:	2b08      	cmp	r3, #8
 80077b4:	d008      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x38>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 80b4 	bne.w	8007924 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077bc:	4b5e      	ldr	r3, [pc, #376]	; (8007938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80077be:	60bb      	str	r3, [r7, #8]
      break;
 80077c0:	e0b3      	b.n	800792a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077c2:	4b5e      	ldr	r3, [pc, #376]	; (800793c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80077c4:	60bb      	str	r3, [r7, #8]
      break;
 80077c6:	e0b0      	b.n	800792a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c8:	4b5a      	ldr	r3, [pc, #360]	; (8007934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077d2:	4b58      	ldr	r3, [pc, #352]	; (8007934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d04a      	beq.n	8007874 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077de:	4b55      	ldr	r3, [pc, #340]	; (8007934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	099b      	lsrs	r3, r3, #6
 80077e4:	f04f 0400 	mov.w	r4, #0
 80077e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	ea03 0501 	and.w	r5, r3, r1
 80077f4:	ea04 0602 	and.w	r6, r4, r2
 80077f8:	4629      	mov	r1, r5
 80077fa:	4632      	mov	r2, r6
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	f04f 0400 	mov.w	r4, #0
 8007804:	0154      	lsls	r4, r2, #5
 8007806:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800780a:	014b      	lsls	r3, r1, #5
 800780c:	4619      	mov	r1, r3
 800780e:	4622      	mov	r2, r4
 8007810:	1b49      	subs	r1, r1, r5
 8007812:	eb62 0206 	sbc.w	r2, r2, r6
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	f04f 0400 	mov.w	r4, #0
 800781e:	0194      	lsls	r4, r2, #6
 8007820:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007824:	018b      	lsls	r3, r1, #6
 8007826:	1a5b      	subs	r3, r3, r1
 8007828:	eb64 0402 	sbc.w	r4, r4, r2
 800782c:	f04f 0100 	mov.w	r1, #0
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	00e2      	lsls	r2, r4, #3
 8007836:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800783a:	00d9      	lsls	r1, r3, #3
 800783c:	460b      	mov	r3, r1
 800783e:	4614      	mov	r4, r2
 8007840:	195b      	adds	r3, r3, r5
 8007842:	eb44 0406 	adc.w	r4, r4, r6
 8007846:	f04f 0100 	mov.w	r1, #0
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	0262      	lsls	r2, r4, #9
 8007850:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007854:	0259      	lsls	r1, r3, #9
 8007856:	460b      	mov	r3, r1
 8007858:	4614      	mov	r4, r2
 800785a:	4618      	mov	r0, r3
 800785c:	4621      	mov	r1, r4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f04f 0400 	mov.w	r4, #0
 8007864:	461a      	mov	r2, r3
 8007866:	4623      	mov	r3, r4
 8007868:	f7f9 fa3e 	bl	8000ce8 <__aeabi_uldivmod>
 800786c:	4603      	mov	r3, r0
 800786e:	460c      	mov	r4, r1
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e049      	b.n	8007908 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	099b      	lsrs	r3, r3, #6
 800787a:	f04f 0400 	mov.w	r4, #0
 800787e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	ea03 0501 	and.w	r5, r3, r1
 800788a:	ea04 0602 	and.w	r6, r4, r2
 800788e:	4629      	mov	r1, r5
 8007890:	4632      	mov	r2, r6
 8007892:	f04f 0300 	mov.w	r3, #0
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	0154      	lsls	r4, r2, #5
 800789c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078a0:	014b      	lsls	r3, r1, #5
 80078a2:	4619      	mov	r1, r3
 80078a4:	4622      	mov	r2, r4
 80078a6:	1b49      	subs	r1, r1, r5
 80078a8:	eb62 0206 	sbc.w	r2, r2, r6
 80078ac:	f04f 0300 	mov.w	r3, #0
 80078b0:	f04f 0400 	mov.w	r4, #0
 80078b4:	0194      	lsls	r4, r2, #6
 80078b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80078ba:	018b      	lsls	r3, r1, #6
 80078bc:	1a5b      	subs	r3, r3, r1
 80078be:	eb64 0402 	sbc.w	r4, r4, r2
 80078c2:	f04f 0100 	mov.w	r1, #0
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	00e2      	lsls	r2, r4, #3
 80078cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078d0:	00d9      	lsls	r1, r3, #3
 80078d2:	460b      	mov	r3, r1
 80078d4:	4614      	mov	r4, r2
 80078d6:	195b      	adds	r3, r3, r5
 80078d8:	eb44 0406 	adc.w	r4, r4, r6
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	02a2      	lsls	r2, r4, #10
 80078e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078ea:	0299      	lsls	r1, r3, #10
 80078ec:	460b      	mov	r3, r1
 80078ee:	4614      	mov	r4, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	4621      	mov	r1, r4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f04f 0400 	mov.w	r4, #0
 80078fa:	461a      	mov	r2, r3
 80078fc:	4623      	mov	r3, r4
 80078fe:	f7f9 f9f3 	bl	8000ce8 <__aeabi_uldivmod>
 8007902:	4603      	mov	r3, r0
 8007904:	460c      	mov	r4, r1
 8007906:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	3301      	adds	r3, #1
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	60bb      	str	r3, [r7, #8]
      break;
 8007922:	e002      	b.n	800792a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007926:	60bb      	str	r3, [r7, #8]
      break;
 8007928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800792a:	68bb      	ldr	r3, [r7, #8]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007934:	40023800 	.word	0x40023800
 8007938:	00f42400 	.word	0x00f42400
 800793c:	007a1200 	.word	0x007a1200

08007940 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007944:	4b03      	ldr	r3, [pc, #12]	; (8007954 <HAL_RCC_GetHCLKFreq+0x14>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	2000000c 	.word	0x2000000c

08007958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800795c:	f7ff fff0 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 8007960:	4601      	mov	r1, r0
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	0a9b      	lsrs	r3, r3, #10
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	4a03      	ldr	r2, [pc, #12]	; (800797c <HAL_RCC_GetPCLK1Freq+0x24>)
 800796e:	5cd3      	ldrb	r3, [r2, r3]
 8007970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007974:	4618      	mov	r0, r3
 8007976:	bd80      	pop	{r7, pc}
 8007978:	40023800 	.word	0x40023800
 800797c:	0801cccc 	.word	0x0801cccc

08007980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007984:	f7ff ffdc 	bl	8007940 <HAL_RCC_GetHCLKFreq>
 8007988:	4601      	mov	r1, r0
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	0b5b      	lsrs	r3, r3, #13
 8007990:	f003 0307 	and.w	r3, r3, #7
 8007994:	4a03      	ldr	r2, [pc, #12]	; (80079a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007996:	5cd3      	ldrb	r3, [r2, r3]
 8007998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40023800 	.word	0x40023800
 80079a4:	0801cccc 	.word	0x0801cccc

080079a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d012      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079d0:	4b69      	ldr	r3, [pc, #420]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	4a68      	ldr	r2, [pc, #416]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079da:	6093      	str	r3, [r2, #8]
 80079dc:	4b66      	ldr	r3, [pc, #408]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e4:	4964      	ldr	r1, [pc, #400]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80079f2:	2301      	movs	r3, #1
 80079f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d017      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a02:	4b5d      	ldr	r3, [pc, #372]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a10:	4959      	ldr	r1, [pc, #356]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a20:	d101      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d017      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a3e:	4b4e      	ldr	r3, [pc, #312]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	494a      	ldr	r1, [pc, #296]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 808b 	beq.w	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	4a39      	ldr	r2, [pc, #228]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a96:	6413      	str	r3, [r2, #64]	; 0x40
 8007a98:	4b37      	ldr	r3, [pc, #220]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007aa4:	4b35      	ldr	r3, [pc, #212]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a34      	ldr	r2, [pc, #208]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fd f862 	bl	8004b78 <HAL_GetTick>
 8007ab4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ab8:	f7fd f85e 	bl	8004b78 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e355      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f0      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ad6:	4b28      	ldr	r3, [pc, #160]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ade:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d035      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d02e      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007af4:	4b20      	ldr	r3, [pc, #128]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007afe:	4b1e      	ldr	r3, [pc, #120]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	4a1d      	ldr	r2, [pc, #116]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0e:	4a1a      	ldr	r2, [pc, #104]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b1c:	4b16      	ldr	r3, [pc, #88]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d114      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fd f826 	bl	8004b78 <HAL_GetTick>
 8007b2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b30:	f7fd f822 	bl	8004b78 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e317      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0ee      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b5e:	d111      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b6e:	400b      	ands	r3, r1
 8007b70:	4901      	ldr	r1, [pc, #4]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	e00b      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	40007000 	.word	0x40007000
 8007b80:	0ffffcff 	.word	0x0ffffcff
 8007b84:	4bb0      	ldr	r3, [pc, #704]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4aaf      	ldr	r2, [pc, #700]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b8e:	6093      	str	r3, [r2, #8]
 8007b90:	4bad      	ldr	r3, [pc, #692]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9c:	49aa      	ldr	r1, [pc, #680]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d010      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bae:	4ba6      	ldr	r3, [pc, #664]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb4:	4aa4      	ldr	r2, [pc, #656]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007bbe:	4ba2      	ldr	r3, [pc, #648]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	499f      	ldr	r1, [pc, #636]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bdc:	4b9a      	ldr	r3, [pc, #616]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bea:	4997      	ldr	r1, [pc, #604]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bfe:	4b92      	ldr	r3, [pc, #584]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c0c:	498e      	ldr	r1, [pc, #568]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c20:	4b89      	ldr	r3, [pc, #548]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c2e:	4986      	ldr	r1, [pc, #536]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c42:	4b81      	ldr	r3, [pc, #516]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	497d      	ldr	r1, [pc, #500]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c64:	4b78      	ldr	r3, [pc, #480]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f023 0203 	bic.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c72:	4975      	ldr	r1, [pc, #468]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c86:	4b70      	ldr	r3, [pc, #448]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8c:	f023 020c 	bic.w	r2, r3, #12
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c94:	496c      	ldr	r1, [pc, #432]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ca8:	4b67      	ldr	r3, [pc, #412]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb6:	4964      	ldr	r1, [pc, #400]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cca:	4b5f      	ldr	r3, [pc, #380]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	495b      	ldr	r1, [pc, #364]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cec:	4b56      	ldr	r3, [pc, #344]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	4953      	ldr	r1, [pc, #332]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d0e:	4b4e      	ldr	r3, [pc, #312]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1c:	494a      	ldr	r1, [pc, #296]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d30:	4b45      	ldr	r3, [pc, #276]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3e:	4942      	ldr	r1, [pc, #264]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d52:	4b3d      	ldr	r3, [pc, #244]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d60:	4939      	ldr	r1, [pc, #228]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d74:	4b34      	ldr	r3, [pc, #208]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d82:	4931      	ldr	r1, [pc, #196]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d011      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d96:	4b2c      	ldr	r3, [pc, #176]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da4:	4928      	ldr	r1, [pc, #160]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db4:	d101      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dd6:	4b1c      	ldr	r3, [pc, #112]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ddc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de4:	4918      	ldr	r1, [pc, #96]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007df8:	4b13      	ldr	r3, [pc, #76]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e08:	490f      	ldr	r1, [pc, #60]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d005      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e1e:	f040 80d8 	bne.w	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e22:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a08      	ldr	r2, [pc, #32]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e2e:	f7fc fea3 	bl	8004b78 <HAL_GetTick>
 8007e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e34:	e00a      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e36:	f7fc fe9f 	bl	8004b78 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b64      	cmp	r3, #100	; 0x64
 8007e42:	d903      	bls.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e196      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007e48:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e4c:	4b6c      	ldr	r3, [pc, #432]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1ee      	bne.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d021      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d11d      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e6c:	4b64      	ldr	r3, [pc, #400]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e7a:	4b61      	ldr	r3, [pc, #388]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	019a      	lsls	r2, r3, #6
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	041b      	lsls	r3, r3, #16
 8007e92:	431a      	orrs	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	061b      	lsls	r3, r3, #24
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	071b      	lsls	r3, r3, #28
 8007ea0:	4957      	ldr	r1, [pc, #348]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebc:	d00a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02e      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed2:	d129      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ed4:	4b4a      	ldr	r3, [pc, #296]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eda:	0c1b      	lsrs	r3, r3, #16
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ee2:	4b47      	ldr	r3, [pc, #284]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee8:	0f1b      	lsrs	r3, r3, #28
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	019a      	lsls	r2, r3, #6
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	431a      	orrs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	061b      	lsls	r3, r3, #24
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	071b      	lsls	r3, r3, #28
 8007f08:	493d      	ldr	r1, [pc, #244]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f10:	4b3b      	ldr	r3, [pc, #236]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f16:	f023 021f 	bic.w	r2, r3, #31
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	4937      	ldr	r1, [pc, #220]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01d      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f34:	4b32      	ldr	r3, [pc, #200]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3a:	0e1b      	lsrs	r3, r3, #24
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f42:	4b2f      	ldr	r3, [pc, #188]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f48:	0f1b      	lsrs	r3, r3, #28
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	019a      	lsls	r2, r3, #6
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	061b      	lsls	r3, r3, #24
 8007f62:	431a      	orrs	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	071b      	lsls	r3, r3, #28
 8007f68:	4925      	ldr	r1, [pc, #148]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d011      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	019a      	lsls	r2, r3, #6
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	061b      	lsls	r3, r3, #24
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	071b      	lsls	r3, r3, #28
 8007f98:	4919      	ldr	r1, [pc, #100]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fa0:	4b17      	ldr	r3, [pc, #92]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fac:	f7fc fde4 	bl	8004b78 <HAL_GetTick>
 8007fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fb4:	f7fc fde0 	bl	8004b78 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	; 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e0d7      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fc6:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f040 80cd 	bne.w	8008174 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fda:	4b09      	ldr	r3, [pc, #36]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a08      	ldr	r2, [pc, #32]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe6:	f7fc fdc7 	bl	8004b78 <HAL_GetTick>
 8007fea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fec:	e00a      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fee:	f7fc fdc3 	bl	8004b78 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b64      	cmp	r3, #100	; 0x64
 8007ffa:	d903      	bls.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e0ba      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008000:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008004:	4b5e      	ldr	r3, [pc, #376]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800800c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008010:	d0ed      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800802e:	2b00      	cmp	r3, #0
 8008030:	d02e      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d12a      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800803a:	4b51      	ldr	r3, [pc, #324]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008040:	0c1b      	lsrs	r3, r3, #16
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008048:	4b4d      	ldr	r3, [pc, #308]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800804a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804e:	0f1b      	lsrs	r3, r3, #28
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	019a      	lsls	r2, r3, #6
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	041b      	lsls	r3, r3, #16
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	061b      	lsls	r3, r3, #24
 8008068:	431a      	orrs	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	071b      	lsls	r3, r3, #28
 800806e:	4944      	ldr	r1, [pc, #272]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008070:	4313      	orrs	r3, r2
 8008072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008076:	4b42      	ldr	r3, [pc, #264]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800807c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	3b01      	subs	r3, #1
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	493d      	ldr	r1, [pc, #244]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800808a:	4313      	orrs	r3, r2
 800808c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d022      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080a4:	d11d      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080a6:	4b36      	ldr	r3, [pc, #216]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ac:	0e1b      	lsrs	r3, r3, #24
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080b4:	4b32      	ldr	r3, [pc, #200]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ba:	0f1b      	lsrs	r3, r3, #28
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	019a      	lsls	r2, r3, #6
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	041b      	lsls	r3, r3, #16
 80080ce:	431a      	orrs	r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	061b      	lsls	r3, r3, #24
 80080d4:	431a      	orrs	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	071b      	lsls	r3, r3, #28
 80080da:	4929      	ldr	r1, [pc, #164]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d028      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080ee:	4b24      	ldr	r3, [pc, #144]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	0e1b      	lsrs	r3, r3, #24
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80080fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	019a      	lsls	r2, r3, #6
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	431a      	orrs	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	061b      	lsls	r3, r3, #24
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	071b      	lsls	r3, r3, #28
 8008122:	4917      	ldr	r1, [pc, #92]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008124:	4313      	orrs	r3, r2
 8008126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800812c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	4911      	ldr	r1, [pc, #68]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800813a:	4313      	orrs	r3, r2
 800813c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a0e      	ldr	r2, [pc, #56]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800814c:	f7fc fd14 	bl	8004b78 <HAL_GetTick>
 8008150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008152:	e008      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008154:	f7fc fd10 	bl	8004b78 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b64      	cmp	r3, #100	; 0x64
 8008160:	d901      	bls.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e007      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800816e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008172:	d1ef      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3720      	adds	r7, #32
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023800 	.word	0x40023800

08008184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e01d      	b.n	80081d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7fc f9f4 	bl	8004598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f000 fc84 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	4b0e      	ldr	r3, [pc, #56]	; (800822c <HAL_TIM_Base_Start+0x50>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b06      	cmp	r3, #6
 80081fc:	d00b      	beq.n	8008216 <HAL_TIM_Base_Start+0x3a>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008204:	d007      	beq.n	8008216 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 0201 	orr.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	00010007 	.word	0x00010007

08008230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689a      	ldr	r2, [r3, #8]
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <HAL_TIM_Base_Start_IT+0x50>)
 8008250:	4013      	ands	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b06      	cmp	r3, #6
 8008258:	d00b      	beq.n	8008272 <HAL_TIM_Base_Start_IT+0x42>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008260:	d007      	beq.n	8008272 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	00010007 	.word	0x00010007

08008284 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e01d      	b.n	80082d2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f815 	bl	80082da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	3304      	adds	r3, #4
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f000 fc04 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
	...

080082f0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2201      	movs	r2, #1
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fed0 	bl	80090a8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	4b0b      	ldr	r3, [pc, #44]	; (800833c <HAL_TIM_IC_Start+0x4c>)
 8008310:	4013      	ands	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b06      	cmp	r3, #6
 8008318:	d00b      	beq.n	8008332 <HAL_TIM_IC_Start+0x42>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008320:	d007      	beq.n	8008332 <HAL_TIM_IC_Start+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0201 	orr.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	00010007 	.word	0x00010007

08008340 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e07b      	b.n	800844c <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fc f9bb 	bl	80046e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6899      	ldr	r1, [r3, #8]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b34      	ldr	r3, [pc, #208]	; (8008454 <HAL_TIM_Encoder_Init+0x114>)
 8008382:	400b      	ands	r3, r1
 8008384:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3304      	adds	r3, #4
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f000 fb9d 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4b27      	ldr	r3, [pc, #156]	; (8008458 <HAL_TIM_Encoder_Init+0x118>)
 80083bc:	4013      	ands	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	4313      	orrs	r3, r2
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4b21      	ldr	r3, [pc, #132]	; (800845c <HAL_TIM_Encoder_Init+0x11c>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	4b20      	ldr	r3, [pc, #128]	; (8008460 <HAL_TIM_Encoder_Init+0x120>)
 80083de:	4013      	ands	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	4313      	orrs	r3, r2
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	011a      	lsls	r2, r3, #4
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	031b      	lsls	r3, r3, #12
 8008400:	4313      	orrs	r3, r2
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800840e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008416:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	4313      	orrs	r3, r2
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	fffebff8 	.word	0xfffebff8
 8008458:	fffffcfc 	.word	0xfffffcfc
 800845c:	fffff3f3 	.word	0xfffff3f3
 8008460:	ffff0f0f 	.word	0xffff0f0f

08008464 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <HAL_TIM_Encoder_Start_IT+0x16>
 8008474:	2b04      	cmp	r3, #4
 8008476:	d010      	beq.n	800849a <HAL_TIM_Encoder_Start_IT+0x36>
 8008478:	e01f      	b.n	80084ba <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	2100      	movs	r1, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fe10 	bl	80090a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0202 	orr.w	r2, r2, #2
 8008496:	60da      	str	r2, [r3, #12]
      break;
 8008498:	e02e      	b.n	80084f8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2201      	movs	r2, #1
 80084a0:	2104      	movs	r1, #4
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fe00 	bl	80090a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0204 	orr.w	r2, r2, #4
 80084b6:	60da      	str	r2, [r3, #12]
      break;
 80084b8:	e01e      	b.n	80084f8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2201      	movs	r2, #1
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fdf0 	bl	80090a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2201      	movs	r2, #1
 80084ce:	2104      	movs	r1, #4
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fde9 	bl	80090a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0202 	orr.w	r2, r2, #2
 80084e4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 0204 	orr.w	r2, r2, #4
 80084f4:	60da      	str	r2, [r3, #12]
      break;
 80084f6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0201 	orr.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b02      	cmp	r3, #2
 8008526:	d122      	bne.n	800856e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b02      	cmp	r3, #2
 8008534:	d11b      	bne.n	800856e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f06f 0202 	mvn.w	r2, #2
 800853e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa9d 	bl	8008a94 <HAL_TIM_IC_CaptureCallback>
 800855a:	e005      	b.n	8008568 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa8f 	bl	8008a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 faa0 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b04      	cmp	r3, #4
 800857a:	d122      	bne.n	80085c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b04      	cmp	r3, #4
 8008588:	d11b      	bne.n	80085c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f06f 0204 	mvn.w	r2, #4
 8008592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa73 	bl	8008a94 <HAL_TIM_IC_CaptureCallback>
 80085ae:	e005      	b.n	80085bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fa65 	bl	8008a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa76 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0308 	and.w	r3, r3, #8
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d122      	bne.n	8008616 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d11b      	bne.n	8008616 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f06f 0208 	mvn.w	r2, #8
 80085e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2204      	movs	r2, #4
 80085ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa49 	bl	8008a94 <HAL_TIM_IC_CaptureCallback>
 8008602:	e005      	b.n	8008610 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa3b 	bl	8008a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa4c 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b10      	cmp	r3, #16
 8008622:	d122      	bne.n	800866a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f003 0310 	and.w	r3, r3, #16
 800862e:	2b10      	cmp	r3, #16
 8008630:	d11b      	bne.n	800866a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f06f 0210 	mvn.w	r2, #16
 800863a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2208      	movs	r2, #8
 8008640:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa1f 	bl	8008a94 <HAL_TIM_IC_CaptureCallback>
 8008656:	e005      	b.n	8008664 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fa11 	bl	8008a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa22 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	d10e      	bne.n	8008696 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b01      	cmp	r3, #1
 8008684:	d107      	bne.n	8008696 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f06f 0201 	mvn.w	r2, #1
 800868e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7fa ff3d 	bl	8003510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a0:	2b80      	cmp	r3, #128	; 0x80
 80086a2:	d10e      	bne.n	80086c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ae:	2b80      	cmp	r3, #128	; 0x80
 80086b0:	d107      	bne.n	80086c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fdb1 	bl	8009224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d0:	d10e      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086dc:	2b80      	cmp	r3, #128	; 0x80
 80086de:	d107      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80086e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fda4 	bl	8009238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d10e      	bne.n	800871c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008708:	2b40      	cmp	r3, #64	; 0x40
 800870a:	d107      	bne.n	800871c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f9d0 	bl	8008abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b20      	cmp	r3, #32
 8008728:	d10e      	bne.n	8008748 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b20      	cmp	r3, #32
 8008736:	d107      	bne.n	8008748 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0220 	mvn.w	r2, #32
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fd64 	bl	8009210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <HAL_TIM_IC_ConfigChannel+0x1a>
 8008766:	2302      	movs	r3, #2
 8008768:	e08a      	b.n	8008880 <HAL_TIM_IC_ConfigChannel+0x130>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2202      	movs	r2, #2
 8008776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11b      	bne.n	80087b8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6819      	ldr	r1, [r3, #0]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f000 fac6 	bl	8008d20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 020c 	bic.w	r2, r2, #12
 80087a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6999      	ldr	r1, [r3, #24]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	619a      	str	r2, [r3, #24]
 80087b6:	e05a      	b.n	800886e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d11c      	bne.n	80087f8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6819      	ldr	r1, [r3, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f000 fb4a 	bl	8008e66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80087e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6999      	ldr	r1, [r3, #24]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	021a      	lsls	r2, r3, #8
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	619a      	str	r2, [r3, #24]
 80087f6:	e03a      	b.n	800886e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d11b      	bne.n	8008836 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6819      	ldr	r1, [r3, #0]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f000 fb97 	bl	8008f40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 020c 	bic.w	r2, r2, #12
 8008820:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69d9      	ldr	r1, [r3, #28]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	61da      	str	r2, [r3, #28]
 8008834:	e01b      	b.n	800886e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f000 fbb7 	bl	8008fb8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008858:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69d9      	ldr	r1, [r3, #28]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	021a      	lsls	r2, r3, #8
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_TIM_ConfigClockSource+0x18>
 800889c:	2302      	movs	r3, #2
 800889e:	e0a6      	b.n	80089ee <HAL_TIM_ConfigClockSource+0x166>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4b4f      	ldr	r3, [pc, #316]	; (80089f8 <HAL_TIM_ConfigClockSource+0x170>)
 80088bc:	4013      	ands	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b40      	cmp	r3, #64	; 0x40
 80088d6:	d067      	beq.n	80089a8 <HAL_TIM_ConfigClockSource+0x120>
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d80b      	bhi.n	80088f4 <HAL_TIM_ConfigClockSource+0x6c>
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d073      	beq.n	80089c8 <HAL_TIM_ConfigClockSource+0x140>
 80088e0:	2b10      	cmp	r3, #16
 80088e2:	d802      	bhi.n	80088ea <HAL_TIM_ConfigClockSource+0x62>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d06f      	beq.n	80089c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80088e8:	e078      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	d06c      	beq.n	80089c8 <HAL_TIM_ConfigClockSource+0x140>
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d06a      	beq.n	80089c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80088f2:	e073      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80088f4:	2b70      	cmp	r3, #112	; 0x70
 80088f6:	d00d      	beq.n	8008914 <HAL_TIM_ConfigClockSource+0x8c>
 80088f8:	2b70      	cmp	r3, #112	; 0x70
 80088fa:	d804      	bhi.n	8008906 <HAL_TIM_ConfigClockSource+0x7e>
 80088fc:	2b50      	cmp	r3, #80	; 0x50
 80088fe:	d033      	beq.n	8008968 <HAL_TIM_ConfigClockSource+0xe0>
 8008900:	2b60      	cmp	r3, #96	; 0x60
 8008902:	d041      	beq.n	8008988 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008904:	e06a      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890a:	d066      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x152>
 800890c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008910:	d017      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008912:	e063      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6899      	ldr	r1, [r3, #8]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f000 fba0 	bl	8009068 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008936:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	609a      	str	r2, [r3, #8]
      break;
 8008940:	e04c      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6899      	ldr	r1, [r3, #8]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f000 fb89 	bl	8009068 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008964:	609a      	str	r2, [r3, #8]
      break;
 8008966:	e039      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	6859      	ldr	r1, [r3, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	461a      	mov	r2, r3
 8008976:	f000 fa47 	bl	8008e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2150      	movs	r1, #80	; 0x50
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fb56 	bl	8009032 <TIM_ITRx_SetConfig>
      break;
 8008986:	e029      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6859      	ldr	r1, [r3, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	461a      	mov	r2, r3
 8008996:	f000 faa3 	bl	8008ee0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2160      	movs	r1, #96	; 0x60
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fb46 	bl	8009032 <TIM_ITRx_SetConfig>
      break;
 80089a6:	e019      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	6859      	ldr	r1, [r3, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f000 fa27 	bl	8008e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2140      	movs	r1, #64	; 0x40
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fb36 	bl	8009032 <TIM_ITRx_SetConfig>
      break;
 80089c6:	e009      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f000 fb2d 	bl	8009032 <TIM_ITRx_SetConfig>
      break;
 80089d8:	e000      	b.n	80089dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80089da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	fffeff88 	.word	0xfffeff88

080089fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e031      	b.n	8008a78 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 f8f2 	bl	8008c10 <TIM_SlaveTimer_SetConfig>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e018      	b.n	8008a78 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a54:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a64:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a40      	ldr	r2, [pc, #256]	; (8008be4 <TIM_Base_SetConfig+0x114>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d013      	beq.n	8008b10 <TIM_Base_SetConfig+0x40>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aee:	d00f      	beq.n	8008b10 <TIM_Base_SetConfig+0x40>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a3d      	ldr	r2, [pc, #244]	; (8008be8 <TIM_Base_SetConfig+0x118>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00b      	beq.n	8008b10 <TIM_Base_SetConfig+0x40>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a3c      	ldr	r2, [pc, #240]	; (8008bec <TIM_Base_SetConfig+0x11c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d007      	beq.n	8008b10 <TIM_Base_SetConfig+0x40>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a3b      	ldr	r2, [pc, #236]	; (8008bf0 <TIM_Base_SetConfig+0x120>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d003      	beq.n	8008b10 <TIM_Base_SetConfig+0x40>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a3a      	ldr	r2, [pc, #232]	; (8008bf4 <TIM_Base_SetConfig+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d108      	bne.n	8008b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a2f      	ldr	r2, [pc, #188]	; (8008be4 <TIM_Base_SetConfig+0x114>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d02b      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b30:	d027      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a2c      	ldr	r2, [pc, #176]	; (8008be8 <TIM_Base_SetConfig+0x118>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d023      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a2b      	ldr	r2, [pc, #172]	; (8008bec <TIM_Base_SetConfig+0x11c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d01f      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <TIM_Base_SetConfig+0x120>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d01b      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a29      	ldr	r2, [pc, #164]	; (8008bf4 <TIM_Base_SetConfig+0x124>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d017      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a28      	ldr	r2, [pc, #160]	; (8008bf8 <TIM_Base_SetConfig+0x128>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d013      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a27      	ldr	r2, [pc, #156]	; (8008bfc <TIM_Base_SetConfig+0x12c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d00f      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a26      	ldr	r2, [pc, #152]	; (8008c00 <TIM_Base_SetConfig+0x130>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00b      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a25      	ldr	r2, [pc, #148]	; (8008c04 <TIM_Base_SetConfig+0x134>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d007      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a24      	ldr	r2, [pc, #144]	; (8008c08 <TIM_Base_SetConfig+0x138>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d003      	beq.n	8008b82 <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a23      	ldr	r2, [pc, #140]	; (8008c0c <TIM_Base_SetConfig+0x13c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d108      	bne.n	8008b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <TIM_Base_SetConfig+0x114>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d003      	beq.n	8008bc8 <TIM_Base_SetConfig+0xf8>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a0c      	ldr	r2, [pc, #48]	; (8008bf4 <TIM_Base_SetConfig+0x124>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d103      	bne.n	8008bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	691a      	ldr	r2, [r3, #16]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	615a      	str	r2, [r3, #20]
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40010000 	.word	0x40010000
 8008be8:	40000400 	.word	0x40000400
 8008bec:	40000800 	.word	0x40000800
 8008bf0:	40000c00 	.word	0x40000c00
 8008bf4:	40010400 	.word	0x40010400
 8008bf8:	40014000 	.word	0x40014000
 8008bfc:	40014400 	.word	0x40014400
 8008c00:	40014800 	.word	0x40014800
 8008c04:	40001800 	.word	0x40001800
 8008c08:	40001c00 	.word	0x40001c00
 8008c0c:	40002000 	.word	0x40002000

08008c10 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c28:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	4b39      	ldr	r3, [pc, #228]	; (8008d1c <TIM_SlaveTimer_SetConfig+0x10c>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b30      	cmp	r3, #48	; 0x30
 8008c54:	d05c      	beq.n	8008d10 <TIM_SlaveTimer_SetConfig+0x100>
 8008c56:	2b30      	cmp	r3, #48	; 0x30
 8008c58:	d806      	bhi.n	8008c68 <TIM_SlaveTimer_SetConfig+0x58>
 8008c5a:	2b10      	cmp	r3, #16
 8008c5c:	d058      	beq.n	8008d10 <TIM_SlaveTimer_SetConfig+0x100>
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d056      	beq.n	8008d10 <TIM_SlaveTimer_SetConfig+0x100>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d054      	beq.n	8008d10 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008c66:	e054      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008c68:	2b50      	cmp	r3, #80	; 0x50
 8008c6a:	d03d      	beq.n	8008ce8 <TIM_SlaveTimer_SetConfig+0xd8>
 8008c6c:	2b50      	cmp	r3, #80	; 0x50
 8008c6e:	d802      	bhi.n	8008c76 <TIM_SlaveTimer_SetConfig+0x66>
 8008c70:	2b40      	cmp	r3, #64	; 0x40
 8008c72:	d010      	beq.n	8008c96 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008c74:	e04d      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008c76:	2b60      	cmp	r3, #96	; 0x60
 8008c78:	d040      	beq.n	8008cfc <TIM_SlaveTimer_SetConfig+0xec>
 8008c7a:	2b70      	cmp	r3, #112	; 0x70
 8008c7c:	d000      	beq.n	8008c80 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008c7e:	e048      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68d9      	ldr	r1, [r3, #12]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f000 f9ea 	bl	8009068 <TIM_ETR_SetConfig>
      break;
 8008c94:	e03d      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b05      	cmp	r3, #5
 8008c9c:	d101      	bne.n	8008ca2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e038      	b.n	8008d14 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6a1a      	ldr	r2, [r3, #32]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0201 	bic.w	r2, r2, #1
 8008cb8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cc8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	621a      	str	r2, [r3, #32]
      break;
 8008ce6:	e014      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	6899      	ldr	r1, [r3, #8]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f000 f887 	bl	8008e08 <TIM_TI1_ConfigInputStage>
      break;
 8008cfa:	e00a      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	6899      	ldr	r1, [r3, #8]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f000 f8e9 	bl	8008ee0 <TIM_TI2_ConfigInputStage>
      break;
 8008d0e:	e000      	b.n	8008d12 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008d10:	bf00      	nop
  }
  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	fffefff8 	.word	0xfffefff8

08008d20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f023 0201 	bic.w	r2, r3, #1
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a28      	ldr	r2, [pc, #160]	; (8008dec <TIM_TI1_SetConfig+0xcc>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d01b      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d54:	d017      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4a25      	ldr	r2, [pc, #148]	; (8008df0 <TIM_TI1_SetConfig+0xd0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d013      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4a24      	ldr	r2, [pc, #144]	; (8008df4 <TIM_TI1_SetConfig+0xd4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00f      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4a23      	ldr	r2, [pc, #140]	; (8008df8 <TIM_TI1_SetConfig+0xd8>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00b      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4a22      	ldr	r2, [pc, #136]	; (8008dfc <TIM_TI1_SetConfig+0xdc>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d007      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4a21      	ldr	r2, [pc, #132]	; (8008e00 <TIM_TI1_SetConfig+0xe0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_TI1_SetConfig+0x66>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4a20      	ldr	r2, [pc, #128]	; (8008e04 <TIM_TI1_SetConfig+0xe4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d101      	bne.n	8008d8a <TIM_TI1_SetConfig+0x6a>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <TIM_TI1_SetConfig+0x6c>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d008      	beq.n	8008da2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e003      	b.n	8008daa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f023 030a 	bic.w	r3, r3, #10
 8008dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f003 030a 	and.w	r3, r3, #10
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	621a      	str	r2, [r3, #32]
}
 8008dde:	bf00      	nop
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40001800 	.word	0x40001800

08008e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	f023 0201 	bic.w	r2, r3, #1
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f023 030a 	bic.w	r3, r3, #10
 8008e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	621a      	str	r2, [r3, #32]
}
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b087      	sub	sp, #28
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
 8008e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f023 0210 	bic.w	r2, r3, #16
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	021b      	lsls	r3, r3, #8
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	031b      	lsls	r3, r3, #12
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	621a      	str	r2, [r3, #32]
}
 8008ed4:	bf00      	nop
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	f023 0210 	bic.w	r2, r3, #16
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	031b      	lsls	r3, r3, #12
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	621a      	str	r2, [r3, #32]
}
 8008f34:	bf00      	nop
 8008f36:	371c      	adds	r7, #28
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f023 0303 	bic.w	r3, r3, #3
 8008f6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008f90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	621a      	str	r2, [r3, #32]
}
 8008fac:	bf00      	nop
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ff6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	031b      	lsls	r3, r3, #12
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800900a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	031b      	lsls	r3, r3, #12
 8009010:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	621a      	str	r2, [r3, #32]
}
 8009026:	bf00      	nop
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009032:	b480      	push	{r7}
 8009034:	b085      	sub	sp, #20
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	f043 0307 	orr.w	r3, r3, #7
 8009054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	609a      	str	r2, [r3, #8]
}
 800905c:	bf00      	nop
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	021a      	lsls	r2, r3, #8
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	431a      	orrs	r2, r3
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4313      	orrs	r3, r2
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	4313      	orrs	r3, r2
 8009094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	609a      	str	r2, [r3, #8]
}
 800909c:	bf00      	nop
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f003 031f 	and.w	r3, r3, #31
 80090ba:	2201      	movs	r2, #1
 80090bc:	fa02 f303 	lsl.w	r3, r2, r3
 80090c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1a      	ldr	r2, [r3, #32]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	43db      	mvns	r3, r3
 80090ca:	401a      	ands	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1a      	ldr	r2, [r3, #32]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	fa01 f303 	lsl.w	r3, r1, r3
 80090e0:	431a      	orrs	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	621a      	str	r2, [r3, #32]
}
 80090e6:	bf00      	nop
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009108:	2302      	movs	r3, #2
 800910a:	e06d      	b.n	80091e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a30      	ldr	r2, [pc, #192]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a2f      	ldr	r2, [pc, #188]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d108      	bne.n	8009152 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	4313      	orrs	r3, r2
 8009150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009158:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	4313      	orrs	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a20      	ldr	r2, [pc, #128]	; (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d022      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917e:	d01d      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1d      	ldr	r2, [pc, #116]	; (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d018      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a1c      	ldr	r2, [pc, #112]	; (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d013      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1a      	ldr	r2, [pc, #104]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00e      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d009      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a16      	ldr	r2, [pc, #88]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a15      	ldr	r2, [pc, #84]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d10c      	bne.n	80091d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40010400 	.word	0x40010400
 80091fc:	40000400 	.word	0x40000400
 8009200:	40000800 	.word	0x40000800
 8009204:	40000c00 	.word	0x40000c00
 8009208:	40014000 	.word	0x40014000
 800920c:	40001800 	.word	0x40001800

08009210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e040      	b.n	80092e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7fb fae4 	bl	800483c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2224      	movs	r2, #36	; 0x24
 8009278:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f022 0201 	bic.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9ce 	bl	800962c <UART_SetConfig>
 8009290:	4603      	mov	r3, r0
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e022      	b.n	80092e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fc6c 	bl	8009b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fcf3 	bl	8009cc4 <UART_CheckIdleState>
 80092de:	4603      	mov	r3, r0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	d144      	bne.n	8009388 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HAL_UART_Transmit_IT+0x22>
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e03d      	b.n	800938a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009314:	2b01      	cmp	r3, #1
 8009316:	d101      	bne.n	800931c <HAL_UART_Transmit_IT+0x34>
 8009318:	2302      	movs	r3, #2
 800931a:	e036      	b.n	800938a <HAL_UART_Transmit_IT+0xa2>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	88fa      	ldrh	r2, [r7, #6]
 800932e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	88fa      	ldrh	r2, [r7, #6]
 8009336:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2221      	movs	r2, #33	; 0x21
 800934a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009354:	d107      	bne.n	8009366 <HAL_UART_Transmit_IT+0x7e>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d103      	bne.n	8009366 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4a0d      	ldr	r2, [pc, #52]	; (8009398 <HAL_UART_Transmit_IT+0xb0>)
 8009362:	665a      	str	r2, [r3, #100]	; 0x64
 8009364:	e002      	b.n	800936c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4a0c      	ldr	r2, [pc, #48]	; (800939c <HAL_UART_Transmit_IT+0xb4>)
 800936a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009382:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	e000      	b.n	800938a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8009388:	2302      	movs	r3, #2
  }
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	08009ef7 	.word	0x08009ef7
 800939c:	08009e85 	.word	0x08009e85

080093a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80093c6:	4013      	ands	r3, r2
 80093c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d113      	bne.n	80093f8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00e      	beq.n	80093f8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d009      	beq.n	80093f8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8100 	beq.w	80095ee <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	4798      	blx	r3
      }
      return;
 80093f6:	e0fa      	b.n	80095ee <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 80d5 	beq.w	80095aa <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80ca 	beq.w	80095aa <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00e      	beq.n	800943e <HAL_UART_IRQHandler+0x9e>
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009426:	2b00      	cmp	r3, #0
 8009428:	d009      	beq.n	800943e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2201      	movs	r2, #1
 8009430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009436:	f043 0201 	orr.w	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00e      	beq.n	8009466 <HAL_UART_IRQHandler+0xc6>
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2202      	movs	r2, #2
 8009458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945e:	f043 0204 	orr.w	r2, r3, #4
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00e      	beq.n	800948e <HAL_UART_IRQHandler+0xee>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d009      	beq.n	800948e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2204      	movs	r2, #4
 8009480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009486:	f043 0202 	orr.w	r2, r3, #2
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	d013      	beq.n	80094c0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d104      	bne.n	80094ac <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d009      	beq.n	80094c0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2208      	movs	r2, #8
 80094b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b8:	f043 0208 	orr.w	r2, r3, #8
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00f      	beq.n	80094ea <HAL_UART_IRQHandler+0x14a>
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00a      	beq.n	80094ea <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e2:	f043 0220 	orr.w	r2, r3, #32
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d07f      	beq.n	80095f2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d004      	beq.n	8009534 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009530:	2b00      	cmp	r3, #0
 8009532:	d031      	beq.n	8009598 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc6f 	bl	8009e18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009544:	2b40      	cmp	r3, #64	; 0x40
 8009546:	d123      	bne.n	8009590 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009556:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009564:	4a26      	ldr	r2, [pc, #152]	; (8009600 <HAL_UART_IRQHandler+0x260>)
 8009566:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956c:	4618      	mov	r0, r3
 800956e:	f7fc fab4 	bl	8005ada <HAL_DMA_Abort_IT>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d016      	beq.n	80095a6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009582:	4610      	mov	r0, r2
 8009584:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009586:	e00e      	b.n	80095a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 f845 	bl	8009618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800958e:	e00a      	b.n	80095a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f841 	bl	8009618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009596:	e006      	b.n	80095a6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f83d 	bl	8009618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80095a4:	e025      	b.n	80095f2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a6:	bf00      	nop
    return;
 80095a8:	e023      	b.n	80095f2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00d      	beq.n	80095d0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d008      	beq.n	80095d0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d017      	beq.n	80095f6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
    }
    return;
 80095ce:	e012      	b.n	80095f6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00e      	beq.n	80095f8 <HAL_UART_IRQHandler+0x258>
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d009      	beq.n	80095f8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fcc4 	bl	8009f72 <UART_EndTransmit_IT>
    return;
 80095ea:	bf00      	nop
 80095ec:	e004      	b.n	80095f8 <HAL_UART_IRQHandler+0x258>
      return;
 80095ee:	bf00      	nop
 80095f0:	e002      	b.n	80095f8 <HAL_UART_IRQHandler+0x258>
    return;
 80095f2:	bf00      	nop
 80095f4:	e000      	b.n	80095f8 <HAL_UART_IRQHandler+0x258>
    return;
 80095f6:	bf00      	nop
  }

}
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	08009e59 	.word	0x08009e59

08009604 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009634:	2300      	movs	r3, #0
 8009636:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	431a      	orrs	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4bb1      	ldr	r3, [pc, #708]	; (8009920 <UART_SetConfig+0x2f4>)
 800965c:	4013      	ands	r3, r2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	6939      	ldr	r1, [r7, #16]
 8009664:	430b      	orrs	r3, r1
 8009666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	4313      	orrs	r3, r2
 800968c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	430a      	orrs	r2, r1
 80096a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a9f      	ldr	r2, [pc, #636]	; (8009924 <UART_SetConfig+0x2f8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d121      	bne.n	80096f0 <UART_SetConfig+0xc4>
 80096ac:	4b9e      	ldr	r3, [pc, #632]	; (8009928 <UART_SetConfig+0x2fc>)
 80096ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d816      	bhi.n	80096e8 <UART_SetConfig+0xbc>
 80096ba:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <UART_SetConfig+0x94>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	080096d1 	.word	0x080096d1
 80096c4:	080096dd 	.word	0x080096dd
 80096c8:	080096d7 	.word	0x080096d7
 80096cc:	080096e3 	.word	0x080096e3
 80096d0:	2301      	movs	r3, #1
 80096d2:	77fb      	strb	r3, [r7, #31]
 80096d4:	e151      	b.n	800997a <UART_SetConfig+0x34e>
 80096d6:	2302      	movs	r3, #2
 80096d8:	77fb      	strb	r3, [r7, #31]
 80096da:	e14e      	b.n	800997a <UART_SetConfig+0x34e>
 80096dc:	2304      	movs	r3, #4
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e14b      	b.n	800997a <UART_SetConfig+0x34e>
 80096e2:	2308      	movs	r3, #8
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e148      	b.n	800997a <UART_SetConfig+0x34e>
 80096e8:	2310      	movs	r3, #16
 80096ea:	77fb      	strb	r3, [r7, #31]
 80096ec:	bf00      	nop
 80096ee:	e144      	b.n	800997a <UART_SetConfig+0x34e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a8d      	ldr	r2, [pc, #564]	; (800992c <UART_SetConfig+0x300>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d134      	bne.n	8009764 <UART_SetConfig+0x138>
 80096fa:	4b8b      	ldr	r3, [pc, #556]	; (8009928 <UART_SetConfig+0x2fc>)
 80096fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009700:	f003 030c 	and.w	r3, r3, #12
 8009704:	2b0c      	cmp	r3, #12
 8009706:	d829      	bhi.n	800975c <UART_SetConfig+0x130>
 8009708:	a201      	add	r2, pc, #4	; (adr r2, 8009710 <UART_SetConfig+0xe4>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009745 	.word	0x08009745
 8009714:	0800975d 	.word	0x0800975d
 8009718:	0800975d 	.word	0x0800975d
 800971c:	0800975d 	.word	0x0800975d
 8009720:	08009751 	.word	0x08009751
 8009724:	0800975d 	.word	0x0800975d
 8009728:	0800975d 	.word	0x0800975d
 800972c:	0800975d 	.word	0x0800975d
 8009730:	0800974b 	.word	0x0800974b
 8009734:	0800975d 	.word	0x0800975d
 8009738:	0800975d 	.word	0x0800975d
 800973c:	0800975d 	.word	0x0800975d
 8009740:	08009757 	.word	0x08009757
 8009744:	2300      	movs	r3, #0
 8009746:	77fb      	strb	r3, [r7, #31]
 8009748:	e117      	b.n	800997a <UART_SetConfig+0x34e>
 800974a:	2302      	movs	r3, #2
 800974c:	77fb      	strb	r3, [r7, #31]
 800974e:	e114      	b.n	800997a <UART_SetConfig+0x34e>
 8009750:	2304      	movs	r3, #4
 8009752:	77fb      	strb	r3, [r7, #31]
 8009754:	e111      	b.n	800997a <UART_SetConfig+0x34e>
 8009756:	2308      	movs	r3, #8
 8009758:	77fb      	strb	r3, [r7, #31]
 800975a:	e10e      	b.n	800997a <UART_SetConfig+0x34e>
 800975c:	2310      	movs	r3, #16
 800975e:	77fb      	strb	r3, [r7, #31]
 8009760:	bf00      	nop
 8009762:	e10a      	b.n	800997a <UART_SetConfig+0x34e>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a71      	ldr	r2, [pc, #452]	; (8009930 <UART_SetConfig+0x304>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d120      	bne.n	80097b0 <UART_SetConfig+0x184>
 800976e:	4b6e      	ldr	r3, [pc, #440]	; (8009928 <UART_SetConfig+0x2fc>)
 8009770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009778:	2b10      	cmp	r3, #16
 800977a:	d00f      	beq.n	800979c <UART_SetConfig+0x170>
 800977c:	2b10      	cmp	r3, #16
 800977e:	d802      	bhi.n	8009786 <UART_SetConfig+0x15a>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <UART_SetConfig+0x164>
 8009784:	e010      	b.n	80097a8 <UART_SetConfig+0x17c>
 8009786:	2b20      	cmp	r3, #32
 8009788:	d005      	beq.n	8009796 <UART_SetConfig+0x16a>
 800978a:	2b30      	cmp	r3, #48	; 0x30
 800978c:	d009      	beq.n	80097a2 <UART_SetConfig+0x176>
 800978e:	e00b      	b.n	80097a8 <UART_SetConfig+0x17c>
 8009790:	2300      	movs	r3, #0
 8009792:	77fb      	strb	r3, [r7, #31]
 8009794:	e0f1      	b.n	800997a <UART_SetConfig+0x34e>
 8009796:	2302      	movs	r3, #2
 8009798:	77fb      	strb	r3, [r7, #31]
 800979a:	e0ee      	b.n	800997a <UART_SetConfig+0x34e>
 800979c:	2304      	movs	r3, #4
 800979e:	77fb      	strb	r3, [r7, #31]
 80097a0:	e0eb      	b.n	800997a <UART_SetConfig+0x34e>
 80097a2:	2308      	movs	r3, #8
 80097a4:	77fb      	strb	r3, [r7, #31]
 80097a6:	e0e8      	b.n	800997a <UART_SetConfig+0x34e>
 80097a8:	2310      	movs	r3, #16
 80097aa:	77fb      	strb	r3, [r7, #31]
 80097ac:	bf00      	nop
 80097ae:	e0e4      	b.n	800997a <UART_SetConfig+0x34e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a5f      	ldr	r2, [pc, #380]	; (8009934 <UART_SetConfig+0x308>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d120      	bne.n	80097fc <UART_SetConfig+0x1d0>
 80097ba:	4b5b      	ldr	r3, [pc, #364]	; (8009928 <UART_SetConfig+0x2fc>)
 80097bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80097c4:	2b40      	cmp	r3, #64	; 0x40
 80097c6:	d00f      	beq.n	80097e8 <UART_SetConfig+0x1bc>
 80097c8:	2b40      	cmp	r3, #64	; 0x40
 80097ca:	d802      	bhi.n	80097d2 <UART_SetConfig+0x1a6>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <UART_SetConfig+0x1b0>
 80097d0:	e010      	b.n	80097f4 <UART_SetConfig+0x1c8>
 80097d2:	2b80      	cmp	r3, #128	; 0x80
 80097d4:	d005      	beq.n	80097e2 <UART_SetConfig+0x1b6>
 80097d6:	2bc0      	cmp	r3, #192	; 0xc0
 80097d8:	d009      	beq.n	80097ee <UART_SetConfig+0x1c2>
 80097da:	e00b      	b.n	80097f4 <UART_SetConfig+0x1c8>
 80097dc:	2300      	movs	r3, #0
 80097de:	77fb      	strb	r3, [r7, #31]
 80097e0:	e0cb      	b.n	800997a <UART_SetConfig+0x34e>
 80097e2:	2302      	movs	r3, #2
 80097e4:	77fb      	strb	r3, [r7, #31]
 80097e6:	e0c8      	b.n	800997a <UART_SetConfig+0x34e>
 80097e8:	2304      	movs	r3, #4
 80097ea:	77fb      	strb	r3, [r7, #31]
 80097ec:	e0c5      	b.n	800997a <UART_SetConfig+0x34e>
 80097ee:	2308      	movs	r3, #8
 80097f0:	77fb      	strb	r3, [r7, #31]
 80097f2:	e0c2      	b.n	800997a <UART_SetConfig+0x34e>
 80097f4:	2310      	movs	r3, #16
 80097f6:	77fb      	strb	r3, [r7, #31]
 80097f8:	bf00      	nop
 80097fa:	e0be      	b.n	800997a <UART_SetConfig+0x34e>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a4d      	ldr	r2, [pc, #308]	; (8009938 <UART_SetConfig+0x30c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d124      	bne.n	8009850 <UART_SetConfig+0x224>
 8009806:	4b48      	ldr	r3, [pc, #288]	; (8009928 <UART_SetConfig+0x2fc>)
 8009808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009814:	d012      	beq.n	800983c <UART_SetConfig+0x210>
 8009816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800981a:	d802      	bhi.n	8009822 <UART_SetConfig+0x1f6>
 800981c:	2b00      	cmp	r3, #0
 800981e:	d007      	beq.n	8009830 <UART_SetConfig+0x204>
 8009820:	e012      	b.n	8009848 <UART_SetConfig+0x21c>
 8009822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009826:	d006      	beq.n	8009836 <UART_SetConfig+0x20a>
 8009828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800982c:	d009      	beq.n	8009842 <UART_SetConfig+0x216>
 800982e:	e00b      	b.n	8009848 <UART_SetConfig+0x21c>
 8009830:	2300      	movs	r3, #0
 8009832:	77fb      	strb	r3, [r7, #31]
 8009834:	e0a1      	b.n	800997a <UART_SetConfig+0x34e>
 8009836:	2302      	movs	r3, #2
 8009838:	77fb      	strb	r3, [r7, #31]
 800983a:	e09e      	b.n	800997a <UART_SetConfig+0x34e>
 800983c:	2304      	movs	r3, #4
 800983e:	77fb      	strb	r3, [r7, #31]
 8009840:	e09b      	b.n	800997a <UART_SetConfig+0x34e>
 8009842:	2308      	movs	r3, #8
 8009844:	77fb      	strb	r3, [r7, #31]
 8009846:	e098      	b.n	800997a <UART_SetConfig+0x34e>
 8009848:	2310      	movs	r3, #16
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	bf00      	nop
 800984e:	e094      	b.n	800997a <UART_SetConfig+0x34e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a39      	ldr	r2, [pc, #228]	; (800993c <UART_SetConfig+0x310>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d124      	bne.n	80098a4 <UART_SetConfig+0x278>
 800985a:	4b33      	ldr	r3, [pc, #204]	; (8009928 <UART_SetConfig+0x2fc>)
 800985c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009868:	d012      	beq.n	8009890 <UART_SetConfig+0x264>
 800986a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800986e:	d802      	bhi.n	8009876 <UART_SetConfig+0x24a>
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <UART_SetConfig+0x258>
 8009874:	e012      	b.n	800989c <UART_SetConfig+0x270>
 8009876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800987a:	d006      	beq.n	800988a <UART_SetConfig+0x25e>
 800987c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009880:	d009      	beq.n	8009896 <UART_SetConfig+0x26a>
 8009882:	e00b      	b.n	800989c <UART_SetConfig+0x270>
 8009884:	2301      	movs	r3, #1
 8009886:	77fb      	strb	r3, [r7, #31]
 8009888:	e077      	b.n	800997a <UART_SetConfig+0x34e>
 800988a:	2302      	movs	r3, #2
 800988c:	77fb      	strb	r3, [r7, #31]
 800988e:	e074      	b.n	800997a <UART_SetConfig+0x34e>
 8009890:	2304      	movs	r3, #4
 8009892:	77fb      	strb	r3, [r7, #31]
 8009894:	e071      	b.n	800997a <UART_SetConfig+0x34e>
 8009896:	2308      	movs	r3, #8
 8009898:	77fb      	strb	r3, [r7, #31]
 800989a:	e06e      	b.n	800997a <UART_SetConfig+0x34e>
 800989c:	2310      	movs	r3, #16
 800989e:	77fb      	strb	r3, [r7, #31]
 80098a0:	bf00      	nop
 80098a2:	e06a      	b.n	800997a <UART_SetConfig+0x34e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a25      	ldr	r2, [pc, #148]	; (8009940 <UART_SetConfig+0x314>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d124      	bne.n	80098f8 <UART_SetConfig+0x2cc>
 80098ae:	4b1e      	ldr	r3, [pc, #120]	; (8009928 <UART_SetConfig+0x2fc>)
 80098b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098bc:	d012      	beq.n	80098e4 <UART_SetConfig+0x2b8>
 80098be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c2:	d802      	bhi.n	80098ca <UART_SetConfig+0x29e>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d007      	beq.n	80098d8 <UART_SetConfig+0x2ac>
 80098c8:	e012      	b.n	80098f0 <UART_SetConfig+0x2c4>
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ce:	d006      	beq.n	80098de <UART_SetConfig+0x2b2>
 80098d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098d4:	d009      	beq.n	80098ea <UART_SetConfig+0x2be>
 80098d6:	e00b      	b.n	80098f0 <UART_SetConfig+0x2c4>
 80098d8:	2300      	movs	r3, #0
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e04d      	b.n	800997a <UART_SetConfig+0x34e>
 80098de:	2302      	movs	r3, #2
 80098e0:	77fb      	strb	r3, [r7, #31]
 80098e2:	e04a      	b.n	800997a <UART_SetConfig+0x34e>
 80098e4:	2304      	movs	r3, #4
 80098e6:	77fb      	strb	r3, [r7, #31]
 80098e8:	e047      	b.n	800997a <UART_SetConfig+0x34e>
 80098ea:	2308      	movs	r3, #8
 80098ec:	77fb      	strb	r3, [r7, #31]
 80098ee:	e044      	b.n	800997a <UART_SetConfig+0x34e>
 80098f0:	2310      	movs	r3, #16
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	bf00      	nop
 80098f6:	e040      	b.n	800997a <UART_SetConfig+0x34e>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a11      	ldr	r2, [pc, #68]	; (8009944 <UART_SetConfig+0x318>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d139      	bne.n	8009976 <UART_SetConfig+0x34a>
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <UART_SetConfig+0x2fc>)
 8009904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800990c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009910:	d027      	beq.n	8009962 <UART_SetConfig+0x336>
 8009912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009916:	d817      	bhi.n	8009948 <UART_SetConfig+0x31c>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01c      	beq.n	8009956 <UART_SetConfig+0x32a>
 800991c:	e027      	b.n	800996e <UART_SetConfig+0x342>
 800991e:	bf00      	nop
 8009920:	efff69f3 	.word	0xefff69f3
 8009924:	40011000 	.word	0x40011000
 8009928:	40023800 	.word	0x40023800
 800992c:	40004400 	.word	0x40004400
 8009930:	40004800 	.word	0x40004800
 8009934:	40004c00 	.word	0x40004c00
 8009938:	40005000 	.word	0x40005000
 800993c:	40011400 	.word	0x40011400
 8009940:	40007800 	.word	0x40007800
 8009944:	40007c00 	.word	0x40007c00
 8009948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800994c:	d006      	beq.n	800995c <UART_SetConfig+0x330>
 800994e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009952:	d009      	beq.n	8009968 <UART_SetConfig+0x33c>
 8009954:	e00b      	b.n	800996e <UART_SetConfig+0x342>
 8009956:	2300      	movs	r3, #0
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e00e      	b.n	800997a <UART_SetConfig+0x34e>
 800995c:	2302      	movs	r3, #2
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e00b      	b.n	800997a <UART_SetConfig+0x34e>
 8009962:	2304      	movs	r3, #4
 8009964:	77fb      	strb	r3, [r7, #31]
 8009966:	e008      	b.n	800997a <UART_SetConfig+0x34e>
 8009968:	2308      	movs	r3, #8
 800996a:	77fb      	strb	r3, [r7, #31]
 800996c:	e005      	b.n	800997a <UART_SetConfig+0x34e>
 800996e:	2310      	movs	r3, #16
 8009970:	77fb      	strb	r3, [r7, #31]
 8009972:	bf00      	nop
 8009974:	e001      	b.n	800997a <UART_SetConfig+0x34e>
 8009976:	2310      	movs	r3, #16
 8009978:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009982:	d17f      	bne.n	8009a84 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009984:	7ffb      	ldrb	r3, [r7, #31]
 8009986:	2b08      	cmp	r3, #8
 8009988:	d85c      	bhi.n	8009a44 <UART_SetConfig+0x418>
 800998a:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <UART_SetConfig+0x364>)
 800998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009990:	080099b5 	.word	0x080099b5
 8009994:	080099d5 	.word	0x080099d5
 8009998:	080099f5 	.word	0x080099f5
 800999c:	08009a45 	.word	0x08009a45
 80099a0:	08009a0d 	.word	0x08009a0d
 80099a4:	08009a45 	.word	0x08009a45
 80099a8:	08009a45 	.word	0x08009a45
 80099ac:	08009a45 	.word	0x08009a45
 80099b0:	08009a2d 	.word	0x08009a2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7fd ffd0 	bl	8007958 <HAL_RCC_GetPCLK1Freq>
 80099b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	005a      	lsls	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	441a      	add	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	61bb      	str	r3, [r7, #24]
        break;
 80099d2:	e03a      	b.n	8009a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099d4:	f7fd ffd4 	bl	8007980 <HAL_RCC_GetPCLK2Freq>
 80099d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	005a      	lsls	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	085b      	lsrs	r3, r3, #1
 80099e4:	441a      	add	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	61bb      	str	r3, [r7, #24]
        break;
 80099f2:	e02a      	b.n	8009a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	085a      	lsrs	r2, r3, #1
 80099fa:	4b5f      	ldr	r3, [pc, #380]	; (8009b78 <UART_SetConfig+0x54c>)
 80099fc:	4413      	add	r3, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	6852      	ldr	r2, [r2, #4]
 8009a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	61bb      	str	r3, [r7, #24]
        break;
 8009a0a:	e01e      	b.n	8009a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a0c:	f7fd fec0 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 8009a10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	005a      	lsls	r2, r3, #1
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	085b      	lsrs	r3, r3, #1
 8009a1c:	441a      	add	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	61bb      	str	r3, [r7, #24]
        break;
 8009a2a:	e00e      	b.n	8009a4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	085b      	lsrs	r3, r3, #1
 8009a32:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	61bb      	str	r3, [r7, #24]
        break;
 8009a42:	e002      	b.n	8009a4a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	75fb      	strb	r3, [r7, #23]
        break;
 8009a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b0f      	cmp	r3, #15
 8009a4e:	d916      	bls.n	8009a7e <UART_SetConfig+0x452>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a56:	d212      	bcs.n	8009a7e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f023 030f 	bic.w	r3, r3, #15
 8009a60:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	897b      	ldrh	r3, [r7, #10]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	897a      	ldrh	r2, [r7, #10]
 8009a7a:	60da      	str	r2, [r3, #12]
 8009a7c:	e070      	b.n	8009b60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
 8009a82:	e06d      	b.n	8009b60 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009a84:	7ffb      	ldrb	r3, [r7, #31]
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d859      	bhi.n	8009b3e <UART_SetConfig+0x512>
 8009a8a:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <UART_SetConfig+0x464>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009ad3 	.word	0x08009ad3
 8009a98:	08009af1 	.word	0x08009af1
 8009a9c:	08009b3f 	.word	0x08009b3f
 8009aa0:	08009b09 	.word	0x08009b09
 8009aa4:	08009b3f 	.word	0x08009b3f
 8009aa8:	08009b3f 	.word	0x08009b3f
 8009aac:	08009b3f 	.word	0x08009b3f
 8009ab0:	08009b27 	.word	0x08009b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ab4:	f7fd ff50 	bl	8007958 <HAL_RCC_GetPCLK1Freq>
 8009ab8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	085a      	lsrs	r2, r3, #1
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	441a      	add	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	61bb      	str	r3, [r7, #24]
        break;
 8009ad0:	e038      	b.n	8009b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ad2:	f7fd ff55 	bl	8007980 <HAL_RCC_GetPCLK2Freq>
 8009ad6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	085a      	lsrs	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	441a      	add	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	61bb      	str	r3, [r7, #24]
        break;
 8009aee:	e029      	b.n	8009b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	085a      	lsrs	r2, r3, #1
 8009af6:	4b21      	ldr	r3, [pc, #132]	; (8009b7c <UART_SetConfig+0x550>)
 8009af8:	4413      	add	r3, r2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	6852      	ldr	r2, [r2, #4]
 8009afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	61bb      	str	r3, [r7, #24]
        break;
 8009b06:	e01d      	b.n	8009b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b08:	f7fd fe42 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 8009b0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	085a      	lsrs	r2, r3, #1
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	441a      	add	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	61bb      	str	r3, [r7, #24]
        break;
 8009b24:	e00e      	b.n	8009b44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	085b      	lsrs	r3, r3, #1
 8009b2c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	61bb      	str	r3, [r7, #24]
        break;
 8009b3c:	e002      	b.n	8009b44 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75fb      	strb	r3, [r7, #23]
        break;
 8009b42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2b0f      	cmp	r3, #15
 8009b48:	d908      	bls.n	8009b5c <UART_SetConfig+0x530>
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b50:	d204      	bcs.n	8009b5c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	60da      	str	r2, [r3, #12]
 8009b5a:	e001      	b.n	8009b60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	01e84800 	.word	0x01e84800
 8009b7c:	00f42400 	.word	0x00f42400

08009b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	430a      	orrs	r2, r1
 8009bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	f003 0320 	and.w	r3, r3, #32
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01a      	beq.n	8009c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c7e:	d10a      	bne.n	8009c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009cd2:	f7fa ff51 	bl	8004b78 <HAL_GetTick>
 8009cd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0308 	and.w	r3, r3, #8
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d10e      	bne.n	8009d04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f814 	bl	8009d22 <UART_WaitOnFlagUntilTimeout>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e00a      	b.n	8009d1a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2220      	movs	r2, #32
 8009d08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	603b      	str	r3, [r7, #0]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d32:	e05d      	b.n	8009df0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3a:	d059      	beq.n	8009df0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3c:	f7fa ff1c 	bl	8004b78 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d302      	bcc.n	8009d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d11b      	bne.n	8009d8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0201 	bic.w	r2, r2, #1
 8009d70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e042      	b.n	8009e10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d02b      	beq.n	8009df0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009da6:	d123      	bne.n	8009df0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009db0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009dc0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 0201 	bic.w	r2, r2, #1
 8009dd0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2220      	movs	r2, #32
 8009de2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e00f      	b.n	8009e10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69da      	ldr	r2, [r3, #28]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	bf0c      	ite	eq
 8009e00:	2301      	moveq	r3, #1
 8009e02:	2300      	movne	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d092      	beq.n	8009d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0201 	bic.w	r2, r2, #1
 8009e3e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2220      	movs	r2, #32
 8009e44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7ff fbce 	bl	8009618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e90:	2b21      	cmp	r3, #33	; 0x21
 8009e92:	d12a      	bne.n	8009eea <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d110      	bne.n	8009ec2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009eae:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ebe:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009ec0:	e013      	b.n	8009eea <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009eea:	bf00      	nop
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f02:	2b21      	cmp	r3, #33	; 0x21
 8009f04:	d12f      	bne.n	8009f66 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d110      	bne.n	8009f34 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f20:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f30:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009f32:	e018      	b.n	8009f66 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f48:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4e:	1c9a      	adds	r2, r3, #2
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b082      	sub	sp, #8
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f88:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fb34 	bl	8009604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fa4:	b084      	sub	sp, #16
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	f107 001c 	add.w	r0, r7, #28
 8009fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d120      	bne.n	8009ffe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	4b20      	ldr	r3, [pc, #128]	; (800a050 <USB_CoreInit+0xac>)
 8009fce:	4013      	ands	r3, r2
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d105      	bne.n	8009ff2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fa52 	bl	800a49c <USB_CoreReset>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]
 8009ffc:	e010      	b.n	800a020 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa46 	bl	800a49c <USB_CoreReset>
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a018:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	2b01      	cmp	r3, #1
 800a024:	d10b      	bne.n	800a03e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f043 0206 	orr.w	r2, r3, #6
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	f043 0220 	orr.w	r2, r3, #32
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a04a:	b004      	add	sp, #16
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	ffbdffbf 	.word	0xffbdffbf

0800a054 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f023 0201 	bic.w	r2, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d106      	bne.n	800a0a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60da      	str	r2, [r3, #12]
 800a0a0:	e00b      	b.n	800a0ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a0a2:	78fb      	ldrb	r3, [r7, #3]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60da      	str	r2, [r3, #12]
 800a0b4:	e001      	b.n	800a0ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e003      	b.n	800a0c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a0ba:	2032      	movs	r0, #50	; 0x32
 800a0bc:	f7fa fd68 	bl	8004b90 <HAL_Delay>

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b086      	sub	sp, #24
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a0da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	e009      	b.n	800a100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	3340      	adds	r3, #64	; 0x40
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2b0e      	cmp	r3, #14
 800a104:	d9f2      	bls.n	800a0ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d11c      	bne.n	800a146 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a11a:	f043 0302 	orr.w	r3, r3, #2
 800a11e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a124:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	e005      	b.n	800a152 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a158:	461a      	mov	r2, r3
 800a15a:	2300      	movs	r3, #0
 800a15c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16c:	461a      	mov	r2, r3
 800a16e:	680b      	ldr	r3, [r1, #0]
 800a170:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	2b01      	cmp	r3, #1
 800a176:	d10c      	bne.n	800a192 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d104      	bne.n	800a188 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a17e:	2100      	movs	r1, #0
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f959 	bl	800a438 <USB_SetDevSpeed>
 800a186:	e018      	b.n	800a1ba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a188:	2101      	movs	r1, #1
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f954 	bl	800a438 <USB_SetDevSpeed>
 800a190:	e013      	b.n	800a1ba <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	2b03      	cmp	r3, #3
 800a196:	d10c      	bne.n	800a1b2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d104      	bne.n	800a1a8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a19e:	2100      	movs	r1, #0
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f949 	bl	800a438 <USB_SetDevSpeed>
 800a1a6:	e008      	b.n	800a1ba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f944 	bl	800a438 <USB_SetDevSpeed>
 800a1b0:	e003      	b.n	800a1ba <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a1b2:	2103      	movs	r1, #3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f93f 	bl	800a438 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1ba:	2110      	movs	r1, #16
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f8f3 	bl	800a3a8 <USB_FlushTxFifo>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f911 	bl	800a3f4 <USB_FlushRxFifo>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a200:	2300      	movs	r3, #0
 800a202:	613b      	str	r3, [r7, #16]
 800a204:	e043      	b.n	800a28e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a21c:	d118      	bne.n	800a250 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	015a      	lsls	r2, r3, #5
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4413      	add	r3, r2
 800a22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a230:	461a      	mov	r2, r3
 800a232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	e013      	b.n	800a262 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a246:	461a      	mov	r2, r3
 800a248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	e008      	b.n	800a262 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25c:	461a      	mov	r2, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26e:	461a      	mov	r2, r3
 800a270:	2300      	movs	r3, #0
 800a272:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a280:	461a      	mov	r2, r3
 800a282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	3301      	adds	r3, #1
 800a28c:	613b      	str	r3, [r7, #16]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	429a      	cmp	r2, r3
 800a294:	d3b7      	bcc.n	800a206 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a296:	2300      	movs	r3, #0
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	e043      	b.n	800a324 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2b2:	d118      	bne.n	800a2e6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10a      	bne.n	800a2d0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	e013      	b.n	800a2f8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2dc:	461a      	mov	r2, r3
 800a2de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2e2:	6013      	str	r3, [r2, #0]
 800a2e4:	e008      	b.n	800a2f8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a304:	461a      	mov	r2, r3
 800a306:	2300      	movs	r3, #0
 800a308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a316:	461a      	mov	r2, r3
 800a318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a31c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	3301      	adds	r3, #1
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d3b7      	bcc.n	800a29c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a33a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a33e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a34c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	2b00      	cmp	r3, #0
 800a352:	d105      	bne.n	800a360 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	f043 0210 	orr.w	r2, r3, #16
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <USB_DevInit+0x2d4>)
 800a366:	4313      	orrs	r3, r2
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d005      	beq.n	800a37e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f043 0208 	orr.w	r2, r3, #8
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a380:	2b01      	cmp	r3, #1
 800a382:	d105      	bne.n	800a390 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <USB_DevInit+0x2d8>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a39c:	b004      	add	sp, #16
 800a39e:	4770      	bx	lr
 800a3a0:	803c3800 	.word	0x803c3800
 800a3a4:	40000004 	.word	0x40000004

0800a3a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	019b      	lsls	r3, r3, #6
 800a3ba:	f043 0220 	orr.w	r2, r3, #32
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <USB_FlushTxFifo+0x48>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d901      	bls.n	800a3d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e006      	b.n	800a3e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	f003 0320 	and.w	r3, r3, #32
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	d0f0      	beq.n	800a3c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	00030d40 	.word	0x00030d40

0800a3f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2210      	movs	r2, #16
 800a404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3301      	adds	r3, #1
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4a09      	ldr	r2, [pc, #36]	; (800a434 <USB_FlushRxFifo+0x40>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d901      	bls.n	800a418 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e006      	b.n	800a426 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b10      	cmp	r3, #16
 800a422:	d0f0      	beq.n	800a406 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	00030d40 	.word	0x00030d40

0800a438 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a458:	4313      	orrs	r3, r2
 800a45a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a484:	f043 0302 	orr.w	r3, r3, #2
 800a488:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a48a:	2003      	movs	r0, #3
 800a48c:	f7fa fb80 	bl	8004b90 <HAL_Delay>

  return HAL_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
	...

0800a49c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4a13      	ldr	r2, [pc, #76]	; (800a500 <USB_CoreReset+0x64>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d901      	bls.n	800a4ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e01b      	b.n	800a4f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	daf2      	bge.n	800a4a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f043 0201 	orr.w	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4a09      	ldr	r2, [pc, #36]	; (800a500 <USB_CoreReset+0x64>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d901      	bls.n	800a4e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e006      	b.n	800a4f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d0f0      	beq.n	800a4d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	00030d40 	.word	0x00030d40

0800a504 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	  IP_ADDRESS[0] = IP_ADDR0;
 800a50a:	4b8b      	ldr	r3, [pc, #556]	; (800a738 <MX_LWIP_Init+0x234>)
 800a50c:	22c0      	movs	r2, #192	; 0xc0
 800a50e:	701a      	strb	r2, [r3, #0]
	  IP_ADDRESS[1] = IP_ADDR1;
 800a510:	4b89      	ldr	r3, [pc, #548]	; (800a738 <MX_LWIP_Init+0x234>)
 800a512:	22a8      	movs	r2, #168	; 0xa8
 800a514:	705a      	strb	r2, [r3, #1]
	  IP_ADDRESS[2] = IP_ADDR2;
 800a516:	4b88      	ldr	r3, [pc, #544]	; (800a738 <MX_LWIP_Init+0x234>)
 800a518:	2200      	movs	r2, #0
 800a51a:	709a      	strb	r2, [r3, #2]
	  IP_ADDRESS[3] = IP_ADDR3;
 800a51c:	4b86      	ldr	r3, [pc, #536]	; (800a738 <MX_LWIP_Init+0x234>)
 800a51e:	2206      	movs	r2, #6
 800a520:	70da      	strb	r2, [r3, #3]
	  NETMASK_ADDRESS[0] = NETMASK_ADDR0;
 800a522:	4b86      	ldr	r3, [pc, #536]	; (800a73c <MX_LWIP_Init+0x238>)
 800a524:	22ff      	movs	r2, #255	; 0xff
 800a526:	701a      	strb	r2, [r3, #0]
	  NETMASK_ADDRESS[1] = NETMASK_ADDR1;
 800a528:	4b84      	ldr	r3, [pc, #528]	; (800a73c <MX_LWIP_Init+0x238>)
 800a52a:	22ff      	movs	r2, #255	; 0xff
 800a52c:	705a      	strb	r2, [r3, #1]
	  NETMASK_ADDRESS[2] = NETMASK_ADDR2;
 800a52e:	4b83      	ldr	r3, [pc, #524]	; (800a73c <MX_LWIP_Init+0x238>)
 800a530:	22ff      	movs	r2, #255	; 0xff
 800a532:	709a      	strb	r2, [r3, #2]
	  NETMASK_ADDRESS[3] = NETMASK_ADDR3;
 800a534:	4b81      	ldr	r3, [pc, #516]	; (800a73c <MX_LWIP_Init+0x238>)
 800a536:	2200      	movs	r2, #0
 800a538:	70da      	strb	r2, [r3, #3]
	  GATEWAY_ADDRESS[0] = GW_ADDR0;
 800a53a:	4b81      	ldr	r3, [pc, #516]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a53c:	22c0      	movs	r2, #192	; 0xc0
 800a53e:	701a      	strb	r2, [r3, #0]
	  GATEWAY_ADDRESS[1] = GW_ADDR1;
 800a540:	4b7f      	ldr	r3, [pc, #508]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a542:	22a8      	movs	r2, #168	; 0xa8
 800a544:	705a      	strb	r2, [r3, #1]
	  GATEWAY_ADDRESS[2] = GW_ADDR2;
 800a546:	4b7e      	ldr	r3, [pc, #504]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	709a      	strb	r2, [r3, #2]
	  GATEWAY_ADDRESS[3] = GW_ADDR3;
 800a54c:	4b7c      	ldr	r3, [pc, #496]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a54e:	2201      	movs	r2, #1
 800a550:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a552:	f000 fc17 	bl	800ad84 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a556:	4b78      	ldr	r3, [pc, #480]	; (800a738 <MX_LWIP_Init+0x234>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	061a      	lsls	r2, r3, #24
 800a55c:	4b76      	ldr	r3, [pc, #472]	; (800a738 <MX_LWIP_Init+0x234>)
 800a55e:	785b      	ldrb	r3, [r3, #1]
 800a560:	041b      	lsls	r3, r3, #16
 800a562:	431a      	orrs	r2, r3
 800a564:	4b74      	ldr	r3, [pc, #464]	; (800a738 <MX_LWIP_Init+0x234>)
 800a566:	789b      	ldrb	r3, [r3, #2]
 800a568:	021b      	lsls	r3, r3, #8
 800a56a:	4313      	orrs	r3, r2
 800a56c:	4a72      	ldr	r2, [pc, #456]	; (800a738 <MX_LWIP_Init+0x234>)
 800a56e:	78d2      	ldrb	r2, [r2, #3]
 800a570:	4313      	orrs	r3, r2
 800a572:	061a      	lsls	r2, r3, #24
 800a574:	4b70      	ldr	r3, [pc, #448]	; (800a738 <MX_LWIP_Init+0x234>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	0619      	lsls	r1, r3, #24
 800a57a:	4b6f      	ldr	r3, [pc, #444]	; (800a738 <MX_LWIP_Init+0x234>)
 800a57c:	785b      	ldrb	r3, [r3, #1]
 800a57e:	041b      	lsls	r3, r3, #16
 800a580:	4319      	orrs	r1, r3
 800a582:	4b6d      	ldr	r3, [pc, #436]	; (800a738 <MX_LWIP_Init+0x234>)
 800a584:	789b      	ldrb	r3, [r3, #2]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	430b      	orrs	r3, r1
 800a58a:	496b      	ldr	r1, [pc, #428]	; (800a738 <MX_LWIP_Init+0x234>)
 800a58c:	78c9      	ldrb	r1, [r1, #3]
 800a58e:	430b      	orrs	r3, r1
 800a590:	021b      	lsls	r3, r3, #8
 800a592:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a596:	431a      	orrs	r2, r3
 800a598:	4b67      	ldr	r3, [pc, #412]	; (800a738 <MX_LWIP_Init+0x234>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	0619      	lsls	r1, r3, #24
 800a59e:	4b66      	ldr	r3, [pc, #408]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	041b      	lsls	r3, r3, #16
 800a5a4:	4319      	orrs	r1, r3
 800a5a6:	4b64      	ldr	r3, [pc, #400]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5a8:	789b      	ldrb	r3, [r3, #2]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	4962      	ldr	r1, [pc, #392]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5b0:	78c9      	ldrb	r1, [r1, #3]
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	0a1b      	lsrs	r3, r3, #8
 800a5b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	4b5e      	ldr	r3, [pc, #376]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	0619      	lsls	r1, r3, #24
 800a5c2:	4b5d      	ldr	r3, [pc, #372]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	041b      	lsls	r3, r3, #16
 800a5c8:	4319      	orrs	r1, r3
 800a5ca:	4b5b      	ldr	r3, [pc, #364]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5cc:	789b      	ldrb	r3, [r3, #2]
 800a5ce:	021b      	lsls	r3, r3, #8
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	4959      	ldr	r1, [pc, #356]	; (800a738 <MX_LWIP_Init+0x234>)
 800a5d4:	78c9      	ldrb	r1, [r1, #3]
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	0e1b      	lsrs	r3, r3, #24
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	4a59      	ldr	r2, [pc, #356]	; (800a744 <MX_LWIP_Init+0x240>)
 800a5de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a5e0:	4b56      	ldr	r3, [pc, #344]	; (800a73c <MX_LWIP_Init+0x238>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	061a      	lsls	r2, r3, #24
 800a5e6:	4b55      	ldr	r3, [pc, #340]	; (800a73c <MX_LWIP_Init+0x238>)
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	041b      	lsls	r3, r3, #16
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	4b53      	ldr	r3, [pc, #332]	; (800a73c <MX_LWIP_Init+0x238>)
 800a5f0:	789b      	ldrb	r3, [r3, #2]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	4a51      	ldr	r2, [pc, #324]	; (800a73c <MX_LWIP_Init+0x238>)
 800a5f8:	78d2      	ldrb	r2, [r2, #3]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	061a      	lsls	r2, r3, #24
 800a5fe:	4b4f      	ldr	r3, [pc, #316]	; (800a73c <MX_LWIP_Init+0x238>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	0619      	lsls	r1, r3, #24
 800a604:	4b4d      	ldr	r3, [pc, #308]	; (800a73c <MX_LWIP_Init+0x238>)
 800a606:	785b      	ldrb	r3, [r3, #1]
 800a608:	041b      	lsls	r3, r3, #16
 800a60a:	4319      	orrs	r1, r3
 800a60c:	4b4b      	ldr	r3, [pc, #300]	; (800a73c <MX_LWIP_Init+0x238>)
 800a60e:	789b      	ldrb	r3, [r3, #2]
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	430b      	orrs	r3, r1
 800a614:	4949      	ldr	r1, [pc, #292]	; (800a73c <MX_LWIP_Init+0x238>)
 800a616:	78c9      	ldrb	r1, [r1, #3]
 800a618:	430b      	orrs	r3, r1
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a620:	431a      	orrs	r2, r3
 800a622:	4b46      	ldr	r3, [pc, #280]	; (800a73c <MX_LWIP_Init+0x238>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	0619      	lsls	r1, r3, #24
 800a628:	4b44      	ldr	r3, [pc, #272]	; (800a73c <MX_LWIP_Init+0x238>)
 800a62a:	785b      	ldrb	r3, [r3, #1]
 800a62c:	041b      	lsls	r3, r3, #16
 800a62e:	4319      	orrs	r1, r3
 800a630:	4b42      	ldr	r3, [pc, #264]	; (800a73c <MX_LWIP_Init+0x238>)
 800a632:	789b      	ldrb	r3, [r3, #2]
 800a634:	021b      	lsls	r3, r3, #8
 800a636:	430b      	orrs	r3, r1
 800a638:	4940      	ldr	r1, [pc, #256]	; (800a73c <MX_LWIP_Init+0x238>)
 800a63a:	78c9      	ldrb	r1, [r1, #3]
 800a63c:	430b      	orrs	r3, r1
 800a63e:	0a1b      	lsrs	r3, r3, #8
 800a640:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a644:	431a      	orrs	r2, r3
 800a646:	4b3d      	ldr	r3, [pc, #244]	; (800a73c <MX_LWIP_Init+0x238>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	0619      	lsls	r1, r3, #24
 800a64c:	4b3b      	ldr	r3, [pc, #236]	; (800a73c <MX_LWIP_Init+0x238>)
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	041b      	lsls	r3, r3, #16
 800a652:	4319      	orrs	r1, r3
 800a654:	4b39      	ldr	r3, [pc, #228]	; (800a73c <MX_LWIP_Init+0x238>)
 800a656:	789b      	ldrb	r3, [r3, #2]
 800a658:	021b      	lsls	r3, r3, #8
 800a65a:	430b      	orrs	r3, r1
 800a65c:	4937      	ldr	r1, [pc, #220]	; (800a73c <MX_LWIP_Init+0x238>)
 800a65e:	78c9      	ldrb	r1, [r1, #3]
 800a660:	430b      	orrs	r3, r1
 800a662:	0e1b      	lsrs	r3, r3, #24
 800a664:	4313      	orrs	r3, r2
 800a666:	4a38      	ldr	r2, [pc, #224]	; (800a748 <MX_LWIP_Init+0x244>)
 800a668:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a66a:	4b35      	ldr	r3, [pc, #212]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	061a      	lsls	r2, r3, #24
 800a670:	4b33      	ldr	r3, [pc, #204]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a672:	785b      	ldrb	r3, [r3, #1]
 800a674:	041b      	lsls	r3, r3, #16
 800a676:	431a      	orrs	r2, r3
 800a678:	4b31      	ldr	r3, [pc, #196]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a67a:	789b      	ldrb	r3, [r3, #2]
 800a67c:	021b      	lsls	r3, r3, #8
 800a67e:	4313      	orrs	r3, r2
 800a680:	4a2f      	ldr	r2, [pc, #188]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a682:	78d2      	ldrb	r2, [r2, #3]
 800a684:	4313      	orrs	r3, r2
 800a686:	061a      	lsls	r2, r3, #24
 800a688:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	0619      	lsls	r1, r3, #24
 800a68e:	4b2c      	ldr	r3, [pc, #176]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	041b      	lsls	r3, r3, #16
 800a694:	4319      	orrs	r1, r3
 800a696:	4b2a      	ldr	r3, [pc, #168]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a698:	789b      	ldrb	r3, [r3, #2]
 800a69a:	021b      	lsls	r3, r3, #8
 800a69c:	430b      	orrs	r3, r1
 800a69e:	4928      	ldr	r1, [pc, #160]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6a0:	78c9      	ldrb	r1, [r1, #3]
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	021b      	lsls	r3, r3, #8
 800a6a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	4b24      	ldr	r3, [pc, #144]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	0619      	lsls	r1, r3, #24
 800a6b2:	4b23      	ldr	r3, [pc, #140]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	041b      	lsls	r3, r3, #16
 800a6b8:	4319      	orrs	r1, r3
 800a6ba:	4b21      	ldr	r3, [pc, #132]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6bc:	789b      	ldrb	r3, [r3, #2]
 800a6be:	021b      	lsls	r3, r3, #8
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	491f      	ldr	r1, [pc, #124]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6c4:	78c9      	ldrb	r1, [r1, #3]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	0619      	lsls	r1, r3, #24
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	041b      	lsls	r3, r3, #16
 800a6dc:	4319      	orrs	r1, r3
 800a6de:	4b18      	ldr	r3, [pc, #96]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6e0:	789b      	ldrb	r3, [r3, #2]
 800a6e2:	021b      	lsls	r3, r3, #8
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	4916      	ldr	r1, [pc, #88]	; (800a740 <MX_LWIP_Init+0x23c>)
 800a6e8:	78c9      	ldrb	r1, [r1, #3]
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	0e1b      	lsrs	r3, r3, #24
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	4a16      	ldr	r2, [pc, #88]	; (800a74c <MX_LWIP_Init+0x248>)
 800a6f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a6f4:	4b16      	ldr	r3, [pc, #88]	; (800a750 <MX_LWIP_Init+0x24c>)
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	4b16      	ldr	r3, [pc, #88]	; (800a754 <MX_LWIP_Init+0x250>)
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	4b12      	ldr	r3, [pc, #72]	; (800a74c <MX_LWIP_Init+0x248>)
 800a702:	4a11      	ldr	r2, [pc, #68]	; (800a748 <MX_LWIP_Init+0x244>)
 800a704:	490f      	ldr	r1, [pc, #60]	; (800a744 <MX_LWIP_Init+0x240>)
 800a706:	4814      	ldr	r0, [pc, #80]	; (800a758 <MX_LWIP_Init+0x254>)
 800a708:	f000 ffe2 	bl	800b6d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a70c:	4812      	ldr	r0, [pc, #72]	; (800a758 <MX_LWIP_Init+0x254>)
 800a70e:	f001 f98f 	bl	800ba30 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <MX_LWIP_Init+0x254>)
 800a714:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a718:	089b      	lsrs	r3, r3, #2
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a724:	480c      	ldr	r0, [pc, #48]	; (800a758 <MX_LWIP_Init+0x254>)
 800a726:	f001 f993 	bl	800ba50 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a72a:	e002      	b.n	800a732 <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 800a72c:	480a      	ldr	r0, [pc, #40]	; (800a758 <MX_LWIP_Init+0x254>)
 800a72e:	f001 f9fb 	bl	800bb28 <netif_set_down>
}
 800a732:	bf00      	nop
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000f10 	.word	0x20000f10
 800a73c:	20000f0c 	.word	0x20000f0c
 800a740:	20000ed4 	.word	0x20000ed4
 800a744:	20000f08 	.word	0x20000f08
 800a748:	20000f14 	.word	0x20000f14
 800a74c:	20000f18 	.word	0x20000f18
 800a750:	08015215 	.word	0x08015215
 800a754:	0800ab8d 	.word	0x0800ab8d
 800a758:	20000ed8 	.word	0x20000ed8

0800a75c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a768:	4b49      	ldr	r3, [pc, #292]	; (800a890 <low_level_init+0x134>)
 800a76a:	4a4a      	ldr	r2, [pc, #296]	; (800a894 <low_level_init+0x138>)
 800a76c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a76e:	4b48      	ldr	r3, [pc, #288]	; (800a890 <low_level_init+0x134>)
 800a770:	2201      	movs	r2, #1
 800a772:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a774:	4b46      	ldr	r3, [pc, #280]	; (800a890 <low_level_init+0x134>)
 800a776:	2200      	movs	r2, #0
 800a778:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a77a:	2300      	movs	r3, #0
 800a77c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a77e:	2380      	movs	r3, #128	; 0x80
 800a780:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a782:	23e1      	movs	r3, #225	; 0xe1
 800a784:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a786:	2300      	movs	r3, #0
 800a788:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a78a:	2300      	movs	r3, #0
 800a78c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a78e:	2300      	movs	r3, #0
 800a790:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a792:	4a3f      	ldr	r2, [pc, #252]	; (800a890 <low_level_init+0x134>)
 800a794:	f107 0308 	add.w	r3, r7, #8
 800a798:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a79a:	4b3d      	ldr	r3, [pc, #244]	; (800a890 <low_level_init+0x134>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a7a0:	4b3b      	ldr	r3, [pc, #236]	; (800a890 <low_level_init+0x134>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a7a6:	4b3a      	ldr	r3, [pc, #232]	; (800a890 <low_level_init+0x134>)
 800a7a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a7ac:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a7ae:	4838      	ldr	r0, [pc, #224]	; (800a890 <low_level_init+0x134>)
 800a7b0:	f7fb f9b6 	bl	8005b20 <HAL_ETH_Init>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d108      	bne.n	800a7d0 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a7c4:	f043 0304 	orr.w	r3, r3, #4
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	4a31      	ldr	r2, [pc, #196]	; (800a898 <low_level_init+0x13c>)
 800a7d4:	4931      	ldr	r1, [pc, #196]	; (800a89c <low_level_init+0x140>)
 800a7d6:	482e      	ldr	r0, [pc, #184]	; (800a890 <low_level_init+0x134>)
 800a7d8:	f7fb fb3e 	bl	8005e58 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a7dc:	2304      	movs	r3, #4
 800a7de:	4a30      	ldr	r2, [pc, #192]	; (800a8a0 <low_level_init+0x144>)
 800a7e0:	4930      	ldr	r1, [pc, #192]	; (800a8a4 <low_level_init+0x148>)
 800a7e2:	482b      	ldr	r0, [pc, #172]	; (800a890 <low_level_init+0x134>)
 800a7e4:	f7fb fba1 	bl	8005f2a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2206      	movs	r2, #6
 800a7ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a7f0:	4b27      	ldr	r3, [pc, #156]	; (800a890 <low_level_init+0x134>)
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	781a      	ldrb	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a7fc:	4b24      	ldr	r3, [pc, #144]	; (800a890 <low_level_init+0x134>)
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	785a      	ldrb	r2, [r3, #1]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a808:	4b21      	ldr	r3, [pc, #132]	; (800a890 <low_level_init+0x134>)
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	789a      	ldrb	r2, [r3, #2]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a814:	4b1e      	ldr	r3, [pc, #120]	; (800a890 <low_level_init+0x134>)
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	78da      	ldrb	r2, [r3, #3]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a820:	4b1b      	ldr	r3, [pc, #108]	; (800a890 <low_level_init+0x134>)
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	791a      	ldrb	r2, [r3, #4]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a82c:	4b18      	ldr	r3, [pc, #96]	; (800a890 <low_level_init+0x134>)
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	795a      	ldrb	r2, [r3, #5]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a83e:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a846:	f043 030a 	orr.w	r3, r3, #10
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a852:	480f      	ldr	r0, [pc, #60]	; (800a890 <low_level_init+0x134>)
 800a854:	f7fb fe12 	bl	800647c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a858:	f107 0310 	add.w	r3, r7, #16
 800a85c:	461a      	mov	r2, r3
 800a85e:	211d      	movs	r1, #29
 800a860:	480b      	ldr	r0, [pc, #44]	; (800a890 <low_level_init+0x134>)
 800a862:	f7fb fd3d 	bl	80062e0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f043 030b 	orr.w	r3, r3, #11
 800a86c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	461a      	mov	r2, r3
 800a872:	211d      	movs	r1, #29
 800a874:	4806      	ldr	r0, [pc, #24]	; (800a890 <low_level_init+0x134>)
 800a876:	f7fb fd9b 	bl	80063b0 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	461a      	mov	r2, r3
 800a880:	211d      	movs	r1, #29
 800a882:	4803      	ldr	r0, [pc, #12]	; (800a890 <low_level_init+0x134>)
 800a884:	f7fb fd2c 	bl	80062e0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800a888:	bf00      	nop
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20000638 	.word	0x20000638
 800a894:	40028000 	.word	0x40028000
 800a898:	200027ec 	.word	0x200027ec
 800a89c:	20000f1c 	.word	0x20000f1c
 800a8a0:	20000f9c 	.word	0x20000f9c
 800a8a4:	2000276c 	.word	0x2000276c

0800a8a8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08a      	sub	sp, #40	; 0x28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a8b2:	4b4b      	ldr	r3, [pc, #300]	; (800a9e0 <low_level_output+0x138>)
 800a8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a8ca:	4b45      	ldr	r3, [pc, #276]	; (800a9e0 <low_level_output+0x138>)
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	623b      	str	r3, [r7, #32]
 800a8d8:	e05a      	b.n	800a990 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da03      	bge.n	800a8ea <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a8e2:	23f8      	movs	r3, #248	; 0xf8
 800a8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a8e8:	e05c      	b.n	800a9a4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	895b      	ldrh	r3, [r3, #10]
 800a8ee:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a8f4:	e02f      	b.n	800a956 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	18d0      	adds	r0, r2, r3
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	18d1      	adds	r1, r2, r3
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	461a      	mov	r2, r3
 800a90e:	f00a fdbe 	bl	801548e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da03      	bge.n	800a928 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a920:	23f8      	movs	r3, #248	; 0xf8
 800a922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a926:	e03d      	b.n	800a9a4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a938:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a944:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a950:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	4413      	add	r3, r2
 800a95c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a960:	4293      	cmp	r3, r2
 800a962:	d8c8      	bhi.n	800a8f6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a964:	69fa      	ldr	r2, [r7, #28]
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	18d0      	adds	r0, r2, r3
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	4413      	add	r3, r2
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4619      	mov	r1, r3
 800a976:	f00a fd8a 	bl	801548e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1a1      	bne.n	800a8da <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a996:	6979      	ldr	r1, [r7, #20]
 800a998:	4811      	ldr	r0, [pc, #68]	; (800a9e0 <low_level_output+0x138>)
 800a99a:	f7fb fb33 	bl	8006004 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a9a4:	4b0e      	ldr	r3, [pc, #56]	; (800a9e0 <low_level_output+0x138>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	f241 0314 	movw	r3, #4116	; 0x1014
 800a9ac:	4413      	add	r3, r2
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00d      	beq.n	800a9d4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a9b8:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <low_level_output+0x138>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	f241 0314 	movw	r3, #4116	; 0x1014
 800a9c0:	4413      	add	r3, r2
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a9c6:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <low_level_output+0x138>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	f241 0304 	movw	r3, #4100	; 0x1004
 800a9ce:	4413      	add	r3, r2
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a9d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3728      	adds	r7, #40	; 0x28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	20000638 	.word	0x20000638

0800a9e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08c      	sub	sp, #48	; 0x30
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800aa08:	484f      	ldr	r0, [pc, #316]	; (800ab48 <low_level_input+0x164>)
 800aa0a:	f7fb fbe5 	bl	80061d8 <HAL_ETH_GetReceivedFrame>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <low_level_input+0x34>
  
    return NULL;
 800aa14:	2300      	movs	r3, #0
 800aa16:	e092      	b.n	800ab3e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800aa18:	4b4b      	ldr	r3, [pc, #300]	; (800ab48 <low_level_input+0x164>)
 800aa1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800aa1e:	4b4a      	ldr	r3, [pc, #296]	; (800ab48 <low_level_input+0x164>)
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800aa24:	89fb      	ldrh	r3, [r7, #14]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d007      	beq.n	800aa3a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800aa2a:	89fb      	ldrh	r3, [r7, #14]
 800aa2c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800aa30:	4619      	mov	r1, r3
 800aa32:	2000      	movs	r0, #0
 800aa34:	f001 f934 	bl	800bca0 <pbuf_alloc>
 800aa38:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d04b      	beq.n	800aad8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800aa40:	4b41      	ldr	r3, [pc, #260]	; (800ab48 <low_level_input+0x164>)
 800aa42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa44:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa4e:	e040      	b.n	800aad2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	895b      	ldrh	r3, [r3, #10]
 800aa54:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800aa5a:	e021      	b.n	800aaa0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	18d0      	adds	r0, r2, r3
 800aa64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	18d1      	adds	r1, r2, r3
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800aa70:	1a9b      	subs	r3, r3, r2
 800aa72:	461a      	mov	r2, r3
 800aa74:	f00a fd0b 	bl	801548e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800aa84:	69fa      	ldr	r2, [r7, #28]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800aa8e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800aa90:	69ba      	ldr	r2, [r7, #24]
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800aa9a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d8d6      	bhi.n	800aa5c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	18d0      	adds	r0, r2, r3
 800aab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	4619      	mov	r1, r3
 800aac0:	f00a fce5 	bl	801548e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	4413      	add	r3, r2
 800aaca:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1bb      	bne.n	800aa50 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800aad8:	4b1b      	ldr	r3, [pc, #108]	; (800ab48 <low_level_input+0x164>)
 800aada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aadc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	e00b      	b.n	800aafc <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <low_level_input+0x164>)
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d3ee      	bcc.n	800aae4 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800ab06:	4b10      	ldr	r3, [pc, #64]	; (800ab48 <low_level_input+0x164>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <low_level_input+0x164>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	f241 0314 	movw	r3, #4116	; 0x1014
 800ab14:	4413      	add	r3, r2
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00d      	beq.n	800ab3c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800ab20:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <low_level_input+0x164>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	f241 0314 	movw	r3, #4116	; 0x1014
 800ab28:	4413      	add	r3, r2
 800ab2a:	2280      	movs	r2, #128	; 0x80
 800ab2c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800ab2e:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <low_level_input+0x164>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	f241 0308 	movw	r3, #4104	; 0x1008
 800ab36:	4413      	add	r3, r2
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3730      	adds	r7, #48	; 0x30
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20000638 	.word	0x20000638

0800ab4c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff ff45 	bl	800a9e4 <low_level_input>
 800ab5a:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d010      	beq.n	800ab84 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	4798      	blx	r3
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800ab70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d006      	beq.n	800ab86 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f001 fb71 	bl	800c260 <pbuf_free>
    p = NULL;    
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60fb      	str	r3, [r7, #12]
 800ab82:	e000      	b.n	800ab86 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800ab84:	bf00      	nop
  }
}
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d106      	bne.n	800aba8 <ethernetif_init+0x1c>
 800ab9a:	4b0e      	ldr	r3, [pc, #56]	; (800abd4 <ethernetif_init+0x48>)
 800ab9c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800aba0:	490d      	ldr	r1, [pc, #52]	; (800abd8 <ethernetif_init+0x4c>)
 800aba2:	480e      	ldr	r0, [pc, #56]	; (800abdc <ethernetif_init+0x50>)
 800aba4:	f00b fb86 	bl	80162b4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2273      	movs	r2, #115	; 0x73
 800abac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2274      	movs	r2, #116	; 0x74
 800abb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a09      	ldr	r2, [pc, #36]	; (800abe0 <ethernetif_init+0x54>)
 800abbc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a08      	ldr	r2, [pc, #32]	; (800abe4 <ethernetif_init+0x58>)
 800abc2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff fdc9 	bl	800a75c <low_level_init>

  return ERR_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	0801a2d0 	.word	0x0801a2d0
 800abd8:	0801a2ec 	.word	0x0801a2ec
 800abdc:	0801a2fc 	.word	0x0801a2fc
 800abe0:	080136e5 	.word	0x080136e5
 800abe4:	0800a8a9 	.word	0x0800a8a9

0800abe8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800abec:	f7f9 ffc4 	bl	8004b78 <HAL_GetTick>
 800abf0:	4603      	mov	r3, r0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <arm_rms_f322>:

void arm_rms_f322(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b08a      	sub	sp, #40	; 0x28
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 800ac02:	f04f 0300 	mov.w	r3, #0
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24

#if defined (ARM_MATH_DSP)
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	089b      	lsrs	r3, r3, #2
 800ac0c:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 800ac0e:	e046      	b.n	800ac9e <arm_rms_f322+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	60fa      	str	r2, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	61fb      	str	r3, [r7, #28]
    sum += in * in;
 800ac1a:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac1e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    in = *pSrc++;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	1d1a      	adds	r2, r3, #4
 800ac36:	60fa      	str	r2, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	61fb      	str	r3, [r7, #28]
    sum += in * in;
 800ac3c:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac40:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    in = *pSrc++;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	60fa      	str	r2, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	61fb      	str	r3, [r7, #28]
    sum += in * in;
 800ac5e:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac62:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    in = *pSrc++;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	60fa      	str	r2, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	61fb      	str	r3, [r7, #28]
    sum += in * in;
 800ac80:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac84:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800ac90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1b5      	bne.n	800ac10 <arm_rms_f322+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f003 0303 	and.w	r3, r3, #3
 800acaa:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 800acac:	e013      	b.n	800acd6 <arm_rms_f322+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	1d1a      	adds	r2, r3, #4
 800acb2:	60fa      	str	r2, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	61fb      	str	r3, [r7, #28]
    sum += in * in;
 800acb8:	ed97 7a07 	vldr	s14, [r7, #28]
 800acbc:	edd7 7a07 	vldr	s15, [r7, #28]
 800acc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800acc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800accc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e8      	bne.n	800acae <arm_rms_f322+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ace6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800acea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acee:	edc7 7a06 	vstr	s15, [r7, #24]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800acf6:	edd7 7a06 	vldr	s15, [r7, #24]
 800acfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800acfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad02:	db09      	blt.n	800ad18 <arm_rms_f322+0x122>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800ad04:	ed97 0a06 	vldr	s0, [r7, #24]
 800ad08:	f00f fa06 	bl	801a118 <sqrtf>
 800ad0c:	eef0 7a40 	vmov.f32	s15, s0
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	edc3 7a00 	vstr	s15, [r3]
 800ad16:	e003      	b.n	800ad20 <arm_rms_f322+0x12a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f04f 0200 	mov.w	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
}
 800ad20:	bf00      	nop
 800ad22:	3728      	adds	r7, #40	; 0x28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ad32:	88fb      	ldrh	r3, [r7, #6]
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	b21a      	sxth	r2, r3
 800ad38:	88fb      	ldrh	r3, [r7, #6]
 800ad3a:	0a1b      	lsrs	r3, r3, #8
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	b21b      	sxth	r3, r3
 800ad40:	4313      	orrs	r3, r2
 800ad42:	b21b      	sxth	r3, r3
 800ad44:	b29b      	uxth	r3, r3
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	061a      	lsls	r2, r3, #24
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	021b      	lsls	r3, r3, #8
 800ad62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad66:	431a      	orrs	r2, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	0a1b      	lsrs	r3, r3, #8
 800ad6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad70:	431a      	orrs	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	0e1b      	lsrs	r3, r3, #24
 800ad76:	4313      	orrs	r3, r2
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ad8e:	f000 f8d5 	bl	800af3c <mem_init>
  memp_init();
 800ad92:	f000 fbdb 	bl	800b54c <memp_init>
  pbuf_init();
  netif_init();
 800ad96:	f000 fc93 	bl	800b6c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ad9a:	f007 fe9d 	bl	8012ad8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad9e:	f001 fcfd 	bl	800c79c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ada2:	f007 fe11 	bl	80129c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	4603      	mov	r3, r0
 800adb8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800adba:	4b05      	ldr	r3, [pc, #20]	; (800add0 <ptr_to_mem+0x20>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	88fb      	ldrh	r3, [r7, #6]
 800adc0:	4413      	add	r3, r2
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	20000478 	.word	0x20000478

0800add4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a05      	ldr	r2, [pc, #20]	; (800adf4 <mem_to_ptr+0x20>)
 800ade0:	6812      	ldr	r2, [r2, #0]
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	b29b      	uxth	r3, r3
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20000478 	.word	0x20000478

0800adf8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800adf8:	b590      	push	{r4, r7, lr}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ae00:	4b45      	ldr	r3, [pc, #276]	; (800af18 <plug_holes+0x120>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d206      	bcs.n	800ae18 <plug_holes+0x20>
 800ae0a:	4b44      	ldr	r3, [pc, #272]	; (800af1c <plug_holes+0x124>)
 800ae0c:	f240 12df 	movw	r2, #479	; 0x1df
 800ae10:	4943      	ldr	r1, [pc, #268]	; (800af20 <plug_holes+0x128>)
 800ae12:	4844      	ldr	r0, [pc, #272]	; (800af24 <plug_holes+0x12c>)
 800ae14:	f00b fa4e 	bl	80162b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ae18:	4b43      	ldr	r3, [pc, #268]	; (800af28 <plug_holes+0x130>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d306      	bcc.n	800ae30 <plug_holes+0x38>
 800ae22:	4b3e      	ldr	r3, [pc, #248]	; (800af1c <plug_holes+0x124>)
 800ae24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ae28:	4940      	ldr	r1, [pc, #256]	; (800af2c <plug_holes+0x134>)
 800ae2a:	483e      	ldr	r0, [pc, #248]	; (800af24 <plug_holes+0x12c>)
 800ae2c:	f00b fa42 	bl	80162b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	791b      	ldrb	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d006      	beq.n	800ae46 <plug_holes+0x4e>
 800ae38:	4b38      	ldr	r3, [pc, #224]	; (800af1c <plug_holes+0x124>)
 800ae3a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ae3e:	493c      	ldr	r1, [pc, #240]	; (800af30 <plug_holes+0x138>)
 800ae40:	4838      	ldr	r0, [pc, #224]	; (800af24 <plug_holes+0x12c>)
 800ae42:	f00b fa37 	bl	80162b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae4e:	d906      	bls.n	800ae5e <plug_holes+0x66>
 800ae50:	4b32      	ldr	r3, [pc, #200]	; (800af1c <plug_holes+0x124>)
 800ae52:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ae56:	4937      	ldr	r1, [pc, #220]	; (800af34 <plug_holes+0x13c>)
 800ae58:	4832      	ldr	r0, [pc, #200]	; (800af24 <plug_holes+0x12c>)
 800ae5a:	f00b fa2b 	bl	80162b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff ffa4 	bl	800adb0 <ptr_to_mem>
 800ae68:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d024      	beq.n	800aebc <plug_holes+0xc4>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	791b      	ldrb	r3, [r3, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d120      	bne.n	800aebc <plug_holes+0xc4>
 800ae7a:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <plug_holes+0x130>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d01b      	beq.n	800aebc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ae84:	4b2c      	ldr	r3, [pc, #176]	; (800af38 <plug_holes+0x140>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d102      	bne.n	800ae94 <plug_holes+0x9c>
      lfree = mem;
 800ae8e:	4a2a      	ldr	r2, [pc, #168]	; (800af38 <plug_holes+0x140>)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	881a      	ldrh	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aea4:	d00a      	beq.n	800aebc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff ff80 	bl	800adb0 <ptr_to_mem>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff ff8e 	bl	800add4 <mem_to_ptr>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	885b      	ldrh	r3, [r3, #2]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff ff75 	bl	800adb0 <ptr_to_mem>
 800aec6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d01f      	beq.n	800af10 <plug_holes+0x118>
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	791b      	ldrb	r3, [r3, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d11b      	bne.n	800af10 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <plug_holes+0x140>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d102      	bne.n	800aee8 <plug_holes+0xf0>
      lfree = pmem;
 800aee2:	4a15      	ldr	r2, [pc, #84]	; (800af38 <plug_holes+0x140>)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	881a      	ldrh	r2, [r3, #0]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aef8:	d00a      	beq.n	800af10 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	881b      	ldrh	r3, [r3, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff ff56 	bl	800adb0 <ptr_to_mem>
 800af04:	4604      	mov	r4, r0
 800af06:	68b8      	ldr	r0, [r7, #8]
 800af08:	f7ff ff64 	bl	800add4 <mem_to_ptr>
 800af0c:	4603      	mov	r3, r0
 800af0e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800af10:	bf00      	nop
 800af12:	3714      	adds	r7, #20
 800af14:	46bd      	mov	sp, r7
 800af16:	bd90      	pop	{r4, r7, pc}
 800af18:	20000478 	.word	0x20000478
 800af1c:	0801a324 	.word	0x0801a324
 800af20:	0801a354 	.word	0x0801a354
 800af24:	0801a36c 	.word	0x0801a36c
 800af28:	2000047c 	.word	0x2000047c
 800af2c:	0801a394 	.word	0x0801a394
 800af30:	0801a3b0 	.word	0x0801a3b0
 800af34:	0801a3cc 	.word	0x0801a3cc
 800af38:	20000480 	.word	0x20000480

0800af3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800af42:	4b18      	ldr	r3, [pc, #96]	; (800afa4 <mem_init+0x68>)
 800af44:	3303      	adds	r3, #3
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	461a      	mov	r2, r3
 800af4c:	4b16      	ldr	r3, [pc, #88]	; (800afa8 <mem_init+0x6c>)
 800af4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800af50:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <mem_init+0x6c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800af6a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800af6e:	f7ff ff1f 	bl	800adb0 <ptr_to_mem>
 800af72:	4602      	mov	r2, r0
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <mem_init+0x70>)
 800af76:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800af78:	4b0c      	ldr	r3, [pc, #48]	; (800afac <mem_init+0x70>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2201      	movs	r2, #1
 800af7e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800af80:	4b0a      	ldr	r3, [pc, #40]	; (800afac <mem_init+0x70>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af88:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800af8a:	4b08      	ldr	r3, [pc, #32]	; (800afac <mem_init+0x70>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af92:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <mem_init+0x6c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a05      	ldr	r2, [pc, #20]	; (800afb0 <mem_init+0x74>)
 800af9a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20003fd4 	.word	0x20003fd4
 800afa8:	20000478 	.word	0x20000478
 800afac:	2000047c 	.word	0x2000047c
 800afb0:	20000480 	.word	0x20000480

0800afb4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff ff09 	bl	800add4 <mem_to_ptr>
 800afc2:	4603      	mov	r3, r0
 800afc4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff fef0 	bl	800adb0 <ptr_to_mem>
 800afd0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	885b      	ldrh	r3, [r3, #2]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff feea 	bl	800adb0 <ptr_to_mem>
 800afdc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afe6:	d818      	bhi.n	800b01a <mem_link_valid+0x66>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	885b      	ldrh	r3, [r3, #2]
 800afec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aff0:	d813      	bhi.n	800b01a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800aff6:	8afa      	ldrh	r2, [r7, #22]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d004      	beq.n	800b006 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	8afa      	ldrh	r2, [r7, #22]
 800b002:	429a      	cmp	r2, r3
 800b004:	d109      	bne.n	800b01a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b006:	4b08      	ldr	r3, [pc, #32]	; (800b028 <mem_link_valid+0x74>)
 800b008:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d006      	beq.n	800b01e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	8afa      	ldrh	r2, [r7, #22]
 800b016:	429a      	cmp	r2, r3
 800b018:	d001      	beq.n	800b01e <mem_link_valid+0x6a>
    return 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e000      	b.n	800b020 <mem_link_valid+0x6c>
  }
  return 1;
 800b01e:	2301      	movs	r3, #1
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	2000047c 	.word	0x2000047c

0800b02c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d04c      	beq.n	800b0d4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f003 0303 	and.w	r3, r3, #3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b044:	4b25      	ldr	r3, [pc, #148]	; (800b0dc <mem_free+0xb0>)
 800b046:	f240 2273 	movw	r2, #627	; 0x273
 800b04a:	4925      	ldr	r1, [pc, #148]	; (800b0e0 <mem_free+0xb4>)
 800b04c:	4825      	ldr	r0, [pc, #148]	; (800b0e4 <mem_free+0xb8>)
 800b04e:	f00b f931 	bl	80162b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b052:	e040      	b.n	800b0d6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3b08      	subs	r3, #8
 800b058:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b05a:	4b23      	ldr	r3, [pc, #140]	; (800b0e8 <mem_free+0xbc>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	429a      	cmp	r2, r3
 800b062:	d306      	bcc.n	800b072 <mem_free+0x46>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f103 020c 	add.w	r2, r3, #12
 800b06a:	4b20      	ldr	r3, [pc, #128]	; (800b0ec <mem_free+0xc0>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d907      	bls.n	800b082 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b072:	4b1a      	ldr	r3, [pc, #104]	; (800b0dc <mem_free+0xb0>)
 800b074:	f240 227f 	movw	r2, #639	; 0x27f
 800b078:	491d      	ldr	r1, [pc, #116]	; (800b0f0 <mem_free+0xc4>)
 800b07a:	481a      	ldr	r0, [pc, #104]	; (800b0e4 <mem_free+0xb8>)
 800b07c:	f00b f91a 	bl	80162b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b080:	e029      	b.n	800b0d6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d107      	bne.n	800b09a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b08a:	4b14      	ldr	r3, [pc, #80]	; (800b0dc <mem_free+0xb0>)
 800b08c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b090:	4918      	ldr	r1, [pc, #96]	; (800b0f4 <mem_free+0xc8>)
 800b092:	4814      	ldr	r0, [pc, #80]	; (800b0e4 <mem_free+0xb8>)
 800b094:	f00b f90e 	bl	80162b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b098:	e01d      	b.n	800b0d6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff ff8a 	bl	800afb4 <mem_link_valid>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b0a6:	4b0d      	ldr	r3, [pc, #52]	; (800b0dc <mem_free+0xb0>)
 800b0a8:	f240 2295 	movw	r2, #661	; 0x295
 800b0ac:	4912      	ldr	r1, [pc, #72]	; (800b0f8 <mem_free+0xcc>)
 800b0ae:	480d      	ldr	r0, [pc, #52]	; (800b0e4 <mem_free+0xb8>)
 800b0b0:	f00b f900 	bl	80162b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b0b4:	e00f      	b.n	800b0d6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b0bc:	4b0f      	ldr	r3, [pc, #60]	; (800b0fc <mem_free+0xd0>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d202      	bcs.n	800b0cc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b0c6:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <mem_free+0xd0>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff fe93 	bl	800adf8 <plug_holes>
 800b0d2:	e000      	b.n	800b0d6 <mem_free+0xaa>
    return;
 800b0d4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	0801a324 	.word	0x0801a324
 800b0e0:	0801a3f8 	.word	0x0801a3f8
 800b0e4:	0801a36c 	.word	0x0801a36c
 800b0e8:	20000478 	.word	0x20000478
 800b0ec:	2000047c 	.word	0x2000047c
 800b0f0:	0801a41c 	.word	0x0801a41c
 800b0f4:	0801a438 	.word	0x0801a438
 800b0f8:	0801a460 	.word	0x0801a460
 800b0fc:	20000480 	.word	0x20000480

0800b100 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b10c:	887b      	ldrh	r3, [r7, #2]
 800b10e:	3303      	adds	r3, #3
 800b110:	b29b      	uxth	r3, r3
 800b112:	f023 0303 	bic.w	r3, r3, #3
 800b116:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b118:	8bfb      	ldrh	r3, [r7, #30]
 800b11a:	2b0b      	cmp	r3, #11
 800b11c:	d801      	bhi.n	800b122 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b11e:	230c      	movs	r3, #12
 800b120:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b122:	8bfb      	ldrh	r3, [r7, #30]
 800b124:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b128:	d803      	bhi.n	800b132 <mem_trim+0x32>
 800b12a:	8bfa      	ldrh	r2, [r7, #30]
 800b12c:	887b      	ldrh	r3, [r7, #2]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d201      	bcs.n	800b136 <mem_trim+0x36>
    return NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	e0cc      	b.n	800b2d0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b136:	4b68      	ldr	r3, [pc, #416]	; (800b2d8 <mem_trim+0x1d8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d304      	bcc.n	800b14a <mem_trim+0x4a>
 800b140:	4b66      	ldr	r3, [pc, #408]	; (800b2dc <mem_trim+0x1dc>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	429a      	cmp	r2, r3
 800b148:	d306      	bcc.n	800b158 <mem_trim+0x58>
 800b14a:	4b65      	ldr	r3, [pc, #404]	; (800b2e0 <mem_trim+0x1e0>)
 800b14c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b150:	4964      	ldr	r1, [pc, #400]	; (800b2e4 <mem_trim+0x1e4>)
 800b152:	4865      	ldr	r0, [pc, #404]	; (800b2e8 <mem_trim+0x1e8>)
 800b154:	f00b f8ae 	bl	80162b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b158:	4b5f      	ldr	r3, [pc, #380]	; (800b2d8 <mem_trim+0x1d8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d304      	bcc.n	800b16c <mem_trim+0x6c>
 800b162:	4b5e      	ldr	r3, [pc, #376]	; (800b2dc <mem_trim+0x1dc>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d301      	bcc.n	800b170 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	e0af      	b.n	800b2d0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3b08      	subs	r3, #8
 800b174:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b176:	69b8      	ldr	r0, [r7, #24]
 800b178:	f7ff fe2c 	bl	800add4 <mem_to_ptr>
 800b17c:	4603      	mov	r3, r0
 800b17e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	881a      	ldrh	r2, [r3, #0]
 800b184:	8afb      	ldrh	r3, [r7, #22]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	b29b      	uxth	r3, r3
 800b18a:	3b08      	subs	r3, #8
 800b18c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b18e:	8bfa      	ldrh	r2, [r7, #30]
 800b190:	8abb      	ldrh	r3, [r7, #20]
 800b192:	429a      	cmp	r2, r3
 800b194:	d906      	bls.n	800b1a4 <mem_trim+0xa4>
 800b196:	4b52      	ldr	r3, [pc, #328]	; (800b2e0 <mem_trim+0x1e0>)
 800b198:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b19c:	4953      	ldr	r1, [pc, #332]	; (800b2ec <mem_trim+0x1ec>)
 800b19e:	4852      	ldr	r0, [pc, #328]	; (800b2e8 <mem_trim+0x1e8>)
 800b1a0:	f00b f888 	bl	80162b4 <iprintf>
  if (newsize > size) {
 800b1a4:	8bfa      	ldrh	r2, [r7, #30]
 800b1a6:	8abb      	ldrh	r3, [r7, #20]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d901      	bls.n	800b1b0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e08f      	b.n	800b2d0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b1b0:	8bfa      	ldrh	r2, [r7, #30]
 800b1b2:	8abb      	ldrh	r3, [r7, #20]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d101      	bne.n	800b1bc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	e089      	b.n	800b2d0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	881b      	ldrh	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fdf5 	bl	800adb0 <ptr_to_mem>
 800b1c6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	791b      	ldrb	r3, [r3, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d13f      	bne.n	800b250 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1d8:	d106      	bne.n	800b1e8 <mem_trim+0xe8>
 800b1da:	4b41      	ldr	r3, [pc, #260]	; (800b2e0 <mem_trim+0x1e0>)
 800b1dc:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b1e0:	4943      	ldr	r1, [pc, #268]	; (800b2f0 <mem_trim+0x1f0>)
 800b1e2:	4841      	ldr	r0, [pc, #260]	; (800b2e8 <mem_trim+0x1e8>)
 800b1e4:	f00b f866 	bl	80162b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1ee:	8afa      	ldrh	r2, [r7, #22]
 800b1f0:	8bfb      	ldrh	r3, [r7, #30]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	3308      	adds	r3, #8
 800b1f8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b1fa:	4b3e      	ldr	r3, [pc, #248]	; (800b2f4 <mem_trim+0x1f4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	429a      	cmp	r2, r3
 800b202:	d106      	bne.n	800b212 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b204:	89fb      	ldrh	r3, [r7, #14]
 800b206:	4618      	mov	r0, r3
 800b208:	f7ff fdd2 	bl	800adb0 <ptr_to_mem>
 800b20c:	4602      	mov	r2, r0
 800b20e:	4b39      	ldr	r3, [pc, #228]	; (800b2f4 <mem_trim+0x1f4>)
 800b210:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b212:	89fb      	ldrh	r3, [r7, #14]
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fdcb 	bl	800adb0 <ptr_to_mem>
 800b21a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2200      	movs	r2, #0
 800b220:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	89ba      	ldrh	r2, [r7, #12]
 800b226:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	8afa      	ldrh	r2, [r7, #22]
 800b22c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	89fa      	ldrh	r2, [r7, #14]
 800b232:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b23c:	d047      	beq.n	800b2ce <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	4618      	mov	r0, r3
 800b244:	f7ff fdb4 	bl	800adb0 <ptr_to_mem>
 800b248:	4602      	mov	r2, r0
 800b24a:	89fb      	ldrh	r3, [r7, #14]
 800b24c:	8053      	strh	r3, [r2, #2]
 800b24e:	e03e      	b.n	800b2ce <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b250:	8bfb      	ldrh	r3, [r7, #30]
 800b252:	f103 0214 	add.w	r2, r3, #20
 800b256:	8abb      	ldrh	r3, [r7, #20]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d838      	bhi.n	800b2ce <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b25c:	8afa      	ldrh	r2, [r7, #22]
 800b25e:	8bfb      	ldrh	r3, [r7, #30]
 800b260:	4413      	add	r3, r2
 800b262:	b29b      	uxth	r3, r3
 800b264:	3308      	adds	r3, #8
 800b266:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b270:	d106      	bne.n	800b280 <mem_trim+0x180>
 800b272:	4b1b      	ldr	r3, [pc, #108]	; (800b2e0 <mem_trim+0x1e0>)
 800b274:	f240 3216 	movw	r2, #790	; 0x316
 800b278:	491d      	ldr	r1, [pc, #116]	; (800b2f0 <mem_trim+0x1f0>)
 800b27a:	481b      	ldr	r0, [pc, #108]	; (800b2e8 <mem_trim+0x1e8>)
 800b27c:	f00b f81a 	bl	80162b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b280:	89fb      	ldrh	r3, [r7, #14]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fd94 	bl	800adb0 <ptr_to_mem>
 800b288:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b28a:	4b1a      	ldr	r3, [pc, #104]	; (800b2f4 <mem_trim+0x1f4>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	429a      	cmp	r2, r3
 800b292:	d202      	bcs.n	800b29a <mem_trim+0x19a>
      lfree = mem2;
 800b294:	4a17      	ldr	r2, [pc, #92]	; (800b2f4 <mem_trim+0x1f4>)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2200      	movs	r2, #0
 800b29e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	881a      	ldrh	r2, [r3, #0]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	8afa      	ldrh	r2, [r7, #22]
 800b2ac:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	89fa      	ldrh	r2, [r7, #14]
 800b2b2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2bc:	d007      	beq.n	800b2ce <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fd74 	bl	800adb0 <ptr_to_mem>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	89fb      	ldrh	r3, [r7, #14]
 800b2cc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b2ce:	687b      	ldr	r3, [r7, #4]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3720      	adds	r7, #32
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000478 	.word	0x20000478
 800b2dc:	2000047c 	.word	0x2000047c
 800b2e0:	0801a324 	.word	0x0801a324
 800b2e4:	0801a494 	.word	0x0801a494
 800b2e8:	0801a36c 	.word	0x0801a36c
 800b2ec:	0801a4ac 	.word	0x0801a4ac
 800b2f0:	0801a4cc 	.word	0x0801a4cc
 800b2f4:	20000480 	.word	0x20000480

0800b2f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b302:	88fb      	ldrh	r3, [r7, #6]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <mem_malloc+0x14>
    return NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	e0d9      	b.n	800b4c0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	3303      	adds	r3, #3
 800b310:	b29b      	uxth	r3, r3
 800b312:	f023 0303 	bic.w	r3, r3, #3
 800b316:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b318:	8bbb      	ldrh	r3, [r7, #28]
 800b31a:	2b0b      	cmp	r3, #11
 800b31c:	d801      	bhi.n	800b322 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b31e:	230c      	movs	r3, #12
 800b320:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b322:	8bbb      	ldrh	r3, [r7, #28]
 800b324:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b328:	d803      	bhi.n	800b332 <mem_malloc+0x3a>
 800b32a:	8bba      	ldrh	r2, [r7, #28]
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d201      	bcs.n	800b336 <mem_malloc+0x3e>
    return NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	e0c4      	b.n	800b4c0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b336:	4b64      	ldr	r3, [pc, #400]	; (800b4c8 <mem_malloc+0x1d0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff fd4a 	bl	800add4 <mem_to_ptr>
 800b340:	4603      	mov	r3, r0
 800b342:	83fb      	strh	r3, [r7, #30]
 800b344:	e0b4      	b.n	800b4b0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b346:	8bfb      	ldrh	r3, [r7, #30]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff fd31 	bl	800adb0 <ptr_to_mem>
 800b34e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	791b      	ldrb	r3, [r3, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f040 80a4 	bne.w	800b4a2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	8bfb      	ldrh	r3, [r7, #30]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	f1a3 0208 	sub.w	r2, r3, #8
 800b368:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b36a:	429a      	cmp	r2, r3
 800b36c:	f0c0 8099 	bcc.w	800b4a2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	8bfb      	ldrh	r3, [r7, #30]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	f1a3 0208 	sub.w	r2, r3, #8
 800b37e:	8bbb      	ldrh	r3, [r7, #28]
 800b380:	3314      	adds	r3, #20
 800b382:	429a      	cmp	r2, r3
 800b384:	d333      	bcc.n	800b3ee <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b386:	8bfa      	ldrh	r2, [r7, #30]
 800b388:	8bbb      	ldrh	r3, [r7, #28]
 800b38a:	4413      	add	r3, r2
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	3308      	adds	r3, #8
 800b390:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b392:	8a7b      	ldrh	r3, [r7, #18]
 800b394:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b398:	d106      	bne.n	800b3a8 <mem_malloc+0xb0>
 800b39a:	4b4c      	ldr	r3, [pc, #304]	; (800b4cc <mem_malloc+0x1d4>)
 800b39c:	f240 3287 	movw	r2, #903	; 0x387
 800b3a0:	494b      	ldr	r1, [pc, #300]	; (800b4d0 <mem_malloc+0x1d8>)
 800b3a2:	484c      	ldr	r0, [pc, #304]	; (800b4d4 <mem_malloc+0x1dc>)
 800b3a4:	f00a ff86 	bl	80162b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b3a8:	8a7b      	ldrh	r3, [r7, #18]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fd00 	bl	800adb0 <ptr_to_mem>
 800b3b0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	881a      	ldrh	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8bfa      	ldrh	r2, [r7, #30]
 800b3c4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	8a7a      	ldrh	r2, [r7, #18]
 800b3ca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3da:	d00b      	beq.n	800b3f4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff fce5 	bl	800adb0 <ptr_to_mem>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	8a7b      	ldrh	r3, [r7, #18]
 800b3ea:	8053      	strh	r3, [r2, #2]
 800b3ec:	e002      	b.n	800b3f4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b3f4:	4b34      	ldr	r3, [pc, #208]	; (800b4c8 <mem_malloc+0x1d0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d127      	bne.n	800b44e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b3fe:	4b32      	ldr	r3, [pc, #200]	; (800b4c8 <mem_malloc+0x1d0>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b404:	e005      	b.n	800b412 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff fcd0 	bl	800adb0 <ptr_to_mem>
 800b410:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	791b      	ldrb	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d004      	beq.n	800b424 <mem_malloc+0x12c>
 800b41a:	4b2f      	ldr	r3, [pc, #188]	; (800b4d8 <mem_malloc+0x1e0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	429a      	cmp	r2, r3
 800b422:	d1f0      	bne.n	800b406 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b424:	4a28      	ldr	r2, [pc, #160]	; (800b4c8 <mem_malloc+0x1d0>)
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b42a:	4b27      	ldr	r3, [pc, #156]	; (800b4c8 <mem_malloc+0x1d0>)
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	4b2a      	ldr	r3, [pc, #168]	; (800b4d8 <mem_malloc+0x1e0>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d00b      	beq.n	800b44e <mem_malloc+0x156>
 800b436:	4b24      	ldr	r3, [pc, #144]	; (800b4c8 <mem_malloc+0x1d0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	791b      	ldrb	r3, [r3, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d006      	beq.n	800b44e <mem_malloc+0x156>
 800b440:	4b22      	ldr	r3, [pc, #136]	; (800b4cc <mem_malloc+0x1d4>)
 800b442:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b446:	4925      	ldr	r1, [pc, #148]	; (800b4dc <mem_malloc+0x1e4>)
 800b448:	4822      	ldr	r0, [pc, #136]	; (800b4d4 <mem_malloc+0x1dc>)
 800b44a:	f00a ff33 	bl	80162b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b44e:	8bba      	ldrh	r2, [r7, #28]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	4413      	add	r3, r2
 800b454:	3308      	adds	r3, #8
 800b456:	4a20      	ldr	r2, [pc, #128]	; (800b4d8 <mem_malloc+0x1e0>)
 800b458:	6812      	ldr	r2, [r2, #0]
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d906      	bls.n	800b46c <mem_malloc+0x174>
 800b45e:	4b1b      	ldr	r3, [pc, #108]	; (800b4cc <mem_malloc+0x1d4>)
 800b460:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b464:	491e      	ldr	r1, [pc, #120]	; (800b4e0 <mem_malloc+0x1e8>)
 800b466:	481b      	ldr	r0, [pc, #108]	; (800b4d4 <mem_malloc+0x1dc>)
 800b468:	f00a ff24 	bl	80162b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d006      	beq.n	800b484 <mem_malloc+0x18c>
 800b476:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <mem_malloc+0x1d4>)
 800b478:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b47c:	4919      	ldr	r1, [pc, #100]	; (800b4e4 <mem_malloc+0x1ec>)
 800b47e:	4815      	ldr	r0, [pc, #84]	; (800b4d4 <mem_malloc+0x1dc>)
 800b480:	f00a ff18 	bl	80162b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d006      	beq.n	800b49c <mem_malloc+0x1a4>
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <mem_malloc+0x1d4>)
 800b490:	f240 32be 	movw	r2, #958	; 0x3be
 800b494:	4914      	ldr	r1, [pc, #80]	; (800b4e8 <mem_malloc+0x1f0>)
 800b496:	480f      	ldr	r0, [pc, #60]	; (800b4d4 <mem_malloc+0x1dc>)
 800b498:	f00a ff0c 	bl	80162b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	3308      	adds	r3, #8
 800b4a0:	e00e      	b.n	800b4c0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b4a2:	8bfb      	ldrh	r3, [r7, #30]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff fc83 	bl	800adb0 <ptr_to_mem>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b4b0:	8bfa      	ldrh	r2, [r7, #30]
 800b4b2:	8bbb      	ldrh	r3, [r7, #28]
 800b4b4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	f4ff af44 	bcc.w	800b346 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000480 	.word	0x20000480
 800b4cc:	0801a324 	.word	0x0801a324
 800b4d0:	0801a4cc 	.word	0x0801a4cc
 800b4d4:	0801a36c 	.word	0x0801a36c
 800b4d8:	2000047c 	.word	0x2000047c
 800b4dc:	0801a4e0 	.word	0x0801a4e0
 800b4e0:	0801a4fc 	.word	0x0801a4fc
 800b4e4:	0801a52c 	.word	0x0801a52c
 800b4e8:	0801a55c 	.word	0x0801a55c

0800b4ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	3303      	adds	r3, #3
 800b502:	f023 0303 	bic.w	r3, r3, #3
 800b506:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	e011      	b.n	800b532 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	461a      	mov	r2, r3
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3301      	adds	r3, #1
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	885b      	ldrh	r3, [r3, #2]
 800b536:	461a      	mov	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	4293      	cmp	r3, r2
 800b53c:	dbe7      	blt.n	800b50e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b53e:	bf00      	nop
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
	...

0800b54c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b552:	2300      	movs	r3, #0
 800b554:	80fb      	strh	r3, [r7, #6]
 800b556:	e009      	b.n	800b56c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b558:	88fb      	ldrh	r3, [r7, #6]
 800b55a:	4a08      	ldr	r2, [pc, #32]	; (800b57c <memp_init+0x30>)
 800b55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff ffc3 	bl	800b4ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b566:	88fb      	ldrh	r3, [r7, #6]
 800b568:	3301      	adds	r3, #1
 800b56a:	80fb      	strh	r3, [r7, #6]
 800b56c:	88fb      	ldrh	r3, [r7, #6]
 800b56e:	2b08      	cmp	r3, #8
 800b570:	d9f2      	bls.n	800b558 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	0801cd40 	.word	0x0801cd40

0800b580 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d012      	beq.n	800b5bc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	6812      	ldr	r2, [r2, #0]
 800b59e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f003 0303 	and.w	r3, r3, #3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d006      	beq.n	800b5b8 <do_memp_malloc_pool+0x38>
 800b5aa:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <do_memp_malloc_pool+0x48>)
 800b5ac:	f240 1219 	movw	r2, #281	; 0x119
 800b5b0:	4906      	ldr	r1, [pc, #24]	; (800b5cc <do_memp_malloc_pool+0x4c>)
 800b5b2:	4807      	ldr	r0, [pc, #28]	; (800b5d0 <do_memp_malloc_pool+0x50>)
 800b5b4:	f00a fe7e 	bl	80162b4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	e000      	b.n	800b5be <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0801a580 	.word	0x0801a580
 800b5cc:	0801a5b0 	.word	0x0801a5b0
 800b5d0:	0801a5d4 	.word	0x0801a5d4

0800b5d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	2b08      	cmp	r3, #8
 800b5e2:	d908      	bls.n	800b5f6 <memp_malloc+0x22>
 800b5e4:	4b0a      	ldr	r3, [pc, #40]	; (800b610 <memp_malloc+0x3c>)
 800b5e6:	f240 1257 	movw	r2, #343	; 0x157
 800b5ea:	490a      	ldr	r1, [pc, #40]	; (800b614 <memp_malloc+0x40>)
 800b5ec:	480a      	ldr	r0, [pc, #40]	; (800b618 <memp_malloc+0x44>)
 800b5ee:	f00a fe61 	bl	80162b4 <iprintf>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e008      	b.n	800b608 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	4a08      	ldr	r2, [pc, #32]	; (800b61c <memp_malloc+0x48>)
 800b5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ffbe 	bl	800b580 <do_memp_malloc_pool>
 800b604:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b606:	68fb      	ldr	r3, [r7, #12]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	0801a580 	.word	0x0801a580
 800b614:	0801a610 	.word	0x0801a610
 800b618:	0801a5d4 	.word	0x0801a5d4
 800b61c:	0801cd40 	.word	0x0801cd40

0800b620 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	f003 0303 	and.w	r3, r3, #3
 800b630:	2b00      	cmp	r3, #0
 800b632:	d006      	beq.n	800b642 <do_memp_free_pool+0x22>
 800b634:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <do_memp_free_pool+0x40>)
 800b636:	f240 126d 	movw	r2, #365	; 0x16d
 800b63a:	490a      	ldr	r1, [pc, #40]	; (800b664 <do_memp_free_pool+0x44>)
 800b63c:	480a      	ldr	r0, [pc, #40]	; (800b668 <do_memp_free_pool+0x48>)
 800b63e:	f00a fe39 	bl	80162b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	0801a580 	.word	0x0801a580
 800b664:	0801a630 	.word	0x0801a630
 800b668:	0801a5d4 	.word	0x0801a5d4

0800b66c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b678:	79fb      	ldrb	r3, [r7, #7]
 800b67a:	2b08      	cmp	r3, #8
 800b67c:	d907      	bls.n	800b68e <memp_free+0x22>
 800b67e:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <memp_free+0x44>)
 800b680:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b684:	490b      	ldr	r1, [pc, #44]	; (800b6b4 <memp_free+0x48>)
 800b686:	480c      	ldr	r0, [pc, #48]	; (800b6b8 <memp_free+0x4c>)
 800b688:	f00a fe14 	bl	80162b4 <iprintf>
 800b68c:	e00c      	b.n	800b6a8 <memp_free+0x3c>

  if (mem == NULL) {
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d008      	beq.n	800b6a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b694:	79fb      	ldrb	r3, [r7, #7]
 800b696:	4a09      	ldr	r2, [pc, #36]	; (800b6bc <memp_free+0x50>)
 800b698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff ffbe 	bl	800b620 <do_memp_free_pool>
 800b6a4:	e000      	b.n	800b6a8 <memp_free+0x3c>
    return;
 800b6a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0801a580 	.word	0x0801a580
 800b6b4:	0801a650 	.word	0x0801a650
 800b6b8:	0801a5d4 	.word	0x0801a5d4
 800b6bc:	0801cd40 	.word	0x0801cd40

0800b6c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b6c4:	bf00      	nop
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d108      	bne.n	800b6f6 <netif_add+0x26>
 800b6e4:	4b56      	ldr	r3, [pc, #344]	; (800b840 <netif_add+0x170>)
 800b6e6:	f240 1227 	movw	r2, #295	; 0x127
 800b6ea:	4956      	ldr	r1, [pc, #344]	; (800b844 <netif_add+0x174>)
 800b6ec:	4856      	ldr	r0, [pc, #344]	; (800b848 <netif_add+0x178>)
 800b6ee:	f00a fde1 	bl	80162b4 <iprintf>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e09f      	b.n	800b836 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d108      	bne.n	800b70e <netif_add+0x3e>
 800b6fc:	4b50      	ldr	r3, [pc, #320]	; (800b840 <netif_add+0x170>)
 800b6fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b702:	4952      	ldr	r1, [pc, #328]	; (800b84c <netif_add+0x17c>)
 800b704:	4850      	ldr	r0, [pc, #320]	; (800b848 <netif_add+0x178>)
 800b706:	f00a fdd5 	bl	80162b4 <iprintf>
 800b70a:	2300      	movs	r3, #0
 800b70c:	e093      	b.n	800b836 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b714:	4b4e      	ldr	r3, [pc, #312]	; (800b850 <netif_add+0x180>)
 800b716:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b71e:	4b4c      	ldr	r3, [pc, #304]	; (800b850 <netif_add+0x180>)
 800b720:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b728:	4b49      	ldr	r3, [pc, #292]	; (800b850 <netif_add+0x180>)
 800b72a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	4a44      	ldr	r2, [pc, #272]	; (800b854 <netif_add+0x184>)
 800b742:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6a3a      	ldr	r2, [r7, #32]
 800b756:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800b758:	4b3f      	ldr	r3, [pc, #252]	; (800b858 <netif_add+0x188>)
 800b75a:	781a      	ldrb	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b766:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	68b9      	ldr	r1, [r7, #8]
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 f914 	bl	800b99c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	4798      	blx	r3
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <netif_add+0xb4>
    return NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	e058      	b.n	800b836 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b78a:	2bff      	cmp	r3, #255	; 0xff
 800b78c:	d103      	bne.n	800b796 <netif_add+0xc6>
        netif->num = 0;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b79a:	4b30      	ldr	r3, [pc, #192]	; (800b85c <netif_add+0x18c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	e02b      	b.n	800b7fa <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d106      	bne.n	800b7b8 <netif_add+0xe8>
 800b7aa:	4b25      	ldr	r3, [pc, #148]	; (800b840 <netif_add+0x170>)
 800b7ac:	f240 128b 	movw	r2, #395	; 0x18b
 800b7b0:	492b      	ldr	r1, [pc, #172]	; (800b860 <netif_add+0x190>)
 800b7b2:	4825      	ldr	r0, [pc, #148]	; (800b848 <netif_add+0x178>)
 800b7b4:	f00a fd7e 	bl	80162b4 <iprintf>
        num_netifs++;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2bff      	cmp	r3, #255	; 0xff
 800b7c2:	dd06      	ble.n	800b7d2 <netif_add+0x102>
 800b7c4:	4b1e      	ldr	r3, [pc, #120]	; (800b840 <netif_add+0x170>)
 800b7c6:	f240 128d 	movw	r2, #397	; 0x18d
 800b7ca:	4926      	ldr	r1, [pc, #152]	; (800b864 <netif_add+0x194>)
 800b7cc:	481e      	ldr	r0, [pc, #120]	; (800b848 <netif_add+0x178>)
 800b7ce:	f00a fd71 	bl	80162b4 <iprintf>
        if (netif2->num == netif->num) {
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d108      	bne.n	800b7f4 <netif_add+0x124>
          netif->num++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800b7f2:	e005      	b.n	800b800 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	617b      	str	r3, [r7, #20]
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1d0      	bne.n	800b7a2 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1be      	bne.n	800b784 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b80c:	2bfe      	cmp	r3, #254	; 0xfe
 800b80e:	d103      	bne.n	800b818 <netif_add+0x148>
    netif_num = 0;
 800b810:	4b11      	ldr	r3, [pc, #68]	; (800b858 <netif_add+0x188>)
 800b812:	2200      	movs	r2, #0
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	e006      	b.n	800b826 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b81e:	3301      	adds	r3, #1
 800b820:	b2da      	uxtb	r2, r3
 800b822:	4b0d      	ldr	r3, [pc, #52]	; (800b858 <netif_add+0x188>)
 800b824:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b826:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <netif_add+0x18c>)
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b82e:	4a0b      	ldr	r2, [pc, #44]	; (800b85c <netif_add+0x18c>)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b834:	68fb      	ldr	r3, [r7, #12]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	0801a66c 	.word	0x0801a66c
 800b844:	0801a700 	.word	0x0801a700
 800b848:	0801a6bc 	.word	0x0801a6bc
 800b84c:	0801a71c 	.word	0x0801a71c
 800b850:	0801cda4 	.word	0x0801cda4
 800b854:	0800bb8d 	.word	0x0800bb8d
 800b858:	200004a8 	.word	0x200004a8
 800b85c:	200074f0 	.word	0x200074f0
 800b860:	0801a740 	.word	0x0801a740
 800b864:	0801a754 	.word	0x0801a754

0800b868 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f002 fd6d 	bl	800e354 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b87a:	6839      	ldr	r1, [r7, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f007 fab5 	bl	8012dec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d106      	bne.n	800b8ac <netif_do_set_ipaddr+0x20>
 800b89e:	4b1d      	ldr	r3, [pc, #116]	; (800b914 <netif_do_set_ipaddr+0x88>)
 800b8a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b8a4:	491c      	ldr	r1, [pc, #112]	; (800b918 <netif_do_set_ipaddr+0x8c>)
 800b8a6:	481d      	ldr	r0, [pc, #116]	; (800b91c <netif_do_set_ipaddr+0x90>)
 800b8a8:	f00a fd04 	bl	80162b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <netif_do_set_ipaddr+0x34>
 800b8b2:	4b18      	ldr	r3, [pc, #96]	; (800b914 <netif_do_set_ipaddr+0x88>)
 800b8b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b8b8:	4917      	ldr	r1, [pc, #92]	; (800b918 <netif_do_set_ipaddr+0x8c>)
 800b8ba:	4818      	ldr	r0, [pc, #96]	; (800b91c <netif_do_set_ipaddr+0x90>)
 800b8bc:	f00a fcfa 	bl	80162b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d01c      	beq.n	800b908 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b8de:	f107 0314 	add.w	r3, r7, #20
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff ffbf 	bl	800b868 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <netif_do_set_ipaddr+0x6a>
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	e000      	b.n	800b8f8 <netif_do_set_ipaddr+0x6c>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b8fc:	2101      	movs	r1, #1
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f8d2 	bl	800baa8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	0801a66c 	.word	0x0801a66c
 800b918:	0801a784 	.word	0x0801a784
 800b91c:	0801a6bc 	.word	0x0801a6bc

0800b920 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3308      	adds	r3, #8
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d00a      	beq.n	800b950 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <netif_do_set_netmask+0x26>
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	e000      	b.n	800b948 <netif_do_set_netmask+0x28>
 800b946:	2300      	movs	r3, #0
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b94c:	2301      	movs	r3, #1
 800b94e:	e000      	b.n	800b952 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b95e:	b480      	push	{r7}
 800b960:	b085      	sub	sp, #20
 800b962:	af00      	add	r7, sp, #0
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	330c      	adds	r3, #12
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	429a      	cmp	r2, r3
 800b976:	d00a      	beq.n	800b98e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <netif_do_set_gw+0x26>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	e000      	b.n	800b986 <netif_do_set_gw+0x28>
 800b984:	2300      	movs	r3, #0
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b98a:	2301      	movs	r3, #1
 800b98c:	e000      	b.n	800b990 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b9b8:	4b1c      	ldr	r3, [pc, #112]	; (800ba2c <netif_set_addr+0x90>)
 800b9ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b9c2:	4b1a      	ldr	r3, [pc, #104]	; (800ba2c <netif_set_addr+0x90>)
 800b9c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b9cc:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <netif_set_addr+0x90>)
 800b9ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <netif_set_addr+0x42>
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <netif_set_addr+0x46>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e000      	b.n	800b9e4 <netif_set_addr+0x48>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d006      	beq.n	800b9fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9ec:	f107 0310 	add.w	r3, r7, #16
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff ff49 	bl	800b88c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff ff8e 	bl	800b920 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f7ff ffa8 	bl	800b95e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d106      	bne.n	800ba22 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ba14:	f107 0310 	add.w	r3, r7, #16
 800ba18:	461a      	mov	r2, r3
 800ba1a:	68b9      	ldr	r1, [r7, #8]
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff ff35 	bl	800b88c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ba22:	bf00      	nop
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0801cda4 	.word	0x0801cda4

0800ba30 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ba38:	4a04      	ldr	r2, [pc, #16]	; (800ba4c <netif_set_default+0x1c>)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	200074f4 	.word	0x200074f4

0800ba50 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d107      	bne.n	800ba6e <netif_set_up+0x1e>
 800ba5e:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <netif_set_up+0x4c>)
 800ba60:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ba64:	490e      	ldr	r1, [pc, #56]	; (800baa0 <netif_set_up+0x50>)
 800ba66:	480f      	ldr	r0, [pc, #60]	; (800baa4 <netif_set_up+0x54>)
 800ba68:	f00a fc24 	bl	80162b4 <iprintf>
 800ba6c:	e013      	b.n	800ba96 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10c      	bne.n	800ba96 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ba82:	f043 0301 	orr.w	r3, r3, #1
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba8e:	2103      	movs	r1, #3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f809 	bl	800baa8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	0801a66c 	.word	0x0801a66c
 800baa0:	0801a7f4 	.word	0x0801a7f4
 800baa4:	0801a6bc 	.word	0x0801a6bc

0800baa8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <netif_issue_reports+0x20>
 800baba:	4b18      	ldr	r3, [pc, #96]	; (800bb1c <netif_issue_reports+0x74>)
 800babc:	f240 326d 	movw	r2, #877	; 0x36d
 800bac0:	4917      	ldr	r1, [pc, #92]	; (800bb20 <netif_issue_reports+0x78>)
 800bac2:	4818      	ldr	r0, [pc, #96]	; (800bb24 <netif_issue_reports+0x7c>)
 800bac4:	f00a fbf6 	bl	80162b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d01e      	beq.n	800bb14 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800badc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d017      	beq.n	800bb14 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	f003 0301 	and.w	r3, r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	d013      	beq.n	800bb16 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	3304      	adds	r3, #4
 800baf2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00e      	beq.n	800bb16 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bafe:	f003 0308 	and.w	r3, r3, #8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f008 f8d7 	bl	8013cc0 <etharp_request>
 800bb12:	e000      	b.n	800bb16 <netif_issue_reports+0x6e>
    return;
 800bb14:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	0801a66c 	.word	0x0801a66c
 800bb20:	0801a810 	.word	0x0801a810
 800bb24:	0801a6bc 	.word	0x0801a6bc

0800bb28 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d107      	bne.n	800bb46 <netif_set_down+0x1e>
 800bb36:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <netif_set_down+0x58>)
 800bb38:	f240 329b 	movw	r2, #923	; 0x39b
 800bb3c:	4911      	ldr	r1, [pc, #68]	; (800bb84 <netif_set_down+0x5c>)
 800bb3e:	4812      	ldr	r0, [pc, #72]	; (800bb88 <netif_set_down+0x60>)
 800bb40:	f00a fbb8 	bl	80162b4 <iprintf>
 800bb44:	e019      	b.n	800bb7a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d012      	beq.n	800bb7a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bb5a:	f023 0301 	bic.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bb6c:	f003 0308 	and.w	r3, r3, #8
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f007 fc61 	bl	801343c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0801a66c 	.word	0x0801a66c
 800bb84:	0801a834 	.word	0x0801a834
 800bb88:	0801a6bc 	.word	0x0801a6bc

0800bb8c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bb98:	f06f 030b 	mvn.w	r3, #11
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bbb2:	79fb      	ldrb	r3, [r7, #7]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d013      	beq.n	800bbe0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bbb8:	4b0d      	ldr	r3, [pc, #52]	; (800bbf0 <netif_get_by_index+0x48>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e00c      	b.n	800bbda <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	79fa      	ldrb	r2, [r7, #7]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d101      	bne.n	800bbd4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	e006      	b.n	800bbe2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1ef      	bne.n	800bbc0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	200074f0 	.word	0x200074f0

0800bbf4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bbfa:	4b0c      	ldr	r3, [pc, #48]	; (800bc2c <pbuf_free_ooseq+0x38>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc00:	4b0b      	ldr	r3, [pc, #44]	; (800bc30 <pbuf_free_ooseq+0x3c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	607b      	str	r3, [r7, #4]
 800bc06:	e00a      	b.n	800bc1e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f002 fbdd 	bl	800e3d0 <tcp_free_ooseq>
      return;
 800bc16:	e005      	b.n	800bc24 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	607b      	str	r3, [r7, #4]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1f1      	bne.n	800bc08 <pbuf_free_ooseq+0x14>
    }
  }
}
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200074f8 	.word	0x200074f8
 800bc30:	20007500 	.word	0x20007500

0800bc34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bc34:	b480      	push	{r7}
 800bc36:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bc38:	4b03      	ldr	r3, [pc, #12]	; (800bc48 <pbuf_pool_is_empty+0x14>)
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bc3e:	bf00      	nop
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	200074f8 	.word	0x200074f8

0800bc4c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	4611      	mov	r1, r2
 800bc58:	461a      	mov	r2, r3
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	80fb      	strh	r3, [r7, #6]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	88fa      	ldrh	r2, [r7, #6]
 800bc72:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	88ba      	ldrh	r2, [r7, #4]
 800bc78:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc7a:	8b3b      	ldrh	r3, [r7, #24]
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	7f3a      	ldrb	r2, [r7, #28]
 800bc86:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2200      	movs	r2, #0
 800bc92:	73da      	strb	r2, [r3, #15]
}
 800bc94:	bf00      	nop
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08c      	sub	sp, #48	; 0x30
 800bca4:	af02      	add	r7, sp, #8
 800bca6:	4603      	mov	r3, r0
 800bca8:	71fb      	strb	r3, [r7, #7]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	80bb      	strh	r3, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bcb2:	79fb      	ldrb	r3, [r7, #7]
 800bcb4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bcb6:	887b      	ldrh	r3, [r7, #2]
 800bcb8:	2b41      	cmp	r3, #65	; 0x41
 800bcba:	d00b      	beq.n	800bcd4 <pbuf_alloc+0x34>
 800bcbc:	2b41      	cmp	r3, #65	; 0x41
 800bcbe:	dc02      	bgt.n	800bcc6 <pbuf_alloc+0x26>
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d007      	beq.n	800bcd4 <pbuf_alloc+0x34>
 800bcc4:	e0c2      	b.n	800be4c <pbuf_alloc+0x1ac>
 800bcc6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcca:	d00b      	beq.n	800bce4 <pbuf_alloc+0x44>
 800bccc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bcd0:	d070      	beq.n	800bdb4 <pbuf_alloc+0x114>
 800bcd2:	e0bb      	b.n	800be4c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bcd4:	887a      	ldrh	r2, [r7, #2]
 800bcd6:	88bb      	ldrh	r3, [r7, #4]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	2000      	movs	r0, #0
 800bcdc:	f000 f8d2 	bl	800be84 <pbuf_alloc_reference>
 800bce0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bce2:	e0bd      	b.n	800be60 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bcec:	88bb      	ldrh	r3, [r7, #4]
 800bcee:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bcf0:	2008      	movs	r0, #8
 800bcf2:	f7ff fc6f 	bl	800b5d4 <memp_malloc>
 800bcf6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d109      	bne.n	800bd12 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800bcfe:	f7ff ff99 	bl	800bc34 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800bd08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd0a:	f000 faa9 	bl	800c260 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e0a7      	b.n	800be62 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bd12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd14:	3303      	adds	r3, #3
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	8b7a      	ldrh	r2, [r7, #26]
 800bd26:	4293      	cmp	r3, r2
 800bd28:	bf28      	it	cs
 800bd2a:	4613      	movcs	r3, r2
 800bd2c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bd2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd30:	3310      	adds	r3, #16
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	4413      	add	r3, r2
 800bd36:	3303      	adds	r3, #3
 800bd38:	f023 0303 	bic.w	r3, r3, #3
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	89f9      	ldrh	r1, [r7, #14]
 800bd40:	8b7a      	ldrh	r2, [r7, #26]
 800bd42:	2300      	movs	r3, #0
 800bd44:	9301      	str	r3, [sp, #4]
 800bd46:	887b      	ldrh	r3, [r7, #2]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	6938      	ldr	r0, [r7, #16]
 800bd50:	f7ff ff7c 	bl	800bc4c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f003 0303 	and.w	r3, r3, #3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d006      	beq.n	800bd6e <pbuf_alloc+0xce>
 800bd60:	4b42      	ldr	r3, [pc, #264]	; (800be6c <pbuf_alloc+0x1cc>)
 800bd62:	f240 1201 	movw	r2, #257	; 0x101
 800bd66:	4942      	ldr	r1, [pc, #264]	; (800be70 <pbuf_alloc+0x1d0>)
 800bd68:	4842      	ldr	r0, [pc, #264]	; (800be74 <pbuf_alloc+0x1d4>)
 800bd6a:	f00a faa3 	bl	80162b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd70:	3303      	adds	r3, #3
 800bd72:	f023 0303 	bic.w	r3, r3, #3
 800bd76:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd7a:	d106      	bne.n	800bd8a <pbuf_alloc+0xea>
 800bd7c:	4b3b      	ldr	r3, [pc, #236]	; (800be6c <pbuf_alloc+0x1cc>)
 800bd7e:	f240 1203 	movw	r2, #259	; 0x103
 800bd82:	493d      	ldr	r1, [pc, #244]	; (800be78 <pbuf_alloc+0x1d8>)
 800bd84:	483b      	ldr	r0, [pc, #236]	; (800be74 <pbuf_alloc+0x1d4>)
 800bd86:	f00a fa95 	bl	80162b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d102      	bne.n	800bd96 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	627b      	str	r3, [r7, #36]	; 0x24
 800bd94:	e002      	b.n	800bd9c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bda0:	8b7a      	ldrh	r2, [r7, #26]
 800bda2:	89fb      	ldrh	r3, [r7, #14]
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bdac:	8b7b      	ldrh	r3, [r7, #26]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d19e      	bne.n	800bcf0 <pbuf_alloc+0x50>
      break;
 800bdb2:	e055      	b.n	800be60 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bdb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdb6:	3303      	adds	r3, #3
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	f023 0303 	bic.w	r3, r3, #3
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	88bb      	ldrh	r3, [r7, #4]
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	4413      	add	r3, r2
 800bdce:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bdd0:	8b3b      	ldrh	r3, [r7, #24]
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdd6:	8b3a      	ldrh	r2, [r7, #24]
 800bdd8:	88bb      	ldrh	r3, [r7, #4]
 800bdda:	3303      	adds	r3, #3
 800bddc:	f023 0303 	bic.w	r3, r3, #3
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d306      	bcc.n	800bdf2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bde4:	8afa      	ldrh	r2, [r7, #22]
 800bde6:	88bb      	ldrh	r3, [r7, #4]
 800bde8:	3303      	adds	r3, #3
 800bdea:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d201      	bcs.n	800bdf6 <pbuf_alloc+0x156>
        return NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e035      	b.n	800be62 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bdf6:	8afb      	ldrh	r3, [r7, #22]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fa7d 	bl	800b2f8 <mem_malloc>
 800bdfe:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <pbuf_alloc+0x16a>
        return NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	e02b      	b.n	800be62 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800be0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be0c:	3310      	adds	r3, #16
 800be0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be10:	4413      	add	r3, r2
 800be12:	3303      	adds	r3, #3
 800be14:	f023 0303 	bic.w	r3, r3, #3
 800be18:	4618      	mov	r0, r3
 800be1a:	88b9      	ldrh	r1, [r7, #4]
 800be1c:	88ba      	ldrh	r2, [r7, #4]
 800be1e:	2300      	movs	r3, #0
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	887b      	ldrh	r3, [r7, #2]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	460b      	mov	r3, r1
 800be28:	4601      	mov	r1, r0
 800be2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be2c:	f7ff ff0e 	bl	800bc4c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f003 0303 	and.w	r3, r3, #3
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d010      	beq.n	800be5e <pbuf_alloc+0x1be>
 800be3c:	4b0b      	ldr	r3, [pc, #44]	; (800be6c <pbuf_alloc+0x1cc>)
 800be3e:	f240 1223 	movw	r2, #291	; 0x123
 800be42:	490e      	ldr	r1, [pc, #56]	; (800be7c <pbuf_alloc+0x1dc>)
 800be44:	480b      	ldr	r0, [pc, #44]	; (800be74 <pbuf_alloc+0x1d4>)
 800be46:	f00a fa35 	bl	80162b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800be4a:	e008      	b.n	800be5e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be4c:	4b07      	ldr	r3, [pc, #28]	; (800be6c <pbuf_alloc+0x1cc>)
 800be4e:	f240 1227 	movw	r2, #295	; 0x127
 800be52:	490b      	ldr	r1, [pc, #44]	; (800be80 <pbuf_alloc+0x1e0>)
 800be54:	4807      	ldr	r0, [pc, #28]	; (800be74 <pbuf_alloc+0x1d4>)
 800be56:	f00a fa2d 	bl	80162b4 <iprintf>
      return NULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e001      	b.n	800be62 <pbuf_alloc+0x1c2>
      break;
 800be5e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be62:	4618      	mov	r0, r3
 800be64:	3728      	adds	r7, #40	; 0x28
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	0801a89c 	.word	0x0801a89c
 800be70:	0801a8cc 	.word	0x0801a8cc
 800be74:	0801a8fc 	.word	0x0801a8fc
 800be78:	0801a924 	.word	0x0801a924
 800be7c:	0801a958 	.word	0x0801a958
 800be80:	0801a984 	.word	0x0801a984

0800be84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b086      	sub	sp, #24
 800be88:	af02      	add	r7, sp, #8
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	807b      	strh	r3, [r7, #2]
 800be90:	4613      	mov	r3, r2
 800be92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be94:	883b      	ldrh	r3, [r7, #0]
 800be96:	2b41      	cmp	r3, #65	; 0x41
 800be98:	d009      	beq.n	800beae <pbuf_alloc_reference+0x2a>
 800be9a:	883b      	ldrh	r3, [r7, #0]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d006      	beq.n	800beae <pbuf_alloc_reference+0x2a>
 800bea0:	4b0f      	ldr	r3, [pc, #60]	; (800bee0 <pbuf_alloc_reference+0x5c>)
 800bea2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bea6:	490f      	ldr	r1, [pc, #60]	; (800bee4 <pbuf_alloc_reference+0x60>)
 800bea8:	480f      	ldr	r0, [pc, #60]	; (800bee8 <pbuf_alloc_reference+0x64>)
 800beaa:	f00a fa03 	bl	80162b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800beae:	2007      	movs	r0, #7
 800beb0:	f7ff fb90 	bl	800b5d4 <memp_malloc>
 800beb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	e00b      	b.n	800bed8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bec0:	8879      	ldrh	r1, [r7, #2]
 800bec2:	887a      	ldrh	r2, [r7, #2]
 800bec4:	2300      	movs	r3, #0
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	883b      	ldrh	r3, [r7, #0]
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	460b      	mov	r3, r1
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f7ff febb 	bl	800bc4c <pbuf_init_alloced_pbuf>
  return p;
 800bed6:	68fb      	ldr	r3, [r7, #12]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	0801a89c 	.word	0x0801a89c
 800bee4:	0801a9a0 	.word	0x0801a9a0
 800bee8:	0801a8fc 	.word	0x0801a8fc

0800beec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af02      	add	r7, sp, #8
 800bef2:	607b      	str	r3, [r7, #4]
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]
 800bef8:	460b      	mov	r3, r1
 800befa:	81bb      	strh	r3, [r7, #12]
 800befc:	4613      	mov	r3, r2
 800befe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bf04:	8a7b      	ldrh	r3, [r7, #18]
 800bf06:	3303      	adds	r3, #3
 800bf08:	f023 0203 	bic.w	r2, r3, #3
 800bf0c:	89bb      	ldrh	r3, [r7, #12]
 800bf0e:	441a      	add	r2, r3
 800bf10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d901      	bls.n	800bf1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	e018      	b.n	800bf4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bf1a:	6a3b      	ldr	r3, [r7, #32]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf20:	8a7b      	ldrh	r3, [r7, #18]
 800bf22:	3303      	adds	r3, #3
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	6a3a      	ldr	r2, [r7, #32]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	e001      	b.n	800bf34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bf30:	2300      	movs	r3, #0
 800bf32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	89b9      	ldrh	r1, [r7, #12]
 800bf38:	89ba      	ldrh	r2, [r7, #12]
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	897b      	ldrh	r3, [r7, #10]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	460b      	mov	r3, r1
 800bf44:	6979      	ldr	r1, [r7, #20]
 800bf46:	f7ff fe81 	bl	800bc4c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bf4a:	687b      	ldr	r3, [r7, #4]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <pbuf_realloc+0x20>
 800bf66:	4b3a      	ldr	r3, [pc, #232]	; (800c050 <pbuf_realloc+0xfc>)
 800bf68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bf6c:	4939      	ldr	r1, [pc, #228]	; (800c054 <pbuf_realloc+0x100>)
 800bf6e:	483a      	ldr	r0, [pc, #232]	; (800c058 <pbuf_realloc+0x104>)
 800bf70:	f00a f9a0 	bl	80162b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	891b      	ldrh	r3, [r3, #8]
 800bf78:	887a      	ldrh	r2, [r7, #2]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d264      	bcs.n	800c048 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	891a      	ldrh	r2, [r3, #8]
 800bf82:	887b      	ldrh	r3, [r7, #2]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf88:	887b      	ldrh	r3, [r7, #2]
 800bf8a:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf90:	e018      	b.n	800bfc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	895b      	ldrh	r3, [r3, #10]
 800bf96:	897a      	ldrh	r2, [r7, #10]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	891a      	ldrh	r2, [r3, #8]
 800bfa0:	893b      	ldrh	r3, [r7, #8]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <pbuf_realloc+0x70>
 800bfb6:	4b26      	ldr	r3, [pc, #152]	; (800c050 <pbuf_realloc+0xfc>)
 800bfb8:	f240 12af 	movw	r2, #431	; 0x1af
 800bfbc:	4927      	ldr	r1, [pc, #156]	; (800c05c <pbuf_realloc+0x108>)
 800bfbe:	4826      	ldr	r0, [pc, #152]	; (800c058 <pbuf_realloc+0x104>)
 800bfc0:	f00a f978 	bl	80162b4 <iprintf>
  while (rem_len > q->len) {
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	895b      	ldrh	r3, [r3, #10]
 800bfc8:	897a      	ldrh	r2, [r7, #10]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d8e1      	bhi.n	800bf92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	7b1b      	ldrb	r3, [r3, #12]
 800bfd2:	f003 030f 	and.w	r3, r3, #15
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d122      	bne.n	800c020 <pbuf_realloc+0xcc>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	895b      	ldrh	r3, [r3, #10]
 800bfde:	897a      	ldrh	r2, [r7, #10]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d01d      	beq.n	800c020 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	7b5b      	ldrb	r3, [r3, #13]
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d117      	bne.n	800c020 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	461a      	mov	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	897b      	ldrh	r3, [r7, #10]
 800bffe:	4413      	add	r3, r2
 800c000:	b29b      	uxth	r3, r3
 800c002:	4619      	mov	r1, r3
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f7ff f87b 	bl	800b100 <mem_trim>
 800c00a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d106      	bne.n	800c020 <pbuf_realloc+0xcc>
 800c012:	4b0f      	ldr	r3, [pc, #60]	; (800c050 <pbuf_realloc+0xfc>)
 800c014:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c018:	4911      	ldr	r1, [pc, #68]	; (800c060 <pbuf_realloc+0x10c>)
 800c01a:	480f      	ldr	r0, [pc, #60]	; (800c058 <pbuf_realloc+0x104>)
 800c01c:	f00a f94a 	bl	80162b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	897a      	ldrh	r2, [r7, #10]
 800c024:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	895a      	ldrh	r2, [r3, #10]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d004      	beq.n	800c040 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 f910 	bl	800c260 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	e000      	b.n	800c04a <pbuf_realloc+0xf6>
    return;
 800c048:	bf00      	nop

}
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	0801a89c 	.word	0x0801a89c
 800c054:	0801a9b4 	.word	0x0801a9b4
 800c058:	0801a8fc 	.word	0x0801a8fc
 800c05c:	0801a9cc 	.word	0x0801a9cc
 800c060:	0801a9e4 	.word	0x0801a9e4

0800c064 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	4613      	mov	r3, r2
 800c070:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <pbuf_add_header_impl+0x22>
 800c078:	4b2b      	ldr	r3, [pc, #172]	; (800c128 <pbuf_add_header_impl+0xc4>)
 800c07a:	f240 12df 	movw	r2, #479	; 0x1df
 800c07e:	492b      	ldr	r1, [pc, #172]	; (800c12c <pbuf_add_header_impl+0xc8>)
 800c080:	482b      	ldr	r0, [pc, #172]	; (800c130 <pbuf_add_header_impl+0xcc>)
 800c082:	f00a f917 	bl	80162b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <pbuf_add_header_impl+0x30>
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c092:	d301      	bcc.n	800c098 <pbuf_add_header_impl+0x34>
    return 1;
 800c094:	2301      	movs	r3, #1
 800c096:	e043      	b.n	800c120 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d101      	bne.n	800c0a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e03e      	b.n	800c120 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	891a      	ldrh	r2, [r3, #8]
 800c0aa:	8a7b      	ldrh	r3, [r7, #18]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	8a7a      	ldrh	r2, [r7, #18]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d901      	bls.n	800c0ba <pbuf_add_header_impl+0x56>
    return 1;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e032      	b.n	800c120 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	7b1b      	ldrb	r3, [r3, #12]
 800c0be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0c0:	8a3b      	ldrh	r3, [r7, #16]
 800c0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00c      	beq.n	800c0e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	425b      	negs	r3, r3
 800c0d2:	4413      	add	r3, r2
 800c0d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3310      	adds	r3, #16
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d20d      	bcs.n	800c0fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e01d      	b.n	800c120 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d006      	beq.n	800c0f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	425b      	negs	r3, r3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	e001      	b.n	800c0fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e011      	b.n	800c120 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	895a      	ldrh	r2, [r3, #10]
 800c106:	8a7b      	ldrh	r3, [r7, #18]
 800c108:	4413      	add	r3, r2
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	891a      	ldrh	r2, [r3, #8]
 800c114:	8a7b      	ldrh	r3, [r7, #18]
 800c116:	4413      	add	r3, r2
 800c118:	b29a      	uxth	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3718      	adds	r7, #24
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	0801a89c 	.word	0x0801a89c
 800c12c:	0801aa00 	.word	0x0801aa00
 800c130:	0801a8fc 	.word	0x0801a8fc

0800c134 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c13e:	2200      	movs	r2, #0
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff ff8e 	bl	800c064 <pbuf_add_header_impl>
 800c148:	4603      	mov	r3, r0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
	...

0800c154 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d106      	bne.n	800c172 <pbuf_remove_header+0x1e>
 800c164:	4b20      	ldr	r3, [pc, #128]	; (800c1e8 <pbuf_remove_header+0x94>)
 800c166:	f240 224b 	movw	r2, #587	; 0x24b
 800c16a:	4920      	ldr	r1, [pc, #128]	; (800c1ec <pbuf_remove_header+0x98>)
 800c16c:	4820      	ldr	r0, [pc, #128]	; (800c1f0 <pbuf_remove_header+0x9c>)
 800c16e:	f00a f8a1 	bl	80162b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d003      	beq.n	800c180 <pbuf_remove_header+0x2c>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c17e:	d301      	bcc.n	800c184 <pbuf_remove_header+0x30>
    return 1;
 800c180:	2301      	movs	r3, #1
 800c182:	e02c      	b.n	800c1de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <pbuf_remove_header+0x3a>
    return 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	e027      	b.n	800c1de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	895b      	ldrh	r3, [r3, #10]
 800c196:	89fa      	ldrh	r2, [r7, #14]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d908      	bls.n	800c1ae <pbuf_remove_header+0x5a>
 800c19c:	4b12      	ldr	r3, [pc, #72]	; (800c1e8 <pbuf_remove_header+0x94>)
 800c19e:	f240 2255 	movw	r2, #597	; 0x255
 800c1a2:	4914      	ldr	r1, [pc, #80]	; (800c1f4 <pbuf_remove_header+0xa0>)
 800c1a4:	4812      	ldr	r0, [pc, #72]	; (800c1f0 <pbuf_remove_header+0x9c>)
 800c1a6:	f00a f885 	bl	80162b4 <iprintf>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e017      	b.n	800c1de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	441a      	add	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	895a      	ldrh	r2, [r3, #10]
 800c1c4:	89fb      	ldrh	r3, [r7, #14]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	891a      	ldrh	r2, [r3, #8]
 800c1d2:	89fb      	ldrh	r3, [r7, #14]
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	0801a89c 	.word	0x0801a89c
 800c1ec:	0801aa00 	.word	0x0801aa00
 800c1f0:	0801a8fc 	.word	0x0801a8fc
 800c1f4:	0801aa0c 	.word	0x0801aa0c

0800c1f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	807b      	strh	r3, [r7, #2]
 800c204:	4613      	mov	r3, r2
 800c206:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	da08      	bge.n	800c222 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c214:	425b      	negs	r3, r3
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ff9b 	bl	800c154 <pbuf_remove_header>
 800c21e:	4603      	mov	r3, r0
 800c220:	e007      	b.n	800c232 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c222:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c226:	787a      	ldrb	r2, [r7, #1]
 800c228:	4619      	mov	r1, r3
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff ff1a 	bl	800c064 <pbuf_add_header_impl>
 800c230:	4603      	mov	r3, r0
  }
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	460b      	mov	r3, r1
 800c244:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c24a:	2201      	movs	r2, #1
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff ffd2 	bl	800c1f8 <pbuf_header_impl>
 800c254:	4603      	mov	r3, r0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10b      	bne.n	800c286 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d106      	bne.n	800c282 <pbuf_free+0x22>
 800c274:	4b38      	ldr	r3, [pc, #224]	; (800c358 <pbuf_free+0xf8>)
 800c276:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c27a:	4938      	ldr	r1, [pc, #224]	; (800c35c <pbuf_free+0xfc>)
 800c27c:	4838      	ldr	r0, [pc, #224]	; (800c360 <pbuf_free+0x100>)
 800c27e:	f00a f819 	bl	80162b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c282:	2300      	movs	r3, #0
 800c284:	e063      	b.n	800c34e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c28a:	e05c      	b.n	800c346 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7b9b      	ldrb	r3, [r3, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d106      	bne.n	800c2a2 <pbuf_free+0x42>
 800c294:	4b30      	ldr	r3, [pc, #192]	; (800c358 <pbuf_free+0xf8>)
 800c296:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c29a:	4932      	ldr	r1, [pc, #200]	; (800c364 <pbuf_free+0x104>)
 800c29c:	4830      	ldr	r0, [pc, #192]	; (800c360 <pbuf_free+0x100>)
 800c29e:	f00a f809 	bl	80162b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7b9b      	ldrb	r3, [r3, #14]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	739a      	strb	r2, [r3, #14]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	7b9b      	ldrb	r3, [r3, #14]
 800c2b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c2b4:	7dbb      	ldrb	r3, [r7, #22]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d143      	bne.n	800c342 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7b1b      	ldrb	r3, [r3, #12]
 800c2c4:	f003 030f 	and.w	r3, r3, #15
 800c2c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7b5b      	ldrb	r3, [r3, #13]
 800c2ce:	f003 0302 	and.w	r3, r3, #2
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d011      	beq.n	800c2fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d106      	bne.n	800c2f0 <pbuf_free+0x90>
 800c2e2:	4b1d      	ldr	r3, [pc, #116]	; (800c358 <pbuf_free+0xf8>)
 800c2e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c2e8:	491f      	ldr	r1, [pc, #124]	; (800c368 <pbuf_free+0x108>)
 800c2ea:	481d      	ldr	r0, [pc, #116]	; (800c360 <pbuf_free+0x100>)
 800c2ec:	f009 ffe2 	bl	80162b4 <iprintf>
        pc->custom_free_function(p);
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	4798      	blx	r3
 800c2f8:	e01d      	b.n	800c336 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d104      	bne.n	800c30a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	2008      	movs	r0, #8
 800c304:	f7ff f9b2 	bl	800b66c <memp_free>
 800c308:	e015      	b.n	800c336 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d104      	bne.n	800c31a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	2007      	movs	r0, #7
 800c314:	f7ff f9aa 	bl	800b66c <memp_free>
 800c318:	e00d      	b.n	800c336 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d103      	bne.n	800c328 <pbuf_free+0xc8>
          mem_free(p);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7fe fe83 	bl	800b02c <mem_free>
 800c326:	e006      	b.n	800c336 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c328:	4b0b      	ldr	r3, [pc, #44]	; (800c358 <pbuf_free+0xf8>)
 800c32a:	f240 320f 	movw	r2, #783	; 0x30f
 800c32e:	490f      	ldr	r1, [pc, #60]	; (800c36c <pbuf_free+0x10c>)
 800c330:	480b      	ldr	r0, [pc, #44]	; (800c360 <pbuf_free+0x100>)
 800c332:	f009 ffbf 	bl	80162b4 <iprintf>
        }
      }
      count++;
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	3301      	adds	r3, #1
 800c33a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	607b      	str	r3, [r7, #4]
 800c340:	e001      	b.n	800c346 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d19f      	bne.n	800c28c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	0801a89c 	.word	0x0801a89c
 800c35c:	0801aa00 	.word	0x0801aa00
 800c360:	0801a8fc 	.word	0x0801a8fc
 800c364:	0801aa2c 	.word	0x0801aa2c
 800c368:	0801aa44 	.word	0x0801aa44
 800c36c:	0801aa68 	.word	0x0801aa68

0800c370 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c37c:	e005      	b.n	800c38a <pbuf_clen+0x1a>
    ++len;
 800c37e:	89fb      	ldrh	r3, [r7, #14]
 800c380:	3301      	adds	r3, #1
 800c382:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1f6      	bne.n	800c37e <pbuf_clen+0xe>
  }
  return len;
 800c390:	89fb      	ldrh	r3, [r7, #14]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
	...

0800c3a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d010      	beq.n	800c3d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	7b9b      	ldrb	r3, [r3, #14]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7b9b      	ldrb	r3, [r3, #14]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <pbuf_ref+0x30>
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <pbuf_ref+0x38>)
 800c3c4:	f240 3242 	movw	r2, #834	; 0x342
 800c3c8:	4904      	ldr	r1, [pc, #16]	; (800c3dc <pbuf_ref+0x3c>)
 800c3ca:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <pbuf_ref+0x40>)
 800c3cc:	f009 ff72 	bl	80162b4 <iprintf>
  }
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	0801a89c 	.word	0x0801a89c
 800c3dc:	0801aa7c 	.word	0x0801aa7c
 800c3e0:	0801a8fc 	.word	0x0801a8fc

0800c3e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <pbuf_cat+0x16>
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d107      	bne.n	800c40a <pbuf_cat+0x26>
 800c3fa:	4b20      	ldr	r3, [pc, #128]	; (800c47c <pbuf_cat+0x98>)
 800c3fc:	f240 325a 	movw	r2, #858	; 0x35a
 800c400:	491f      	ldr	r1, [pc, #124]	; (800c480 <pbuf_cat+0x9c>)
 800c402:	4820      	ldr	r0, [pc, #128]	; (800c484 <pbuf_cat+0xa0>)
 800c404:	f009 ff56 	bl	80162b4 <iprintf>
 800c408:	e034      	b.n	800c474 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60fb      	str	r3, [r7, #12]
 800c40e:	e00a      	b.n	800c426 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	891a      	ldrh	r2, [r3, #8]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	891b      	ldrh	r3, [r3, #8]
 800c418:	4413      	add	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1f0      	bne.n	800c410 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	891a      	ldrh	r2, [r3, #8]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	895b      	ldrh	r3, [r3, #10]
 800c436:	429a      	cmp	r2, r3
 800c438:	d006      	beq.n	800c448 <pbuf_cat+0x64>
 800c43a:	4b10      	ldr	r3, [pc, #64]	; (800c47c <pbuf_cat+0x98>)
 800c43c:	f240 3262 	movw	r2, #866	; 0x362
 800c440:	4911      	ldr	r1, [pc, #68]	; (800c488 <pbuf_cat+0xa4>)
 800c442:	4810      	ldr	r0, [pc, #64]	; (800c484 <pbuf_cat+0xa0>)
 800c444:	f009 ff36 	bl	80162b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d006      	beq.n	800c45e <pbuf_cat+0x7a>
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <pbuf_cat+0x98>)
 800c452:	f240 3263 	movw	r2, #867	; 0x363
 800c456:	490d      	ldr	r1, [pc, #52]	; (800c48c <pbuf_cat+0xa8>)
 800c458:	480a      	ldr	r0, [pc, #40]	; (800c484 <pbuf_cat+0xa0>)
 800c45a:	f009 ff2b 	bl	80162b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	891a      	ldrh	r2, [r3, #8]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	891b      	ldrh	r3, [r3, #8]
 800c466:	4413      	add	r3, r2
 800c468:	b29a      	uxth	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	0801a89c 	.word	0x0801a89c
 800c480:	0801aa90 	.word	0x0801aa90
 800c484:	0801a8fc 	.word	0x0801a8fc
 800c488:	0801aac8 	.word	0x0801aac8
 800c48c:	0801aaf8 	.word	0x0801aaf8

0800c490 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f7ff ffa1 	bl	800c3e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c4a2:	6838      	ldr	r0, [r7, #0]
 800c4a4:	f7ff ff7c 	bl	800c3a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	617b      	str	r3, [r7, #20]
 800c4be:	2300      	movs	r3, #0
 800c4c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d008      	beq.n	800c4da <pbuf_copy+0x2a>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <pbuf_copy+0x2a>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	891a      	ldrh	r2, [r3, #8]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	891b      	ldrh	r3, [r3, #8]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d209      	bcs.n	800c4ee <pbuf_copy+0x3e>
 800c4da:	4b57      	ldr	r3, [pc, #348]	; (800c638 <pbuf_copy+0x188>)
 800c4dc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c4e0:	4956      	ldr	r1, [pc, #344]	; (800c63c <pbuf_copy+0x18c>)
 800c4e2:	4857      	ldr	r0, [pc, #348]	; (800c640 <pbuf_copy+0x190>)
 800c4e4:	f009 fee6 	bl	80162b4 <iprintf>
 800c4e8:	f06f 030f 	mvn.w	r3, #15
 800c4ec:	e09f      	b.n	800c62e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	895b      	ldrh	r3, [r3, #10]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	1ad2      	subs	r2, r2, r3
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	895b      	ldrh	r3, [r3, #10]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	1acb      	subs	r3, r1, r3
 800c502:	429a      	cmp	r2, r3
 800c504:	d306      	bcc.n	800c514 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	895b      	ldrh	r3, [r3, #10]
 800c50a:	461a      	mov	r2, r3
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e005      	b.n	800c520 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	895b      	ldrh	r3, [r3, #10]
 800c518:	461a      	mov	r2, r3
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	18d0      	adds	r0, r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	4413      	add	r3, r2
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4619      	mov	r1, r3
 800c534:	f008 ffab 	bl	801548e <memcpy>
    offset_to += len;
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	4413      	add	r3, r2
 800c53e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	895b      	ldrh	r3, [r3, #10]
 800c54c:	461a      	mov	r2, r3
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	4293      	cmp	r3, r2
 800c552:	d906      	bls.n	800c562 <pbuf_copy+0xb2>
 800c554:	4b38      	ldr	r3, [pc, #224]	; (800c638 <pbuf_copy+0x188>)
 800c556:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c55a:	493a      	ldr	r1, [pc, #232]	; (800c644 <pbuf_copy+0x194>)
 800c55c:	4838      	ldr	r0, [pc, #224]	; (800c640 <pbuf_copy+0x190>)
 800c55e:	f009 fea9 	bl	80162b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	895b      	ldrh	r3, [r3, #10]
 800c566:	461a      	mov	r2, r3
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d906      	bls.n	800c57c <pbuf_copy+0xcc>
 800c56e:	4b32      	ldr	r3, [pc, #200]	; (800c638 <pbuf_copy+0x188>)
 800c570:	f240 32da 	movw	r2, #986	; 0x3da
 800c574:	4934      	ldr	r1, [pc, #208]	; (800c648 <pbuf_copy+0x198>)
 800c576:	4832      	ldr	r0, [pc, #200]	; (800c640 <pbuf_copy+0x190>)
 800c578:	f009 fe9c 	bl	80162b4 <iprintf>
    if (offset_from >= p_from->len) {
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	895b      	ldrh	r3, [r3, #10]
 800c580:	461a      	mov	r2, r3
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	4293      	cmp	r3, r2
 800c586:	d304      	bcc.n	800c592 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	895b      	ldrh	r3, [r3, #10]
 800c596:	461a      	mov	r2, r3
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d114      	bne.n	800c5c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10c      	bne.n	800c5c8 <pbuf_copy+0x118>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d009      	beq.n	800c5c8 <pbuf_copy+0x118>
 800c5b4:	4b20      	ldr	r3, [pc, #128]	; (800c638 <pbuf_copy+0x188>)
 800c5b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c5ba:	4924      	ldr	r1, [pc, #144]	; (800c64c <pbuf_copy+0x19c>)
 800c5bc:	4820      	ldr	r0, [pc, #128]	; (800c640 <pbuf_copy+0x190>)
 800c5be:	f009 fe79 	bl	80162b4 <iprintf>
 800c5c2:	f06f 030f 	mvn.w	r3, #15
 800c5c6:	e032      	b.n	800c62e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d013      	beq.n	800c5f6 <pbuf_copy+0x146>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	895a      	ldrh	r2, [r3, #10]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	891b      	ldrh	r3, [r3, #8]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d10d      	bne.n	800c5f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d009      	beq.n	800c5f6 <pbuf_copy+0x146>
 800c5e2:	4b15      	ldr	r3, [pc, #84]	; (800c638 <pbuf_copy+0x188>)
 800c5e4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c5e8:	4919      	ldr	r1, [pc, #100]	; (800c650 <pbuf_copy+0x1a0>)
 800c5ea:	4815      	ldr	r0, [pc, #84]	; (800c640 <pbuf_copy+0x190>)
 800c5ec:	f009 fe62 	bl	80162b4 <iprintf>
 800c5f0:	f06f 0305 	mvn.w	r3, #5
 800c5f4:	e01b      	b.n	800c62e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d013      	beq.n	800c624 <pbuf_copy+0x174>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	895a      	ldrh	r2, [r3, #10]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	891b      	ldrh	r3, [r3, #8]
 800c604:	429a      	cmp	r2, r3
 800c606:	d10d      	bne.n	800c624 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d009      	beq.n	800c624 <pbuf_copy+0x174>
 800c610:	4b09      	ldr	r3, [pc, #36]	; (800c638 <pbuf_copy+0x188>)
 800c612:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c616:	490e      	ldr	r1, [pc, #56]	; (800c650 <pbuf_copy+0x1a0>)
 800c618:	4809      	ldr	r0, [pc, #36]	; (800c640 <pbuf_copy+0x190>)
 800c61a:	f009 fe4b 	bl	80162b4 <iprintf>
 800c61e:	f06f 0305 	mvn.w	r3, #5
 800c622:	e004      	b.n	800c62e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f47f af61 	bne.w	800c4ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	0801a89c 	.word	0x0801a89c
 800c63c:	0801ab44 	.word	0x0801ab44
 800c640:	0801a8fc 	.word	0x0801a8fc
 800c644:	0801ab74 	.word	0x0801ab74
 800c648:	0801ab8c 	.word	0x0801ab8c
 800c64c:	0801aba8 	.word	0x0801aba8
 800c650:	0801abb8 	.word	0x0801abb8

0800c654 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	4611      	mov	r1, r2
 800c660:	461a      	mov	r2, r3
 800c662:	460b      	mov	r3, r1
 800c664:	80fb      	strh	r3, [r7, #6]
 800c666:	4613      	mov	r3, r2
 800c668:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d108      	bne.n	800c68a <pbuf_copy_partial+0x36>
 800c678:	4b2b      	ldr	r3, [pc, #172]	; (800c728 <pbuf_copy_partial+0xd4>)
 800c67a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c67e:	492b      	ldr	r1, [pc, #172]	; (800c72c <pbuf_copy_partial+0xd8>)
 800c680:	482b      	ldr	r0, [pc, #172]	; (800c730 <pbuf_copy_partial+0xdc>)
 800c682:	f009 fe17 	bl	80162b4 <iprintf>
 800c686:	2300      	movs	r3, #0
 800c688:	e04a      	b.n	800c720 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d108      	bne.n	800c6a2 <pbuf_copy_partial+0x4e>
 800c690:	4b25      	ldr	r3, [pc, #148]	; (800c728 <pbuf_copy_partial+0xd4>)
 800c692:	f240 420b 	movw	r2, #1035	; 0x40b
 800c696:	4927      	ldr	r1, [pc, #156]	; (800c734 <pbuf_copy_partial+0xe0>)
 800c698:	4825      	ldr	r0, [pc, #148]	; (800c730 <pbuf_copy_partial+0xdc>)
 800c69a:	f009 fe0b 	bl	80162b4 <iprintf>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e03e      	b.n	800c720 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	61fb      	str	r3, [r7, #28]
 800c6a6:	e034      	b.n	800c712 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c6a8:	88bb      	ldrh	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <pbuf_copy_partial+0x70>
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	895b      	ldrh	r3, [r3, #10]
 800c6b2:	88ba      	ldrh	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d305      	bcc.n	800c6c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	895b      	ldrh	r3, [r3, #10]
 800c6bc:	88ba      	ldrh	r2, [r7, #4]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	80bb      	strh	r3, [r7, #4]
 800c6c2:	e023      	b.n	800c70c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	895a      	ldrh	r2, [r3, #10]
 800c6c8:	88bb      	ldrh	r3, [r7, #4]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c6ce:	8b3a      	ldrh	r2, [r7, #24]
 800c6d0:	88fb      	ldrh	r3, [r7, #6]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d901      	bls.n	800c6da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c6d6:	88fb      	ldrh	r3, [r7, #6]
 800c6d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c6da:	8b7b      	ldrh	r3, [r7, #26]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	18d0      	adds	r0, r2, r3
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	88bb      	ldrh	r3, [r7, #4]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	8b3a      	ldrh	r2, [r7, #24]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	f008 fecf 	bl	801548e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c6f0:	8afa      	ldrh	r2, [r7, #22]
 800c6f2:	8b3b      	ldrh	r3, [r7, #24]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c6f8:	8b7a      	ldrh	r2, [r7, #26]
 800c6fa:	8b3b      	ldrh	r3, [r7, #24]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c700:	88fa      	ldrh	r2, [r7, #6]
 800c702:	8b3b      	ldrh	r3, [r7, #24]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	61fb      	str	r3, [r7, #28]
 800c712:	88fb      	ldrh	r3, [r7, #6]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <pbuf_copy_partial+0xca>
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1c4      	bne.n	800c6a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c71e:	8afb      	ldrh	r3, [r7, #22]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3720      	adds	r7, #32
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	0801a89c 	.word	0x0801a89c
 800c72c:	0801abe4 	.word	0x0801abe4
 800c730:	0801a8fc 	.word	0x0801a8fc
 800c734:	0801ac04 	.word	0x0801ac04

0800c738 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	4603      	mov	r3, r0
 800c740:	603a      	str	r2, [r7, #0]
 800c742:	71fb      	strb	r3, [r7, #7]
 800c744:	460b      	mov	r3, r1
 800c746:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	8919      	ldrh	r1, [r3, #8]
 800c74c:	88ba      	ldrh	r2, [r7, #4]
 800c74e:	79fb      	ldrb	r3, [r7, #7]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff faa5 	bl	800bca0 <pbuf_alloc>
 800c756:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <pbuf_clone+0x2a>
    return NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	e011      	b.n	800c786 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f7ff fea3 	bl	800c4b0 <pbuf_copy>
 800c76a:	4603      	mov	r3, r0
 800c76c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c76e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d006      	beq.n	800c784 <pbuf_clone+0x4c>
 800c776:	4b06      	ldr	r3, [pc, #24]	; (800c790 <pbuf_clone+0x58>)
 800c778:	f240 5224 	movw	r2, #1316	; 0x524
 800c77c:	4905      	ldr	r1, [pc, #20]	; (800c794 <pbuf_clone+0x5c>)
 800c77e:	4806      	ldr	r0, [pc, #24]	; (800c798 <pbuf_clone+0x60>)
 800c780:	f009 fd98 	bl	80162b4 <iprintf>
  return q;
 800c784:	68fb      	ldr	r3, [r7, #12]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	0801a89c 	.word	0x0801a89c
 800c794:	0801ad10 	.word	0x0801ad10
 800c798:	0801a8fc 	.word	0x0801a8fc

0800c79c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c7a0:	f009 fda0 	bl	80162e4 <rand>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	4b01      	ldr	r3, [pc, #4]	; (800c7bc <tcp_init+0x20>)
 800c7b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7b8:	bf00      	nop
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	20000016 	.word	0x20000016

0800c7c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7d1b      	ldrb	r3, [r3, #20]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d105      	bne.n	800c7dc <tcp_free+0x1c>
 800c7d0:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <tcp_free+0x2c>)
 800c7d2:	22d4      	movs	r2, #212	; 0xd4
 800c7d4:	4906      	ldr	r1, [pc, #24]	; (800c7f0 <tcp_free+0x30>)
 800c7d6:	4807      	ldr	r0, [pc, #28]	; (800c7f4 <tcp_free+0x34>)
 800c7d8:	f009 fd6c 	bl	80162b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	2001      	movs	r0, #1
 800c7e0:	f7fe ff44 	bl	800b66c <memp_free>
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	0801ad9c 	.word	0x0801ad9c
 800c7f0:	0801adcc 	.word	0x0801adcc
 800c7f4:	0801ade0 	.word	0x0801ade0

0800c7f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7d1b      	ldrb	r3, [r3, #20]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d105      	bne.n	800c814 <tcp_free_listen+0x1c>
 800c808:	4b06      	ldr	r3, [pc, #24]	; (800c824 <tcp_free_listen+0x2c>)
 800c80a:	22df      	movs	r2, #223	; 0xdf
 800c80c:	4906      	ldr	r1, [pc, #24]	; (800c828 <tcp_free_listen+0x30>)
 800c80e:	4807      	ldr	r0, [pc, #28]	; (800c82c <tcp_free_listen+0x34>)
 800c810:	f009 fd50 	bl	80162b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	2002      	movs	r0, #2
 800c818:	f7fe ff28 	bl	800b66c <memp_free>
}
 800c81c:	bf00      	nop
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	0801ad9c 	.word	0x0801ad9c
 800c828:	0801ae08 	.word	0x0801ae08
 800c82c:	0801ade0 	.word	0x0801ade0

0800c830 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c834:	f001 f852 	bl	800d8dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c838:	4b07      	ldr	r3, [pc, #28]	; (800c858 <tcp_tmr+0x28>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	3301      	adds	r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	4b05      	ldr	r3, [pc, #20]	; (800c858 <tcp_tmr+0x28>)
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	4b04      	ldr	r3, [pc, #16]	; (800c858 <tcp_tmr+0x28>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c850:	f000 fd06 	bl	800d260 <tcp_slowtmr>
  }
}
 800c854:	bf00      	nop
 800c856:	bd80      	pop	{r7, pc}
 800c858:	200004a9 	.word	0x200004a9

0800c85c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d105      	bne.n	800c878 <tcp_remove_listener+0x1c>
 800c86c:	4b0d      	ldr	r3, [pc, #52]	; (800c8a4 <tcp_remove_listener+0x48>)
 800c86e:	22ff      	movs	r2, #255	; 0xff
 800c870:	490d      	ldr	r1, [pc, #52]	; (800c8a8 <tcp_remove_listener+0x4c>)
 800c872:	480e      	ldr	r0, [pc, #56]	; (800c8ac <tcp_remove_listener+0x50>)
 800c874:	f009 fd1e 	bl	80162b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e00a      	b.n	800c894 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d102      	bne.n	800c88e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1f1      	bne.n	800c87e <tcp_remove_listener+0x22>
    }
  }
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	0801ad9c 	.word	0x0801ad9c
 800c8a8:	0801ae24 	.word	0x0801ae24
 800c8ac:	0801ade0 	.word	0x0801ade0

0800c8b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d106      	bne.n	800c8cc <tcp_listen_closed+0x1c>
 800c8be:	4b14      	ldr	r3, [pc, #80]	; (800c910 <tcp_listen_closed+0x60>)
 800c8c0:	f240 1211 	movw	r2, #273	; 0x111
 800c8c4:	4913      	ldr	r1, [pc, #76]	; (800c914 <tcp_listen_closed+0x64>)
 800c8c6:	4814      	ldr	r0, [pc, #80]	; (800c918 <tcp_listen_closed+0x68>)
 800c8c8:	f009 fcf4 	bl	80162b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7d1b      	ldrb	r3, [r3, #20]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d006      	beq.n	800c8e2 <tcp_listen_closed+0x32>
 800c8d4:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <tcp_listen_closed+0x60>)
 800c8d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c8da:	4910      	ldr	r1, [pc, #64]	; (800c91c <tcp_listen_closed+0x6c>)
 800c8dc:	480e      	ldr	r0, [pc, #56]	; (800c918 <tcp_listen_closed+0x68>)
 800c8de:	f009 fce9 	bl	80162b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	e00b      	b.n	800c900 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c8e8:	4a0d      	ldr	r2, [pc, #52]	; (800c920 <tcp_listen_closed+0x70>)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	6879      	ldr	r1, [r7, #4]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff ffb1 	bl	800c85c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2b03      	cmp	r3, #3
 800c904:	d9f0      	bls.n	800c8e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c906:	bf00      	nop
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	0801ad9c 	.word	0x0801ad9c
 800c914:	0801ae4c 	.word	0x0801ae4c
 800c918:	0801ade0 	.word	0x0801ade0
 800c91c:	0801ae58 	.word	0x0801ae58
 800c920:	0801cd7c 	.word	0x0801cd7c

0800c924 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c924:	b5b0      	push	{r4, r5, r7, lr}
 800c926:	b088      	sub	sp, #32
 800c928:	af04      	add	r7, sp, #16
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d106      	bne.n	800c944 <tcp_close_shutdown+0x20>
 800c936:	4b61      	ldr	r3, [pc, #388]	; (800cabc <tcp_close_shutdown+0x198>)
 800c938:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c93c:	4960      	ldr	r1, [pc, #384]	; (800cac0 <tcp_close_shutdown+0x19c>)
 800c93e:	4861      	ldr	r0, [pc, #388]	; (800cac4 <tcp_close_shutdown+0x1a0>)
 800c940:	f009 fcb8 	bl	80162b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d066      	beq.n	800ca18 <tcp_close_shutdown+0xf4>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7d1b      	ldrb	r3, [r3, #20]
 800c94e:	2b04      	cmp	r3, #4
 800c950:	d003      	beq.n	800c95a <tcp_close_shutdown+0x36>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7d1b      	ldrb	r3, [r3, #20]
 800c956:	2b07      	cmp	r3, #7
 800c958:	d15e      	bne.n	800ca18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <tcp_close_shutdown+0x48>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c966:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c96a:	d055      	beq.n	800ca18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	8b5b      	ldrh	r3, [r3, #26]
 800c970:	f003 0310 	and.w	r3, r3, #16
 800c974:	2b00      	cmp	r3, #0
 800c976:	d106      	bne.n	800c986 <tcp_close_shutdown+0x62>
 800c978:	4b50      	ldr	r3, [pc, #320]	; (800cabc <tcp_close_shutdown+0x198>)
 800c97a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c97e:	4952      	ldr	r1, [pc, #328]	; (800cac8 <tcp_close_shutdown+0x1a4>)
 800c980:	4850      	ldr	r0, [pc, #320]	; (800cac4 <tcp_close_shutdown+0x1a0>)
 800c982:	f009 fc97 	bl	80162b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c98e:	687d      	ldr	r5, [r7, #4]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	3304      	adds	r3, #4
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	8ad2      	ldrh	r2, [r2, #22]
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	8b09      	ldrh	r1, [r1, #24]
 800c99c:	9102      	str	r1, [sp, #8]
 800c99e:	9201      	str	r2, [sp, #4]
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	462b      	mov	r3, r5
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f005 fd8b 	bl	80124c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f001 fb5a 	bl	800e068 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c9b4:	4b45      	ldr	r3, [pc, #276]	; (800cacc <tcp_close_shutdown+0x1a8>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d105      	bne.n	800c9ca <tcp_close_shutdown+0xa6>
 800c9be:	4b43      	ldr	r3, [pc, #268]	; (800cacc <tcp_close_shutdown+0x1a8>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	4a41      	ldr	r2, [pc, #260]	; (800cacc <tcp_close_shutdown+0x1a8>)
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e013      	b.n	800c9f2 <tcp_close_shutdown+0xce>
 800c9ca:	4b40      	ldr	r3, [pc, #256]	; (800cacc <tcp_close_shutdown+0x1a8>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	e00c      	b.n	800c9ec <tcp_close_shutdown+0xc8>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d104      	bne.n	800c9e6 <tcp_close_shutdown+0xc2>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	60da      	str	r2, [r3, #12]
 800c9e4:	e005      	b.n	800c9f2 <tcp_close_shutdown+0xce>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	60fb      	str	r3, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1ef      	bne.n	800c9d2 <tcp_close_shutdown+0xae>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	60da      	str	r2, [r3, #12]
 800c9f8:	4b35      	ldr	r3, [pc, #212]	; (800cad0 <tcp_close_shutdown+0x1ac>)
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c9fe:	4b35      	ldr	r3, [pc, #212]	; (800cad4 <tcp_close_shutdown+0x1b0>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d102      	bne.n	800ca0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ca08:	f003 ffec 	bl	80109e4 <tcp_trigger_input_pcb_close>
 800ca0c:	e002      	b.n	800ca14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff fed6 	bl	800c7c0 <tcp_free>
      }
      return ERR_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	e04d      	b.n	800cab4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	7d1b      	ldrb	r3, [r3, #20]
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d02d      	beq.n	800ca7c <tcp_close_shutdown+0x158>
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d036      	beq.n	800ca92 <tcp_close_shutdown+0x16e>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d13f      	bne.n	800caa8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	8adb      	ldrh	r3, [r3, #22]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d021      	beq.n	800ca74 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca30:	4b29      	ldr	r3, [pc, #164]	; (800cad8 <tcp_close_shutdown+0x1b4>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d105      	bne.n	800ca46 <tcp_close_shutdown+0x122>
 800ca3a:	4b27      	ldr	r3, [pc, #156]	; (800cad8 <tcp_close_shutdown+0x1b4>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	4a25      	ldr	r2, [pc, #148]	; (800cad8 <tcp_close_shutdown+0x1b4>)
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	e013      	b.n	800ca6e <tcp_close_shutdown+0x14a>
 800ca46:	4b24      	ldr	r3, [pc, #144]	; (800cad8 <tcp_close_shutdown+0x1b4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60bb      	str	r3, [r7, #8]
 800ca4c:	e00c      	b.n	800ca68 <tcp_close_shutdown+0x144>
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d104      	bne.n	800ca62 <tcp_close_shutdown+0x13e>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	60da      	str	r2, [r3, #12]
 800ca60:	e005      	b.n	800ca6e <tcp_close_shutdown+0x14a>
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	60bb      	str	r3, [r7, #8]
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d1ef      	bne.n	800ca4e <tcp_close_shutdown+0x12a>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7ff fea3 	bl	800c7c0 <tcp_free>
      break;
 800ca7a:	e01a      	b.n	800cab2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff ff17 	bl	800c8b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	4815      	ldr	r0, [pc, #84]	; (800cadc <tcp_close_shutdown+0x1b8>)
 800ca86:	f001 fb3f 	bl	800e108 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7ff feb4 	bl	800c7f8 <tcp_free_listen>
      break;
 800ca90:	e00f      	b.n	800cab2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca92:	6879      	ldr	r1, [r7, #4]
 800ca94:	480d      	ldr	r0, [pc, #52]	; (800cacc <tcp_close_shutdown+0x1a8>)
 800ca96:	f001 fb37 	bl	800e108 <tcp_pcb_remove>
 800ca9a:	4b0d      	ldr	r3, [pc, #52]	; (800cad0 <tcp_close_shutdown+0x1ac>)
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff fe8d 	bl	800c7c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800caa6:	e004      	b.n	800cab2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f819 	bl	800cae0 <tcp_close_shutdown_fin>
 800caae:	4603      	mov	r3, r0
 800cab0:	e000      	b.n	800cab4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bdb0      	pop	{r4, r5, r7, pc}
 800cabc:	0801ad9c 	.word	0x0801ad9c
 800cac0:	0801ae70 	.word	0x0801ae70
 800cac4:	0801ade0 	.word	0x0801ade0
 800cac8:	0801ae90 	.word	0x0801ae90
 800cacc:	20007500 	.word	0x20007500
 800cad0:	200074fc 	.word	0x200074fc
 800cad4:	20007514 	.word	0x20007514
 800cad8:	2000750c 	.word	0x2000750c
 800cadc:	20007508 	.word	0x20007508

0800cae0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <tcp_close_shutdown_fin+0x1c>
 800caee:	4b2c      	ldr	r3, [pc, #176]	; (800cba0 <tcp_close_shutdown_fin+0xc0>)
 800caf0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800caf4:	492b      	ldr	r1, [pc, #172]	; (800cba4 <tcp_close_shutdown_fin+0xc4>)
 800caf6:	482c      	ldr	r0, [pc, #176]	; (800cba8 <tcp_close_shutdown_fin+0xc8>)
 800caf8:	f009 fbdc 	bl	80162b4 <iprintf>

  switch (pcb->state) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d010      	beq.n	800cb26 <tcp_close_shutdown_fin+0x46>
 800cb04:	2b07      	cmp	r3, #7
 800cb06:	d01b      	beq.n	800cb40 <tcp_close_shutdown_fin+0x60>
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d126      	bne.n	800cb5a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f004 fdd5 	bl	80116bc <tcp_send_fin>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d11f      	bne.n	800cb5e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2205      	movs	r2, #5
 800cb22:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb24:	e01b      	b.n	800cb5e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f004 fdc8 	bl	80116bc <tcp_send_fin>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d114      	bne.n	800cb62 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2205      	movs	r2, #5
 800cb3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb3e:	e010      	b.n	800cb62 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f004 fdbb 	bl	80116bc <tcp_send_fin>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d109      	bne.n	800cb66 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2209      	movs	r2, #9
 800cb56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb58:	e005      	b.n	800cb66 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e01c      	b.n	800cb98 <tcp_close_shutdown_fin+0xb8>
      break;
 800cb5e:	bf00      	nop
 800cb60:	e002      	b.n	800cb68 <tcp_close_shutdown_fin+0x88>
      break;
 800cb62:	bf00      	nop
 800cb64:	e000      	b.n	800cb68 <tcp_close_shutdown_fin+0x88>
      break;
 800cb66:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d103      	bne.n	800cb78 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f004 fee1 	bl	8011938 <tcp_output>
 800cb76:	e00d      	b.n	800cb94 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800cb78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb80:	d108      	bne.n	800cb94 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	8b5b      	ldrh	r3, [r3, #26]
 800cb86:	f043 0308 	orr.w	r3, r3, #8
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb90:	2300      	movs	r3, #0
 800cb92:	e001      	b.n	800cb98 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800cb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	0801ad9c 	.word	0x0801ad9c
 800cba4:	0801ae4c 	.word	0x0801ae4c
 800cba8:	0801ade0 	.word	0x0801ade0

0800cbac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d109      	bne.n	800cbce <tcp_close+0x22>
 800cbba:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <tcp_close+0x4c>)
 800cbbc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cbc0:	490e      	ldr	r1, [pc, #56]	; (800cbfc <tcp_close+0x50>)
 800cbc2:	480f      	ldr	r0, [pc, #60]	; (800cc00 <tcp_close+0x54>)
 800cbc4:	f009 fb76 	bl	80162b4 <iprintf>
 800cbc8:	f06f 030f 	mvn.w	r3, #15
 800cbcc:	e00f      	b.n	800cbee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	7d1b      	ldrb	r3, [r3, #20]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d006      	beq.n	800cbe4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	8b5b      	ldrh	r3, [r3, #26]
 800cbda:	f043 0310 	orr.w	r3, r3, #16
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff fe9c 	bl	800c924 <tcp_close_shutdown>
 800cbec:	4603      	mov	r3, r0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	0801ad9c 	.word	0x0801ad9c
 800cbfc:	0801aeac 	.word	0x0801aeac
 800cc00:	0801ade0 	.word	0x0801ade0

0800cc04 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08e      	sub	sp, #56	; 0x38
 800cc08:	af04      	add	r7, sp, #16
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d107      	bne.n	800cc24 <tcp_abandon+0x20>
 800cc14:	4b52      	ldr	r3, [pc, #328]	; (800cd60 <tcp_abandon+0x15c>)
 800cc16:	f240 223d 	movw	r2, #573	; 0x23d
 800cc1a:	4952      	ldr	r1, [pc, #328]	; (800cd64 <tcp_abandon+0x160>)
 800cc1c:	4852      	ldr	r0, [pc, #328]	; (800cd68 <tcp_abandon+0x164>)
 800cc1e:	f009 fb49 	bl	80162b4 <iprintf>
 800cc22:	e099      	b.n	800cd58 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7d1b      	ldrb	r3, [r3, #20]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d106      	bne.n	800cc3a <tcp_abandon+0x36>
 800cc2c:	4b4c      	ldr	r3, [pc, #304]	; (800cd60 <tcp_abandon+0x15c>)
 800cc2e:	f240 2241 	movw	r2, #577	; 0x241
 800cc32:	494e      	ldr	r1, [pc, #312]	; (800cd6c <tcp_abandon+0x168>)
 800cc34:	484c      	ldr	r0, [pc, #304]	; (800cd68 <tcp_abandon+0x164>)
 800cc36:	f009 fb3d 	bl	80162b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	7d1b      	ldrb	r3, [r3, #20]
 800cc3e:	2b0a      	cmp	r3, #10
 800cc40:	d107      	bne.n	800cc52 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc42:	6879      	ldr	r1, [r7, #4]
 800cc44:	484a      	ldr	r0, [pc, #296]	; (800cd70 <tcp_abandon+0x16c>)
 800cc46:	f001 fa5f 	bl	800e108 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7ff fdb8 	bl	800c7c0 <tcp_free>
 800cc50:	e082      	b.n	800cd58 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc5e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc6c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7d1b      	ldrb	r3, [r3, #20]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d126      	bne.n	800ccca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	8adb      	ldrh	r3, [r3, #22]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d02e      	beq.n	800cce2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc84:	4b3b      	ldr	r3, [pc, #236]	; (800cd74 <tcp_abandon+0x170>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d105      	bne.n	800cc9a <tcp_abandon+0x96>
 800cc8e:	4b39      	ldr	r3, [pc, #228]	; (800cd74 <tcp_abandon+0x170>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	4a37      	ldr	r2, [pc, #220]	; (800cd74 <tcp_abandon+0x170>)
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	e013      	b.n	800ccc2 <tcp_abandon+0xbe>
 800cc9a:	4b36      	ldr	r3, [pc, #216]	; (800cd74 <tcp_abandon+0x170>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	61fb      	str	r3, [r7, #28]
 800cca0:	e00c      	b.n	800ccbc <tcp_abandon+0xb8>
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d104      	bne.n	800ccb6 <tcp_abandon+0xb2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68da      	ldr	r2, [r3, #12]
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	60da      	str	r2, [r3, #12]
 800ccb4:	e005      	b.n	800ccc2 <tcp_abandon+0xbe>
 800ccb6:	69fb      	ldr	r3, [r7, #28]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	61fb      	str	r3, [r7, #28]
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1ef      	bne.n	800cca2 <tcp_abandon+0x9e>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	60da      	str	r2, [r3, #12]
 800ccc8:	e00b      	b.n	800cce2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8adb      	ldrh	r3, [r3, #22]
 800ccd2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4828      	ldr	r0, [pc, #160]	; (800cd78 <tcp_abandon+0x174>)
 800ccd8:	f001 fa16 	bl	800e108 <tcp_pcb_remove>
 800ccdc:	4b27      	ldr	r3, [pc, #156]	; (800cd7c <tcp_abandon+0x178>)
 800ccde:	2201      	movs	r2, #1
 800cce0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d004      	beq.n	800ccf4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fed4 	bl	800da9c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 fecb 	bl	800da9c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fec2 	bl	800da9c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00e      	beq.n	800cd3c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd1e:	6879      	ldr	r1, [r7, #4]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	3304      	adds	r3, #4
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	8b12      	ldrh	r2, [r2, #24]
 800cd28:	9202      	str	r2, [sp, #8]
 800cd2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd2c:	9201      	str	r2, [sp, #4]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	460b      	mov	r3, r1
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	69b9      	ldr	r1, [r7, #24]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f005 fbc4 	bl	80124c4 <tcp_rst>
    }
    last_state = pcb->state;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	7d1b      	ldrb	r3, [r3, #20]
 800cd40:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff fd3c 	bl	800c7c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <tcp_abandon+0x154>
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	f06f 010c 	mvn.w	r1, #12
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	4798      	blx	r3
  }
}
 800cd58:	3728      	adds	r7, #40	; 0x28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	0801ad9c 	.word	0x0801ad9c
 800cd64:	0801aee0 	.word	0x0801aee0
 800cd68:	0801ade0 	.word	0x0801ade0
 800cd6c:	0801aefc 	.word	0x0801aefc
 800cd70:	20007510 	.word	0x20007510
 800cd74:	2000750c 	.word	0x2000750c
 800cd78:	20007500 	.word	0x20007500
 800cd7c:	200074fc 	.word	0x200074fc

0800cd80 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd88:	2101      	movs	r1, #1
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff ff3a 	bl	800cc04 <tcp_abandon>
}
 800cd90:	bf00      	nop
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	4613      	mov	r3, r2
 800cda4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cda6:	2304      	movs	r3, #4
 800cda8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cdb0:	4b3e      	ldr	r3, [pc, #248]	; (800ceac <tcp_bind+0x114>)
 800cdb2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <tcp_bind+0x36>
 800cdba:	4b3d      	ldr	r3, [pc, #244]	; (800ceb0 <tcp_bind+0x118>)
 800cdbc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cdc0:	493c      	ldr	r1, [pc, #240]	; (800ceb4 <tcp_bind+0x11c>)
 800cdc2:	483d      	ldr	r0, [pc, #244]	; (800ceb8 <tcp_bind+0x120>)
 800cdc4:	f009 fa76 	bl	80162b4 <iprintf>
 800cdc8:	f06f 030f 	mvn.w	r3, #15
 800cdcc:	e06a      	b.n	800cea4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	7d1b      	ldrb	r3, [r3, #20]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d009      	beq.n	800cdea <tcp_bind+0x52>
 800cdd6:	4b36      	ldr	r3, [pc, #216]	; (800ceb0 <tcp_bind+0x118>)
 800cdd8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cddc:	4937      	ldr	r1, [pc, #220]	; (800cebc <tcp_bind+0x124>)
 800cdde:	4836      	ldr	r0, [pc, #216]	; (800ceb8 <tcp_bind+0x120>)
 800cde0:	f009 fa68 	bl	80162b4 <iprintf>
 800cde4:	f06f 0305 	mvn.w	r3, #5
 800cde8:	e05c      	b.n	800cea4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cdea:	88fb      	ldrh	r3, [r7, #6]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d109      	bne.n	800ce04 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cdf0:	f000 f9f0 	bl	800d1d4 <tcp_new_port>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cdf8:	88fb      	ldrh	r3, [r7, #6]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d135      	bne.n	800ce6a <tcp_bind+0xd2>
      return ERR_BUF;
 800cdfe:	f06f 0301 	mvn.w	r3, #1
 800ce02:	e04f      	b.n	800cea4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ce04:	2300      	movs	r3, #0
 800ce06:	61fb      	str	r3, [r7, #28]
 800ce08:	e02b      	b.n	800ce62 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce0a:	4a2d      	ldr	r2, [pc, #180]	; (800cec0 <tcp_bind+0x128>)
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	61bb      	str	r3, [r7, #24]
 800ce16:	e01e      	b.n	800ce56 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	8adb      	ldrh	r3, [r3, #22]
 800ce1c:	88fa      	ldrh	r2, [r7, #6]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d116      	bne.n	800ce50 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce22:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d010      	beq.n	800ce4a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00c      	beq.n	800ce4a <tcp_bind+0xb2>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d009      	beq.n	800ce4a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d005      	beq.n	800ce4a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d102      	bne.n	800ce50 <tcp_bind+0xb8>
              return ERR_USE;
 800ce4a:	f06f 0307 	mvn.w	r3, #7
 800ce4e:	e029      	b.n	800cea4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	61bb      	str	r3, [r7, #24]
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1dd      	bne.n	800ce18 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	61fb      	str	r3, [r7, #28]
 800ce62:	69fa      	ldr	r2, [r7, #28]
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	dbcf      	blt.n	800ce0a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00c      	beq.n	800ce8a <tcp_bind+0xf2>
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d008      	beq.n	800ce8a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <tcp_bind+0xec>
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	e000      	b.n	800ce86 <tcp_bind+0xee>
 800ce84:	2300      	movs	r3, #0
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	88fa      	ldrh	r2, [r7, #6]
 800ce8e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ce90:	4b0c      	ldr	r3, [pc, #48]	; (800cec4 <tcp_bind+0x12c>)
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	60da      	str	r2, [r3, #12]
 800ce98:	4a0a      	ldr	r2, [pc, #40]	; (800cec4 <tcp_bind+0x12c>)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	f005 fcd3 	bl	8012848 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	0801cda4 	.word	0x0801cda4
 800ceb0:	0801ad9c 	.word	0x0801ad9c
 800ceb4:	0801af30 	.word	0x0801af30
 800ceb8:	0801ade0 	.word	0x0801ade0
 800cebc:	0801af48 	.word	0x0801af48
 800cec0:	0801cd7c 	.word	0x0801cd7c
 800cec4:	2000750c 	.word	0x2000750c

0800cec8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	4613      	mov	r3, r2
 800ced4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d106      	bne.n	800ceea <tcp_accept_null+0x22>
 800cedc:	4b07      	ldr	r3, [pc, #28]	; (800cefc <tcp_accept_null+0x34>)
 800cede:	f240 320f 	movw	r2, #783	; 0x30f
 800cee2:	4907      	ldr	r1, [pc, #28]	; (800cf00 <tcp_accept_null+0x38>)
 800cee4:	4807      	ldr	r0, [pc, #28]	; (800cf04 <tcp_accept_null+0x3c>)
 800cee6:	f009 f9e5 	bl	80162b4 <iprintf>

  tcp_abort(pcb);
 800ceea:	68b8      	ldr	r0, [r7, #8]
 800ceec:	f7ff ff48 	bl	800cd80 <tcp_abort>

  return ERR_ABRT;
 800cef0:	f06f 030c 	mvn.w	r3, #12
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0801ad9c 	.word	0x0801ad9c
 800cf00:	0801af70 	.word	0x0801af70
 800cf04:	0801ade0 	.word	0x0801ade0

0800cf08 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	2200      	movs	r2, #0
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f806 	bl	800cf2c <tcp_listen_with_backlog_and_err>
 800cf20:	4603      	mov	r3, r0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	460b      	mov	r3, r1
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d109      	bne.n	800cf58 <tcp_listen_with_backlog_and_err+0x2c>
 800cf44:	4b47      	ldr	r3, [pc, #284]	; (800d064 <tcp_listen_with_backlog_and_err+0x138>)
 800cf46:	f240 3259 	movw	r2, #857	; 0x359
 800cf4a:	4947      	ldr	r1, [pc, #284]	; (800d068 <tcp_listen_with_backlog_and_err+0x13c>)
 800cf4c:	4847      	ldr	r0, [pc, #284]	; (800d06c <tcp_listen_with_backlog_and_err+0x140>)
 800cf4e:	f009 f9b1 	bl	80162b4 <iprintf>
 800cf52:	23f0      	movs	r3, #240	; 0xf0
 800cf54:	76fb      	strb	r3, [r7, #27]
 800cf56:	e079      	b.n	800d04c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	7d1b      	ldrb	r3, [r3, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d009      	beq.n	800cf74 <tcp_listen_with_backlog_and_err+0x48>
 800cf60:	4b40      	ldr	r3, [pc, #256]	; (800d064 <tcp_listen_with_backlog_and_err+0x138>)
 800cf62:	f240 325a 	movw	r2, #858	; 0x35a
 800cf66:	4942      	ldr	r1, [pc, #264]	; (800d070 <tcp_listen_with_backlog_and_err+0x144>)
 800cf68:	4840      	ldr	r0, [pc, #256]	; (800d06c <tcp_listen_with_backlog_and_err+0x140>)
 800cf6a:	f009 f9a3 	bl	80162b4 <iprintf>
 800cf6e:	23f1      	movs	r3, #241	; 0xf1
 800cf70:	76fb      	strb	r3, [r7, #27]
 800cf72:	e06b      	b.n	800d04c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	7d1b      	ldrb	r3, [r3, #20]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d104      	bne.n	800cf86 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cf80:	23f7      	movs	r3, #247	; 0xf7
 800cf82:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf84:	e062      	b.n	800d04c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cf86:	2002      	movs	r0, #2
 800cf88:	f7fe fb24 	bl	800b5d4 <memp_malloc>
 800cf8c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cf94:	23ff      	movs	r3, #255	; 0xff
 800cf96:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf98:	e058      	b.n	800d04c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	691a      	ldr	r2, [r3, #16]
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	8ada      	ldrh	r2, [r3, #22]
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	2201      	movs	r2, #1
 800cfae:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	7d5a      	ldrb	r2, [r3, #21]
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	7a5a      	ldrb	r2, [r3, #9]
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	7ada      	ldrb	r2, [r3, #11]
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	7a9a      	ldrb	r2, [r3, #10]
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	8adb      	ldrh	r3, [r3, #22]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d021      	beq.n	800d02a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfe6:	4b23      	ldr	r3, [pc, #140]	; (800d074 <tcp_listen_with_backlog_and_err+0x148>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d105      	bne.n	800cffc <tcp_listen_with_backlog_and_err+0xd0>
 800cff0:	4b20      	ldr	r3, [pc, #128]	; (800d074 <tcp_listen_with_backlog_and_err+0x148>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	4a1f      	ldr	r2, [pc, #124]	; (800d074 <tcp_listen_with_backlog_and_err+0x148>)
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	e013      	b.n	800d024 <tcp_listen_with_backlog_and_err+0xf8>
 800cffc:	4b1d      	ldr	r3, [pc, #116]	; (800d074 <tcp_listen_with_backlog_and_err+0x148>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e00c      	b.n	800d01e <tcp_listen_with_backlog_and_err+0xf2>
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d104      	bne.n	800d018 <tcp_listen_with_backlog_and_err+0xec>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	68da      	ldr	r2, [r3, #12]
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	e005      	b.n	800d024 <tcp_listen_with_backlog_and_err+0xf8>
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1ef      	bne.n	800d004 <tcp_listen_with_backlog_and_err+0xd8>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f7ff fbc8 	bl	800c7c0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	4a11      	ldr	r2, [pc, #68]	; (800d078 <tcp_listen_with_backlog_and_err+0x14c>)
 800d034:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d036:	4b11      	ldr	r3, [pc, #68]	; (800d07c <tcp_listen_with_backlog_and_err+0x150>)
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	60da      	str	r2, [r3, #12]
 800d03e:	4a0f      	ldr	r2, [pc, #60]	; (800d07c <tcp_listen_with_backlog_and_err+0x150>)
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	f005 fc00 	bl	8012848 <tcp_timer_needed>
  res = ERR_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d002      	beq.n	800d058 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	7efa      	ldrb	r2, [r7, #27]
 800d056:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d058:	69fb      	ldr	r3, [r7, #28]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3720      	adds	r7, #32
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	0801ad9c 	.word	0x0801ad9c
 800d068:	0801af90 	.word	0x0801af90
 800d06c:	0801ade0 	.word	0x0801ade0
 800d070:	0801afc0 	.word	0x0801afc0
 800d074:	2000750c 	.word	0x2000750c
 800d078:	0800cec9 	.word	0x0800cec9
 800d07c:	20007508 	.word	0x20007508

0800d080 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <tcp_update_rcv_ann_wnd+0x1c>
 800d08e:	4b25      	ldr	r3, [pc, #148]	; (800d124 <tcp_update_rcv_ann_wnd+0xa4>)
 800d090:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d094:	4924      	ldr	r1, [pc, #144]	; (800d128 <tcp_update_rcv_ann_wnd+0xa8>)
 800d096:	4825      	ldr	r0, [pc, #148]	; (800d12c <tcp_update_rcv_ann_wnd+0xac>)
 800d098:	f009 f90c 	bl	80162b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d0a4:	4413      	add	r3, r2
 800d0a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d0b0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d0b4:	bf28      	it	cs
 800d0b6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d0ba:	b292      	uxth	r2, r2
 800d0bc:	4413      	add	r3, r2
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	db08      	blt.n	800d0d8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	e020      	b.n	800d11a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	dd03      	ble.n	800d0ee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0ec:	e014      	b.n	800d118 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d100:	d306      	bcc.n	800d110 <tcp_update_rcv_ann_wnd+0x90>
 800d102:	4b08      	ldr	r3, [pc, #32]	; (800d124 <tcp_update_rcv_ann_wnd+0xa4>)
 800d104:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d108:	4909      	ldr	r1, [pc, #36]	; (800d130 <tcp_update_rcv_ann_wnd+0xb0>)
 800d10a:	4808      	ldr	r0, [pc, #32]	; (800d12c <tcp_update_rcv_ann_wnd+0xac>)
 800d10c:	f009 f8d2 	bl	80162b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	b29a      	uxth	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d118:	2300      	movs	r3, #0
  }
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	0801ad9c 	.word	0x0801ad9c
 800d128:	0801aff8 	.word	0x0801aff8
 800d12c:	0801ade0 	.word	0x0801ade0
 800d130:	0801b01c 	.word	0x0801b01c

0800d134 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	460b      	mov	r3, r1
 800d13e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d107      	bne.n	800d156 <tcp_recved+0x22>
 800d146:	4b1f      	ldr	r3, [pc, #124]	; (800d1c4 <tcp_recved+0x90>)
 800d148:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d14c:	491e      	ldr	r1, [pc, #120]	; (800d1c8 <tcp_recved+0x94>)
 800d14e:	481f      	ldr	r0, [pc, #124]	; (800d1cc <tcp_recved+0x98>)
 800d150:	f009 f8b0 	bl	80162b4 <iprintf>
 800d154:	e032      	b.n	800d1bc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	7d1b      	ldrb	r3, [r3, #20]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d106      	bne.n	800d16c <tcp_recved+0x38>
 800d15e:	4b19      	ldr	r3, [pc, #100]	; (800d1c4 <tcp_recved+0x90>)
 800d160:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d164:	491a      	ldr	r1, [pc, #104]	; (800d1d0 <tcp_recved+0x9c>)
 800d166:	4819      	ldr	r0, [pc, #100]	; (800d1cc <tcp_recved+0x98>)
 800d168:	f009 f8a4 	bl	80162b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d170:	887b      	ldrh	r3, [r7, #2]
 800d172:	4413      	add	r3, r2
 800d174:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d176:	89fb      	ldrh	r3, [r7, #14]
 800d178:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d17c:	d804      	bhi.n	800d188 <tcp_recved+0x54>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d182:	89fa      	ldrh	r2, [r7, #14]
 800d184:	429a      	cmp	r2, r3
 800d186:	d204      	bcs.n	800d192 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d18e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d190:	e002      	b.n	800d198 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	89fa      	ldrh	r2, [r7, #14]
 800d196:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff ff71 	bl	800d080 <tcp_update_rcv_ann_wnd>
 800d19e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d1a6:	d309      	bcc.n	800d1bc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8b5b      	ldrh	r3, [r3, #26]
 800d1ac:	f043 0302 	orr.w	r3, r3, #2
 800d1b0:	b29a      	uxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f004 fbbe 	bl	8011938 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0801ad9c 	.word	0x0801ad9c
 800d1c8:	0801b038 	.word	0x0801b038
 800d1cc:	0801ade0 	.word	0x0801ade0
 800d1d0:	0801b050 	.word	0x0801b050

0800d1d4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d1de:	4b1e      	ldr	r3, [pc, #120]	; (800d258 <tcp_new_port+0x84>)
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	4b1c      	ldr	r3, [pc, #112]	; (800d258 <tcp_new_port+0x84>)
 800d1e8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d1ea:	4b1b      	ldr	r3, [pc, #108]	; (800d258 <tcp_new_port+0x84>)
 800d1ec:	881b      	ldrh	r3, [r3, #0]
 800d1ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d103      	bne.n	800d1fe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d1f6:	4b18      	ldr	r3, [pc, #96]	; (800d258 <tcp_new_port+0x84>)
 800d1f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d1fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d1fe:	2300      	movs	r3, #0
 800d200:	71fb      	strb	r3, [r7, #7]
 800d202:	e01e      	b.n	800d242 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d204:	79fb      	ldrb	r3, [r7, #7]
 800d206:	4a15      	ldr	r2, [pc, #84]	; (800d25c <tcp_new_port+0x88>)
 800d208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	603b      	str	r3, [r7, #0]
 800d210:	e011      	b.n	800d236 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	8ada      	ldrh	r2, [r3, #22]
 800d216:	4b10      	ldr	r3, [pc, #64]	; (800d258 <tcp_new_port+0x84>)
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d108      	bne.n	800d230 <tcp_new_port+0x5c>
        n++;
 800d21e:	88bb      	ldrh	r3, [r7, #4]
 800d220:	3301      	adds	r3, #1
 800d222:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d224:	88bb      	ldrh	r3, [r7, #4]
 800d226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d22a:	d3d8      	bcc.n	800d1de <tcp_new_port+0xa>
          return 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	e00d      	b.n	800d24c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	603b      	str	r3, [r7, #0]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1ea      	bne.n	800d212 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d23c:	79fb      	ldrb	r3, [r7, #7]
 800d23e:	3301      	adds	r3, #1
 800d240:	71fb      	strb	r3, [r7, #7]
 800d242:	79fb      	ldrb	r3, [r7, #7]
 800d244:	2b03      	cmp	r3, #3
 800d246:	d9dd      	bls.n	800d204 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d248:	4b03      	ldr	r3, [pc, #12]	; (800d258 <tcp_new_port+0x84>)
 800d24a:	881b      	ldrh	r3, [r3, #0]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	20000016 	.word	0x20000016
 800d25c:	0801cd7c 	.word	0x0801cd7c

0800d260 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d260:	b5b0      	push	{r4, r5, r7, lr}
 800d262:	b090      	sub	sp, #64	; 0x40
 800d264:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d26c:	4b94      	ldr	r3, [pc, #592]	; (800d4c0 <tcp_slowtmr+0x260>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3301      	adds	r3, #1
 800d272:	4a93      	ldr	r2, [pc, #588]	; (800d4c0 <tcp_slowtmr+0x260>)
 800d274:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d276:	4b93      	ldr	r3, [pc, #588]	; (800d4c4 <tcp_slowtmr+0x264>)
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	3301      	adds	r3, #1
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	4b91      	ldr	r3, [pc, #580]	; (800d4c4 <tcp_slowtmr+0x264>)
 800d280:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d286:	4b90      	ldr	r3, [pc, #576]	; (800d4c8 <tcp_slowtmr+0x268>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d28c:	e29d      	b.n	800d7ca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	7d1b      	ldrb	r3, [r3, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d106      	bne.n	800d2a4 <tcp_slowtmr+0x44>
 800d296:	4b8d      	ldr	r3, [pc, #564]	; (800d4cc <tcp_slowtmr+0x26c>)
 800d298:	f240 42be 	movw	r2, #1214	; 0x4be
 800d29c:	498c      	ldr	r1, [pc, #560]	; (800d4d0 <tcp_slowtmr+0x270>)
 800d29e:	488d      	ldr	r0, [pc, #564]	; (800d4d4 <tcp_slowtmr+0x274>)
 800d2a0:	f009 f808 	bl	80162b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a6:	7d1b      	ldrb	r3, [r3, #20]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d106      	bne.n	800d2ba <tcp_slowtmr+0x5a>
 800d2ac:	4b87      	ldr	r3, [pc, #540]	; (800d4cc <tcp_slowtmr+0x26c>)
 800d2ae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d2b2:	4989      	ldr	r1, [pc, #548]	; (800d4d8 <tcp_slowtmr+0x278>)
 800d2b4:	4887      	ldr	r0, [pc, #540]	; (800d4d4 <tcp_slowtmr+0x274>)
 800d2b6:	f008 fffd 	bl	80162b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2bc:	7d1b      	ldrb	r3, [r3, #20]
 800d2be:	2b0a      	cmp	r3, #10
 800d2c0:	d106      	bne.n	800d2d0 <tcp_slowtmr+0x70>
 800d2c2:	4b82      	ldr	r3, [pc, #520]	; (800d4cc <tcp_slowtmr+0x26c>)
 800d2c4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d2c8:	4984      	ldr	r1, [pc, #528]	; (800d4dc <tcp_slowtmr+0x27c>)
 800d2ca:	4882      	ldr	r0, [pc, #520]	; (800d4d4 <tcp_slowtmr+0x274>)
 800d2cc:	f008 fff2 	bl	80162b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	7f9a      	ldrb	r2, [r3, #30]
 800d2d4:	4b7b      	ldr	r3, [pc, #492]	; (800d4c4 <tcp_slowtmr+0x264>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d105      	bne.n	800d2e8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d2e6:	e270      	b.n	800d7ca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d2e8:	4b76      	ldr	r3, [pc, #472]	; (800d4c4 <tcp_slowtmr+0x264>)
 800d2ea:	781a      	ldrb	r2, [r3, #0]
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	7d1b      	ldrb	r3, [r3, #20]
 800d300:	2b02      	cmp	r3, #2
 800d302:	d10a      	bne.n	800d31a <tcp_slowtmr+0xba>
 800d304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d30a:	2b05      	cmp	r3, #5
 800d30c:	d905      	bls.n	800d31a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d30e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d312:	3301      	adds	r3, #1
 800d314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d318:	e11e      	b.n	800d558 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d320:	2b0b      	cmp	r3, #11
 800d322:	d905      	bls.n	800d330 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d328:	3301      	adds	r3, #1
 800d32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d32e:	e113      	b.n	800d558 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d336:	2b00      	cmp	r3, #0
 800d338:	d075      	beq.n	800d426 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d006      	beq.n	800d350 <tcp_slowtmr+0xf0>
 800d342:	4b62      	ldr	r3, [pc, #392]	; (800d4cc <tcp_slowtmr+0x26c>)
 800d344:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d348:	4965      	ldr	r1, [pc, #404]	; (800d4e0 <tcp_slowtmr+0x280>)
 800d34a:	4862      	ldr	r0, [pc, #392]	; (800d4d4 <tcp_slowtmr+0x274>)
 800d34c:	f008 ffb2 	bl	80162b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d106      	bne.n	800d366 <tcp_slowtmr+0x106>
 800d358:	4b5c      	ldr	r3, [pc, #368]	; (800d4cc <tcp_slowtmr+0x26c>)
 800d35a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d35e:	4961      	ldr	r1, [pc, #388]	; (800d4e4 <tcp_slowtmr+0x284>)
 800d360:	485c      	ldr	r0, [pc, #368]	; (800d4d4 <tcp_slowtmr+0x274>)
 800d362:	f008 ffa7 	bl	80162b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d36c:	2b0b      	cmp	r3, #11
 800d36e:	d905      	bls.n	800d37c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d374:	3301      	adds	r3, #1
 800d376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d37a:	e0ed      	b.n	800d558 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d382:	3b01      	subs	r3, #1
 800d384:	4a58      	ldr	r2, [pc, #352]	; (800d4e8 <tcp_slowtmr+0x288>)
 800d386:	5cd3      	ldrb	r3, [r2, r3]
 800d388:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d390:	7c7a      	ldrb	r2, [r7, #17]
 800d392:	429a      	cmp	r2, r3
 800d394:	d907      	bls.n	800d3a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d398:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d39c:	3301      	adds	r3, #1
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d3ac:	7c7a      	ldrb	r2, [r7, #17]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	f200 80d2 	bhi.w	800d558 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d108      	bne.n	800d3d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d3c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c4:	f005 f972 	bl	80126ac <tcp_zero_window_probe>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d014      	beq.n	800d3f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	623b      	str	r3, [r7, #32]
 800d3d2:	e011      	b.n	800d3f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3da:	4619      	mov	r1, r3
 800d3dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3de:	f004 f825 	bl	801142c <tcp_split_unsent_seg>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d107      	bne.n	800d3f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ea:	f004 faa5 	bl	8011938 <tcp_output>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 80ac 	beq.w	800d558 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d40e:	2b06      	cmp	r3, #6
 800d410:	f200 80a2 	bhi.w	800d558 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d420:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d424:	e098      	b.n	800d558 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d428:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	db0f      	blt.n	800d450 <tcp_slowtmr+0x1f0>
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d436:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d008      	beq.n	800d450 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d440:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d444:	b29b      	uxth	r3, r3
 800d446:	3301      	adds	r3, #1
 800d448:	b29b      	uxth	r3, r3
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d45c:	429a      	cmp	r2, r3
 800d45e:	db7b      	blt.n	800d558 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d462:	f004 fd61 	bl	8011f28 <tcp_rexmit_rto_prepare>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d007      	beq.n	800d47c <tcp_slowtmr+0x21c>
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d470:	2b00      	cmp	r3, #0
 800d472:	d171      	bne.n	800d558 <tcp_slowtmr+0x2f8>
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d06d      	beq.n	800d558 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	7d1b      	ldrb	r3, [r3, #20]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d03a      	beq.n	800d4fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d48a:	2b0c      	cmp	r3, #12
 800d48c:	bf28      	it	cs
 800d48e:	230c      	movcs	r3, #12
 800d490:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d498:	10db      	asrs	r3, r3, #3
 800d49a:	b21b      	sxth	r3, r3
 800d49c:	461a      	mov	r2, r3
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4a4:	4413      	add	r3, r2
 800d4a6:	7efa      	ldrb	r2, [r7, #27]
 800d4a8:	4910      	ldr	r1, [pc, #64]	; (800d4ec <tcp_slowtmr+0x28c>)
 800d4aa:	5c8a      	ldrb	r2, [r1, r2]
 800d4ac:	4093      	lsls	r3, r2
 800d4ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	dc1a      	bgt.n	800d4f0 <tcp_slowtmr+0x290>
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	b21a      	sxth	r2, r3
 800d4be:	e019      	b.n	800d4f4 <tcp_slowtmr+0x294>
 800d4c0:	20007504 	.word	0x20007504
 800d4c4:	200004aa 	.word	0x200004aa
 800d4c8:	20007500 	.word	0x20007500
 800d4cc:	0801ad9c 	.word	0x0801ad9c
 800d4d0:	0801b0e0 	.word	0x0801b0e0
 800d4d4:	0801ade0 	.word	0x0801ade0
 800d4d8:	0801b10c 	.word	0x0801b10c
 800d4dc:	0801b138 	.word	0x0801b138
 800d4e0:	0801b168 	.word	0x0801b168
 800d4e4:	0801b19c 	.word	0x0801b19c
 800d4e8:	0801cd74 	.word	0x0801cd74
 800d4ec:	0801cd64 	.word	0x0801cd64
 800d4f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d502:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d50c:	4293      	cmp	r3, r2
 800d50e:	bf28      	it	cs
 800d510:	4613      	movcs	r3, r2
 800d512:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d514:	8a7b      	ldrh	r3, [r7, #18]
 800d516:	085b      	lsrs	r3, r3, #1
 800d518:	b29a      	uxth	r2, r3
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	429a      	cmp	r2, r3
 800d530:	d206      	bcs.n	800d540 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d536:	005b      	lsls	r3, r3, #1
 800d538:	b29a      	uxth	r2, r3
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54c:	2200      	movs	r2, #0
 800d54e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d554:	f004 fd58 	bl	8012008 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	7d1b      	ldrb	r3, [r3, #20]
 800d55c:	2b06      	cmp	r3, #6
 800d55e:	d111      	bne.n	800d584 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	8b5b      	ldrh	r3, [r3, #26]
 800d564:	f003 0310 	and.w	r3, r3, #16
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00b      	beq.n	800d584 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d56c:	4b9c      	ldr	r3, [pc, #624]	; (800d7e0 <tcp_slowtmr+0x580>)
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	6a1b      	ldr	r3, [r3, #32]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	2b28      	cmp	r3, #40	; 0x28
 800d578:	d904      	bls.n	800d584 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57e:	3301      	adds	r3, #1
 800d580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	7a5b      	ldrb	r3, [r3, #9]
 800d588:	f003 0308 	and.w	r3, r3, #8
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d04a      	beq.n	800d626 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d594:	2b04      	cmp	r3, #4
 800d596:	d003      	beq.n	800d5a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d59c:	2b07      	cmp	r3, #7
 800d59e:	d142      	bne.n	800d626 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5a0:	4b8f      	ldr	r3, [pc, #572]	; (800d7e0 <tcp_slowtmr+0x580>)
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	6a1b      	ldr	r3, [r3, #32]
 800d5a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d5b0:	4b8c      	ldr	r3, [pc, #560]	; (800d7e4 <tcp_slowtmr+0x584>)
 800d5b2:	440b      	add	r3, r1
 800d5b4:	498c      	ldr	r1, [pc, #560]	; (800d7e8 <tcp_slowtmr+0x588>)
 800d5b6:	fba1 1303 	umull	r1, r3, r1, r3
 800d5ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d90a      	bls.n	800d5d6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d5ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5d4:	e027      	b.n	800d626 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5d6:	4b82      	ldr	r3, [pc, #520]	; (800d7e0 <tcp_slowtmr+0x580>)
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	4b7f      	ldr	r3, [pc, #508]	; (800d7ec <tcp_slowtmr+0x58c>)
 800d5f0:	fb03 f300 	mul.w	r3, r3, r0
 800d5f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d5f6:	497c      	ldr	r1, [pc, #496]	; (800d7e8 <tcp_slowtmr+0x588>)
 800d5f8:	fba1 1303 	umull	r1, r3, r1, r3
 800d5fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d911      	bls.n	800d626 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d604:	f005 f812 	bl	801262c <tcp_keepalive>
 800d608:	4603      	mov	r3, r0
 800d60a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d60e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d612:	2b00      	cmp	r3, #0
 800d614:	d107      	bne.n	800d626 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d61c:	3301      	adds	r3, #1
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d011      	beq.n	800d652 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d62e:	4b6c      	ldr	r3, [pc, #432]	; (800d7e0 <tcp_slowtmr+0x580>)
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d634:	6a1b      	ldr	r3, [r3, #32]
 800d636:	1ad2      	subs	r2, r2, r3
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d63e:	4619      	mov	r1, r3
 800d640:	460b      	mov	r3, r1
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	440b      	add	r3, r1
 800d646:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d648:	429a      	cmp	r2, r3
 800d64a:	d302      	bcc.n	800d652 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d64e:	f000 febf 	bl	800e3d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d654:	7d1b      	ldrb	r3, [r3, #20]
 800d656:	2b03      	cmp	r3, #3
 800d658:	d10b      	bne.n	800d672 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d65a:	4b61      	ldr	r3, [pc, #388]	; (800d7e0 <tcp_slowtmr+0x580>)
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	2b28      	cmp	r3, #40	; 0x28
 800d666:	d904      	bls.n	800d672 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d66c:	3301      	adds	r3, #1
 800d66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	7d1b      	ldrb	r3, [r3, #20]
 800d676:	2b09      	cmp	r3, #9
 800d678:	d10b      	bne.n	800d692 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d67a:	4b59      	ldr	r3, [pc, #356]	; (800d7e0 <tcp_slowtmr+0x580>)
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	2bf0      	cmp	r3, #240	; 0xf0
 800d686:	d904      	bls.n	800d692 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d68c:	3301      	adds	r3, #1
 800d68e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d696:	2b00      	cmp	r3, #0
 800d698:	d060      	beq.n	800d75c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d6a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6a4:	f000 fce0 	bl	800e068 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d010      	beq.n	800d6d0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d6ae:	4b50      	ldr	r3, [pc, #320]	; (800d7f0 <tcp_slowtmr+0x590>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d106      	bne.n	800d6c6 <tcp_slowtmr+0x466>
 800d6b8:	4b4e      	ldr	r3, [pc, #312]	; (800d7f4 <tcp_slowtmr+0x594>)
 800d6ba:	f240 526d 	movw	r2, #1389	; 0x56d
 800d6be:	494e      	ldr	r1, [pc, #312]	; (800d7f8 <tcp_slowtmr+0x598>)
 800d6c0:	484e      	ldr	r0, [pc, #312]	; (800d7fc <tcp_slowtmr+0x59c>)
 800d6c2:	f008 fdf7 	bl	80162b4 <iprintf>
        prev->next = pcb->next;
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6cc:	60da      	str	r2, [r3, #12]
 800d6ce:	e00f      	b.n	800d6f0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d6d0:	4b47      	ldr	r3, [pc, #284]	; (800d7f0 <tcp_slowtmr+0x590>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d006      	beq.n	800d6e8 <tcp_slowtmr+0x488>
 800d6da:	4b46      	ldr	r3, [pc, #280]	; (800d7f4 <tcp_slowtmr+0x594>)
 800d6dc:	f240 5271 	movw	r2, #1393	; 0x571
 800d6e0:	4947      	ldr	r1, [pc, #284]	; (800d800 <tcp_slowtmr+0x5a0>)
 800d6e2:	4846      	ldr	r0, [pc, #280]	; (800d7fc <tcp_slowtmr+0x59c>)
 800d6e4:	f008 fde6 	bl	80162b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	4a40      	ldr	r2, [pc, #256]	; (800d7f0 <tcp_slowtmr+0x590>)
 800d6ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d013      	beq.n	800d720 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d700:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	3304      	adds	r3, #4
 800d706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d708:	8ad2      	ldrh	r2, [r2, #22]
 800d70a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d70c:	8b09      	ldrh	r1, [r1, #24]
 800d70e:	9102      	str	r1, [sp, #8]
 800d710:	9201      	str	r2, [sp, #4]
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	462b      	mov	r3, r5
 800d716:	4622      	mov	r2, r4
 800d718:	4601      	mov	r1, r0
 800d71a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d71c:	f004 fed2 	bl	80124c4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	7d1b      	ldrb	r3, [r3, #20]
 800d72a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d736:	6838      	ldr	r0, [r7, #0]
 800d738:	f7ff f842 	bl	800c7c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d73c:	4b31      	ldr	r3, [pc, #196]	; (800d804 <tcp_slowtmr+0x5a4>)
 800d73e:	2200      	movs	r2, #0
 800d740:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d004      	beq.n	800d752 <tcp_slowtmr+0x4f2>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f06f 010c 	mvn.w	r1, #12
 800d74e:	68b8      	ldr	r0, [r7, #8]
 800d750:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d752:	4b2c      	ldr	r3, [pc, #176]	; (800d804 <tcp_slowtmr+0x5a4>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d037      	beq.n	800d7ca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d75a:	e592      	b.n	800d282 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	68db      	ldr	r3, [r3, #12]
 800d764:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	7f1b      	ldrb	r3, [r3, #28]
 800d76a:	3301      	adds	r3, #1
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d770:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	7f1a      	ldrb	r2, [r3, #28]
 800d776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d778:	7f5b      	ldrb	r3, [r3, #29]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d325      	bcc.n	800d7ca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	2200      	movs	r2, #0
 800d782:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d784:	4b1f      	ldr	r3, [pc, #124]	; (800d804 <tcp_slowtmr+0x5a4>)
 800d786:	2200      	movs	r2, #0
 800d788:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00b      	beq.n	800d7ac <tcp_slowtmr+0x54c>
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d79c:	6912      	ldr	r2, [r2, #16]
 800d79e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	4798      	blx	r3
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d7aa:	e002      	b.n	800d7b2 <tcp_slowtmr+0x552>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d7b2:	4b14      	ldr	r3, [pc, #80]	; (800d804 <tcp_slowtmr+0x5a4>)
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d000      	beq.n	800d7bc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d7ba:	e562      	b.n	800d282 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d7bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7c6:	f004 f8b7 	bl	8011938 <tcp_output>
  while (pcb != NULL) {
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f47f ad5e 	bne.w	800d28e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d7d6:	4b0c      	ldr	r3, [pc, #48]	; (800d808 <tcp_slowtmr+0x5a8>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d7dc:	e069      	b.n	800d8b2 <tcp_slowtmr+0x652>
 800d7de:	bf00      	nop
 800d7e0:	20007504 	.word	0x20007504
 800d7e4:	000a4cb8 	.word	0x000a4cb8
 800d7e8:	10624dd3 	.word	0x10624dd3
 800d7ec:	000124f8 	.word	0x000124f8
 800d7f0:	20007500 	.word	0x20007500
 800d7f4:	0801ad9c 	.word	0x0801ad9c
 800d7f8:	0801b1d4 	.word	0x0801b1d4
 800d7fc:	0801ade0 	.word	0x0801ade0
 800d800:	0801b200 	.word	0x0801b200
 800d804:	200074fc 	.word	0x200074fc
 800d808:	20007510 	.word	0x20007510
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	7d1b      	ldrb	r3, [r3, #20]
 800d810:	2b0a      	cmp	r3, #10
 800d812:	d006      	beq.n	800d822 <tcp_slowtmr+0x5c2>
 800d814:	4b2a      	ldr	r3, [pc, #168]	; (800d8c0 <tcp_slowtmr+0x660>)
 800d816:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d81a:	492a      	ldr	r1, [pc, #168]	; (800d8c4 <tcp_slowtmr+0x664>)
 800d81c:	482a      	ldr	r0, [pc, #168]	; (800d8c8 <tcp_slowtmr+0x668>)
 800d81e:	f008 fd49 	bl	80162b4 <iprintf>
    pcb_remove = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d828:	4b28      	ldr	r3, [pc, #160]	; (800d8cc <tcp_slowtmr+0x66c>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82e:	6a1b      	ldr	r3, [r3, #32]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	2bf0      	cmp	r3, #240	; 0xf0
 800d834:	d904      	bls.n	800d840 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d83a:	3301      	adds	r3, #1
 800d83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d844:	2b00      	cmp	r3, #0
 800d846:	d02f      	beq.n	800d8a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d84a:	f000 fc0d 	bl	800e068 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	2b00      	cmp	r3, #0
 800d852:	d010      	beq.n	800d876 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d854:	4b1e      	ldr	r3, [pc, #120]	; (800d8d0 <tcp_slowtmr+0x670>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d106      	bne.n	800d86c <tcp_slowtmr+0x60c>
 800d85e:	4b18      	ldr	r3, [pc, #96]	; (800d8c0 <tcp_slowtmr+0x660>)
 800d860:	f240 52af 	movw	r2, #1455	; 0x5af
 800d864:	491b      	ldr	r1, [pc, #108]	; (800d8d4 <tcp_slowtmr+0x674>)
 800d866:	4818      	ldr	r0, [pc, #96]	; (800d8c8 <tcp_slowtmr+0x668>)
 800d868:	f008 fd24 	bl	80162b4 <iprintf>
        prev->next = pcb->next;
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	60da      	str	r2, [r3, #12]
 800d874:	e00f      	b.n	800d896 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d876:	4b16      	ldr	r3, [pc, #88]	; (800d8d0 <tcp_slowtmr+0x670>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d006      	beq.n	800d88e <tcp_slowtmr+0x62e>
 800d880:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <tcp_slowtmr+0x660>)
 800d882:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d886:	4914      	ldr	r1, [pc, #80]	; (800d8d8 <tcp_slowtmr+0x678>)
 800d888:	480f      	ldr	r0, [pc, #60]	; (800d8c8 <tcp_slowtmr+0x668>)
 800d88a:	f008 fd13 	bl	80162b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	4a0f      	ldr	r2, [pc, #60]	; (800d8d0 <tcp_slowtmr+0x670>)
 800d894:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d8a0:	69f8      	ldr	r0, [r7, #28]
 800d8a2:	f7fe ff8d 	bl	800c7c0 <tcp_free>
 800d8a6:	e004      	b.n	800d8b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1a9      	bne.n	800d80c <tcp_slowtmr+0x5ac>
    }
  }
}
 800d8b8:	bf00      	nop
 800d8ba:	3730      	adds	r7, #48	; 0x30
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bdb0      	pop	{r4, r5, r7, pc}
 800d8c0:	0801ad9c 	.word	0x0801ad9c
 800d8c4:	0801b22c 	.word	0x0801b22c
 800d8c8:	0801ade0 	.word	0x0801ade0
 800d8cc:	20007504 	.word	0x20007504
 800d8d0:	20007510 	.word	0x20007510
 800d8d4:	0801b25c 	.word	0x0801b25c
 800d8d8:	0801b284 	.word	0x0801b284

0800d8dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d8e2:	4b2d      	ldr	r3, [pc, #180]	; (800d998 <tcp_fasttmr+0xbc>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	4b2b      	ldr	r3, [pc, #172]	; (800d998 <tcp_fasttmr+0xbc>)
 800d8ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d8ee:	4b2b      	ldr	r3, [pc, #172]	; (800d99c <tcp_fasttmr+0xc0>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8f4:	e048      	b.n	800d988 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	7f9a      	ldrb	r2, [r3, #30]
 800d8fa:	4b27      	ldr	r3, [pc, #156]	; (800d998 <tcp_fasttmr+0xbc>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d03f      	beq.n	800d982 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d902:	4b25      	ldr	r3, [pc, #148]	; (800d998 <tcp_fasttmr+0xbc>)
 800d904:	781a      	ldrb	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	8b5b      	ldrh	r3, [r3, #26]
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	2b00      	cmp	r3, #0
 800d914:	d010      	beq.n	800d938 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	8b5b      	ldrh	r3, [r3, #26]
 800d91a:	f043 0302 	orr.w	r3, r3, #2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f004 f807 	bl	8011938 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	8b5b      	ldrh	r3, [r3, #26]
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	b29a      	uxth	r2, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	8b5b      	ldrh	r3, [r3, #26]
 800d93c:	f003 0308 	and.w	r3, r3, #8
 800d940:	2b00      	cmp	r3, #0
 800d942:	d009      	beq.n	800d958 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	8b5b      	ldrh	r3, [r3, #26]
 800d948:	f023 0308 	bic.w	r3, r3, #8
 800d94c:	b29a      	uxth	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7ff f8c4 	bl	800cae0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00a      	beq.n	800d97c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d966:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <tcp_fasttmr+0xc4>)
 800d968:	2200      	movs	r2, #0
 800d96a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f819 	bl	800d9a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d972:	4b0b      	ldr	r3, [pc, #44]	; (800d9a0 <tcp_fasttmr+0xc4>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d000      	beq.n	800d97c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d97a:	e7b8      	b.n	800d8ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	607b      	str	r3, [r7, #4]
 800d980:	e002      	b.n	800d988 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1b3      	bne.n	800d8f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	200004aa 	.word	0x200004aa
 800d99c:	20007500 	.word	0x20007500
 800d9a0:	200074fc 	.word	0x200074fc

0800d9a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d109      	bne.n	800d9c6 <tcp_process_refused_data+0x22>
 800d9b2:	4b37      	ldr	r3, [pc, #220]	; (800da90 <tcp_process_refused_data+0xec>)
 800d9b4:	f240 6209 	movw	r2, #1545	; 0x609
 800d9b8:	4936      	ldr	r1, [pc, #216]	; (800da94 <tcp_process_refused_data+0xf0>)
 800d9ba:	4837      	ldr	r0, [pc, #220]	; (800da98 <tcp_process_refused_data+0xf4>)
 800d9bc:	f008 fc7a 	bl	80162b4 <iprintf>
 800d9c0:	f06f 030f 	mvn.w	r3, #15
 800d9c4:	e060      	b.n	800da88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ca:	7b5b      	ldrb	r3, [r3, #13]
 800d9cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <tcp_process_refused_data+0x58>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6918      	ldr	r0, [r3, #16]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	47a0      	blx	r4
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73fb      	strb	r3, [r7, #15]
 800d9fa:	e007      	b.n	800da0c <tcp_process_refused_data+0x68>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	2000      	movs	r0, #0
 800da04:	f000 f8c0 	bl	800db88 <tcp_recv_null>
 800da08:	4603      	mov	r3, r0
 800da0a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d12a      	bne.n	800da6a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800da14:	7bbb      	ldrb	r3, [r7, #14]
 800da16:	f003 0320 	and.w	r3, r3, #32
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d033      	beq.n	800da86 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da22:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da26:	d005      	beq.n	800da34 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da2c:	3301      	adds	r3, #1
 800da2e:	b29a      	uxth	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00b      	beq.n	800da56 <tcp_process_refused_data+0xb2>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6918      	ldr	r0, [r3, #16]
 800da48:	2300      	movs	r3, #0
 800da4a:	2200      	movs	r2, #0
 800da4c:	6879      	ldr	r1, [r7, #4]
 800da4e:	47a0      	blx	r4
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
 800da54:	e001      	b.n	800da5a <tcp_process_refused_data+0xb6>
 800da56:	2300      	movs	r3, #0
 800da58:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800da5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da5e:	f113 0f0d 	cmn.w	r3, #13
 800da62:	d110      	bne.n	800da86 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800da64:	f06f 030c 	mvn.w	r3, #12
 800da68:	e00e      	b.n	800da88 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800da6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da6e:	f113 0f0d 	cmn.w	r3, #13
 800da72:	d102      	bne.n	800da7a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800da74:	f06f 030c 	mvn.w	r3, #12
 800da78:	e006      	b.n	800da88 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800da80:	f06f 0304 	mvn.w	r3, #4
 800da84:	e000      	b.n	800da88 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd90      	pop	{r4, r7, pc}
 800da90:	0801ad9c 	.word	0x0801ad9c
 800da94:	0801b2ac 	.word	0x0801b2ac
 800da98:	0801ade0 	.word	0x0801ade0

0800da9c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800daa4:	e007      	b.n	800dab6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 f809 	bl	800dac4 <tcp_seg_free>
    seg = next;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1f4      	bne.n	800daa6 <tcp_segs_free+0xa>
  }
}
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00c      	beq.n	800daec <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d004      	beq.n	800dae4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fbbe 	bl	800c260 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dae4:	6879      	ldr	r1, [r7, #4]
 800dae6:	2003      	movs	r0, #3
 800dae8:	f7fd fdc0 	bl	800b66c <memp_free>
  }
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	460b      	mov	r3, r1
 800dafe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d107      	bne.n	800db16 <tcp_setprio+0x22>
 800db06:	4b07      	ldr	r3, [pc, #28]	; (800db24 <tcp_setprio+0x30>)
 800db08:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800db0c:	4906      	ldr	r1, [pc, #24]	; (800db28 <tcp_setprio+0x34>)
 800db0e:	4807      	ldr	r0, [pc, #28]	; (800db2c <tcp_setprio+0x38>)
 800db10:	f008 fbd0 	bl	80162b4 <iprintf>
 800db14:	e002      	b.n	800db1c <tcp_setprio+0x28>

  pcb->prio = prio;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	78fa      	ldrb	r2, [r7, #3]
 800db1a:	755a      	strb	r2, [r3, #21]
}
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	0801ad9c 	.word	0x0801ad9c
 800db28:	0801b2d4 	.word	0x0801b2d4
 800db2c:	0801ade0 	.word	0x0801ade0

0800db30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d106      	bne.n	800db4c <tcp_seg_copy+0x1c>
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <tcp_seg_copy+0x4c>)
 800db40:	f240 6282 	movw	r2, #1666	; 0x682
 800db44:	490e      	ldr	r1, [pc, #56]	; (800db80 <tcp_seg_copy+0x50>)
 800db46:	480f      	ldr	r0, [pc, #60]	; (800db84 <tcp_seg_copy+0x54>)
 800db48:	f008 fbb4 	bl	80162b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800db4c:	2003      	movs	r0, #3
 800db4e:	f7fd fd41 	bl	800b5d4 <memp_malloc>
 800db52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <tcp_seg_copy+0x2e>
    return NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	e00a      	b.n	800db74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800db5e:	2210      	movs	r2, #16
 800db60:	6879      	ldr	r1, [r7, #4]
 800db62:	68f8      	ldr	r0, [r7, #12]
 800db64:	f007 fc93 	bl	801548e <memcpy>
  pbuf_ref(cseg->p);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe fc17 	bl	800c3a0 <pbuf_ref>
  return cseg;
 800db72:	68fb      	ldr	r3, [r7, #12]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	0801ad9c 	.word	0x0801ad9c
 800db80:	0801b2f0 	.word	0x0801b2f0
 800db84:	0801ade0 	.word	0x0801ade0

0800db88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
 800db94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <tcp_recv_null+0x28>
 800db9c:	4b12      	ldr	r3, [pc, #72]	; (800dbe8 <tcp_recv_null+0x60>)
 800db9e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dba2:	4912      	ldr	r1, [pc, #72]	; (800dbec <tcp_recv_null+0x64>)
 800dba4:	4812      	ldr	r0, [pc, #72]	; (800dbf0 <tcp_recv_null+0x68>)
 800dba6:	f008 fb85 	bl	80162b4 <iprintf>
 800dbaa:	f06f 030f 	mvn.w	r3, #15
 800dbae:	e016      	b.n	800dbde <tcp_recv_null+0x56>

  if (p != NULL) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d009      	beq.n	800dbca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	891b      	ldrh	r3, [r3, #8]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	68b8      	ldr	r0, [r7, #8]
 800dbbe:	f7ff fab9 	bl	800d134 <tcp_recved>
    pbuf_free(p);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7fe fb4c 	bl	800c260 <pbuf_free>
 800dbc8:	e008      	b.n	800dbdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dbca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d104      	bne.n	800dbdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dbd2:	68b8      	ldr	r0, [r7, #8]
 800dbd4:	f7fe ffea 	bl	800cbac <tcp_close>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	e000      	b.n	800dbde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	0801ad9c 	.word	0x0801ad9c
 800dbec:	0801b30c 	.word	0x0801b30c
 800dbf0:	0801ade0 	.word	0x0801ade0

0800dbf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dbfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	db01      	blt.n	800dc0a <tcp_kill_prio+0x16>
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	e000      	b.n	800dc0c <tcp_kill_prio+0x18>
 800dc0a:	237f      	movs	r3, #127	; 0x7f
 800dc0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dc0e:	7afb      	ldrb	r3, [r7, #11]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d034      	beq.n	800dc7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dc14:	7afb      	ldrb	r3, [r7, #11]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc22:	4b19      	ldr	r3, [pc, #100]	; (800dc88 <tcp_kill_prio+0x94>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	e01f      	b.n	800dc6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	7d5b      	ldrb	r3, [r3, #21]
 800dc2e:	7afa      	ldrb	r2, [r7, #11]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d80c      	bhi.n	800dc4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dc38:	7afa      	ldrb	r2, [r7, #11]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d112      	bne.n	800dc64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc3e:	4b13      	ldr	r3, [pc, #76]	; (800dc8c <tcp_kill_prio+0x98>)
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	6a1b      	ldr	r3, [r3, #32]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	68fa      	ldr	r2, [r7, #12]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d80a      	bhi.n	800dc64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dc4e:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <tcp_kill_prio+0x98>)
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	7d5b      	ldrb	r3, [r3, #21]
 800dc62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1dc      	bne.n	800dc2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d004      	beq.n	800dc80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dc76:	6938      	ldr	r0, [r7, #16]
 800dc78:	f7ff f882 	bl	800cd80 <tcp_abort>
 800dc7c:	e000      	b.n	800dc80 <tcp_kill_prio+0x8c>
    return;
 800dc7e:	bf00      	nop
  }
}
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20007500 	.word	0x20007500
 800dc8c:	20007504 	.word	0x20007504

0800dc90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	2b08      	cmp	r3, #8
 800dc9e:	d009      	beq.n	800dcb4 <tcp_kill_state+0x24>
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	d006      	beq.n	800dcb4 <tcp_kill_state+0x24>
 800dca6:	4b1a      	ldr	r3, [pc, #104]	; (800dd10 <tcp_kill_state+0x80>)
 800dca8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dcac:	4919      	ldr	r1, [pc, #100]	; (800dd14 <tcp_kill_state+0x84>)
 800dcae:	481a      	ldr	r0, [pc, #104]	; (800dd18 <tcp_kill_state+0x88>)
 800dcb0:	f008 fb00 	bl	80162b4 <iprintf>

  inactivity = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcbc:	4b17      	ldr	r3, [pc, #92]	; (800dd1c <tcp_kill_state+0x8c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	e017      	b.n	800dcf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	79fa      	ldrb	r2, [r7, #7]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d10f      	bne.n	800dcee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcce:	4b14      	ldr	r3, [pc, #80]	; (800dd20 <tcp_kill_state+0x90>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	6a1b      	ldr	r3, [r3, #32]
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d807      	bhi.n	800dcee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <tcp_kill_state+0x90>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1e4      	bne.n	800dcc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dd00:	2100      	movs	r1, #0
 800dd02:	6938      	ldr	r0, [r7, #16]
 800dd04:	f7fe ff7e 	bl	800cc04 <tcp_abandon>
  }
}
 800dd08:	bf00      	nop
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	0801ad9c 	.word	0x0801ad9c
 800dd14:	0801b328 	.word	0x0801b328
 800dd18:	0801ade0 	.word	0x0801ade0
 800dd1c:	20007500 	.word	0x20007500
 800dd20:	20007504 	.word	0x20007504

0800dd24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd32:	4b12      	ldr	r3, [pc, #72]	; (800dd7c <tcp_kill_timewait+0x58>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e012      	b.n	800dd60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd3a:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <tcp_kill_timewait+0x5c>)
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d807      	bhi.n	800dd5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dd4a:	4b0d      	ldr	r3, [pc, #52]	; (800dd80 <tcp_kill_timewait+0x5c>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1e9      	bne.n	800dd3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd6c:	68b8      	ldr	r0, [r7, #8]
 800dd6e:	f7ff f807 	bl	800cd80 <tcp_abort>
  }
}
 800dd72:	bf00      	nop
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20007510 	.word	0x20007510
 800dd80:	20007504 	.word	0x20007504

0800dd84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dd8a:	4b10      	ldr	r3, [pc, #64]	; (800ddcc <tcp_handle_closepend+0x48>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd90:	e014      	b.n	800ddbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	8b5b      	ldrh	r3, [r3, #26]
 800dd9c:	f003 0308 	and.w	r3, r3, #8
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d009      	beq.n	800ddb8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	8b5b      	ldrh	r3, [r3, #26]
 800dda8:	f023 0308 	bic.w	r3, r3, #8
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7fe fe94 	bl	800cae0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1e7      	bne.n	800dd92 <tcp_handle_closepend+0xe>
  }
}
 800ddc2:	bf00      	nop
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20007500 	.word	0x20007500

0800ddd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddda:	2001      	movs	r0, #1
 800dddc:	f7fd fbfa 	bl	800b5d4 <memp_malloc>
 800dde0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d126      	bne.n	800de36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dde8:	f7ff ffcc 	bl	800dd84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ddec:	f7ff ff9a 	bl	800dd24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	f7fd fbef 	bl	800b5d4 <memp_malloc>
 800ddf6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d11b      	bne.n	800de36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ddfe:	2009      	movs	r0, #9
 800de00:	f7ff ff46 	bl	800dc90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de04:	2001      	movs	r0, #1
 800de06:	f7fd fbe5 	bl	800b5d4 <memp_malloc>
 800de0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d111      	bne.n	800de36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800de12:	2008      	movs	r0, #8
 800de14:	f7ff ff3c 	bl	800dc90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de18:	2001      	movs	r0, #1
 800de1a:	f7fd fbdb 	bl	800b5d4 <memp_malloc>
 800de1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d107      	bne.n	800de36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff fee3 	bl	800dbf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de2e:	2001      	movs	r0, #1
 800de30:	f7fd fbd0 	bl	800b5d4 <memp_malloc>
 800de34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d03f      	beq.n	800debc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800de3c:	229c      	movs	r2, #156	; 0x9c
 800de3e:	2100      	movs	r1, #0
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f007 fb48 	bl	80154d6 <memset>
    pcb->prio = prio;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	79fa      	ldrb	r2, [r7, #7]
 800de4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de52:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	22ff      	movs	r2, #255	; 0xff
 800de6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de72:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2206      	movs	r2, #6
 800de78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2206      	movs	r2, #6
 800de80:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de88:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800de92:	4b0d      	ldr	r3, [pc, #52]	; (800dec8 <tcp_alloc+0xf8>)
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800de9a:	4b0c      	ldr	r3, [pc, #48]	; (800decc <tcp_alloc+0xfc>)
 800de9c:	781a      	ldrb	r2, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dea8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4a08      	ldr	r2, [pc, #32]	; (800ded0 <tcp_alloc+0x100>)
 800deb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	4a07      	ldr	r2, [pc, #28]	; (800ded4 <tcp_alloc+0x104>)
 800deb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800debc:	68fb      	ldr	r3, [r7, #12]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	20007504 	.word	0x20007504
 800decc:	200004aa 	.word	0x200004aa
 800ded0:	0800db89 	.word	0x0800db89
 800ded4:	006ddd00 	.word	0x006ddd00

0800ded8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800dedc:	2040      	movs	r0, #64	; 0x40
 800dede:	f7ff ff77 	bl	800ddd0 <tcp_alloc>
 800dee2:	4603      	mov	r3, r0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	611a      	str	r2, [r3, #16]
  }
}
 800defe:	bf00      	nop
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
	...

0800df0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00e      	beq.n	800df3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	7d1b      	ldrb	r3, [r3, #20]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d106      	bne.n	800df32 <tcp_recv+0x26>
 800df24:	4b07      	ldr	r3, [pc, #28]	; (800df44 <tcp_recv+0x38>)
 800df26:	f240 72df 	movw	r2, #2015	; 0x7df
 800df2a:	4907      	ldr	r1, [pc, #28]	; (800df48 <tcp_recv+0x3c>)
 800df2c:	4807      	ldr	r0, [pc, #28]	; (800df4c <tcp_recv+0x40>)
 800df2e:	f008 f9c1 	bl	80162b4 <iprintf>
    pcb->recv = recv;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	0801ad9c 	.word	0x0801ad9c
 800df48:	0801b338 	.word	0x0801b338
 800df4c:	0801ade0 	.word	0x0801ade0

0800df50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00e      	beq.n	800df7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7d1b      	ldrb	r3, [r3, #20]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d106      	bne.n	800df76 <tcp_sent+0x26>
 800df68:	4b07      	ldr	r3, [pc, #28]	; (800df88 <tcp_sent+0x38>)
 800df6a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800df6e:	4907      	ldr	r1, [pc, #28]	; (800df8c <tcp_sent+0x3c>)
 800df70:	4807      	ldr	r0, [pc, #28]	; (800df90 <tcp_sent+0x40>)
 800df72:	f008 f99f 	bl	80162b4 <iprintf>
    pcb->sent = sent;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800df7e:	bf00      	nop
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	0801ad9c 	.word	0x0801ad9c
 800df8c:	0801b360 	.word	0x0801b360
 800df90:	0801ade0 	.word	0x0801ade0

0800df94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00e      	beq.n	800dfc2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	7d1b      	ldrb	r3, [r3, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d106      	bne.n	800dfba <tcp_err+0x26>
 800dfac:	4b07      	ldr	r3, [pc, #28]	; (800dfcc <tcp_err+0x38>)
 800dfae:	f640 020d 	movw	r2, #2061	; 0x80d
 800dfb2:	4907      	ldr	r1, [pc, #28]	; (800dfd0 <tcp_err+0x3c>)
 800dfb4:	4807      	ldr	r0, [pc, #28]	; (800dfd4 <tcp_err+0x40>)
 800dfb6:	f008 f97d 	bl	80162b4 <iprintf>
    pcb->errf = err;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	683a      	ldr	r2, [r7, #0]
 800dfbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800dfc2:	bf00      	nop
 800dfc4:	3708      	adds	r7, #8
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	0801ad9c 	.word	0x0801ad9c
 800dfd0:	0801b388 	.word	0x0801b388
 800dfd4:	0801ade0 	.word	0x0801ade0

0800dfd8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d008      	beq.n	800dffa <tcp_accept+0x22>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	7d1b      	ldrb	r3, [r3, #20]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d104      	bne.n	800dffa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	619a      	str	r2, [r3, #24]
  }
}
 800dffa:	bf00      	nop
 800dffc:	3714      	adds	r7, #20
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
	...

0800e008 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	4613      	mov	r3, r2
 800e014:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d107      	bne.n	800e02c <tcp_poll+0x24>
 800e01c:	4b0e      	ldr	r3, [pc, #56]	; (800e058 <tcp_poll+0x50>)
 800e01e:	f640 023d 	movw	r2, #2109	; 0x83d
 800e022:	490e      	ldr	r1, [pc, #56]	; (800e05c <tcp_poll+0x54>)
 800e024:	480e      	ldr	r0, [pc, #56]	; (800e060 <tcp_poll+0x58>)
 800e026:	f008 f945 	bl	80162b4 <iprintf>
 800e02a:	e011      	b.n	800e050 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	7d1b      	ldrb	r3, [r3, #20]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d106      	bne.n	800e042 <tcp_poll+0x3a>
 800e034:	4b08      	ldr	r3, [pc, #32]	; (800e058 <tcp_poll+0x50>)
 800e036:	f640 023e 	movw	r2, #2110	; 0x83e
 800e03a:	490a      	ldr	r1, [pc, #40]	; (800e064 <tcp_poll+0x5c>)
 800e03c:	4808      	ldr	r0, [pc, #32]	; (800e060 <tcp_poll+0x58>)
 800e03e:	f008 f939 	bl	80162b4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	79fa      	ldrb	r2, [r7, #7]
 800e04e:	775a      	strb	r2, [r3, #29]
}
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	0801ad9c 	.word	0x0801ad9c
 800e05c:	0801b3b0 	.word	0x0801b3b0
 800e060:	0801ade0 	.word	0x0801ade0
 800e064:	0801b3c8 	.word	0x0801b3c8

0800e068 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d107      	bne.n	800e086 <tcp_pcb_purge+0x1e>
 800e076:	4b21      	ldr	r3, [pc, #132]	; (800e0fc <tcp_pcb_purge+0x94>)
 800e078:	f640 0251 	movw	r2, #2129	; 0x851
 800e07c:	4920      	ldr	r1, [pc, #128]	; (800e100 <tcp_pcb_purge+0x98>)
 800e07e:	4821      	ldr	r0, [pc, #132]	; (800e104 <tcp_pcb_purge+0x9c>)
 800e080:	f008 f918 	bl	80162b4 <iprintf>
 800e084:	e037      	b.n	800e0f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	7d1b      	ldrb	r3, [r3, #20]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d033      	beq.n	800e0f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e092:	2b0a      	cmp	r3, #10
 800e094:	d02f      	beq.n	800e0f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e09a:	2b01      	cmp	r3, #1
 800e09c:	d02b      	beq.n	800e0f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d007      	beq.n	800e0b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fe f8d8 	bl	800c260 <pbuf_free>
      pcb->refused_data = NULL;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f986 	bl	800e3d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff fce3 	bl	800da9c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7ff fcde 	bl	800da9c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	0801ad9c 	.word	0x0801ad9c
 800e100:	0801b3e8 	.word	0x0801b3e8
 800e104:	0801ade0 	.word	0x0801ade0

0800e108 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <tcp_pcb_remove+0x1e>
 800e118:	4b3e      	ldr	r3, [pc, #248]	; (800e214 <tcp_pcb_remove+0x10c>)
 800e11a:	f640 0283 	movw	r2, #2179	; 0x883
 800e11e:	493e      	ldr	r1, [pc, #248]	; (800e218 <tcp_pcb_remove+0x110>)
 800e120:	483e      	ldr	r0, [pc, #248]	; (800e21c <tcp_pcb_remove+0x114>)
 800e122:	f008 f8c7 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <tcp_pcb_remove+0x32>
 800e12c:	4b39      	ldr	r3, [pc, #228]	; (800e214 <tcp_pcb_remove+0x10c>)
 800e12e:	f640 0284 	movw	r2, #2180	; 0x884
 800e132:	493b      	ldr	r1, [pc, #236]	; (800e220 <tcp_pcb_remove+0x118>)
 800e134:	4839      	ldr	r0, [pc, #228]	; (800e21c <tcp_pcb_remove+0x114>)
 800e136:	f008 f8bd 	bl	80162b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	429a      	cmp	r2, r3
 800e142:	d105      	bne.n	800e150 <tcp_pcb_remove+0x48>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68da      	ldr	r2, [r3, #12]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	e013      	b.n	800e178 <tcp_pcb_remove+0x70>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	60fb      	str	r3, [r7, #12]
 800e156:	e00c      	b.n	800e172 <tcp_pcb_remove+0x6a>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d104      	bne.n	800e16c <tcp_pcb_remove+0x64>
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	60da      	str	r2, [r3, #12]
 800e16a:	e005      	b.n	800e178 <tcp_pcb_remove+0x70>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1ef      	bne.n	800e158 <tcp_pcb_remove+0x50>
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2200      	movs	r2, #0
 800e17c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	f7ff ff72 	bl	800e068 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	7d1b      	ldrb	r3, [r3, #20]
 800e188:	2b0a      	cmp	r3, #10
 800e18a:	d013      	beq.n	800e1b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e190:	2b01      	cmp	r3, #1
 800e192:	d00f      	beq.n	800e1b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	8b5b      	ldrh	r3, [r3, #26]
 800e198:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d009      	beq.n	800e1b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	8b5b      	ldrh	r3, [r3, #26]
 800e1a4:	f043 0302 	orr.w	r3, r3, #2
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1ae:	6838      	ldr	r0, [r7, #0]
 800e1b0:	f003 fbc2 	bl	8011938 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	7d1b      	ldrb	r3, [r3, #20]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d020      	beq.n	800e1fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d006      	beq.n	800e1d2 <tcp_pcb_remove+0xca>
 800e1c4:	4b13      	ldr	r3, [pc, #76]	; (800e214 <tcp_pcb_remove+0x10c>)
 800e1c6:	f640 0293 	movw	r2, #2195	; 0x893
 800e1ca:	4916      	ldr	r1, [pc, #88]	; (800e224 <tcp_pcb_remove+0x11c>)
 800e1cc:	4813      	ldr	r0, [pc, #76]	; (800e21c <tcp_pcb_remove+0x114>)
 800e1ce:	f008 f871 	bl	80162b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d006      	beq.n	800e1e8 <tcp_pcb_remove+0xe0>
 800e1da:	4b0e      	ldr	r3, [pc, #56]	; (800e214 <tcp_pcb_remove+0x10c>)
 800e1dc:	f640 0294 	movw	r2, #2196	; 0x894
 800e1e0:	4911      	ldr	r1, [pc, #68]	; (800e228 <tcp_pcb_remove+0x120>)
 800e1e2:	480e      	ldr	r0, [pc, #56]	; (800e21c <tcp_pcb_remove+0x114>)
 800e1e4:	f008 f866 	bl	80162b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d006      	beq.n	800e1fe <tcp_pcb_remove+0xf6>
 800e1f0:	4b08      	ldr	r3, [pc, #32]	; (800e214 <tcp_pcb_remove+0x10c>)
 800e1f2:	f640 0296 	movw	r2, #2198	; 0x896
 800e1f6:	490d      	ldr	r1, [pc, #52]	; (800e22c <tcp_pcb_remove+0x124>)
 800e1f8:	4808      	ldr	r0, [pc, #32]	; (800e21c <tcp_pcb_remove+0x114>)
 800e1fa:	f008 f85b 	bl	80162b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2200      	movs	r2, #0
 800e202:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2200      	movs	r2, #0
 800e208:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e20a:	bf00      	nop
 800e20c:	3710      	adds	r7, #16
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	0801ad9c 	.word	0x0801ad9c
 800e218:	0801b404 	.word	0x0801b404
 800e21c:	0801ade0 	.word	0x0801ade0
 800e220:	0801b420 	.word	0x0801b420
 800e224:	0801b440 	.word	0x0801b440
 800e228:	0801b458 	.word	0x0801b458
 800e22c:	0801b474 	.word	0x0801b474

0800e230 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <tcp_next_iss+0x1c>
 800e23e:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <tcp_next_iss+0x38>)
 800e240:	f640 02af 	movw	r2, #2223	; 0x8af
 800e244:	4909      	ldr	r1, [pc, #36]	; (800e26c <tcp_next_iss+0x3c>)
 800e246:	480a      	ldr	r0, [pc, #40]	; (800e270 <tcp_next_iss+0x40>)
 800e248:	f008 f834 	bl	80162b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e24c:	4b09      	ldr	r3, [pc, #36]	; (800e274 <tcp_next_iss+0x44>)
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	4b09      	ldr	r3, [pc, #36]	; (800e278 <tcp_next_iss+0x48>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4413      	add	r3, r2
 800e256:	4a07      	ldr	r2, [pc, #28]	; (800e274 <tcp_next_iss+0x44>)
 800e258:	6013      	str	r3, [r2, #0]
  return iss;
 800e25a:	4b06      	ldr	r3, [pc, #24]	; (800e274 <tcp_next_iss+0x44>)
 800e25c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	0801ad9c 	.word	0x0801ad9c
 800e26c:	0801b48c 	.word	0x0801b48c
 800e270:	0801ade0 	.word	0x0801ade0
 800e274:	20000018 	.word	0x20000018
 800e278:	20007504 	.word	0x20007504

0800e27c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
 800e288:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d106      	bne.n	800e29e <tcp_eff_send_mss_netif+0x22>
 800e290:	4b14      	ldr	r3, [pc, #80]	; (800e2e4 <tcp_eff_send_mss_netif+0x68>)
 800e292:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e296:	4914      	ldr	r1, [pc, #80]	; (800e2e8 <tcp_eff_send_mss_netif+0x6c>)
 800e298:	4814      	ldr	r0, [pc, #80]	; (800e2ec <tcp_eff_send_mss_netif+0x70>)
 800e29a:	f008 f80b 	bl	80162b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e2a4:	89fb      	ldrh	r3, [r7, #14]
 800e2a6:	e019      	b.n	800e2dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	8c1b      	ldrh	r3, [r3, #32]
 800e2ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e2ae:	8afb      	ldrh	r3, [r7, #22]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d012      	beq.n	800e2da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e2b4:	2328      	movs	r3, #40	; 0x28
 800e2b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e2b8:	8afa      	ldrh	r2, [r7, #22]
 800e2ba:	8abb      	ldrh	r3, [r7, #20]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d904      	bls.n	800e2ca <tcp_eff_send_mss_netif+0x4e>
 800e2c0:	8afa      	ldrh	r2, [r7, #22]
 800e2c2:	8abb      	ldrh	r3, [r7, #20]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	e000      	b.n	800e2cc <tcp_eff_send_mss_netif+0x50>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2ce:	8a7a      	ldrh	r2, [r7, #18]
 800e2d0:	89fb      	ldrh	r3, [r7, #14]
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	bf28      	it	cs
 800e2d6:	4613      	movcs	r3, r2
 800e2d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e2da:	89fb      	ldrh	r3, [r7, #14]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3718      	adds	r7, #24
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	0801ad9c 	.word	0x0801ad9c
 800e2e8:	0801b4a8 	.word	0x0801b4a8
 800e2ec:	0801ade0 	.word	0x0801ade0

0800e2f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d119      	bne.n	800e338 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e304:	4b10      	ldr	r3, [pc, #64]	; (800e348 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e306:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e30a:	4910      	ldr	r1, [pc, #64]	; (800e34c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e30c:	4810      	ldr	r0, [pc, #64]	; (800e350 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e30e:	f007 ffd1 	bl	80162b4 <iprintf>

  while (pcb != NULL) {
 800e312:	e011      	b.n	800e338 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d108      	bne.n	800e332 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f7fe fd2a 	bl	800cd80 <tcp_abort>
      pcb = next;
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	60fb      	str	r3, [r7, #12]
 800e330:	e002      	b.n	800e338 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1ea      	bne.n	800e314 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e33e:	bf00      	nop
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	0801ad9c 	.word	0x0801ad9c
 800e34c:	0801b4d0 	.word	0x0801b4d0
 800e350:	0801ade0 	.word	0x0801ade0

0800e354 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d02a      	beq.n	800e3ba <tcp_netif_ip_addr_changed+0x66>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d026      	beq.n	800e3ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e36c:	4b15      	ldr	r3, [pc, #84]	; (800e3c4 <tcp_netif_ip_addr_changed+0x70>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4619      	mov	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff ffbc 	bl	800e2f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e378:	4b13      	ldr	r3, [pc, #76]	; (800e3c8 <tcp_netif_ip_addr_changed+0x74>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4619      	mov	r1, r3
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff ffb6 	bl	800e2f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d017      	beq.n	800e3ba <tcp_netif_ip_addr_changed+0x66>
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d013      	beq.n	800e3ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e392:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <tcp_netif_ip_addr_changed+0x78>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	60fb      	str	r3, [r7, #12]
 800e398:	e00c      	b.n	800e3b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d103      	bne.n	800e3ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	60fb      	str	r3, [r7, #12]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1ef      	bne.n	800e39a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e3ba:	bf00      	nop
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20007500 	.word	0x20007500
 800e3c8:	2000750c 	.word	0x2000750c
 800e3cc:	20007508 	.word	0x20007508

0800e3d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d007      	beq.n	800e3f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff fb59 	bl	800da9c <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e3f8:	b590      	push	{r4, r7, lr}
 800e3fa:	b08d      	sub	sp, #52	; 0x34
 800e3fc:	af04      	add	r7, sp, #16
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d105      	bne.n	800e414 <tcp_input+0x1c>
 800e408:	4b9b      	ldr	r3, [pc, #620]	; (800e678 <tcp_input+0x280>)
 800e40a:	2283      	movs	r2, #131	; 0x83
 800e40c:	499b      	ldr	r1, [pc, #620]	; (800e67c <tcp_input+0x284>)
 800e40e:	489c      	ldr	r0, [pc, #624]	; (800e680 <tcp_input+0x288>)
 800e410:	f007 ff50 	bl	80162b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	4a9a      	ldr	r2, [pc, #616]	; (800e684 <tcp_input+0x28c>)
 800e41a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	895b      	ldrh	r3, [r3, #10]
 800e420:	2b13      	cmp	r3, #19
 800e422:	f240 83c4 	bls.w	800ebae <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e426:	4b98      	ldr	r3, [pc, #608]	; (800e688 <tcp_input+0x290>)
 800e428:	695a      	ldr	r2, [r3, #20]
 800e42a:	4b97      	ldr	r3, [pc, #604]	; (800e688 <tcp_input+0x290>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4619      	mov	r1, r3
 800e430:	4610      	mov	r0, r2
 800e432:	f006 f879 	bl	8014528 <ip4_addr_isbroadcast_u32>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f040 83ba 	bne.w	800ebb2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e43e:	4b92      	ldr	r3, [pc, #584]	; (800e688 <tcp_input+0x290>)
 800e440:	695b      	ldr	r3, [r3, #20]
 800e442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e446:	2be0      	cmp	r3, #224	; 0xe0
 800e448:	f000 83b3 	beq.w	800ebb2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e44c:	4b8d      	ldr	r3, [pc, #564]	; (800e684 <tcp_input+0x28c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	899b      	ldrh	r3, [r3, #12]
 800e452:	b29b      	uxth	r3, r3
 800e454:	4618      	mov	r0, r3
 800e456:	f7fc fc67 	bl	800ad28 <lwip_htons>
 800e45a:	4603      	mov	r3, r0
 800e45c:	0b1b      	lsrs	r3, r3, #12
 800e45e:	b29b      	uxth	r3, r3
 800e460:	b2db      	uxtb	r3, r3
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e466:	7cbb      	ldrb	r3, [r7, #18]
 800e468:	2b13      	cmp	r3, #19
 800e46a:	f240 83a2 	bls.w	800ebb2 <tcp_input+0x7ba>
 800e46e:	7cbb      	ldrb	r3, [r7, #18]
 800e470:	b29a      	uxth	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	891b      	ldrh	r3, [r3, #8]
 800e476:	429a      	cmp	r2, r3
 800e478:	f200 839b 	bhi.w	800ebb2 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e47c:	7cbb      	ldrb	r3, [r7, #18]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	3b14      	subs	r3, #20
 800e482:	b29a      	uxth	r2, r3
 800e484:	4b81      	ldr	r3, [pc, #516]	; (800e68c <tcp_input+0x294>)
 800e486:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e488:	4b81      	ldr	r3, [pc, #516]	; (800e690 <tcp_input+0x298>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	895a      	ldrh	r2, [r3, #10]
 800e492:	7cbb      	ldrb	r3, [r7, #18]
 800e494:	b29b      	uxth	r3, r3
 800e496:	429a      	cmp	r2, r3
 800e498:	d309      	bcc.n	800e4ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e49a:	4b7c      	ldr	r3, [pc, #496]	; (800e68c <tcp_input+0x294>)
 800e49c:	881a      	ldrh	r2, [r3, #0]
 800e49e:	4b7d      	ldr	r3, [pc, #500]	; (800e694 <tcp_input+0x29c>)
 800e4a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e4a2:	7cbb      	ldrb	r3, [r7, #18]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7fd fe54 	bl	800c154 <pbuf_remove_header>
 800e4ac:	e04e      	b.n	800e54c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <tcp_input+0xca>
 800e4b6:	4b70      	ldr	r3, [pc, #448]	; (800e678 <tcp_input+0x280>)
 800e4b8:	22c2      	movs	r2, #194	; 0xc2
 800e4ba:	4977      	ldr	r1, [pc, #476]	; (800e698 <tcp_input+0x2a0>)
 800e4bc:	4870      	ldr	r0, [pc, #448]	; (800e680 <tcp_input+0x288>)
 800e4be:	f007 fef9 	bl	80162b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e4c2:	2114      	movs	r1, #20
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7fd fe45 	bl	800c154 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	895a      	ldrh	r2, [r3, #10]
 800e4ce:	4b71      	ldr	r3, [pc, #452]	; (800e694 <tcp_input+0x29c>)
 800e4d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e4d2:	4b6e      	ldr	r3, [pc, #440]	; (800e68c <tcp_input+0x294>)
 800e4d4:	881a      	ldrh	r2, [r3, #0]
 800e4d6:	4b6f      	ldr	r3, [pc, #444]	; (800e694 <tcp_input+0x29c>)
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e4de:	4b6d      	ldr	r3, [pc, #436]	; (800e694 <tcp_input+0x29c>)
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7fd fe35 	bl	800c154 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	895b      	ldrh	r3, [r3, #10]
 800e4f0:	8a3a      	ldrh	r2, [r7, #16]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	f200 835f 	bhi.w	800ebb6 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	4a64      	ldr	r2, [pc, #400]	; (800e690 <tcp_input+0x298>)
 800e500:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	8a3a      	ldrh	r2, [r7, #16]
 800e508:	4611      	mov	r1, r2
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fd fe22 	bl	800c154 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	891a      	ldrh	r2, [r3, #8]
 800e514:	8a3b      	ldrh	r3, [r7, #16]
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	b29a      	uxth	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	895b      	ldrh	r3, [r3, #10]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d005      	beq.n	800e532 <tcp_input+0x13a>
 800e526:	4b54      	ldr	r3, [pc, #336]	; (800e678 <tcp_input+0x280>)
 800e528:	22df      	movs	r2, #223	; 0xdf
 800e52a:	495c      	ldr	r1, [pc, #368]	; (800e69c <tcp_input+0x2a4>)
 800e52c:	4854      	ldr	r0, [pc, #336]	; (800e680 <tcp_input+0x288>)
 800e52e:	f007 fec1 	bl	80162b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	891a      	ldrh	r2, [r3, #8]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	891b      	ldrh	r3, [r3, #8]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d005      	beq.n	800e54c <tcp_input+0x154>
 800e540:	4b4d      	ldr	r3, [pc, #308]	; (800e678 <tcp_input+0x280>)
 800e542:	22e0      	movs	r2, #224	; 0xe0
 800e544:	4956      	ldr	r1, [pc, #344]	; (800e6a0 <tcp_input+0x2a8>)
 800e546:	484e      	ldr	r0, [pc, #312]	; (800e680 <tcp_input+0x288>)
 800e548:	f007 feb4 	bl	80162b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e54c:	4b4d      	ldr	r3, [pc, #308]	; (800e684 <tcp_input+0x28c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	b29a      	uxth	r2, r3
 800e554:	4b4b      	ldr	r3, [pc, #300]	; (800e684 <tcp_input+0x28c>)
 800e556:	681c      	ldr	r4, [r3, #0]
 800e558:	4610      	mov	r0, r2
 800e55a:	f7fc fbe5 	bl	800ad28 <lwip_htons>
 800e55e:	4603      	mov	r3, r0
 800e560:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e562:	4b48      	ldr	r3, [pc, #288]	; (800e684 <tcp_input+0x28c>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	885b      	ldrh	r3, [r3, #2]
 800e568:	b29a      	uxth	r2, r3
 800e56a:	4b46      	ldr	r3, [pc, #280]	; (800e684 <tcp_input+0x28c>)
 800e56c:	681c      	ldr	r4, [r3, #0]
 800e56e:	4610      	mov	r0, r2
 800e570:	f7fc fbda 	bl	800ad28 <lwip_htons>
 800e574:	4603      	mov	r3, r0
 800e576:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e578:	4b42      	ldr	r3, [pc, #264]	; (800e684 <tcp_input+0x28c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	4b41      	ldr	r3, [pc, #260]	; (800e684 <tcp_input+0x28c>)
 800e580:	681c      	ldr	r4, [r3, #0]
 800e582:	4610      	mov	r0, r2
 800e584:	f7fc fbe5 	bl	800ad52 <lwip_htonl>
 800e588:	4603      	mov	r3, r0
 800e58a:	6063      	str	r3, [r4, #4]
 800e58c:	6863      	ldr	r3, [r4, #4]
 800e58e:	4a45      	ldr	r2, [pc, #276]	; (800e6a4 <tcp_input+0x2ac>)
 800e590:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e592:	4b3c      	ldr	r3, [pc, #240]	; (800e684 <tcp_input+0x28c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	689a      	ldr	r2, [r3, #8]
 800e598:	4b3a      	ldr	r3, [pc, #232]	; (800e684 <tcp_input+0x28c>)
 800e59a:	681c      	ldr	r4, [r3, #0]
 800e59c:	4610      	mov	r0, r2
 800e59e:	f7fc fbd8 	bl	800ad52 <lwip_htonl>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	60a3      	str	r3, [r4, #8]
 800e5a6:	68a3      	ldr	r3, [r4, #8]
 800e5a8:	4a3f      	ldr	r2, [pc, #252]	; (800e6a8 <tcp_input+0x2b0>)
 800e5aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e5ac:	4b35      	ldr	r3, [pc, #212]	; (800e684 <tcp_input+0x28c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	89db      	ldrh	r3, [r3, #14]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	4b33      	ldr	r3, [pc, #204]	; (800e684 <tcp_input+0x28c>)
 800e5b6:	681c      	ldr	r4, [r3, #0]
 800e5b8:	4610      	mov	r0, r2
 800e5ba:	f7fc fbb5 	bl	800ad28 <lwip_htons>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e5c2:	4b30      	ldr	r3, [pc, #192]	; (800e684 <tcp_input+0x28c>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	899b      	ldrh	r3, [r3, #12]
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fc fbac 	bl	800ad28 <lwip_htons>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	4b34      	ldr	r3, [pc, #208]	; (800e6ac <tcp_input+0x2b4>)
 800e5dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	891a      	ldrh	r2, [r3, #8]
 800e5e2:	4b33      	ldr	r3, [pc, #204]	; (800e6b0 <tcp_input+0x2b8>)
 800e5e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e5e6:	4b31      	ldr	r3, [pc, #196]	; (800e6ac <tcp_input+0x2b4>)
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	f003 0303 	and.w	r3, r3, #3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00c      	beq.n	800e60c <tcp_input+0x214>
    tcplen++;
 800e5f2:	4b2f      	ldr	r3, [pc, #188]	; (800e6b0 <tcp_input+0x2b8>)
 800e5f4:	881b      	ldrh	r3, [r3, #0]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	4b2d      	ldr	r3, [pc, #180]	; (800e6b0 <tcp_input+0x2b8>)
 800e5fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	891a      	ldrh	r2, [r3, #8]
 800e602:	4b2b      	ldr	r3, [pc, #172]	; (800e6b0 <tcp_input+0x2b8>)
 800e604:	881b      	ldrh	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	f200 82d7 	bhi.w	800ebba <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e60c:	2300      	movs	r3, #0
 800e60e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e610:	4b28      	ldr	r3, [pc, #160]	; (800e6b4 <tcp_input+0x2bc>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	61fb      	str	r3, [r7, #28]
 800e616:	e09d      	b.n	800e754 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	7d1b      	ldrb	r3, [r3, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d105      	bne.n	800e62c <tcp_input+0x234>
 800e620:	4b15      	ldr	r3, [pc, #84]	; (800e678 <tcp_input+0x280>)
 800e622:	22fb      	movs	r2, #251	; 0xfb
 800e624:	4924      	ldr	r1, [pc, #144]	; (800e6b8 <tcp_input+0x2c0>)
 800e626:	4816      	ldr	r0, [pc, #88]	; (800e680 <tcp_input+0x288>)
 800e628:	f007 fe44 	bl	80162b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
 800e630:	2b0a      	cmp	r3, #10
 800e632:	d105      	bne.n	800e640 <tcp_input+0x248>
 800e634:	4b10      	ldr	r3, [pc, #64]	; (800e678 <tcp_input+0x280>)
 800e636:	22fc      	movs	r2, #252	; 0xfc
 800e638:	4920      	ldr	r1, [pc, #128]	; (800e6bc <tcp_input+0x2c4>)
 800e63a:	4811      	ldr	r0, [pc, #68]	; (800e680 <tcp_input+0x288>)
 800e63c:	f007 fe3a 	bl	80162b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	7d1b      	ldrb	r3, [r3, #20]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d105      	bne.n	800e654 <tcp_input+0x25c>
 800e648:	4b0b      	ldr	r3, [pc, #44]	; (800e678 <tcp_input+0x280>)
 800e64a:	22fd      	movs	r2, #253	; 0xfd
 800e64c:	491c      	ldr	r1, [pc, #112]	; (800e6c0 <tcp_input+0x2c8>)
 800e64e:	480c      	ldr	r0, [pc, #48]	; (800e680 <tcp_input+0x288>)
 800e650:	f007 fe30 	bl	80162b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	7a1b      	ldrb	r3, [r3, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d033      	beq.n	800e6c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	7a1a      	ldrb	r2, [r3, #8]
 800e660:	4b09      	ldr	r3, [pc, #36]	; (800e688 <tcp_input+0x290>)
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e668:	3301      	adds	r3, #1
 800e66a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d029      	beq.n	800e6c4 <tcp_input+0x2cc>
      prev = pcb;
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	61bb      	str	r3, [r7, #24]
      continue;
 800e674:	e06b      	b.n	800e74e <tcp_input+0x356>
 800e676:	bf00      	nop
 800e678:	0801b504 	.word	0x0801b504
 800e67c:	0801b538 	.word	0x0801b538
 800e680:	0801b550 	.word	0x0801b550
 800e684:	200004bc 	.word	0x200004bc
 800e688:	20003fbc 	.word	0x20003fbc
 800e68c:	200004c0 	.word	0x200004c0
 800e690:	200004c4 	.word	0x200004c4
 800e694:	200004c2 	.word	0x200004c2
 800e698:	0801b578 	.word	0x0801b578
 800e69c:	0801b588 	.word	0x0801b588
 800e6a0:	0801b594 	.word	0x0801b594
 800e6a4:	200004cc 	.word	0x200004cc
 800e6a8:	200004d0 	.word	0x200004d0
 800e6ac:	200004d8 	.word	0x200004d8
 800e6b0:	200004d6 	.word	0x200004d6
 800e6b4:	20007500 	.word	0x20007500
 800e6b8:	0801b5b4 	.word	0x0801b5b4
 800e6bc:	0801b5dc 	.word	0x0801b5dc
 800e6c0:	0801b608 	.word	0x0801b608
    }

    if (pcb->remote_port == tcphdr->src &&
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	8b1a      	ldrh	r2, [r3, #24]
 800e6c8:	4b94      	ldr	r3, [pc, #592]	; (800e91c <tcp_input+0x524>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	881b      	ldrh	r3, [r3, #0]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d13a      	bne.n	800e74a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	8ada      	ldrh	r2, [r3, #22]
 800e6d8:	4b90      	ldr	r3, [pc, #576]	; (800e91c <tcp_input+0x524>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	885b      	ldrh	r3, [r3, #2]
 800e6de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d132      	bne.n	800e74a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	685a      	ldr	r2, [r3, #4]
 800e6e8:	4b8d      	ldr	r3, [pc, #564]	; (800e920 <tcp_input+0x528>)
 800e6ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d12c      	bne.n	800e74a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	4b8a      	ldr	r3, [pc, #552]	; (800e920 <tcp_input+0x528>)
 800e6f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d126      	bne.n	800e74a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	69fa      	ldr	r2, [r7, #28]
 800e702:	429a      	cmp	r2, r3
 800e704:	d106      	bne.n	800e714 <tcp_input+0x31c>
 800e706:	4b87      	ldr	r3, [pc, #540]	; (800e924 <tcp_input+0x52c>)
 800e708:	f240 120d 	movw	r2, #269	; 0x10d
 800e70c:	4986      	ldr	r1, [pc, #536]	; (800e928 <tcp_input+0x530>)
 800e70e:	4887      	ldr	r0, [pc, #540]	; (800e92c <tcp_input+0x534>)
 800e710:	f007 fdd0 	bl	80162b4 <iprintf>
      if (prev != NULL) {
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00a      	beq.n	800e730 <tcp_input+0x338>
        prev->next = pcb->next;
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e722:	4b83      	ldr	r3, [pc, #524]	; (800e930 <tcp_input+0x538>)
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e72a:	4a81      	ldr	r2, [pc, #516]	; (800e930 <tcp_input+0x538>)
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	69fa      	ldr	r2, [r7, #28]
 800e736:	429a      	cmp	r2, r3
 800e738:	d111      	bne.n	800e75e <tcp_input+0x366>
 800e73a:	4b7a      	ldr	r3, [pc, #488]	; (800e924 <tcp_input+0x52c>)
 800e73c:	f240 1215 	movw	r2, #277	; 0x115
 800e740:	497c      	ldr	r1, [pc, #496]	; (800e934 <tcp_input+0x53c>)
 800e742:	487a      	ldr	r0, [pc, #488]	; (800e92c <tcp_input+0x534>)
 800e744:	f007 fdb6 	bl	80162b4 <iprintf>
      break;
 800e748:	e009      	b.n	800e75e <tcp_input+0x366>
    }
    prev = pcb;
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	61fb      	str	r3, [r7, #28]
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	f47f af5e 	bne.w	800e618 <tcp_input+0x220>
 800e75c:	e000      	b.n	800e760 <tcp_input+0x368>
      break;
 800e75e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f040 8095 	bne.w	800e892 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e768:	4b73      	ldr	r3, [pc, #460]	; (800e938 <tcp_input+0x540>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	61fb      	str	r3, [r7, #28]
 800e76e:	e03f      	b.n	800e7f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	7d1b      	ldrb	r3, [r3, #20]
 800e774:	2b0a      	cmp	r3, #10
 800e776:	d006      	beq.n	800e786 <tcp_input+0x38e>
 800e778:	4b6a      	ldr	r3, [pc, #424]	; (800e924 <tcp_input+0x52c>)
 800e77a:	f240 121f 	movw	r2, #287	; 0x11f
 800e77e:	496f      	ldr	r1, [pc, #444]	; (800e93c <tcp_input+0x544>)
 800e780:	486a      	ldr	r0, [pc, #424]	; (800e92c <tcp_input+0x534>)
 800e782:	f007 fd97 	bl	80162b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	7a1b      	ldrb	r3, [r3, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d009      	beq.n	800e7a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	7a1a      	ldrb	r2, [r3, #8]
 800e792:	4b63      	ldr	r3, [pc, #396]	; (800e920 <tcp_input+0x528>)
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e79a:	3301      	adds	r3, #1
 800e79c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d122      	bne.n	800e7e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	8b1a      	ldrh	r2, [r3, #24]
 800e7a6:	4b5d      	ldr	r3, [pc, #372]	; (800e91c <tcp_input+0x524>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	881b      	ldrh	r3, [r3, #0]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d11b      	bne.n	800e7ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	8ada      	ldrh	r2, [r3, #22]
 800e7b6:	4b59      	ldr	r3, [pc, #356]	; (800e91c <tcp_input+0x524>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	885b      	ldrh	r3, [r3, #2]
 800e7bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d113      	bne.n	800e7ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	685a      	ldr	r2, [r3, #4]
 800e7c6:	4b56      	ldr	r3, [pc, #344]	; (800e920 <tcp_input+0x528>)
 800e7c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d10d      	bne.n	800e7ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	4b53      	ldr	r3, [pc, #332]	; (800e920 <tcp_input+0x528>)
 800e7d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d107      	bne.n	800e7ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e7da:	69f8      	ldr	r0, [r7, #28]
 800e7dc:	f000 fb52 	bl	800ee84 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f7fd fd3d 	bl	800c260 <pbuf_free>
        return;
 800e7e6:	e1ee      	b.n	800ebc6 <tcp_input+0x7ce>
        continue;
 800e7e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	61fb      	str	r3, [r7, #28]
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1bc      	bne.n	800e770 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7fa:	4b51      	ldr	r3, [pc, #324]	; (800e940 <tcp_input+0x548>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	617b      	str	r3, [r7, #20]
 800e800:	e02a      	b.n	800e858 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	7a1b      	ldrb	r3, [r3, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00c      	beq.n	800e824 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	7a1a      	ldrb	r2, [r3, #8]
 800e80e:	4b44      	ldr	r3, [pc, #272]	; (800e920 <tcp_input+0x528>)
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e816:	3301      	adds	r3, #1
 800e818:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d002      	beq.n	800e824 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	61bb      	str	r3, [r7, #24]
        continue;
 800e822:	e016      	b.n	800e852 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	8ada      	ldrh	r2, [r3, #22]
 800e828:	4b3c      	ldr	r3, [pc, #240]	; (800e91c <tcp_input+0x524>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	885b      	ldrh	r3, [r3, #2]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	429a      	cmp	r2, r3
 800e832:	d10c      	bne.n	800e84e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	4b39      	ldr	r3, [pc, #228]	; (800e920 <tcp_input+0x528>)
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d00f      	beq.n	800e860 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00d      	beq.n	800e862 <tcp_input+0x46a>
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d009      	beq.n	800e862 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1d1      	bne.n	800e802 <tcp_input+0x40a>
 800e85e:	e000      	b.n	800e862 <tcp_input+0x46a>
            break;
 800e860:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d014      	beq.n	800e892 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00a      	beq.n	800e884 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	68da      	ldr	r2, [r3, #12]
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e876:	4b32      	ldr	r3, [pc, #200]	; (800e940 <tcp_input+0x548>)
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e87e:	4a30      	ldr	r2, [pc, #192]	; (800e940 <tcp_input+0x548>)
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e884:	6978      	ldr	r0, [r7, #20]
 800e886:	f000 f9ff 	bl	800ec88 <tcp_listen_input>
      }
      pbuf_free(p);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7fd fce8 	bl	800c260 <pbuf_free>
      return;
 800e890:	e199      	b.n	800ebc6 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 8160 	beq.w	800eb5a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e89a:	4b2a      	ldr	r3, [pc, #168]	; (800e944 <tcp_input+0x54c>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	891a      	ldrh	r2, [r3, #8]
 800e8a4:	4b27      	ldr	r3, [pc, #156]	; (800e944 <tcp_input+0x54c>)
 800e8a6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e8a8:	4a26      	ldr	r2, [pc, #152]	; (800e944 <tcp_input+0x54c>)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e8ae:	4b1b      	ldr	r3, [pc, #108]	; (800e91c <tcp_input+0x524>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a24      	ldr	r2, [pc, #144]	; (800e944 <tcp_input+0x54c>)
 800e8b4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e8b6:	4b24      	ldr	r3, [pc, #144]	; (800e948 <tcp_input+0x550>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e8bc:	4b23      	ldr	r3, [pc, #140]	; (800e94c <tcp_input+0x554>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e8c2:	4b23      	ldr	r3, [pc, #140]	; (800e950 <tcp_input+0x558>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e8c8:	4b22      	ldr	r3, [pc, #136]	; (800e954 <tcp_input+0x55c>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 0308 	and.w	r3, r3, #8
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d006      	beq.n	800e8e2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	7b5b      	ldrb	r3, [r3, #13]
 800e8d8:	f043 0301 	orr.w	r3, r3, #1
 800e8dc:	b2da      	uxtb	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d038      	beq.n	800e95c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8ea:	69f8      	ldr	r0, [r7, #28]
 800e8ec:	f7ff f85a 	bl	800d9a4 <tcp_process_refused_data>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f113 0f0d 	cmn.w	r3, #13
 800e8f6:	d007      	beq.n	800e908 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d02d      	beq.n	800e95c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e900:	4b15      	ldr	r3, [pc, #84]	; (800e958 <tcp_input+0x560>)
 800e902:	881b      	ldrh	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d029      	beq.n	800e95c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f040 8104 	bne.w	800eb1a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e912:	69f8      	ldr	r0, [r7, #28]
 800e914:	f003 fe28 	bl	8012568 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e918:	e0ff      	b.n	800eb1a <tcp_input+0x722>
 800e91a:	bf00      	nop
 800e91c:	200004bc 	.word	0x200004bc
 800e920:	20003fbc 	.word	0x20003fbc
 800e924:	0801b504 	.word	0x0801b504
 800e928:	0801b630 	.word	0x0801b630
 800e92c:	0801b550 	.word	0x0801b550
 800e930:	20007500 	.word	0x20007500
 800e934:	0801b65c 	.word	0x0801b65c
 800e938:	20007510 	.word	0x20007510
 800e93c:	0801b688 	.word	0x0801b688
 800e940:	20007508 	.word	0x20007508
 800e944:	200004ac 	.word	0x200004ac
 800e948:	200004dc 	.word	0x200004dc
 800e94c:	200004d9 	.word	0x200004d9
 800e950:	200004d4 	.word	0x200004d4
 800e954:	200004d8 	.word	0x200004d8
 800e958:	200004d6 	.word	0x200004d6
      }
    }
    tcp_input_pcb = pcb;
 800e95c:	4a9b      	ldr	r2, [pc, #620]	; (800ebcc <tcp_input+0x7d4>)
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e962:	69f8      	ldr	r0, [r7, #28]
 800e964:	f000 fb0a 	bl	800ef7c <tcp_process>
 800e968:	4603      	mov	r3, r0
 800e96a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e96c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e970:	f113 0f0d 	cmn.w	r3, #13
 800e974:	f000 80d3 	beq.w	800eb1e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e978:	4b95      	ldr	r3, [pc, #596]	; (800ebd0 <tcp_input+0x7d8>)
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f003 0308 	and.w	r3, r3, #8
 800e980:	2b00      	cmp	r3, #0
 800e982:	d015      	beq.n	800e9b0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d008      	beq.n	800e9a0 <tcp_input+0x5a8>
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e994:	69fa      	ldr	r2, [r7, #28]
 800e996:	6912      	ldr	r2, [r2, #16]
 800e998:	f06f 010d 	mvn.w	r1, #13
 800e99c:	4610      	mov	r0, r2
 800e99e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e9a0:	69f9      	ldr	r1, [r7, #28]
 800e9a2:	488c      	ldr	r0, [pc, #560]	; (800ebd4 <tcp_input+0x7dc>)
 800e9a4:	f7ff fbb0 	bl	800e108 <tcp_pcb_remove>
        tcp_free(pcb);
 800e9a8:	69f8      	ldr	r0, [r7, #28]
 800e9aa:	f7fd ff09 	bl	800c7c0 <tcp_free>
 800e9ae:	e0c1      	b.n	800eb34 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e9b4:	4b88      	ldr	r3, [pc, #544]	; (800ebd8 <tcp_input+0x7e0>)
 800e9b6:	881b      	ldrh	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01d      	beq.n	800e9f8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e9bc:	4b86      	ldr	r3, [pc, #536]	; (800ebd8 <tcp_input+0x7e0>)
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00a      	beq.n	800e9e2 <tcp_input+0x5ea>
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9d2:	69fa      	ldr	r2, [r7, #28]
 800e9d4:	6910      	ldr	r0, [r2, #16]
 800e9d6:	89fa      	ldrh	r2, [r7, #14]
 800e9d8:	69f9      	ldr	r1, [r7, #28]
 800e9da:	4798      	blx	r3
 800e9dc:	4603      	mov	r3, r0
 800e9de:	74fb      	strb	r3, [r7, #19]
 800e9e0:	e001      	b.n	800e9e6 <tcp_input+0x5ee>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9ea:	f113 0f0d 	cmn.w	r3, #13
 800e9ee:	f000 8098 	beq.w	800eb22 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e9f2:	4b79      	ldr	r3, [pc, #484]	; (800ebd8 <tcp_input+0x7e0>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e9f8:	69f8      	ldr	r0, [r7, #28]
 800e9fa:	f000 f905 	bl	800ec08 <tcp_input_delayed_close>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f040 8090 	bne.w	800eb26 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ea06:	4b75      	ldr	r3, [pc, #468]	; (800ebdc <tcp_input+0x7e4>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d041      	beq.n	800ea92 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d006      	beq.n	800ea24 <tcp_input+0x62c>
 800ea16:	4b72      	ldr	r3, [pc, #456]	; (800ebe0 <tcp_input+0x7e8>)
 800ea18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ea1c:	4971      	ldr	r1, [pc, #452]	; (800ebe4 <tcp_input+0x7ec>)
 800ea1e:	4872      	ldr	r0, [pc, #456]	; (800ebe8 <tcp_input+0x7f0>)
 800ea20:	f007 fc48 	bl	80162b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	8b5b      	ldrh	r3, [r3, #26]
 800ea28:	f003 0310 	and.w	r3, r3, #16
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d008      	beq.n	800ea42 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ea30:	4b6a      	ldr	r3, [pc, #424]	; (800ebdc <tcp_input+0x7e4>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fd fc13 	bl	800c260 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ea3a:	69f8      	ldr	r0, [r7, #28]
 800ea3c:	f7fe f9a0 	bl	800cd80 <tcp_abort>
            goto aborted;
 800ea40:	e078      	b.n	800eb34 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00c      	beq.n	800ea66 <tcp_input+0x66e>
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	6918      	ldr	r0, [r3, #16]
 800ea56:	4b61      	ldr	r3, [pc, #388]	; (800ebdc <tcp_input+0x7e4>)
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	69f9      	ldr	r1, [r7, #28]
 800ea5e:	47a0      	blx	r4
 800ea60:	4603      	mov	r3, r0
 800ea62:	74fb      	strb	r3, [r7, #19]
 800ea64:	e008      	b.n	800ea78 <tcp_input+0x680>
 800ea66:	4b5d      	ldr	r3, [pc, #372]	; (800ebdc <tcp_input+0x7e4>)
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	69f9      	ldr	r1, [r7, #28]
 800ea6e:	2000      	movs	r0, #0
 800ea70:	f7ff f88a 	bl	800db88 <tcp_recv_null>
 800ea74:	4603      	mov	r3, r0
 800ea76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ea78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea7c:	f113 0f0d 	cmn.w	r3, #13
 800ea80:	d053      	beq.n	800eb2a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea8a:	4b54      	ldr	r3, [pc, #336]	; (800ebdc <tcp_input+0x7e4>)
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea92:	4b4f      	ldr	r3, [pc, #316]	; (800ebd0 <tcp_input+0x7d8>)
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0320 	and.w	r3, r3, #32
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d030      	beq.n	800eb00 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d009      	beq.n	800eaba <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaaa:	7b5a      	ldrb	r2, [r3, #13]
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eab0:	f042 0220 	orr.w	r2, r2, #32
 800eab4:	b2d2      	uxtb	r2, r2
 800eab6:	735a      	strb	r2, [r3, #13]
 800eab8:	e022      	b.n	800eb00 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eabe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eac2:	d005      	beq.n	800ead0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eac8:	3301      	adds	r3, #1
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00b      	beq.n	800eaf2 <tcp_input+0x6fa>
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	6918      	ldr	r0, [r3, #16]
 800eae4:	2300      	movs	r3, #0
 800eae6:	2200      	movs	r2, #0
 800eae8:	69f9      	ldr	r1, [r7, #28]
 800eaea:	47a0      	blx	r4
 800eaec:	4603      	mov	r3, r0
 800eaee:	74fb      	strb	r3, [r7, #19]
 800eaf0:	e001      	b.n	800eaf6 <tcp_input+0x6fe>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eaf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eafa:	f113 0f0d 	cmn.w	r3, #13
 800eafe:	d016      	beq.n	800eb2e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eb00:	4b32      	ldr	r3, [pc, #200]	; (800ebcc <tcp_input+0x7d4>)
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eb06:	69f8      	ldr	r0, [r7, #28]
 800eb08:	f000 f87e 	bl	800ec08 <tcp_input_delayed_close>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10f      	bne.n	800eb32 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eb12:	69f8      	ldr	r0, [r7, #28]
 800eb14:	f002 ff10 	bl	8011938 <tcp_output>
 800eb18:	e00c      	b.n	800eb34 <tcp_input+0x73c>
        goto aborted;
 800eb1a:	bf00      	nop
 800eb1c:	e00a      	b.n	800eb34 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eb1e:	bf00      	nop
 800eb20:	e008      	b.n	800eb34 <tcp_input+0x73c>
              goto aborted;
 800eb22:	bf00      	nop
 800eb24:	e006      	b.n	800eb34 <tcp_input+0x73c>
          goto aborted;
 800eb26:	bf00      	nop
 800eb28:	e004      	b.n	800eb34 <tcp_input+0x73c>
            goto aborted;
 800eb2a:	bf00      	nop
 800eb2c:	e002      	b.n	800eb34 <tcp_input+0x73c>
              goto aborted;
 800eb2e:	bf00      	nop
 800eb30:	e000      	b.n	800eb34 <tcp_input+0x73c>
          goto aborted;
 800eb32:	bf00      	nop
    tcp_input_pcb = NULL;
 800eb34:	4b25      	ldr	r3, [pc, #148]	; (800ebcc <tcp_input+0x7d4>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eb3a:	4b28      	ldr	r3, [pc, #160]	; (800ebdc <tcp_input+0x7e4>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eb40:	4b2a      	ldr	r3, [pc, #168]	; (800ebec <tcp_input+0x7f4>)
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d03d      	beq.n	800ebc4 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800eb48:	4b28      	ldr	r3, [pc, #160]	; (800ebec <tcp_input+0x7f4>)
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fd fb87 	bl	800c260 <pbuf_free>
      inseg.p = NULL;
 800eb52:	4b26      	ldr	r3, [pc, #152]	; (800ebec <tcp_input+0x7f4>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eb58:	e034      	b.n	800ebc4 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eb5a:	4b25      	ldr	r3, [pc, #148]	; (800ebf0 <tcp_input+0x7f8>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	899b      	ldrh	r3, [r3, #12]
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fc f8e0 	bl	800ad28 <lwip_htons>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	f003 0304 	and.w	r3, r3, #4
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d118      	bne.n	800eba6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb74:	4b1f      	ldr	r3, [pc, #124]	; (800ebf4 <tcp_input+0x7fc>)
 800eb76:	6819      	ldr	r1, [r3, #0]
 800eb78:	4b1f      	ldr	r3, [pc, #124]	; (800ebf8 <tcp_input+0x800>)
 800eb7a:	881b      	ldrh	r3, [r3, #0]
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	4b1f      	ldr	r3, [pc, #124]	; (800ebfc <tcp_input+0x804>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb84:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <tcp_input+0x7f8>)
 800eb86:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb88:	885b      	ldrh	r3, [r3, #2]
 800eb8a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb8c:	4a18      	ldr	r2, [pc, #96]	; (800ebf0 <tcp_input+0x7f8>)
 800eb8e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb90:	8812      	ldrh	r2, [r2, #0]
 800eb92:	b292      	uxth	r2, r2
 800eb94:	9202      	str	r2, [sp, #8]
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	4b19      	ldr	r3, [pc, #100]	; (800ec00 <tcp_input+0x808>)
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	4b19      	ldr	r3, [pc, #100]	; (800ec04 <tcp_input+0x80c>)
 800eb9e:	4602      	mov	r2, r0
 800eba0:	2000      	movs	r0, #0
 800eba2:	f003 fc8f 	bl	80124c4 <tcp_rst>
    pbuf_free(p);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fd fb5a 	bl	800c260 <pbuf_free>
  return;
 800ebac:	e00a      	b.n	800ebc4 <tcp_input+0x7cc>
    goto dropped;
 800ebae:	bf00      	nop
 800ebb0:	e004      	b.n	800ebbc <tcp_input+0x7c4>
dropped:
 800ebb2:	bf00      	nop
 800ebb4:	e002      	b.n	800ebbc <tcp_input+0x7c4>
      goto dropped;
 800ebb6:	bf00      	nop
 800ebb8:	e000      	b.n	800ebbc <tcp_input+0x7c4>
      goto dropped;
 800ebba:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7fd fb4f 	bl	800c260 <pbuf_free>
 800ebc2:	e000      	b.n	800ebc6 <tcp_input+0x7ce>
  return;
 800ebc4:	bf00      	nop
}
 800ebc6:	3724      	adds	r7, #36	; 0x24
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd90      	pop	{r4, r7, pc}
 800ebcc:	20007514 	.word	0x20007514
 800ebd0:	200004d9 	.word	0x200004d9
 800ebd4:	20007500 	.word	0x20007500
 800ebd8:	200004d4 	.word	0x200004d4
 800ebdc:	200004dc 	.word	0x200004dc
 800ebe0:	0801b504 	.word	0x0801b504
 800ebe4:	0801b6b8 	.word	0x0801b6b8
 800ebe8:	0801b550 	.word	0x0801b550
 800ebec:	200004ac 	.word	0x200004ac
 800ebf0:	200004bc 	.word	0x200004bc
 800ebf4:	200004d0 	.word	0x200004d0
 800ebf8:	200004d6 	.word	0x200004d6
 800ebfc:	200004cc 	.word	0x200004cc
 800ec00:	20003fcc 	.word	0x20003fcc
 800ec04:	20003fd0 	.word	0x20003fd0

0800ec08 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <tcp_input_delayed_close+0x1c>
 800ec16:	4b17      	ldr	r3, [pc, #92]	; (800ec74 <tcp_input_delayed_close+0x6c>)
 800ec18:	f240 225a 	movw	r2, #602	; 0x25a
 800ec1c:	4916      	ldr	r1, [pc, #88]	; (800ec78 <tcp_input_delayed_close+0x70>)
 800ec1e:	4817      	ldr	r0, [pc, #92]	; (800ec7c <tcp_input_delayed_close+0x74>)
 800ec20:	f007 fb48 	bl	80162b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ec24:	4b16      	ldr	r3, [pc, #88]	; (800ec80 <tcp_input_delayed_close+0x78>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	f003 0310 	and.w	r3, r3, #16
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d01c      	beq.n	800ec6a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	8b5b      	ldrh	r3, [r3, #26]
 800ec34:	f003 0310 	and.w	r3, r3, #16
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10d      	bne.n	800ec58 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <tcp_input_delayed_close+0x50>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	6912      	ldr	r2, [r2, #16]
 800ec50:	f06f 010e 	mvn.w	r1, #14
 800ec54:	4610      	mov	r0, r2
 800ec56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ec58:	6879      	ldr	r1, [r7, #4]
 800ec5a:	480a      	ldr	r0, [pc, #40]	; (800ec84 <tcp_input_delayed_close+0x7c>)
 800ec5c:	f7ff fa54 	bl	800e108 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fd fdad 	bl	800c7c0 <tcp_free>
    return 1;
 800ec66:	2301      	movs	r3, #1
 800ec68:	e000      	b.n	800ec6c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	0801b504 	.word	0x0801b504
 800ec78:	0801b6d4 	.word	0x0801b6d4
 800ec7c:	0801b550 	.word	0x0801b550
 800ec80:	200004d9 	.word	0x200004d9
 800ec84:	20007500 	.word	0x20007500

0800ec88 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec88:	b590      	push	{r4, r7, lr}
 800ec8a:	b08b      	sub	sp, #44	; 0x2c
 800ec8c:	af04      	add	r7, sp, #16
 800ec8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ec90:	4b6f      	ldr	r3, [pc, #444]	; (800ee50 <tcp_listen_input+0x1c8>)
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	f003 0304 	and.w	r3, r3, #4
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f040 80d3 	bne.w	800ee44 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d106      	bne.n	800ecb2 <tcp_listen_input+0x2a>
 800eca4:	4b6b      	ldr	r3, [pc, #428]	; (800ee54 <tcp_listen_input+0x1cc>)
 800eca6:	f240 2281 	movw	r2, #641	; 0x281
 800ecaa:	496b      	ldr	r1, [pc, #428]	; (800ee58 <tcp_listen_input+0x1d0>)
 800ecac:	486b      	ldr	r0, [pc, #428]	; (800ee5c <tcp_listen_input+0x1d4>)
 800ecae:	f007 fb01 	bl	80162b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ecb2:	4b67      	ldr	r3, [pc, #412]	; (800ee50 <tcp_listen_input+0x1c8>)
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	f003 0310 	and.w	r3, r3, #16
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d019      	beq.n	800ecf2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecbe:	4b68      	ldr	r3, [pc, #416]	; (800ee60 <tcp_listen_input+0x1d8>)
 800ecc0:	6819      	ldr	r1, [r3, #0]
 800ecc2:	4b68      	ldr	r3, [pc, #416]	; (800ee64 <tcp_listen_input+0x1dc>)
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	4b67      	ldr	r3, [pc, #412]	; (800ee68 <tcp_listen_input+0x1e0>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecce:	4b67      	ldr	r3, [pc, #412]	; (800ee6c <tcp_listen_input+0x1e4>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd2:	885b      	ldrh	r3, [r3, #2]
 800ecd4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecd6:	4a65      	ldr	r2, [pc, #404]	; (800ee6c <tcp_listen_input+0x1e4>)
 800ecd8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecda:	8812      	ldrh	r2, [r2, #0]
 800ecdc:	b292      	uxth	r2, r2
 800ecde:	9202      	str	r2, [sp, #8]
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	4b63      	ldr	r3, [pc, #396]	; (800ee70 <tcp_listen_input+0x1e8>)
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	4b63      	ldr	r3, [pc, #396]	; (800ee74 <tcp_listen_input+0x1ec>)
 800ece8:	4602      	mov	r2, r0
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f003 fbea 	bl	80124c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ecf0:	e0aa      	b.n	800ee48 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800ecf2:	4b57      	ldr	r3, [pc, #348]	; (800ee50 <tcp_listen_input+0x1c8>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	f003 0302 	and.w	r3, r3, #2
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 80a4 	beq.w	800ee48 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	7d5b      	ldrb	r3, [r3, #21]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7ff f863 	bl	800ddd0 <tcp_alloc>
 800ed0a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d111      	bne.n	800ed36 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00a      	beq.n	800ed30 <tcp_listen_input+0xa8>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	699b      	ldr	r3, [r3, #24]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	6910      	ldr	r0, [r2, #16]
 800ed22:	f04f 32ff 	mov.w	r2, #4294967295
 800ed26:	2100      	movs	r1, #0
 800ed28:	4798      	blx	r3
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	73bb      	strb	r3, [r7, #14]
      return;
 800ed2e:	e08c      	b.n	800ee4a <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed30:	23f0      	movs	r3, #240	; 0xf0
 800ed32:	73bb      	strb	r3, [r7, #14]
      return;
 800ed34:	e089      	b.n	800ee4a <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed36:	4b50      	ldr	r3, [pc, #320]	; (800ee78 <tcp_listen_input+0x1f0>)
 800ed38:	695a      	ldr	r2, [r3, #20]
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ed3e:	4b4e      	ldr	r3, [pc, #312]	; (800ee78 <tcp_listen_input+0x1f0>)
 800ed40:	691a      	ldr	r2, [r3, #16]
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	8ada      	ldrh	r2, [r3, #22]
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ed4e:	4b47      	ldr	r3, [pc, #284]	; (800ee6c <tcp_listen_input+0x1e4>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2203      	movs	r2, #3
 800ed5e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ed60:	4b41      	ldr	r3, [pc, #260]	; (800ee68 <tcp_listen_input+0x1e0>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	1c5a      	adds	r2, r3, #1
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ed72:	6978      	ldr	r0, [r7, #20]
 800ed74:	f7ff fa5c 	bl	800e230 <tcp_next_iss>
 800ed78:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	693a      	ldr	r2, [r7, #16]
 800ed90:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed92:	4b35      	ldr	r3, [pc, #212]	; (800ee68 <tcp_listen_input+0x1e0>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	1e5a      	subs	r2, r3, #1
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	691a      	ldr	r2, [r3, #16]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	7a5b      	ldrb	r3, [r3, #9]
 800edae:	f003 030c 	and.w	r3, r3, #12
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	7a1a      	ldrb	r2, [r3, #8]
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800edc0:	4b2e      	ldr	r3, [pc, #184]	; (800ee7c <tcp_listen_input+0x1f4>)
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	60da      	str	r2, [r3, #12]
 800edc8:	4a2c      	ldr	r2, [pc, #176]	; (800ee7c <tcp_listen_input+0x1f4>)
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	6013      	str	r3, [r2, #0]
 800edce:	f003 fd3b 	bl	8012848 <tcp_timer_needed>
 800edd2:	4b2b      	ldr	r3, [pc, #172]	; (800ee80 <tcp_listen_input+0x1f8>)
 800edd4:	2201      	movs	r2, #1
 800edd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800edd8:	6978      	ldr	r0, [r7, #20]
 800edda:	f001 fd8f 	bl	80108fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800edde:	4b23      	ldr	r3, [pc, #140]	; (800ee6c <tcp_listen_input+0x1e4>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	89db      	ldrh	r3, [r3, #14]
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	3304      	adds	r3, #4
 800ee00:	4618      	mov	r0, r3
 800ee02:	f005 f8fd 	bl	8014000 <ip4_route>
 800ee06:	4601      	mov	r1, r0
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f7ff fa34 	bl	800e27c <tcp_eff_send_mss_netif>
 800ee14:	4603      	mov	r3, r0
 800ee16:	461a      	mov	r2, r3
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ee1c:	2112      	movs	r1, #18
 800ee1e:	6978      	ldr	r0, [r7, #20]
 800ee20:	f002 fc9c 	bl	801175c <tcp_enqueue_flags>
 800ee24:	4603      	mov	r3, r0
 800ee26:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ee28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d004      	beq.n	800ee3a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ee30:	2100      	movs	r1, #0
 800ee32:	6978      	ldr	r0, [r7, #20]
 800ee34:	f7fd fee6 	bl	800cc04 <tcp_abandon>
      return;
 800ee38:	e007      	b.n	800ee4a <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800ee3a:	6978      	ldr	r0, [r7, #20]
 800ee3c:	f002 fd7c 	bl	8011938 <tcp_output>
  return;
 800ee40:	bf00      	nop
 800ee42:	e001      	b.n	800ee48 <tcp_listen_input+0x1c0>
    return;
 800ee44:	bf00      	nop
 800ee46:	e000      	b.n	800ee4a <tcp_listen_input+0x1c2>
  return;
 800ee48:	bf00      	nop
}
 800ee4a:	371c      	adds	r7, #28
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd90      	pop	{r4, r7, pc}
 800ee50:	200004d8 	.word	0x200004d8
 800ee54:	0801b504 	.word	0x0801b504
 800ee58:	0801b6fc 	.word	0x0801b6fc
 800ee5c:	0801b550 	.word	0x0801b550
 800ee60:	200004d0 	.word	0x200004d0
 800ee64:	200004d6 	.word	0x200004d6
 800ee68:	200004cc 	.word	0x200004cc
 800ee6c:	200004bc 	.word	0x200004bc
 800ee70:	20003fcc 	.word	0x20003fcc
 800ee74:	20003fd0 	.word	0x20003fd0
 800ee78:	20003fbc 	.word	0x20003fbc
 800ee7c:	20007500 	.word	0x20007500
 800ee80:	200074fc 	.word	0x200074fc

0800ee84 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af04      	add	r7, sp, #16
 800ee8a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ee8c:	4b30      	ldr	r3, [pc, #192]	; (800ef50 <tcp_timewait_input+0xcc>)
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d154      	bne.n	800ef42 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d106      	bne.n	800eeac <tcp_timewait_input+0x28>
 800ee9e:	4b2d      	ldr	r3, [pc, #180]	; (800ef54 <tcp_timewait_input+0xd0>)
 800eea0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eea4:	492c      	ldr	r1, [pc, #176]	; (800ef58 <tcp_timewait_input+0xd4>)
 800eea6:	482d      	ldr	r0, [pc, #180]	; (800ef5c <tcp_timewait_input+0xd8>)
 800eea8:	f007 fa04 	bl	80162b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eeac:	4b28      	ldr	r3, [pc, #160]	; (800ef50 <tcp_timewait_input+0xcc>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	f003 0302 	and.w	r3, r3, #2
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d02a      	beq.n	800ef0e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eeb8:	4b29      	ldr	r3, [pc, #164]	; (800ef60 <tcp_timewait_input+0xdc>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	db2d      	blt.n	800ef22 <tcp_timewait_input+0x9e>
 800eec6:	4b26      	ldr	r3, [pc, #152]	; (800ef60 <tcp_timewait_input+0xdc>)
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eece:	6879      	ldr	r1, [r7, #4]
 800eed0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eed2:	440b      	add	r3, r1
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	dc23      	bgt.n	800ef22 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeda:	4b22      	ldr	r3, [pc, #136]	; (800ef64 <tcp_timewait_input+0xe0>)
 800eedc:	6819      	ldr	r1, [r3, #0]
 800eede:	4b22      	ldr	r3, [pc, #136]	; (800ef68 <tcp_timewait_input+0xe4>)
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	461a      	mov	r2, r3
 800eee4:	4b1e      	ldr	r3, [pc, #120]	; (800ef60 <tcp_timewait_input+0xdc>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeea:	4b20      	ldr	r3, [pc, #128]	; (800ef6c <tcp_timewait_input+0xe8>)
 800eeec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeee:	885b      	ldrh	r3, [r3, #2]
 800eef0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eef2:	4a1e      	ldr	r2, [pc, #120]	; (800ef6c <tcp_timewait_input+0xe8>)
 800eef4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eef6:	8812      	ldrh	r2, [r2, #0]
 800eef8:	b292      	uxth	r2, r2
 800eefa:	9202      	str	r2, [sp, #8]
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	4b1c      	ldr	r3, [pc, #112]	; (800ef70 <tcp_timewait_input+0xec>)
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4b1c      	ldr	r3, [pc, #112]	; (800ef74 <tcp_timewait_input+0xf0>)
 800ef04:	4602      	mov	r2, r0
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f003 fadc 	bl	80124c4 <tcp_rst>
      return;
 800ef0c:	e01c      	b.n	800ef48 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800ef0e:	4b10      	ldr	r3, [pc, #64]	; (800ef50 <tcp_timewait_input+0xcc>)
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ef1a:	4b17      	ldr	r3, [pc, #92]	; (800ef78 <tcp_timewait_input+0xf4>)
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ef22:	4b11      	ldr	r3, [pc, #68]	; (800ef68 <tcp_timewait_input+0xe4>)
 800ef24:	881b      	ldrh	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00d      	beq.n	800ef46 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	8b5b      	ldrh	r3, [r3, #26]
 800ef2e:	f043 0302 	orr.w	r3, r3, #2
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f002 fcfd 	bl	8011938 <tcp_output>
  }
  return;
 800ef3e:	bf00      	nop
 800ef40:	e001      	b.n	800ef46 <tcp_timewait_input+0xc2>
    return;
 800ef42:	bf00      	nop
 800ef44:	e000      	b.n	800ef48 <tcp_timewait_input+0xc4>
  return;
 800ef46:	bf00      	nop
}
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	200004d8 	.word	0x200004d8
 800ef54:	0801b504 	.word	0x0801b504
 800ef58:	0801b71c 	.word	0x0801b71c
 800ef5c:	0801b550 	.word	0x0801b550
 800ef60:	200004cc 	.word	0x200004cc
 800ef64:	200004d0 	.word	0x200004d0
 800ef68:	200004d6 	.word	0x200004d6
 800ef6c:	200004bc 	.word	0x200004bc
 800ef70:	20003fcc 	.word	0x20003fcc
 800ef74:	20003fd0 	.word	0x20003fd0
 800ef78:	20007504 	.word	0x20007504

0800ef7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ef7c:	b590      	push	{r4, r7, lr}
 800ef7e:	b08d      	sub	sp, #52	; 0x34
 800ef80:	af04      	add	r7, sp, #16
 800ef82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef84:	2300      	movs	r3, #0
 800ef86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <tcp_process+0x24>
 800ef92:	4ba5      	ldr	r3, [pc, #660]	; (800f228 <tcp_process+0x2ac>)
 800ef94:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef98:	49a4      	ldr	r1, [pc, #656]	; (800f22c <tcp_process+0x2b0>)
 800ef9a:	48a5      	ldr	r0, [pc, #660]	; (800f230 <tcp_process+0x2b4>)
 800ef9c:	f007 f98a 	bl	80162b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800efa0:	4ba4      	ldr	r3, [pc, #656]	; (800f234 <tcp_process+0x2b8>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	f003 0304 	and.w	r3, r3, #4
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d04e      	beq.n	800f04a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	7d1b      	ldrb	r3, [r3, #20]
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d108      	bne.n	800efc6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efb8:	4b9f      	ldr	r3, [pc, #636]	; (800f238 <tcp_process+0x2bc>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d123      	bne.n	800f008 <tcp_process+0x8c>
        acceptable = 1;
 800efc0:	2301      	movs	r3, #1
 800efc2:	76fb      	strb	r3, [r7, #27]
 800efc4:	e020      	b.n	800f008 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efca:	4b9c      	ldr	r3, [pc, #624]	; (800f23c <tcp_process+0x2c0>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d102      	bne.n	800efd8 <tcp_process+0x5c>
        acceptable = 1;
 800efd2:	2301      	movs	r3, #1
 800efd4:	76fb      	strb	r3, [r7, #27]
 800efd6:	e017      	b.n	800f008 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efd8:	4b98      	ldr	r3, [pc, #608]	; (800f23c <tcp_process+0x2c0>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	db10      	blt.n	800f008 <tcp_process+0x8c>
 800efe6:	4b95      	ldr	r3, [pc, #596]	; (800f23c <tcp_process+0x2c0>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eff2:	440b      	add	r3, r1
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	dc06      	bgt.n	800f008 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	8b5b      	ldrh	r3, [r3, #26]
 800effe:	f043 0302 	orr.w	r3, r3, #2
 800f002:	b29a      	uxth	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f008:	7efb      	ldrb	r3, [r7, #27]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d01b      	beq.n	800f046 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	7d1b      	ldrb	r3, [r3, #20]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d106      	bne.n	800f024 <tcp_process+0xa8>
 800f016:	4b84      	ldr	r3, [pc, #528]	; (800f228 <tcp_process+0x2ac>)
 800f018:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f01c:	4988      	ldr	r1, [pc, #544]	; (800f240 <tcp_process+0x2c4>)
 800f01e:	4884      	ldr	r0, [pc, #528]	; (800f230 <tcp_process+0x2b4>)
 800f020:	f007 f948 	bl	80162b4 <iprintf>
      recv_flags |= TF_RESET;
 800f024:	4b87      	ldr	r3, [pc, #540]	; (800f244 <tcp_process+0x2c8>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	f043 0308 	orr.w	r3, r3, #8
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	4b85      	ldr	r3, [pc, #532]	; (800f244 <tcp_process+0x2c8>)
 800f030:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	8b5b      	ldrh	r3, [r3, #26]
 800f036:	f023 0301 	bic.w	r3, r3, #1
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f040:	f06f 030d 	mvn.w	r3, #13
 800f044:	e37a      	b.n	800f73c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f046:	2300      	movs	r3, #0
 800f048:	e378      	b.n	800f73c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f04a:	4b7a      	ldr	r3, [pc, #488]	; (800f234 <tcp_process+0x2b8>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	f003 0302 	and.w	r3, r3, #2
 800f052:	2b00      	cmp	r3, #0
 800f054:	d010      	beq.n	800f078 <tcp_process+0xfc>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	7d1b      	ldrb	r3, [r3, #20]
 800f05a:	2b02      	cmp	r3, #2
 800f05c:	d00c      	beq.n	800f078 <tcp_process+0xfc>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	7d1b      	ldrb	r3, [r3, #20]
 800f062:	2b03      	cmp	r3, #3
 800f064:	d008      	beq.n	800f078 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	8b5b      	ldrh	r3, [r3, #26]
 800f06a:	f043 0302 	orr.w	r3, r3, #2
 800f06e:	b29a      	uxth	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	e361      	b.n	800f73c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	8b5b      	ldrh	r3, [r3, #26]
 800f07c:	f003 0310 	and.w	r3, r3, #16
 800f080:	2b00      	cmp	r3, #0
 800f082:	d103      	bne.n	800f08c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f084:	4b70      	ldr	r3, [pc, #448]	; (800f248 <tcp_process+0x2cc>)
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f001 fc2d 	bl	80108fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	7d1b      	ldrb	r3, [r3, #20]
 800f0a6:	3b02      	subs	r3, #2
 800f0a8:	2b07      	cmp	r3, #7
 800f0aa:	f200 8337 	bhi.w	800f71c <tcp_process+0x7a0>
 800f0ae:	a201      	add	r2, pc, #4	; (adr r2, 800f0b4 <tcp_process+0x138>)
 800f0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b4:	0800f0d5 	.word	0x0800f0d5
 800f0b8:	0800f305 	.word	0x0800f305
 800f0bc:	0800f47d 	.word	0x0800f47d
 800f0c0:	0800f4a7 	.word	0x0800f4a7
 800f0c4:	0800f5cb 	.word	0x0800f5cb
 800f0c8:	0800f47d 	.word	0x0800f47d
 800f0cc:	0800f657 	.word	0x0800f657
 800f0d0:	0800f6e7 	.word	0x0800f6e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f0d4:	4b57      	ldr	r3, [pc, #348]	; (800f234 <tcp_process+0x2b8>)
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	f003 0310 	and.w	r3, r3, #16
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f000 80e4 	beq.w	800f2aa <tcp_process+0x32e>
 800f0e2:	4b54      	ldr	r3, [pc, #336]	; (800f234 <tcp_process+0x2b8>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	f003 0302 	and.w	r3, r3, #2
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f000 80dd 	beq.w	800f2aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f4:	1c5a      	adds	r2, r3, #1
 800f0f6:	4b50      	ldr	r3, [pc, #320]	; (800f238 <tcp_process+0x2bc>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	f040 80d5 	bne.w	800f2aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f100:	4b4e      	ldr	r3, [pc, #312]	; (800f23c <tcp_process+0x2c0>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	1c5a      	adds	r2, r3, #1
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f112:	4b49      	ldr	r3, [pc, #292]	; (800f238 <tcp_process+0x2bc>)
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f11a:	4b4c      	ldr	r3, [pc, #304]	; (800f24c <tcp_process+0x2d0>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	89db      	ldrh	r3, [r3, #14]
 800f120:	b29a      	uxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f134:	4b41      	ldr	r3, [pc, #260]	; (800f23c <tcp_process+0x2c0>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	1e5a      	subs	r2, r3, #1
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2204      	movs	r2, #4
 800f142:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3304      	adds	r3, #4
 800f14c:	4618      	mov	r0, r3
 800f14e:	f004 ff57 	bl	8014000 <ip4_route>
 800f152:	4601      	mov	r1, r0
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3304      	adds	r3, #4
 800f158:	461a      	mov	r2, r3
 800f15a:	4620      	mov	r0, r4
 800f15c:	f7ff f88e 	bl	800e27c <tcp_eff_send_mss_netif>
 800f160:	4603      	mov	r3, r0
 800f162:	461a      	mov	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f16c:	009a      	lsls	r2, r3, #2
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	f241 111c 	movw	r1, #4380	; 0x111c
 800f178:	428b      	cmp	r3, r1
 800f17a:	bf38      	it	cc
 800f17c:	460b      	movcc	r3, r1
 800f17e:	429a      	cmp	r2, r3
 800f180:	d204      	bcs.n	800f18c <tcp_process+0x210>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	b29b      	uxth	r3, r3
 800f18a:	e00d      	b.n	800f1a8 <tcp_process+0x22c>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f190:	005b      	lsls	r3, r3, #1
 800f192:	f241 121c 	movw	r2, #4380	; 0x111c
 800f196:	4293      	cmp	r3, r2
 800f198:	d904      	bls.n	800f1a4 <tcp_process+0x228>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f19e:	005b      	lsls	r3, r3, #1
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	e001      	b.n	800f1a8 <tcp_process+0x22c>
 800f1a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d106      	bne.n	800f1c6 <tcp_process+0x24a>
 800f1b8:	4b1b      	ldr	r3, [pc, #108]	; (800f228 <tcp_process+0x2ac>)
 800f1ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f1be:	4924      	ldr	r1, [pc, #144]	; (800f250 <tcp_process+0x2d4>)
 800f1c0:	481b      	ldr	r0, [pc, #108]	; (800f230 <tcp_process+0x2b4>)
 800f1c2:	f007 f877 	bl	80162b4 <iprintf>
        --pcb->snd_queuelen;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d111      	bne.n	800f206 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <tcp_process+0x280>
 800f1ee:	4b0e      	ldr	r3, [pc, #56]	; (800f228 <tcp_process+0x2ac>)
 800f1f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f1f4:	4917      	ldr	r1, [pc, #92]	; (800f254 <tcp_process+0x2d8>)
 800f1f6:	480e      	ldr	r0, [pc, #56]	; (800f230 <tcp_process+0x2b4>)
 800f1f8:	f007 f85c 	bl	80162b4 <iprintf>
          pcb->unsent = rseg->next;
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	66da      	str	r2, [r3, #108]	; 0x6c
 800f204:	e003      	b.n	800f20e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f7fe fc58 	bl	800dac4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d11d      	bne.n	800f258 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f222:	861a      	strh	r2, [r3, #48]	; 0x30
 800f224:	e01f      	b.n	800f266 <tcp_process+0x2ea>
 800f226:	bf00      	nop
 800f228:	0801b504 	.word	0x0801b504
 800f22c:	0801b73c 	.word	0x0801b73c
 800f230:	0801b550 	.word	0x0801b550
 800f234:	200004d8 	.word	0x200004d8
 800f238:	200004d0 	.word	0x200004d0
 800f23c:	200004cc 	.word	0x200004cc
 800f240:	0801b758 	.word	0x0801b758
 800f244:	200004d9 	.word	0x200004d9
 800f248:	20007504 	.word	0x20007504
 800f24c:	200004bc 	.word	0x200004bc
 800f250:	0801b778 	.word	0x0801b778
 800f254:	0801b790 	.word	0x0801b790
        } else {
          pcb->rtime = 0;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2200      	movs	r2, #0
 800f25c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d00a      	beq.n	800f286 <tcp_process+0x30a>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	6910      	ldr	r0, [r2, #16]
 800f27a:	2200      	movs	r2, #0
 800f27c:	6879      	ldr	r1, [r7, #4]
 800f27e:	4798      	blx	r3
 800f280:	4603      	mov	r3, r0
 800f282:	76bb      	strb	r3, [r7, #26]
 800f284:	e001      	b.n	800f28a <tcp_process+0x30e>
 800f286:	2300      	movs	r3, #0
 800f288:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f28a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f28e:	f113 0f0d 	cmn.w	r3, #13
 800f292:	d102      	bne.n	800f29a <tcp_process+0x31e>
          return ERR_ABRT;
 800f294:	f06f 030c 	mvn.w	r3, #12
 800f298:	e250      	b.n	800f73c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	8b5b      	ldrh	r3, [r3, #26]
 800f29e:	f043 0302 	orr.w	r3, r3, #2
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f2a8:	e23a      	b.n	800f720 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f2aa:	4b9d      	ldr	r3, [pc, #628]	; (800f520 <tcp_process+0x5a4>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f003 0310 	and.w	r3, r3, #16
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f000 8234 	beq.w	800f720 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2b8:	4b9a      	ldr	r3, [pc, #616]	; (800f524 <tcp_process+0x5a8>)
 800f2ba:	6819      	ldr	r1, [r3, #0]
 800f2bc:	4b9a      	ldr	r3, [pc, #616]	; (800f528 <tcp_process+0x5ac>)
 800f2be:	881b      	ldrh	r3, [r3, #0]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b9a      	ldr	r3, [pc, #616]	; (800f52c <tcp_process+0x5b0>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2c8:	4b99      	ldr	r3, [pc, #612]	; (800f530 <tcp_process+0x5b4>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2cc:	885b      	ldrh	r3, [r3, #2]
 800f2ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2d0:	4a97      	ldr	r2, [pc, #604]	; (800f530 <tcp_process+0x5b4>)
 800f2d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2d4:	8812      	ldrh	r2, [r2, #0]
 800f2d6:	b292      	uxth	r2, r2
 800f2d8:	9202      	str	r2, [sp, #8]
 800f2da:	9301      	str	r3, [sp, #4]
 800f2dc:	4b95      	ldr	r3, [pc, #596]	; (800f534 <tcp_process+0x5b8>)
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	4b95      	ldr	r3, [pc, #596]	; (800f538 <tcp_process+0x5bc>)
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f003 f8ed 	bl	80124c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2f0:	2b05      	cmp	r3, #5
 800f2f2:	f200 8215 	bhi.w	800f720 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f002 feab 	bl	8012058 <tcp_rexmit_rto>
      break;
 800f302:	e20d      	b.n	800f720 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f304:	4b86      	ldr	r3, [pc, #536]	; (800f520 <tcp_process+0x5a4>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	f003 0310 	and.w	r3, r3, #16
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 80a1 	beq.w	800f454 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f312:	4b84      	ldr	r3, [pc, #528]	; (800f524 <tcp_process+0x5a8>)
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f31a:	1ad3      	subs	r3, r2, r3
 800f31c:	3b01      	subs	r3, #1
 800f31e:	2b00      	cmp	r3, #0
 800f320:	db7e      	blt.n	800f420 <tcp_process+0x4a4>
 800f322:	4b80      	ldr	r3, [pc, #512]	; (800f524 <tcp_process+0x5a8>)
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dc77      	bgt.n	800f420 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2204      	movs	r2, #4
 800f334:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d102      	bne.n	800f344 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f33e:	23fa      	movs	r3, #250	; 0xfa
 800f340:	76bb      	strb	r3, [r7, #26]
 800f342:	e01d      	b.n	800f380 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f348:	699b      	ldr	r3, [r3, #24]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d106      	bne.n	800f35c <tcp_process+0x3e0>
 800f34e:	4b7b      	ldr	r3, [pc, #492]	; (800f53c <tcp_process+0x5c0>)
 800f350:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f354:	497a      	ldr	r1, [pc, #488]	; (800f540 <tcp_process+0x5c4>)
 800f356:	487b      	ldr	r0, [pc, #492]	; (800f544 <tcp_process+0x5c8>)
 800f358:	f006 ffac 	bl	80162b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f360:	699b      	ldr	r3, [r3, #24]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00a      	beq.n	800f37c <tcp_process+0x400>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	6910      	ldr	r0, [r2, #16]
 800f370:	2200      	movs	r2, #0
 800f372:	6879      	ldr	r1, [r7, #4]
 800f374:	4798      	blx	r3
 800f376:	4603      	mov	r3, r0
 800f378:	76bb      	strb	r3, [r7, #26]
 800f37a:	e001      	b.n	800f380 <tcp_process+0x404>
 800f37c:	23f0      	movs	r3, #240	; 0xf0
 800f37e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f380:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00a      	beq.n	800f39e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f388:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f38c:	f113 0f0d 	cmn.w	r3, #13
 800f390:	d002      	beq.n	800f398 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7fd fcf4 	bl	800cd80 <tcp_abort>
            }
            return ERR_ABRT;
 800f398:	f06f 030c 	mvn.w	r3, #12
 800f39c:	e1ce      	b.n	800f73c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fae0 	bl	800f964 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f3a4:	4b68      	ldr	r3, [pc, #416]	; (800f548 <tcp_process+0x5cc>)
 800f3a6:	881b      	ldrh	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d005      	beq.n	800f3b8 <tcp_process+0x43c>
            recv_acked--;
 800f3ac:	4b66      	ldr	r3, [pc, #408]	; (800f548 <tcp_process+0x5cc>)
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	4b64      	ldr	r3, [pc, #400]	; (800f548 <tcp_process+0x5cc>)
 800f3b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3bc:	009a      	lsls	r2, r3, #2
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3c8:	428b      	cmp	r3, r1
 800f3ca:	bf38      	it	cc
 800f3cc:	460b      	movcc	r3, r1
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d204      	bcs.n	800f3dc <tcp_process+0x460>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	e00d      	b.n	800f3f8 <tcp_process+0x47c>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3e0:	005b      	lsls	r3, r3, #1
 800f3e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d904      	bls.n	800f3f4 <tcp_process+0x478>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	e001      	b.n	800f3f8 <tcp_process+0x47c>
 800f3f4:	f241 131c 	movw	r3, #4380	; 0x111c
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f3fe:	4b53      	ldr	r3, [pc, #332]	; (800f54c <tcp_process+0x5d0>)
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	f003 0320 	and.w	r3, r3, #32
 800f406:	2b00      	cmp	r3, #0
 800f408:	d037      	beq.n	800f47a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	8b5b      	ldrh	r3, [r3, #26]
 800f40e:	f043 0302 	orr.w	r3, r3, #2
 800f412:	b29a      	uxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2207      	movs	r2, #7
 800f41c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f41e:	e02c      	b.n	800f47a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f420:	4b40      	ldr	r3, [pc, #256]	; (800f524 <tcp_process+0x5a8>)
 800f422:	6819      	ldr	r1, [r3, #0]
 800f424:	4b40      	ldr	r3, [pc, #256]	; (800f528 <tcp_process+0x5ac>)
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	461a      	mov	r2, r3
 800f42a:	4b40      	ldr	r3, [pc, #256]	; (800f52c <tcp_process+0x5b0>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f430:	4b3f      	ldr	r3, [pc, #252]	; (800f530 <tcp_process+0x5b4>)
 800f432:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f434:	885b      	ldrh	r3, [r3, #2]
 800f436:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f438:	4a3d      	ldr	r2, [pc, #244]	; (800f530 <tcp_process+0x5b4>)
 800f43a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f43c:	8812      	ldrh	r2, [r2, #0]
 800f43e:	b292      	uxth	r2, r2
 800f440:	9202      	str	r2, [sp, #8]
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	4b3b      	ldr	r3, [pc, #236]	; (800f534 <tcp_process+0x5b8>)
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	4b3b      	ldr	r3, [pc, #236]	; (800f538 <tcp_process+0x5bc>)
 800f44a:	4602      	mov	r2, r0
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f003 f839 	bl	80124c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f452:	e167      	b.n	800f724 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f454:	4b32      	ldr	r3, [pc, #200]	; (800f520 <tcp_process+0x5a4>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	f003 0302 	and.w	r3, r3, #2
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 8161 	beq.w	800f724 <tcp_process+0x7a8>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f466:	1e5a      	subs	r2, r3, #1
 800f468:	4b30      	ldr	r3, [pc, #192]	; (800f52c <tcp_process+0x5b0>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	f040 8159 	bne.w	800f724 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f002 fe12 	bl	801209c <tcp_rexmit>
      break;
 800f478:	e154      	b.n	800f724 <tcp_process+0x7a8>
 800f47a:	e153      	b.n	800f724 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 fa71 	bl	800f964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f482:	4b32      	ldr	r3, [pc, #200]	; (800f54c <tcp_process+0x5d0>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f003 0320 	and.w	r3, r3, #32
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 814c 	beq.w	800f728 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	8b5b      	ldrh	r3, [r3, #26]
 800f494:	f043 0302 	orr.w	r3, r3, #2
 800f498:	b29a      	uxth	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2207      	movs	r2, #7
 800f4a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4a4:	e140      	b.n	800f728 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fa5c 	bl	800f964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f4ac:	4b27      	ldr	r3, [pc, #156]	; (800f54c <tcp_process+0x5d0>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d071      	beq.n	800f59c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4b8:	4b19      	ldr	r3, [pc, #100]	; (800f520 <tcp_process+0x5a4>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 0310 	and.w	r3, r3, #16
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d060      	beq.n	800f586 <tcp_process+0x60a>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4c8:	4b16      	ldr	r3, [pc, #88]	; (800f524 <tcp_process+0x5a8>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d15a      	bne.n	800f586 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d156      	bne.n	800f586 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	8b5b      	ldrh	r3, [r3, #26]
 800f4dc:	f043 0302 	orr.w	r3, r3, #2
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7fe fdbe 	bl	800e068 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f4ec:	4b18      	ldr	r3, [pc, #96]	; (800f550 <tcp_process+0x5d4>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d105      	bne.n	800f502 <tcp_process+0x586>
 800f4f6:	4b16      	ldr	r3, [pc, #88]	; (800f550 <tcp_process+0x5d4>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	4a14      	ldr	r2, [pc, #80]	; (800f550 <tcp_process+0x5d4>)
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	e02e      	b.n	800f560 <tcp_process+0x5e4>
 800f502:	4b13      	ldr	r3, [pc, #76]	; (800f550 <tcp_process+0x5d4>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	617b      	str	r3, [r7, #20]
 800f508:	e027      	b.n	800f55a <tcp_process+0x5de>
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	429a      	cmp	r2, r3
 800f512:	d11f      	bne.n	800f554 <tcp_process+0x5d8>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	68da      	ldr	r2, [r3, #12]
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	60da      	str	r2, [r3, #12]
 800f51c:	e020      	b.n	800f560 <tcp_process+0x5e4>
 800f51e:	bf00      	nop
 800f520:	200004d8 	.word	0x200004d8
 800f524:	200004d0 	.word	0x200004d0
 800f528:	200004d6 	.word	0x200004d6
 800f52c:	200004cc 	.word	0x200004cc
 800f530:	200004bc 	.word	0x200004bc
 800f534:	20003fcc 	.word	0x20003fcc
 800f538:	20003fd0 	.word	0x20003fd0
 800f53c:	0801b504 	.word	0x0801b504
 800f540:	0801b7a4 	.word	0x0801b7a4
 800f544:	0801b550 	.word	0x0801b550
 800f548:	200004d4 	.word	0x200004d4
 800f54c:	200004d9 	.word	0x200004d9
 800f550:	20007500 	.word	0x20007500
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	617b      	str	r3, [r7, #20]
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d1d4      	bne.n	800f50a <tcp_process+0x58e>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	4b77      	ldr	r3, [pc, #476]	; (800f744 <tcp_process+0x7c8>)
 800f568:	2201      	movs	r2, #1
 800f56a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	220a      	movs	r2, #10
 800f570:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f572:	4b75      	ldr	r3, [pc, #468]	; (800f748 <tcp_process+0x7cc>)
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	60da      	str	r2, [r3, #12]
 800f57a:	4a73      	ldr	r2, [pc, #460]	; (800f748 <tcp_process+0x7cc>)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6013      	str	r3, [r2, #0]
 800f580:	f003 f962 	bl	8012848 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f584:	e0d2      	b.n	800f72c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	8b5b      	ldrh	r3, [r3, #26]
 800f58a:	f043 0302 	orr.w	r3, r3, #2
 800f58e:	b29a      	uxth	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2208      	movs	r2, #8
 800f598:	751a      	strb	r2, [r3, #20]
      break;
 800f59a:	e0c7      	b.n	800f72c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f59c:	4b6b      	ldr	r3, [pc, #428]	; (800f74c <tcp_process+0x7d0>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f003 0310 	and.w	r3, r3, #16
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f000 80c1 	beq.w	800f72c <tcp_process+0x7b0>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5ae:	4b68      	ldr	r3, [pc, #416]	; (800f750 <tcp_process+0x7d4>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	f040 80ba 	bne.w	800f72c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f040 80b5 	bne.w	800f72c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2206      	movs	r2, #6
 800f5c6:	751a      	strb	r2, [r3, #20]
      break;
 800f5c8:	e0b0      	b.n	800f72c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 f9ca 	bl	800f964 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5d0:	4b60      	ldr	r3, [pc, #384]	; (800f754 <tcp_process+0x7d8>)
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	f003 0320 	and.w	r3, r3, #32
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 80a9 	beq.w	800f730 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	8b5b      	ldrh	r3, [r3, #26]
 800f5e2:	f043 0302 	orr.w	r3, r3, #2
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7fe fd3b 	bl	800e068 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5f2:	4b59      	ldr	r3, [pc, #356]	; (800f758 <tcp_process+0x7dc>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d105      	bne.n	800f608 <tcp_process+0x68c>
 800f5fc:	4b56      	ldr	r3, [pc, #344]	; (800f758 <tcp_process+0x7dc>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	4a55      	ldr	r2, [pc, #340]	; (800f758 <tcp_process+0x7dc>)
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	e013      	b.n	800f630 <tcp_process+0x6b4>
 800f608:	4b53      	ldr	r3, [pc, #332]	; (800f758 <tcp_process+0x7dc>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	613b      	str	r3, [r7, #16]
 800f60e:	e00c      	b.n	800f62a <tcp_process+0x6ae>
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	429a      	cmp	r2, r3
 800f618:	d104      	bne.n	800f624 <tcp_process+0x6a8>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	68da      	ldr	r2, [r3, #12]
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	e005      	b.n	800f630 <tcp_process+0x6b4>
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	613b      	str	r3, [r7, #16]
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1ef      	bne.n	800f610 <tcp_process+0x694>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	60da      	str	r2, [r3, #12]
 800f636:	4b43      	ldr	r3, [pc, #268]	; (800f744 <tcp_process+0x7c8>)
 800f638:	2201      	movs	r2, #1
 800f63a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	220a      	movs	r2, #10
 800f640:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f642:	4b41      	ldr	r3, [pc, #260]	; (800f748 <tcp_process+0x7cc>)
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	60da      	str	r2, [r3, #12]
 800f64a:	4a3f      	ldr	r2, [pc, #252]	; (800f748 <tcp_process+0x7cc>)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6013      	str	r3, [r2, #0]
 800f650:	f003 f8fa 	bl	8012848 <tcp_timer_needed>
      }
      break;
 800f654:	e06c      	b.n	800f730 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 f984 	bl	800f964 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f65c:	4b3b      	ldr	r3, [pc, #236]	; (800f74c <tcp_process+0x7d0>)
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	f003 0310 	and.w	r3, r3, #16
 800f664:	2b00      	cmp	r3, #0
 800f666:	d065      	beq.n	800f734 <tcp_process+0x7b8>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f66c:	4b38      	ldr	r3, [pc, #224]	; (800f750 <tcp_process+0x7d4>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	429a      	cmp	r2, r3
 800f672:	d15f      	bne.n	800f734 <tcp_process+0x7b8>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d15b      	bne.n	800f734 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7fe fcf3 	bl	800e068 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f682:	4b35      	ldr	r3, [pc, #212]	; (800f758 <tcp_process+0x7dc>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d105      	bne.n	800f698 <tcp_process+0x71c>
 800f68c:	4b32      	ldr	r3, [pc, #200]	; (800f758 <tcp_process+0x7dc>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	4a31      	ldr	r2, [pc, #196]	; (800f758 <tcp_process+0x7dc>)
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	e013      	b.n	800f6c0 <tcp_process+0x744>
 800f698:	4b2f      	ldr	r3, [pc, #188]	; (800f758 <tcp_process+0x7dc>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	60fb      	str	r3, [r7, #12]
 800f69e:	e00c      	b.n	800f6ba <tcp_process+0x73e>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d104      	bne.n	800f6b4 <tcp_process+0x738>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	68da      	ldr	r2, [r3, #12]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	60da      	str	r2, [r3, #12]
 800f6b2:	e005      	b.n	800f6c0 <tcp_process+0x744>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	60fb      	str	r3, [r7, #12]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1ef      	bne.n	800f6a0 <tcp_process+0x724>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	60da      	str	r2, [r3, #12]
 800f6c6:	4b1f      	ldr	r3, [pc, #124]	; (800f744 <tcp_process+0x7c8>)
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	220a      	movs	r2, #10
 800f6d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f6d2:	4b1d      	ldr	r3, [pc, #116]	; (800f748 <tcp_process+0x7cc>)
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	60da      	str	r2, [r3, #12]
 800f6da:	4a1b      	ldr	r2, [pc, #108]	; (800f748 <tcp_process+0x7cc>)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	f003 f8b2 	bl	8012848 <tcp_timer_needed>
      }
      break;
 800f6e4:	e026      	b.n	800f734 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 f93c 	bl	800f964 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6ec:	4b17      	ldr	r3, [pc, #92]	; (800f74c <tcp_process+0x7d0>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	f003 0310 	and.w	r3, r3, #16
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d01f      	beq.n	800f738 <tcp_process+0x7bc>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6fc:	4b14      	ldr	r3, [pc, #80]	; (800f750 <tcp_process+0x7d4>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	429a      	cmp	r2, r3
 800f702:	d119      	bne.n	800f738 <tcp_process+0x7bc>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d115      	bne.n	800f738 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f70c:	4b11      	ldr	r3, [pc, #68]	; (800f754 <tcp_process+0x7d8>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f043 0310 	orr.w	r3, r3, #16
 800f714:	b2da      	uxtb	r2, r3
 800f716:	4b0f      	ldr	r3, [pc, #60]	; (800f754 <tcp_process+0x7d8>)
 800f718:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f71a:	e00d      	b.n	800f738 <tcp_process+0x7bc>
    default:
      break;
 800f71c:	bf00      	nop
 800f71e:	e00c      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f720:	bf00      	nop
 800f722:	e00a      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f724:	bf00      	nop
 800f726:	e008      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f728:	bf00      	nop
 800f72a:	e006      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f72c:	bf00      	nop
 800f72e:	e004      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f730:	bf00      	nop
 800f732:	e002      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f734:	bf00      	nop
 800f736:	e000      	b.n	800f73a <tcp_process+0x7be>
      break;
 800f738:	bf00      	nop
  }
  return ERR_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3724      	adds	r7, #36	; 0x24
 800f740:	46bd      	mov	sp, r7
 800f742:	bd90      	pop	{r4, r7, pc}
 800f744:	200074fc 	.word	0x200074fc
 800f748:	20007510 	.word	0x20007510
 800f74c:	200004d8 	.word	0x200004d8
 800f750:	200004d0 	.word	0x200004d0
 800f754:	200004d9 	.word	0x200004d9
 800f758:	20007500 	.word	0x20007500

0800f75c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f75c:	b590      	push	{r4, r7, lr}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d106      	bne.n	800f77a <tcp_oos_insert_segment+0x1e>
 800f76c:	4b3b      	ldr	r3, [pc, #236]	; (800f85c <tcp_oos_insert_segment+0x100>)
 800f76e:	f240 421f 	movw	r2, #1055	; 0x41f
 800f772:	493b      	ldr	r1, [pc, #236]	; (800f860 <tcp_oos_insert_segment+0x104>)
 800f774:	483b      	ldr	r0, [pc, #236]	; (800f864 <tcp_oos_insert_segment+0x108>)
 800f776:	f006 fd9d 	bl	80162b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	899b      	ldrh	r3, [r3, #12]
 800f780:	b29b      	uxth	r3, r3
 800f782:	4618      	mov	r0, r3
 800f784:	f7fb fad0 	bl	800ad28 <lwip_htons>
 800f788:	4603      	mov	r3, r0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	f003 0301 	and.w	r3, r3, #1
 800f790:	2b00      	cmp	r3, #0
 800f792:	d028      	beq.n	800f7e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f794:	6838      	ldr	r0, [r7, #0]
 800f796:	f7fe f981 	bl	800da9c <tcp_segs_free>
    next = NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	603b      	str	r3, [r7, #0]
 800f79e:	e056      	b.n	800f84e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	899b      	ldrh	r3, [r3, #12]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fb fabd 	bl	800ad28 <lwip_htons>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	f003 0301 	and.w	r3, r3, #1
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00d      	beq.n	800f7d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	899b      	ldrh	r3, [r3, #12]
 800f7c0:	b29c      	uxth	r4, r3
 800f7c2:	2001      	movs	r0, #1
 800f7c4:	f7fb fab0 	bl	800ad28 <lwip_htons>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	4322      	orrs	r2, r4
 800f7d2:	b292      	uxth	r2, r2
 800f7d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f7fe f96f 	bl	800dac4 <tcp_seg_free>
    while (next &&
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00e      	beq.n	800f80a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	891b      	ldrh	r3, [r3, #8]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4b1d      	ldr	r3, [pc, #116]	; (800f868 <tcp_oos_insert_segment+0x10c>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	441a      	add	r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	6839      	ldr	r1, [r7, #0]
 800f800:	8909      	ldrh	r1, [r1, #8]
 800f802:	440b      	add	r3, r1
 800f804:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f806:	2b00      	cmp	r3, #0
 800f808:	daca      	bge.n	800f7a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d01e      	beq.n	800f84e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	891b      	ldrh	r3, [r3, #8]
 800f814:	461a      	mov	r2, r3
 800f816:	4b14      	ldr	r3, [pc, #80]	; (800f868 <tcp_oos_insert_segment+0x10c>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	441a      	add	r2, r3
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f824:	2b00      	cmp	r3, #0
 800f826:	dd12      	ble.n	800f84e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	b29a      	uxth	r2, r3
 800f830:	4b0d      	ldr	r3, [pc, #52]	; (800f868 <tcp_oos_insert_segment+0x10c>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	b29b      	uxth	r3, r3
 800f836:	1ad3      	subs	r3, r2, r3
 800f838:	b29a      	uxth	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	891b      	ldrh	r3, [r3, #8]
 800f846:	4619      	mov	r1, r3
 800f848:	4610      	mov	r0, r2
 800f84a:	f7fc fb83 	bl	800bf54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	683a      	ldr	r2, [r7, #0]
 800f852:	601a      	str	r2, [r3, #0]
}
 800f854:	bf00      	nop
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd90      	pop	{r4, r7, pc}
 800f85c:	0801b504 	.word	0x0801b504
 800f860:	0801b7c4 	.word	0x0801b7c4
 800f864:	0801b550 	.word	0x0801b550
 800f868:	200004cc 	.word	0x200004cc

0800f86c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f86c:	b5b0      	push	{r4, r5, r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f87a:	e03e      	b.n	800f8fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fc fd70 	bl	800c370 <pbuf_clen>
 800f890:	4603      	mov	r3, r0
 800f892:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f89a:	8a7a      	ldrh	r2, [r7, #18]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d906      	bls.n	800f8ae <tcp_free_acked_segments+0x42>
 800f8a0:	4b2a      	ldr	r3, [pc, #168]	; (800f94c <tcp_free_acked_segments+0xe0>)
 800f8a2:	f240 4257 	movw	r2, #1111	; 0x457
 800f8a6:	492a      	ldr	r1, [pc, #168]	; (800f950 <tcp_free_acked_segments+0xe4>)
 800f8a8:	482a      	ldr	r0, [pc, #168]	; (800f954 <tcp_free_acked_segments+0xe8>)
 800f8aa:	f006 fd03 	bl	80162b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f8b4:	8a7b      	ldrh	r3, [r7, #18]
 800f8b6:	1ad3      	subs	r3, r2, r3
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	891a      	ldrh	r2, [r3, #8]
 800f8c4:	4b24      	ldr	r3, [pc, #144]	; (800f958 <tcp_free_acked_segments+0xec>)
 800f8c6:	881b      	ldrh	r3, [r3, #0]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	4b22      	ldr	r3, [pc, #136]	; (800f958 <tcp_free_acked_segments+0xec>)
 800f8ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f8d0:	6978      	ldr	r0, [r7, #20]
 800f8d2:	f7fe f8f7 	bl	800dac4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00c      	beq.n	800f8fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d109      	bne.n	800f8fa <tcp_free_acked_segments+0x8e>
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d106      	bne.n	800f8fa <tcp_free_acked_segments+0x8e>
 800f8ec:	4b17      	ldr	r3, [pc, #92]	; (800f94c <tcp_free_acked_segments+0xe0>)
 800f8ee:	f240 4262 	movw	r2, #1122	; 0x462
 800f8f2:	491a      	ldr	r1, [pc, #104]	; (800f95c <tcp_free_acked_segments+0xf0>)
 800f8f4:	4817      	ldr	r0, [pc, #92]	; (800f954 <tcp_free_acked_segments+0xe8>)
 800f8f6:	f006 fcdd 	bl	80162b4 <iprintf>
  while (seg_list != NULL &&
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d020      	beq.n	800f942 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	f7fb fa23 	bl	800ad52 <lwip_htonl>
 800f90c:	4604      	mov	r4, r0
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	891b      	ldrh	r3, [r3, #8]
 800f912:	461d      	mov	r5, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	899b      	ldrh	r3, [r3, #12]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fb fa03 	bl	800ad28 <lwip_htons>
 800f922:	4603      	mov	r3, r0
 800f924:	b2db      	uxtb	r3, r3
 800f926:	f003 0303 	and.w	r3, r3, #3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <tcp_free_acked_segments+0xc6>
 800f92e:	2301      	movs	r3, #1
 800f930:	e000      	b.n	800f934 <tcp_free_acked_segments+0xc8>
 800f932:	2300      	movs	r3, #0
 800f934:	442b      	add	r3, r5
 800f936:	18e2      	adds	r2, r4, r3
 800f938:	4b09      	ldr	r3, [pc, #36]	; (800f960 <tcp_free_acked_segments+0xf4>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f93e:	2b00      	cmp	r3, #0
 800f940:	dd9c      	ble.n	800f87c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f942:	68bb      	ldr	r3, [r7, #8]
}
 800f944:	4618      	mov	r0, r3
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bdb0      	pop	{r4, r5, r7, pc}
 800f94c:	0801b504 	.word	0x0801b504
 800f950:	0801b7ec 	.word	0x0801b7ec
 800f954:	0801b550 	.word	0x0801b550
 800f958:	200004d4 	.word	0x200004d4
 800f95c:	0801b814 	.word	0x0801b814
 800f960:	200004d0 	.word	0x200004d0

0800f964 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f964:	b5b0      	push	{r4, r5, r7, lr}
 800f966:	b094      	sub	sp, #80	; 0x50
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d106      	bne.n	800f984 <tcp_receive+0x20>
 800f976:	4ba6      	ldr	r3, [pc, #664]	; (800fc10 <tcp_receive+0x2ac>)
 800f978:	f240 427b 	movw	r2, #1147	; 0x47b
 800f97c:	49a5      	ldr	r1, [pc, #660]	; (800fc14 <tcp_receive+0x2b0>)
 800f97e:	48a6      	ldr	r0, [pc, #664]	; (800fc18 <tcp_receive+0x2b4>)
 800f980:	f006 fc98 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	7d1b      	ldrb	r3, [r3, #20]
 800f988:	2b03      	cmp	r3, #3
 800f98a:	d806      	bhi.n	800f99a <tcp_receive+0x36>
 800f98c:	4ba0      	ldr	r3, [pc, #640]	; (800fc10 <tcp_receive+0x2ac>)
 800f98e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f992:	49a2      	ldr	r1, [pc, #648]	; (800fc1c <tcp_receive+0x2b8>)
 800f994:	48a0      	ldr	r0, [pc, #640]	; (800fc18 <tcp_receive+0x2b4>)
 800f996:	f006 fc8d 	bl	80162b4 <iprintf>

  if (flags & TCP_ACK) {
 800f99a:	4ba1      	ldr	r3, [pc, #644]	; (800fc20 <tcp_receive+0x2bc>)
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	f003 0310 	and.w	r3, r3, #16
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f000 8263 	beq.w	800fe6e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9b4:	4413      	add	r3, r2
 800f9b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9bc:	4b99      	ldr	r3, [pc, #612]	; (800fc24 <tcp_receive+0x2c0>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	db1b      	blt.n	800f9fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9ca:	4b96      	ldr	r3, [pc, #600]	; (800fc24 <tcp_receive+0x2c0>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d106      	bne.n	800f9e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9d6:	4b94      	ldr	r3, [pc, #592]	; (800fc28 <tcp_receive+0x2c4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	db0e      	blt.n	800f9fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9e4:	4b90      	ldr	r3, [pc, #576]	; (800fc28 <tcp_receive+0x2c4>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d125      	bne.n	800fa38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9ec:	4b8f      	ldr	r3, [pc, #572]	; (800fc2c <tcp_receive+0x2c8>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	89db      	ldrh	r3, [r3, #14]
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d91c      	bls.n	800fa38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f9fe:	4b8b      	ldr	r3, [pc, #556]	; (800fc2c <tcp_receive+0x2c8>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	89db      	ldrh	r3, [r3, #14]
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d205      	bcs.n	800fa28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fa28:	4b7e      	ldr	r3, [pc, #504]	; (800fc24 <tcp_receive+0x2c0>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fa30:	4b7d      	ldr	r3, [pc, #500]	; (800fc28 <tcp_receive+0x2c4>)
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa38:	4b7b      	ldr	r3, [pc, #492]	; (800fc28 <tcp_receive+0x2c4>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	dc58      	bgt.n	800faf8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa46:	4b7a      	ldr	r3, [pc, #488]	; (800fc30 <tcp_receive+0x2cc>)
 800fa48:	881b      	ldrh	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d14b      	bne.n	800fae6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fa58:	4413      	add	r3, r2
 800fa5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d142      	bne.n	800fae6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	db3d      	blt.n	800fae6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa6e:	4b6e      	ldr	r3, [pc, #440]	; (800fc28 <tcp_receive+0x2c4>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d137      	bne.n	800fae6 <tcp_receive+0x182>
              found_dupack = 1;
 800fa76:	2301      	movs	r3, #1
 800fa78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa80:	2bff      	cmp	r3, #255	; 0xff
 800fa82:	d007      	beq.n	800fa94 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	b2da      	uxtb	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	d91b      	bls.n	800fad6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faa8:	4413      	add	r3, r2
 800faaa:	b29a      	uxth	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d30a      	bcc.n	800facc <tcp_receive+0x168>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fac0:	4413      	add	r3, r2
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800faca:	e004      	b.n	800fad6 <tcp_receive+0x172>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d902      	bls.n	800fae6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f002 fb47 	bl	8012174 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f040 8160 	bne.w	800fdae <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800faf6:	e15a      	b.n	800fdae <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800faf8:	4b4b      	ldr	r3, [pc, #300]	; (800fc28 <tcp_receive+0x2c4>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f2c0 814d 	blt.w	800fda4 <tcp_receive+0x440>
 800fb0a:	4b47      	ldr	r3, [pc, #284]	; (800fc28 <tcp_receive+0x2c4>)
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f300 8145 	bgt.w	800fda4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	8b5b      	ldrh	r3, [r3, #26]
 800fb1e:	f003 0304 	and.w	r3, r3, #4
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d010      	beq.n	800fb48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	8b5b      	ldrh	r3, [r3, #26]
 800fb2a:	f023 0304 	bic.w	r3, r3, #4
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb56:	10db      	asrs	r3, r3, #3
 800fb58:	b21b      	sxth	r3, r3
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	4413      	add	r3, r2
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	b21a      	sxth	r2, r3
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fb70:	4b2d      	ldr	r3, [pc, #180]	; (800fc28 <tcp_receive+0x2c4>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	1ad3      	subs	r3, r2, r3
 800fb7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2200      	movs	r2, #0
 800fb84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb88:	4b27      	ldr	r3, [pc, #156]	; (800fc28 <tcp_receive+0x2c4>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	7d1b      	ldrb	r3, [r3, #20]
 800fb94:	2b03      	cmp	r3, #3
 800fb96:	f240 8096 	bls.w	800fcc6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d244      	bcs.n	800fc34 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	8b5b      	ldrh	r3, [r3, #26]
 800fbae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d001      	beq.n	800fbba <tcp_receive+0x256>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	e000      	b.n	800fbbc <tcp_receive+0x258>
 800fbba:	2302      	movs	r3, #2
 800fbbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fbc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbca:	fb12 f303 	smulbb	r3, r2, r3
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	bf28      	it	cs
 800fbd6:	4613      	movcs	r3, r2
 800fbd8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbe0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbe2:	4413      	add	r3, r2
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d309      	bcc.n	800fc04 <tcp_receive+0x2a0>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbf8:	4413      	add	r3, r2
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc02:	e060      	b.n	800fcc6 <tcp_receive+0x362>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc0e:	e05a      	b.n	800fcc6 <tcp_receive+0x362>
 800fc10:	0801b504 	.word	0x0801b504
 800fc14:	0801b834 	.word	0x0801b834
 800fc18:	0801b550 	.word	0x0801b550
 800fc1c:	0801b850 	.word	0x0801b850
 800fc20:	200004d8 	.word	0x200004d8
 800fc24:	200004cc 	.word	0x200004cc
 800fc28:	200004d0 	.word	0x200004d0
 800fc2c:	200004bc 	.word	0x200004bc
 800fc30:	200004d6 	.word	0x200004d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc3c:	4413      	add	r3, r2
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d309      	bcc.n	800fc5e <tcp_receive+0x2fa>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc52:	4413      	add	r3, r2
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc5c:	e004      	b.n	800fc68 <tcp_receive+0x304>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d326      	bcc.n	800fcc6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc98:	4413      	add	r3, r2
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d30a      	bcc.n	800fcbc <tcp_receive+0x358>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcb0:	4413      	add	r3, r2
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fcba:	e004      	b.n	800fcc6 <tcp_receive+0x362>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcce:	4a98      	ldr	r2, [pc, #608]	; (800ff30 <tcp_receive+0x5cc>)
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff fdcb 	bl	800f86c <tcp_free_acked_segments>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce4:	4a93      	ldr	r2, [pc, #588]	; (800ff34 <tcp_receive+0x5d0>)
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff fdc0 	bl	800f86c <tcp_free_acked_segments>
 800fcec:	4602      	mov	r2, r0
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d104      	bne.n	800fd04 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd00:	861a      	strh	r2, [r3, #48]	; 0x30
 800fd02:	e002      	b.n	800fd0a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d103      	bne.n	800fd20 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fd26:	4b84      	ldr	r3, [pc, #528]	; (800ff38 <tcp_receive+0x5d4>)
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	8b5b      	ldrh	r3, [r3, #26]
 800fd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d035      	beq.n	800fdac <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d118      	bne.n	800fd7a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d00c      	beq.n	800fd6a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fa fff8 	bl	800ad52 <lwip_htonl>
 800fd62:	4603      	mov	r3, r0
 800fd64:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dc20      	bgt.n	800fdac <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8b5b      	ldrh	r3, [r3, #26]
 800fd6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd78:	e018      	b.n	800fdac <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fa ffe3 	bl	800ad52 <lwip_htonl>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	1ae3      	subs	r3, r4, r3
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	dc0b      	bgt.n	800fdac <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	8b5b      	ldrh	r3, [r3, #26]
 800fd98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fda2:	e003      	b.n	800fdac <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f002 fbdf 	bl	8012568 <tcp_send_empty_ack>
 800fdaa:	e000      	b.n	800fdae <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fdac:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d05b      	beq.n	800fe6e <tcp_receive+0x50a>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdba:	4b60      	ldr	r3, [pc, #384]	; (800ff3c <tcp_receive+0x5d8>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	1ad3      	subs	r3, r2, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	da54      	bge.n	800fe6e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fdc4:	4b5e      	ldr	r3, [pc, #376]	; (800ff40 <tcp_receive+0x5dc>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fdd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fde2:	10db      	asrs	r3, r3, #3
 800fde4:	b21b      	sxth	r3, r3
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	1ad3      	subs	r3, r2, r3
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdfc:	4413      	add	r3, r2
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	b21a      	sxth	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fe06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	da05      	bge.n	800fe1a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fe0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe12:	425b      	negs	r3, r3
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fe1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe24:	109b      	asrs	r3, r3, #2
 800fe26:	b21b      	sxth	r3, r3
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe3e:	4413      	add	r3, r2
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	b21a      	sxth	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe4e:	10db      	asrs	r3, r3, #3
 800fe50:	b21b      	sxth	r3, r3
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	4413      	add	r3, r2
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	b21a      	sxth	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe6e:	4b35      	ldr	r3, [pc, #212]	; (800ff44 <tcp_receive+0x5e0>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	f000 84e1 	beq.w	801083a <tcp_receive+0xed6>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	7d1b      	ldrb	r3, [r3, #20]
 800fe7c:	2b06      	cmp	r3, #6
 800fe7e:	f200 84dc 	bhi.w	801083a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe86:	4b30      	ldr	r3, [pc, #192]	; (800ff48 <tcp_receive+0x5e4>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f2c0 808e 	blt.w	800ffb0 <tcp_receive+0x64c>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe98:	4b2a      	ldr	r3, [pc, #168]	; (800ff44 <tcp_receive+0x5e0>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4b2a      	ldr	r3, [pc, #168]	; (800ff48 <tcp_receive+0x5e4>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	440b      	add	r3, r1
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	3301      	adds	r3, #1
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f300 8081 	bgt.w	800ffb0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800feae:	4b27      	ldr	r3, [pc, #156]	; (800ff4c <tcp_receive+0x5e8>)
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feb8:	4b23      	ldr	r3, [pc, #140]	; (800ff48 <tcp_receive+0x5e4>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	1ad3      	subs	r3, r2, r3
 800febe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fec0:	4b22      	ldr	r3, [pc, #136]	; (800ff4c <tcp_receive+0x5e8>)
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d106      	bne.n	800fed6 <tcp_receive+0x572>
 800fec8:	4b21      	ldr	r3, [pc, #132]	; (800ff50 <tcp_receive+0x5ec>)
 800feca:	f240 5294 	movw	r2, #1428	; 0x594
 800fece:	4921      	ldr	r1, [pc, #132]	; (800ff54 <tcp_receive+0x5f0>)
 800fed0:	4821      	ldr	r0, [pc, #132]	; (800ff58 <tcp_receive+0x5f4>)
 800fed2:	f006 f9ef 	bl	80162b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fedc:	4293      	cmp	r3, r2
 800fede:	d906      	bls.n	800feee <tcp_receive+0x58a>
 800fee0:	4b1b      	ldr	r3, [pc, #108]	; (800ff50 <tcp_receive+0x5ec>)
 800fee2:	f240 5295 	movw	r2, #1429	; 0x595
 800fee6:	491d      	ldr	r1, [pc, #116]	; (800ff5c <tcp_receive+0x5f8>)
 800fee8:	481b      	ldr	r0, [pc, #108]	; (800ff58 <tcp_receive+0x5f4>)
 800feea:	f006 f9e3 	bl	80162b4 <iprintf>
      off = (u16_t)off32;
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fef4:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <tcp_receive+0x5e8>)
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	891b      	ldrh	r3, [r3, #8]
 800fefa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d906      	bls.n	800ff10 <tcp_receive+0x5ac>
 800ff02:	4b13      	ldr	r3, [pc, #76]	; (800ff50 <tcp_receive+0x5ec>)
 800ff04:	f240 5297 	movw	r2, #1431	; 0x597
 800ff08:	4915      	ldr	r1, [pc, #84]	; (800ff60 <tcp_receive+0x5fc>)
 800ff0a:	4813      	ldr	r0, [pc, #76]	; (800ff58 <tcp_receive+0x5f4>)
 800ff0c:	f006 f9d2 	bl	80162b4 <iprintf>
      inseg.len -= off;
 800ff10:	4b0e      	ldr	r3, [pc, #56]	; (800ff4c <tcp_receive+0x5e8>)
 800ff12:	891a      	ldrh	r2, [r3, #8]
 800ff14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	b29a      	uxth	r2, r3
 800ff1c:	4b0b      	ldr	r3, [pc, #44]	; (800ff4c <tcp_receive+0x5e8>)
 800ff1e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff20:	4b0a      	ldr	r3, [pc, #40]	; (800ff4c <tcp_receive+0x5e8>)
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	891a      	ldrh	r2, [r3, #8]
 800ff26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ff2e:	e029      	b.n	800ff84 <tcp_receive+0x620>
 800ff30:	0801b86c 	.word	0x0801b86c
 800ff34:	0801b874 	.word	0x0801b874
 800ff38:	200004d4 	.word	0x200004d4
 800ff3c:	200004d0 	.word	0x200004d0
 800ff40:	20007504 	.word	0x20007504
 800ff44:	200004d6 	.word	0x200004d6
 800ff48:	200004cc 	.word	0x200004cc
 800ff4c:	200004ac 	.word	0x200004ac
 800ff50:	0801b504 	.word	0x0801b504
 800ff54:	0801b87c 	.word	0x0801b87c
 800ff58:	0801b550 	.word	0x0801b550
 800ff5c:	0801b88c 	.word	0x0801b88c
 800ff60:	0801b89c 	.word	0x0801b89c
        off -= p->len;
 800ff64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff66:	895b      	ldrh	r3, [r3, #10]
 800ff68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ff72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ff78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ff7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff86:	895b      	ldrh	r3, [r3, #10]
 800ff88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d8e9      	bhi.n	800ff64 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ff90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff94:	4619      	mov	r1, r3
 800ff96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff98:	f7fc f8dc 	bl	800c154 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa0:	4a91      	ldr	r2, [pc, #580]	; (80101e8 <tcp_receive+0x884>)
 800ffa2:	6013      	str	r3, [r2, #0]
 800ffa4:	4b91      	ldr	r3, [pc, #580]	; (80101ec <tcp_receive+0x888>)
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	4a8f      	ldr	r2, [pc, #572]	; (80101e8 <tcp_receive+0x884>)
 800ffaa:	6812      	ldr	r2, [r2, #0]
 800ffac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ffae:	e00d      	b.n	800ffcc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ffb0:	4b8d      	ldr	r3, [pc, #564]	; (80101e8 <tcp_receive+0x884>)
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	da06      	bge.n	800ffcc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	8b5b      	ldrh	r3, [r3, #26]
 800ffc2:	f043 0302 	orr.w	r3, r3, #2
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffcc:	4b86      	ldr	r3, [pc, #536]	; (80101e8 <tcp_receive+0x884>)
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd4:	1ad3      	subs	r3, r2, r3
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	f2c0 842a 	blt.w	8010830 <tcp_receive+0xecc>
 800ffdc:	4b82      	ldr	r3, [pc, #520]	; (80101e8 <tcp_receive+0x884>)
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe4:	6879      	ldr	r1, [r7, #4]
 800ffe6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffe8:	440b      	add	r3, r1
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	3301      	adds	r3, #1
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f300 841e 	bgt.w	8010830 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fff8:	4b7b      	ldr	r3, [pc, #492]	; (80101e8 <tcp_receive+0x884>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	f040 829a 	bne.w	8010536 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010002:	4b7a      	ldr	r3, [pc, #488]	; (80101ec <tcp_receive+0x888>)
 8010004:	891c      	ldrh	r4, [r3, #8]
 8010006:	4b79      	ldr	r3, [pc, #484]	; (80101ec <tcp_receive+0x888>)
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	899b      	ldrh	r3, [r3, #12]
 801000c:	b29b      	uxth	r3, r3
 801000e:	4618      	mov	r0, r3
 8010010:	f7fa fe8a 	bl	800ad28 <lwip_htons>
 8010014:	4603      	mov	r3, r0
 8010016:	b2db      	uxtb	r3, r3
 8010018:	f003 0303 	and.w	r3, r3, #3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d001      	beq.n	8010024 <tcp_receive+0x6c0>
 8010020:	2301      	movs	r3, #1
 8010022:	e000      	b.n	8010026 <tcp_receive+0x6c2>
 8010024:	2300      	movs	r3, #0
 8010026:	4423      	add	r3, r4
 8010028:	b29a      	uxth	r2, r3
 801002a:	4b71      	ldr	r3, [pc, #452]	; (80101f0 <tcp_receive+0x88c>)
 801002c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010032:	4b6f      	ldr	r3, [pc, #444]	; (80101f0 <tcp_receive+0x88c>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	429a      	cmp	r2, r3
 8010038:	d275      	bcs.n	8010126 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801003a:	4b6c      	ldr	r3, [pc, #432]	; (80101ec <tcp_receive+0x888>)
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	899b      	ldrh	r3, [r3, #12]
 8010040:	b29b      	uxth	r3, r3
 8010042:	4618      	mov	r0, r3
 8010044:	f7fa fe70 	bl	800ad28 <lwip_htons>
 8010048:	4603      	mov	r3, r0
 801004a:	b2db      	uxtb	r3, r3
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	d01f      	beq.n	8010094 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010054:	4b65      	ldr	r3, [pc, #404]	; (80101ec <tcp_receive+0x888>)
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	b29b      	uxth	r3, r3
 801005c:	b21b      	sxth	r3, r3
 801005e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010062:	b21c      	sxth	r4, r3
 8010064:	4b61      	ldr	r3, [pc, #388]	; (80101ec <tcp_receive+0x888>)
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	899b      	ldrh	r3, [r3, #12]
 801006a:	b29b      	uxth	r3, r3
 801006c:	4618      	mov	r0, r3
 801006e:	f7fa fe5b 	bl	800ad28 <lwip_htons>
 8010072:	4603      	mov	r3, r0
 8010074:	b2db      	uxtb	r3, r3
 8010076:	b29b      	uxth	r3, r3
 8010078:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801007c:	b29b      	uxth	r3, r3
 801007e:	4618      	mov	r0, r3
 8010080:	f7fa fe52 	bl	800ad28 <lwip_htons>
 8010084:	4603      	mov	r3, r0
 8010086:	b21b      	sxth	r3, r3
 8010088:	4323      	orrs	r3, r4
 801008a:	b21a      	sxth	r2, r3
 801008c:	4b57      	ldr	r3, [pc, #348]	; (80101ec <tcp_receive+0x888>)
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	b292      	uxth	r2, r2
 8010092:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010098:	4b54      	ldr	r3, [pc, #336]	; (80101ec <tcp_receive+0x888>)
 801009a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801009c:	4b53      	ldr	r3, [pc, #332]	; (80101ec <tcp_receive+0x888>)
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	899b      	ldrh	r3, [r3, #12]
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fa fe3f 	bl	800ad28 <lwip_htons>
 80100aa:	4603      	mov	r3, r0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	f003 0302 	and.w	r3, r3, #2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d005      	beq.n	80100c2 <tcp_receive+0x75e>
            inseg.len -= 1;
 80100b6:	4b4d      	ldr	r3, [pc, #308]	; (80101ec <tcp_receive+0x888>)
 80100b8:	891b      	ldrh	r3, [r3, #8]
 80100ba:	3b01      	subs	r3, #1
 80100bc:	b29a      	uxth	r2, r3
 80100be:	4b4b      	ldr	r3, [pc, #300]	; (80101ec <tcp_receive+0x888>)
 80100c0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80100c2:	4b4a      	ldr	r3, [pc, #296]	; (80101ec <tcp_receive+0x888>)
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	4b49      	ldr	r3, [pc, #292]	; (80101ec <tcp_receive+0x888>)
 80100c8:	891b      	ldrh	r3, [r3, #8]
 80100ca:	4619      	mov	r1, r3
 80100cc:	4610      	mov	r0, r2
 80100ce:	f7fb ff41 	bl	800bf54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100d2:	4b46      	ldr	r3, [pc, #280]	; (80101ec <tcp_receive+0x888>)
 80100d4:	891c      	ldrh	r4, [r3, #8]
 80100d6:	4b45      	ldr	r3, [pc, #276]	; (80101ec <tcp_receive+0x888>)
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	899b      	ldrh	r3, [r3, #12]
 80100dc:	b29b      	uxth	r3, r3
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fa fe22 	bl	800ad28 <lwip_htons>
 80100e4:	4603      	mov	r3, r0
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	f003 0303 	and.w	r3, r3, #3
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <tcp_receive+0x790>
 80100f0:	2301      	movs	r3, #1
 80100f2:	e000      	b.n	80100f6 <tcp_receive+0x792>
 80100f4:	2300      	movs	r3, #0
 80100f6:	4423      	add	r3, r4
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	4b3d      	ldr	r3, [pc, #244]	; (80101f0 <tcp_receive+0x88c>)
 80100fc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100fe:	4b3c      	ldr	r3, [pc, #240]	; (80101f0 <tcp_receive+0x88c>)
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	461a      	mov	r2, r3
 8010104:	4b38      	ldr	r3, [pc, #224]	; (80101e8 <tcp_receive+0x884>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	441a      	add	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010e:	6879      	ldr	r1, [r7, #4]
 8010110:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010112:	440b      	add	r3, r1
 8010114:	429a      	cmp	r2, r3
 8010116:	d006      	beq.n	8010126 <tcp_receive+0x7c2>
 8010118:	4b36      	ldr	r3, [pc, #216]	; (80101f4 <tcp_receive+0x890>)
 801011a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801011e:	4936      	ldr	r1, [pc, #216]	; (80101f8 <tcp_receive+0x894>)
 8010120:	4836      	ldr	r0, [pc, #216]	; (80101fc <tcp_receive+0x898>)
 8010122:	f006 f8c7 	bl	80162b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801012a:	2b00      	cmp	r3, #0
 801012c:	f000 80e7 	beq.w	80102fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010130:	4b2e      	ldr	r3, [pc, #184]	; (80101ec <tcp_receive+0x888>)
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	899b      	ldrh	r3, [r3, #12]
 8010136:	b29b      	uxth	r3, r3
 8010138:	4618      	mov	r0, r3
 801013a:	f7fa fdf5 	bl	800ad28 <lwip_htons>
 801013e:	4603      	mov	r3, r0
 8010140:	b2db      	uxtb	r3, r3
 8010142:	f003 0301 	and.w	r3, r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	d010      	beq.n	801016c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801014a:	e00a      	b.n	8010162 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010150:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f7fd fcb1 	bl	800dac4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010166:	2b00      	cmp	r3, #0
 8010168:	d1f0      	bne.n	801014c <tcp_receive+0x7e8>
 801016a:	e0c8      	b.n	80102fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010170:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010172:	e052      	b.n	801021a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	899b      	ldrh	r3, [r3, #12]
 801017a:	b29b      	uxth	r3, r3
 801017c:	4618      	mov	r0, r3
 801017e:	f7fa fdd3 	bl	800ad28 <lwip_htons>
 8010182:	4603      	mov	r3, r0
 8010184:	b2db      	uxtb	r3, r3
 8010186:	f003 0301 	and.w	r3, r3, #1
 801018a:	2b00      	cmp	r3, #0
 801018c:	d03d      	beq.n	801020a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801018e:	4b17      	ldr	r3, [pc, #92]	; (80101ec <tcp_receive+0x888>)
 8010190:	68db      	ldr	r3, [r3, #12]
 8010192:	899b      	ldrh	r3, [r3, #12]
 8010194:	b29b      	uxth	r3, r3
 8010196:	4618      	mov	r0, r3
 8010198:	f7fa fdc6 	bl	800ad28 <lwip_htons>
 801019c:	4603      	mov	r3, r0
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d130      	bne.n	801020a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80101a8:	4b10      	ldr	r3, [pc, #64]	; (80101ec <tcp_receive+0x888>)
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	899b      	ldrh	r3, [r3, #12]
 80101ae:	b29c      	uxth	r4, r3
 80101b0:	2001      	movs	r0, #1
 80101b2:	f7fa fdb9 	bl	800ad28 <lwip_htons>
 80101b6:	4603      	mov	r3, r0
 80101b8:	461a      	mov	r2, r3
 80101ba:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <tcp_receive+0x888>)
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	4322      	orrs	r2, r4
 80101c0:	b292      	uxth	r2, r2
 80101c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101c4:	4b09      	ldr	r3, [pc, #36]	; (80101ec <tcp_receive+0x888>)
 80101c6:	891c      	ldrh	r4, [r3, #8]
 80101c8:	4b08      	ldr	r3, [pc, #32]	; (80101ec <tcp_receive+0x888>)
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	899b      	ldrh	r3, [r3, #12]
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fa fda9 	bl	800ad28 <lwip_htons>
 80101d6:	4603      	mov	r3, r0
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	f003 0303 	and.w	r3, r3, #3
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00e      	beq.n	8010200 <tcp_receive+0x89c>
 80101e2:	2301      	movs	r3, #1
 80101e4:	e00d      	b.n	8010202 <tcp_receive+0x89e>
 80101e6:	bf00      	nop
 80101e8:	200004cc 	.word	0x200004cc
 80101ec:	200004ac 	.word	0x200004ac
 80101f0:	200004d6 	.word	0x200004d6
 80101f4:	0801b504 	.word	0x0801b504
 80101f8:	0801b8ac 	.word	0x0801b8ac
 80101fc:	0801b550 	.word	0x0801b550
 8010200:	2300      	movs	r3, #0
 8010202:	4423      	add	r3, r4
 8010204:	b29a      	uxth	r2, r3
 8010206:	4b98      	ldr	r3, [pc, #608]	; (8010468 <tcp_receive+0xb04>)
 8010208:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801020a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801020e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010214:	6938      	ldr	r0, [r7, #16]
 8010216:	f7fd fc55 	bl	800dac4 <tcp_seg_free>
            while (next &&
 801021a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00e      	beq.n	801023e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010220:	4b91      	ldr	r3, [pc, #580]	; (8010468 <tcp_receive+0xb04>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	4b91      	ldr	r3, [pc, #580]	; (801046c <tcp_receive+0xb08>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	441a      	add	r2, r3
 801022c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010234:	8909      	ldrh	r1, [r1, #8]
 8010236:	440b      	add	r3, r1
 8010238:	1ad3      	subs	r3, r2, r3
            while (next &&
 801023a:	2b00      	cmp	r3, #0
 801023c:	da9a      	bge.n	8010174 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801023e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010240:	2b00      	cmp	r3, #0
 8010242:	d059      	beq.n	80102f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010244:	4b88      	ldr	r3, [pc, #544]	; (8010468 <tcp_receive+0xb04>)
 8010246:	881b      	ldrh	r3, [r3, #0]
 8010248:	461a      	mov	r2, r3
 801024a:	4b88      	ldr	r3, [pc, #544]	; (801046c <tcp_receive+0xb08>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	441a      	add	r2, r3
 8010250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010258:	2b00      	cmp	r3, #0
 801025a:	dd4d      	ble.n	80102f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801025c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	b29a      	uxth	r2, r3
 8010264:	4b81      	ldr	r3, [pc, #516]	; (801046c <tcp_receive+0xb08>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	b29b      	uxth	r3, r3
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	b29a      	uxth	r2, r3
 801026e:	4b80      	ldr	r3, [pc, #512]	; (8010470 <tcp_receive+0xb0c>)
 8010270:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010272:	4b7f      	ldr	r3, [pc, #508]	; (8010470 <tcp_receive+0xb0c>)
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	899b      	ldrh	r3, [r3, #12]
 8010278:	b29b      	uxth	r3, r3
 801027a:	4618      	mov	r0, r3
 801027c:	f7fa fd54 	bl	800ad28 <lwip_htons>
 8010280:	4603      	mov	r3, r0
 8010282:	b2db      	uxtb	r3, r3
 8010284:	f003 0302 	and.w	r3, r3, #2
 8010288:	2b00      	cmp	r3, #0
 801028a:	d005      	beq.n	8010298 <tcp_receive+0x934>
                inseg.len -= 1;
 801028c:	4b78      	ldr	r3, [pc, #480]	; (8010470 <tcp_receive+0xb0c>)
 801028e:	891b      	ldrh	r3, [r3, #8]
 8010290:	3b01      	subs	r3, #1
 8010292:	b29a      	uxth	r2, r3
 8010294:	4b76      	ldr	r3, [pc, #472]	; (8010470 <tcp_receive+0xb0c>)
 8010296:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010298:	4b75      	ldr	r3, [pc, #468]	; (8010470 <tcp_receive+0xb0c>)
 801029a:	685a      	ldr	r2, [r3, #4]
 801029c:	4b74      	ldr	r3, [pc, #464]	; (8010470 <tcp_receive+0xb0c>)
 801029e:	891b      	ldrh	r3, [r3, #8]
 80102a0:	4619      	mov	r1, r3
 80102a2:	4610      	mov	r0, r2
 80102a4:	f7fb fe56 	bl	800bf54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80102a8:	4b71      	ldr	r3, [pc, #452]	; (8010470 <tcp_receive+0xb0c>)
 80102aa:	891c      	ldrh	r4, [r3, #8]
 80102ac:	4b70      	ldr	r3, [pc, #448]	; (8010470 <tcp_receive+0xb0c>)
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	899b      	ldrh	r3, [r3, #12]
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fa fd37 	bl	800ad28 <lwip_htons>
 80102ba:	4603      	mov	r3, r0
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	f003 0303 	and.w	r3, r3, #3
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d001      	beq.n	80102ca <tcp_receive+0x966>
 80102c6:	2301      	movs	r3, #1
 80102c8:	e000      	b.n	80102cc <tcp_receive+0x968>
 80102ca:	2300      	movs	r3, #0
 80102cc:	4423      	add	r3, r4
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	4b65      	ldr	r3, [pc, #404]	; (8010468 <tcp_receive+0xb04>)
 80102d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102d4:	4b64      	ldr	r3, [pc, #400]	; (8010468 <tcp_receive+0xb04>)
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	461a      	mov	r2, r3
 80102da:	4b64      	ldr	r3, [pc, #400]	; (801046c <tcp_receive+0xb08>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	441a      	add	r2, r3
 80102e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d006      	beq.n	80102f8 <tcp_receive+0x994>
 80102ea:	4b62      	ldr	r3, [pc, #392]	; (8010474 <tcp_receive+0xb10>)
 80102ec:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80102f0:	4961      	ldr	r1, [pc, #388]	; (8010478 <tcp_receive+0xb14>)
 80102f2:	4862      	ldr	r0, [pc, #392]	; (801047c <tcp_receive+0xb18>)
 80102f4:	f005 ffde 	bl	80162b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80102fe:	4b5a      	ldr	r3, [pc, #360]	; (8010468 <tcp_receive+0xb04>)
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	461a      	mov	r2, r3
 8010304:	4b59      	ldr	r3, [pc, #356]	; (801046c <tcp_receive+0xb08>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	441a      	add	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010312:	4b55      	ldr	r3, [pc, #340]	; (8010468 <tcp_receive+0xb04>)
 8010314:	881b      	ldrh	r3, [r3, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	d206      	bcs.n	8010328 <tcp_receive+0x9c4>
 801031a:	4b56      	ldr	r3, [pc, #344]	; (8010474 <tcp_receive+0xb10>)
 801031c:	f240 6207 	movw	r2, #1543	; 0x607
 8010320:	4957      	ldr	r1, [pc, #348]	; (8010480 <tcp_receive+0xb1c>)
 8010322:	4856      	ldr	r0, [pc, #344]	; (801047c <tcp_receive+0xb18>)
 8010324:	f005 ffc6 	bl	80162b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801032c:	4b4e      	ldr	r3, [pc, #312]	; (8010468 <tcp_receive+0xb04>)
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	b29a      	uxth	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f7fc fea1 	bl	800d080 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801033e:	4b4c      	ldr	r3, [pc, #304]	; (8010470 <tcp_receive+0xb0c>)
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	891b      	ldrh	r3, [r3, #8]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d006      	beq.n	8010356 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010348:	4b49      	ldr	r3, [pc, #292]	; (8010470 <tcp_receive+0xb0c>)
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	4a4d      	ldr	r2, [pc, #308]	; (8010484 <tcp_receive+0xb20>)
 801034e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010350:	4b47      	ldr	r3, [pc, #284]	; (8010470 <tcp_receive+0xb0c>)
 8010352:	2200      	movs	r2, #0
 8010354:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010356:	4b46      	ldr	r3, [pc, #280]	; (8010470 <tcp_receive+0xb0c>)
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	899b      	ldrh	r3, [r3, #12]
 801035c:	b29b      	uxth	r3, r3
 801035e:	4618      	mov	r0, r3
 8010360:	f7fa fce2 	bl	800ad28 <lwip_htons>
 8010364:	4603      	mov	r3, r0
 8010366:	b2db      	uxtb	r3, r3
 8010368:	f003 0301 	and.w	r3, r3, #1
 801036c:	2b00      	cmp	r3, #0
 801036e:	f000 80b8 	beq.w	80104e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010372:	4b45      	ldr	r3, [pc, #276]	; (8010488 <tcp_receive+0xb24>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	f043 0320 	orr.w	r3, r3, #32
 801037a:	b2da      	uxtb	r2, r3
 801037c:	4b42      	ldr	r3, [pc, #264]	; (8010488 <tcp_receive+0xb24>)
 801037e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010380:	e0af      	b.n	80104e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010386:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	4a36      	ldr	r2, [pc, #216]	; (801046c <tcp_receive+0xb08>)
 8010392:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	891b      	ldrh	r3, [r3, #8]
 8010398:	461c      	mov	r4, r3
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	68db      	ldr	r3, [r3, #12]
 801039e:	899b      	ldrh	r3, [r3, #12]
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fa fcc0 	bl	800ad28 <lwip_htons>
 80103a8:	4603      	mov	r3, r0
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	f003 0303 	and.w	r3, r3, #3
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d001      	beq.n	80103b8 <tcp_receive+0xa54>
 80103b4:	2301      	movs	r3, #1
 80103b6:	e000      	b.n	80103ba <tcp_receive+0xa56>
 80103b8:	2300      	movs	r3, #0
 80103ba:	191a      	adds	r2, r3, r4
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c0:	441a      	add	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103ca:	461c      	mov	r4, r3
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	891b      	ldrh	r3, [r3, #8]
 80103d0:	461d      	mov	r5, r3
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	899b      	ldrh	r3, [r3, #12]
 80103d8:	b29b      	uxth	r3, r3
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fa fca4 	bl	800ad28 <lwip_htons>
 80103e0:	4603      	mov	r3, r0
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	f003 0303 	and.w	r3, r3, #3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d001      	beq.n	80103f0 <tcp_receive+0xa8c>
 80103ec:	2301      	movs	r3, #1
 80103ee:	e000      	b.n	80103f2 <tcp_receive+0xa8e>
 80103f0:	2300      	movs	r3, #0
 80103f2:	442b      	add	r3, r5
 80103f4:	429c      	cmp	r4, r3
 80103f6:	d206      	bcs.n	8010406 <tcp_receive+0xaa2>
 80103f8:	4b1e      	ldr	r3, [pc, #120]	; (8010474 <tcp_receive+0xb10>)
 80103fa:	f240 622c 	movw	r2, #1580	; 0x62c
 80103fe:	4923      	ldr	r1, [pc, #140]	; (801048c <tcp_receive+0xb28>)
 8010400:	481e      	ldr	r0, [pc, #120]	; (801047c <tcp_receive+0xb18>)
 8010402:	f005 ff57 	bl	80162b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	891b      	ldrh	r3, [r3, #8]
 801040a:	461c      	mov	r4, r3
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	899b      	ldrh	r3, [r3, #12]
 8010412:	b29b      	uxth	r3, r3
 8010414:	4618      	mov	r0, r3
 8010416:	f7fa fc87 	bl	800ad28 <lwip_htons>
 801041a:	4603      	mov	r3, r0
 801041c:	b2db      	uxtb	r3, r3
 801041e:	f003 0303 	and.w	r3, r3, #3
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <tcp_receive+0xac6>
 8010426:	2301      	movs	r3, #1
 8010428:	e000      	b.n	801042c <tcp_receive+0xac8>
 801042a:	2300      	movs	r3, #0
 801042c:	1919      	adds	r1, r3, r4
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010432:	b28b      	uxth	r3, r1
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	b29a      	uxth	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7fc fe1f 	bl	800d080 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	891b      	ldrh	r3, [r3, #8]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d028      	beq.n	801049e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801044c:	4b0d      	ldr	r3, [pc, #52]	; (8010484 <tcp_receive+0xb20>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d01d      	beq.n	8010490 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010454:	4b0b      	ldr	r3, [pc, #44]	; (8010484 <tcp_receive+0xb20>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	4619      	mov	r1, r3
 801045e:	4610      	mov	r0, r2
 8010460:	f7fb ffc0 	bl	800c3e4 <pbuf_cat>
 8010464:	e018      	b.n	8010498 <tcp_receive+0xb34>
 8010466:	bf00      	nop
 8010468:	200004d6 	.word	0x200004d6
 801046c:	200004cc 	.word	0x200004cc
 8010470:	200004ac 	.word	0x200004ac
 8010474:	0801b504 	.word	0x0801b504
 8010478:	0801b8e4 	.word	0x0801b8e4
 801047c:	0801b550 	.word	0x0801b550
 8010480:	0801b920 	.word	0x0801b920
 8010484:	200004dc 	.word	0x200004dc
 8010488:	200004d9 	.word	0x200004d9
 801048c:	0801b940 	.word	0x0801b940
            } else {
              recv_data = cseg->p;
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	4a70      	ldr	r2, [pc, #448]	; (8010658 <tcp_receive+0xcf4>)
 8010496:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	2200      	movs	r2, #0
 801049c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	899b      	ldrh	r3, [r3, #12]
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fa fc3e 	bl	800ad28 <lwip_htons>
 80104ac:	4603      	mov	r3, r0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	f003 0301 	and.w	r3, r3, #1
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00d      	beq.n	80104d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80104b8:	4b68      	ldr	r3, [pc, #416]	; (801065c <tcp_receive+0xcf8>)
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	f043 0320 	orr.w	r3, r3, #32
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	4b66      	ldr	r3, [pc, #408]	; (801065c <tcp_receive+0xcf8>)
 80104c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	7d1b      	ldrb	r3, [r3, #20]
 80104ca:	2b04      	cmp	r3, #4
 80104cc:	d102      	bne.n	80104d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2207      	movs	r2, #7
 80104d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	681a      	ldr	r2, [r3, #0]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80104dc:	68b8      	ldr	r0, [r7, #8]
 80104de:	f7fd faf1 	bl	800dac4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d008      	beq.n	80104fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	685a      	ldr	r2, [r3, #4]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80104f6:	429a      	cmp	r2, r3
 80104f8:	f43f af43 	beq.w	8010382 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	8b5b      	ldrh	r3, [r3, #26]
 8010500:	f003 0301 	and.w	r3, r3, #1
 8010504:	2b00      	cmp	r3, #0
 8010506:	d00e      	beq.n	8010526 <tcp_receive+0xbc2>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	8b5b      	ldrh	r3, [r3, #26]
 801050c:	f023 0301 	bic.w	r3, r3, #1
 8010510:	b29a      	uxth	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	835a      	strh	r2, [r3, #26]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	8b5b      	ldrh	r3, [r3, #26]
 801051a:	f043 0302 	orr.w	r3, r3, #2
 801051e:	b29a      	uxth	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010524:	e188      	b.n	8010838 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	8b5b      	ldrh	r3, [r3, #26]
 801052a:	f043 0301 	orr.w	r3, r3, #1
 801052e:	b29a      	uxth	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010534:	e180      	b.n	8010838 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801053a:	2b00      	cmp	r3, #0
 801053c:	d106      	bne.n	801054c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801053e:	4848      	ldr	r0, [pc, #288]	; (8010660 <tcp_receive+0xcfc>)
 8010540:	f7fd faf6 	bl	800db30 <tcp_seg_copy>
 8010544:	4602      	mov	r2, r0
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	675a      	str	r2, [r3, #116]	; 0x74
 801054a:	e16d      	b.n	8010828 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801054c:	2300      	movs	r3, #0
 801054e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010554:	63bb      	str	r3, [r7, #56]	; 0x38
 8010556:	e157      	b.n	8010808 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	685a      	ldr	r2, [r3, #4]
 801055e:	4b41      	ldr	r3, [pc, #260]	; (8010664 <tcp_receive+0xd00>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	429a      	cmp	r2, r3
 8010564:	d11d      	bne.n	80105a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010566:	4b3e      	ldr	r3, [pc, #248]	; (8010660 <tcp_receive+0xcfc>)
 8010568:	891a      	ldrh	r2, [r3, #8]
 801056a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056c:	891b      	ldrh	r3, [r3, #8]
 801056e:	429a      	cmp	r2, r3
 8010570:	f240 814f 	bls.w	8010812 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010574:	483a      	ldr	r0, [pc, #232]	; (8010660 <tcp_receive+0xcfc>)
 8010576:	f7fd fadb 	bl	800db30 <tcp_seg_copy>
 801057a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	f000 8149 	beq.w	8010816 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010586:	2b00      	cmp	r3, #0
 8010588:	d003      	beq.n	8010592 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801058a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058c:	697a      	ldr	r2, [r7, #20]
 801058e:	601a      	str	r2, [r3, #0]
 8010590:	e002      	b.n	8010598 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	697a      	ldr	r2, [r7, #20]
 8010596:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801059a:	6978      	ldr	r0, [r7, #20]
 801059c:	f7ff f8de 	bl	800f75c <tcp_oos_insert_segment>
                }
                break;
 80105a0:	e139      	b.n	8010816 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80105a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d117      	bne.n	80105d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80105a8:	4b2e      	ldr	r3, [pc, #184]	; (8010664 <tcp_receive+0xd00>)
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	da57      	bge.n	8010668 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105b8:	4829      	ldr	r0, [pc, #164]	; (8010660 <tcp_receive+0xcfc>)
 80105ba:	f7fd fab9 	bl	800db30 <tcp_seg_copy>
 80105be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f000 8129 	beq.w	801081a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	69ba      	ldr	r2, [r7, #24]
 80105cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80105ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105d0:	69b8      	ldr	r0, [r7, #24]
 80105d2:	f7ff f8c3 	bl	800f75c <tcp_oos_insert_segment>
                  }
                  break;
 80105d6:	e120      	b.n	801081a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80105d8:	4b22      	ldr	r3, [pc, #136]	; (8010664 <tcp_receive+0xd00>)
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	3b01      	subs	r3, #1
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	db3e      	blt.n	8010668 <tcp_receive+0xd04>
 80105ea:	4b1e      	ldr	r3, [pc, #120]	; (8010664 <tcp_receive+0xd00>)
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	1ad3      	subs	r3, r2, r3
 80105f6:	3301      	adds	r3, #1
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	dc35      	bgt.n	8010668 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105fc:	4818      	ldr	r0, [pc, #96]	; (8010660 <tcp_receive+0xcfc>)
 80105fe:	f7fd fa97 	bl	800db30 <tcp_seg_copy>
 8010602:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	2b00      	cmp	r3, #0
 8010608:	f000 8109 	beq.w	801081e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801060c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010614:	8912      	ldrh	r2, [r2, #8]
 8010616:	441a      	add	r2, r3
 8010618:	4b12      	ldr	r3, [pc, #72]	; (8010664 <tcp_receive+0xd00>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	2b00      	cmp	r3, #0
 8010620:	dd12      	ble.n	8010648 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010622:	4b10      	ldr	r3, [pc, #64]	; (8010664 <tcp_receive+0xd00>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	b29a      	uxth	r2, r3
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	68db      	ldr	r3, [r3, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	b29b      	uxth	r3, r3
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	b29a      	uxth	r2, r3
 8010634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010636:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063e:	891b      	ldrh	r3, [r3, #8]
 8010640:	4619      	mov	r1, r3
 8010642:	4610      	mov	r0, r2
 8010644:	f7fb fc86 	bl	800bf54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064a:	69fa      	ldr	r2, [r7, #28]
 801064c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801064e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010650:	69f8      	ldr	r0, [r7, #28]
 8010652:	f7ff f883 	bl	800f75c <tcp_oos_insert_segment>
                  }
                  break;
 8010656:	e0e2      	b.n	801081e <tcp_receive+0xeba>
 8010658:	200004dc 	.word	0x200004dc
 801065c:	200004d9 	.word	0x200004d9
 8010660:	200004ac 	.word	0x200004ac
 8010664:	200004cc 	.word	0x200004cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	f040 80c6 	bne.w	8010802 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010676:	4b80      	ldr	r3, [pc, #512]	; (8010878 <tcp_receive+0xf14>)
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010682:	2b00      	cmp	r3, #0
 8010684:	f340 80bd 	ble.w	8010802 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	899b      	ldrh	r3, [r3, #12]
 801068e:	b29b      	uxth	r3, r3
 8010690:	4618      	mov	r0, r3
 8010692:	f7fa fb49 	bl	800ad28 <lwip_htons>
 8010696:	4603      	mov	r3, r0
 8010698:	b2db      	uxtb	r3, r3
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f040 80bf 	bne.w	8010822 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80106a4:	4875      	ldr	r0, [pc, #468]	; (801087c <tcp_receive+0xf18>)
 80106a6:	f7fd fa43 	bl	800db30 <tcp_seg_copy>
 80106aa:	4602      	mov	r2, r0
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f000 80b6 	beq.w	8010826 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106c2:	8912      	ldrh	r2, [r2, #8]
 80106c4:	441a      	add	r2, r3
 80106c6:	4b6c      	ldr	r3, [pc, #432]	; (8010878 <tcp_receive+0xf14>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	dd12      	ble.n	80106f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106d0:	4b69      	ldr	r3, [pc, #420]	; (8010878 <tcp_receive+0xf14>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	685b      	ldr	r3, [r3, #4]
 80106dc:	b29b      	uxth	r3, r3
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e8:	685a      	ldr	r2, [r3, #4]
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	891b      	ldrh	r3, [r3, #8]
 80106ee:	4619      	mov	r1, r3
 80106f0:	4610      	mov	r0, r2
 80106f2:	f7fb fc2f 	bl	800bf54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80106f6:	4b62      	ldr	r3, [pc, #392]	; (8010880 <tcp_receive+0xf1c>)
 80106f8:	881b      	ldrh	r3, [r3, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	4b5e      	ldr	r3, [pc, #376]	; (8010878 <tcp_receive+0xf14>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	441a      	add	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010706:	6879      	ldr	r1, [r7, #4]
 8010708:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801070a:	440b      	add	r3, r1
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	2b00      	cmp	r3, #0
 8010710:	f340 8089 	ble.w	8010826 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	899b      	ldrh	r3, [r3, #12]
 801071c:	b29b      	uxth	r3, r3
 801071e:	4618      	mov	r0, r3
 8010720:	f7fa fb02 	bl	800ad28 <lwip_htons>
 8010724:	4603      	mov	r3, r0
 8010726:	b2db      	uxtb	r3, r3
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d022      	beq.n	8010776 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	899b      	ldrh	r3, [r3, #12]
 8010738:	b29b      	uxth	r3, r3
 801073a:	b21b      	sxth	r3, r3
 801073c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010740:	b21c      	sxth	r4, r3
 8010742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	899b      	ldrh	r3, [r3, #12]
 801074a:	b29b      	uxth	r3, r3
 801074c:	4618      	mov	r0, r3
 801074e:	f7fa faeb 	bl	800ad28 <lwip_htons>
 8010752:	4603      	mov	r3, r0
 8010754:	b2db      	uxtb	r3, r3
 8010756:	b29b      	uxth	r3, r3
 8010758:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801075c:	b29b      	uxth	r3, r3
 801075e:	4618      	mov	r0, r3
 8010760:	f7fa fae2 	bl	800ad28 <lwip_htons>
 8010764:	4603      	mov	r3, r0
 8010766:	b21b      	sxth	r3, r3
 8010768:	4323      	orrs	r3, r4
 801076a:	b21a      	sxth	r2, r3
 801076c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	b292      	uxth	r2, r2
 8010774:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801077a:	b29a      	uxth	r2, r3
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010780:	4413      	add	r3, r2
 8010782:	b299      	uxth	r1, r3
 8010784:	4b3c      	ldr	r3, [pc, #240]	; (8010878 <tcp_receive+0xf14>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	b29a      	uxth	r2, r3
 801078a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	1a8a      	subs	r2, r1, r2
 8010790:	b292      	uxth	r2, r2
 8010792:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	685a      	ldr	r2, [r3, #4]
 801079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	891b      	ldrh	r3, [r3, #8]
 80107a0:	4619      	mov	r1, r3
 80107a2:	4610      	mov	r0, r2
 80107a4:	f7fb fbd6 	bl	800bf54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80107a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	891c      	ldrh	r4, [r3, #8]
 80107ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	899b      	ldrh	r3, [r3, #12]
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7fa fab5 	bl	800ad28 <lwip_htons>
 80107be:	4603      	mov	r3, r0
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	f003 0303 	and.w	r3, r3, #3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <tcp_receive+0xe6a>
 80107ca:	2301      	movs	r3, #1
 80107cc:	e000      	b.n	80107d0 <tcp_receive+0xe6c>
 80107ce:	2300      	movs	r3, #0
 80107d0:	4423      	add	r3, r4
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	4b2a      	ldr	r3, [pc, #168]	; (8010880 <tcp_receive+0xf1c>)
 80107d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107d8:	4b29      	ldr	r3, [pc, #164]	; (8010880 <tcp_receive+0xf1c>)
 80107da:	881b      	ldrh	r3, [r3, #0]
 80107dc:	461a      	mov	r2, r3
 80107de:	4b26      	ldr	r3, [pc, #152]	; (8010878 <tcp_receive+0xf14>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	441a      	add	r2, r3
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e8:	6879      	ldr	r1, [r7, #4]
 80107ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107ec:	440b      	add	r3, r1
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d019      	beq.n	8010826 <tcp_receive+0xec2>
 80107f2:	4b24      	ldr	r3, [pc, #144]	; (8010884 <tcp_receive+0xf20>)
 80107f4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80107f8:	4923      	ldr	r1, [pc, #140]	; (8010888 <tcp_receive+0xf24>)
 80107fa:	4824      	ldr	r0, [pc, #144]	; (801088c <tcp_receive+0xf28>)
 80107fc:	f005 fd5a 	bl	80162b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010800:	e011      	b.n	8010826 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	63bb      	str	r3, [r7, #56]	; 0x38
 8010808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080a:	2b00      	cmp	r3, #0
 801080c:	f47f aea4 	bne.w	8010558 <tcp_receive+0xbf4>
 8010810:	e00a      	b.n	8010828 <tcp_receive+0xec4>
                break;
 8010812:	bf00      	nop
 8010814:	e008      	b.n	8010828 <tcp_receive+0xec4>
                break;
 8010816:	bf00      	nop
 8010818:	e006      	b.n	8010828 <tcp_receive+0xec4>
                  break;
 801081a:	bf00      	nop
 801081c:	e004      	b.n	8010828 <tcp_receive+0xec4>
                  break;
 801081e:	bf00      	nop
 8010820:	e002      	b.n	8010828 <tcp_receive+0xec4>
                  break;
 8010822:	bf00      	nop
 8010824:	e000      	b.n	8010828 <tcp_receive+0xec4>
                break;
 8010826:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 fe9d 	bl	8012568 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801082e:	e003      	b.n	8010838 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f001 fe99 	bl	8012568 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010836:	e01a      	b.n	801086e <tcp_receive+0xf0a>
 8010838:	e019      	b.n	801086e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801083a:	4b0f      	ldr	r3, [pc, #60]	; (8010878 <tcp_receive+0xf14>)
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	2b00      	cmp	r3, #0
 8010846:	db0a      	blt.n	801085e <tcp_receive+0xefa>
 8010848:	4b0b      	ldr	r3, [pc, #44]	; (8010878 <tcp_receive+0xf14>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010850:	6879      	ldr	r1, [r7, #4]
 8010852:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010854:	440b      	add	r3, r1
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	3301      	adds	r3, #1
 801085a:	2b00      	cmp	r3, #0
 801085c:	dd07      	ble.n	801086e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	8b5b      	ldrh	r3, [r3, #26]
 8010862:	f043 0302 	orr.w	r3, r3, #2
 8010866:	b29a      	uxth	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801086c:	e7ff      	b.n	801086e <tcp_receive+0xf0a>
 801086e:	bf00      	nop
 8010870:	3750      	adds	r7, #80	; 0x50
 8010872:	46bd      	mov	sp, r7
 8010874:	bdb0      	pop	{r4, r5, r7, pc}
 8010876:	bf00      	nop
 8010878:	200004cc 	.word	0x200004cc
 801087c:	200004ac 	.word	0x200004ac
 8010880:	200004d6 	.word	0x200004d6
 8010884:	0801b504 	.word	0x0801b504
 8010888:	0801b8ac 	.word	0x0801b8ac
 801088c:	0801b550 	.word	0x0801b550

08010890 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010896:	4b15      	ldr	r3, [pc, #84]	; (80108ec <tcp_get_next_optbyte+0x5c>)
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	1c5a      	adds	r2, r3, #1
 801089c:	b291      	uxth	r1, r2
 801089e:	4a13      	ldr	r2, [pc, #76]	; (80108ec <tcp_get_next_optbyte+0x5c>)
 80108a0:	8011      	strh	r1, [r2, #0]
 80108a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80108a4:	4b12      	ldr	r3, [pc, #72]	; (80108f0 <tcp_get_next_optbyte+0x60>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d004      	beq.n	80108b6 <tcp_get_next_optbyte+0x26>
 80108ac:	4b11      	ldr	r3, [pc, #68]	; (80108f4 <tcp_get_next_optbyte+0x64>)
 80108ae:	881b      	ldrh	r3, [r3, #0]
 80108b0:	88fa      	ldrh	r2, [r7, #6]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d208      	bcs.n	80108c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80108b6:	4b10      	ldr	r3, [pc, #64]	; (80108f8 <tcp_get_next_optbyte+0x68>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	3314      	adds	r3, #20
 80108bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80108be:	88fb      	ldrh	r3, [r7, #6]
 80108c0:	683a      	ldr	r2, [r7, #0]
 80108c2:	4413      	add	r3, r2
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	e00b      	b.n	80108e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80108c8:	88fb      	ldrh	r3, [r7, #6]
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	4b09      	ldr	r3, [pc, #36]	; (80108f4 <tcp_get_next_optbyte+0x64>)
 80108ce:	881b      	ldrh	r3, [r3, #0]
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80108d6:	4b06      	ldr	r3, [pc, #24]	; (80108f0 <tcp_get_next_optbyte+0x60>)
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	797b      	ldrb	r3, [r7, #5]
 80108dc:	4413      	add	r3, r2
 80108de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	200004c8 	.word	0x200004c8
 80108f0:	200004c4 	.word	0x200004c4
 80108f4:	200004c2 	.word	0x200004c2
 80108f8:	200004bc 	.word	0x200004bc

080108fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d106      	bne.n	8010918 <tcp_parseopt+0x1c>
 801090a:	4b31      	ldr	r3, [pc, #196]	; (80109d0 <tcp_parseopt+0xd4>)
 801090c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010910:	4930      	ldr	r1, [pc, #192]	; (80109d4 <tcp_parseopt+0xd8>)
 8010912:	4831      	ldr	r0, [pc, #196]	; (80109d8 <tcp_parseopt+0xdc>)
 8010914:	f005 fcce 	bl	80162b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010918:	4b30      	ldr	r3, [pc, #192]	; (80109dc <tcp_parseopt+0xe0>)
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d053      	beq.n	80109c8 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010920:	4b2f      	ldr	r3, [pc, #188]	; (80109e0 <tcp_parseopt+0xe4>)
 8010922:	2200      	movs	r2, #0
 8010924:	801a      	strh	r2, [r3, #0]
 8010926:	e043      	b.n	80109b0 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010928:	f7ff ffb2 	bl	8010890 <tcp_get_next_optbyte>
 801092c:	4603      	mov	r3, r0
 801092e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010930:	7bfb      	ldrb	r3, [r7, #15]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d03c      	beq.n	80109b0 <tcp_parseopt+0xb4>
 8010936:	2b02      	cmp	r3, #2
 8010938:	d002      	beq.n	8010940 <tcp_parseopt+0x44>
 801093a:	2b00      	cmp	r3, #0
 801093c:	d03f      	beq.n	80109be <tcp_parseopt+0xc2>
 801093e:	e026      	b.n	801098e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010940:	f7ff ffa6 	bl	8010890 <tcp_get_next_optbyte>
 8010944:	4603      	mov	r3, r0
 8010946:	2b04      	cmp	r3, #4
 8010948:	d13b      	bne.n	80109c2 <tcp_parseopt+0xc6>
 801094a:	4b25      	ldr	r3, [pc, #148]	; (80109e0 <tcp_parseopt+0xe4>)
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	3302      	adds	r3, #2
 8010950:	4a22      	ldr	r2, [pc, #136]	; (80109dc <tcp_parseopt+0xe0>)
 8010952:	8812      	ldrh	r2, [r2, #0]
 8010954:	4293      	cmp	r3, r2
 8010956:	dc34      	bgt.n	80109c2 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010958:	f7ff ff9a 	bl	8010890 <tcp_get_next_optbyte>
 801095c:	4603      	mov	r3, r0
 801095e:	b29b      	uxth	r3, r3
 8010960:	021b      	lsls	r3, r3, #8
 8010962:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010964:	f7ff ff94 	bl	8010890 <tcp_get_next_optbyte>
 8010968:	4603      	mov	r3, r0
 801096a:	b29a      	uxth	r2, r3
 801096c:	89bb      	ldrh	r3, [r7, #12]
 801096e:	4313      	orrs	r3, r2
 8010970:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010972:	89bb      	ldrh	r3, [r7, #12]
 8010974:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010978:	d804      	bhi.n	8010984 <tcp_parseopt+0x88>
 801097a:	89bb      	ldrh	r3, [r7, #12]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d001      	beq.n	8010984 <tcp_parseopt+0x88>
 8010980:	89ba      	ldrh	r2, [r7, #12]
 8010982:	e001      	b.n	8010988 <tcp_parseopt+0x8c>
 8010984:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801098c:	e010      	b.n	80109b0 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801098e:	f7ff ff7f 	bl	8010890 <tcp_get_next_optbyte>
 8010992:	4603      	mov	r3, r0
 8010994:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010996:	7afb      	ldrb	r3, [r7, #11]
 8010998:	2b01      	cmp	r3, #1
 801099a:	d914      	bls.n	80109c6 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801099c:	7afb      	ldrb	r3, [r7, #11]
 801099e:	b29a      	uxth	r2, r3
 80109a0:	4b0f      	ldr	r3, [pc, #60]	; (80109e0 <tcp_parseopt+0xe4>)
 80109a2:	881b      	ldrh	r3, [r3, #0]
 80109a4:	4413      	add	r3, r2
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	3b02      	subs	r3, #2
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <tcp_parseopt+0xe4>)
 80109ae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109b0:	4b0b      	ldr	r3, [pc, #44]	; (80109e0 <tcp_parseopt+0xe4>)
 80109b2:	881a      	ldrh	r2, [r3, #0]
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <tcp_parseopt+0xe0>)
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d3b5      	bcc.n	8010928 <tcp_parseopt+0x2c>
 80109bc:	e004      	b.n	80109c8 <tcp_parseopt+0xcc>
          return;
 80109be:	bf00      	nop
 80109c0:	e002      	b.n	80109c8 <tcp_parseopt+0xcc>
            return;
 80109c2:	bf00      	nop
 80109c4:	e000      	b.n	80109c8 <tcp_parseopt+0xcc>
            return;
 80109c6:	bf00      	nop
      }
    }
  }
}
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	0801b504 	.word	0x0801b504
 80109d4:	0801b968 	.word	0x0801b968
 80109d8:	0801b550 	.word	0x0801b550
 80109dc:	200004c0 	.word	0x200004c0
 80109e0:	200004c8 	.word	0x200004c8

080109e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109e4:	b480      	push	{r7}
 80109e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80109e8:	4b05      	ldr	r3, [pc, #20]	; (8010a00 <tcp_trigger_input_pcb_close+0x1c>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f043 0310 	orr.w	r3, r3, #16
 80109f0:	b2da      	uxtb	r2, r3
 80109f2:	4b03      	ldr	r3, [pc, #12]	; (8010a00 <tcp_trigger_input_pcb_close+0x1c>)
 80109f4:	701a      	strb	r2, [r3, #0]
}
 80109f6:	bf00      	nop
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	200004d9 	.word	0x200004d9

08010a04 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00a      	beq.n	8010a2c <tcp_route+0x28>
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	7a1b      	ldrb	r3, [r3, #8]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d006      	beq.n	8010a2c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	7a1b      	ldrb	r3, [r3, #8]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fb f8c0 	bl	800bba8 <netif_get_by_index>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	e003      	b.n	8010a34 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f003 fae7 	bl	8014000 <ip4_route>
 8010a32:	4603      	mov	r3, r0
  }
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3710      	adds	r7, #16
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010a3c:	b590      	push	{r4, r7, lr}
 8010a3e:	b087      	sub	sp, #28
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	603b      	str	r3, [r7, #0]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d105      	bne.n	8010a5e <tcp_create_segment+0x22>
 8010a52:	4b44      	ldr	r3, [pc, #272]	; (8010b64 <tcp_create_segment+0x128>)
 8010a54:	22a3      	movs	r2, #163	; 0xa3
 8010a56:	4944      	ldr	r1, [pc, #272]	; (8010b68 <tcp_create_segment+0x12c>)
 8010a58:	4844      	ldr	r0, [pc, #272]	; (8010b6c <tcp_create_segment+0x130>)
 8010a5a:	f005 fc2b 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d105      	bne.n	8010a70 <tcp_create_segment+0x34>
 8010a64:	4b3f      	ldr	r3, [pc, #252]	; (8010b64 <tcp_create_segment+0x128>)
 8010a66:	22a4      	movs	r2, #164	; 0xa4
 8010a68:	4941      	ldr	r1, [pc, #260]	; (8010b70 <tcp_create_segment+0x134>)
 8010a6a:	4840      	ldr	r0, [pc, #256]	; (8010b6c <tcp_create_segment+0x130>)
 8010a6c:	f005 fc22 	bl	80162b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a7e:	2003      	movs	r0, #3
 8010a80:	f7fa fda8 	bl	800b5d4 <memp_malloc>
 8010a84:	6138      	str	r0, [r7, #16]
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d104      	bne.n	8010a96 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010a8c:	68b8      	ldr	r0, [r7, #8]
 8010a8e:	f7fb fbe7 	bl	800c260 <pbuf_free>
    return NULL;
 8010a92:	2300      	movs	r3, #0
 8010a94:	e061      	b.n	8010b5a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a9c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	68ba      	ldr	r2, [r7, #8]
 8010aa8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	891a      	ldrh	r2, [r3, #8]
 8010aae:	7dfb      	ldrb	r3, [r7, #23]
 8010ab0:	b29b      	uxth	r3, r3
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d205      	bcs.n	8010ac2 <tcp_create_segment+0x86>
 8010ab6:	4b2b      	ldr	r3, [pc, #172]	; (8010b64 <tcp_create_segment+0x128>)
 8010ab8:	22b0      	movs	r2, #176	; 0xb0
 8010aba:	492e      	ldr	r1, [pc, #184]	; (8010b74 <tcp_create_segment+0x138>)
 8010abc:	482b      	ldr	r0, [pc, #172]	; (8010b6c <tcp_create_segment+0x130>)
 8010abe:	f005 fbf9 	bl	80162b4 <iprintf>
  seg->len = p->tot_len - optlen;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	891a      	ldrh	r2, [r3, #8]
 8010ac6:	7dfb      	ldrb	r3, [r7, #23]
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	1ad3      	subs	r3, r2, r3
 8010acc:	b29a      	uxth	r2, r3
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010ad2:	2114      	movs	r1, #20
 8010ad4:	68b8      	ldr	r0, [r7, #8]
 8010ad6:	f7fb fb2d 	bl	800c134 <pbuf_add_header>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d004      	beq.n	8010aea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ae0:	6938      	ldr	r0, [r7, #16]
 8010ae2:	f7fc ffef 	bl	800dac4 <tcp_seg_free>
    return NULL;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	e037      	b.n	8010b5a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	8ada      	ldrh	r2, [r3, #22]
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	68dc      	ldr	r4, [r3, #12]
 8010afc:	4610      	mov	r0, r2
 8010afe:	f7fa f913 	bl	800ad28 <lwip_htons>
 8010b02:	4603      	mov	r3, r0
 8010b04:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	8b1a      	ldrh	r2, [r3, #24]
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	68dc      	ldr	r4, [r3, #12]
 8010b0e:	4610      	mov	r0, r2
 8010b10:	f7fa f90a 	bl	800ad28 <lwip_htons>
 8010b14:	4603      	mov	r3, r0
 8010b16:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	68dc      	ldr	r4, [r3, #12]
 8010b1c:	6838      	ldr	r0, [r7, #0]
 8010b1e:	f7fa f918 	bl	800ad52 <lwip_htonl>
 8010b22:	4603      	mov	r3, r0
 8010b24:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010b26:	7dfb      	ldrb	r3, [r7, #23]
 8010b28:	089b      	lsrs	r3, r3, #2
 8010b2a:	b2db      	uxtb	r3, r3
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	3305      	adds	r3, #5
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	031b      	lsls	r3, r3, #12
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	79fb      	ldrb	r3, [r7, #7]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	68dc      	ldr	r4, [r3, #12]
 8010b42:	4610      	mov	r0, r2
 8010b44:	f7fa f8f0 	bl	800ad28 <lwip_htons>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	2200      	movs	r2, #0
 8010b52:	749a      	strb	r2, [r3, #18]
 8010b54:	2200      	movs	r2, #0
 8010b56:	74da      	strb	r2, [r3, #19]
  return seg;
 8010b58:	693b      	ldr	r3, [r7, #16]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	371c      	adds	r7, #28
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd90      	pop	{r4, r7, pc}
 8010b62:	bf00      	nop
 8010b64:	0801b984 	.word	0x0801b984
 8010b68:	0801b9b8 	.word	0x0801b9b8
 8010b6c:	0801b9d8 	.word	0x0801b9d8
 8010b70:	0801ba00 	.word	0x0801ba00
 8010b74:	0801ba24 	.word	0x0801ba24

08010b78 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	607b      	str	r3, [r7, #4]
 8010b80:	4603      	mov	r3, r0
 8010b82:	73fb      	strb	r3, [r7, #15]
 8010b84:	460b      	mov	r3, r1
 8010b86:	81bb      	strh	r3, [r7, #12]
 8010b88:	4613      	mov	r3, r2
 8010b8a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010b8c:	89bb      	ldrh	r3, [r7, #12]
 8010b8e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d105      	bne.n	8010ba2 <tcp_pbuf_prealloc+0x2a>
 8010b96:	4b30      	ldr	r3, [pc, #192]	; (8010c58 <tcp_pbuf_prealloc+0xe0>)
 8010b98:	22e8      	movs	r2, #232	; 0xe8
 8010b9a:	4930      	ldr	r1, [pc, #192]	; (8010c5c <tcp_pbuf_prealloc+0xe4>)
 8010b9c:	4830      	ldr	r0, [pc, #192]	; (8010c60 <tcp_pbuf_prealloc+0xe8>)
 8010b9e:	f005 fb89 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010ba2:	6a3b      	ldr	r3, [r7, #32]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d105      	bne.n	8010bb4 <tcp_pbuf_prealloc+0x3c>
 8010ba8:	4b2b      	ldr	r3, [pc, #172]	; (8010c58 <tcp_pbuf_prealloc+0xe0>)
 8010baa:	22e9      	movs	r2, #233	; 0xe9
 8010bac:	492d      	ldr	r1, [pc, #180]	; (8010c64 <tcp_pbuf_prealloc+0xec>)
 8010bae:	482c      	ldr	r0, [pc, #176]	; (8010c60 <tcp_pbuf_prealloc+0xe8>)
 8010bb0:	f005 fb80 	bl	80162b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010bb4:	89ba      	ldrh	r2, [r7, #12]
 8010bb6:	897b      	ldrh	r3, [r7, #10]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d221      	bcs.n	8010c00 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010bc0:	f003 0302 	and.w	r3, r3, #2
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d111      	bne.n	8010bec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	8b5b      	ldrh	r3, [r3, #26]
 8010bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d115      	bne.n	8010c00 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010bd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d007      	beq.n	8010bec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010bdc:	6a3b      	ldr	r3, [r7, #32]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d103      	bne.n	8010bec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010be4:	6a3b      	ldr	r3, [r7, #32]
 8010be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d009      	beq.n	8010c00 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010bec:	89bb      	ldrh	r3, [r7, #12]
 8010bee:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010bf2:	f023 0203 	bic.w	r2, r3, #3
 8010bf6:	897b      	ldrh	r3, [r7, #10]
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	bf28      	it	cs
 8010bfc:	4613      	movcs	r3, r2
 8010bfe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010c00:	8af9      	ldrh	r1, [r7, #22]
 8010c02:	7bfb      	ldrb	r3, [r7, #15]
 8010c04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fb f849 	bl	800bca0 <pbuf_alloc>
 8010c0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d101      	bne.n	8010c1a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	e019      	b.n	8010c4e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d006      	beq.n	8010c30 <tcp_pbuf_prealloc+0xb8>
 8010c22:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <tcp_pbuf_prealloc+0xe0>)
 8010c24:	f240 120b 	movw	r2, #267	; 0x10b
 8010c28:	490f      	ldr	r1, [pc, #60]	; (8010c68 <tcp_pbuf_prealloc+0xf0>)
 8010c2a:	480d      	ldr	r0, [pc, #52]	; (8010c60 <tcp_pbuf_prealloc+0xe8>)
 8010c2c:	f005 fb42 	bl	80162b4 <iprintf>
  *oversize = p->len - length;
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	895a      	ldrh	r2, [r3, #10]
 8010c34:	89bb      	ldrh	r3, [r7, #12]
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	89ba      	ldrh	r2, [r7, #12]
 8010c42:	811a      	strh	r2, [r3, #8]
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	891a      	ldrh	r2, [r3, #8]
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	815a      	strh	r2, [r3, #10]
  return p;
 8010c4c:	693b      	ldr	r3, [r7, #16]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3718      	adds	r7, #24
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	0801b984 	.word	0x0801b984
 8010c5c:	0801ba3c 	.word	0x0801ba3c
 8010c60:	0801b9d8 	.word	0x0801b9d8
 8010c64:	0801ba60 	.word	0x0801ba60
 8010c68:	0801ba80 	.word	0x0801ba80

08010c6c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	460b      	mov	r3, r1
 8010c76:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d106      	bne.n	8010c8c <tcp_write_checks+0x20>
 8010c7e:	4b33      	ldr	r3, [pc, #204]	; (8010d4c <tcp_write_checks+0xe0>)
 8010c80:	f240 1233 	movw	r2, #307	; 0x133
 8010c84:	4932      	ldr	r1, [pc, #200]	; (8010d50 <tcp_write_checks+0xe4>)
 8010c86:	4833      	ldr	r0, [pc, #204]	; (8010d54 <tcp_write_checks+0xe8>)
 8010c88:	f005 fb14 	bl	80162b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	7d1b      	ldrb	r3, [r3, #20]
 8010c90:	2b04      	cmp	r3, #4
 8010c92:	d00e      	beq.n	8010cb2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010c98:	2b07      	cmp	r3, #7
 8010c9a:	d00a      	beq.n	8010cb2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010ca0:	2b02      	cmp	r3, #2
 8010ca2:	d006      	beq.n	8010cb2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010ca8:	2b03      	cmp	r3, #3
 8010caa:	d002      	beq.n	8010cb2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010cac:	f06f 030a 	mvn.w	r3, #10
 8010cb0:	e048      	b.n	8010d44 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010cb2:	887b      	ldrh	r3, [r7, #2]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d101      	bne.n	8010cbc <tcp_write_checks+0x50>
    return ERR_OK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	e043      	b.n	8010d44 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010cc2:	887a      	ldrh	r2, [r7, #2]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d909      	bls.n	8010cdc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	8b5b      	ldrh	r3, [r3, #26]
 8010ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cd0:	b29a      	uxth	r2, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010cda:	e033      	b.n	8010d44 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ce2:	2b08      	cmp	r3, #8
 8010ce4:	d909      	bls.n	8010cfa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	8b5b      	ldrh	r3, [r3, #26]
 8010cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf8:	e024      	b.n	8010d44 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00f      	beq.n	8010d24 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d11a      	bne.n	8010d42 <tcp_write_checks+0xd6>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d116      	bne.n	8010d42 <tcp_write_checks+0xd6>
 8010d14:	4b0d      	ldr	r3, [pc, #52]	; (8010d4c <tcp_write_checks+0xe0>)
 8010d16:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010d1a:	490f      	ldr	r1, [pc, #60]	; (8010d58 <tcp_write_checks+0xec>)
 8010d1c:	480d      	ldr	r0, [pc, #52]	; (8010d54 <tcp_write_checks+0xe8>)
 8010d1e:	f005 fac9 	bl	80162b4 <iprintf>
 8010d22:	e00e      	b.n	8010d42 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d103      	bne.n	8010d34 <tcp_write_checks+0xc8>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d006      	beq.n	8010d42 <tcp_write_checks+0xd6>
 8010d34:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <tcp_write_checks+0xe0>)
 8010d36:	f240 1259 	movw	r2, #345	; 0x159
 8010d3a:	4908      	ldr	r1, [pc, #32]	; (8010d5c <tcp_write_checks+0xf0>)
 8010d3c:	4805      	ldr	r0, [pc, #20]	; (8010d54 <tcp_write_checks+0xe8>)
 8010d3e:	f005 fab9 	bl	80162b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010d42:	2300      	movs	r3, #0
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	0801b984 	.word	0x0801b984
 8010d50:	0801ba94 	.word	0x0801ba94
 8010d54:	0801b9d8 	.word	0x0801b9d8
 8010d58:	0801bab4 	.word	0x0801bab4
 8010d5c:	0801baf0 	.word	0x0801baf0

08010d60 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010d60:	b590      	push	{r4, r7, lr}
 8010d62:	b09b      	sub	sp, #108	; 0x6c
 8010d64:	af04      	add	r7, sp, #16
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	4611      	mov	r1, r2
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	460b      	mov	r3, r1
 8010d70:	80fb      	strh	r3, [r7, #6]
 8010d72:	4613      	mov	r3, r2
 8010d74:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010d76:	2300      	movs	r3, #0
 8010d78:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	653b      	str	r3, [r7, #80]	; 0x50
 8010d7e:	2300      	movs	r3, #0
 8010d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d82:	2300      	movs	r3, #0
 8010d84:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d86:	2300      	movs	r3, #0
 8010d88:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010d90:	2300      	movs	r3, #0
 8010d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d109      	bne.n	8010dbc <tcp_write+0x5c>
 8010da8:	4ba5      	ldr	r3, [pc, #660]	; (8011040 <tcp_write+0x2e0>)
 8010daa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010dae:	49a5      	ldr	r1, [pc, #660]	; (8011044 <tcp_write+0x2e4>)
 8010db0:	48a5      	ldr	r0, [pc, #660]	; (8011048 <tcp_write+0x2e8>)
 8010db2:	f005 fa7f 	bl	80162b4 <iprintf>
 8010db6:	f06f 030f 	mvn.w	r3, #15
 8010dba:	e32c      	b.n	8011416 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010dc2:	085b      	lsrs	r3, r3, #1
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	bf28      	it	cs
 8010dce:	4613      	movcs	r3, r2
 8010dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d102      	bne.n	8010dde <tcp_write+0x7e>
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ddc:	e000      	b.n	8010de0 <tcp_write+0x80>
 8010dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010de0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d109      	bne.n	8010dfc <tcp_write+0x9c>
 8010de8:	4b95      	ldr	r3, [pc, #596]	; (8011040 <tcp_write+0x2e0>)
 8010dea:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8010dee:	4997      	ldr	r1, [pc, #604]	; (801104c <tcp_write+0x2ec>)
 8010df0:	4895      	ldr	r0, [pc, #596]	; (8011048 <tcp_write+0x2e8>)
 8010df2:	f005 fa5f 	bl	80162b4 <iprintf>
 8010df6:	f06f 030f 	mvn.w	r3, #15
 8010dfa:	e30c      	b.n	8011416 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010dfc:	88fb      	ldrh	r3, [r7, #6]
 8010dfe:	4619      	mov	r1, r3
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f7ff ff33 	bl	8010c6c <tcp_write_checks>
 8010e06:	4603      	mov	r3, r0
 8010e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010e0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d002      	beq.n	8010e1a <tcp_write+0xba>
    return err;
 8010e14:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e18:	e2fd      	b.n	8011416 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e24:	2300      	movs	r3, #0
 8010e26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f000 80f7 	beq.w	8011022 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e38:	653b      	str	r3, [r7, #80]	; 0x50
 8010e3a:	e002      	b.n	8010e42 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1f8      	bne.n	8010e3c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e4c:	7a9b      	ldrb	r3, [r3, #10]
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	f003 0304 	and.w	r3, r3, #4
 8010e56:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010e58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e5c:	891b      	ldrh	r3, [r3, #8]
 8010e5e:	4619      	mov	r1, r3
 8010e60:	8c3b      	ldrh	r3, [r7, #32]
 8010e62:	440b      	add	r3, r1
 8010e64:	429a      	cmp	r2, r3
 8010e66:	da06      	bge.n	8010e76 <tcp_write+0x116>
 8010e68:	4b75      	ldr	r3, [pc, #468]	; (8011040 <tcp_write+0x2e0>)
 8010e6a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e6e:	4978      	ldr	r1, [pc, #480]	; (8011050 <tcp_write+0x2f0>)
 8010e70:	4875      	ldr	r0, [pc, #468]	; (8011048 <tcp_write+0x2e8>)
 8010e72:	f005 fa1f 	bl	80162b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e78:	891a      	ldrh	r2, [r3, #8]
 8010e7a:	8c3b      	ldrh	r3, [r7, #32]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e8c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010e8e:	8a7b      	ldrh	r3, [r7, #18]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d027      	beq.n	8010ee4 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010e94:	8a7b      	ldrh	r3, [r7, #18]
 8010e96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d206      	bcs.n	8010eaa <tcp_write+0x14a>
 8010e9c:	4b68      	ldr	r3, [pc, #416]	; (8011040 <tcp_write+0x2e0>)
 8010e9e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010ea2:	496c      	ldr	r1, [pc, #432]	; (8011054 <tcp_write+0x2f4>)
 8010ea4:	4868      	ldr	r0, [pc, #416]	; (8011048 <tcp_write+0x2e8>)
 8010ea6:	f005 fa05 	bl	80162b4 <iprintf>
      seg = last_unsent;
 8010eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eac:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010eae:	8a7b      	ldrh	r3, [r7, #18]
 8010eb0:	88fa      	ldrh	r2, [r7, #6]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d901      	bls.n	8010eba <tcp_write+0x15a>
 8010eb6:	8a7b      	ldrh	r3, [r7, #18]
 8010eb8:	e000      	b.n	8010ebc <tcp_write+0x15c>
 8010eba:	88fb      	ldrh	r3, [r7, #6]
 8010ebc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	bfa8      	it	ge
 8010ec2:	4613      	movge	r3, r2
 8010ec4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010ec6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ecc:	4413      	add	r3, r2
 8010ece:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010ed2:	8a7a      	ldrh	r2, [r7, #18]
 8010ed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010edc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ede:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010ee4:	8a7b      	ldrh	r3, [r7, #18]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00b      	beq.n	8010f02 <tcp_write+0x1a2>
 8010eea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eee:	88fb      	ldrh	r3, [r7, #6]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d006      	beq.n	8010f02 <tcp_write+0x1a2>
 8010ef4:	4b52      	ldr	r3, [pc, #328]	; (8011040 <tcp_write+0x2e0>)
 8010ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010efa:	4957      	ldr	r1, [pc, #348]	; (8011058 <tcp_write+0x2f8>)
 8010efc:	4852      	ldr	r0, [pc, #328]	; (8011048 <tcp_write+0x2e8>)
 8010efe:	f005 f9d9 	bl	80162b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010f02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f06:	88fb      	ldrh	r3, [r7, #6]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	f080 8168 	bcs.w	80111de <tcp_write+0x47e>
 8010f0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f000 8164 	beq.w	80111de <tcp_write+0x47e>
 8010f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f18:	891b      	ldrh	r3, [r3, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f000 815f 	beq.w	80111de <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010f20:	88fa      	ldrh	r2, [r7, #6]
 8010f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f26:	1ad2      	subs	r2, r2, r3
 8010f28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	bfa8      	it	ge
 8010f2e:	4613      	movge	r3, r2
 8010f30:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f34:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f36:	797b      	ldrb	r3, [r7, #5]
 8010f38:	f003 0301 	and.w	r3, r3, #1
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d027      	beq.n	8010f90 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010f40:	f107 0012 	add.w	r0, r7, #18
 8010f44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f46:	8bf9      	ldrh	r1, [r7, #30]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	9302      	str	r3, [sp, #8]
 8010f4c:	797b      	ldrb	r3, [r7, #5]
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	4603      	mov	r3, r0
 8010f56:	2000      	movs	r0, #0
 8010f58:	f7ff fe0e 	bl	8010b78 <tcp_pbuf_prealloc>
 8010f5c:	6578      	str	r0, [r7, #84]	; 0x54
 8010f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	f000 8226 	beq.w	80113b2 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f68:	6858      	ldr	r0, [r3, #4]
 8010f6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	4413      	add	r3, r2
 8010f72:	8bfa      	ldrh	r2, [r7, #30]
 8010f74:	4619      	mov	r1, r3
 8010f76:	f004 fa8a 	bl	801548e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010f7a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f7c:	f7fb f9f8 	bl	800c370 <pbuf_clen>
 8010f80:	4603      	mov	r3, r0
 8010f82:	461a      	mov	r2, r3
 8010f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f88:	4413      	add	r3, r2
 8010f8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010f8e:	e041      	b.n	8011014 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	637b      	str	r3, [r7, #52]	; 0x34
 8010f96:	e002      	b.n	8010f9e <tcp_write+0x23e>
 8010f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8010f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1f8      	bne.n	8010f98 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa8:	7b1b      	ldrb	r3, [r3, #12]
 8010faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d115      	bne.n	8010fde <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fb8:	8952      	ldrh	r2, [r2, #10]
 8010fba:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d10d      	bne.n	8010fde <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010fc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d006      	beq.n	8010fd8 <tcp_write+0x278>
 8010fca:	4b1d      	ldr	r3, [pc, #116]	; (8011040 <tcp_write+0x2e0>)
 8010fcc:	f240 2231 	movw	r2, #561	; 0x231
 8010fd0:	4922      	ldr	r1, [pc, #136]	; (801105c <tcp_write+0x2fc>)
 8010fd2:	481d      	ldr	r0, [pc, #116]	; (8011048 <tcp_write+0x2e8>)
 8010fd4:	f005 f96e 	bl	80162b4 <iprintf>
          extendlen = seglen;
 8010fd8:	8bfb      	ldrh	r3, [r7, #30]
 8010fda:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010fdc:	e01a      	b.n	8011014 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010fde:	8bfb      	ldrh	r3, [r7, #30]
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	f7fa fe5b 	bl	800bca0 <pbuf_alloc>
 8010fea:	6578      	str	r0, [r7, #84]	; 0x54
 8010fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f000 81e1 	beq.w	80113b6 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010ff4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ff8:	68ba      	ldr	r2, [r7, #8]
 8010ffa:	441a      	add	r2, r3
 8010ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ffe:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011000:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011002:	f7fb f9b5 	bl	800c370 <pbuf_clen>
 8011006:	4603      	mov	r3, r0
 8011008:	461a      	mov	r2, r3
 801100a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801100e:	4413      	add	r3, r2
 8011010:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011018:	8bfb      	ldrh	r3, [r7, #30]
 801101a:	4413      	add	r3, r2
 801101c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011020:	e0dd      	b.n	80111de <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011028:	2b00      	cmp	r3, #0
 801102a:	f000 80d8 	beq.w	80111de <tcp_write+0x47e>
 801102e:	4b04      	ldr	r3, [pc, #16]	; (8011040 <tcp_write+0x2e0>)
 8011030:	f240 224b 	movw	r2, #587	; 0x24b
 8011034:	490a      	ldr	r1, [pc, #40]	; (8011060 <tcp_write+0x300>)
 8011036:	4804      	ldr	r0, [pc, #16]	; (8011048 <tcp_write+0x2e8>)
 8011038:	f005 f93c 	bl	80162b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801103c:	e0cf      	b.n	80111de <tcp_write+0x47e>
 801103e:	bf00      	nop
 8011040:	0801b984 	.word	0x0801b984
 8011044:	0801bb24 	.word	0x0801bb24
 8011048:	0801b9d8 	.word	0x0801b9d8
 801104c:	0801bb3c 	.word	0x0801bb3c
 8011050:	0801bb70 	.word	0x0801bb70
 8011054:	0801bb88 	.word	0x0801bb88
 8011058:	0801bba8 	.word	0x0801bba8
 801105c:	0801bbc8 	.word	0x0801bbc8
 8011060:	0801bbf4 	.word	0x0801bbf4
    struct pbuf *p;
    u16_t left = len - pos;
 8011064:	88fa      	ldrh	r2, [r7, #6]
 8011066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801106e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011072:	b29b      	uxth	r3, r3
 8011074:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801107a:	8b7a      	ldrh	r2, [r7, #26]
 801107c:	8bbb      	ldrh	r3, [r7, #28]
 801107e:	4293      	cmp	r3, r2
 8011080:	bf28      	it	cs
 8011082:	4613      	movcs	r3, r2
 8011084:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011086:	797b      	ldrb	r3, [r7, #5]
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	2b00      	cmp	r3, #0
 801108e:	d036      	beq.n	80110fe <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011090:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011094:	b29a      	uxth	r2, r3
 8011096:	8b3b      	ldrh	r3, [r7, #24]
 8011098:	4413      	add	r3, r2
 801109a:	b299      	uxth	r1, r3
 801109c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109e:	2b00      	cmp	r3, #0
 80110a0:	bf0c      	ite	eq
 80110a2:	2301      	moveq	r3, #1
 80110a4:	2300      	movne	r3, #0
 80110a6:	b2db      	uxtb	r3, r3
 80110a8:	f107 0012 	add.w	r0, r7, #18
 80110ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110ae:	9302      	str	r3, [sp, #8]
 80110b0:	797b      	ldrb	r3, [r7, #5]
 80110b2:	9301      	str	r3, [sp, #4]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	4603      	mov	r3, r0
 80110ba:	2036      	movs	r0, #54	; 0x36
 80110bc:	f7ff fd5c 	bl	8010b78 <tcp_pbuf_prealloc>
 80110c0:	6338      	str	r0, [r7, #48]	; 0x30
 80110c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f000 8178 	beq.w	80113ba <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80110ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110cc:	895b      	ldrh	r3, [r3, #10]
 80110ce:	8b3a      	ldrh	r2, [r7, #24]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d906      	bls.n	80110e2 <tcp_write+0x382>
 80110d4:	4b8c      	ldr	r3, [pc, #560]	; (8011308 <tcp_write+0x5a8>)
 80110d6:	f240 2267 	movw	r2, #615	; 0x267
 80110da:	498c      	ldr	r1, [pc, #560]	; (801130c <tcp_write+0x5ac>)
 80110dc:	488c      	ldr	r0, [pc, #560]	; (8011310 <tcp_write+0x5b0>)
 80110de:	f005 f8e9 	bl	80162b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80110e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e4:	685a      	ldr	r2, [r3, #4]
 80110e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110ea:	18d0      	adds	r0, r2, r3
 80110ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110f0:	68ba      	ldr	r2, [r7, #8]
 80110f2:	4413      	add	r3, r2
 80110f4:	8b3a      	ldrh	r2, [r7, #24]
 80110f6:	4619      	mov	r1, r3
 80110f8:	f004 f9c9 	bl	801548e <memcpy>
 80110fc:	e02f      	b.n	801115e <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80110fe:	8a7b      	ldrh	r3, [r7, #18]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d006      	beq.n	8011112 <tcp_write+0x3b2>
 8011104:	4b80      	ldr	r3, [pc, #512]	; (8011308 <tcp_write+0x5a8>)
 8011106:	f240 2271 	movw	r2, #625	; 0x271
 801110a:	4982      	ldr	r1, [pc, #520]	; (8011314 <tcp_write+0x5b4>)
 801110c:	4880      	ldr	r0, [pc, #512]	; (8011310 <tcp_write+0x5b0>)
 801110e:	f005 f8d1 	bl	80162b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011112:	8b3b      	ldrh	r3, [r7, #24]
 8011114:	2201      	movs	r2, #1
 8011116:	4619      	mov	r1, r3
 8011118:	2036      	movs	r0, #54	; 0x36
 801111a:	f7fa fdc1 	bl	800bca0 <pbuf_alloc>
 801111e:	6178      	str	r0, [r7, #20]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 814b 	beq.w	80113be <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801112c:	68ba      	ldr	r2, [r7, #8]
 801112e:	441a      	add	r2, r3
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011134:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011138:	b29b      	uxth	r3, r3
 801113a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801113e:	4619      	mov	r1, r3
 8011140:	2036      	movs	r0, #54	; 0x36
 8011142:	f7fa fdad 	bl	800bca0 <pbuf_alloc>
 8011146:	6338      	str	r0, [r7, #48]	; 0x30
 8011148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114a:	2b00      	cmp	r3, #0
 801114c:	d103      	bne.n	8011156 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801114e:	6978      	ldr	r0, [r7, #20]
 8011150:	f7fb f886 	bl	800c260 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011154:	e136      	b.n	80113c4 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011156:	6979      	ldr	r1, [r7, #20]
 8011158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801115a:	f7fb f943 	bl	800c3e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801115e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011160:	f7fb f906 	bl	800c370 <pbuf_clen>
 8011164:	4603      	mov	r3, r0
 8011166:	461a      	mov	r2, r3
 8011168:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801116c:	4413      	add	r3, r2
 801116e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011172:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011176:	2b09      	cmp	r3, #9
 8011178:	d903      	bls.n	8011182 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801117a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801117c:	f7fb f870 	bl	800c260 <pbuf_free>
      goto memerr;
 8011180:	e120      	b.n	80113c4 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801118a:	441a      	add	r2, r3
 801118c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011190:	9300      	str	r3, [sp, #0]
 8011192:	4613      	mov	r3, r2
 8011194:	2200      	movs	r2, #0
 8011196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7ff fc4f 	bl	8010a3c <tcp_create_segment>
 801119e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80111a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 810d 	beq.w	80113c2 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80111a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d102      	bne.n	80111b4 <tcp_write+0x454>
      queue = seg;
 80111ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b0:	647b      	str	r3, [r7, #68]	; 0x44
 80111b2:	e00c      	b.n	80111ce <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80111b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d106      	bne.n	80111c8 <tcp_write+0x468>
 80111ba:	4b53      	ldr	r3, [pc, #332]	; (8011308 <tcp_write+0x5a8>)
 80111bc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111c0:	4955      	ldr	r1, [pc, #340]	; (8011318 <tcp_write+0x5b8>)
 80111c2:	4853      	ldr	r0, [pc, #332]	; (8011310 <tcp_write+0x5b0>)
 80111c4:	f005 f876 	bl	80162b4 <iprintf>
      prev_seg->next = seg;
 80111c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111cc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80111ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111d0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80111d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111d6:	8b3b      	ldrh	r3, [r7, #24]
 80111d8:	4413      	add	r3, r2
 80111da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80111de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111e2:	88fb      	ldrh	r3, [r7, #6]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	f4ff af3d 	bcc.w	8011064 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80111ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d02c      	beq.n	801124a <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80111f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111f6:	e01e      	b.n	8011236 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	891a      	ldrh	r2, [r3, #8]
 80111fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111fe:	4413      	add	r3, r2
 8011200:	b29a      	uxth	r2, r3
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d110      	bne.n	8011230 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011214:	8952      	ldrh	r2, [r2, #10]
 8011216:	4413      	add	r3, r2
 8011218:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801121a:	68b9      	ldr	r1, [r7, #8]
 801121c:	4618      	mov	r0, r3
 801121e:	f004 f936 	bl	801548e <memcpy>
        p->len += oversize_used;
 8011222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011224:	895a      	ldrh	r2, [r3, #10]
 8011226:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011228:	4413      	add	r3, r2
 801122a:	b29a      	uxth	r2, r3
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1dd      	bne.n	80111f8 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801123c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801123e:	891a      	ldrh	r2, [r3, #8]
 8011240:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011242:	4413      	add	r3, r2
 8011244:	b29a      	uxth	r2, r3
 8011246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011248:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801124a:	8a7a      	ldrh	r2, [r7, #18]
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011254:	2b00      	cmp	r3, #0
 8011256:	d018      	beq.n	801128a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	2b00      	cmp	r3, #0
 801125c:	d106      	bne.n	801126c <tcp_write+0x50c>
 801125e:	4b2a      	ldr	r3, [pc, #168]	; (8011308 <tcp_write+0x5a8>)
 8011260:	f240 22e1 	movw	r2, #737	; 0x2e1
 8011264:	492d      	ldr	r1, [pc, #180]	; (801131c <tcp_write+0x5bc>)
 8011266:	482a      	ldr	r0, [pc, #168]	; (8011310 <tcp_write+0x5b0>)
 8011268:	f005 f824 	bl	80162b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801126c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011272:	4618      	mov	r0, r3
 8011274:	f7fb f8b6 	bl	800c3e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801127a:	891a      	ldrh	r2, [r3, #8]
 801127c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	4413      	add	r3, r2
 8011282:	b29a      	uxth	r2, r3
 8011284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011286:	811a      	strh	r2, [r3, #8]
 8011288:	e037      	b.n	80112fa <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801128a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d034      	beq.n	80112fa <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011292:	2b00      	cmp	r3, #0
 8011294:	d003      	beq.n	801129e <tcp_write+0x53e>
 8011296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d106      	bne.n	80112ac <tcp_write+0x54c>
 801129e:	4b1a      	ldr	r3, [pc, #104]	; (8011308 <tcp_write+0x5a8>)
 80112a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80112a4:	491e      	ldr	r1, [pc, #120]	; (8011320 <tcp_write+0x5c0>)
 80112a6:	481a      	ldr	r0, [pc, #104]	; (8011310 <tcp_write+0x5b0>)
 80112a8:	f005 f804 	bl	80162b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80112ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80112b2:	e009      	b.n	80112c8 <tcp_write+0x568>
      p->tot_len += extendlen;
 80112b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b6:	891a      	ldrh	r2, [r3, #8]
 80112b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112ba:	4413      	add	r3, r2
 80112bc:	b29a      	uxth	r2, r3
 80112be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80112c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80112c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d1f1      	bne.n	80112b4 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 80112d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d2:	891a      	ldrh	r2, [r3, #8]
 80112d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112d6:	4413      	add	r3, r2
 80112d8:	b29a      	uxth	r2, r3
 80112da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80112de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e0:	895a      	ldrh	r2, [r3, #10]
 80112e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112e4:	4413      	add	r3, r2
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80112ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ee:	891a      	ldrh	r2, [r3, #8]
 80112f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112f2:	4413      	add	r3, r2
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80112fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d111      	bne.n	8011324 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011304:	66da      	str	r2, [r3, #108]	; 0x6c
 8011306:	e010      	b.n	801132a <tcp_write+0x5ca>
 8011308:	0801b984 	.word	0x0801b984
 801130c:	0801bc24 	.word	0x0801bc24
 8011310:	0801b9d8 	.word	0x0801b9d8
 8011314:	0801bc64 	.word	0x0801bc64
 8011318:	0801bc74 	.word	0x0801bc74
 801131c:	0801bc88 	.word	0x0801bc88
 8011320:	0801bcc0 	.word	0x0801bcc0
  } else {
    last_unsent->next = queue;
 8011324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011328:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801132e:	88fb      	ldrh	r3, [r7, #6]
 8011330:	441a      	add	r2, r3
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801133c:	88fb      	ldrh	r3, [r7, #6]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	b29a      	uxth	r2, r3
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801134e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00e      	beq.n	801137a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011360:	2b00      	cmp	r3, #0
 8011362:	d10a      	bne.n	801137a <tcp_write+0x61a>
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d106      	bne.n	801137a <tcp_write+0x61a>
 801136c:	4b2c      	ldr	r3, [pc, #176]	; (8011420 <tcp_write+0x6c0>)
 801136e:	f240 3213 	movw	r2, #787	; 0x313
 8011372:	492c      	ldr	r1, [pc, #176]	; (8011424 <tcp_write+0x6c4>)
 8011374:	482c      	ldr	r0, [pc, #176]	; (8011428 <tcp_write+0x6c8>)
 8011376:	f004 ff9d 	bl	80162b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137c:	2b00      	cmp	r3, #0
 801137e:	d016      	beq.n	80113ae <tcp_write+0x64e>
 8011380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d012      	beq.n	80113ae <tcp_write+0x64e>
 8011388:	797b      	ldrb	r3, [r7, #5]
 801138a:	f003 0302 	and.w	r3, r3, #2
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10d      	bne.n	80113ae <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	899b      	ldrh	r3, [r3, #12]
 8011398:	b29c      	uxth	r4, r3
 801139a:	2008      	movs	r0, #8
 801139c:	f7f9 fcc4 	bl	800ad28 <lwip_htons>
 80113a0:	4603      	mov	r3, r0
 80113a2:	461a      	mov	r2, r3
 80113a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	4322      	orrs	r2, r4
 80113aa:	b292      	uxth	r2, r2
 80113ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	e031      	b.n	8011416 <tcp_write+0x6b6>
          goto memerr;
 80113b2:	bf00      	nop
 80113b4:	e006      	b.n	80113c4 <tcp_write+0x664>
            goto memerr;
 80113b6:	bf00      	nop
 80113b8:	e004      	b.n	80113c4 <tcp_write+0x664>
        goto memerr;
 80113ba:	bf00      	nop
 80113bc:	e002      	b.n	80113c4 <tcp_write+0x664>
        goto memerr;
 80113be:	bf00      	nop
 80113c0:	e000      	b.n	80113c4 <tcp_write+0x664>
      goto memerr;
 80113c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	8b5b      	ldrh	r3, [r3, #26]
 80113c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80113d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <tcp_write+0x67e>
    pbuf_free(concat_p);
 80113d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113da:	f7fa ff41 	bl	800c260 <pbuf_free>
  }
  if (queue != NULL) {
 80113de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <tcp_write+0x68a>
    tcp_segs_free(queue);
 80113e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113e6:	f7fc fb59 	bl	800da9c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d00e      	beq.n	8011412 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10a      	bne.n	8011412 <tcp_write+0x6b2>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011400:	2b00      	cmp	r3, #0
 8011402:	d106      	bne.n	8011412 <tcp_write+0x6b2>
 8011404:	4b06      	ldr	r3, [pc, #24]	; (8011420 <tcp_write+0x6c0>)
 8011406:	f44f 724a 	mov.w	r2, #808	; 0x328
 801140a:	4906      	ldr	r1, [pc, #24]	; (8011424 <tcp_write+0x6c4>)
 801140c:	4806      	ldr	r0, [pc, #24]	; (8011428 <tcp_write+0x6c8>)
 801140e:	f004 ff51 	bl	80162b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011416:	4618      	mov	r0, r3
 8011418:	375c      	adds	r7, #92	; 0x5c
 801141a:	46bd      	mov	sp, r7
 801141c:	bd90      	pop	{r4, r7, pc}
 801141e:	bf00      	nop
 8011420:	0801b984 	.word	0x0801b984
 8011424:	0801bcf8 	.word	0x0801bcf8
 8011428:	0801b9d8 	.word	0x0801b9d8

0801142c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801142c:	b590      	push	{r4, r7, lr}
 801142e:	b08b      	sub	sp, #44	; 0x2c
 8011430:	af02      	add	r7, sp, #8
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	460b      	mov	r3, r1
 8011436:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011438:	2300      	movs	r3, #0
 801143a:	61fb      	str	r3, [r7, #28]
 801143c:	2300      	movs	r3, #0
 801143e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011440:	2300      	movs	r3, #0
 8011442:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <tcp_split_unsent_seg+0x2c>
 801144a:	4b95      	ldr	r3, [pc, #596]	; (80116a0 <tcp_split_unsent_seg+0x274>)
 801144c:	f240 324b 	movw	r2, #843	; 0x34b
 8011450:	4994      	ldr	r1, [pc, #592]	; (80116a4 <tcp_split_unsent_seg+0x278>)
 8011452:	4895      	ldr	r0, [pc, #596]	; (80116a8 <tcp_split_unsent_seg+0x27c>)
 8011454:	f004 ff2e 	bl	80162b4 <iprintf>

  useg = pcb->unsent;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801145c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d102      	bne.n	801146a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011464:	f04f 33ff 	mov.w	r3, #4294967295
 8011468:	e116      	b.n	8011698 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801146a:	887b      	ldrh	r3, [r7, #2]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d109      	bne.n	8011484 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011470:	4b8b      	ldr	r3, [pc, #556]	; (80116a0 <tcp_split_unsent_seg+0x274>)
 8011472:	f240 3253 	movw	r2, #851	; 0x353
 8011476:	498d      	ldr	r1, [pc, #564]	; (80116ac <tcp_split_unsent_seg+0x280>)
 8011478:	488b      	ldr	r0, [pc, #556]	; (80116a8 <tcp_split_unsent_seg+0x27c>)
 801147a:	f004 ff1b 	bl	80162b4 <iprintf>
    return ERR_VAL;
 801147e:	f06f 0305 	mvn.w	r3, #5
 8011482:	e109      	b.n	8011698 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	891b      	ldrh	r3, [r3, #8]
 8011488:	887a      	ldrh	r2, [r7, #2]
 801148a:	429a      	cmp	r2, r3
 801148c:	d301      	bcc.n	8011492 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	e102      	b.n	8011698 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011496:	887a      	ldrh	r2, [r7, #2]
 8011498:	429a      	cmp	r2, r3
 801149a:	d906      	bls.n	80114aa <tcp_split_unsent_seg+0x7e>
 801149c:	4b80      	ldr	r3, [pc, #512]	; (80116a0 <tcp_split_unsent_seg+0x274>)
 801149e:	f240 325b 	movw	r2, #859	; 0x35b
 80114a2:	4983      	ldr	r1, [pc, #524]	; (80116b0 <tcp_split_unsent_seg+0x284>)
 80114a4:	4880      	ldr	r0, [pc, #512]	; (80116a8 <tcp_split_unsent_seg+0x27c>)
 80114a6:	f004 ff05 	bl	80162b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	891b      	ldrh	r3, [r3, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <tcp_split_unsent_seg+0x94>
 80114b2:	4b7b      	ldr	r3, [pc, #492]	; (80116a0 <tcp_split_unsent_seg+0x274>)
 80114b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80114b8:	497e      	ldr	r1, [pc, #504]	; (80116b4 <tcp_split_unsent_seg+0x288>)
 80114ba:	487b      	ldr	r0, [pc, #492]	; (80116a8 <tcp_split_unsent_seg+0x27c>)
 80114bc:	f004 fefa 	bl	80162b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	7a9b      	ldrb	r3, [r3, #10]
 80114c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80114c6:	7bfb      	ldrb	r3, [r7, #15]
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 0304 	and.w	r3, r3, #4
 80114d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	891a      	ldrh	r2, [r3, #8]
 80114d6:	887b      	ldrh	r3, [r7, #2]
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80114dc:	7bbb      	ldrb	r3, [r7, #14]
 80114de:	b29a      	uxth	r2, r3
 80114e0:	89bb      	ldrh	r3, [r7, #12]
 80114e2:	4413      	add	r3, r2
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114ea:	4619      	mov	r1, r3
 80114ec:	2036      	movs	r0, #54	; 0x36
 80114ee:	f7fa fbd7 	bl	800bca0 <pbuf_alloc>
 80114f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f000 80b7 	beq.w	801166a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	891a      	ldrh	r2, [r3, #8]
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	891b      	ldrh	r3, [r3, #8]
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	b29a      	uxth	r2, r3
 801150a:	887b      	ldrh	r3, [r7, #2]
 801150c:	4413      	add	r3, r2
 801150e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	6858      	ldr	r0, [r3, #4]
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	685a      	ldr	r2, [r3, #4]
 8011518:	7bbb      	ldrb	r3, [r7, #14]
 801151a:	18d1      	adds	r1, r2, r3
 801151c:	897b      	ldrh	r3, [r7, #10]
 801151e:	89ba      	ldrh	r2, [r7, #12]
 8011520:	f7fb f898 	bl	800c654 <pbuf_copy_partial>
 8011524:	4603      	mov	r3, r0
 8011526:	461a      	mov	r2, r3
 8011528:	89bb      	ldrh	r3, [r7, #12]
 801152a:	4293      	cmp	r3, r2
 801152c:	f040 809f 	bne.w	801166e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	899b      	ldrh	r3, [r3, #12]
 8011536:	b29b      	uxth	r3, r3
 8011538:	4618      	mov	r0, r3
 801153a:	f7f9 fbf5 	bl	800ad28 <lwip_htons>
 801153e:	4603      	mov	r3, r0
 8011540:	b2db      	uxtb	r3, r3
 8011542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011546:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011548:	2300      	movs	r3, #0
 801154a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801154c:	7efb      	ldrb	r3, [r7, #27]
 801154e:	f003 0308 	and.w	r3, r3, #8
 8011552:	2b00      	cmp	r3, #0
 8011554:	d007      	beq.n	8011566 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011556:	7efb      	ldrb	r3, [r7, #27]
 8011558:	f023 0308 	bic.w	r3, r3, #8
 801155c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801155e:	7ebb      	ldrb	r3, [r7, #26]
 8011560:	f043 0308 	orr.w	r3, r3, #8
 8011564:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011566:	7efb      	ldrb	r3, [r7, #27]
 8011568:	f003 0301 	and.w	r3, r3, #1
 801156c:	2b00      	cmp	r3, #0
 801156e:	d007      	beq.n	8011580 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011570:	7efb      	ldrb	r3, [r7, #27]
 8011572:	f023 0301 	bic.w	r3, r3, #1
 8011576:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011578:	7ebb      	ldrb	r3, [r7, #26]
 801157a:	f043 0301 	orr.w	r3, r3, #1
 801157e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	4618      	mov	r0, r3
 8011588:	f7f9 fbe3 	bl	800ad52 <lwip_htonl>
 801158c:	4602      	mov	r2, r0
 801158e:	887b      	ldrh	r3, [r7, #2]
 8011590:	18d1      	adds	r1, r2, r3
 8011592:	7eba      	ldrb	r2, [r7, #26]
 8011594:	7bfb      	ldrb	r3, [r7, #15]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	460b      	mov	r3, r1
 801159a:	6939      	ldr	r1, [r7, #16]
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7ff fa4d 	bl	8010a3c <tcp_create_segment>
 80115a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d063      	beq.n	8011672 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fa fede 	bl	800c370 <pbuf_clen>
 80115b4:	4603      	mov	r3, r0
 80115b6:	461a      	mov	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115be:	1a9b      	subs	r3, r3, r2
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	6858      	ldr	r0, [r3, #4]
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	891a      	ldrh	r2, [r3, #8]
 80115d2:	89bb      	ldrh	r3, [r7, #12]
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	4619      	mov	r1, r3
 80115da:	f7fa fcbb 	bl	800bf54 <pbuf_realloc>
  useg->len -= remainder;
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	891a      	ldrh	r2, [r3, #8]
 80115e2:	89bb      	ldrh	r3, [r7, #12]
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	899b      	ldrh	r3, [r3, #12]
 80115f2:	b29c      	uxth	r4, r3
 80115f4:	7efb      	ldrb	r3, [r7, #27]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f9 fb95 	bl	800ad28 <lwip_htons>
 80115fe:	4603      	mov	r3, r0
 8011600:	461a      	mov	r2, r3
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	4322      	orrs	r2, r4
 8011608:	b292      	uxth	r2, r2
 801160a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	f7fa fead 	bl	800c370 <pbuf_clen>
 8011616:	4603      	mov	r3, r0
 8011618:	461a      	mov	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011620:	4413      	add	r3, r2
 8011622:	b29a      	uxth	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	4618      	mov	r0, r3
 8011630:	f7fa fe9e 	bl	800c370 <pbuf_clen>
 8011634:	4603      	mov	r3, r0
 8011636:	461a      	mov	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801163e:	4413      	add	r3, r2
 8011640:	b29a      	uxth	r2, r3
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	69fa      	ldr	r2, [r7, #28]
 8011654:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d103      	bne.n	8011666 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011666:	2300      	movs	r3, #0
 8011668:	e016      	b.n	8011698 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801166a:	bf00      	nop
 801166c:	e002      	b.n	8011674 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801166e:	bf00      	nop
 8011670:	e000      	b.n	8011674 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011672:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d006      	beq.n	8011688 <tcp_split_unsent_seg+0x25c>
 801167a:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <tcp_split_unsent_seg+0x274>)
 801167c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011680:	490d      	ldr	r1, [pc, #52]	; (80116b8 <tcp_split_unsent_seg+0x28c>)
 8011682:	4809      	ldr	r0, [pc, #36]	; (80116a8 <tcp_split_unsent_seg+0x27c>)
 8011684:	f004 fe16 	bl	80162b4 <iprintf>
  if (p != NULL) {
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d002      	beq.n	8011694 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801168e:	6938      	ldr	r0, [r7, #16]
 8011690:	f7fa fde6 	bl	800c260 <pbuf_free>
  }

  return ERR_MEM;
 8011694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011698:	4618      	mov	r0, r3
 801169a:	3724      	adds	r7, #36	; 0x24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd90      	pop	{r4, r7, pc}
 80116a0:	0801b984 	.word	0x0801b984
 80116a4:	0801bd18 	.word	0x0801bd18
 80116a8:	0801b9d8 	.word	0x0801b9d8
 80116ac:	0801bd3c 	.word	0x0801bd3c
 80116b0:	0801bd60 	.word	0x0801bd60
 80116b4:	0801bd70 	.word	0x0801bd70
 80116b8:	0801bd80 	.word	0x0801bd80

080116bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80116bc:	b590      	push	{r4, r7, lr}
 80116be:	b085      	sub	sp, #20
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d106      	bne.n	80116d8 <tcp_send_fin+0x1c>
 80116ca:	4b21      	ldr	r3, [pc, #132]	; (8011750 <tcp_send_fin+0x94>)
 80116cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80116d0:	4920      	ldr	r1, [pc, #128]	; (8011754 <tcp_send_fin+0x98>)
 80116d2:	4821      	ldr	r0, [pc, #132]	; (8011758 <tcp_send_fin+0x9c>)
 80116d4:	f004 fdee 	bl	80162b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d02e      	beq.n	801173e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116e4:	60fb      	str	r3, [r7, #12]
 80116e6:	e002      	b.n	80116ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1f8      	bne.n	80116e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	899b      	ldrh	r3, [r3, #12]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	4618      	mov	r0, r3
 8011700:	f7f9 fb12 	bl	800ad28 <lwip_htons>
 8011704:	4603      	mov	r3, r0
 8011706:	b2db      	uxtb	r3, r3
 8011708:	f003 0307 	and.w	r3, r3, #7
 801170c:	2b00      	cmp	r3, #0
 801170e:	d116      	bne.n	801173e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	899b      	ldrh	r3, [r3, #12]
 8011716:	b29c      	uxth	r4, r3
 8011718:	2001      	movs	r0, #1
 801171a:	f7f9 fb05 	bl	800ad28 <lwip_htons>
 801171e:	4603      	mov	r3, r0
 8011720:	461a      	mov	r2, r3
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	4322      	orrs	r2, r4
 8011728:	b292      	uxth	r2, r2
 801172a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	8b5b      	ldrh	r3, [r3, #26]
 8011730:	f043 0320 	orr.w	r3, r3, #32
 8011734:	b29a      	uxth	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801173a:	2300      	movs	r3, #0
 801173c:	e004      	b.n	8011748 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801173e:	2101      	movs	r1, #1
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 f80b 	bl	801175c <tcp_enqueue_flags>
 8011746:	4603      	mov	r3, r0
}
 8011748:	4618      	mov	r0, r3
 801174a:	3714      	adds	r7, #20
 801174c:	46bd      	mov	sp, r7
 801174e:	bd90      	pop	{r4, r7, pc}
 8011750:	0801b984 	.word	0x0801b984
 8011754:	0801bd8c 	.word	0x0801bd8c
 8011758:	0801b9d8 	.word	0x0801b9d8

0801175c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b08a      	sub	sp, #40	; 0x28
 8011760:	af02      	add	r7, sp, #8
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	460b      	mov	r3, r1
 8011766:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801176c:	2300      	movs	r3, #0
 801176e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011770:	78fb      	ldrb	r3, [r7, #3]
 8011772:	f003 0303 	and.w	r3, r3, #3
 8011776:	2b00      	cmp	r3, #0
 8011778:	d106      	bne.n	8011788 <tcp_enqueue_flags+0x2c>
 801177a:	4b67      	ldr	r3, [pc, #412]	; (8011918 <tcp_enqueue_flags+0x1bc>)
 801177c:	f240 4212 	movw	r2, #1042	; 0x412
 8011780:	4966      	ldr	r1, [pc, #408]	; (801191c <tcp_enqueue_flags+0x1c0>)
 8011782:	4867      	ldr	r0, [pc, #412]	; (8011920 <tcp_enqueue_flags+0x1c4>)
 8011784:	f004 fd96 	bl	80162b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_enqueue_flags+0x40>
 801178e:	4b62      	ldr	r3, [pc, #392]	; (8011918 <tcp_enqueue_flags+0x1bc>)
 8011790:	f240 4213 	movw	r2, #1043	; 0x413
 8011794:	4963      	ldr	r1, [pc, #396]	; (8011924 <tcp_enqueue_flags+0x1c8>)
 8011796:	4862      	ldr	r0, [pc, #392]	; (8011920 <tcp_enqueue_flags+0x1c4>)
 8011798:	f004 fd8c 	bl	80162b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801179c:	78fb      	ldrb	r3, [r7, #3]
 801179e:	f003 0302 	and.w	r3, r3, #2
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d001      	beq.n	80117aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80117a6:	2301      	movs	r3, #1
 80117a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80117aa:	7ffb      	ldrb	r3, [r7, #31]
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	f003 0304 	and.w	r3, r3, #4
 80117b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117b6:	7dfb      	ldrb	r3, [r7, #23]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117be:	4619      	mov	r1, r3
 80117c0:	2036      	movs	r0, #54	; 0x36
 80117c2:	f7fa fa6d 	bl	800bca0 <pbuf_alloc>
 80117c6:	6138      	str	r0, [r7, #16]
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d109      	bne.n	80117e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8b5b      	ldrh	r3, [r3, #26]
 80117d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117dc:	f04f 33ff 	mov.w	r3, #4294967295
 80117e0:	e095      	b.n	801190e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	895a      	ldrh	r2, [r3, #10]
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d206      	bcs.n	80117fc <tcp_enqueue_flags+0xa0>
 80117ee:	4b4a      	ldr	r3, [pc, #296]	; (8011918 <tcp_enqueue_flags+0x1bc>)
 80117f0:	f240 423a 	movw	r2, #1082	; 0x43a
 80117f4:	494c      	ldr	r1, [pc, #304]	; (8011928 <tcp_enqueue_flags+0x1cc>)
 80117f6:	484a      	ldr	r0, [pc, #296]	; (8011920 <tcp_enqueue_flags+0x1c4>)
 80117f8:	f004 fd5c 	bl	80162b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011800:	78fa      	ldrb	r2, [r7, #3]
 8011802:	7ffb      	ldrb	r3, [r7, #31]
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	460b      	mov	r3, r1
 8011808:	6939      	ldr	r1, [r7, #16]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff f916 	bl	8010a3c <tcp_create_segment>
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d109      	bne.n	801182c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	8b5b      	ldrh	r3, [r3, #26]
 801181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011820:	b29a      	uxth	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011826:	f04f 33ff 	mov.w	r3, #4294967295
 801182a:	e070      	b.n	801190e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	f003 0303 	and.w	r3, r3, #3
 8011834:	2b00      	cmp	r3, #0
 8011836:	d006      	beq.n	8011846 <tcp_enqueue_flags+0xea>
 8011838:	4b37      	ldr	r3, [pc, #220]	; (8011918 <tcp_enqueue_flags+0x1bc>)
 801183a:	f240 4242 	movw	r2, #1090	; 0x442
 801183e:	493b      	ldr	r1, [pc, #236]	; (801192c <tcp_enqueue_flags+0x1d0>)
 8011840:	4837      	ldr	r0, [pc, #220]	; (8011920 <tcp_enqueue_flags+0x1c4>)
 8011842:	f004 fd37 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	891b      	ldrh	r3, [r3, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d006      	beq.n	801185c <tcp_enqueue_flags+0x100>
 801184e:	4b32      	ldr	r3, [pc, #200]	; (8011918 <tcp_enqueue_flags+0x1bc>)
 8011850:	f240 4243 	movw	r2, #1091	; 0x443
 8011854:	4936      	ldr	r1, [pc, #216]	; (8011930 <tcp_enqueue_flags+0x1d4>)
 8011856:	4832      	ldr	r0, [pc, #200]	; (8011920 <tcp_enqueue_flags+0x1c4>)
 8011858:	f004 fd2c 	bl	80162b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011860:	2b00      	cmp	r3, #0
 8011862:	d103      	bne.n	801186c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	68fa      	ldr	r2, [r7, #12]
 8011868:	66da      	str	r2, [r3, #108]	; 0x6c
 801186a:	e00d      	b.n	8011888 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011870:	61bb      	str	r3, [r7, #24]
 8011872:	e002      	b.n	801187a <tcp_enqueue_flags+0x11e>
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	61bb      	str	r3, [r7, #24]
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1f8      	bne.n	8011874 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	68fa      	ldr	r2, [r7, #12]
 8011886:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011890:	78fb      	ldrb	r3, [r7, #3]
 8011892:	f003 0302 	and.w	r3, r3, #2
 8011896:	2b00      	cmp	r3, #0
 8011898:	d104      	bne.n	80118a4 <tcp_enqueue_flags+0x148>
 801189a:	78fb      	ldrb	r3, [r7, #3]
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d004      	beq.n	80118ae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118a8:	1c5a      	adds	r2, r3, #1
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80118ae:	78fb      	ldrb	r3, [r7, #3]
 80118b0:	f003 0301 	and.w	r3, r3, #1
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d006      	beq.n	80118c6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	8b5b      	ldrh	r3, [r3, #26]
 80118bc:	f043 0320 	orr.w	r3, r3, #32
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fa fd50 	bl	800c370 <pbuf_clen>
 80118d0:	4603      	mov	r3, r0
 80118d2:	461a      	mov	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118da:	4413      	add	r3, r2
 80118dc:	b29a      	uxth	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d00e      	beq.n	801190c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d10a      	bne.n	801190c <tcp_enqueue_flags+0x1b0>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d106      	bne.n	801190c <tcp_enqueue_flags+0x1b0>
 80118fe:	4b06      	ldr	r3, [pc, #24]	; (8011918 <tcp_enqueue_flags+0x1bc>)
 8011900:	f240 4266 	movw	r2, #1126	; 0x466
 8011904:	490b      	ldr	r1, [pc, #44]	; (8011934 <tcp_enqueue_flags+0x1d8>)
 8011906:	4806      	ldr	r0, [pc, #24]	; (8011920 <tcp_enqueue_flags+0x1c4>)
 8011908:	f004 fcd4 	bl	80162b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801190c:	2300      	movs	r3, #0
}
 801190e:	4618      	mov	r0, r3
 8011910:	3720      	adds	r7, #32
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop
 8011918:	0801b984 	.word	0x0801b984
 801191c:	0801bda8 	.word	0x0801bda8
 8011920:	0801b9d8 	.word	0x0801b9d8
 8011924:	0801be00 	.word	0x0801be00
 8011928:	0801be20 	.word	0x0801be20
 801192c:	0801be5c 	.word	0x0801be5c
 8011930:	0801be74 	.word	0x0801be74
 8011934:	0801bea0 	.word	0x0801bea0

08011938 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011938:	b5b0      	push	{r4, r5, r7, lr}
 801193a:	b08a      	sub	sp, #40	; 0x28
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d106      	bne.n	8011954 <tcp_output+0x1c>
 8011946:	4ba0      	ldr	r3, [pc, #640]	; (8011bc8 <tcp_output+0x290>)
 8011948:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801194c:	499f      	ldr	r1, [pc, #636]	; (8011bcc <tcp_output+0x294>)
 801194e:	48a0      	ldr	r0, [pc, #640]	; (8011bd0 <tcp_output+0x298>)
 8011950:	f004 fcb0 	bl	80162b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	7d1b      	ldrb	r3, [r3, #20]
 8011958:	2b01      	cmp	r3, #1
 801195a:	d106      	bne.n	801196a <tcp_output+0x32>
 801195c:	4b9a      	ldr	r3, [pc, #616]	; (8011bc8 <tcp_output+0x290>)
 801195e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8011962:	499c      	ldr	r1, [pc, #624]	; (8011bd4 <tcp_output+0x29c>)
 8011964:	489a      	ldr	r0, [pc, #616]	; (8011bd0 <tcp_output+0x298>)
 8011966:	f004 fca5 	bl	80162b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801196a:	4b9b      	ldr	r3, [pc, #620]	; (8011bd8 <tcp_output+0x2a0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	429a      	cmp	r2, r3
 8011972:	d101      	bne.n	8011978 <tcp_output+0x40>
    return ERR_OK;
 8011974:	2300      	movs	r3, #0
 8011976:	e1d2      	b.n	8011d1e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011984:	429a      	cmp	r2, r3
 8011986:	d203      	bcs.n	8011990 <tcp_output+0x58>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801198e:	e002      	b.n	8011996 <tcp_output+0x5e>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011996:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801199c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10b      	bne.n	80119bc <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	8b5b      	ldrh	r3, [r3, #26]
 80119a8:	f003 0302 	and.w	r3, r3, #2
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f000 81a9 	beq.w	8011d04 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fdd8 	bl	8012568 <tcp_send_empty_ack>
 80119b8:	4603      	mov	r3, r0
 80119ba:	e1b0      	b.n	8011d1e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80119bc:	6879      	ldr	r1, [r7, #4]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	3304      	adds	r3, #4
 80119c2:	461a      	mov	r2, r3
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7ff f81d 	bl	8010a04 <tcp_route>
 80119ca:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d102      	bne.n	80119d8 <tcp_output+0xa0>
    return ERR_RTE;
 80119d2:	f06f 0303 	mvn.w	r3, #3
 80119d6:	e1a2      	b.n	8011d1e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d003      	beq.n	80119e6 <tcp_output+0xae>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d111      	bne.n	8011a0a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d002      	beq.n	80119f2 <tcp_output+0xba>
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	3304      	adds	r3, #4
 80119f0:	e000      	b.n	80119f4 <tcp_output+0xbc>
 80119f2:	2300      	movs	r3, #0
 80119f4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d102      	bne.n	8011a02 <tcp_output+0xca>
      return ERR_RTE;
 80119fc:	f06f 0303 	mvn.w	r3, #3
 8011a00:	e18d      	b.n	8011d1e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7f9 f99e 	bl	800ad52 <lwip_htonl>
 8011a16:	4602      	mov	r2, r0
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a20:	8912      	ldrh	r2, [r2, #8]
 8011a22:	4413      	add	r3, r2
 8011a24:	69ba      	ldr	r2, [r7, #24]
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d227      	bcs.n	8011a7a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a30:	461a      	mov	r2, r3
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d114      	bne.n	8011a62 <tcp_output+0x12a>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d110      	bne.n	8011a62 <tcp_output+0x12a>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d10b      	bne.n	8011a62 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2201      	movs	r2, #1
 8011a56:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	8b5b      	ldrh	r3, [r3, #26]
 8011a66:	f003 0302 	and.w	r3, r3, #2
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	f000 814c 	beq.w	8011d08 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 fd79 	bl	8012568 <tcp_send_empty_ack>
 8011a76:	4603      	mov	r3, r0
 8011a78:	e151      	b.n	8011d1e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a86:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a88:	6a3b      	ldr	r3, [r7, #32]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f000 811b 	beq.w	8011cc6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011a90:	e002      	b.n	8011a98 <tcp_output+0x160>
 8011a92:	6a3b      	ldr	r3, [r7, #32]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	623b      	str	r3, [r7, #32]
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1f8      	bne.n	8011a92 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011aa0:	e111      	b.n	8011cc6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	899b      	ldrh	r3, [r3, #12]
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7f9 f93c 	bl	800ad28 <lwip_htons>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	f003 0304 	and.w	r3, r3, #4
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d006      	beq.n	8011aca <tcp_output+0x192>
 8011abc:	4b42      	ldr	r3, [pc, #264]	; (8011bc8 <tcp_output+0x290>)
 8011abe:	f240 5237 	movw	r2, #1335	; 0x537
 8011ac2:	4946      	ldr	r1, [pc, #280]	; (8011bdc <tcp_output+0x2a4>)
 8011ac4:	4842      	ldr	r0, [pc, #264]	; (8011bd0 <tcp_output+0x298>)
 8011ac6:	f004 fbf5 	bl	80162b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d01f      	beq.n	8011b12 <tcp_output+0x1da>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	8b5b      	ldrh	r3, [r3, #26]
 8011ad6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d119      	bne.n	8011b12 <tcp_output+0x1da>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00b      	beq.n	8011afe <tcp_output+0x1c6>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d110      	bne.n	8011b12 <tcp_output+0x1da>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011af4:	891a      	ldrh	r2, [r3, #8]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d209      	bcs.n	8011b12 <tcp_output+0x1da>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d004      	beq.n	8011b12 <tcp_output+0x1da>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b0e:	2b08      	cmp	r3, #8
 8011b10:	d901      	bls.n	8011b16 <tcp_output+0x1de>
 8011b12:	2301      	movs	r3, #1
 8011b14:	e000      	b.n	8011b18 <tcp_output+0x1e0>
 8011b16:	2300      	movs	r3, #0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d106      	bne.n	8011b2a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	8b5b      	ldrh	r3, [r3, #26]
 8011b20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f000 80e3 	beq.w	8011cf0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	7d1b      	ldrb	r3, [r3, #20]
 8011b2e:	2b02      	cmp	r3, #2
 8011b30:	d00d      	beq.n	8011b4e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	899b      	ldrh	r3, [r3, #12]
 8011b38:	b29c      	uxth	r4, r3
 8011b3a:	2010      	movs	r0, #16
 8011b3c:	f7f9 f8f4 	bl	800ad28 <lwip_htons>
 8011b40:	4603      	mov	r3, r0
 8011b42:	461a      	mov	r2, r3
 8011b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	4322      	orrs	r2, r4
 8011b4a:	b292      	uxth	r2, r2
 8011b4c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011b4e:	697a      	ldr	r2, [r7, #20]
 8011b50:	6879      	ldr	r1, [r7, #4]
 8011b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b54:	f000 f908 	bl	8011d68 <tcp_output_segment>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d009      	beq.n	8011b78 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	8b5b      	ldrh	r3, [r3, #26]
 8011b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	835a      	strh	r2, [r3, #26]
      return err;
 8011b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b76:	e0d2      	b.n	8011d1e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	7d1b      	ldrb	r3, [r3, #20]
 8011b84:	2b02      	cmp	r3, #2
 8011b86:	d006      	beq.n	8011b96 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	8b5b      	ldrh	r3, [r3, #26]
 8011b8c:	f023 0303 	bic.w	r3, r3, #3
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f9 f8d8 	bl	800ad52 <lwip_htonl>
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba6:	891b      	ldrh	r3, [r3, #8]
 8011ba8:	461d      	mov	r5, r3
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	899b      	ldrh	r3, [r3, #12]
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7f9 f8b8 	bl	800ad28 <lwip_htons>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	f003 0303 	and.w	r3, r3, #3
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00d      	beq.n	8011be0 <tcp_output+0x2a8>
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e00c      	b.n	8011be2 <tcp_output+0x2aa>
 8011bc8:	0801b984 	.word	0x0801b984
 8011bcc:	0801bec8 	.word	0x0801bec8
 8011bd0:	0801b9d8 	.word	0x0801b9d8
 8011bd4:	0801bee0 	.word	0x0801bee0
 8011bd8:	20007514 	.word	0x20007514
 8011bdc:	0801bf08 	.word	0x0801bf08
 8011be0:	2300      	movs	r3, #0
 8011be2:	442b      	add	r3, r5
 8011be4:	4423      	add	r3, r4
 8011be6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	da02      	bge.n	8011bfa <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	68ba      	ldr	r2, [r7, #8]
 8011bf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bfc:	891b      	ldrh	r3, [r3, #8]
 8011bfe:	461c      	mov	r4, r3
 8011c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	899b      	ldrh	r3, [r3, #12]
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7f9 f88d 	bl	800ad28 <lwip_htons>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	b2db      	uxtb	r3, r3
 8011c12:	f003 0303 	and.w	r3, r3, #3
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <tcp_output+0x2e6>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e000      	b.n	8011c20 <tcp_output+0x2e8>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	4423      	add	r3, r4
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d049      	beq.n	8011cba <tcp_output+0x382>
      seg->next = NULL;
 8011c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c28:	2200      	movs	r2, #0
 8011c2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d105      	bne.n	8011c40 <tcp_output+0x308>
        pcb->unacked = seg;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3c:	623b      	str	r3, [r7, #32]
 8011c3e:	e03f      	b.n	8011cc0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c42:	68db      	ldr	r3, [r3, #12]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7f9 f883 	bl	800ad52 <lwip_htonl>
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	6a3b      	ldr	r3, [r7, #32]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7f9 f87c 	bl	800ad52 <lwip_htonl>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	1ae3      	subs	r3, r4, r3
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	da24      	bge.n	8011cac <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	3370      	adds	r3, #112	; 0x70
 8011c66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c68:	e002      	b.n	8011c70 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d011      	beq.n	8011c9c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7f9 f866 	bl	800ad52 <lwip_htonl>
 8011c86:	4604      	mov	r4, r0
 8011c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8a:	68db      	ldr	r3, [r3, #12]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7f9 f85f 	bl	800ad52 <lwip_htonl>
 8011c94:	4603      	mov	r3, r0
 8011c96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	dbe6      	blt.n	8011c6a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	e009      	b.n	8011cc0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cb0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011cb2:	6a3b      	ldr	r3, [r7, #32]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	623b      	str	r3, [r7, #32]
 8011cb8:	e002      	b.n	8011cc0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cbc:	f7fb ff02 	bl	800dac4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d012      	beq.n	8011cf2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f9 f83d 	bl	800ad52 <lwip_htonl>
 8011cd8:	4602      	mov	r2, r0
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce2:	8912      	ldrh	r2, [r2, #8]
 8011ce4:	4413      	add	r3, r2
  while (seg != NULL &&
 8011ce6:	69ba      	ldr	r2, [r7, #24]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	f4bf aeda 	bcs.w	8011aa2 <tcp_output+0x16a>
 8011cee:	e000      	b.n	8011cf2 <tcp_output+0x3ba>
      break;
 8011cf0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d108      	bne.n	8011d0c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011d02:	e004      	b.n	8011d0e <tcp_output+0x3d6>
    goto output_done;
 8011d04:	bf00      	nop
 8011d06:	e002      	b.n	8011d0e <tcp_output+0x3d6>
    goto output_done;
 8011d08:	bf00      	nop
 8011d0a:	e000      	b.n	8011d0e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011d0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	8b5b      	ldrh	r3, [r3, #26]
 8011d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011d1c:	2300      	movs	r3, #0
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3728      	adds	r7, #40	; 0x28
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bdb0      	pop	{r4, r5, r7, pc}
 8011d26:	bf00      	nop

08011d28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d106      	bne.n	8011d44 <tcp_output_segment_busy+0x1c>
 8011d36:	4b09      	ldr	r3, [pc, #36]	; (8011d5c <tcp_output_segment_busy+0x34>)
 8011d38:	f240 529a 	movw	r2, #1434	; 0x59a
 8011d3c:	4908      	ldr	r1, [pc, #32]	; (8011d60 <tcp_output_segment_busy+0x38>)
 8011d3e:	4809      	ldr	r0, [pc, #36]	; (8011d64 <tcp_output_segment_busy+0x3c>)
 8011d40:	f004 fab8 	bl	80162b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	7b9b      	ldrb	r3, [r3, #14]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d001      	beq.n	8011d52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e000      	b.n	8011d54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011d52:	2300      	movs	r3, #0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	0801b984 	.word	0x0801b984
 8011d60:	0801bf20 	.word	0x0801bf20
 8011d64:	0801b9d8 	.word	0x0801b9d8

08011d68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d68:	b5b0      	push	{r4, r5, r7, lr}
 8011d6a:	b08c      	sub	sp, #48	; 0x30
 8011d6c:	af04      	add	r7, sp, #16
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d106      	bne.n	8011d88 <tcp_output_segment+0x20>
 8011d7a:	4b64      	ldr	r3, [pc, #400]	; (8011f0c <tcp_output_segment+0x1a4>)
 8011d7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011d80:	4963      	ldr	r1, [pc, #396]	; (8011f10 <tcp_output_segment+0x1a8>)
 8011d82:	4864      	ldr	r0, [pc, #400]	; (8011f14 <tcp_output_segment+0x1ac>)
 8011d84:	f004 fa96 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d106      	bne.n	8011d9c <tcp_output_segment+0x34>
 8011d8e:	4b5f      	ldr	r3, [pc, #380]	; (8011f0c <tcp_output_segment+0x1a4>)
 8011d90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011d94:	4960      	ldr	r1, [pc, #384]	; (8011f18 <tcp_output_segment+0x1b0>)
 8011d96:	485f      	ldr	r0, [pc, #380]	; (8011f14 <tcp_output_segment+0x1ac>)
 8011d98:	f004 fa8c 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d106      	bne.n	8011db0 <tcp_output_segment+0x48>
 8011da2:	4b5a      	ldr	r3, [pc, #360]	; (8011f0c <tcp_output_segment+0x1a4>)
 8011da4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011da8:	495c      	ldr	r1, [pc, #368]	; (8011f1c <tcp_output_segment+0x1b4>)
 8011daa:	485a      	ldr	r0, [pc, #360]	; (8011f14 <tcp_output_segment+0x1ac>)
 8011dac:	f004 fa82 	bl	80162b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f7ff ffb9 	bl	8011d28 <tcp_output_segment_busy>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d001      	beq.n	8011dc0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	e0a0      	b.n	8011f02 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	68dc      	ldr	r4, [r3, #12]
 8011dc8:	4610      	mov	r0, r2
 8011dca:	f7f8 ffc2 	bl	800ad52 <lwip_htonl>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	68dc      	ldr	r4, [r3, #12]
 8011dda:	4610      	mov	r0, r2
 8011ddc:	f7f8 ffa4 	bl	800ad28 <lwip_htons>
 8011de0:	4603      	mov	r3, r0
 8011de2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	68ba      	ldr	r2, [r7, #8]
 8011dea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011dec:	441a      	add	r2, r3
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	3314      	adds	r3, #20
 8011df8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	7a9b      	ldrb	r3, [r3, #10]
 8011dfe:	f003 0301 	and.w	r3, r3, #1
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d015      	beq.n	8011e32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	6879      	ldr	r1, [r7, #4]
 8011e0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011e12:	f7fc fa33 	bl	800e27c <tcp_eff_send_mss_netif>
 8011e16:	4603      	mov	r3, r0
 8011e18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011e1a:	8b7b      	ldrh	r3, [r7, #26]
 8011e1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7f8 ff96 	bl	800ad52 <lwip_htonl>
 8011e26:	4602      	mov	r2, r0
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	3304      	adds	r3, #4
 8011e30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	da02      	bge.n	8011e42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10c      	bne.n	8011e64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011e4a:	4b35      	ldr	r3, [pc, #212]	; (8011f20 <tcp_output_segment+0x1b8>)
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7f8 ff7a 	bl	800ad52 <lwip_htonl>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	1ad3      	subs	r3, r2, r3
 8011e72:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	8959      	ldrh	r1, [r3, #10]
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	8b3a      	ldrh	r2, [r7, #24]
 8011e80:	1a8a      	subs	r2, r1, r2
 8011e82:	b292      	uxth	r2, r2
 8011e84:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	8919      	ldrh	r1, [r3, #8]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	8b3a      	ldrh	r2, [r7, #24]
 8011e92:	1a8a      	subs	r2, r1, r2
 8011e94:	b292      	uxth	r2, r2
 8011e96:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	68d2      	ldr	r2, [r2, #12]
 8011ea0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	741a      	strb	r2, [r3, #16]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	f103 0214 	add.w	r2, r3, #20
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	7a9b      	ldrb	r3, [r3, #10]
 8011eba:	009b      	lsls	r3, r3, #2
 8011ebc:	f003 0304 	and.w	r3, r3, #4
 8011ec0:	4413      	add	r3, r2
 8011ec2:	69fa      	ldr	r2, [r7, #28]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d006      	beq.n	8011ed6 <tcp_output_segment+0x16e>
 8011ec8:	4b10      	ldr	r3, [pc, #64]	; (8011f0c <tcp_output_segment+0x1a4>)
 8011eca:	f240 621c 	movw	r2, #1564	; 0x61c
 8011ece:	4915      	ldr	r1, [pc, #84]	; (8011f24 <tcp_output_segment+0x1bc>)
 8011ed0:	4810      	ldr	r0, [pc, #64]	; (8011f14 <tcp_output_segment+0x1ac>)
 8011ed2:	f004 f9ef 	bl	80162b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	6858      	ldr	r0, [r3, #4]
 8011eda:	68b9      	ldr	r1, [r7, #8]
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	1d1c      	adds	r4, r3, #4
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	7add      	ldrb	r5, [r3, #11]
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	7a9b      	ldrb	r3, [r3, #10]
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	9202      	str	r2, [sp, #8]
 8011eec:	2206      	movs	r2, #6
 8011eee:	9201      	str	r2, [sp, #4]
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	462b      	mov	r3, r5
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	f002 fa3f 	bl	8014378 <ip4_output_if>
 8011efa:	4603      	mov	r3, r0
 8011efc:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3720      	adds	r7, #32
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bdb0      	pop	{r4, r5, r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	0801b984 	.word	0x0801b984
 8011f10:	0801bf48 	.word	0x0801bf48
 8011f14:	0801b9d8 	.word	0x0801b9d8
 8011f18:	0801bf68 	.word	0x0801bf68
 8011f1c:	0801bf88 	.word	0x0801bf88
 8011f20:	20007504 	.word	0x20007504
 8011f24:	0801bfac 	.word	0x0801bfac

08011f28 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011f28:	b5b0      	push	{r4, r5, r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d106      	bne.n	8011f44 <tcp_rexmit_rto_prepare+0x1c>
 8011f36:	4b31      	ldr	r3, [pc, #196]	; (8011ffc <tcp_rexmit_rto_prepare+0xd4>)
 8011f38:	f240 6263 	movw	r2, #1635	; 0x663
 8011f3c:	4930      	ldr	r1, [pc, #192]	; (8012000 <tcp_rexmit_rto_prepare+0xd8>)
 8011f3e:	4831      	ldr	r0, [pc, #196]	; (8012004 <tcp_rexmit_rto_prepare+0xdc>)
 8011f40:	f004 f9b8 	bl	80162b4 <iprintf>

  if (pcb->unacked == NULL) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d102      	bne.n	8011f52 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011f4c:	f06f 0305 	mvn.w	r3, #5
 8011f50:	e050      	b.n	8011ff4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f56:	60fb      	str	r3, [r7, #12]
 8011f58:	e00b      	b.n	8011f72 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f7ff fee4 	bl	8011d28 <tcp_output_segment_busy>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d002      	beq.n	8011f6c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011f66:	f06f 0305 	mvn.w	r3, #5
 8011f6a:	e043      	b.n	8011ff4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60fb      	str	r3, [r7, #12]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1ef      	bne.n	8011f5a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011f7a:	68f8      	ldr	r0, [r7, #12]
 8011f7c:	f7ff fed4 	bl	8011d28 <tcp_output_segment_busy>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d002      	beq.n	8011f8c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011f86:	f06f 0305 	mvn.w	r3, #5
 8011f8a:	e033      	b.n	8011ff4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	8b5b      	ldrh	r3, [r3, #26]
 8011fa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f8 fecb 	bl	800ad52 <lwip_htonl>
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	891b      	ldrh	r3, [r3, #8]
 8011fc2:	461d      	mov	r5, r3
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	899b      	ldrh	r3, [r3, #12]
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7f8 feab 	bl	800ad28 <lwip_htons>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	b2db      	uxtb	r3, r3
 8011fd6:	f003 0303 	and.w	r3, r3, #3
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d001      	beq.n	8011fe2 <tcp_rexmit_rto_prepare+0xba>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e000      	b.n	8011fe4 <tcp_rexmit_rto_prepare+0xbc>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	442b      	add	r3, r5
 8011fe6:	18e2      	adds	r2, r4, r3
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3710      	adds	r7, #16
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8011ffc:	0801b984 	.word	0x0801b984
 8012000:	0801bfc0 	.word	0x0801bfc0
 8012004:	0801b9d8 	.word	0x0801b9d8

08012008 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d106      	bne.n	8012024 <tcp_rexmit_rto_commit+0x1c>
 8012016:	4b0d      	ldr	r3, [pc, #52]	; (801204c <tcp_rexmit_rto_commit+0x44>)
 8012018:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801201c:	490c      	ldr	r1, [pc, #48]	; (8012050 <tcp_rexmit_rto_commit+0x48>)
 801201e:	480d      	ldr	r0, [pc, #52]	; (8012054 <tcp_rexmit_rto_commit+0x4c>)
 8012020:	f004 f948 	bl	80162b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801202a:	2bff      	cmp	r3, #255	; 0xff
 801202c:	d007      	beq.n	801203e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012034:	3301      	adds	r3, #1
 8012036:	b2da      	uxtb	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7ff fc7a 	bl	8011938 <tcp_output>
}
 8012044:	bf00      	nop
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	0801b984 	.word	0x0801b984
 8012050:	0801bfe4 	.word	0x0801bfe4
 8012054:	0801b9d8 	.word	0x0801b9d8

08012058 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d106      	bne.n	8012074 <tcp_rexmit_rto+0x1c>
 8012066:	4b0a      	ldr	r3, [pc, #40]	; (8012090 <tcp_rexmit_rto+0x38>)
 8012068:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801206c:	4909      	ldr	r1, [pc, #36]	; (8012094 <tcp_rexmit_rto+0x3c>)
 801206e:	480a      	ldr	r0, [pc, #40]	; (8012098 <tcp_rexmit_rto+0x40>)
 8012070:	f004 f920 	bl	80162b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f7ff ff57 	bl	8011f28 <tcp_rexmit_rto_prepare>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d102      	bne.n	8012086 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7ff ffc1 	bl	8012008 <tcp_rexmit_rto_commit>
  }
}
 8012086:	bf00      	nop
 8012088:	3708      	adds	r7, #8
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	0801b984 	.word	0x0801b984
 8012094:	0801c008 	.word	0x0801c008
 8012098:	0801b9d8 	.word	0x0801b9d8

0801209c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801209c:	b590      	push	{r4, r7, lr}
 801209e:	b085      	sub	sp, #20
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d106      	bne.n	80120b8 <tcp_rexmit+0x1c>
 80120aa:	4b2f      	ldr	r3, [pc, #188]	; (8012168 <tcp_rexmit+0xcc>)
 80120ac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80120b0:	492e      	ldr	r1, [pc, #184]	; (801216c <tcp_rexmit+0xd0>)
 80120b2:	482f      	ldr	r0, [pc, #188]	; (8012170 <tcp_rexmit+0xd4>)
 80120b4:	f004 f8fe 	bl	80162b4 <iprintf>

  if (pcb->unacked == NULL) {
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d102      	bne.n	80120c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80120c0:	f06f 0305 	mvn.w	r3, #5
 80120c4:	e04c      	b.n	8012160 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80120cc:	68b8      	ldr	r0, [r7, #8]
 80120ce:	f7ff fe2b 	bl	8011d28 <tcp_output_segment_busy>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80120d8:	f06f 0305 	mvn.w	r3, #5
 80120dc:	e040      	b.n	8012160 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	336c      	adds	r3, #108	; 0x6c
 80120ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120ec:	e002      	b.n	80120f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d011      	beq.n	8012120 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	4618      	mov	r0, r3
 8012106:	f7f8 fe24 	bl	800ad52 <lwip_htonl>
 801210a:	4604      	mov	r4, r0
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	68db      	ldr	r3, [r3, #12]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	f7f8 fe1d 	bl	800ad52 <lwip_htonl>
 8012118:	4603      	mov	r3, r0
 801211a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801211c:	2b00      	cmp	r3, #0
 801211e:	dbe6      	blt.n	80120ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	68ba      	ldr	r2, [r7, #8]
 801212c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d103      	bne.n	801213e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012144:	2bff      	cmp	r3, #255	; 0xff
 8012146:	d007      	beq.n	8012158 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801214e:	3301      	adds	r3, #1
 8012150:	b2da      	uxtb	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3714      	adds	r7, #20
 8012164:	46bd      	mov	sp, r7
 8012166:	bd90      	pop	{r4, r7, pc}
 8012168:	0801b984 	.word	0x0801b984
 801216c:	0801c024 	.word	0x0801c024
 8012170:	0801b9d8 	.word	0x0801b9d8

08012174 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d106      	bne.n	8012190 <tcp_rexmit_fast+0x1c>
 8012182:	4b2f      	ldr	r3, [pc, #188]	; (8012240 <tcp_rexmit_fast+0xcc>)
 8012184:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012188:	492e      	ldr	r1, [pc, #184]	; (8012244 <tcp_rexmit_fast+0xd0>)
 801218a:	482f      	ldr	r0, [pc, #188]	; (8012248 <tcp_rexmit_fast+0xd4>)
 801218c:	f004 f892 	bl	80162b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012194:	2b00      	cmp	r3, #0
 8012196:	d04f      	beq.n	8012238 <tcp_rexmit_fast+0xc4>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	8b5b      	ldrh	r3, [r3, #26]
 801219c:	f003 0304 	and.w	r3, r3, #4
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d149      	bne.n	8012238 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7ff ff79 	bl	801209c <tcp_rexmit>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d143      	bne.n	8012238 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121bc:	429a      	cmp	r2, r3
 80121be:	d208      	bcs.n	80121d2 <tcp_rexmit_fast+0x5e>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	da00      	bge.n	80121cc <tcp_rexmit_fast+0x58>
 80121ca:	3301      	adds	r3, #1
 80121cc:	105b      	asrs	r3, r3, #1
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	e007      	b.n	80121e2 <tcp_rexmit_fast+0x6e>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121d8:	2b00      	cmp	r3, #0
 80121da:	da00      	bge.n	80121de <tcp_rexmit_fast+0x6a>
 80121dc:	3301      	adds	r3, #1
 80121de:	105b      	asrs	r3, r3, #1
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121ee:	461a      	mov	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121f4:	005b      	lsls	r3, r3, #1
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d206      	bcs.n	8012208 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	b29a      	uxth	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012212:	4619      	mov	r1, r3
 8012214:	0049      	lsls	r1, r1, #1
 8012216:	440b      	add	r3, r1
 8012218:	b29b      	uxth	r3, r3
 801221a:	4413      	add	r3, r2
 801221c:	b29a      	uxth	r2, r3
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8b5b      	ldrh	r3, [r3, #26]
 8012228:	f043 0304 	orr.w	r3, r3, #4
 801222c:	b29a      	uxth	r2, r3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2200      	movs	r2, #0
 8012236:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012238:	bf00      	nop
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	0801b984 	.word	0x0801b984
 8012244:	0801c03c 	.word	0x0801c03c
 8012248:	0801b9d8 	.word	0x0801b9d8

0801224c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b086      	sub	sp, #24
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	607b      	str	r3, [r7, #4]
 8012256:	460b      	mov	r3, r1
 8012258:	817b      	strh	r3, [r7, #10]
 801225a:	4613      	mov	r3, r2
 801225c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801225e:	897a      	ldrh	r2, [r7, #10]
 8012260:	893b      	ldrh	r3, [r7, #8]
 8012262:	4413      	add	r3, r2
 8012264:	b29b      	uxth	r3, r3
 8012266:	3314      	adds	r3, #20
 8012268:	b29b      	uxth	r3, r3
 801226a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801226e:	4619      	mov	r1, r3
 8012270:	2022      	movs	r0, #34	; 0x22
 8012272:	f7f9 fd15 	bl	800bca0 <pbuf_alloc>
 8012276:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d04e      	beq.n	801231c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	895b      	ldrh	r3, [r3, #10]
 8012282:	461a      	mov	r2, r3
 8012284:	897b      	ldrh	r3, [r7, #10]
 8012286:	3314      	adds	r3, #20
 8012288:	429a      	cmp	r2, r3
 801228a:	da06      	bge.n	801229a <tcp_output_alloc_header_common+0x4e>
 801228c:	4b26      	ldr	r3, [pc, #152]	; (8012328 <tcp_output_alloc_header_common+0xdc>)
 801228e:	f240 7224 	movw	r2, #1828	; 0x724
 8012292:	4926      	ldr	r1, [pc, #152]	; (801232c <tcp_output_alloc_header_common+0xe0>)
 8012294:	4826      	ldr	r0, [pc, #152]	; (8012330 <tcp_output_alloc_header_common+0xe4>)
 8012296:	f004 f80d 	bl	80162b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	685b      	ldr	r3, [r3, #4]
 801229e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80122a0:	8c3b      	ldrh	r3, [r7, #32]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7f8 fd40 	bl	800ad28 <lwip_htons>
 80122a8:	4603      	mov	r3, r0
 80122aa:	461a      	mov	r2, r3
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80122b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7f8 fd38 	bl	800ad28 <lwip_htons>
 80122b8:	4603      	mov	r3, r0
 80122ba:	461a      	mov	r2, r3
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f7f8 fd43 	bl	800ad52 <lwip_htonl>
 80122cc:	4602      	mov	r2, r0
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80122d2:	897b      	ldrh	r3, [r7, #10]
 80122d4:	089b      	lsrs	r3, r3, #2
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	3305      	adds	r3, #5
 80122da:	b29b      	uxth	r3, r3
 80122dc:	031b      	lsls	r3, r3, #12
 80122de:	b29a      	uxth	r2, r3
 80122e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	4313      	orrs	r3, r2
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7f8 fd1c 	bl	800ad28 <lwip_htons>
 80122f0:	4603      	mov	r3, r0
 80122f2:	461a      	mov	r2, r3
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80122f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7f8 fd14 	bl	800ad28 <lwip_htons>
 8012300:	4603      	mov	r3, r0
 8012302:	461a      	mov	r2, r3
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	2200      	movs	r2, #0
 801230c:	741a      	strb	r2, [r3, #16]
 801230e:	2200      	movs	r2, #0
 8012310:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	2200      	movs	r2, #0
 8012316:	749a      	strb	r2, [r3, #18]
 8012318:	2200      	movs	r2, #0
 801231a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801231c:	697b      	ldr	r3, [r7, #20]
}
 801231e:	4618      	mov	r0, r3
 8012320:	3718      	adds	r7, #24
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	0801b984 	.word	0x0801b984
 801232c:	0801c05c 	.word	0x0801c05c
 8012330:	0801b9d8 	.word	0x0801b9d8

08012334 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012334:	b5b0      	push	{r4, r5, r7, lr}
 8012336:	b08a      	sub	sp, #40	; 0x28
 8012338:	af04      	add	r7, sp, #16
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	607b      	str	r3, [r7, #4]
 801233e:	460b      	mov	r3, r1
 8012340:	817b      	strh	r3, [r7, #10]
 8012342:	4613      	mov	r3, r2
 8012344:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d106      	bne.n	801235a <tcp_output_alloc_header+0x26>
 801234c:	4b15      	ldr	r3, [pc, #84]	; (80123a4 <tcp_output_alloc_header+0x70>)
 801234e:	f240 7242 	movw	r2, #1858	; 0x742
 8012352:	4915      	ldr	r1, [pc, #84]	; (80123a8 <tcp_output_alloc_header+0x74>)
 8012354:	4815      	ldr	r0, [pc, #84]	; (80123ac <tcp_output_alloc_header+0x78>)
 8012356:	f003 ffad 	bl	80162b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	8adb      	ldrh	r3, [r3, #22]
 8012362:	68fa      	ldr	r2, [r7, #12]
 8012364:	8b12      	ldrh	r2, [r2, #24]
 8012366:	68f9      	ldr	r1, [r7, #12]
 8012368:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801236a:	893d      	ldrh	r5, [r7, #8]
 801236c:	897c      	ldrh	r4, [r7, #10]
 801236e:	9103      	str	r1, [sp, #12]
 8012370:	2110      	movs	r1, #16
 8012372:	9102      	str	r1, [sp, #8]
 8012374:	9201      	str	r2, [sp, #4]
 8012376:	9300      	str	r3, [sp, #0]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	462a      	mov	r2, r5
 801237c:	4621      	mov	r1, r4
 801237e:	f7ff ff65 	bl	801224c <tcp_output_alloc_header_common>
 8012382:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d006      	beq.n	8012398 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801238e:	68fa      	ldr	r2, [r7, #12]
 8012390:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012392:	441a      	add	r2, r3
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012398:	697b      	ldr	r3, [r7, #20]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3718      	adds	r7, #24
 801239e:	46bd      	mov	sp, r7
 80123a0:	bdb0      	pop	{r4, r5, r7, pc}
 80123a2:	bf00      	nop
 80123a4:	0801b984 	.word	0x0801b984
 80123a8:	0801c08c 	.word	0x0801c08c
 80123ac:	0801b9d8 	.word	0x0801b9d8

080123b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b088      	sub	sp, #32
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	4611      	mov	r1, r2
 80123bc:	461a      	mov	r2, r3
 80123be:	460b      	mov	r3, r1
 80123c0:	71fb      	strb	r3, [r7, #7]
 80123c2:	4613      	mov	r3, r2
 80123c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80123c6:	2300      	movs	r3, #0
 80123c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d106      	bne.n	80123de <tcp_output_fill_options+0x2e>
 80123d0:	4b13      	ldr	r3, [pc, #76]	; (8012420 <tcp_output_fill_options+0x70>)
 80123d2:	f240 7256 	movw	r2, #1878	; 0x756
 80123d6:	4913      	ldr	r1, [pc, #76]	; (8012424 <tcp_output_fill_options+0x74>)
 80123d8:	4813      	ldr	r0, [pc, #76]	; (8012428 <tcp_output_fill_options+0x78>)
 80123da:	f003 ff6b 	bl	80162b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	3314      	adds	r3, #20
 80123e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	f103 0214 	add.w	r2, r3, #20
 80123f0:	8bfb      	ldrh	r3, [r7, #30]
 80123f2:	009b      	lsls	r3, r3, #2
 80123f4:	4619      	mov	r1, r3
 80123f6:	79fb      	ldrb	r3, [r7, #7]
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	f003 0304 	and.w	r3, r3, #4
 80123fe:	440b      	add	r3, r1
 8012400:	4413      	add	r3, r2
 8012402:	697a      	ldr	r2, [r7, #20]
 8012404:	429a      	cmp	r2, r3
 8012406:	d006      	beq.n	8012416 <tcp_output_fill_options+0x66>
 8012408:	4b05      	ldr	r3, [pc, #20]	; (8012420 <tcp_output_fill_options+0x70>)
 801240a:	f240 7275 	movw	r2, #1909	; 0x775
 801240e:	4907      	ldr	r1, [pc, #28]	; (801242c <tcp_output_fill_options+0x7c>)
 8012410:	4805      	ldr	r0, [pc, #20]	; (8012428 <tcp_output_fill_options+0x78>)
 8012412:	f003 ff4f 	bl	80162b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012416:	bf00      	nop
 8012418:	3720      	adds	r7, #32
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	0801b984 	.word	0x0801b984
 8012424:	0801c0b4 	.word	0x0801c0b4
 8012428:	0801b9d8 	.word	0x0801b9d8
 801242c:	0801bfac 	.word	0x0801bfac

08012430 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08a      	sub	sp, #40	; 0x28
 8012434:	af04      	add	r7, sp, #16
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d106      	bne.n	8012452 <tcp_output_control_segment+0x22>
 8012444:	4b1c      	ldr	r3, [pc, #112]	; (80124b8 <tcp_output_control_segment+0x88>)
 8012446:	f240 7287 	movw	r2, #1927	; 0x787
 801244a:	491c      	ldr	r1, [pc, #112]	; (80124bc <tcp_output_control_segment+0x8c>)
 801244c:	481c      	ldr	r0, [pc, #112]	; (80124c0 <tcp_output_control_segment+0x90>)
 801244e:	f003 ff31 	bl	80162b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012452:	683a      	ldr	r2, [r7, #0]
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	68f8      	ldr	r0, [r7, #12]
 8012458:	f7fe fad4 	bl	8010a04 <tcp_route>
 801245c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d102      	bne.n	801246a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012464:	23fc      	movs	r3, #252	; 0xfc
 8012466:	75fb      	strb	r3, [r7, #23]
 8012468:	e01c      	b.n	80124a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d006      	beq.n	801247e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	7adb      	ldrb	r3, [r3, #11]
 8012474:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	7a9b      	ldrb	r3, [r3, #10]
 801247a:	757b      	strb	r3, [r7, #21]
 801247c:	e003      	b.n	8012486 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801247e:	23ff      	movs	r3, #255	; 0xff
 8012480:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012482:	2300      	movs	r3, #0
 8012484:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012486:	7dba      	ldrb	r2, [r7, #22]
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	9302      	str	r3, [sp, #8]
 801248c:	2306      	movs	r3, #6
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	7d7b      	ldrb	r3, [r7, #21]
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	4613      	mov	r3, r2
 8012496:	683a      	ldr	r2, [r7, #0]
 8012498:	6879      	ldr	r1, [r7, #4]
 801249a:	68b8      	ldr	r0, [r7, #8]
 801249c:	f001 ff6c 	bl	8014378 <ip4_output_if>
 80124a0:	4603      	mov	r3, r0
 80124a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80124a4:	68b8      	ldr	r0, [r7, #8]
 80124a6:	f7f9 fedb 	bl	800c260 <pbuf_free>
  return err;
 80124aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3718      	adds	r7, #24
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	0801b984 	.word	0x0801b984
 80124bc:	0801c0dc 	.word	0x0801c0dc
 80124c0:	0801b9d8 	.word	0x0801b9d8

080124c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80124c4:	b590      	push	{r4, r7, lr}
 80124c6:	b08b      	sub	sp, #44	; 0x2c
 80124c8:	af04      	add	r7, sp, #16
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	607a      	str	r2, [r7, #4]
 80124d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d106      	bne.n	80124e6 <tcp_rst+0x22>
 80124d8:	4b1f      	ldr	r3, [pc, #124]	; (8012558 <tcp_rst+0x94>)
 80124da:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80124de:	491f      	ldr	r1, [pc, #124]	; (801255c <tcp_rst+0x98>)
 80124e0:	481f      	ldr	r0, [pc, #124]	; (8012560 <tcp_rst+0x9c>)
 80124e2:	f003 fee7 	bl	80162b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80124e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <tcp_rst+0x36>
 80124ec:	4b1a      	ldr	r3, [pc, #104]	; (8012558 <tcp_rst+0x94>)
 80124ee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80124f2:	491c      	ldr	r1, [pc, #112]	; (8012564 <tcp_rst+0xa0>)
 80124f4:	481a      	ldr	r0, [pc, #104]	; (8012560 <tcp_rst+0x9c>)
 80124f6:	f003 fedd 	bl	80162b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124fa:	2300      	movs	r3, #0
 80124fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80124fe:	f246 0308 	movw	r3, #24584	; 0x6008
 8012502:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012504:	7dfb      	ldrb	r3, [r7, #23]
 8012506:	b29c      	uxth	r4, r3
 8012508:	68b8      	ldr	r0, [r7, #8]
 801250a:	f7f8 fc22 	bl	800ad52 <lwip_htonl>
 801250e:	4602      	mov	r2, r0
 8012510:	8abb      	ldrh	r3, [r7, #20]
 8012512:	9303      	str	r3, [sp, #12]
 8012514:	2314      	movs	r3, #20
 8012516:	9302      	str	r3, [sp, #8]
 8012518:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801251a:	9301      	str	r3, [sp, #4]
 801251c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	4613      	mov	r3, r2
 8012522:	2200      	movs	r2, #0
 8012524:	4621      	mov	r1, r4
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f7ff fe90 	bl	801224c <tcp_output_alloc_header_common>
 801252c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d00c      	beq.n	801254e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	2200      	movs	r2, #0
 8012538:	6939      	ldr	r1, [r7, #16]
 801253a:	68f8      	ldr	r0, [r7, #12]
 801253c:	f7ff ff38 	bl	80123b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012542:	683a      	ldr	r2, [r7, #0]
 8012544:	6939      	ldr	r1, [r7, #16]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7ff ff72 	bl	8012430 <tcp_output_control_segment>
 801254c:	e000      	b.n	8012550 <tcp_rst+0x8c>
    return;
 801254e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012550:	371c      	adds	r7, #28
 8012552:	46bd      	mov	sp, r7
 8012554:	bd90      	pop	{r4, r7, pc}
 8012556:	bf00      	nop
 8012558:	0801b984 	.word	0x0801b984
 801255c:	0801c108 	.word	0x0801c108
 8012560:	0801b9d8 	.word	0x0801b9d8
 8012564:	0801c124 	.word	0x0801c124

08012568 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012568:	b590      	push	{r4, r7, lr}
 801256a:	b087      	sub	sp, #28
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012570:	2300      	movs	r3, #0
 8012572:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012574:	2300      	movs	r3, #0
 8012576:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d106      	bne.n	801258c <tcp_send_empty_ack+0x24>
 801257e:	4b28      	ldr	r3, [pc, #160]	; (8012620 <tcp_send_empty_ack+0xb8>)
 8012580:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012584:	4927      	ldr	r1, [pc, #156]	; (8012624 <tcp_send_empty_ack+0xbc>)
 8012586:	4828      	ldr	r0, [pc, #160]	; (8012628 <tcp_send_empty_ack+0xc0>)
 8012588:	f003 fe94 	bl	80162b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801258c:	7dfb      	ldrb	r3, [r7, #23]
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	b2db      	uxtb	r3, r3
 8012592:	f003 0304 	and.w	r3, r3, #4
 8012596:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012598:	7d7b      	ldrb	r3, [r7, #21]
 801259a:	b29c      	uxth	r4, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7f8 fbd6 	bl	800ad52 <lwip_htonl>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2200      	movs	r2, #0
 80125aa:	4621      	mov	r1, r4
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff fec1 	bl	8012334 <tcp_output_alloc_header>
 80125b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d109      	bne.n	80125ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	8b5b      	ldrh	r3, [r3, #26]
 80125be:	f043 0303 	orr.w	r3, r3, #3
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80125c8:	f06f 0301 	mvn.w	r3, #1
 80125cc:	e023      	b.n	8012616 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80125ce:	7dbb      	ldrb	r3, [r7, #22]
 80125d0:	7dfa      	ldrb	r2, [r7, #23]
 80125d2:	6939      	ldr	r1, [r7, #16]
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f7ff feeb 	bl	80123b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	3304      	adds	r3, #4
 80125e0:	6939      	ldr	r1, [r7, #16]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff ff24 	bl	8012430 <tcp_output_control_segment>
 80125e8:	4603      	mov	r3, r0
 80125ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80125ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d007      	beq.n	8012604 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	8b5b      	ldrh	r3, [r3, #26]
 80125f8:	f043 0303 	orr.w	r3, r3, #3
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	835a      	strh	r2, [r3, #26]
 8012602:	e006      	b.n	8012612 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	8b5b      	ldrh	r3, [r3, #26]
 8012608:	f023 0303 	bic.w	r3, r3, #3
 801260c:	b29a      	uxth	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012612:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012616:	4618      	mov	r0, r3
 8012618:	371c      	adds	r7, #28
 801261a:	46bd      	mov	sp, r7
 801261c:	bd90      	pop	{r4, r7, pc}
 801261e:	bf00      	nop
 8012620:	0801b984 	.word	0x0801b984
 8012624:	0801c140 	.word	0x0801c140
 8012628:	0801b9d8 	.word	0x0801b9d8

0801262c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801262c:	b590      	push	{r4, r7, lr}
 801262e:	b087      	sub	sp, #28
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012634:	2300      	movs	r3, #0
 8012636:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d106      	bne.n	801264c <tcp_keepalive+0x20>
 801263e:	4b18      	ldr	r3, [pc, #96]	; (80126a0 <tcp_keepalive+0x74>)
 8012640:	f640 0224 	movw	r2, #2084	; 0x824
 8012644:	4917      	ldr	r1, [pc, #92]	; (80126a4 <tcp_keepalive+0x78>)
 8012646:	4818      	ldr	r0, [pc, #96]	; (80126a8 <tcp_keepalive+0x7c>)
 8012648:	f003 fe34 	bl	80162b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801264c:	7dfb      	ldrb	r3, [r7, #23]
 801264e:	b29c      	uxth	r4, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012654:	3b01      	subs	r3, #1
 8012656:	4618      	mov	r0, r3
 8012658:	f7f8 fb7b 	bl	800ad52 <lwip_htonl>
 801265c:	4603      	mov	r3, r0
 801265e:	2200      	movs	r2, #0
 8012660:	4621      	mov	r1, r4
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7ff fe66 	bl	8012334 <tcp_output_alloc_header>
 8012668:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d102      	bne.n	8012676 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012670:	f04f 33ff 	mov.w	r3, #4294967295
 8012674:	e010      	b.n	8012698 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012676:	7dfb      	ldrb	r3, [r7, #23]
 8012678:	2200      	movs	r2, #0
 801267a:	6939      	ldr	r1, [r7, #16]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f7ff fe97 	bl	80123b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	3304      	adds	r3, #4
 8012688:	6939      	ldr	r1, [r7, #16]
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff fed0 	bl	8012430 <tcp_output_control_segment>
 8012690:	4603      	mov	r3, r0
 8012692:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012698:	4618      	mov	r0, r3
 801269a:	371c      	adds	r7, #28
 801269c:	46bd      	mov	sp, r7
 801269e:	bd90      	pop	{r4, r7, pc}
 80126a0:	0801b984 	.word	0x0801b984
 80126a4:	0801c160 	.word	0x0801c160
 80126a8:	0801b9d8 	.word	0x0801b9d8

080126ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b08b      	sub	sp, #44	; 0x2c
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80126b4:	2300      	movs	r3, #0
 80126b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d106      	bne.n	80126ce <tcp_zero_window_probe+0x22>
 80126c0:	4b4c      	ldr	r3, [pc, #304]	; (80127f4 <tcp_zero_window_probe+0x148>)
 80126c2:	f640 024f 	movw	r2, #2127	; 0x84f
 80126c6:	494c      	ldr	r1, [pc, #304]	; (80127f8 <tcp_zero_window_probe+0x14c>)
 80126c8:	484c      	ldr	r0, [pc, #304]	; (80127fc <tcp_zero_window_probe+0x150>)
 80126ca:	f003 fdf3 	bl	80162b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80126d4:	6a3b      	ldr	r3, [r7, #32]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d101      	bne.n	80126de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80126da:	2300      	movs	r3, #0
 80126dc:	e086      	b.n	80127ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126e4:	2bff      	cmp	r3, #255	; 0xff
 80126e6:	d007      	beq.n	80126f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126ee:	3301      	adds	r3, #1
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126f8:	6a3b      	ldr	r3, [r7, #32]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	899b      	ldrh	r3, [r3, #12]
 80126fe:	b29b      	uxth	r3, r3
 8012700:	4618      	mov	r0, r3
 8012702:	f7f8 fb11 	bl	800ad28 <lwip_htons>
 8012706:	4603      	mov	r3, r0
 8012708:	b2db      	uxtb	r3, r3
 801270a:	f003 0301 	and.w	r3, r3, #1
 801270e:	2b00      	cmp	r3, #0
 8012710:	d005      	beq.n	801271e <tcp_zero_window_probe+0x72>
 8012712:	6a3b      	ldr	r3, [r7, #32]
 8012714:	891b      	ldrh	r3, [r3, #8]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <tcp_zero_window_probe+0x72>
 801271a:	2301      	movs	r3, #1
 801271c:	e000      	b.n	8012720 <tcp_zero_window_probe+0x74>
 801271e:	2300      	movs	r3, #0
 8012720:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012722:	7ffb      	ldrb	r3, [r7, #31]
 8012724:	2b00      	cmp	r3, #0
 8012726:	bf0c      	ite	eq
 8012728:	2301      	moveq	r3, #1
 801272a:	2300      	movne	r3, #0
 801272c:	b2db      	uxtb	r3, r3
 801272e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012734:	b299      	uxth	r1, r3
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	8bba      	ldrh	r2, [r7, #28]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7ff fdf8 	bl	8012334 <tcp_output_alloc_header>
 8012744:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d102      	bne.n	8012752 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801274c:	f04f 33ff 	mov.w	r3, #4294967295
 8012750:	e04c      	b.n	80127ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012758:	7ffb      	ldrb	r3, [r7, #31]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d011      	beq.n	8012782 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	899b      	ldrh	r3, [r3, #12]
 8012762:	b29b      	uxth	r3, r3
 8012764:	b21b      	sxth	r3, r3
 8012766:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801276a:	b21c      	sxth	r4, r3
 801276c:	2011      	movs	r0, #17
 801276e:	f7f8 fadb 	bl	800ad28 <lwip_htons>
 8012772:	4603      	mov	r3, r0
 8012774:	b21b      	sxth	r3, r3
 8012776:	4323      	orrs	r3, r4
 8012778:	b21b      	sxth	r3, r3
 801277a:	b29a      	uxth	r2, r3
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	819a      	strh	r2, [r3, #12]
 8012780:	e010      	b.n	80127a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	3314      	adds	r3, #20
 8012788:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801278a:	6a3b      	ldr	r3, [r7, #32]
 801278c:	6858      	ldr	r0, [r3, #4]
 801278e:	6a3b      	ldr	r3, [r7, #32]
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	891a      	ldrh	r2, [r3, #8]
 8012794:	6a3b      	ldr	r3, [r7, #32]
 8012796:	891b      	ldrh	r3, [r3, #8]
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	b29b      	uxth	r3, r3
 801279c:	2201      	movs	r2, #1
 801279e:	6939      	ldr	r1, [r7, #16]
 80127a0:	f7f9 ff58 	bl	800c654 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80127a4:	6a3b      	ldr	r3, [r7, #32]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7f8 fad1 	bl	800ad52 <lwip_htonl>
 80127b0:	4603      	mov	r3, r0
 80127b2:	3301      	adds	r3, #1
 80127b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	1ad3      	subs	r3, r2, r3
 80127be:	2b00      	cmp	r3, #0
 80127c0:	da02      	bge.n	80127c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68fa      	ldr	r2, [r7, #12]
 80127c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80127c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127cc:	2200      	movs	r2, #0
 80127ce:	69b9      	ldr	r1, [r7, #24]
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f7ff fded 	bl	80123b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	3304      	adds	r3, #4
 80127dc:	69b9      	ldr	r1, [r7, #24]
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff fe26 	bl	8012430 <tcp_output_control_segment>
 80127e4:	4603      	mov	r3, r0
 80127e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	372c      	adds	r7, #44	; 0x2c
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd90      	pop	{r4, r7, pc}
 80127f4:	0801b984 	.word	0x0801b984
 80127f8:	0801c17c 	.word	0x0801c17c
 80127fc:	0801b9d8 	.word	0x0801b9d8

08012800 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012808:	f7fa f812 	bl	800c830 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801280c:	4b0a      	ldr	r3, [pc, #40]	; (8012838 <tcpip_tcp_timer+0x38>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d103      	bne.n	801281c <tcpip_tcp_timer+0x1c>
 8012814:	4b09      	ldr	r3, [pc, #36]	; (801283c <tcpip_tcp_timer+0x3c>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d005      	beq.n	8012828 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801281c:	2200      	movs	r2, #0
 801281e:	4908      	ldr	r1, [pc, #32]	; (8012840 <tcpip_tcp_timer+0x40>)
 8012820:	20fa      	movs	r0, #250	; 0xfa
 8012822:	f000 f8f1 	bl	8012a08 <sys_timeout>
 8012826:	e002      	b.n	801282e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012828:	4b06      	ldr	r3, [pc, #24]	; (8012844 <tcpip_tcp_timer+0x44>)
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]
  }
}
 801282e:	bf00      	nop
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	20007500 	.word	0x20007500
 801283c:	20007510 	.word	0x20007510
 8012840:	08012801 	.word	0x08012801
 8012844:	200004e8 	.word	0x200004e8

08012848 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801284c:	4b0a      	ldr	r3, [pc, #40]	; (8012878 <tcp_timer_needed+0x30>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d10f      	bne.n	8012874 <tcp_timer_needed+0x2c>
 8012854:	4b09      	ldr	r3, [pc, #36]	; (801287c <tcp_timer_needed+0x34>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d103      	bne.n	8012864 <tcp_timer_needed+0x1c>
 801285c:	4b08      	ldr	r3, [pc, #32]	; (8012880 <tcp_timer_needed+0x38>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d007      	beq.n	8012874 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012864:	4b04      	ldr	r3, [pc, #16]	; (8012878 <tcp_timer_needed+0x30>)
 8012866:	2201      	movs	r2, #1
 8012868:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801286a:	2200      	movs	r2, #0
 801286c:	4905      	ldr	r1, [pc, #20]	; (8012884 <tcp_timer_needed+0x3c>)
 801286e:	20fa      	movs	r0, #250	; 0xfa
 8012870:	f000 f8ca 	bl	8012a08 <sys_timeout>
  }
}
 8012874:	bf00      	nop
 8012876:	bd80      	pop	{r7, pc}
 8012878:	200004e8 	.word	0x200004e8
 801287c:	20007500 	.word	0x20007500
 8012880:	20007510 	.word	0x20007510
 8012884:	08012801 	.word	0x08012801

08012888 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012894:	2006      	movs	r0, #6
 8012896:	f7f8 fe9d 	bl	800b5d4 <memp_malloc>
 801289a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d109      	bne.n	80128b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d151      	bne.n	801294c <sys_timeout_abs+0xc4>
 80128a8:	4b2a      	ldr	r3, [pc, #168]	; (8012954 <sys_timeout_abs+0xcc>)
 80128aa:	22be      	movs	r2, #190	; 0xbe
 80128ac:	492a      	ldr	r1, [pc, #168]	; (8012958 <sys_timeout_abs+0xd0>)
 80128ae:	482b      	ldr	r0, [pc, #172]	; (801295c <sys_timeout_abs+0xd4>)
 80128b0:	f003 fd00 	bl	80162b4 <iprintf>
    return;
 80128b4:	e04a      	b.n	801294c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	2200      	movs	r2, #0
 80128ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	68ba      	ldr	r2, [r7, #8]
 80128c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80128ce:	4b24      	ldr	r3, [pc, #144]	; (8012960 <sys_timeout_abs+0xd8>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d103      	bne.n	80128de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80128d6:	4a22      	ldr	r2, [pc, #136]	; (8012960 <sys_timeout_abs+0xd8>)
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	6013      	str	r3, [r2, #0]
    return;
 80128dc:	e037      	b.n	801294e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	685a      	ldr	r2, [r3, #4]
 80128e2:	4b1f      	ldr	r3, [pc, #124]	; (8012960 <sys_timeout_abs+0xd8>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	0fdb      	lsrs	r3, r3, #31
 80128ec:	f003 0301 	and.w	r3, r3, #1
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d007      	beq.n	8012906 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80128f6:	4b1a      	ldr	r3, [pc, #104]	; (8012960 <sys_timeout_abs+0xd8>)
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80128fe:	4a18      	ldr	r2, [pc, #96]	; (8012960 <sys_timeout_abs+0xd8>)
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	6013      	str	r3, [r2, #0]
 8012904:	e023      	b.n	801294e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012906:	4b16      	ldr	r3, [pc, #88]	; (8012960 <sys_timeout_abs+0xd8>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	617b      	str	r3, [r7, #20]
 801290c:	e01a      	b.n	8012944 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00b      	beq.n	801292e <sys_timeout_abs+0xa6>
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	685a      	ldr	r2, [r3, #4]
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	0fdb      	lsrs	r3, r3, #31
 8012924:	f003 0301 	and.w	r3, r3, #1
 8012928:	b2db      	uxtb	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d007      	beq.n	801293e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	681a      	ldr	r2, [r3, #0]
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	693a      	ldr	r2, [r7, #16]
 801293a:	601a      	str	r2, [r3, #0]
        break;
 801293c:	e007      	b.n	801294e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	617b      	str	r3, [r7, #20]
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d1e1      	bne.n	801290e <sys_timeout_abs+0x86>
 801294a:	e000      	b.n	801294e <sys_timeout_abs+0xc6>
    return;
 801294c:	bf00      	nop
      }
    }
  }
}
 801294e:	3718      	adds	r7, #24
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	0801c1a0 	.word	0x0801c1a0
 8012958:	0801c1d4 	.word	0x0801c1d4
 801295c:	0801c214 	.word	0x0801c214
 8012960:	200004e0 	.word	0x200004e0

08012964 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b086      	sub	sp, #24
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	4798      	blx	r3

  now = sys_now();
 8012976:	f7f8 f937 	bl	800abe8 <sys_now>
 801297a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	4b0f      	ldr	r3, [pc, #60]	; (80129c0 <lwip_cyclic_timer+0x5c>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4413      	add	r3, r2
 8012986:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	0fdb      	lsrs	r3, r3, #31
 8012990:	f003 0301 	and.w	r3, r3, #1
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b00      	cmp	r3, #0
 8012998:	d009      	beq.n	80129ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	681a      	ldr	r2, [r3, #0]
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	4413      	add	r3, r2
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	4907      	ldr	r1, [pc, #28]	; (80129c4 <lwip_cyclic_timer+0x60>)
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7ff ff6e 	bl	8012888 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80129ac:	e004      	b.n	80129b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	4904      	ldr	r1, [pc, #16]	; (80129c4 <lwip_cyclic_timer+0x60>)
 80129b2:	68f8      	ldr	r0, [r7, #12]
 80129b4:	f7ff ff68 	bl	8012888 <sys_timeout_abs>
}
 80129b8:	bf00      	nop
 80129ba:	3718      	adds	r7, #24
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	200004e4 	.word	0x200004e4
 80129c4:	08012965 	.word	0x08012965

080129c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129ce:	2301      	movs	r3, #1
 80129d0:	607b      	str	r3, [r7, #4]
 80129d2:	e00e      	b.n	80129f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80129d4:	4a0a      	ldr	r2, [pc, #40]	; (8012a00 <sys_timeouts_init+0x38>)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	00db      	lsls	r3, r3, #3
 80129e0:	4a07      	ldr	r2, [pc, #28]	; (8012a00 <sys_timeouts_init+0x38>)
 80129e2:	4413      	add	r3, r2
 80129e4:	461a      	mov	r2, r3
 80129e6:	4907      	ldr	r1, [pc, #28]	; (8012a04 <sys_timeouts_init+0x3c>)
 80129e8:	f000 f80e 	bl	8012a08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3301      	adds	r3, #1
 80129f0:	607b      	str	r3, [r7, #4]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b02      	cmp	r3, #2
 80129f6:	d9ed      	bls.n	80129d4 <sys_timeouts_init+0xc>
  }
}
 80129f8:	bf00      	nop
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	0801cd8c 	.word	0x0801cd8c
 8012a04:	08012965 	.word	0x08012965

08012a08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b086      	sub	sp, #24
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a1a:	d306      	bcc.n	8012a2a <sys_timeout+0x22>
 8012a1c:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <sys_timeout+0x40>)
 8012a1e:	f240 1229 	movw	r2, #297	; 0x129
 8012a22:	490a      	ldr	r1, [pc, #40]	; (8012a4c <sys_timeout+0x44>)
 8012a24:	480a      	ldr	r0, [pc, #40]	; (8012a50 <sys_timeout+0x48>)
 8012a26:	f003 fc45 	bl	80162b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012a2a:	f7f8 f8dd 	bl	800abe8 <sys_now>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	4413      	add	r3, r2
 8012a34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	68b9      	ldr	r1, [r7, #8]
 8012a3a:	6978      	ldr	r0, [r7, #20]
 8012a3c:	f7ff ff24 	bl	8012888 <sys_timeout_abs>
#endif
}
 8012a40:	bf00      	nop
 8012a42:	3718      	adds	r7, #24
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	0801c1a0 	.word	0x0801c1a0
 8012a4c:	0801c23c 	.word	0x0801c23c
 8012a50:	0801c214 	.word	0x0801c214

08012a54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012a5a:	f7f8 f8c5 	bl	800abe8 <sys_now>
 8012a5e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012a60:	4b1a      	ldr	r3, [pc, #104]	; (8012acc <sys_check_timeouts+0x78>)
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <sys_check_timeouts+0x1a>
 8012a6a:	f7f9 f8c3 	bl	800bbf4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012a6e:	4b18      	ldr	r3, [pc, #96]	; (8012ad0 <sys_check_timeouts+0x7c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d022      	beq.n	8012ac0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	0fdb      	lsrs	r3, r3, #31
 8012a84:	f003 0301 	and.w	r3, r3, #1
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d11a      	bne.n	8012ac4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	4a0f      	ldr	r2, [pc, #60]	; (8012ad0 <sys_check_timeouts+0x7c>)
 8012a94:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	4a0b      	ldr	r2, [pc, #44]	; (8012ad4 <sys_check_timeouts+0x80>)
 8012aa8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012aaa:	68b9      	ldr	r1, [r7, #8]
 8012aac:	2006      	movs	r0, #6
 8012aae:	f7f8 fddd 	bl	800b66c <memp_free>
    if (handler != NULL) {
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d0d3      	beq.n	8012a60 <sys_check_timeouts+0xc>
      handler(arg);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6838      	ldr	r0, [r7, #0]
 8012abc:	4798      	blx	r3
  do {
 8012abe:	e7cf      	b.n	8012a60 <sys_check_timeouts+0xc>
      return;
 8012ac0:	bf00      	nop
 8012ac2:	e000      	b.n	8012ac6 <sys_check_timeouts+0x72>
      return;
 8012ac4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	200074f8 	.word	0x200074f8
 8012ad0:	200004e0 	.word	0x200004e0
 8012ad4:	200004e4 	.word	0x200004e4

08012ad8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012adc:	f003 fc02 	bl	80162e4 <rand>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012aee:	b29a      	uxth	r2, r3
 8012af0:	4b01      	ldr	r3, [pc, #4]	; (8012af8 <udp_init+0x20>)
 8012af2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012af4:	bf00      	nop
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	2000001c 	.word	0x2000001c

08012afc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	4613      	mov	r3, r2
 8012b08:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d105      	bne.n	8012b1c <udp_input_local_match+0x20>
 8012b10:	4b27      	ldr	r3, [pc, #156]	; (8012bb0 <udp_input_local_match+0xb4>)
 8012b12:	2287      	movs	r2, #135	; 0x87
 8012b14:	4927      	ldr	r1, [pc, #156]	; (8012bb4 <udp_input_local_match+0xb8>)
 8012b16:	4828      	ldr	r0, [pc, #160]	; (8012bb8 <udp_input_local_match+0xbc>)
 8012b18:	f003 fbcc 	bl	80162b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d105      	bne.n	8012b2e <udp_input_local_match+0x32>
 8012b22:	4b23      	ldr	r3, [pc, #140]	; (8012bb0 <udp_input_local_match+0xb4>)
 8012b24:	2288      	movs	r2, #136	; 0x88
 8012b26:	4925      	ldr	r1, [pc, #148]	; (8012bbc <udp_input_local_match+0xc0>)
 8012b28:	4823      	ldr	r0, [pc, #140]	; (8012bb8 <udp_input_local_match+0xbc>)
 8012b2a:	f003 fbc3 	bl	80162b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	7a1b      	ldrb	r3, [r3, #8]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00b      	beq.n	8012b4e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	7a1a      	ldrb	r2, [r3, #8]
 8012b3a:	4b21      	ldr	r3, [pc, #132]	; (8012bc0 <udp_input_local_match+0xc4>)
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b42:	3301      	adds	r3, #1
 8012b44:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d001      	beq.n	8012b4e <udp_input_local_match+0x52>
    return 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	e02b      	b.n	8012ba6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012b4e:	79fb      	ldrb	r3, [r7, #7]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d018      	beq.n	8012b86 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d013      	beq.n	8012b82 <udp_input_local_match+0x86>
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d00f      	beq.n	8012b82 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b62:	4b17      	ldr	r3, [pc, #92]	; (8012bc0 <udp_input_local_match+0xc4>)
 8012b64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b6a:	d00a      	beq.n	8012b82 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	4b13      	ldr	r3, [pc, #76]	; (8012bc0 <udp_input_local_match+0xc4>)
 8012b72:	695b      	ldr	r3, [r3, #20]
 8012b74:	405a      	eors	r2, r3
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	3308      	adds	r3, #8
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d110      	bne.n	8012ba4 <udp_input_local_match+0xa8>
          return 1;
 8012b82:	2301      	movs	r3, #1
 8012b84:	e00f      	b.n	8012ba6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d009      	beq.n	8012ba0 <udp_input_local_match+0xa4>
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d005      	beq.n	8012ba0 <udp_input_local_match+0xa4>
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	4b09      	ldr	r3, [pc, #36]	; (8012bc0 <udp_input_local_match+0xc4>)
 8012b9a:	695b      	ldr	r3, [r3, #20]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d101      	bne.n	8012ba4 <udp_input_local_match+0xa8>
        return 1;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	e000      	b.n	8012ba6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012ba4:	2300      	movs	r3, #0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3710      	adds	r7, #16
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	0801c288 	.word	0x0801c288
 8012bb4:	0801c2b8 	.word	0x0801c2b8
 8012bb8:	0801c2dc 	.word	0x0801c2dc
 8012bbc:	0801c304 	.word	0x0801c304
 8012bc0:	20003fbc 	.word	0x20003fbc

08012bc4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012bc4:	b590      	push	{r4, r7, lr}
 8012bc6:	b08d      	sub	sp, #52	; 0x34
 8012bc8:	af02      	add	r7, sp, #8
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d105      	bne.n	8012be4 <udp_input+0x20>
 8012bd8:	4b7c      	ldr	r3, [pc, #496]	; (8012dcc <udp_input+0x208>)
 8012bda:	22cf      	movs	r2, #207	; 0xcf
 8012bdc:	497c      	ldr	r1, [pc, #496]	; (8012dd0 <udp_input+0x20c>)
 8012bde:	487d      	ldr	r0, [pc, #500]	; (8012dd4 <udp_input+0x210>)
 8012be0:	f003 fb68 	bl	80162b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d105      	bne.n	8012bf6 <udp_input+0x32>
 8012bea:	4b78      	ldr	r3, [pc, #480]	; (8012dcc <udp_input+0x208>)
 8012bec:	22d0      	movs	r2, #208	; 0xd0
 8012bee:	497a      	ldr	r1, [pc, #488]	; (8012dd8 <udp_input+0x214>)
 8012bf0:	4878      	ldr	r0, [pc, #480]	; (8012dd4 <udp_input+0x210>)
 8012bf2:	f003 fb5f 	bl	80162b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	895b      	ldrh	r3, [r3, #10]
 8012bfa:	2b07      	cmp	r3, #7
 8012bfc:	d803      	bhi.n	8012c06 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f7f9 fb2e 	bl	800c260 <pbuf_free>
    goto end;
 8012c04:	e0de      	b.n	8012dc4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012c0c:	4b73      	ldr	r3, [pc, #460]	; (8012ddc <udp_input+0x218>)
 8012c0e:	695a      	ldr	r2, [r3, #20]
 8012c10:	4b72      	ldr	r3, [pc, #456]	; (8012ddc <udp_input+0x218>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	4619      	mov	r1, r3
 8012c16:	4610      	mov	r0, r2
 8012c18:	f001 fc86 	bl	8014528 <ip4_addr_isbroadcast_u32>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	881b      	ldrh	r3, [r3, #0]
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7f8 f87e 	bl	800ad28 <lwip_htons>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	885b      	ldrh	r3, [r3, #2]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7f8 f876 	bl	800ad28 <lwip_htons>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012c40:	2300      	movs	r3, #0
 8012c42:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012c44:	2300      	movs	r3, #0
 8012c46:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c4c:	4b64      	ldr	r3, [pc, #400]	; (8012de0 <udp_input+0x21c>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	627b      	str	r3, [r7, #36]	; 0x24
 8012c52:	e054      	b.n	8012cfe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	8a5b      	ldrh	r3, [r3, #18]
 8012c58:	89fa      	ldrh	r2, [r7, #14]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d14a      	bne.n	8012cf4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012c5e:	7cfb      	ldrb	r3, [r7, #19]
 8012c60:	461a      	mov	r2, r3
 8012c62:	6839      	ldr	r1, [r7, #0]
 8012c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c66:	f7ff ff49 	bl	8012afc <udp_input_local_match>
 8012c6a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d041      	beq.n	8012cf4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	7c1b      	ldrb	r3, [r3, #16]
 8012c74:	f003 0304 	and.w	r3, r3, #4
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d11d      	bne.n	8012cb8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d102      	bne.n	8012c88 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c84:	61fb      	str	r3, [r7, #28]
 8012c86:	e017      	b.n	8012cb8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012c88:	7cfb      	ldrb	r3, [r7, #19]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d014      	beq.n	8012cb8 <udp_input+0xf4>
 8012c8e:	4b53      	ldr	r3, [pc, #332]	; (8012ddc <udp_input+0x218>)
 8012c90:	695b      	ldr	r3, [r3, #20]
 8012c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c96:	d10f      	bne.n	8012cb8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d008      	beq.n	8012cb8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	3304      	adds	r3, #4
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d101      	bne.n	8012cb8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cba:	8a9b      	ldrh	r3, [r3, #20]
 8012cbc:	8a3a      	ldrh	r2, [r7, #16]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d118      	bne.n	8012cf4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d005      	beq.n	8012cd6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ccc:	685a      	ldr	r2, [r3, #4]
 8012cce:	4b43      	ldr	r3, [pc, #268]	; (8012ddc <udp_input+0x218>)
 8012cd0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d10e      	bne.n	8012cf4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012cd6:	6a3b      	ldr	r3, [r7, #32]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d014      	beq.n	8012d06 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	68da      	ldr	r2, [r3, #12]
 8012ce0:	6a3b      	ldr	r3, [r7, #32]
 8012ce2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012ce4:	4b3e      	ldr	r3, [pc, #248]	; (8012de0 <udp_input+0x21c>)
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012cec:	4a3c      	ldr	r2, [pc, #240]	; (8012de0 <udp_input+0x21c>)
 8012cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012cf2:	e008      	b.n	8012d06 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8012cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d1a7      	bne.n	8012c54 <udp_input+0x90>
 8012d04:	e000      	b.n	8012d08 <udp_input+0x144>
        break;
 8012d06:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d101      	bne.n	8012d12 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d002      	beq.n	8012d1e <udp_input+0x15a>
    for_us = 1;
 8012d18:	2301      	movs	r3, #1
 8012d1a:	76fb      	strb	r3, [r7, #27]
 8012d1c:	e00a      	b.n	8012d34 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	3304      	adds	r3, #4
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	4b2d      	ldr	r3, [pc, #180]	; (8012ddc <udp_input+0x218>)
 8012d26:	695b      	ldr	r3, [r3, #20]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	bf0c      	ite	eq
 8012d2c:	2301      	moveq	r3, #1
 8012d2e:	2300      	movne	r3, #0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012d34:	7efb      	ldrb	r3, [r7, #27]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d041      	beq.n	8012dbe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012d3a:	2108      	movs	r1, #8
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7f9 fa09 	bl	800c154 <pbuf_remove_header>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d00a      	beq.n	8012d5e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012d48:	4b20      	ldr	r3, [pc, #128]	; (8012dcc <udp_input+0x208>)
 8012d4a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012d4e:	4925      	ldr	r1, [pc, #148]	; (8012de4 <udp_input+0x220>)
 8012d50:	4820      	ldr	r0, [pc, #128]	; (8012dd4 <udp_input+0x210>)
 8012d52:	f003 faaf 	bl	80162b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7f9 fa82 	bl	800c260 <pbuf_free>
      goto end;
 8012d5c:	e032      	b.n	8012dc4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d012      	beq.n	8012d8a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	699b      	ldr	r3, [r3, #24]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00a      	beq.n	8012d82 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6e:	699c      	ldr	r4, [r3, #24]
 8012d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d72:	69d8      	ldr	r0, [r3, #28]
 8012d74:	8a3b      	ldrh	r3, [r7, #16]
 8012d76:	9300      	str	r3, [sp, #0]
 8012d78:	4b1b      	ldr	r3, [pc, #108]	; (8012de8 <udp_input+0x224>)
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d7e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d80:	e021      	b.n	8012dc6 <udp_input+0x202>
        pbuf_free(p);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7f9 fa6c 	bl	800c260 <pbuf_free>
        goto end;
 8012d88:	e01c      	b.n	8012dc4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d8a:	7cfb      	ldrb	r3, [r7, #19]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d112      	bne.n	8012db6 <udp_input+0x1f2>
 8012d90:	4b12      	ldr	r3, [pc, #72]	; (8012ddc <udp_input+0x218>)
 8012d92:	695b      	ldr	r3, [r3, #20]
 8012d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d98:	2be0      	cmp	r3, #224	; 0xe0
 8012d9a:	d00c      	beq.n	8012db6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012d9c:	4b0f      	ldr	r3, [pc, #60]	; (8012ddc <udp_input+0x218>)
 8012d9e:	899b      	ldrh	r3, [r3, #12]
 8012da0:	3308      	adds	r3, #8
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	b21b      	sxth	r3, r3
 8012da6:	4619      	mov	r1, r3
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7f9 fa46 	bl	800c23a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012dae:	2103      	movs	r1, #3
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f001 f89b 	bl	8013eec <icmp_dest_unreach>
      pbuf_free(p);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7f9 fa52 	bl	800c260 <pbuf_free>
  return;
 8012dbc:	e003      	b.n	8012dc6 <udp_input+0x202>
    pbuf_free(p);
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f7f9 fa4e 	bl	800c260 <pbuf_free>
  return;
 8012dc4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012dc6:	372c      	adds	r7, #44	; 0x2c
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd90      	pop	{r4, r7, pc}
 8012dcc:	0801c288 	.word	0x0801c288
 8012dd0:	0801c32c 	.word	0x0801c32c
 8012dd4:	0801c2dc 	.word	0x0801c2dc
 8012dd8:	0801c344 	.word	0x0801c344
 8012ddc:	20003fbc 	.word	0x20003fbc
 8012de0:	20007518 	.word	0x20007518
 8012de4:	0801c360 	.word	0x0801c360
 8012de8:	20003fcc 	.word	0x20003fcc

08012dec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012dec:	b480      	push	{r7}
 8012dee:	b085      	sub	sp, #20
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d01e      	beq.n	8012e3a <udp_netif_ip_addr_changed+0x4e>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d01a      	beq.n	8012e3a <udp_netif_ip_addr_changed+0x4e>
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d017      	beq.n	8012e3a <udp_netif_ip_addr_changed+0x4e>
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d013      	beq.n	8012e3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012e12:	4b0d      	ldr	r3, [pc, #52]	; (8012e48 <udp_netif_ip_addr_changed+0x5c>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	60fb      	str	r3, [r7, #12]
 8012e18:	e00c      	b.n	8012e34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d103      	bne.n	8012e2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	681a      	ldr	r2, [r3, #0]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	68db      	ldr	r3, [r3, #12]
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1ef      	bne.n	8012e1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012e3a:	bf00      	nop
 8012e3c:	3714      	adds	r7, #20
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	20007518 	.word	0x20007518

08012e4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012e54:	4915      	ldr	r1, [pc, #84]	; (8012eac <etharp_free_entry+0x60>)
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	4613      	mov	r3, r2
 8012e5a:	005b      	lsls	r3, r3, #1
 8012e5c:	4413      	add	r3, r2
 8012e5e:	00db      	lsls	r3, r3, #3
 8012e60:	440b      	add	r3, r1
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d013      	beq.n	8012e90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012e68:	4910      	ldr	r1, [pc, #64]	; (8012eac <etharp_free_entry+0x60>)
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	005b      	lsls	r3, r3, #1
 8012e70:	4413      	add	r3, r2
 8012e72:	00db      	lsls	r3, r3, #3
 8012e74:	440b      	add	r3, r1
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7f9 f9f1 	bl	800c260 <pbuf_free>
    arp_table[i].q = NULL;
 8012e7e:	490b      	ldr	r1, [pc, #44]	; (8012eac <etharp_free_entry+0x60>)
 8012e80:	687a      	ldr	r2, [r7, #4]
 8012e82:	4613      	mov	r3, r2
 8012e84:	005b      	lsls	r3, r3, #1
 8012e86:	4413      	add	r3, r2
 8012e88:	00db      	lsls	r3, r3, #3
 8012e8a:	440b      	add	r3, r1
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012e90:	4906      	ldr	r1, [pc, #24]	; (8012eac <etharp_free_entry+0x60>)
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	4613      	mov	r3, r2
 8012e96:	005b      	lsls	r3, r3, #1
 8012e98:	4413      	add	r3, r2
 8012e9a:	00db      	lsls	r3, r3, #3
 8012e9c:	440b      	add	r3, r1
 8012e9e:	3314      	adds	r3, #20
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012ea4:	bf00      	nop
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	200004ec 	.word	0x200004ec

08012eb0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	607b      	str	r3, [r7, #4]
 8012eba:	e096      	b.n	8012fea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012ebc:	494f      	ldr	r1, [pc, #316]	; (8012ffc <etharp_tmr+0x14c>)
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	005b      	lsls	r3, r3, #1
 8012ec4:	4413      	add	r3, r2
 8012ec6:	00db      	lsls	r3, r3, #3
 8012ec8:	440b      	add	r3, r1
 8012eca:	3314      	adds	r3, #20
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012ed0:	78fb      	ldrb	r3, [r7, #3]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f000 8086 	beq.w	8012fe4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012ed8:	4948      	ldr	r1, [pc, #288]	; (8012ffc <etharp_tmr+0x14c>)
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	4613      	mov	r3, r2
 8012ede:	005b      	lsls	r3, r3, #1
 8012ee0:	4413      	add	r3, r2
 8012ee2:	00db      	lsls	r3, r3, #3
 8012ee4:	440b      	add	r3, r1
 8012ee6:	3312      	adds	r3, #18
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	3301      	adds	r3, #1
 8012eec:	b298      	uxth	r0, r3
 8012eee:	4943      	ldr	r1, [pc, #268]	; (8012ffc <etharp_tmr+0x14c>)
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	005b      	lsls	r3, r3, #1
 8012ef6:	4413      	add	r3, r2
 8012ef8:	00db      	lsls	r3, r3, #3
 8012efa:	440b      	add	r3, r1
 8012efc:	3312      	adds	r3, #18
 8012efe:	4602      	mov	r2, r0
 8012f00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012f02:	493e      	ldr	r1, [pc, #248]	; (8012ffc <etharp_tmr+0x14c>)
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	4613      	mov	r3, r2
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	4413      	add	r3, r2
 8012f0c:	00db      	lsls	r3, r3, #3
 8012f0e:	440b      	add	r3, r1
 8012f10:	3312      	adds	r3, #18
 8012f12:	881b      	ldrh	r3, [r3, #0]
 8012f14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012f18:	d215      	bcs.n	8012f46 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f1a:	4938      	ldr	r1, [pc, #224]	; (8012ffc <etharp_tmr+0x14c>)
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	4613      	mov	r3, r2
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	4413      	add	r3, r2
 8012f24:	00db      	lsls	r3, r3, #3
 8012f26:	440b      	add	r3, r1
 8012f28:	3314      	adds	r3, #20
 8012f2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	d10e      	bne.n	8012f4e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012f30:	4932      	ldr	r1, [pc, #200]	; (8012ffc <etharp_tmr+0x14c>)
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	4613      	mov	r3, r2
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	4413      	add	r3, r2
 8012f3a:	00db      	lsls	r3, r3, #3
 8012f3c:	440b      	add	r3, r1
 8012f3e:	3312      	adds	r3, #18
 8012f40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f42:	2b04      	cmp	r3, #4
 8012f44:	d903      	bls.n	8012f4e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f7ff ff80 	bl	8012e4c <etharp_free_entry>
 8012f4c:	e04a      	b.n	8012fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012f4e:	492b      	ldr	r1, [pc, #172]	; (8012ffc <etharp_tmr+0x14c>)
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	4613      	mov	r3, r2
 8012f54:	005b      	lsls	r3, r3, #1
 8012f56:	4413      	add	r3, r2
 8012f58:	00db      	lsls	r3, r3, #3
 8012f5a:	440b      	add	r3, r1
 8012f5c:	3314      	adds	r3, #20
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	2b03      	cmp	r3, #3
 8012f62:	d10a      	bne.n	8012f7a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012f64:	4925      	ldr	r1, [pc, #148]	; (8012ffc <etharp_tmr+0x14c>)
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	4613      	mov	r3, r2
 8012f6a:	005b      	lsls	r3, r3, #1
 8012f6c:	4413      	add	r3, r2
 8012f6e:	00db      	lsls	r3, r3, #3
 8012f70:	440b      	add	r3, r1
 8012f72:	3314      	adds	r3, #20
 8012f74:	2204      	movs	r2, #4
 8012f76:	701a      	strb	r2, [r3, #0]
 8012f78:	e034      	b.n	8012fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012f7a:	4920      	ldr	r1, [pc, #128]	; (8012ffc <etharp_tmr+0x14c>)
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	4613      	mov	r3, r2
 8012f80:	005b      	lsls	r3, r3, #1
 8012f82:	4413      	add	r3, r2
 8012f84:	00db      	lsls	r3, r3, #3
 8012f86:	440b      	add	r3, r1
 8012f88:	3314      	adds	r3, #20
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	2b04      	cmp	r3, #4
 8012f8e:	d10a      	bne.n	8012fa6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012f90:	491a      	ldr	r1, [pc, #104]	; (8012ffc <etharp_tmr+0x14c>)
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	4613      	mov	r3, r2
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	4413      	add	r3, r2
 8012f9a:	00db      	lsls	r3, r3, #3
 8012f9c:	440b      	add	r3, r1
 8012f9e:	3314      	adds	r3, #20
 8012fa0:	2202      	movs	r2, #2
 8012fa2:	701a      	strb	r2, [r3, #0]
 8012fa4:	e01e      	b.n	8012fe4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012fa6:	4915      	ldr	r1, [pc, #84]	; (8012ffc <etharp_tmr+0x14c>)
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	4613      	mov	r3, r2
 8012fac:	005b      	lsls	r3, r3, #1
 8012fae:	4413      	add	r3, r2
 8012fb0:	00db      	lsls	r3, r3, #3
 8012fb2:	440b      	add	r3, r1
 8012fb4:	3314      	adds	r3, #20
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d113      	bne.n	8012fe4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012fbc:	490f      	ldr	r1, [pc, #60]	; (8012ffc <etharp_tmr+0x14c>)
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	005b      	lsls	r3, r3, #1
 8012fc4:	4413      	add	r3, r2
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	440b      	add	r3, r1
 8012fca:	3308      	adds	r3, #8
 8012fcc:	6818      	ldr	r0, [r3, #0]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	4613      	mov	r3, r2
 8012fd2:	005b      	lsls	r3, r3, #1
 8012fd4:	4413      	add	r3, r2
 8012fd6:	00db      	lsls	r3, r3, #3
 8012fd8:	4a08      	ldr	r2, [pc, #32]	; (8012ffc <etharp_tmr+0x14c>)
 8012fda:	4413      	add	r3, r2
 8012fdc:	3304      	adds	r3, #4
 8012fde:	4619      	mov	r1, r3
 8012fe0:	f000 fe6e 	bl	8013cc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	607b      	str	r3, [r7, #4]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2b09      	cmp	r3, #9
 8012fee:	f77f af65 	ble.w	8012ebc <etharp_tmr+0xc>
      }
    }
  }
}
 8012ff2:	bf00      	nop
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200004ec 	.word	0x200004ec

08013000 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b08a      	sub	sp, #40	; 0x28
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	460b      	mov	r3, r1
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801300e:	230a      	movs	r3, #10
 8013010:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013012:	230a      	movs	r3, #10
 8013014:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013016:	230a      	movs	r3, #10
 8013018:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801301e:	230a      	movs	r3, #10
 8013020:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	83bb      	strh	r3, [r7, #28]
 8013026:	2300      	movs	r3, #0
 8013028:	837b      	strh	r3, [r7, #26]
 801302a:	2300      	movs	r3, #0
 801302c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801302e:	2300      	movs	r3, #0
 8013030:	843b      	strh	r3, [r7, #32]
 8013032:	e0ae      	b.n	8013192 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013038:	49a6      	ldr	r1, [pc, #664]	; (80132d4 <etharp_find_entry+0x2d4>)
 801303a:	4613      	mov	r3, r2
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	4413      	add	r3, r2
 8013040:	00db      	lsls	r3, r3, #3
 8013042:	440b      	add	r3, r1
 8013044:	3314      	adds	r3, #20
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801304a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801304e:	2b0a      	cmp	r3, #10
 8013050:	d105      	bne.n	801305e <etharp_find_entry+0x5e>
 8013052:	7dfb      	ldrb	r3, [r7, #23]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d102      	bne.n	801305e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013058:	8c3b      	ldrh	r3, [r7, #32]
 801305a:	847b      	strh	r3, [r7, #34]	; 0x22
 801305c:	e095      	b.n	801318a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801305e:	7dfb      	ldrb	r3, [r7, #23]
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 8092 	beq.w	801318a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013066:	7dfb      	ldrb	r3, [r7, #23]
 8013068:	2b01      	cmp	r3, #1
 801306a:	d009      	beq.n	8013080 <etharp_find_entry+0x80>
 801306c:	7dfb      	ldrb	r3, [r7, #23]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d806      	bhi.n	8013080 <etharp_find_entry+0x80>
 8013072:	4b99      	ldr	r3, [pc, #612]	; (80132d8 <etharp_find_entry+0x2d8>)
 8013074:	f44f 7292 	mov.w	r2, #292	; 0x124
 8013078:	4998      	ldr	r1, [pc, #608]	; (80132dc <etharp_find_entry+0x2dc>)
 801307a:	4899      	ldr	r0, [pc, #612]	; (80132e0 <etharp_find_entry+0x2e0>)
 801307c:	f003 f91a 	bl	80162b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d020      	beq.n	80130c8 <etharp_find_entry+0xc8>
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	6819      	ldr	r1, [r3, #0]
 801308a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801308e:	4891      	ldr	r0, [pc, #580]	; (80132d4 <etharp_find_entry+0x2d4>)
 8013090:	4613      	mov	r3, r2
 8013092:	005b      	lsls	r3, r3, #1
 8013094:	4413      	add	r3, r2
 8013096:	00db      	lsls	r3, r3, #3
 8013098:	4403      	add	r3, r0
 801309a:	3304      	adds	r3, #4
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4299      	cmp	r1, r3
 80130a0:	d112      	bne.n	80130c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d00c      	beq.n	80130c2 <etharp_find_entry+0xc2>
 80130a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130ac:	4989      	ldr	r1, [pc, #548]	; (80132d4 <etharp_find_entry+0x2d4>)
 80130ae:	4613      	mov	r3, r2
 80130b0:	005b      	lsls	r3, r3, #1
 80130b2:	4413      	add	r3, r2
 80130b4:	00db      	lsls	r3, r3, #3
 80130b6:	440b      	add	r3, r1
 80130b8:	3308      	adds	r3, #8
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d102      	bne.n	80130c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80130c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80130c6:	e100      	b.n	80132ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80130c8:	7dfb      	ldrb	r3, [r7, #23]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d140      	bne.n	8013150 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80130ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130d2:	4980      	ldr	r1, [pc, #512]	; (80132d4 <etharp_find_entry+0x2d4>)
 80130d4:	4613      	mov	r3, r2
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	4413      	add	r3, r2
 80130da:	00db      	lsls	r3, r3, #3
 80130dc:	440b      	add	r3, r1
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d01a      	beq.n	801311a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80130e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130e8:	497a      	ldr	r1, [pc, #488]	; (80132d4 <etharp_find_entry+0x2d4>)
 80130ea:	4613      	mov	r3, r2
 80130ec:	005b      	lsls	r3, r3, #1
 80130ee:	4413      	add	r3, r2
 80130f0:	00db      	lsls	r3, r3, #3
 80130f2:	440b      	add	r3, r1
 80130f4:	3312      	adds	r3, #18
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	8bba      	ldrh	r2, [r7, #28]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d845      	bhi.n	801318a <etharp_find_entry+0x18a>
            old_queue = i;
 80130fe:	8c3b      	ldrh	r3, [r7, #32]
 8013100:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013102:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013106:	4973      	ldr	r1, [pc, #460]	; (80132d4 <etharp_find_entry+0x2d4>)
 8013108:	4613      	mov	r3, r2
 801310a:	005b      	lsls	r3, r3, #1
 801310c:	4413      	add	r3, r2
 801310e:	00db      	lsls	r3, r3, #3
 8013110:	440b      	add	r3, r1
 8013112:	3312      	adds	r3, #18
 8013114:	881b      	ldrh	r3, [r3, #0]
 8013116:	83bb      	strh	r3, [r7, #28]
 8013118:	e037      	b.n	801318a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801311a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801311e:	496d      	ldr	r1, [pc, #436]	; (80132d4 <etharp_find_entry+0x2d4>)
 8013120:	4613      	mov	r3, r2
 8013122:	005b      	lsls	r3, r3, #1
 8013124:	4413      	add	r3, r2
 8013126:	00db      	lsls	r3, r3, #3
 8013128:	440b      	add	r3, r1
 801312a:	3312      	adds	r3, #18
 801312c:	881b      	ldrh	r3, [r3, #0]
 801312e:	8b7a      	ldrh	r2, [r7, #26]
 8013130:	429a      	cmp	r2, r3
 8013132:	d82a      	bhi.n	801318a <etharp_find_entry+0x18a>
            old_pending = i;
 8013134:	8c3b      	ldrh	r3, [r7, #32]
 8013136:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801313c:	4965      	ldr	r1, [pc, #404]	; (80132d4 <etharp_find_entry+0x2d4>)
 801313e:	4613      	mov	r3, r2
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	4413      	add	r3, r2
 8013144:	00db      	lsls	r3, r3, #3
 8013146:	440b      	add	r3, r1
 8013148:	3312      	adds	r3, #18
 801314a:	881b      	ldrh	r3, [r3, #0]
 801314c:	837b      	strh	r3, [r7, #26]
 801314e:	e01c      	b.n	801318a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013150:	7dfb      	ldrb	r3, [r7, #23]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d919      	bls.n	801318a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801315a:	495e      	ldr	r1, [pc, #376]	; (80132d4 <etharp_find_entry+0x2d4>)
 801315c:	4613      	mov	r3, r2
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	4413      	add	r3, r2
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	440b      	add	r3, r1
 8013166:	3312      	adds	r3, #18
 8013168:	881b      	ldrh	r3, [r3, #0]
 801316a:	8b3a      	ldrh	r2, [r7, #24]
 801316c:	429a      	cmp	r2, r3
 801316e:	d80c      	bhi.n	801318a <etharp_find_entry+0x18a>
            old_stable = i;
 8013170:	8c3b      	ldrh	r3, [r7, #32]
 8013172:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013178:	4956      	ldr	r1, [pc, #344]	; (80132d4 <etharp_find_entry+0x2d4>)
 801317a:	4613      	mov	r3, r2
 801317c:	005b      	lsls	r3, r3, #1
 801317e:	4413      	add	r3, r2
 8013180:	00db      	lsls	r3, r3, #3
 8013182:	440b      	add	r3, r1
 8013184:	3312      	adds	r3, #18
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801318a:	8c3b      	ldrh	r3, [r7, #32]
 801318c:	3301      	adds	r3, #1
 801318e:	b29b      	uxth	r3, r3
 8013190:	843b      	strh	r3, [r7, #32]
 8013192:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013196:	2b09      	cmp	r3, #9
 8013198:	f77f af4c 	ble.w	8013034 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801319c:	7afb      	ldrb	r3, [r7, #11]
 801319e:	f003 0302 	and.w	r3, r3, #2
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d108      	bne.n	80131b8 <etharp_find_entry+0x1b8>
 80131a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80131aa:	2b0a      	cmp	r3, #10
 80131ac:	d107      	bne.n	80131be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80131ae:	7afb      	ldrb	r3, [r7, #11]
 80131b0:	f003 0301 	and.w	r3, r3, #1
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d102      	bne.n	80131be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80131b8:	f04f 33ff 	mov.w	r3, #4294967295
 80131bc:	e085      	b.n	80132ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80131be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80131c2:	2b09      	cmp	r3, #9
 80131c4:	dc02      	bgt.n	80131cc <etharp_find_entry+0x1cc>
    i = empty;
 80131c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131c8:	843b      	strh	r3, [r7, #32]
 80131ca:	e039      	b.n	8013240 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80131cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80131d0:	2b09      	cmp	r3, #9
 80131d2:	dc14      	bgt.n	80131fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80131d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80131d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131dc:	493d      	ldr	r1, [pc, #244]	; (80132d4 <etharp_find_entry+0x2d4>)
 80131de:	4613      	mov	r3, r2
 80131e0:	005b      	lsls	r3, r3, #1
 80131e2:	4413      	add	r3, r2
 80131e4:	00db      	lsls	r3, r3, #3
 80131e6:	440b      	add	r3, r1
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d018      	beq.n	8013220 <etharp_find_entry+0x220>
 80131ee:	4b3a      	ldr	r3, [pc, #232]	; (80132d8 <etharp_find_entry+0x2d8>)
 80131f0:	f240 126d 	movw	r2, #365	; 0x16d
 80131f4:	493b      	ldr	r1, [pc, #236]	; (80132e4 <etharp_find_entry+0x2e4>)
 80131f6:	483a      	ldr	r0, [pc, #232]	; (80132e0 <etharp_find_entry+0x2e0>)
 80131f8:	f003 f85c 	bl	80162b4 <iprintf>
 80131fc:	e010      	b.n	8013220 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80131fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013202:	2b09      	cmp	r3, #9
 8013204:	dc02      	bgt.n	801320c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013208:	843b      	strh	r3, [r7, #32]
 801320a:	e009      	b.n	8013220 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801320c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013210:	2b09      	cmp	r3, #9
 8013212:	dc02      	bgt.n	801321a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013214:	8bfb      	ldrh	r3, [r7, #30]
 8013216:	843b      	strh	r3, [r7, #32]
 8013218:	e002      	b.n	8013220 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801321a:	f04f 33ff 	mov.w	r3, #4294967295
 801321e:	e054      	b.n	80132ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013220:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013224:	2b09      	cmp	r3, #9
 8013226:	dd06      	ble.n	8013236 <etharp_find_entry+0x236>
 8013228:	4b2b      	ldr	r3, [pc, #172]	; (80132d8 <etharp_find_entry+0x2d8>)
 801322a:	f240 127f 	movw	r2, #383	; 0x17f
 801322e:	492e      	ldr	r1, [pc, #184]	; (80132e8 <etharp_find_entry+0x2e8>)
 8013230:	482b      	ldr	r0, [pc, #172]	; (80132e0 <etharp_find_entry+0x2e0>)
 8013232:	f003 f83f 	bl	80162b4 <iprintf>
    etharp_free_entry(i);
 8013236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801323a:	4618      	mov	r0, r3
 801323c:	f7ff fe06 	bl	8012e4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013240:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013244:	2b09      	cmp	r3, #9
 8013246:	dd06      	ble.n	8013256 <etharp_find_entry+0x256>
 8013248:	4b23      	ldr	r3, [pc, #140]	; (80132d8 <etharp_find_entry+0x2d8>)
 801324a:	f240 1283 	movw	r2, #387	; 0x183
 801324e:	4926      	ldr	r1, [pc, #152]	; (80132e8 <etharp_find_entry+0x2e8>)
 8013250:	4823      	ldr	r0, [pc, #140]	; (80132e0 <etharp_find_entry+0x2e0>)
 8013252:	f003 f82f 	bl	80162b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801325a:	491e      	ldr	r1, [pc, #120]	; (80132d4 <etharp_find_entry+0x2d4>)
 801325c:	4613      	mov	r3, r2
 801325e:	005b      	lsls	r3, r3, #1
 8013260:	4413      	add	r3, r2
 8013262:	00db      	lsls	r3, r3, #3
 8013264:	440b      	add	r3, r1
 8013266:	3314      	adds	r3, #20
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d006      	beq.n	801327c <etharp_find_entry+0x27c>
 801326e:	4b1a      	ldr	r3, [pc, #104]	; (80132d8 <etharp_find_entry+0x2d8>)
 8013270:	f240 1285 	movw	r2, #389	; 0x185
 8013274:	491d      	ldr	r1, [pc, #116]	; (80132ec <etharp_find_entry+0x2ec>)
 8013276:	481a      	ldr	r0, [pc, #104]	; (80132e0 <etharp_find_entry+0x2e0>)
 8013278:	f003 f81c 	bl	80162b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d00b      	beq.n	801329a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013282:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6819      	ldr	r1, [r3, #0]
 801328a:	4812      	ldr	r0, [pc, #72]	; (80132d4 <etharp_find_entry+0x2d4>)
 801328c:	4613      	mov	r3, r2
 801328e:	005b      	lsls	r3, r3, #1
 8013290:	4413      	add	r3, r2
 8013292:	00db      	lsls	r3, r3, #3
 8013294:	4403      	add	r3, r0
 8013296:	3304      	adds	r3, #4
 8013298:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801329a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801329e:	490d      	ldr	r1, [pc, #52]	; (80132d4 <etharp_find_entry+0x2d4>)
 80132a0:	4613      	mov	r3, r2
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	4413      	add	r3, r2
 80132a6:	00db      	lsls	r3, r3, #3
 80132a8:	440b      	add	r3, r1
 80132aa:	3312      	adds	r3, #18
 80132ac:	2200      	movs	r2, #0
 80132ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80132b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132b4:	4907      	ldr	r1, [pc, #28]	; (80132d4 <etharp_find_entry+0x2d4>)
 80132b6:	4613      	mov	r3, r2
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	4413      	add	r3, r2
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	440b      	add	r3, r1
 80132c0:	3308      	adds	r3, #8
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80132c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3728      	adds	r7, #40	; 0x28
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	200004ec 	.word	0x200004ec
 80132d8:	0801c5ec 	.word	0x0801c5ec
 80132dc:	0801c624 	.word	0x0801c624
 80132e0:	0801c664 	.word	0x0801c664
 80132e4:	0801c68c 	.word	0x0801c68c
 80132e8:	0801c6a4 	.word	0x0801c6a4
 80132ec:	0801c6b8 	.word	0x0801c6b8

080132f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b088      	sub	sp, #32
 80132f4:	af02      	add	r7, sp, #8
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]
 80132fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013304:	2b06      	cmp	r3, #6
 8013306:	d006      	beq.n	8013316 <etharp_update_arp_entry+0x26>
 8013308:	4b48      	ldr	r3, [pc, #288]	; (801342c <etharp_update_arp_entry+0x13c>)
 801330a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801330e:	4948      	ldr	r1, [pc, #288]	; (8013430 <etharp_update_arp_entry+0x140>)
 8013310:	4848      	ldr	r0, [pc, #288]	; (8013434 <etharp_update_arp_entry+0x144>)
 8013312:	f002 ffcf 	bl	80162b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d012      	beq.n	8013342 <etharp_update_arp_entry+0x52>
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00e      	beq.n	8013342 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	68f9      	ldr	r1, [r7, #12]
 801332a:	4618      	mov	r0, r3
 801332c:	f001 f8fc 	bl	8014528 <ip4_addr_isbroadcast_u32>
 8013330:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013332:	2b00      	cmp	r3, #0
 8013334:	d105      	bne.n	8013342 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801333e:	2be0      	cmp	r3, #224	; 0xe0
 8013340:	d102      	bne.n	8013348 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013342:	f06f 030f 	mvn.w	r3, #15
 8013346:	e06c      	b.n	8013422 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013348:	78fb      	ldrb	r3, [r7, #3]
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	4619      	mov	r1, r3
 801334e:	68b8      	ldr	r0, [r7, #8]
 8013350:	f7ff fe56 	bl	8013000 <etharp_find_entry>
 8013354:	4603      	mov	r3, r0
 8013356:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013358:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801335c:	2b00      	cmp	r3, #0
 801335e:	da02      	bge.n	8013366 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013360:	8afb      	ldrh	r3, [r7, #22]
 8013362:	b25b      	sxtb	r3, r3
 8013364:	e05d      	b.n	8013422 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013366:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801336a:	4933      	ldr	r1, [pc, #204]	; (8013438 <etharp_update_arp_entry+0x148>)
 801336c:	4613      	mov	r3, r2
 801336e:	005b      	lsls	r3, r3, #1
 8013370:	4413      	add	r3, r2
 8013372:	00db      	lsls	r3, r3, #3
 8013374:	440b      	add	r3, r1
 8013376:	3314      	adds	r3, #20
 8013378:	2202      	movs	r2, #2
 801337a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801337c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013380:	492d      	ldr	r1, [pc, #180]	; (8013438 <etharp_update_arp_entry+0x148>)
 8013382:	4613      	mov	r3, r2
 8013384:	005b      	lsls	r3, r3, #1
 8013386:	4413      	add	r3, r2
 8013388:	00db      	lsls	r3, r3, #3
 801338a:	440b      	add	r3, r1
 801338c:	3308      	adds	r3, #8
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013396:	4613      	mov	r3, r2
 8013398:	005b      	lsls	r3, r3, #1
 801339a:	4413      	add	r3, r2
 801339c:	00db      	lsls	r3, r3, #3
 801339e:	3308      	adds	r3, #8
 80133a0:	4a25      	ldr	r2, [pc, #148]	; (8013438 <etharp_update_arp_entry+0x148>)
 80133a2:	4413      	add	r3, r2
 80133a4:	3304      	adds	r3, #4
 80133a6:	2206      	movs	r2, #6
 80133a8:	6879      	ldr	r1, [r7, #4]
 80133aa:	4618      	mov	r0, r3
 80133ac:	f002 f86f 	bl	801548e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80133b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133b4:	4920      	ldr	r1, [pc, #128]	; (8013438 <etharp_update_arp_entry+0x148>)
 80133b6:	4613      	mov	r3, r2
 80133b8:	005b      	lsls	r3, r3, #1
 80133ba:	4413      	add	r3, r2
 80133bc:	00db      	lsls	r3, r3, #3
 80133be:	440b      	add	r3, r1
 80133c0:	3312      	adds	r3, #18
 80133c2:	2200      	movs	r2, #0
 80133c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80133c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133ca:	491b      	ldr	r1, [pc, #108]	; (8013438 <etharp_update_arp_entry+0x148>)
 80133cc:	4613      	mov	r3, r2
 80133ce:	005b      	lsls	r3, r3, #1
 80133d0:	4413      	add	r3, r2
 80133d2:	00db      	lsls	r3, r3, #3
 80133d4:	440b      	add	r3, r1
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d021      	beq.n	8013420 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80133dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133e0:	4915      	ldr	r1, [pc, #84]	; (8013438 <etharp_update_arp_entry+0x148>)
 80133e2:	4613      	mov	r3, r2
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	4413      	add	r3, r2
 80133e8:	00db      	lsls	r3, r3, #3
 80133ea:	440b      	add	r3, r1
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80133f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133f4:	4910      	ldr	r1, [pc, #64]	; (8013438 <etharp_update_arp_entry+0x148>)
 80133f6:	4613      	mov	r3, r2
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	4413      	add	r3, r2
 80133fc:	00db      	lsls	r3, r3, #3
 80133fe:	440b      	add	r3, r1
 8013400:	2200      	movs	r2, #0
 8013402:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	f103 0222 	add.w	r2, r3, #34	; 0x22
 801340a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6939      	ldr	r1, [r7, #16]
 8013414:	68f8      	ldr	r0, [r7, #12]
 8013416:	f001 ff8b 	bl	8015330 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801341a:	6938      	ldr	r0, [r7, #16]
 801341c:	f7f8 ff20 	bl	800c260 <pbuf_free>
  }
  return ERR_OK;
 8013420:	2300      	movs	r3, #0
}
 8013422:	4618      	mov	r0, r3
 8013424:	3718      	adds	r7, #24
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}
 801342a:	bf00      	nop
 801342c:	0801c5ec 	.word	0x0801c5ec
 8013430:	0801c6e4 	.word	0x0801c6e4
 8013434:	0801c664 	.word	0x0801c664
 8013438:	200004ec 	.word	0x200004ec

0801343c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013444:	2300      	movs	r3, #0
 8013446:	60fb      	str	r3, [r7, #12]
 8013448:	e01e      	b.n	8013488 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801344a:	4913      	ldr	r1, [pc, #76]	; (8013498 <etharp_cleanup_netif+0x5c>)
 801344c:	68fa      	ldr	r2, [r7, #12]
 801344e:	4613      	mov	r3, r2
 8013450:	005b      	lsls	r3, r3, #1
 8013452:	4413      	add	r3, r2
 8013454:	00db      	lsls	r3, r3, #3
 8013456:	440b      	add	r3, r1
 8013458:	3314      	adds	r3, #20
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801345e:	7afb      	ldrb	r3, [r7, #11]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d00e      	beq.n	8013482 <etharp_cleanup_netif+0x46>
 8013464:	490c      	ldr	r1, [pc, #48]	; (8013498 <etharp_cleanup_netif+0x5c>)
 8013466:	68fa      	ldr	r2, [r7, #12]
 8013468:	4613      	mov	r3, r2
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	4413      	add	r3, r2
 801346e:	00db      	lsls	r3, r3, #3
 8013470:	440b      	add	r3, r1
 8013472:	3308      	adds	r3, #8
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	429a      	cmp	r2, r3
 801347a:	d102      	bne.n	8013482 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f7ff fce5 	bl	8012e4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	3301      	adds	r3, #1
 8013486:	60fb      	str	r3, [r7, #12]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2b09      	cmp	r3, #9
 801348c:	dddd      	ble.n	801344a <etharp_cleanup_netif+0xe>
    }
  }
}
 801348e:	bf00      	nop
 8013490:	3710      	adds	r7, #16
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	200004ec 	.word	0x200004ec

0801349c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801349c:	b5b0      	push	{r4, r5, r7, lr}
 801349e:	b08a      	sub	sp, #40	; 0x28
 80134a0:	af04      	add	r7, sp, #16
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d107      	bne.n	80134bc <etharp_input+0x20>
 80134ac:	4b3d      	ldr	r3, [pc, #244]	; (80135a4 <etharp_input+0x108>)
 80134ae:	f240 228a 	movw	r2, #650	; 0x28a
 80134b2:	493d      	ldr	r1, [pc, #244]	; (80135a8 <etharp_input+0x10c>)
 80134b4:	483d      	ldr	r0, [pc, #244]	; (80135ac <etharp_input+0x110>)
 80134b6:	f002 fefd 	bl	80162b4 <iprintf>
 80134ba:	e06f      	b.n	801359c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134cc:	d10c      	bne.n	80134e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80134d2:	2b06      	cmp	r3, #6
 80134d4:	d108      	bne.n	80134e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134da:	2b04      	cmp	r3, #4
 80134dc:	d104      	bne.n	80134e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	885b      	ldrh	r3, [r3, #2]
 80134e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134e4:	2b08      	cmp	r3, #8
 80134e6:	d003      	beq.n	80134f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f7f8 feb9 	bl	800c260 <pbuf_free>
    return;
 80134ee:	e055      	b.n	801359c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	330e      	adds	r3, #14
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	3318      	adds	r3, #24
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	3304      	adds	r3, #4
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d102      	bne.n	8013510 <etharp_input+0x74>
    for_us = 0;
 801350a:	2300      	movs	r3, #0
 801350c:	75fb      	strb	r3, [r7, #23]
 801350e:	e009      	b.n	8013524 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	3304      	adds	r3, #4
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	429a      	cmp	r2, r3
 801351a:	bf0c      	ite	eq
 801351c:	2301      	moveq	r3, #1
 801351e:	2300      	movne	r3, #0
 8013520:	b2db      	uxtb	r3, r3
 8013522:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	f103 0208 	add.w	r2, r3, #8
 801352a:	7dfb      	ldrb	r3, [r7, #23]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d001      	beq.n	8013534 <etharp_input+0x98>
 8013530:	2301      	movs	r3, #1
 8013532:	e000      	b.n	8013536 <etharp_input+0x9a>
 8013534:	2302      	movs	r3, #2
 8013536:	f107 010c 	add.w	r1, r7, #12
 801353a:	6838      	ldr	r0, [r7, #0]
 801353c:	f7ff fed8 	bl	80132f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	88db      	ldrh	r3, [r3, #6]
 8013544:	b29b      	uxth	r3, r3
 8013546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801354a:	d003      	beq.n	8013554 <etharp_input+0xb8>
 801354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013550:	d01e      	beq.n	8013590 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013552:	e020      	b.n	8013596 <etharp_input+0xfa>
      if (for_us) {
 8013554:	7dfb      	ldrb	r3, [r7, #23]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d01c      	beq.n	8013594 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	f103 0522 	add.w	r5, r3, #34	; 0x22
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013570:	693a      	ldr	r2, [r7, #16]
 8013572:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013574:	2102      	movs	r1, #2
 8013576:	9103      	str	r1, [sp, #12]
 8013578:	f107 010c 	add.w	r1, r7, #12
 801357c:	9102      	str	r1, [sp, #8]
 801357e:	9201      	str	r2, [sp, #4]
 8013580:	9300      	str	r3, [sp, #0]
 8013582:	462b      	mov	r3, r5
 8013584:	4622      	mov	r2, r4
 8013586:	4601      	mov	r1, r0
 8013588:	6838      	ldr	r0, [r7, #0]
 801358a:	f000 faeb 	bl	8013b64 <etharp_raw>
      break;
 801358e:	e001      	b.n	8013594 <etharp_input+0xf8>
      break;
 8013590:	bf00      	nop
 8013592:	e000      	b.n	8013596 <etharp_input+0xfa>
      break;
 8013594:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7f8 fe62 	bl	800c260 <pbuf_free>
}
 801359c:	3718      	adds	r7, #24
 801359e:	46bd      	mov	sp, r7
 80135a0:	bdb0      	pop	{r4, r5, r7, pc}
 80135a2:	bf00      	nop
 80135a4:	0801c5ec 	.word	0x0801c5ec
 80135a8:	0801c73c 	.word	0x0801c73c
 80135ac:	0801c664 	.word	0x0801c664

080135b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b086      	sub	sp, #24
 80135b4:	af02      	add	r7, sp, #8
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	4613      	mov	r3, r2
 80135bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80135be:	79fa      	ldrb	r2, [r7, #7]
 80135c0:	4944      	ldr	r1, [pc, #272]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 80135c2:	4613      	mov	r3, r2
 80135c4:	005b      	lsls	r3, r3, #1
 80135c6:	4413      	add	r3, r2
 80135c8:	00db      	lsls	r3, r3, #3
 80135ca:	440b      	add	r3, r1
 80135cc:	3314      	adds	r3, #20
 80135ce:	781b      	ldrb	r3, [r3, #0]
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	d806      	bhi.n	80135e2 <etharp_output_to_arp_index+0x32>
 80135d4:	4b40      	ldr	r3, [pc, #256]	; (80136d8 <etharp_output_to_arp_index+0x128>)
 80135d6:	f240 22ef 	movw	r2, #751	; 0x2ef
 80135da:	4940      	ldr	r1, [pc, #256]	; (80136dc <etharp_output_to_arp_index+0x12c>)
 80135dc:	4840      	ldr	r0, [pc, #256]	; (80136e0 <etharp_output_to_arp_index+0x130>)
 80135de:	f002 fe69 	bl	80162b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80135e2:	79fa      	ldrb	r2, [r7, #7]
 80135e4:	493b      	ldr	r1, [pc, #236]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 80135e6:	4613      	mov	r3, r2
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	4413      	add	r3, r2
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	440b      	add	r3, r1
 80135f0:	3314      	adds	r3, #20
 80135f2:	781b      	ldrb	r3, [r3, #0]
 80135f4:	2b02      	cmp	r3, #2
 80135f6:	d153      	bne.n	80136a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80135f8:	79fa      	ldrb	r2, [r7, #7]
 80135fa:	4936      	ldr	r1, [pc, #216]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 80135fc:	4613      	mov	r3, r2
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	4413      	add	r3, r2
 8013602:	00db      	lsls	r3, r3, #3
 8013604:	440b      	add	r3, r1
 8013606:	3312      	adds	r3, #18
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801360e:	d919      	bls.n	8013644 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013610:	79fa      	ldrb	r2, [r7, #7]
 8013612:	4613      	mov	r3, r2
 8013614:	005b      	lsls	r3, r3, #1
 8013616:	4413      	add	r3, r2
 8013618:	00db      	lsls	r3, r3, #3
 801361a:	4a2e      	ldr	r2, [pc, #184]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 801361c:	4413      	add	r3, r2
 801361e:	3304      	adds	r3, #4
 8013620:	4619      	mov	r1, r3
 8013622:	68f8      	ldr	r0, [r7, #12]
 8013624:	f000 fb4c 	bl	8013cc0 <etharp_request>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d138      	bne.n	80136a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801362e:	79fa      	ldrb	r2, [r7, #7]
 8013630:	4928      	ldr	r1, [pc, #160]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 8013632:	4613      	mov	r3, r2
 8013634:	005b      	lsls	r3, r3, #1
 8013636:	4413      	add	r3, r2
 8013638:	00db      	lsls	r3, r3, #3
 801363a:	440b      	add	r3, r1
 801363c:	3314      	adds	r3, #20
 801363e:	2203      	movs	r2, #3
 8013640:	701a      	strb	r2, [r3, #0]
 8013642:	e02d      	b.n	80136a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013644:	79fa      	ldrb	r2, [r7, #7]
 8013646:	4923      	ldr	r1, [pc, #140]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 8013648:	4613      	mov	r3, r2
 801364a:	005b      	lsls	r3, r3, #1
 801364c:	4413      	add	r3, r2
 801364e:	00db      	lsls	r3, r3, #3
 8013650:	440b      	add	r3, r1
 8013652:	3312      	adds	r3, #18
 8013654:	881b      	ldrh	r3, [r3, #0]
 8013656:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801365a:	d321      	bcc.n	80136a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801365c:	79fa      	ldrb	r2, [r7, #7]
 801365e:	4613      	mov	r3, r2
 8013660:	005b      	lsls	r3, r3, #1
 8013662:	4413      	add	r3, r2
 8013664:	00db      	lsls	r3, r3, #3
 8013666:	4a1b      	ldr	r2, [pc, #108]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 8013668:	4413      	add	r3, r2
 801366a:	1d19      	adds	r1, r3, #4
 801366c:	79fa      	ldrb	r2, [r7, #7]
 801366e:	4613      	mov	r3, r2
 8013670:	005b      	lsls	r3, r3, #1
 8013672:	4413      	add	r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	3308      	adds	r3, #8
 8013678:	4a16      	ldr	r2, [pc, #88]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 801367a:	4413      	add	r3, r2
 801367c:	3304      	adds	r3, #4
 801367e:	461a      	mov	r2, r3
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 fafb 	bl	8013c7c <etharp_request_dst>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d109      	bne.n	80136a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801368c:	79fa      	ldrb	r2, [r7, #7]
 801368e:	4911      	ldr	r1, [pc, #68]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 8013690:	4613      	mov	r3, r2
 8013692:	005b      	lsls	r3, r3, #1
 8013694:	4413      	add	r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	440b      	add	r3, r1
 801369a:	3314      	adds	r3, #20
 801369c:	2203      	movs	r2, #3
 801369e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f103 0122 	add.w	r1, r3, #34	; 0x22
 80136a6:	79fa      	ldrb	r2, [r7, #7]
 80136a8:	4613      	mov	r3, r2
 80136aa:	005b      	lsls	r3, r3, #1
 80136ac:	4413      	add	r3, r2
 80136ae:	00db      	lsls	r3, r3, #3
 80136b0:	3308      	adds	r3, #8
 80136b2:	4a08      	ldr	r2, [pc, #32]	; (80136d4 <etharp_output_to_arp_index+0x124>)
 80136b4:	4413      	add	r3, r2
 80136b6:	1d1a      	adds	r2, r3, #4
 80136b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136bc:	9300      	str	r3, [sp, #0]
 80136be:	4613      	mov	r3, r2
 80136c0:	460a      	mov	r2, r1
 80136c2:	68b9      	ldr	r1, [r7, #8]
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f001 fe33 	bl	8015330 <ethernet_output>
 80136ca:	4603      	mov	r3, r0
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3710      	adds	r7, #16
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}
 80136d4:	200004ec 	.word	0x200004ec
 80136d8:	0801c5ec 	.word	0x0801c5ec
 80136dc:	0801c75c 	.word	0x0801c75c
 80136e0:	0801c664 	.word	0x0801c664

080136e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b08a      	sub	sp, #40	; 0x28
 80136e8:	af02      	add	r7, sp, #8
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d106      	bne.n	8013708 <etharp_output+0x24>
 80136fa:	4b73      	ldr	r3, [pc, #460]	; (80138c8 <etharp_output+0x1e4>)
 80136fc:	f240 321e 	movw	r2, #798	; 0x31e
 8013700:	4972      	ldr	r1, [pc, #456]	; (80138cc <etharp_output+0x1e8>)
 8013702:	4873      	ldr	r0, [pc, #460]	; (80138d0 <etharp_output+0x1ec>)
 8013704:	f002 fdd6 	bl	80162b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d106      	bne.n	801371c <etharp_output+0x38>
 801370e:	4b6e      	ldr	r3, [pc, #440]	; (80138c8 <etharp_output+0x1e4>)
 8013710:	f240 321f 	movw	r2, #799	; 0x31f
 8013714:	496f      	ldr	r1, [pc, #444]	; (80138d4 <etharp_output+0x1f0>)
 8013716:	486e      	ldr	r0, [pc, #440]	; (80138d0 <etharp_output+0x1ec>)
 8013718:	f002 fdcc 	bl	80162b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d106      	bne.n	8013730 <etharp_output+0x4c>
 8013722:	4b69      	ldr	r3, [pc, #420]	; (80138c8 <etharp_output+0x1e4>)
 8013724:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013728:	496b      	ldr	r1, [pc, #428]	; (80138d8 <etharp_output+0x1f4>)
 801372a:	4869      	ldr	r0, [pc, #420]	; (80138d0 <etharp_output+0x1ec>)
 801372c:	f002 fdc2 	bl	80162b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	68f9      	ldr	r1, [r7, #12]
 8013736:	4618      	mov	r0, r3
 8013738:	f000 fef6 	bl	8014528 <ip4_addr_isbroadcast_u32>
 801373c:	4603      	mov	r3, r0
 801373e:	2b00      	cmp	r3, #0
 8013740:	d002      	beq.n	8013748 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013742:	4b66      	ldr	r3, [pc, #408]	; (80138dc <etharp_output+0x1f8>)
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	e0af      	b.n	80138a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013750:	2be0      	cmp	r3, #224	; 0xe0
 8013752:	d118      	bne.n	8013786 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013754:	2301      	movs	r3, #1
 8013756:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013758:	2300      	movs	r3, #0
 801375a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801375c:	235e      	movs	r3, #94	; 0x5e
 801375e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3301      	adds	r3, #1
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801376a:	b2db      	uxtb	r3, r3
 801376c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	3302      	adds	r3, #2
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	3303      	adds	r3, #3
 801377a:	781b      	ldrb	r3, [r3, #0]
 801377c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801377e:	f107 0310 	add.w	r3, r7, #16
 8013782:	61fb      	str	r3, [r7, #28]
 8013784:	e090      	b.n	80138a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	681a      	ldr	r2, [r3, #0]
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	3304      	adds	r3, #4
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	405a      	eors	r2, r3
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	3308      	adds	r3, #8
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	4013      	ands	r3, r2
 801379a:	2b00      	cmp	r3, #0
 801379c:	d012      	beq.n	80137c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80137a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d00b      	beq.n	80137c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	330c      	adds	r3, #12
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d003      	beq.n	80137be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	330c      	adds	r3, #12
 80137ba:	61bb      	str	r3, [r7, #24]
 80137bc:	e002      	b.n	80137c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80137be:	f06f 0303 	mvn.w	r3, #3
 80137c2:	e07d      	b.n	80138c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137c4:	4b46      	ldr	r3, [pc, #280]	; (80138e0 <etharp_output+0x1fc>)
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	4619      	mov	r1, r3
 80137ca:	4a46      	ldr	r2, [pc, #280]	; (80138e4 <etharp_output+0x200>)
 80137cc:	460b      	mov	r3, r1
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	440b      	add	r3, r1
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	4413      	add	r3, r2
 80137d6:	3314      	adds	r3, #20
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d925      	bls.n	801382a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80137de:	4b40      	ldr	r3, [pc, #256]	; (80138e0 <etharp_output+0x1fc>)
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	4619      	mov	r1, r3
 80137e4:	4a3f      	ldr	r2, [pc, #252]	; (80138e4 <etharp_output+0x200>)
 80137e6:	460b      	mov	r3, r1
 80137e8:	005b      	lsls	r3, r3, #1
 80137ea:	440b      	add	r3, r1
 80137ec:	00db      	lsls	r3, r3, #3
 80137ee:	4413      	add	r3, r2
 80137f0:	3308      	adds	r3, #8
 80137f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d117      	bne.n	801382a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	4b38      	ldr	r3, [pc, #224]	; (80138e0 <etharp_output+0x1fc>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	4618      	mov	r0, r3
 8013804:	4937      	ldr	r1, [pc, #220]	; (80138e4 <etharp_output+0x200>)
 8013806:	4603      	mov	r3, r0
 8013808:	005b      	lsls	r3, r3, #1
 801380a:	4403      	add	r3, r0
 801380c:	00db      	lsls	r3, r3, #3
 801380e:	440b      	add	r3, r1
 8013810:	3304      	adds	r3, #4
 8013812:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013814:	429a      	cmp	r2, r3
 8013816:	d108      	bne.n	801382a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013818:	4b31      	ldr	r3, [pc, #196]	; (80138e0 <etharp_output+0x1fc>)
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	461a      	mov	r2, r3
 801381e:	68b9      	ldr	r1, [r7, #8]
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f7ff fec5 	bl	80135b0 <etharp_output_to_arp_index>
 8013826:	4603      	mov	r3, r0
 8013828:	e04a      	b.n	80138c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801382a:	2300      	movs	r3, #0
 801382c:	75fb      	strb	r3, [r7, #23]
 801382e:	e031      	b.n	8013894 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013830:	7dfa      	ldrb	r2, [r7, #23]
 8013832:	492c      	ldr	r1, [pc, #176]	; (80138e4 <etharp_output+0x200>)
 8013834:	4613      	mov	r3, r2
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	4413      	add	r3, r2
 801383a:	00db      	lsls	r3, r3, #3
 801383c:	440b      	add	r3, r1
 801383e:	3314      	adds	r3, #20
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	2b01      	cmp	r3, #1
 8013844:	d923      	bls.n	801388e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013846:	7dfa      	ldrb	r2, [r7, #23]
 8013848:	4926      	ldr	r1, [pc, #152]	; (80138e4 <etharp_output+0x200>)
 801384a:	4613      	mov	r3, r2
 801384c:	005b      	lsls	r3, r3, #1
 801384e:	4413      	add	r3, r2
 8013850:	00db      	lsls	r3, r3, #3
 8013852:	440b      	add	r3, r1
 8013854:	3308      	adds	r3, #8
 8013856:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013858:	68fa      	ldr	r2, [r7, #12]
 801385a:	429a      	cmp	r2, r3
 801385c:	d117      	bne.n	801388e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	6819      	ldr	r1, [r3, #0]
 8013862:	7dfa      	ldrb	r2, [r7, #23]
 8013864:	481f      	ldr	r0, [pc, #124]	; (80138e4 <etharp_output+0x200>)
 8013866:	4613      	mov	r3, r2
 8013868:	005b      	lsls	r3, r3, #1
 801386a:	4413      	add	r3, r2
 801386c:	00db      	lsls	r3, r3, #3
 801386e:	4403      	add	r3, r0
 8013870:	3304      	adds	r3, #4
 8013872:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013874:	4299      	cmp	r1, r3
 8013876:	d10a      	bne.n	801388e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013878:	4a19      	ldr	r2, [pc, #100]	; (80138e0 <etharp_output+0x1fc>)
 801387a:	7dfb      	ldrb	r3, [r7, #23]
 801387c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801387e:	7dfb      	ldrb	r3, [r7, #23]
 8013880:	461a      	mov	r2, r3
 8013882:	68b9      	ldr	r1, [r7, #8]
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f7ff fe93 	bl	80135b0 <etharp_output_to_arp_index>
 801388a:	4603      	mov	r3, r0
 801388c:	e018      	b.n	80138c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801388e:	7dfb      	ldrb	r3, [r7, #23]
 8013890:	3301      	adds	r3, #1
 8013892:	75fb      	strb	r3, [r7, #23]
 8013894:	7dfb      	ldrb	r3, [r7, #23]
 8013896:	2b09      	cmp	r3, #9
 8013898:	d9ca      	bls.n	8013830 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801389a:	68ba      	ldr	r2, [r7, #8]
 801389c:	69b9      	ldr	r1, [r7, #24]
 801389e:	68f8      	ldr	r0, [r7, #12]
 80138a0:	f000 f822 	bl	80138e8 <etharp_query>
 80138a4:	4603      	mov	r3, r0
 80138a6:	e00b      	b.n	80138c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80138ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	68b9      	ldr	r1, [r7, #8]
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f001 fd39 	bl	8015330 <ethernet_output>
 80138be:	4603      	mov	r3, r0
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3720      	adds	r7, #32
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	0801c5ec 	.word	0x0801c5ec
 80138cc:	0801c73c 	.word	0x0801c73c
 80138d0:	0801c664 	.word	0x0801c664
 80138d4:	0801c78c 	.word	0x0801c78c
 80138d8:	0801c72c 	.word	0x0801c72c
 80138dc:	0801cda8 	.word	0x0801cda8
 80138e0:	200005dc 	.word	0x200005dc
 80138e4:	200004ec 	.word	0x200004ec

080138e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b08c      	sub	sp, #48	; 0x30
 80138ec:	af02      	add	r7, sp, #8
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	3322      	adds	r3, #34	; 0x22
 80138f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80138fa:	23ff      	movs	r3, #255	; 0xff
 80138fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013900:	2300      	movs	r3, #0
 8013902:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	68f9      	ldr	r1, [r7, #12]
 801390a:	4618      	mov	r0, r3
 801390c:	f000 fe0c 	bl	8014528 <ip4_addr_isbroadcast_u32>
 8013910:	4603      	mov	r3, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d10c      	bne.n	8013930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801391e:	2be0      	cmp	r3, #224	; 0xe0
 8013920:	d006      	beq.n	8013930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d003      	beq.n	8013930 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d102      	bne.n	8013936 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013930:	f06f 030f 	mvn.w	r3, #15
 8013934:	e102      	b.n	8013b3c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	2101      	movs	r1, #1
 801393a:	68b8      	ldr	r0, [r7, #8]
 801393c:	f7ff fb60 	bl	8013000 <etharp_find_entry>
 8013940:	4603      	mov	r3, r0
 8013942:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013948:	2b00      	cmp	r3, #0
 801394a:	da02      	bge.n	8013952 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801394c:	8a7b      	ldrh	r3, [r7, #18]
 801394e:	b25b      	sxtb	r3, r3
 8013950:	e0f4      	b.n	8013b3c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013952:	8a7b      	ldrh	r3, [r7, #18]
 8013954:	2b7e      	cmp	r3, #126	; 0x7e
 8013956:	d906      	bls.n	8013966 <etharp_query+0x7e>
 8013958:	4b7a      	ldr	r3, [pc, #488]	; (8013b44 <etharp_query+0x25c>)
 801395a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801395e:	497a      	ldr	r1, [pc, #488]	; (8013b48 <etharp_query+0x260>)
 8013960:	487a      	ldr	r0, [pc, #488]	; (8013b4c <etharp_query+0x264>)
 8013962:	f002 fca7 	bl	80162b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013966:	8a7b      	ldrh	r3, [r7, #18]
 8013968:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801396a:	7c7a      	ldrb	r2, [r7, #17]
 801396c:	4978      	ldr	r1, [pc, #480]	; (8013b50 <etharp_query+0x268>)
 801396e:	4613      	mov	r3, r2
 8013970:	005b      	lsls	r3, r3, #1
 8013972:	4413      	add	r3, r2
 8013974:	00db      	lsls	r3, r3, #3
 8013976:	440b      	add	r3, r1
 8013978:	3314      	adds	r3, #20
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d115      	bne.n	80139ac <etharp_query+0xc4>
    is_new_entry = 1;
 8013980:	2301      	movs	r3, #1
 8013982:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013984:	7c7a      	ldrb	r2, [r7, #17]
 8013986:	4972      	ldr	r1, [pc, #456]	; (8013b50 <etharp_query+0x268>)
 8013988:	4613      	mov	r3, r2
 801398a:	005b      	lsls	r3, r3, #1
 801398c:	4413      	add	r3, r2
 801398e:	00db      	lsls	r3, r3, #3
 8013990:	440b      	add	r3, r1
 8013992:	3314      	adds	r3, #20
 8013994:	2201      	movs	r2, #1
 8013996:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013998:	7c7a      	ldrb	r2, [r7, #17]
 801399a:	496d      	ldr	r1, [pc, #436]	; (8013b50 <etharp_query+0x268>)
 801399c:	4613      	mov	r3, r2
 801399e:	005b      	lsls	r3, r3, #1
 80139a0:	4413      	add	r3, r2
 80139a2:	00db      	lsls	r3, r3, #3
 80139a4:	440b      	add	r3, r1
 80139a6:	3308      	adds	r3, #8
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80139ac:	7c7a      	ldrb	r2, [r7, #17]
 80139ae:	4968      	ldr	r1, [pc, #416]	; (8013b50 <etharp_query+0x268>)
 80139b0:	4613      	mov	r3, r2
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	4413      	add	r3, r2
 80139b6:	00db      	lsls	r3, r3, #3
 80139b8:	440b      	add	r3, r1
 80139ba:	3314      	adds	r3, #20
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d011      	beq.n	80139e6 <etharp_query+0xfe>
 80139c2:	7c7a      	ldrb	r2, [r7, #17]
 80139c4:	4962      	ldr	r1, [pc, #392]	; (8013b50 <etharp_query+0x268>)
 80139c6:	4613      	mov	r3, r2
 80139c8:	005b      	lsls	r3, r3, #1
 80139ca:	4413      	add	r3, r2
 80139cc:	00db      	lsls	r3, r3, #3
 80139ce:	440b      	add	r3, r1
 80139d0:	3314      	adds	r3, #20
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	2b01      	cmp	r3, #1
 80139d6:	d806      	bhi.n	80139e6 <etharp_query+0xfe>
 80139d8:	4b5a      	ldr	r3, [pc, #360]	; (8013b44 <etharp_query+0x25c>)
 80139da:	f240 32cf 	movw	r2, #975	; 0x3cf
 80139de:	495d      	ldr	r1, [pc, #372]	; (8013b54 <etharp_query+0x26c>)
 80139e0:	485a      	ldr	r0, [pc, #360]	; (8013b4c <etharp_query+0x264>)
 80139e2:	f002 fc67 	bl	80162b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80139e6:	6a3b      	ldr	r3, [r7, #32]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d102      	bne.n	80139f2 <etharp_query+0x10a>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d10c      	bne.n	8013a0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80139f2:	68b9      	ldr	r1, [r7, #8]
 80139f4:	68f8      	ldr	r0, [r7, #12]
 80139f6:	f000 f963 	bl	8013cc0 <etharp_request>
 80139fa:	4603      	mov	r3, r0
 80139fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d102      	bne.n	8013a0c <etharp_query+0x124>
      return result;
 8013a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013a0a:	e097      	b.n	8013b3c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d106      	bne.n	8013a20 <etharp_query+0x138>
 8013a12:	4b4c      	ldr	r3, [pc, #304]	; (8013b44 <etharp_query+0x25c>)
 8013a14:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013a18:	494f      	ldr	r1, [pc, #316]	; (8013b58 <etharp_query+0x270>)
 8013a1a:	484c      	ldr	r0, [pc, #304]	; (8013b4c <etharp_query+0x264>)
 8013a1c:	f002 fc4a 	bl	80162b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013a20:	7c7a      	ldrb	r2, [r7, #17]
 8013a22:	494b      	ldr	r1, [pc, #300]	; (8013b50 <etharp_query+0x268>)
 8013a24:	4613      	mov	r3, r2
 8013a26:	005b      	lsls	r3, r3, #1
 8013a28:	4413      	add	r3, r2
 8013a2a:	00db      	lsls	r3, r3, #3
 8013a2c:	440b      	add	r3, r1
 8013a2e:	3314      	adds	r3, #20
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	2b01      	cmp	r3, #1
 8013a34:	d918      	bls.n	8013a68 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013a36:	4a49      	ldr	r2, [pc, #292]	; (8013b5c <etharp_query+0x274>)
 8013a38:	7c7b      	ldrb	r3, [r7, #17]
 8013a3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013a3c:	7c7a      	ldrb	r2, [r7, #17]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	005b      	lsls	r3, r3, #1
 8013a42:	4413      	add	r3, r2
 8013a44:	00db      	lsls	r3, r3, #3
 8013a46:	3308      	adds	r3, #8
 8013a48:	4a41      	ldr	r2, [pc, #260]	; (8013b50 <etharp_query+0x268>)
 8013a4a:	4413      	add	r3, r2
 8013a4c:	1d1a      	adds	r2, r3, #4
 8013a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a52:	9300      	str	r3, [sp, #0]
 8013a54:	4613      	mov	r3, r2
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	6879      	ldr	r1, [r7, #4]
 8013a5a:	68f8      	ldr	r0, [r7, #12]
 8013a5c:	f001 fc68 	bl	8015330 <ethernet_output>
 8013a60:	4603      	mov	r3, r0
 8013a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a66:	e067      	b.n	8013b38 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013a68:	7c7a      	ldrb	r2, [r7, #17]
 8013a6a:	4939      	ldr	r1, [pc, #228]	; (8013b50 <etharp_query+0x268>)
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	005b      	lsls	r3, r3, #1
 8013a70:	4413      	add	r3, r2
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	440b      	add	r3, r1
 8013a76:	3314      	adds	r3, #20
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d15c      	bne.n	8013b38 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013a86:	e01c      	b.n	8013ac2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	895a      	ldrh	r2, [r3, #10]
 8013a8c:	69fb      	ldr	r3, [r7, #28]
 8013a8e:	891b      	ldrh	r3, [r3, #8]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d10a      	bne.n	8013aaa <etharp_query+0x1c2>
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d006      	beq.n	8013aaa <etharp_query+0x1c2>
 8013a9c:	4b29      	ldr	r3, [pc, #164]	; (8013b44 <etharp_query+0x25c>)
 8013a9e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013aa2:	492f      	ldr	r1, [pc, #188]	; (8013b60 <etharp_query+0x278>)
 8013aa4:	4829      	ldr	r0, [pc, #164]	; (8013b4c <etharp_query+0x264>)
 8013aa6:	f002 fc05 	bl	80162b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	7b1b      	ldrb	r3, [r3, #12]
 8013aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d002      	beq.n	8013abc <etharp_query+0x1d4>
        copy_needed = 1;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	61bb      	str	r3, [r7, #24]
        break;
 8013aba:	e005      	b.n	8013ac8 <etharp_query+0x1e0>
      }
      p = p->next;
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1df      	bne.n	8013a88 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8013ac8:	69bb      	ldr	r3, [r7, #24]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d007      	beq.n	8013ade <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013ad4:	200e      	movs	r0, #14
 8013ad6:	f7f8 fe2f 	bl	800c738 <pbuf_clone>
 8013ada:	61f8      	str	r0, [r7, #28]
 8013adc:	e004      	b.n	8013ae8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ae2:	69f8      	ldr	r0, [r7, #28]
 8013ae4:	f7f8 fc5c 	bl	800c3a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d021      	beq.n	8013b32 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013aee:	7c7a      	ldrb	r2, [r7, #17]
 8013af0:	4917      	ldr	r1, [pc, #92]	; (8013b50 <etharp_query+0x268>)
 8013af2:	4613      	mov	r3, r2
 8013af4:	005b      	lsls	r3, r3, #1
 8013af6:	4413      	add	r3, r2
 8013af8:	00db      	lsls	r3, r3, #3
 8013afa:	440b      	add	r3, r1
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d00a      	beq.n	8013b18 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013b02:	7c7a      	ldrb	r2, [r7, #17]
 8013b04:	4912      	ldr	r1, [pc, #72]	; (8013b50 <etharp_query+0x268>)
 8013b06:	4613      	mov	r3, r2
 8013b08:	005b      	lsls	r3, r3, #1
 8013b0a:	4413      	add	r3, r2
 8013b0c:	00db      	lsls	r3, r3, #3
 8013b0e:	440b      	add	r3, r1
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f8 fba4 	bl	800c260 <pbuf_free>
      }
      arp_table[i].q = p;
 8013b18:	7c7a      	ldrb	r2, [r7, #17]
 8013b1a:	490d      	ldr	r1, [pc, #52]	; (8013b50 <etharp_query+0x268>)
 8013b1c:	4613      	mov	r3, r2
 8013b1e:	005b      	lsls	r3, r3, #1
 8013b20:	4413      	add	r3, r2
 8013b22:	00db      	lsls	r3, r3, #3
 8013b24:	440b      	add	r3, r1
 8013b26:	69fa      	ldr	r2, [r7, #28]
 8013b28:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b30:	e002      	b.n	8013b38 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013b32:	23ff      	movs	r3, #255	; 0xff
 8013b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3728      	adds	r7, #40	; 0x28
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	0801c5ec 	.word	0x0801c5ec
 8013b48:	0801c798 	.word	0x0801c798
 8013b4c:	0801c664 	.word	0x0801c664
 8013b50:	200004ec 	.word	0x200004ec
 8013b54:	0801c7a8 	.word	0x0801c7a8
 8013b58:	0801c78c 	.word	0x0801c78c
 8013b5c:	200005dc 	.word	0x200005dc
 8013b60:	0801c7d0 	.word	0x0801c7d0

08013b64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b08a      	sub	sp, #40	; 0x28
 8013b68:	af02      	add	r7, sp, #8
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	60b9      	str	r1, [r7, #8]
 8013b6e:	607a      	str	r2, [r7, #4]
 8013b70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013b72:	2300      	movs	r3, #0
 8013b74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d106      	bne.n	8013b8a <etharp_raw+0x26>
 8013b7c:	4b3a      	ldr	r3, [pc, #232]	; (8013c68 <etharp_raw+0x104>)
 8013b7e:	f240 4257 	movw	r2, #1111	; 0x457
 8013b82:	493a      	ldr	r1, [pc, #232]	; (8013c6c <etharp_raw+0x108>)
 8013b84:	483a      	ldr	r0, [pc, #232]	; (8013c70 <etharp_raw+0x10c>)
 8013b86:	f002 fb95 	bl	80162b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013b8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b8e:	211c      	movs	r1, #28
 8013b90:	200e      	movs	r0, #14
 8013b92:	f7f8 f885 	bl	800bca0 <pbuf_alloc>
 8013b96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d102      	bne.n	8013ba4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba2:	e05d      	b.n	8013c60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	895b      	ldrh	r3, [r3, #10]
 8013ba8:	2b1b      	cmp	r3, #27
 8013baa:	d806      	bhi.n	8013bba <etharp_raw+0x56>
 8013bac:	4b2e      	ldr	r3, [pc, #184]	; (8013c68 <etharp_raw+0x104>)
 8013bae:	f240 4263 	movw	r2, #1123	; 0x463
 8013bb2:	4930      	ldr	r1, [pc, #192]	; (8013c74 <etharp_raw+0x110>)
 8013bb4:	482e      	ldr	r0, [pc, #184]	; (8013c70 <etharp_raw+0x10c>)
 8013bb6:	f002 fb7d 	bl	80162b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013bba:	69bb      	ldr	r3, [r7, #24]
 8013bbc:	685b      	ldr	r3, [r3, #4]
 8013bbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7f7 f8b0 	bl	800ad28 <lwip_htons>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	461a      	mov	r2, r3
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bd6:	2b06      	cmp	r3, #6
 8013bd8:	d006      	beq.n	8013be8 <etharp_raw+0x84>
 8013bda:	4b23      	ldr	r3, [pc, #140]	; (8013c68 <etharp_raw+0x104>)
 8013bdc:	f240 426a 	movw	r2, #1130	; 0x46a
 8013be0:	4925      	ldr	r1, [pc, #148]	; (8013c78 <etharp_raw+0x114>)
 8013be2:	4823      	ldr	r0, [pc, #140]	; (8013c70 <etharp_raw+0x10c>)
 8013be4:	f002 fb66 	bl	80162b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	3308      	adds	r3, #8
 8013bec:	2206      	movs	r2, #6
 8013bee:	6839      	ldr	r1, [r7, #0]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f001 fc4c 	bl	801548e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	3312      	adds	r3, #18
 8013bfa:	2206      	movs	r2, #6
 8013bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f001 fc45 	bl	801548e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	330e      	adds	r3, #14
 8013c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c0a:	6812      	ldr	r2, [r2, #0]
 8013c0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	3318      	adds	r3, #24
 8013c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c14:	6812      	ldr	r2, [r2, #0]
 8013c16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	701a      	strb	r2, [r3, #0]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	f042 0201 	orr.w	r2, r2, #1
 8013c24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f042 0208 	orr.w	r2, r2, #8
 8013c2e:	709a      	strb	r2, [r3, #2]
 8013c30:	2200      	movs	r2, #0
 8013c32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	2206      	movs	r2, #6
 8013c38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	2204      	movs	r2, #4
 8013c3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013c40:	f640 0306 	movw	r3, #2054	; 0x806
 8013c44:	9300      	str	r3, [sp, #0]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	69b9      	ldr	r1, [r7, #24]
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f001 fb6f 	bl	8015330 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013c52:	69b8      	ldr	r0, [r7, #24]
 8013c54:	f7f8 fb04 	bl	800c260 <pbuf_free>
  p = NULL;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013c5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3720      	adds	r7, #32
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	0801c5ec 	.word	0x0801c5ec
 8013c6c:	0801c73c 	.word	0x0801c73c
 8013c70:	0801c664 	.word	0x0801c664
 8013c74:	0801c7ec 	.word	0x0801c7ec
 8013c78:	0801c820 	.word	0x0801c820

08013c7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b088      	sub	sp, #32
 8013c80:	af04      	add	r7, sp, #16
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c98:	2201      	movs	r2, #1
 8013c9a:	9203      	str	r2, [sp, #12]
 8013c9c:	68ba      	ldr	r2, [r7, #8]
 8013c9e:	9202      	str	r2, [sp, #8]
 8013ca0:	4a06      	ldr	r2, [pc, #24]	; (8013cbc <etharp_request_dst+0x40>)
 8013ca2:	9201      	str	r2, [sp, #4]
 8013ca4:	9300      	str	r3, [sp, #0]
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	68f8      	ldr	r0, [r7, #12]
 8013cac:	f7ff ff5a 	bl	8013b64 <etharp_raw>
 8013cb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3710      	adds	r7, #16
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	0801cdb0 	.word	0x0801cdb0

08013cc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013cca:	4a05      	ldr	r2, [pc, #20]	; (8013ce0 <etharp_request+0x20>)
 8013ccc:	6839      	ldr	r1, [r7, #0]
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7ff ffd4 	bl	8013c7c <etharp_request_dst>
 8013cd4:	4603      	mov	r3, r0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3708      	adds	r7, #8
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	0801cda8 	.word	0x0801cda8

08013ce4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b08e      	sub	sp, #56	; 0x38
 8013ce8:	af04      	add	r7, sp, #16
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013cee:	4b79      	ldr	r3, [pc, #484]	; (8013ed4 <icmp_input+0x1f0>)
 8013cf0:	689b      	ldr	r3, [r3, #8]
 8013cf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	f003 030f 	and.w	r3, r3, #15
 8013cfc:	b2db      	uxtb	r3, r3
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d06:	2b13      	cmp	r3, #19
 8013d08:	f240 80cd 	bls.w	8013ea6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	895b      	ldrh	r3, [r3, #10]
 8013d10:	2b03      	cmp	r3, #3
 8013d12:	f240 80ca 	bls.w	8013eaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013d20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	f000 80b7 	beq.w	8013e98 <icmp_input+0x1b4>
 8013d2a:	2b08      	cmp	r3, #8
 8013d2c:	f040 80b7 	bne.w	8013e9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013d30:	4b69      	ldr	r3, [pc, #420]	; (8013ed8 <icmp_input+0x1f4>)
 8013d32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d34:	4b67      	ldr	r3, [pc, #412]	; (8013ed4 <icmp_input+0x1f0>)
 8013d36:	695b      	ldr	r3, [r3, #20]
 8013d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d3c:	2be0      	cmp	r3, #224	; 0xe0
 8013d3e:	f000 80bb 	beq.w	8013eb8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013d42:	4b64      	ldr	r3, [pc, #400]	; (8013ed4 <icmp_input+0x1f0>)
 8013d44:	695a      	ldr	r2, [r3, #20]
 8013d46:	4b63      	ldr	r3, [pc, #396]	; (8013ed4 <icmp_input+0x1f0>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	4610      	mov	r0, r2
 8013d4e:	f000 fbeb 	bl	8014528 <ip4_addr_isbroadcast_u32>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f040 80b1 	bne.w	8013ebc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	891b      	ldrh	r3, [r3, #8]
 8013d5e:	2b07      	cmp	r3, #7
 8013d60:	f240 80a5 	bls.w	8013eae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d66:	330e      	adds	r3, #14
 8013d68:	4619      	mov	r1, r3
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f7f8 f9e2 	bl	800c134 <pbuf_add_header>
 8013d70:	4603      	mov	r3, r0
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d04b      	beq.n	8013e0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	891a      	ldrh	r2, [r3, #8]
 8013d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d7c:	4413      	add	r3, r2
 8013d7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	891b      	ldrh	r3, [r3, #8]
 8013d84:	8b7a      	ldrh	r2, [r7, #26]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	f0c0 809a 	bcc.w	8013ec0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013d8c:	8b7b      	ldrh	r3, [r7, #26]
 8013d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d92:	4619      	mov	r1, r3
 8013d94:	200e      	movs	r0, #14
 8013d96:	f7f7 ff83 	bl	800bca0 <pbuf_alloc>
 8013d9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f000 8090 	beq.w	8013ec4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	895b      	ldrh	r3, [r3, #10]
 8013da8:	461a      	mov	r2, r3
 8013daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013dac:	3308      	adds	r3, #8
 8013dae:	429a      	cmp	r2, r3
 8013db0:	d203      	bcs.n	8013dba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013db2:	6978      	ldr	r0, [r7, #20]
 8013db4:	f7f8 fa54 	bl	800c260 <pbuf_free>
          goto icmperr;
 8013db8:	e085      	b.n	8013ec6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f001 fb63 	bl	801548e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013dca:	4619      	mov	r1, r3
 8013dcc:	6978      	ldr	r0, [r7, #20]
 8013dce:	f7f8 f9c1 	bl	800c154 <pbuf_remove_header>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d009      	beq.n	8013dec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013dd8:	4b40      	ldr	r3, [pc, #256]	; (8013edc <icmp_input+0x1f8>)
 8013dda:	22b6      	movs	r2, #182	; 0xb6
 8013ddc:	4940      	ldr	r1, [pc, #256]	; (8013ee0 <icmp_input+0x1fc>)
 8013dde:	4841      	ldr	r0, [pc, #260]	; (8013ee4 <icmp_input+0x200>)
 8013de0:	f002 fa68 	bl	80162b4 <iprintf>
          pbuf_free(r);
 8013de4:	6978      	ldr	r0, [r7, #20]
 8013de6:	f7f8 fa3b 	bl	800c260 <pbuf_free>
          goto icmperr;
 8013dea:	e06c      	b.n	8013ec6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013dec:	6879      	ldr	r1, [r7, #4]
 8013dee:	6978      	ldr	r0, [r7, #20]
 8013df0:	f7f8 fb5e 	bl	800c4b0 <pbuf_copy>
 8013df4:	4603      	mov	r3, r0
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d003      	beq.n	8013e02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013dfa:	6978      	ldr	r0, [r7, #20]
 8013dfc:	f7f8 fa30 	bl	800c260 <pbuf_free>
          goto icmperr;
 8013e00:	e061      	b.n	8013ec6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7f8 fa2c 	bl	800c260 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	607b      	str	r3, [r7, #4]
 8013e0c:	e00f      	b.n	8013e2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e10:	330e      	adds	r3, #14
 8013e12:	4619      	mov	r1, r3
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f7f8 f99d 	bl	800c154 <pbuf_remove_header>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d006      	beq.n	8013e2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013e20:	4b2e      	ldr	r3, [pc, #184]	; (8013edc <icmp_input+0x1f8>)
 8013e22:	22c7      	movs	r2, #199	; 0xc7
 8013e24:	4930      	ldr	r1, [pc, #192]	; (8013ee8 <icmp_input+0x204>)
 8013e26:	482f      	ldr	r0, [pc, #188]	; (8013ee4 <icmp_input+0x200>)
 8013e28:	f002 fa44 	bl	80162b4 <iprintf>
          goto icmperr;
 8013e2c:	e04b      	b.n	8013ec6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e36:	4619      	mov	r1, r3
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7f8 f97b 	bl	800c134 <pbuf_add_header>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d12b      	bne.n	8013e9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	681a      	ldr	r2, [r3, #0]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013e52:	4b20      	ldr	r3, [pc, #128]	; (8013ed4 <icmp_input+0x1f0>)
 8013e54:	691a      	ldr	r2, [r3, #16]
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	2200      	movs	r2, #0
 8013e64:	709a      	strb	r2, [r3, #2]
 8013e66:	2200      	movs	r2, #0
 8013e68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	22ff      	movs	r2, #255	; 0xff
 8013e6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	2200      	movs	r2, #0
 8013e74:	729a      	strb	r2, [r3, #10]
 8013e76:	2200      	movs	r2, #0
 8013e78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	9302      	str	r3, [sp, #8]
 8013e7e:	2301      	movs	r3, #1
 8013e80:	9301      	str	r3, [sp, #4]
 8013e82:	2300      	movs	r3, #0
 8013e84:	9300      	str	r3, [sp, #0]
 8013e86:	23ff      	movs	r3, #255	; 0xff
 8013e88:	2200      	movs	r2, #0
 8013e8a:	69f9      	ldr	r1, [r7, #28]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 fa73 	bl	8014378 <ip4_output_if>
 8013e92:	4603      	mov	r3, r0
 8013e94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013e96:	e001      	b.n	8013e9c <icmp_input+0x1b8>
      break;
 8013e98:	bf00      	nop
 8013e9a:	e000      	b.n	8013e9e <icmp_input+0x1ba>
      break;
 8013e9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013e9e:	6878      	ldr	r0, [r7, #4]
 8013ea0:	f7f8 f9de 	bl	800c260 <pbuf_free>
  return;
 8013ea4:	e013      	b.n	8013ece <icmp_input+0x1ea>
    goto lenerr;
 8013ea6:	bf00      	nop
 8013ea8:	e002      	b.n	8013eb0 <icmp_input+0x1cc>
    goto lenerr;
 8013eaa:	bf00      	nop
 8013eac:	e000      	b.n	8013eb0 <icmp_input+0x1cc>
        goto lenerr;
 8013eae:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f7f8 f9d5 	bl	800c260 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013eb6:	e00a      	b.n	8013ece <icmp_input+0x1ea>
        goto icmperr;
 8013eb8:	bf00      	nop
 8013eba:	e004      	b.n	8013ec6 <icmp_input+0x1e2>
        goto icmperr;
 8013ebc:	bf00      	nop
 8013ebe:	e002      	b.n	8013ec6 <icmp_input+0x1e2>
          goto icmperr;
 8013ec0:	bf00      	nop
 8013ec2:	e000      	b.n	8013ec6 <icmp_input+0x1e2>
          goto icmperr;
 8013ec4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7f8 f9ca 	bl	800c260 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013ecc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013ece:	3728      	adds	r7, #40	; 0x28
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}
 8013ed4:	20003fbc 	.word	0x20003fbc
 8013ed8:	20003fd0 	.word	0x20003fd0
 8013edc:	0801c864 	.word	0x0801c864
 8013ee0:	0801c89c 	.word	0x0801c89c
 8013ee4:	0801c8d4 	.word	0x0801c8d4
 8013ee8:	0801c8fc 	.word	0x0801c8fc

08013eec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013ef8:	78fb      	ldrb	r3, [r7, #3]
 8013efa:	461a      	mov	r2, r3
 8013efc:	2103      	movs	r1, #3
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 f814 	bl	8013f2c <icmp_send_response>
}
 8013f04:	bf00      	nop
 8013f06:	3708      	adds	r7, #8
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	460b      	mov	r3, r1
 8013f16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013f18:	78fb      	ldrb	r3, [r7, #3]
 8013f1a:	461a      	mov	r2, r3
 8013f1c:	210b      	movs	r1, #11
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	f000 f804 	bl	8013f2c <icmp_send_response>
}
 8013f24:	bf00      	nop
 8013f26:	3708      	adds	r7, #8
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b08c      	sub	sp, #48	; 0x30
 8013f30:	af04      	add	r7, sp, #16
 8013f32:	6078      	str	r0, [r7, #4]
 8013f34:	460b      	mov	r3, r1
 8013f36:	70fb      	strb	r3, [r7, #3]
 8013f38:	4613      	mov	r3, r2
 8013f3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013f3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f40:	2124      	movs	r1, #36	; 0x24
 8013f42:	2022      	movs	r0, #34	; 0x22
 8013f44:	f7f7 feac 	bl	800bca0 <pbuf_alloc>
 8013f48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d04c      	beq.n	8013fea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	895b      	ldrh	r3, [r3, #10]
 8013f54:	2b23      	cmp	r3, #35	; 0x23
 8013f56:	d806      	bhi.n	8013f66 <icmp_send_response+0x3a>
 8013f58:	4b26      	ldr	r3, [pc, #152]	; (8013ff4 <icmp_send_response+0xc8>)
 8013f5a:	f240 1269 	movw	r2, #361	; 0x169
 8013f5e:	4926      	ldr	r1, [pc, #152]	; (8013ff8 <icmp_send_response+0xcc>)
 8013f60:	4826      	ldr	r0, [pc, #152]	; (8013ffc <icmp_send_response+0xd0>)
 8013f62:	f002 f9a7 	bl	80162b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	78fa      	ldrb	r2, [r7, #3]
 8013f76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	78ba      	ldrb	r2, [r7, #2]
 8013f7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	2200      	movs	r2, #0
 8013f82:	711a      	strb	r2, [r3, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	719a      	strb	r2, [r3, #6]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	f103 0008 	add.w	r0, r3, #8
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	221c      	movs	r2, #28
 8013fa0:	4619      	mov	r1, r3
 8013fa2:	f001 fa74 	bl	801548e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013fa6:	69bb      	ldr	r3, [r7, #24]
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013fac:	f107 030c 	add.w	r3, r7, #12
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f000 f825 	bl	8014000 <ip4_route>
 8013fb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d011      	beq.n	8013fe2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	709a      	strb	r2, [r3, #2]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013fc8:	f107 020c 	add.w	r2, r7, #12
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	9302      	str	r3, [sp, #8]
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	9301      	str	r3, [sp, #4]
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	9300      	str	r3, [sp, #0]
 8013fd8:	23ff      	movs	r3, #255	; 0xff
 8013fda:	2100      	movs	r1, #0
 8013fdc:	69f8      	ldr	r0, [r7, #28]
 8013fde:	f000 f9cb 	bl	8014378 <ip4_output_if>
  }
  pbuf_free(q);
 8013fe2:	69f8      	ldr	r0, [r7, #28]
 8013fe4:	f7f8 f93c 	bl	800c260 <pbuf_free>
 8013fe8:	e000      	b.n	8013fec <icmp_send_response+0xc0>
    return;
 8013fea:	bf00      	nop
}
 8013fec:	3720      	adds	r7, #32
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	0801c864 	.word	0x0801c864
 8013ff8:	0801c930 	.word	0x0801c930
 8013ffc:	0801c8d4 	.word	0x0801c8d4

08014000 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014000:	b480      	push	{r7}
 8014002:	b085      	sub	sp, #20
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014008:	4b33      	ldr	r3, [pc, #204]	; (80140d8 <ip4_route+0xd8>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	60fb      	str	r3, [r7, #12]
 801400e:	e036      	b.n	801407e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014016:	f003 0301 	and.w	r3, r3, #1
 801401a:	b2db      	uxtb	r3, r3
 801401c:	2b00      	cmp	r3, #0
 801401e:	d02b      	beq.n	8014078 <ip4_route+0x78>
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014026:	089b      	lsrs	r3, r3, #2
 8014028:	f003 0301 	and.w	r3, r3, #1
 801402c:	b2db      	uxtb	r3, r3
 801402e:	2b00      	cmp	r3, #0
 8014030:	d022      	beq.n	8014078 <ip4_route+0x78>
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	3304      	adds	r3, #4
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d01d      	beq.n	8014078 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	3304      	adds	r3, #4
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	405a      	eors	r2, r3
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	3308      	adds	r3, #8
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	4013      	ands	r3, r2
 8014050:	2b00      	cmp	r3, #0
 8014052:	d101      	bne.n	8014058 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	e038      	b.n	80140ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801405e:	f003 0302 	and.w	r3, r3, #2
 8014062:	2b00      	cmp	r3, #0
 8014064:	d108      	bne.n	8014078 <ip4_route+0x78>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	330c      	adds	r3, #12
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	429a      	cmp	r2, r3
 8014072:	d101      	bne.n	8014078 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	e028      	b.n	80140ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	60fb      	str	r3, [r7, #12]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d1c5      	bne.n	8014010 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014084:	4b15      	ldr	r3, [pc, #84]	; (80140dc <ip4_route+0xdc>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d01a      	beq.n	80140c2 <ip4_route+0xc2>
 801408c:	4b13      	ldr	r3, [pc, #76]	; (80140dc <ip4_route+0xdc>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014094:	f003 0301 	and.w	r3, r3, #1
 8014098:	2b00      	cmp	r3, #0
 801409a:	d012      	beq.n	80140c2 <ip4_route+0xc2>
 801409c:	4b0f      	ldr	r3, [pc, #60]	; (80140dc <ip4_route+0xdc>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80140a4:	f003 0304 	and.w	r3, r3, #4
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d00a      	beq.n	80140c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80140ac:	4b0b      	ldr	r3, [pc, #44]	; (80140dc <ip4_route+0xdc>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	3304      	adds	r3, #4
 80140b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d004      	beq.n	80140c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	b2db      	uxtb	r3, r3
 80140be:	2b7f      	cmp	r3, #127	; 0x7f
 80140c0:	d101      	bne.n	80140c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e001      	b.n	80140ca <ip4_route+0xca>
  }

  return netif_default;
 80140c6:	4b05      	ldr	r3, [pc, #20]	; (80140dc <ip4_route+0xdc>)
 80140c8:	681b      	ldr	r3, [r3, #0]
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3714      	adds	r7, #20
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	200074f0 	.word	0x200074f0
 80140dc:	200074f4 	.word	0x200074f4

080140e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80140ee:	f003 0301 	and.w	r3, r3, #1
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d016      	beq.n	8014126 <ip4_input_accept+0x46>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	3304      	adds	r3, #4
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d011      	beq.n	8014126 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014102:	4b0b      	ldr	r3, [pc, #44]	; (8014130 <ip4_input_accept+0x50>)
 8014104:	695a      	ldr	r2, [r3, #20]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	3304      	adds	r3, #4
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	429a      	cmp	r2, r3
 801410e:	d008      	beq.n	8014122 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014110:	4b07      	ldr	r3, [pc, #28]	; (8014130 <ip4_input_accept+0x50>)
 8014112:	695b      	ldr	r3, [r3, #20]
 8014114:	6879      	ldr	r1, [r7, #4]
 8014116:	4618      	mov	r0, r3
 8014118:	f000 fa06 	bl	8014528 <ip4_addr_isbroadcast_u32>
 801411c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801411e:	2b00      	cmp	r3, #0
 8014120:	d001      	beq.n	8014126 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014122:	2301      	movs	r3, #1
 8014124:	e000      	b.n	8014128 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014126:	2300      	movs	r3, #0
}
 8014128:	4618      	mov	r0, r3
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	20003fbc 	.word	0x20003fbc

08014134 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b086      	sub	sp, #24
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	685b      	ldr	r3, [r3, #4]
 8014142:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	091b      	lsrs	r3, r3, #4
 801414a:	b2db      	uxtb	r3, r3
 801414c:	2b04      	cmp	r3, #4
 801414e:	d004      	beq.n	801415a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7f8 f885 	bl	800c260 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014156:	2300      	movs	r3, #0
 8014158:	e105      	b.n	8014366 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	781b      	ldrb	r3, [r3, #0]
 801415e:	f003 030f 	and.w	r3, r3, #15
 8014162:	b2db      	uxtb	r3, r3
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	b2db      	uxtb	r3, r3
 8014168:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	885b      	ldrh	r3, [r3, #2]
 801416e:	b29b      	uxth	r3, r3
 8014170:	4618      	mov	r0, r3
 8014172:	f7f6 fdd9 	bl	800ad28 <lwip_htons>
 8014176:	4603      	mov	r3, r0
 8014178:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	891b      	ldrh	r3, [r3, #8]
 801417e:	89ba      	ldrh	r2, [r7, #12]
 8014180:	429a      	cmp	r2, r3
 8014182:	d204      	bcs.n	801418e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014184:	89bb      	ldrh	r3, [r7, #12]
 8014186:	4619      	mov	r1, r3
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f7f7 fee3 	bl	800bf54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	895b      	ldrh	r3, [r3, #10]
 8014192:	89fa      	ldrh	r2, [r7, #14]
 8014194:	429a      	cmp	r2, r3
 8014196:	d807      	bhi.n	80141a8 <ip4_input+0x74>
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	891b      	ldrh	r3, [r3, #8]
 801419c:	89ba      	ldrh	r2, [r7, #12]
 801419e:	429a      	cmp	r2, r3
 80141a0:	d802      	bhi.n	80141a8 <ip4_input+0x74>
 80141a2:	89fb      	ldrh	r3, [r7, #14]
 80141a4:	2b13      	cmp	r3, #19
 80141a6:	d804      	bhi.n	80141b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7f8 f859 	bl	800c260 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80141ae:	2300      	movs	r3, #0
 80141b0:	e0d9      	b.n	8014366 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	691b      	ldr	r3, [r3, #16]
 80141b6:	4a6e      	ldr	r2, [pc, #440]	; (8014370 <ip4_input+0x23c>)
 80141b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	4a6c      	ldr	r2, [pc, #432]	; (8014370 <ip4_input+0x23c>)
 80141c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80141c2:	4b6b      	ldr	r3, [pc, #428]	; (8014370 <ip4_input+0x23c>)
 80141c4:	695b      	ldr	r3, [r3, #20]
 80141c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141ca:	2be0      	cmp	r3, #224	; 0xe0
 80141cc:	d112      	bne.n	80141f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80141d4:	f003 0301 	and.w	r3, r3, #1
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d007      	beq.n	80141ee <ip4_input+0xba>
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	3304      	adds	r3, #4
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d002      	beq.n	80141ee <ip4_input+0xba>
      netif = inp;
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	613b      	str	r3, [r7, #16]
 80141ec:	e02a      	b.n	8014244 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141ee:	2300      	movs	r3, #0
 80141f0:	613b      	str	r3, [r7, #16]
 80141f2:	e027      	b.n	8014244 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80141f4:	6838      	ldr	r0, [r7, #0]
 80141f6:	f7ff ff73 	bl	80140e0 <ip4_input_accept>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d002      	beq.n	8014206 <ip4_input+0xd2>
      netif = inp;
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	613b      	str	r3, [r7, #16]
 8014204:	e01e      	b.n	8014244 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014206:	2300      	movs	r3, #0
 8014208:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801420a:	4b59      	ldr	r3, [pc, #356]	; (8014370 <ip4_input+0x23c>)
 801420c:	695b      	ldr	r3, [r3, #20]
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b7f      	cmp	r3, #127	; 0x7f
 8014212:	d017      	beq.n	8014244 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014214:	4b57      	ldr	r3, [pc, #348]	; (8014374 <ip4_input+0x240>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	613b      	str	r3, [r7, #16]
 801421a:	e00e      	b.n	801423a <ip4_input+0x106>
          if (netif == inp) {
 801421c:	693a      	ldr	r2, [r7, #16]
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	429a      	cmp	r2, r3
 8014222:	d006      	beq.n	8014232 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014224:	6938      	ldr	r0, [r7, #16]
 8014226:	f7ff ff5b 	bl	80140e0 <ip4_input_accept>
 801422a:	4603      	mov	r3, r0
 801422c:	2b00      	cmp	r3, #0
 801422e:	d108      	bne.n	8014242 <ip4_input+0x10e>
 8014230:	e000      	b.n	8014234 <ip4_input+0x100>
            continue;
 8014232:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	613b      	str	r3, [r7, #16]
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d1ed      	bne.n	801421c <ip4_input+0xe8>
 8014240:	e000      	b.n	8014244 <ip4_input+0x110>
            break;
 8014242:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014244:	4b4a      	ldr	r3, [pc, #296]	; (8014370 <ip4_input+0x23c>)
 8014246:	691b      	ldr	r3, [r3, #16]
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	4618      	mov	r0, r3
 801424c:	f000 f96c 	bl	8014528 <ip4_addr_isbroadcast_u32>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	d105      	bne.n	8014262 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014256:	4b46      	ldr	r3, [pc, #280]	; (8014370 <ip4_input+0x23c>)
 8014258:	691b      	ldr	r3, [r3, #16]
 801425a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801425e:	2be0      	cmp	r3, #224	; 0xe0
 8014260:	d104      	bne.n	801426c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7f7 fffc 	bl	800c260 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014268:	2300      	movs	r3, #0
 801426a:	e07c      	b.n	8014366 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d104      	bne.n	801427c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7f7 fff4 	bl	800c260 <pbuf_free>
    return ERR_OK;
 8014278:	2300      	movs	r3, #0
 801427a:	e074      	b.n	8014366 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	88db      	ldrh	r3, [r3, #6]
 8014280:	b29b      	uxth	r3, r3
 8014282:	461a      	mov	r2, r3
 8014284:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014288:	4013      	ands	r3, r2
 801428a:	2b00      	cmp	r3, #0
 801428c:	d00b      	beq.n	80142a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 fc90 	bl	8014bb4 <ip4_reass>
 8014294:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d101      	bne.n	80142a0 <ip4_input+0x16c>
      return ERR_OK;
 801429c:	2300      	movs	r3, #0
 801429e:	e062      	b.n	8014366 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	685b      	ldr	r3, [r3, #4]
 80142a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80142a6:	4a32      	ldr	r2, [pc, #200]	; (8014370 <ip4_input+0x23c>)
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80142ac:	4a30      	ldr	r2, [pc, #192]	; (8014370 <ip4_input+0x23c>)
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80142b2:	4a2f      	ldr	r2, [pc, #188]	; (8014370 <ip4_input+0x23c>)
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	f003 030f 	and.w	r3, r3, #15
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	009b      	lsls	r3, r3, #2
 80142c4:	b2db      	uxtb	r3, r3
 80142c6:	b29a      	uxth	r2, r3
 80142c8:	4b29      	ldr	r3, [pc, #164]	; (8014370 <ip4_input+0x23c>)
 80142ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80142cc:	89fb      	ldrh	r3, [r7, #14]
 80142ce:	4619      	mov	r1, r3
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f7f7 ff3f 	bl	800c154 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80142d6:	697b      	ldr	r3, [r7, #20]
 80142d8:	7a5b      	ldrb	r3, [r3, #9]
 80142da:	2b06      	cmp	r3, #6
 80142dc:	d009      	beq.n	80142f2 <ip4_input+0x1be>
 80142de:	2b11      	cmp	r3, #17
 80142e0:	d002      	beq.n	80142e8 <ip4_input+0x1b4>
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d00a      	beq.n	80142fc <ip4_input+0x1c8>
 80142e6:	e00e      	b.n	8014306 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80142e8:	6839      	ldr	r1, [r7, #0]
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f7fe fc6a 	bl	8012bc4 <udp_input>
        break;
 80142f0:	e026      	b.n	8014340 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7fa f87f 	bl	800e3f8 <tcp_input>
        break;
 80142fa:	e021      	b.n	8014340 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80142fc:	6839      	ldr	r1, [r7, #0]
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f7ff fcf0 	bl	8013ce4 <icmp_input>
        break;
 8014304:	e01c      	b.n	8014340 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014306:	4b1a      	ldr	r3, [pc, #104]	; (8014370 <ip4_input+0x23c>)
 8014308:	695b      	ldr	r3, [r3, #20]
 801430a:	6939      	ldr	r1, [r7, #16]
 801430c:	4618      	mov	r0, r3
 801430e:	f000 f90b 	bl	8014528 <ip4_addr_isbroadcast_u32>
 8014312:	4603      	mov	r3, r0
 8014314:	2b00      	cmp	r3, #0
 8014316:	d10f      	bne.n	8014338 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014318:	4b15      	ldr	r3, [pc, #84]	; (8014370 <ip4_input+0x23c>)
 801431a:	695b      	ldr	r3, [r3, #20]
 801431c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014320:	2be0      	cmp	r3, #224	; 0xe0
 8014322:	d009      	beq.n	8014338 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014324:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014328:	4619      	mov	r1, r3
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7f7 ff85 	bl	800c23a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014330:	2102      	movs	r1, #2
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f7ff fdda 	bl	8013eec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f7f7 ff91 	bl	800c260 <pbuf_free>
        break;
 801433e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014340:	4b0b      	ldr	r3, [pc, #44]	; (8014370 <ip4_input+0x23c>)
 8014342:	2200      	movs	r2, #0
 8014344:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014346:	4b0a      	ldr	r3, [pc, #40]	; (8014370 <ip4_input+0x23c>)
 8014348:	2200      	movs	r2, #0
 801434a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801434c:	4b08      	ldr	r3, [pc, #32]	; (8014370 <ip4_input+0x23c>)
 801434e:	2200      	movs	r2, #0
 8014350:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014352:	4b07      	ldr	r3, [pc, #28]	; (8014370 <ip4_input+0x23c>)
 8014354:	2200      	movs	r2, #0
 8014356:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014358:	4b05      	ldr	r3, [pc, #20]	; (8014370 <ip4_input+0x23c>)
 801435a:	2200      	movs	r2, #0
 801435c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801435e:	4b04      	ldr	r3, [pc, #16]	; (8014370 <ip4_input+0x23c>)
 8014360:	2200      	movs	r2, #0
 8014362:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014364:	2300      	movs	r3, #0
}
 8014366:	4618      	mov	r0, r3
 8014368:	3718      	adds	r7, #24
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	20003fbc 	.word	0x20003fbc
 8014374:	200074f0 	.word	0x200074f0

08014378 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b08a      	sub	sp, #40	; 0x28
 801437c:	af04      	add	r7, sp, #16
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	607a      	str	r2, [r7, #4]
 8014384:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d009      	beq.n	80143a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d003      	beq.n	801439e <ip4_output_if+0x26>
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d102      	bne.n	80143a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a0:	3304      	adds	r3, #4
 80143a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80143a4:	78fa      	ldrb	r2, [r7, #3]
 80143a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a8:	9302      	str	r3, [sp, #8]
 80143aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80143ae:	9301      	str	r3, [sp, #4]
 80143b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	4613      	mov	r3, r2
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	6979      	ldr	r1, [r7, #20]
 80143bc:	68f8      	ldr	r0, [r7, #12]
 80143be:	f000 f805 	bl	80143cc <ip4_output_if_src>
 80143c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3718      	adds	r7, #24
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}

080143cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b088      	sub	sp, #32
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	60f8      	str	r0, [r7, #12]
 80143d4:	60b9      	str	r1, [r7, #8]
 80143d6:	607a      	str	r2, [r7, #4]
 80143d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	7b9b      	ldrb	r3, [r3, #14]
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d006      	beq.n	80143f0 <ip4_output_if_src+0x24>
 80143e2:	4b4b      	ldr	r3, [pc, #300]	; (8014510 <ip4_output_if_src+0x144>)
 80143e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80143e8:	494a      	ldr	r1, [pc, #296]	; (8014514 <ip4_output_if_src+0x148>)
 80143ea:	484b      	ldr	r0, [pc, #300]	; (8014518 <ip4_output_if_src+0x14c>)
 80143ec:	f001 ff62 	bl	80162b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d060      	beq.n	80144b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80143f6:	2314      	movs	r3, #20
 80143f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80143fa:	2114      	movs	r1, #20
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f7f7 fe99 	bl	800c134 <pbuf_add_header>
 8014402:	4603      	mov	r3, r0
 8014404:	2b00      	cmp	r3, #0
 8014406:	d002      	beq.n	801440e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014408:	f06f 0301 	mvn.w	r3, #1
 801440c:	e07c      	b.n	8014508 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	895b      	ldrh	r3, [r3, #10]
 8014418:	2b13      	cmp	r3, #19
 801441a:	d806      	bhi.n	801442a <ip4_output_if_src+0x5e>
 801441c:	4b3c      	ldr	r3, [pc, #240]	; (8014510 <ip4_output_if_src+0x144>)
 801441e:	f240 3289 	movw	r2, #905	; 0x389
 8014422:	493e      	ldr	r1, [pc, #248]	; (801451c <ip4_output_if_src+0x150>)
 8014424:	483c      	ldr	r0, [pc, #240]	; (8014518 <ip4_output_if_src+0x14c>)
 8014426:	f001 ff45 	bl	80162b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801442a:	69fb      	ldr	r3, [r7, #28]
 801442c:	78fa      	ldrb	r2, [r7, #3]
 801442e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014436:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014440:	8b7b      	ldrh	r3, [r7, #26]
 8014442:	089b      	lsrs	r3, r3, #2
 8014444:	b29b      	uxth	r3, r3
 8014446:	b2db      	uxtb	r3, r3
 8014448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801444c:	b2da      	uxtb	r2, r3
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014458:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	891b      	ldrh	r3, [r3, #8]
 801445e:	4618      	mov	r0, r3
 8014460:	f7f6 fc62 	bl	800ad28 <lwip_htons>
 8014464:	4603      	mov	r3, r0
 8014466:	461a      	mov	r2, r3
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	2200      	movs	r2, #0
 8014470:	719a      	strb	r2, [r3, #6]
 8014472:	2200      	movs	r2, #0
 8014474:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014476:	4b2a      	ldr	r3, [pc, #168]	; (8014520 <ip4_output_if_src+0x154>)
 8014478:	881b      	ldrh	r3, [r3, #0]
 801447a:	4618      	mov	r0, r3
 801447c:	f7f6 fc54 	bl	800ad28 <lwip_htons>
 8014480:	4603      	mov	r3, r0
 8014482:	461a      	mov	r2, r3
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014488:	4b25      	ldr	r3, [pc, #148]	; (8014520 <ip4_output_if_src+0x154>)
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	3301      	adds	r3, #1
 801448e:	b29a      	uxth	r2, r3
 8014490:	4b23      	ldr	r3, [pc, #140]	; (8014520 <ip4_output_if_src+0x154>)
 8014492:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d104      	bne.n	80144a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801449a:	4b22      	ldr	r3, [pc, #136]	; (8014524 <ip4_output_if_src+0x158>)
 801449c:	681a      	ldr	r2, [r3, #0]
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	60da      	str	r2, [r3, #12]
 80144a2:	e003      	b.n	80144ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	2200      	movs	r2, #0
 80144b0:	729a      	strb	r2, [r3, #10]
 80144b2:	2200      	movs	r2, #0
 80144b4:	72da      	strb	r2, [r3, #11]
 80144b6:	e00f      	b.n	80144d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	895b      	ldrh	r3, [r3, #10]
 80144bc:	2b13      	cmp	r3, #19
 80144be:	d802      	bhi.n	80144c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80144c0:	f06f 0301 	mvn.w	r3, #1
 80144c4:	e020      	b.n	8014508 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	691b      	ldr	r3, [r3, #16]
 80144d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80144d2:	f107 0314 	add.w	r3, r7, #20
 80144d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80144d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144da:	8c1b      	ldrh	r3, [r3, #32]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00c      	beq.n	80144fa <ip4_output_if_src+0x12e>
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	891a      	ldrh	r2, [r3, #8]
 80144e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e6:	8c1b      	ldrh	r3, [r3, #32]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d906      	bls.n	80144fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f000 fd4b 	bl	8014f8c <ip4_frag>
 80144f6:	4603      	mov	r3, r0
 80144f8:	e006      	b.n	8014508 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80144fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fc:	695b      	ldr	r3, [r3, #20]
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	68f9      	ldr	r1, [r7, #12]
 8014502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014504:	4798      	blx	r3
 8014506:	4603      	mov	r3, r0
}
 8014508:	4618      	mov	r0, r3
 801450a:	3720      	adds	r7, #32
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	0801c95c 	.word	0x0801c95c
 8014514:	0801c990 	.word	0x0801c990
 8014518:	0801c99c 	.word	0x0801c99c
 801451c:	0801c9c4 	.word	0x0801c9c4
 8014520:	200005de 	.word	0x200005de
 8014524:	0801cda4 	.word	0x0801cda4

08014528 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014528:	b480      	push	{r7}
 801452a:	b085      	sub	sp, #20
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801453c:	d002      	beq.n	8014544 <ip4_addr_isbroadcast_u32+0x1c>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d101      	bne.n	8014548 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014544:	2301      	movs	r3, #1
 8014546:	e02a      	b.n	801459e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801454e:	f003 0302 	and.w	r3, r3, #2
 8014552:	2b00      	cmp	r3, #0
 8014554:	d101      	bne.n	801455a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014556:	2300      	movs	r3, #0
 8014558:	e021      	b.n	801459e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	3304      	adds	r3, #4
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	429a      	cmp	r2, r3
 8014564:	d101      	bne.n	801456a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014566:	2300      	movs	r3, #0
 8014568:	e019      	b.n	801459e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801456a:	68fa      	ldr	r2, [r7, #12]
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	3304      	adds	r3, #4
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	405a      	eors	r2, r3
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	3308      	adds	r3, #8
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	4013      	ands	r3, r2
 801457c:	2b00      	cmp	r3, #0
 801457e:	d10d      	bne.n	801459c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	3308      	adds	r3, #8
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	43da      	mvns	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	3308      	adds	r3, #8
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014594:	429a      	cmp	r2, r3
 8014596:	d101      	bne.n	801459c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014598:	2301      	movs	r3, #1
 801459a:	e000      	b.n	801459e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801459c:	2300      	movs	r3, #0
  }
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3714      	adds	r7, #20
 80145a2:	46bd      	mov	sp, r7
 80145a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a8:	4770      	bx	lr
	...

080145ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80145b2:	2300      	movs	r3, #0
 80145b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80145b6:	4b12      	ldr	r3, [pc, #72]	; (8014600 <ip_reass_tmr+0x54>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80145bc:	e018      	b.n	80145f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	7fdb      	ldrb	r3, [r3, #31]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00b      	beq.n	80145de <ip_reass_tmr+0x32>
      r->timer--;
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	7fdb      	ldrb	r3, [r3, #31]
 80145ca:	3b01      	subs	r3, #1
 80145cc:	b2da      	uxtb	r2, r3
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	60fb      	str	r3, [r7, #12]
 80145dc:	e008      	b.n	80145f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80145e8:	68b9      	ldr	r1, [r7, #8]
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f000 f80a 	bl	8014604 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d1e3      	bne.n	80145be <ip_reass_tmr+0x12>
    }
  }
}
 80145f6:	bf00      	nop
 80145f8:	3710      	adds	r7, #16
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	200005e0 	.word	0x200005e0

08014604 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b088      	sub	sp, #32
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
 801460c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801460e:	2300      	movs	r3, #0
 8014610:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014612:	683a      	ldr	r2, [r7, #0]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	429a      	cmp	r2, r3
 8014618:	d105      	bne.n	8014626 <ip_reass_free_complete_datagram+0x22>
 801461a:	4b45      	ldr	r3, [pc, #276]	; (8014730 <ip_reass_free_complete_datagram+0x12c>)
 801461c:	22ab      	movs	r2, #171	; 0xab
 801461e:	4945      	ldr	r1, [pc, #276]	; (8014734 <ip_reass_free_complete_datagram+0x130>)
 8014620:	4845      	ldr	r0, [pc, #276]	; (8014738 <ip_reass_free_complete_datagram+0x134>)
 8014622:	f001 fe47 	bl	80162b4 <iprintf>
  if (prev != NULL) {
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d00a      	beq.n	8014642 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	429a      	cmp	r2, r3
 8014634:	d005      	beq.n	8014642 <ip_reass_free_complete_datagram+0x3e>
 8014636:	4b3e      	ldr	r3, [pc, #248]	; (8014730 <ip_reass_free_complete_datagram+0x12c>)
 8014638:	22ad      	movs	r2, #173	; 0xad
 801463a:	4940      	ldr	r1, [pc, #256]	; (801473c <ip_reass_free_complete_datagram+0x138>)
 801463c:	483e      	ldr	r0, [pc, #248]	; (8014738 <ip_reass_free_complete_datagram+0x134>)
 801463e:	f001 fe39 	bl	80162b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	685b      	ldr	r3, [r3, #4]
 8014646:	685b      	ldr	r3, [r3, #4]
 8014648:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	889b      	ldrh	r3, [r3, #4]
 801464e:	b29b      	uxth	r3, r3
 8014650:	2b00      	cmp	r3, #0
 8014652:	d12a      	bne.n	80146aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	681a      	ldr	r2, [r3, #0]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014662:	69bb      	ldr	r3, [r7, #24]
 8014664:	6858      	ldr	r0, [r3, #4]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	3308      	adds	r3, #8
 801466a:	2214      	movs	r2, #20
 801466c:	4619      	mov	r1, r3
 801466e:	f000 ff0e 	bl	801548e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014672:	2101      	movs	r1, #1
 8014674:	69b8      	ldr	r0, [r7, #24]
 8014676:	f7ff fc49 	bl	8013f0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801467a:	69b8      	ldr	r0, [r7, #24]
 801467c:	f7f7 fe78 	bl	800c370 <pbuf_clen>
 8014680:	4603      	mov	r3, r0
 8014682:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014684:	8bfa      	ldrh	r2, [r7, #30]
 8014686:	8a7b      	ldrh	r3, [r7, #18]
 8014688:	4413      	add	r3, r2
 801468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801468e:	db05      	blt.n	801469c <ip_reass_free_complete_datagram+0x98>
 8014690:	4b27      	ldr	r3, [pc, #156]	; (8014730 <ip_reass_free_complete_datagram+0x12c>)
 8014692:	22bc      	movs	r2, #188	; 0xbc
 8014694:	492a      	ldr	r1, [pc, #168]	; (8014740 <ip_reass_free_complete_datagram+0x13c>)
 8014696:	4828      	ldr	r0, [pc, #160]	; (8014738 <ip_reass_free_complete_datagram+0x134>)
 8014698:	f001 fe0c 	bl	80162b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801469c:	8bfa      	ldrh	r2, [r7, #30]
 801469e:	8a7b      	ldrh	r3, [r7, #18]
 80146a0:	4413      	add	r3, r2
 80146a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80146a4:	69b8      	ldr	r0, [r7, #24]
 80146a6:	f7f7 fddb 	bl	800c260 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80146b0:	e01f      	b.n	80146f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80146b8:	69bb      	ldr	r3, [r7, #24]
 80146ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80146c2:	68f8      	ldr	r0, [r7, #12]
 80146c4:	f7f7 fe54 	bl	800c370 <pbuf_clen>
 80146c8:	4603      	mov	r3, r0
 80146ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80146cc:	8bfa      	ldrh	r2, [r7, #30]
 80146ce:	8a7b      	ldrh	r3, [r7, #18]
 80146d0:	4413      	add	r3, r2
 80146d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146d6:	db05      	blt.n	80146e4 <ip_reass_free_complete_datagram+0xe0>
 80146d8:	4b15      	ldr	r3, [pc, #84]	; (8014730 <ip_reass_free_complete_datagram+0x12c>)
 80146da:	22cc      	movs	r2, #204	; 0xcc
 80146dc:	4918      	ldr	r1, [pc, #96]	; (8014740 <ip_reass_free_complete_datagram+0x13c>)
 80146de:	4816      	ldr	r0, [pc, #88]	; (8014738 <ip_reass_free_complete_datagram+0x134>)
 80146e0:	f001 fde8 	bl	80162b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80146e4:	8bfa      	ldrh	r2, [r7, #30]
 80146e6:	8a7b      	ldrh	r3, [r7, #18]
 80146e8:	4413      	add	r3, r2
 80146ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80146ec:	68f8      	ldr	r0, [r7, #12]
 80146ee:	f7f7 fdb7 	bl	800c260 <pbuf_free>
  while (p != NULL) {
 80146f2:	69bb      	ldr	r3, [r7, #24]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d1dc      	bne.n	80146b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80146f8:	6839      	ldr	r1, [r7, #0]
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f8c2 	bl	8014884 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014700:	4b10      	ldr	r3, [pc, #64]	; (8014744 <ip_reass_free_complete_datagram+0x140>)
 8014702:	881b      	ldrh	r3, [r3, #0]
 8014704:	8bfa      	ldrh	r2, [r7, #30]
 8014706:	429a      	cmp	r2, r3
 8014708:	d905      	bls.n	8014716 <ip_reass_free_complete_datagram+0x112>
 801470a:	4b09      	ldr	r3, [pc, #36]	; (8014730 <ip_reass_free_complete_datagram+0x12c>)
 801470c:	22d2      	movs	r2, #210	; 0xd2
 801470e:	490e      	ldr	r1, [pc, #56]	; (8014748 <ip_reass_free_complete_datagram+0x144>)
 8014710:	4809      	ldr	r0, [pc, #36]	; (8014738 <ip_reass_free_complete_datagram+0x134>)
 8014712:	f001 fdcf 	bl	80162b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014716:	4b0b      	ldr	r3, [pc, #44]	; (8014744 <ip_reass_free_complete_datagram+0x140>)
 8014718:	881a      	ldrh	r2, [r3, #0]
 801471a:	8bfb      	ldrh	r3, [r7, #30]
 801471c:	1ad3      	subs	r3, r2, r3
 801471e:	b29a      	uxth	r2, r3
 8014720:	4b08      	ldr	r3, [pc, #32]	; (8014744 <ip_reass_free_complete_datagram+0x140>)
 8014722:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014724:	8bfb      	ldrh	r3, [r7, #30]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3720      	adds	r7, #32
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	0801c9f4 	.word	0x0801c9f4
 8014734:	0801ca30 	.word	0x0801ca30
 8014738:	0801ca3c 	.word	0x0801ca3c
 801473c:	0801ca64 	.word	0x0801ca64
 8014740:	0801ca78 	.word	0x0801ca78
 8014744:	200005e4 	.word	0x200005e4
 8014748:	0801ca98 	.word	0x0801ca98

0801474c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08a      	sub	sp, #40	; 0x28
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014756:	2300      	movs	r3, #0
 8014758:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801475a:	2300      	movs	r3, #0
 801475c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801475e:	2300      	movs	r3, #0
 8014760:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014762:	2300      	movs	r3, #0
 8014764:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014766:	2300      	movs	r3, #0
 8014768:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801476a:	4b28      	ldr	r3, [pc, #160]	; (801480c <ip_reass_remove_oldest_datagram+0xc0>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014770:	e030      	b.n	80147d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014774:	695a      	ldr	r2, [r3, #20]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	68db      	ldr	r3, [r3, #12]
 801477a:	429a      	cmp	r2, r3
 801477c:	d10c      	bne.n	8014798 <ip_reass_remove_oldest_datagram+0x4c>
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	699a      	ldr	r2, [r3, #24]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	691b      	ldr	r3, [r3, #16]
 8014786:	429a      	cmp	r2, r3
 8014788:	d106      	bne.n	8014798 <ip_reass_remove_oldest_datagram+0x4c>
 801478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478c:	899a      	ldrh	r2, [r3, #12]
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	889b      	ldrh	r3, [r3, #4]
 8014792:	b29b      	uxth	r3, r3
 8014794:	429a      	cmp	r2, r3
 8014796:	d014      	beq.n	80147c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	3301      	adds	r3, #1
 801479c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801479e:	6a3b      	ldr	r3, [r7, #32]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d104      	bne.n	80147ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80147a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80147a8:	69fb      	ldr	r3, [r7, #28]
 80147aa:	61bb      	str	r3, [r7, #24]
 80147ac:	e009      	b.n	80147c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80147ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b0:	7fda      	ldrb	r2, [r3, #31]
 80147b2:	6a3b      	ldr	r3, [r7, #32]
 80147b4:	7fdb      	ldrb	r3, [r3, #31]
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d803      	bhi.n	80147c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80147ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80147be:	69fb      	ldr	r3, [r7, #28]
 80147c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d001      	beq.n	80147ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80147ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80147ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d1cb      	bne.n	8014772 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d008      	beq.n	80147f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80147e0:	69b9      	ldr	r1, [r7, #24]
 80147e2:	6a38      	ldr	r0, [r7, #32]
 80147e4:	f7ff ff0e 	bl	8014604 <ip_reass_free_complete_datagram>
 80147e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	4413      	add	r3, r2
 80147f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80147f2:	697a      	ldr	r2, [r7, #20]
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	da02      	bge.n	8014800 <ip_reass_remove_oldest_datagram+0xb4>
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	2b01      	cmp	r3, #1
 80147fe:	dcac      	bgt.n	801475a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014800:	697b      	ldr	r3, [r7, #20]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3728      	adds	r7, #40	; 0x28
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	200005e0 	.word	0x200005e0

08014810 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b084      	sub	sp, #16
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801481a:	2004      	movs	r0, #4
 801481c:	f7f6 feda 	bl	800b5d4 <memp_malloc>
 8014820:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d110      	bne.n	801484a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014828:	6839      	ldr	r1, [r7, #0]
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff ff8e 	bl	801474c <ip_reass_remove_oldest_datagram>
 8014830:	4602      	mov	r2, r0
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	4293      	cmp	r3, r2
 8014836:	dc03      	bgt.n	8014840 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014838:	2004      	movs	r0, #4
 801483a:	f7f6 fecb 	bl	800b5d4 <memp_malloc>
 801483e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d101      	bne.n	801484a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014846:	2300      	movs	r3, #0
 8014848:	e016      	b.n	8014878 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801484a:	2220      	movs	r2, #32
 801484c:	2100      	movs	r1, #0
 801484e:	68f8      	ldr	r0, [r7, #12]
 8014850:	f000 fe41 	bl	80154d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	220f      	movs	r2, #15
 8014858:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801485a:	4b09      	ldr	r3, [pc, #36]	; (8014880 <ip_reass_enqueue_new_datagram+0x70>)
 801485c:	681a      	ldr	r2, [r3, #0]
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014862:	4a07      	ldr	r2, [pc, #28]	; (8014880 <ip_reass_enqueue_new_datagram+0x70>)
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	3308      	adds	r3, #8
 801486c:	2214      	movs	r2, #20
 801486e:	6879      	ldr	r1, [r7, #4]
 8014870:	4618      	mov	r0, r3
 8014872:	f000 fe0c 	bl	801548e <memcpy>
  return ipr;
 8014876:	68fb      	ldr	r3, [r7, #12]
}
 8014878:	4618      	mov	r0, r3
 801487a:	3710      	adds	r7, #16
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	200005e0 	.word	0x200005e0

08014884 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801488e:	4b10      	ldr	r3, [pc, #64]	; (80148d0 <ip_reass_dequeue_datagram+0x4c>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	429a      	cmp	r2, r3
 8014896:	d104      	bne.n	80148a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	4a0c      	ldr	r2, [pc, #48]	; (80148d0 <ip_reass_dequeue_datagram+0x4c>)
 801489e:	6013      	str	r3, [r2, #0]
 80148a0:	e00d      	b.n	80148be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d106      	bne.n	80148b6 <ip_reass_dequeue_datagram+0x32>
 80148a8:	4b0a      	ldr	r3, [pc, #40]	; (80148d4 <ip_reass_dequeue_datagram+0x50>)
 80148aa:	f240 1245 	movw	r2, #325	; 0x145
 80148ae:	490a      	ldr	r1, [pc, #40]	; (80148d8 <ip_reass_dequeue_datagram+0x54>)
 80148b0:	480a      	ldr	r0, [pc, #40]	; (80148dc <ip_reass_dequeue_datagram+0x58>)
 80148b2:	f001 fcff 	bl	80162b4 <iprintf>
    prev->next = ipr->next;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80148be:	6879      	ldr	r1, [r7, #4]
 80148c0:	2004      	movs	r0, #4
 80148c2:	f7f6 fed3 	bl	800b66c <memp_free>
}
 80148c6:	bf00      	nop
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	200005e0 	.word	0x200005e0
 80148d4:	0801c9f4 	.word	0x0801c9f4
 80148d8:	0801cabc 	.word	0x0801cabc
 80148dc:	0801ca3c 	.word	0x0801ca3c

080148e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b08c      	sub	sp, #48	; 0x30
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	60f8      	str	r0, [r7, #12]
 80148e8:	60b9      	str	r1, [r7, #8]
 80148ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80148ec:	2300      	movs	r3, #0
 80148ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80148f0:	2301      	movs	r3, #1
 80148f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	885b      	ldrh	r3, [r3, #2]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	4618      	mov	r0, r3
 8014902:	f7f6 fa11 	bl	800ad28 <lwip_htons>
 8014906:	4603      	mov	r3, r0
 8014908:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	f003 030f 	and.w	r3, r3, #15
 8014912:	b2db      	uxtb	r3, r3
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014918:	7e7b      	ldrb	r3, [r7, #25]
 801491a:	b29b      	uxth	r3, r3
 801491c:	8b7a      	ldrh	r2, [r7, #26]
 801491e:	429a      	cmp	r2, r3
 8014920:	d202      	bcs.n	8014928 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014922:	f04f 33ff 	mov.w	r3, #4294967295
 8014926:	e135      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014928:	7e7b      	ldrb	r3, [r7, #25]
 801492a:	b29b      	uxth	r3, r3
 801492c:	8b7a      	ldrh	r2, [r7, #26]
 801492e:	1ad3      	subs	r3, r2, r3
 8014930:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	88db      	ldrh	r3, [r3, #6]
 8014936:	b29b      	uxth	r3, r3
 8014938:	4618      	mov	r0, r3
 801493a:	f7f6 f9f5 	bl	800ad28 <lwip_htons>
 801493e:	4603      	mov	r3, r0
 8014940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014944:	b29b      	uxth	r3, r3
 8014946:	00db      	lsls	r3, r3, #3
 8014948:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014952:	2200      	movs	r2, #0
 8014954:	701a      	strb	r2, [r3, #0]
 8014956:	2200      	movs	r2, #0
 8014958:	705a      	strb	r2, [r3, #1]
 801495a:	2200      	movs	r2, #0
 801495c:	709a      	strb	r2, [r3, #2]
 801495e:	2200      	movs	r2, #0
 8014960:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014964:	8afa      	ldrh	r2, [r7, #22]
 8014966:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014968:	8afa      	ldrh	r2, [r7, #22]
 801496a:	8b7b      	ldrh	r3, [r7, #26]
 801496c:	4413      	add	r3, r2
 801496e:	b29a      	uxth	r2, r3
 8014970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014972:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014976:	88db      	ldrh	r3, [r3, #6]
 8014978:	b29b      	uxth	r3, r3
 801497a:	8afa      	ldrh	r2, [r7, #22]
 801497c:	429a      	cmp	r2, r3
 801497e:	d902      	bls.n	8014986 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014980:	f04f 33ff 	mov.w	r3, #4294967295
 8014984:	e106      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	627b      	str	r3, [r7, #36]	; 0x24
 801498c:	e068      	b.n	8014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014996:	889b      	ldrh	r3, [r3, #4]
 8014998:	b29a      	uxth	r2, r3
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	889b      	ldrh	r3, [r3, #4]
 801499e:	b29b      	uxth	r3, r3
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d235      	bcs.n	8014a10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80149a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80149aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d020      	beq.n	80149f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80149b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b2:	889b      	ldrh	r3, [r3, #4]
 80149b4:	b29a      	uxth	r2, r3
 80149b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b8:	88db      	ldrh	r3, [r3, #6]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	429a      	cmp	r2, r3
 80149be:	d307      	bcc.n	80149d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80149c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c2:	88db      	ldrh	r3, [r3, #6]
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	889b      	ldrh	r3, [r3, #4]
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d902      	bls.n	80149d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149d0:	f04f 33ff 	mov.w	r3, #4294967295
 80149d4:	e0de      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	68ba      	ldr	r2, [r7, #8]
 80149da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80149dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149de:	88db      	ldrh	r3, [r3, #6]
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e4:	889b      	ldrh	r3, [r3, #4]
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d03d      	beq.n	8014a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80149ec:	2300      	movs	r3, #0
 80149ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80149f0:	e03a      	b.n	8014a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80149f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f4:	88db      	ldrh	r3, [r3, #6]
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	889b      	ldrh	r3, [r3, #4]
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d902      	bls.n	8014a08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a02:	f04f 33ff 	mov.w	r3, #4294967295
 8014a06:	e0c5      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	68ba      	ldr	r2, [r7, #8]
 8014a0c:	605a      	str	r2, [r3, #4]
      break;
 8014a0e:	e02b      	b.n	8014a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a12:	889b      	ldrh	r3, [r3, #4]
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	889b      	ldrh	r3, [r3, #4]
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d102      	bne.n	8014a26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a20:	f04f 33ff 	mov.w	r3, #4294967295
 8014a24:	e0b6      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a28:	889b      	ldrh	r3, [r3, #4]
 8014a2a:	b29a      	uxth	r2, r3
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	88db      	ldrh	r3, [r3, #6]
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d202      	bcs.n	8014a3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a36:	f04f 33ff 	mov.w	r3, #4294967295
 8014a3a:	e0ab      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d009      	beq.n	8014a56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a44:	88db      	ldrh	r3, [r3, #6]
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	889b      	ldrh	r3, [r3, #4]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d001      	beq.n	8014a56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014a52:	2300      	movs	r3, #0
 8014a54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d193      	bne.n	801498e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014a66:	e000      	b.n	8014a6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014a68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d12d      	bne.n	8014acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d01c      	beq.n	8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a78:	88db      	ldrh	r3, [r3, #6]
 8014a7a:	b29a      	uxth	r2, r3
 8014a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7e:	889b      	ldrh	r3, [r3, #4]
 8014a80:	b29b      	uxth	r3, r3
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d906      	bls.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014a86:	4b45      	ldr	r3, [pc, #276]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014a8c:	4944      	ldr	r1, [pc, #272]	; (8014ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014a8e:	4845      	ldr	r0, [pc, #276]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a90:	f001 fc10 	bl	80162b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9c:	88db      	ldrh	r3, [r3, #6]
 8014a9e:	b29a      	uxth	r2, r3
 8014aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa2:	889b      	ldrh	r3, [r3, #4]
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d010      	beq.n	8014acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	623b      	str	r3, [r7, #32]
 8014aae:	e00d      	b.n	8014acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d006      	beq.n	8014ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014ab8:	4b38      	ldr	r3, [pc, #224]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014aba:	f240 12bf 	movw	r2, #447	; 0x1bf
 8014abe:	493a      	ldr	r1, [pc, #232]	; (8014ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014ac0:	4838      	ldr	r0, [pc, #224]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ac2:	f001 fbf7 	bl	80162b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	68ba      	ldr	r2, [r7, #8]
 8014aca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d105      	bne.n	8014ade <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	7f9b      	ldrb	r3, [r3, #30]
 8014ad6:	f003 0301 	and.w	r3, r3, #1
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d059      	beq.n	8014b92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014ade:	6a3b      	ldr	r3, [r7, #32]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d04f      	beq.n	8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d006      	beq.n	8014afa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	889b      	ldrh	r3, [r3, #4]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d002      	beq.n	8014b00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014afa:	2300      	movs	r3, #0
 8014afc:	623b      	str	r3, [r7, #32]
 8014afe:	e041      	b.n	8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014b0a:	e012      	b.n	8014b32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	88db      	ldrh	r3, [r3, #6]
 8014b16:	b29a      	uxth	r2, r3
 8014b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b1a:	889b      	ldrh	r3, [r3, #4]
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d002      	beq.n	8014b28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014b22:	2300      	movs	r3, #0
 8014b24:	623b      	str	r3, [r7, #32]
            break;
 8014b26:	e007      	b.n	8014b38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1e9      	bne.n	8014b0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014b38:	6a3b      	ldr	r3, [r7, #32]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d022      	beq.n	8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d106      	bne.n	8014b54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014b46:	4b15      	ldr	r3, [pc, #84]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b48:	f240 12df 	movw	r2, #479	; 0x1df
 8014b4c:	4917      	ldr	r1, [pc, #92]	; (8014bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b4e:	4815      	ldr	r0, [pc, #84]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b50:	f001 fbb0 	bl	80162b4 <iprintf>
          LWIP_ASSERT("sanity check",
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b5c:	429a      	cmp	r2, r3
 8014b5e:	d106      	bne.n	8014b6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014b60:	4b0e      	ldr	r3, [pc, #56]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b62:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014b66:	4911      	ldr	r1, [pc, #68]	; (8014bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b68:	480e      	ldr	r0, [pc, #56]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b6a:	f001 fba3 	bl	80162b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d006      	beq.n	8014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014b76:	4b09      	ldr	r3, [pc, #36]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b78:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014b7c:	490c      	ldr	r1, [pc, #48]	; (8014bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014b7e:	4809      	ldr	r0, [pc, #36]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b80:	f001 fb98 	bl	80162b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014b84:	6a3b      	ldr	r3, [r7, #32]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	bf14      	ite	ne
 8014b8a:	2301      	movne	r3, #1
 8014b8c:	2300      	moveq	r3, #0
 8014b8e:	b2db      	uxtb	r3, r3
 8014b90:	e000      	b.n	8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014b92:	2300      	movs	r3, #0
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	3730      	adds	r7, #48	; 0x30
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	0801c9f4 	.word	0x0801c9f4
 8014ba0:	0801cad8 	.word	0x0801cad8
 8014ba4:	0801ca3c 	.word	0x0801ca3c
 8014ba8:	0801caf8 	.word	0x0801caf8
 8014bac:	0801cb30 	.word	0x0801cb30
 8014bb0:	0801cb40 	.word	0x0801cb40

08014bb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b08e      	sub	sp, #56	; 0x38
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	f003 030f 	and.w	r3, r3, #15
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	009b      	lsls	r3, r3, #2
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	2b14      	cmp	r3, #20
 8014bd2:	f040 8167 	bne.w	8014ea4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd8:	88db      	ldrh	r3, [r3, #6]
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7f6 f8a3 	bl	800ad28 <lwip_htons>
 8014be2:	4603      	mov	r3, r0
 8014be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	00db      	lsls	r3, r3, #3
 8014bec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf0:	885b      	ldrh	r3, [r3, #2]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7f6 f897 	bl	800ad28 <lwip_htons>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	f003 030f 	and.w	r3, r3, #15
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	009b      	lsls	r3, r3, #2
 8014c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c16:	429a      	cmp	r2, r3
 8014c18:	f0c0 8146 	bcc.w	8014ea8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7f7 fba1 	bl	800c370 <pbuf_clen>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014c32:	4ba3      	ldr	r3, [pc, #652]	; (8014ec0 <ip4_reass+0x30c>)
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	461a      	mov	r2, r3
 8014c38:	8c3b      	ldrh	r3, [r7, #32]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	2b0a      	cmp	r3, #10
 8014c3e:	dd10      	ble.n	8014c62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c40:	8c3b      	ldrh	r3, [r7, #32]
 8014c42:	4619      	mov	r1, r3
 8014c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c46:	f7ff fd81 	bl	801474c <ip_reass_remove_oldest_datagram>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f000 812d 	beq.w	8014eac <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014c52:	4b9b      	ldr	r3, [pc, #620]	; (8014ec0 <ip4_reass+0x30c>)
 8014c54:	881b      	ldrh	r3, [r3, #0]
 8014c56:	461a      	mov	r2, r3
 8014c58:	8c3b      	ldrh	r3, [r7, #32]
 8014c5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c5c:	2b0a      	cmp	r3, #10
 8014c5e:	f300 8125 	bgt.w	8014eac <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c62:	4b98      	ldr	r3, [pc, #608]	; (8014ec4 <ip4_reass+0x310>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	633b      	str	r3, [r7, #48]	; 0x30
 8014c68:	e015      	b.n	8014c96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6c:	695a      	ldr	r2, [r3, #20]
 8014c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d10c      	bne.n	8014c90 <ip4_reass+0xdc>
 8014c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c78:	699a      	ldr	r2, [r3, #24]
 8014c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7c:	691b      	ldr	r3, [r3, #16]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d106      	bne.n	8014c90 <ip4_reass+0xdc>
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	899a      	ldrh	r2, [r3, #12]
 8014c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c88:	889b      	ldrh	r3, [r3, #4]
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d006      	beq.n	8014c9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	633b      	str	r3, [r7, #48]	; 0x30
 8014c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d1e6      	bne.n	8014c6a <ip4_reass+0xb6>
 8014c9c:	e000      	b.n	8014ca0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014c9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d109      	bne.n	8014cba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014ca6:	8c3b      	ldrh	r3, [r7, #32]
 8014ca8:	4619      	mov	r1, r3
 8014caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cac:	f7ff fdb0 	bl	8014810 <ip_reass_enqueue_new_datagram>
 8014cb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d11c      	bne.n	8014cf2 <ip4_reass+0x13e>
      goto nullreturn;
 8014cb8:	e0f9      	b.n	8014eae <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbc:	88db      	ldrh	r3, [r3, #6]
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f6 f831 	bl	800ad28 <lwip_htons>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d110      	bne.n	8014cf2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd2:	89db      	ldrh	r3, [r3, #14]
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7f6 f827 	bl	800ad28 <lwip_htons>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d006      	beq.n	8014cf2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce6:	3308      	adds	r3, #8
 8014ce8:	2214      	movs	r2, #20
 8014cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014cec:	4618      	mov	r0, r3
 8014cee:	f000 fbce 	bl	801548e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf4:	88db      	ldrh	r3, [r3, #6]
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	f003 0320 	and.w	r3, r3, #32
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bf0c      	ite	eq
 8014d00:	2301      	moveq	r3, #1
 8014d02:	2300      	movne	r3, #0
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014d08:	69fb      	ldr	r3, [r7, #28]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d00e      	beq.n	8014d2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d12:	4413      	add	r3, r2
 8014d14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014d16:	8b7a      	ldrh	r2, [r7, #26]
 8014d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	f0c0 80a0 	bcc.w	8014e60 <ip4_reass+0x2ac>
 8014d20:	8b7b      	ldrh	r3, [r7, #26]
 8014d22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014d26:	4293      	cmp	r3, r2
 8014d28:	f200 809a 	bhi.w	8014e60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014d2c:	69fa      	ldr	r2, [r7, #28]
 8014d2e:	6879      	ldr	r1, [r7, #4]
 8014d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d32:	f7ff fdd5 	bl	80148e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014d36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d3e:	f000 8091 	beq.w	8014e64 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014d42:	4b5f      	ldr	r3, [pc, #380]	; (8014ec0 <ip4_reass+0x30c>)
 8014d44:	881a      	ldrh	r2, [r3, #0]
 8014d46:	8c3b      	ldrh	r3, [r7, #32]
 8014d48:	4413      	add	r3, r2
 8014d4a:	b29a      	uxth	r2, r3
 8014d4c:	4b5c      	ldr	r3, [pc, #368]	; (8014ec0 <ip4_reass+0x30c>)
 8014d4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014d50:	69fb      	ldr	r3, [r7, #28]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d00d      	beq.n	8014d72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d5a:	4413      	add	r3, r2
 8014d5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d60:	8a7a      	ldrh	r2, [r7, #18]
 8014d62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d66:	7f9b      	ldrb	r3, [r3, #30]
 8014d68:	f043 0301 	orr.w	r3, r3, #1
 8014d6c:	b2da      	uxtb	r2, r3
 8014d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d171      	bne.n	8014e5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7a:	8b9b      	ldrh	r3, [r3, #28]
 8014d7c:	3314      	adds	r3, #20
 8014d7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d94:	3308      	adds	r3, #8
 8014d96:	2214      	movs	r2, #20
 8014d98:	4619      	mov	r1, r3
 8014d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d9c:	f000 fb77 	bl	801548e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014da0:	8a3b      	ldrh	r3, [r7, #16]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7f5 ffc0 	bl	800ad28 <lwip_htons>
 8014da8:	4603      	mov	r3, r0
 8014daa:	461a      	mov	r2, r3
 8014dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db2:	2200      	movs	r2, #0
 8014db4:	719a      	strb	r2, [r3, #6]
 8014db6:	2200      	movs	r2, #0
 8014db8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	729a      	strb	r2, [r3, #10]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014dca:	e00d      	b.n	8014de8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014dd2:	2114      	movs	r1, #20
 8014dd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014dd6:	f7f7 f9bd 	bl	800c154 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7f7 fb01 	bl	800c3e4 <pbuf_cat>
      r = iprh->next_pbuf;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1ee      	bne.n	8014dcc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014dee:	4b35      	ldr	r3, [pc, #212]	; (8014ec4 <ip4_reass+0x310>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d102      	bne.n	8014dfe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dfc:	e010      	b.n	8014e20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014dfe:	4b31      	ldr	r3, [pc, #196]	; (8014ec4 <ip4_reass+0x310>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e04:	e007      	b.n	8014e16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d006      	beq.n	8014e1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d1f4      	bne.n	8014e06 <ip4_reass+0x252>
 8014e1c:	e000      	b.n	8014e20 <ip4_reass+0x26c>
          break;
 8014e1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e24:	f7ff fd2e 	bl	8014884 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7f7 faa1 	bl	800c370 <pbuf_clen>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014e32:	4b23      	ldr	r3, [pc, #140]	; (8014ec0 <ip4_reass+0x30c>)
 8014e34:	881b      	ldrh	r3, [r3, #0]
 8014e36:	8c3a      	ldrh	r2, [r7, #32]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d906      	bls.n	8014e4a <ip4_reass+0x296>
 8014e3c:	4b22      	ldr	r3, [pc, #136]	; (8014ec8 <ip4_reass+0x314>)
 8014e3e:	f240 229b 	movw	r2, #667	; 0x29b
 8014e42:	4922      	ldr	r1, [pc, #136]	; (8014ecc <ip4_reass+0x318>)
 8014e44:	4822      	ldr	r0, [pc, #136]	; (8014ed0 <ip4_reass+0x31c>)
 8014e46:	f001 fa35 	bl	80162b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014e4a:	4b1d      	ldr	r3, [pc, #116]	; (8014ec0 <ip4_reass+0x30c>)
 8014e4c:	881a      	ldrh	r2, [r3, #0]
 8014e4e:	8c3b      	ldrh	r3, [r7, #32]
 8014e50:	1ad3      	subs	r3, r2, r3
 8014e52:	b29a      	uxth	r2, r3
 8014e54:	4b1a      	ldr	r3, [pc, #104]	; (8014ec0 <ip4_reass+0x30c>)
 8014e56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	e02c      	b.n	8014eb6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	e02a      	b.n	8014eb6 <ip4_reass+0x302>

nullreturn_ipr:
 8014e60:	bf00      	nop
 8014e62:	e000      	b.n	8014e66 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014e64:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d106      	bne.n	8014e7a <ip4_reass+0x2c6>
 8014e6c:	4b16      	ldr	r3, [pc, #88]	; (8014ec8 <ip4_reass+0x314>)
 8014e6e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014e72:	4918      	ldr	r1, [pc, #96]	; (8014ed4 <ip4_reass+0x320>)
 8014e74:	4816      	ldr	r0, [pc, #88]	; (8014ed0 <ip4_reass+0x31c>)
 8014e76:	f001 fa1d 	bl	80162b4 <iprintf>
  if (ipr->p == NULL) {
 8014e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d114      	bne.n	8014eac <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014e82:	4b10      	ldr	r3, [pc, #64]	; (8014ec4 <ip4_reass+0x310>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d006      	beq.n	8014e9a <ip4_reass+0x2e6>
 8014e8c:	4b0e      	ldr	r3, [pc, #56]	; (8014ec8 <ip4_reass+0x314>)
 8014e8e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014e92:	4911      	ldr	r1, [pc, #68]	; (8014ed8 <ip4_reass+0x324>)
 8014e94:	480e      	ldr	r0, [pc, #56]	; (8014ed0 <ip4_reass+0x31c>)
 8014e96:	f001 fa0d 	bl	80162b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014e9a:	2100      	movs	r1, #0
 8014e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e9e:	f7ff fcf1 	bl	8014884 <ip_reass_dequeue_datagram>
 8014ea2:	e004      	b.n	8014eae <ip4_reass+0x2fa>
    goto nullreturn;
 8014ea4:	bf00      	nop
 8014ea6:	e002      	b.n	8014eae <ip4_reass+0x2fa>
    goto nullreturn;
 8014ea8:	bf00      	nop
 8014eaa:	e000      	b.n	8014eae <ip4_reass+0x2fa>
  }

nullreturn:
 8014eac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f7f7 f9d6 	bl	800c260 <pbuf_free>
  return NULL;
 8014eb4:	2300      	movs	r3, #0
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3738      	adds	r7, #56	; 0x38
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop
 8014ec0:	200005e4 	.word	0x200005e4
 8014ec4:	200005e0 	.word	0x200005e0
 8014ec8:	0801c9f4 	.word	0x0801c9f4
 8014ecc:	0801cb64 	.word	0x0801cb64
 8014ed0:	0801ca3c 	.word	0x0801ca3c
 8014ed4:	0801cb80 	.word	0x0801cb80
 8014ed8:	0801cb8c 	.word	0x0801cb8c

08014edc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014ee0:	2005      	movs	r0, #5
 8014ee2:	f7f6 fb77 	bl	800b5d4 <memp_malloc>
 8014ee6:	4603      	mov	r3, r0
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	bd80      	pop	{r7, pc}

08014eec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d106      	bne.n	8014f08 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014efa:	4b07      	ldr	r3, [pc, #28]	; (8014f18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014efc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014f00:	4906      	ldr	r1, [pc, #24]	; (8014f1c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014f02:	4807      	ldr	r0, [pc, #28]	; (8014f20 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014f04:	f001 f9d6 	bl	80162b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014f08:	6879      	ldr	r1, [r7, #4]
 8014f0a:	2005      	movs	r0, #5
 8014f0c:	f7f6 fbae 	bl	800b66c <memp_free>
}
 8014f10:	bf00      	nop
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	0801c9f4 	.word	0x0801c9f4
 8014f1c:	0801cbac 	.word	0x0801cbac
 8014f20:	0801ca3c 	.word	0x0801ca3c

08014f24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d106      	bne.n	8014f44 <ipfrag_free_pbuf_custom+0x20>
 8014f36:	4b11      	ldr	r3, [pc, #68]	; (8014f7c <ipfrag_free_pbuf_custom+0x58>)
 8014f38:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014f3c:	4910      	ldr	r1, [pc, #64]	; (8014f80 <ipfrag_free_pbuf_custom+0x5c>)
 8014f3e:	4811      	ldr	r0, [pc, #68]	; (8014f84 <ipfrag_free_pbuf_custom+0x60>)
 8014f40:	f001 f9b8 	bl	80162b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d006      	beq.n	8014f5a <ipfrag_free_pbuf_custom+0x36>
 8014f4c:	4b0b      	ldr	r3, [pc, #44]	; (8014f7c <ipfrag_free_pbuf_custom+0x58>)
 8014f4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014f52:	490d      	ldr	r1, [pc, #52]	; (8014f88 <ipfrag_free_pbuf_custom+0x64>)
 8014f54:	480b      	ldr	r0, [pc, #44]	; (8014f84 <ipfrag_free_pbuf_custom+0x60>)
 8014f56:	f001 f9ad 	bl	80162b4 <iprintf>
  if (pcr->original != NULL) {
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	695b      	ldr	r3, [r3, #20]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d004      	beq.n	8014f6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	695b      	ldr	r3, [r3, #20]
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7f7 f97a 	bl	800c260 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014f6c:	68f8      	ldr	r0, [r7, #12]
 8014f6e:	f7ff ffbd 	bl	8014eec <ip_frag_free_pbuf_custom_ref>
}
 8014f72:	bf00      	nop
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	0801c9f4 	.word	0x0801c9f4
 8014f80:	0801cbb8 	.word	0x0801cbb8
 8014f84:	0801ca3c 	.word	0x0801ca3c
 8014f88:	0801cbc4 	.word	0x0801cbc4

08014f8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b094      	sub	sp, #80	; 0x50
 8014f90:	af02      	add	r7, sp, #8
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014f98:	2300      	movs	r3, #0
 8014f9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	8c1b      	ldrh	r3, [r3, #32]
 8014fa2:	3b14      	subs	r3, #20
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	da00      	bge.n	8014faa <ip4_frag+0x1e>
 8014fa8:	3307      	adds	r3, #7
 8014faa:	10db      	asrs	r3, r3, #3
 8014fac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014fae:	2314      	movs	r3, #20
 8014fb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f003 030f 	and.w	r3, r3, #15
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	2b14      	cmp	r3, #20
 8014fcc:	d002      	beq.n	8014fd4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014fce:	f06f 0305 	mvn.w	r3, #5
 8014fd2:	e10f      	b.n	80151f4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	895b      	ldrh	r3, [r3, #10]
 8014fd8:	2b13      	cmp	r3, #19
 8014fda:	d809      	bhi.n	8014ff0 <ip4_frag+0x64>
 8014fdc:	4b87      	ldr	r3, [pc, #540]	; (80151fc <ip4_frag+0x270>)
 8014fde:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014fe2:	4987      	ldr	r1, [pc, #540]	; (8015200 <ip4_frag+0x274>)
 8014fe4:	4887      	ldr	r0, [pc, #540]	; (8015204 <ip4_frag+0x278>)
 8014fe6:	f001 f965 	bl	80162b4 <iprintf>
 8014fea:	f06f 0305 	mvn.w	r3, #5
 8014fee:	e101      	b.n	80151f4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff2:	88db      	ldrh	r3, [r3, #6]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7f5 fe96 	bl	800ad28 <lwip_htons>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015000:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015006:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801500a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801500c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015010:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	891b      	ldrh	r3, [r3, #8]
 8015016:	3b14      	subs	r3, #20
 8015018:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801501c:	e0e0      	b.n	80151e0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801501e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015020:	00db      	lsls	r3, r3, #3
 8015022:	b29b      	uxth	r3, r3
 8015024:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015028:	4293      	cmp	r3, r2
 801502a:	bf28      	it	cs
 801502c:	4613      	movcs	r3, r2
 801502e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015030:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015034:	2114      	movs	r1, #20
 8015036:	200e      	movs	r0, #14
 8015038:	f7f6 fe32 	bl	800bca0 <pbuf_alloc>
 801503c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015040:	2b00      	cmp	r3, #0
 8015042:	f000 80d4 	beq.w	80151ee <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015048:	895b      	ldrh	r3, [r3, #10]
 801504a:	2b13      	cmp	r3, #19
 801504c:	d806      	bhi.n	801505c <ip4_frag+0xd0>
 801504e:	4b6b      	ldr	r3, [pc, #428]	; (80151fc <ip4_frag+0x270>)
 8015050:	f240 3225 	movw	r2, #805	; 0x325
 8015054:	496c      	ldr	r1, [pc, #432]	; (8015208 <ip4_frag+0x27c>)
 8015056:	486b      	ldr	r0, [pc, #428]	; (8015204 <ip4_frag+0x278>)
 8015058:	f001 f92c 	bl	80162b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	2214      	movs	r2, #20
 8015062:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015064:	4618      	mov	r0, r3
 8015066:	f000 fa12 	bl	801548e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015070:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015072:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015076:	e064      	b.n	8015142 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	895a      	ldrh	r2, [r3, #10]
 801507c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801507e:	1ad3      	subs	r3, r2, r3
 8015080:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	895b      	ldrh	r3, [r3, #10]
 8015086:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015088:	429a      	cmp	r2, r3
 801508a:	d906      	bls.n	801509a <ip4_frag+0x10e>
 801508c:	4b5b      	ldr	r3, [pc, #364]	; (80151fc <ip4_frag+0x270>)
 801508e:	f240 322d 	movw	r2, #813	; 0x32d
 8015092:	495e      	ldr	r1, [pc, #376]	; (801520c <ip4_frag+0x280>)
 8015094:	485b      	ldr	r0, [pc, #364]	; (8015204 <ip4_frag+0x278>)
 8015096:	f001 f90d 	bl	80162b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801509a:	8bfa      	ldrh	r2, [r7, #30]
 801509c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80150a0:	4293      	cmp	r3, r2
 80150a2:	bf28      	it	cs
 80150a4:	4613      	movcs	r3, r2
 80150a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80150aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d105      	bne.n	80150be <ip4_frag+0x132>
        poff = 0;
 80150b2:	2300      	movs	r3, #0
 80150b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	60fb      	str	r3, [r7, #12]
        continue;
 80150bc:	e041      	b.n	8015142 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80150be:	f7ff ff0d 	bl	8014edc <ip_frag_alloc_pbuf_custom_ref>
 80150c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d103      	bne.n	80150d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80150ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150cc:	f7f7 f8c8 	bl	800c260 <pbuf_free>
        goto memerr;
 80150d0:	e08e      	b.n	80151f0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150da:	4413      	add	r3, r2
 80150dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80150e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80150e4:	9201      	str	r2, [sp, #4]
 80150e6:	9300      	str	r3, [sp, #0]
 80150e8:	4603      	mov	r3, r0
 80150ea:	2241      	movs	r2, #65	; 0x41
 80150ec:	2000      	movs	r0, #0
 80150ee:	f7f6 fefd 	bl	800beec <pbuf_alloced_custom>
 80150f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d106      	bne.n	8015108 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80150fa:	69b8      	ldr	r0, [r7, #24]
 80150fc:	f7ff fef6 	bl	8014eec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015102:	f7f7 f8ad 	bl	800c260 <pbuf_free>
        goto memerr;
 8015106:	e073      	b.n	80151f0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	f7f7 f949 	bl	800c3a0 <pbuf_ref>
      pcr->original = p;
 801510e:	69bb      	ldr	r3, [r7, #24]
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015114:	69bb      	ldr	r3, [r7, #24]
 8015116:	4a3e      	ldr	r2, [pc, #248]	; (8015210 <ip4_frag+0x284>)
 8015118:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801511a:	6979      	ldr	r1, [r7, #20]
 801511c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801511e:	f7f7 f961 	bl	800c3e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015122:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801512a:	1ad3      	subs	r3, r2, r3
 801512c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015130:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015134:	2b00      	cmp	r3, #0
 8015136:	d004      	beq.n	8015142 <ip4_frag+0x1b6>
        poff = 0;
 8015138:	2300      	movs	r3, #0
 801513a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015142:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015146:	2b00      	cmp	r3, #0
 8015148:	d196      	bne.n	8015078 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801514a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801514c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015150:	4413      	add	r3, r2
 8015152:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015154:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	8c1b      	ldrh	r3, [r3, #32]
 801515c:	3b14      	subs	r3, #20
 801515e:	429a      	cmp	r2, r3
 8015160:	bfd4      	ite	le
 8015162:	2301      	movle	r3, #1
 8015164:	2300      	movgt	r3, #0
 8015166:	b2db      	uxtb	r3, r3
 8015168:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801516a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801516e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015172:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015174:	6a3b      	ldr	r3, [r7, #32]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d002      	beq.n	8015180 <ip4_frag+0x1f4>
 801517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517c:	2b00      	cmp	r3, #0
 801517e:	d003      	beq.n	8015188 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015180:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015186:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015188:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801518a:	4618      	mov	r0, r3
 801518c:	f7f5 fdcc 	bl	800ad28 <lwip_htons>
 8015190:	4603      	mov	r3, r0
 8015192:	461a      	mov	r2, r3
 8015194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015196:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801519a:	3314      	adds	r3, #20
 801519c:	b29b      	uxth	r3, r3
 801519e:	4618      	mov	r0, r3
 80151a0:	f7f5 fdc2 	bl	800ad28 <lwip_htons>
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151aa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80151ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ae:	2200      	movs	r2, #0
 80151b0:	729a      	strb	r2, [r3, #10]
 80151b2:	2200      	movs	r2, #0
 80151b4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	695b      	ldr	r3, [r3, #20]
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151be:	68b8      	ldr	r0, [r7, #8]
 80151c0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80151c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151c4:	f7f7 f84c 	bl	800c260 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80151c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151ce:	1ad3      	subs	r3, r2, r3
 80151d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80151d4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80151d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151da:	4413      	add	r3, r2
 80151dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80151e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f47f af1a 	bne.w	801501e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80151ea:	2300      	movs	r3, #0
 80151ec:	e002      	b.n	80151f4 <ip4_frag+0x268>
      goto memerr;
 80151ee:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80151f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3748      	adds	r7, #72	; 0x48
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	0801c9f4 	.word	0x0801c9f4
 8015200:	0801cbd0 	.word	0x0801cbd0
 8015204:	0801ca3c 	.word	0x0801ca3c
 8015208:	0801cbec 	.word	0x0801cbec
 801520c:	0801cc0c 	.word	0x0801cc0c
 8015210:	08014f25 	.word	0x08014f25

08015214 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b086      	sub	sp, #24
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
 801521c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801521e:	230e      	movs	r3, #14
 8015220:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	895b      	ldrh	r3, [r3, #10]
 8015226:	2b0e      	cmp	r3, #14
 8015228:	d96e      	bls.n	8015308 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	7bdb      	ldrb	r3, [r3, #15]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d106      	bne.n	8015240 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015238:	3301      	adds	r3, #1
 801523a:	b2da      	uxtb	r2, r3
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	685b      	ldr	r3, [r3, #4]
 8015244:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	7b1a      	ldrb	r2, [r3, #12]
 801524a:	7b5b      	ldrb	r3, [r3, #13]
 801524c:	021b      	lsls	r3, r3, #8
 801524e:	4313      	orrs	r3, r2
 8015250:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	781b      	ldrb	r3, [r3, #0]
 8015256:	f003 0301 	and.w	r3, r3, #1
 801525a:	2b00      	cmp	r3, #0
 801525c:	d023      	beq.n	80152a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	2b01      	cmp	r3, #1
 8015264:	d10f      	bne.n	8015286 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	785b      	ldrb	r3, [r3, #1]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d11b      	bne.n	80152a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015272:	2b5e      	cmp	r3, #94	; 0x5e
 8015274:	d117      	bne.n	80152a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	7b5b      	ldrb	r3, [r3, #13]
 801527a:	f043 0310 	orr.w	r3, r3, #16
 801527e:	b2da      	uxtb	r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	735a      	strb	r2, [r3, #13]
 8015284:	e00f      	b.n	80152a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	2206      	movs	r2, #6
 801528a:	4928      	ldr	r1, [pc, #160]	; (801532c <ethernet_input+0x118>)
 801528c:	4618      	mov	r0, r3
 801528e:	f000 f8ef 	bl	8015470 <memcmp>
 8015292:	4603      	mov	r3, r0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d106      	bne.n	80152a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	7b5b      	ldrb	r3, [r3, #13]
 801529c:	f043 0308 	orr.w	r3, r3, #8
 80152a0:	b2da      	uxtb	r2, r3
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80152a6:	89fb      	ldrh	r3, [r7, #14]
 80152a8:	2b08      	cmp	r3, #8
 80152aa:	d003      	beq.n	80152b4 <ethernet_input+0xa0>
 80152ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80152b0:	d014      	beq.n	80152dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80152b2:	e032      	b.n	801531a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80152ba:	f003 0308 	and.w	r3, r3, #8
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d024      	beq.n	801530c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80152c2:	8afb      	ldrh	r3, [r7, #22]
 80152c4:	4619      	mov	r1, r3
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f7f6 ff44 	bl	800c154 <pbuf_remove_header>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d11e      	bne.n	8015310 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80152d2:	6839      	ldr	r1, [r7, #0]
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7fe ff2d 	bl	8014134 <ip4_input>
      break;
 80152da:	e013      	b.n	8015304 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80152e2:	f003 0308 	and.w	r3, r3, #8
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d014      	beq.n	8015314 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80152ea:	8afb      	ldrh	r3, [r7, #22]
 80152ec:	4619      	mov	r1, r3
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7f6 ff30 	bl	800c154 <pbuf_remove_header>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d10e      	bne.n	8015318 <ethernet_input+0x104>
        etharp_input(p, netif);
 80152fa:	6839      	ldr	r1, [r7, #0]
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f7fe f8cd 	bl	801349c <etharp_input>
      break;
 8015302:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015304:	2300      	movs	r3, #0
 8015306:	e00c      	b.n	8015322 <ethernet_input+0x10e>
    goto free_and_return;
 8015308:	bf00      	nop
 801530a:	e006      	b.n	801531a <ethernet_input+0x106>
        goto free_and_return;
 801530c:	bf00      	nop
 801530e:	e004      	b.n	801531a <ethernet_input+0x106>
        goto free_and_return;
 8015310:	bf00      	nop
 8015312:	e002      	b.n	801531a <ethernet_input+0x106>
        goto free_and_return;
 8015314:	bf00      	nop
 8015316:	e000      	b.n	801531a <ethernet_input+0x106>
        goto free_and_return;
 8015318:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f7f6 ffa0 	bl	800c260 <pbuf_free>
  return ERR_OK;
 8015320:	2300      	movs	r3, #0
}
 8015322:	4618      	mov	r0, r3
 8015324:	3718      	adds	r7, #24
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	0801cda8 	.word	0x0801cda8

08015330 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015330:	b580      	push	{r7, lr}
 8015332:	b086      	sub	sp, #24
 8015334:	af00      	add	r7, sp, #0
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
 801533c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801533e:	8c3b      	ldrh	r3, [r7, #32]
 8015340:	4618      	mov	r0, r3
 8015342:	f7f5 fcf1 	bl	800ad28 <lwip_htons>
 8015346:	4603      	mov	r3, r0
 8015348:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801534a:	210e      	movs	r1, #14
 801534c:	68b8      	ldr	r0, [r7, #8]
 801534e:	f7f6 fef1 	bl	800c134 <pbuf_add_header>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d125      	bne.n	80153a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801535e:	693b      	ldr	r3, [r7, #16]
 8015360:	8afa      	ldrh	r2, [r7, #22]
 8015362:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	2206      	movs	r2, #6
 8015368:	6839      	ldr	r1, [r7, #0]
 801536a:	4618      	mov	r0, r3
 801536c:	f000 f88f 	bl	801548e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	3306      	adds	r3, #6
 8015374:	2206      	movs	r2, #6
 8015376:	6879      	ldr	r1, [r7, #4]
 8015378:	4618      	mov	r0, r3
 801537a:	f000 f888 	bl	801548e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015384:	2b06      	cmp	r3, #6
 8015386:	d006      	beq.n	8015396 <ethernet_output+0x66>
 8015388:	4b0a      	ldr	r3, [pc, #40]	; (80153b4 <ethernet_output+0x84>)
 801538a:	f240 1233 	movw	r2, #307	; 0x133
 801538e:	490a      	ldr	r1, [pc, #40]	; (80153b8 <ethernet_output+0x88>)
 8015390:	480a      	ldr	r0, [pc, #40]	; (80153bc <ethernet_output+0x8c>)
 8015392:	f000 ff8f 	bl	80162b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	699b      	ldr	r3, [r3, #24]
 801539a:	68b9      	ldr	r1, [r7, #8]
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	4798      	blx	r3
 80153a0:	4603      	mov	r3, r0
 80153a2:	e002      	b.n	80153aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80153a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80153a6:	f06f 0301 	mvn.w	r3, #1
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3718      	adds	r7, #24
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	0801cc1c 	.word	0x0801cc1c
 80153b8:	0801cc54 	.word	0x0801cc54
 80153bc:	0801cc88 	.word	0x0801cc88

080153c0 <__libc_init_array>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	4e0d      	ldr	r6, [pc, #52]	; (80153f8 <__libc_init_array+0x38>)
 80153c4:	4c0d      	ldr	r4, [pc, #52]	; (80153fc <__libc_init_array+0x3c>)
 80153c6:	1ba4      	subs	r4, r4, r6
 80153c8:	10a4      	asrs	r4, r4, #2
 80153ca:	2500      	movs	r5, #0
 80153cc:	42a5      	cmp	r5, r4
 80153ce:	d109      	bne.n	80153e4 <__libc_init_array+0x24>
 80153d0:	4e0b      	ldr	r6, [pc, #44]	; (8015400 <__libc_init_array+0x40>)
 80153d2:	4c0c      	ldr	r4, [pc, #48]	; (8015404 <__libc_init_array+0x44>)
 80153d4:	f004 fefc 	bl	801a1d0 <_init>
 80153d8:	1ba4      	subs	r4, r4, r6
 80153da:	10a4      	asrs	r4, r4, #2
 80153dc:	2500      	movs	r5, #0
 80153de:	42a5      	cmp	r5, r4
 80153e0:	d105      	bne.n	80153ee <__libc_init_array+0x2e>
 80153e2:	bd70      	pop	{r4, r5, r6, pc}
 80153e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80153e8:	4798      	blx	r3
 80153ea:	3501      	adds	r5, #1
 80153ec:	e7ee      	b.n	80153cc <__libc_init_array+0xc>
 80153ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80153f2:	4798      	blx	r3
 80153f4:	3501      	adds	r5, #1
 80153f6:	e7f2      	b.n	80153de <__libc_init_array+0x1e>
 80153f8:	0801d0f8 	.word	0x0801d0f8
 80153fc:	0801d0f8 	.word	0x0801d0f8
 8015400:	0801d0f8 	.word	0x0801d0f8
 8015404:	0801d0fc 	.word	0x0801d0fc

08015408 <__locale_ctype_ptr_l>:
 8015408:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801540c:	4770      	bx	lr
	...

08015410 <__locale_ctype_ptr>:
 8015410:	4b04      	ldr	r3, [pc, #16]	; (8015424 <__locale_ctype_ptr+0x14>)
 8015412:	4a05      	ldr	r2, [pc, #20]	; (8015428 <__locale_ctype_ptr+0x18>)
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	6a1b      	ldr	r3, [r3, #32]
 8015418:	2b00      	cmp	r3, #0
 801541a:	bf08      	it	eq
 801541c:	4613      	moveq	r3, r2
 801541e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015422:	4770      	bx	lr
 8015424:	20000020 	.word	0x20000020
 8015428:	20000084 	.word	0x20000084

0801542c <malloc>:
 801542c:	4b02      	ldr	r3, [pc, #8]	; (8015438 <malloc+0xc>)
 801542e:	4601      	mov	r1, r0
 8015430:	6818      	ldr	r0, [r3, #0]
 8015432:	f000 b8a7 	b.w	8015584 <_malloc_r>
 8015436:	bf00      	nop
 8015438:	20000020 	.word	0x20000020

0801543c <free>:
 801543c:	4b02      	ldr	r3, [pc, #8]	; (8015448 <free+0xc>)
 801543e:	4601      	mov	r1, r0
 8015440:	6818      	ldr	r0, [r3, #0]
 8015442:	f000 b851 	b.w	80154e8 <_free_r>
 8015446:	bf00      	nop
 8015448:	20000020 	.word	0x20000020

0801544c <__ascii_mbtowc>:
 801544c:	b082      	sub	sp, #8
 801544e:	b901      	cbnz	r1, 8015452 <__ascii_mbtowc+0x6>
 8015450:	a901      	add	r1, sp, #4
 8015452:	b142      	cbz	r2, 8015466 <__ascii_mbtowc+0x1a>
 8015454:	b14b      	cbz	r3, 801546a <__ascii_mbtowc+0x1e>
 8015456:	7813      	ldrb	r3, [r2, #0]
 8015458:	600b      	str	r3, [r1, #0]
 801545a:	7812      	ldrb	r2, [r2, #0]
 801545c:	1c10      	adds	r0, r2, #0
 801545e:	bf18      	it	ne
 8015460:	2001      	movne	r0, #1
 8015462:	b002      	add	sp, #8
 8015464:	4770      	bx	lr
 8015466:	4610      	mov	r0, r2
 8015468:	e7fb      	b.n	8015462 <__ascii_mbtowc+0x16>
 801546a:	f06f 0001 	mvn.w	r0, #1
 801546e:	e7f8      	b.n	8015462 <__ascii_mbtowc+0x16>

08015470 <memcmp>:
 8015470:	b530      	push	{r4, r5, lr}
 8015472:	2400      	movs	r4, #0
 8015474:	42a2      	cmp	r2, r4
 8015476:	d101      	bne.n	801547c <memcmp+0xc>
 8015478:	2000      	movs	r0, #0
 801547a:	e007      	b.n	801548c <memcmp+0x1c>
 801547c:	5d03      	ldrb	r3, [r0, r4]
 801547e:	3401      	adds	r4, #1
 8015480:	190d      	adds	r5, r1, r4
 8015482:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015486:	42ab      	cmp	r3, r5
 8015488:	d0f4      	beq.n	8015474 <memcmp+0x4>
 801548a:	1b58      	subs	r0, r3, r5
 801548c:	bd30      	pop	{r4, r5, pc}

0801548e <memcpy>:
 801548e:	b510      	push	{r4, lr}
 8015490:	1e43      	subs	r3, r0, #1
 8015492:	440a      	add	r2, r1
 8015494:	4291      	cmp	r1, r2
 8015496:	d100      	bne.n	801549a <memcpy+0xc>
 8015498:	bd10      	pop	{r4, pc}
 801549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801549e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80154a2:	e7f7      	b.n	8015494 <memcpy+0x6>

080154a4 <memmove>:
 80154a4:	4288      	cmp	r0, r1
 80154a6:	b510      	push	{r4, lr}
 80154a8:	eb01 0302 	add.w	r3, r1, r2
 80154ac:	d807      	bhi.n	80154be <memmove+0x1a>
 80154ae:	1e42      	subs	r2, r0, #1
 80154b0:	4299      	cmp	r1, r3
 80154b2:	d00a      	beq.n	80154ca <memmove+0x26>
 80154b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80154b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80154bc:	e7f8      	b.n	80154b0 <memmove+0xc>
 80154be:	4283      	cmp	r3, r0
 80154c0:	d9f5      	bls.n	80154ae <memmove+0xa>
 80154c2:	1881      	adds	r1, r0, r2
 80154c4:	1ad2      	subs	r2, r2, r3
 80154c6:	42d3      	cmn	r3, r2
 80154c8:	d100      	bne.n	80154cc <memmove+0x28>
 80154ca:	bd10      	pop	{r4, pc}
 80154cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80154d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80154d4:	e7f7      	b.n	80154c6 <memmove+0x22>

080154d6 <memset>:
 80154d6:	4402      	add	r2, r0
 80154d8:	4603      	mov	r3, r0
 80154da:	4293      	cmp	r3, r2
 80154dc:	d100      	bne.n	80154e0 <memset+0xa>
 80154de:	4770      	bx	lr
 80154e0:	f803 1b01 	strb.w	r1, [r3], #1
 80154e4:	e7f9      	b.n	80154da <memset+0x4>
	...

080154e8 <_free_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4605      	mov	r5, r0
 80154ec:	2900      	cmp	r1, #0
 80154ee:	d045      	beq.n	801557c <_free_r+0x94>
 80154f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154f4:	1f0c      	subs	r4, r1, #4
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	bfb8      	it	lt
 80154fa:	18e4      	addlt	r4, r4, r3
 80154fc:	f003 f93a 	bl	8018774 <__malloc_lock>
 8015500:	4a1f      	ldr	r2, [pc, #124]	; (8015580 <_free_r+0x98>)
 8015502:	6813      	ldr	r3, [r2, #0]
 8015504:	4610      	mov	r0, r2
 8015506:	b933      	cbnz	r3, 8015516 <_free_r+0x2e>
 8015508:	6063      	str	r3, [r4, #4]
 801550a:	6014      	str	r4, [r2, #0]
 801550c:	4628      	mov	r0, r5
 801550e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015512:	f003 b930 	b.w	8018776 <__malloc_unlock>
 8015516:	42a3      	cmp	r3, r4
 8015518:	d90c      	bls.n	8015534 <_free_r+0x4c>
 801551a:	6821      	ldr	r1, [r4, #0]
 801551c:	1862      	adds	r2, r4, r1
 801551e:	4293      	cmp	r3, r2
 8015520:	bf04      	itt	eq
 8015522:	681a      	ldreq	r2, [r3, #0]
 8015524:	685b      	ldreq	r3, [r3, #4]
 8015526:	6063      	str	r3, [r4, #4]
 8015528:	bf04      	itt	eq
 801552a:	1852      	addeq	r2, r2, r1
 801552c:	6022      	streq	r2, [r4, #0]
 801552e:	6004      	str	r4, [r0, #0]
 8015530:	e7ec      	b.n	801550c <_free_r+0x24>
 8015532:	4613      	mov	r3, r2
 8015534:	685a      	ldr	r2, [r3, #4]
 8015536:	b10a      	cbz	r2, 801553c <_free_r+0x54>
 8015538:	42a2      	cmp	r2, r4
 801553a:	d9fa      	bls.n	8015532 <_free_r+0x4a>
 801553c:	6819      	ldr	r1, [r3, #0]
 801553e:	1858      	adds	r0, r3, r1
 8015540:	42a0      	cmp	r0, r4
 8015542:	d10b      	bne.n	801555c <_free_r+0x74>
 8015544:	6820      	ldr	r0, [r4, #0]
 8015546:	4401      	add	r1, r0
 8015548:	1858      	adds	r0, r3, r1
 801554a:	4282      	cmp	r2, r0
 801554c:	6019      	str	r1, [r3, #0]
 801554e:	d1dd      	bne.n	801550c <_free_r+0x24>
 8015550:	6810      	ldr	r0, [r2, #0]
 8015552:	6852      	ldr	r2, [r2, #4]
 8015554:	605a      	str	r2, [r3, #4]
 8015556:	4401      	add	r1, r0
 8015558:	6019      	str	r1, [r3, #0]
 801555a:	e7d7      	b.n	801550c <_free_r+0x24>
 801555c:	d902      	bls.n	8015564 <_free_r+0x7c>
 801555e:	230c      	movs	r3, #12
 8015560:	602b      	str	r3, [r5, #0]
 8015562:	e7d3      	b.n	801550c <_free_r+0x24>
 8015564:	6820      	ldr	r0, [r4, #0]
 8015566:	1821      	adds	r1, r4, r0
 8015568:	428a      	cmp	r2, r1
 801556a:	bf04      	itt	eq
 801556c:	6811      	ldreq	r1, [r2, #0]
 801556e:	6852      	ldreq	r2, [r2, #4]
 8015570:	6062      	str	r2, [r4, #4]
 8015572:	bf04      	itt	eq
 8015574:	1809      	addeq	r1, r1, r0
 8015576:	6021      	streq	r1, [r4, #0]
 8015578:	605c      	str	r4, [r3, #4]
 801557a:	e7c7      	b.n	801550c <_free_r+0x24>
 801557c:	bd38      	pop	{r3, r4, r5, pc}
 801557e:	bf00      	nop
 8015580:	200005e8 	.word	0x200005e8

08015584 <_malloc_r>:
 8015584:	b570      	push	{r4, r5, r6, lr}
 8015586:	1ccd      	adds	r5, r1, #3
 8015588:	f025 0503 	bic.w	r5, r5, #3
 801558c:	3508      	adds	r5, #8
 801558e:	2d0c      	cmp	r5, #12
 8015590:	bf38      	it	cc
 8015592:	250c      	movcc	r5, #12
 8015594:	2d00      	cmp	r5, #0
 8015596:	4606      	mov	r6, r0
 8015598:	db01      	blt.n	801559e <_malloc_r+0x1a>
 801559a:	42a9      	cmp	r1, r5
 801559c:	d903      	bls.n	80155a6 <_malloc_r+0x22>
 801559e:	230c      	movs	r3, #12
 80155a0:	6033      	str	r3, [r6, #0]
 80155a2:	2000      	movs	r0, #0
 80155a4:	bd70      	pop	{r4, r5, r6, pc}
 80155a6:	f003 f8e5 	bl	8018774 <__malloc_lock>
 80155aa:	4a21      	ldr	r2, [pc, #132]	; (8015630 <_malloc_r+0xac>)
 80155ac:	6814      	ldr	r4, [r2, #0]
 80155ae:	4621      	mov	r1, r4
 80155b0:	b991      	cbnz	r1, 80155d8 <_malloc_r+0x54>
 80155b2:	4c20      	ldr	r4, [pc, #128]	; (8015634 <_malloc_r+0xb0>)
 80155b4:	6823      	ldr	r3, [r4, #0]
 80155b6:	b91b      	cbnz	r3, 80155c0 <_malloc_r+0x3c>
 80155b8:	4630      	mov	r0, r6
 80155ba:	f000 fecf 	bl	801635c <_sbrk_r>
 80155be:	6020      	str	r0, [r4, #0]
 80155c0:	4629      	mov	r1, r5
 80155c2:	4630      	mov	r0, r6
 80155c4:	f000 feca 	bl	801635c <_sbrk_r>
 80155c8:	1c43      	adds	r3, r0, #1
 80155ca:	d124      	bne.n	8015616 <_malloc_r+0x92>
 80155cc:	230c      	movs	r3, #12
 80155ce:	6033      	str	r3, [r6, #0]
 80155d0:	4630      	mov	r0, r6
 80155d2:	f003 f8d0 	bl	8018776 <__malloc_unlock>
 80155d6:	e7e4      	b.n	80155a2 <_malloc_r+0x1e>
 80155d8:	680b      	ldr	r3, [r1, #0]
 80155da:	1b5b      	subs	r3, r3, r5
 80155dc:	d418      	bmi.n	8015610 <_malloc_r+0x8c>
 80155de:	2b0b      	cmp	r3, #11
 80155e0:	d90f      	bls.n	8015602 <_malloc_r+0x7e>
 80155e2:	600b      	str	r3, [r1, #0]
 80155e4:	50cd      	str	r5, [r1, r3]
 80155e6:	18cc      	adds	r4, r1, r3
 80155e8:	4630      	mov	r0, r6
 80155ea:	f003 f8c4 	bl	8018776 <__malloc_unlock>
 80155ee:	f104 000b 	add.w	r0, r4, #11
 80155f2:	1d23      	adds	r3, r4, #4
 80155f4:	f020 0007 	bic.w	r0, r0, #7
 80155f8:	1ac3      	subs	r3, r0, r3
 80155fa:	d0d3      	beq.n	80155a4 <_malloc_r+0x20>
 80155fc:	425a      	negs	r2, r3
 80155fe:	50e2      	str	r2, [r4, r3]
 8015600:	e7d0      	b.n	80155a4 <_malloc_r+0x20>
 8015602:	428c      	cmp	r4, r1
 8015604:	684b      	ldr	r3, [r1, #4]
 8015606:	bf16      	itet	ne
 8015608:	6063      	strne	r3, [r4, #4]
 801560a:	6013      	streq	r3, [r2, #0]
 801560c:	460c      	movne	r4, r1
 801560e:	e7eb      	b.n	80155e8 <_malloc_r+0x64>
 8015610:	460c      	mov	r4, r1
 8015612:	6849      	ldr	r1, [r1, #4]
 8015614:	e7cc      	b.n	80155b0 <_malloc_r+0x2c>
 8015616:	1cc4      	adds	r4, r0, #3
 8015618:	f024 0403 	bic.w	r4, r4, #3
 801561c:	42a0      	cmp	r0, r4
 801561e:	d005      	beq.n	801562c <_malloc_r+0xa8>
 8015620:	1a21      	subs	r1, r4, r0
 8015622:	4630      	mov	r0, r6
 8015624:	f000 fe9a 	bl	801635c <_sbrk_r>
 8015628:	3001      	adds	r0, #1
 801562a:	d0cf      	beq.n	80155cc <_malloc_r+0x48>
 801562c:	6025      	str	r5, [r4, #0]
 801562e:	e7db      	b.n	80155e8 <_malloc_r+0x64>
 8015630:	200005e8 	.word	0x200005e8
 8015634:	200005ec 	.word	0x200005ec

08015638 <__cvt>:
 8015638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801563c:	ec55 4b10 	vmov	r4, r5, d0
 8015640:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015642:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015646:	2d00      	cmp	r5, #0
 8015648:	460e      	mov	r6, r1
 801564a:	4691      	mov	r9, r2
 801564c:	4619      	mov	r1, r3
 801564e:	bfb8      	it	lt
 8015650:	4622      	movlt	r2, r4
 8015652:	462b      	mov	r3, r5
 8015654:	f027 0720 	bic.w	r7, r7, #32
 8015658:	bfbb      	ittet	lt
 801565a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801565e:	461d      	movlt	r5, r3
 8015660:	2300      	movge	r3, #0
 8015662:	232d      	movlt	r3, #45	; 0x2d
 8015664:	bfb8      	it	lt
 8015666:	4614      	movlt	r4, r2
 8015668:	2f46      	cmp	r7, #70	; 0x46
 801566a:	700b      	strb	r3, [r1, #0]
 801566c:	d004      	beq.n	8015678 <__cvt+0x40>
 801566e:	2f45      	cmp	r7, #69	; 0x45
 8015670:	d100      	bne.n	8015674 <__cvt+0x3c>
 8015672:	3601      	adds	r6, #1
 8015674:	2102      	movs	r1, #2
 8015676:	e000      	b.n	801567a <__cvt+0x42>
 8015678:	2103      	movs	r1, #3
 801567a:	ab03      	add	r3, sp, #12
 801567c:	9301      	str	r3, [sp, #4]
 801567e:	ab02      	add	r3, sp, #8
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	4632      	mov	r2, r6
 8015684:	4653      	mov	r3, sl
 8015686:	ec45 4b10 	vmov	d0, r4, r5
 801568a:	f001 fea9 	bl	80173e0 <_dtoa_r>
 801568e:	2f47      	cmp	r7, #71	; 0x47
 8015690:	4680      	mov	r8, r0
 8015692:	d102      	bne.n	801569a <__cvt+0x62>
 8015694:	f019 0f01 	tst.w	r9, #1
 8015698:	d026      	beq.n	80156e8 <__cvt+0xb0>
 801569a:	2f46      	cmp	r7, #70	; 0x46
 801569c:	eb08 0906 	add.w	r9, r8, r6
 80156a0:	d111      	bne.n	80156c6 <__cvt+0x8e>
 80156a2:	f898 3000 	ldrb.w	r3, [r8]
 80156a6:	2b30      	cmp	r3, #48	; 0x30
 80156a8:	d10a      	bne.n	80156c0 <__cvt+0x88>
 80156aa:	2200      	movs	r2, #0
 80156ac:	2300      	movs	r3, #0
 80156ae:	4620      	mov	r0, r4
 80156b0:	4629      	mov	r1, r5
 80156b2:	f7eb fa39 	bl	8000b28 <__aeabi_dcmpeq>
 80156b6:	b918      	cbnz	r0, 80156c0 <__cvt+0x88>
 80156b8:	f1c6 0601 	rsb	r6, r6, #1
 80156bc:	f8ca 6000 	str.w	r6, [sl]
 80156c0:	f8da 3000 	ldr.w	r3, [sl]
 80156c4:	4499      	add	r9, r3
 80156c6:	2200      	movs	r2, #0
 80156c8:	2300      	movs	r3, #0
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	f7eb fa2b 	bl	8000b28 <__aeabi_dcmpeq>
 80156d2:	b938      	cbnz	r0, 80156e4 <__cvt+0xac>
 80156d4:	2230      	movs	r2, #48	; 0x30
 80156d6:	9b03      	ldr	r3, [sp, #12]
 80156d8:	454b      	cmp	r3, r9
 80156da:	d205      	bcs.n	80156e8 <__cvt+0xb0>
 80156dc:	1c59      	adds	r1, r3, #1
 80156de:	9103      	str	r1, [sp, #12]
 80156e0:	701a      	strb	r2, [r3, #0]
 80156e2:	e7f8      	b.n	80156d6 <__cvt+0x9e>
 80156e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80156e8:	9b03      	ldr	r3, [sp, #12]
 80156ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156ec:	eba3 0308 	sub.w	r3, r3, r8
 80156f0:	4640      	mov	r0, r8
 80156f2:	6013      	str	r3, [r2, #0]
 80156f4:	b004      	add	sp, #16
 80156f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080156fa <__exponent>:
 80156fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156fc:	2900      	cmp	r1, #0
 80156fe:	4604      	mov	r4, r0
 8015700:	bfba      	itte	lt
 8015702:	4249      	neglt	r1, r1
 8015704:	232d      	movlt	r3, #45	; 0x2d
 8015706:	232b      	movge	r3, #43	; 0x2b
 8015708:	2909      	cmp	r1, #9
 801570a:	f804 2b02 	strb.w	r2, [r4], #2
 801570e:	7043      	strb	r3, [r0, #1]
 8015710:	dd20      	ble.n	8015754 <__exponent+0x5a>
 8015712:	f10d 0307 	add.w	r3, sp, #7
 8015716:	461f      	mov	r7, r3
 8015718:	260a      	movs	r6, #10
 801571a:	fb91 f5f6 	sdiv	r5, r1, r6
 801571e:	fb06 1115 	mls	r1, r6, r5, r1
 8015722:	3130      	adds	r1, #48	; 0x30
 8015724:	2d09      	cmp	r5, #9
 8015726:	f803 1c01 	strb.w	r1, [r3, #-1]
 801572a:	f103 32ff 	add.w	r2, r3, #4294967295
 801572e:	4629      	mov	r1, r5
 8015730:	dc09      	bgt.n	8015746 <__exponent+0x4c>
 8015732:	3130      	adds	r1, #48	; 0x30
 8015734:	3b02      	subs	r3, #2
 8015736:	f802 1c01 	strb.w	r1, [r2, #-1]
 801573a:	42bb      	cmp	r3, r7
 801573c:	4622      	mov	r2, r4
 801573e:	d304      	bcc.n	801574a <__exponent+0x50>
 8015740:	1a10      	subs	r0, r2, r0
 8015742:	b003      	add	sp, #12
 8015744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015746:	4613      	mov	r3, r2
 8015748:	e7e7      	b.n	801571a <__exponent+0x20>
 801574a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801574e:	f804 2b01 	strb.w	r2, [r4], #1
 8015752:	e7f2      	b.n	801573a <__exponent+0x40>
 8015754:	2330      	movs	r3, #48	; 0x30
 8015756:	4419      	add	r1, r3
 8015758:	7083      	strb	r3, [r0, #2]
 801575a:	1d02      	adds	r2, r0, #4
 801575c:	70c1      	strb	r1, [r0, #3]
 801575e:	e7ef      	b.n	8015740 <__exponent+0x46>

08015760 <_printf_float>:
 8015760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	b08d      	sub	sp, #52	; 0x34
 8015766:	460c      	mov	r4, r1
 8015768:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801576c:	4616      	mov	r6, r2
 801576e:	461f      	mov	r7, r3
 8015770:	4605      	mov	r5, r0
 8015772:	f002 ffdf 	bl	8018734 <_localeconv_r>
 8015776:	6803      	ldr	r3, [r0, #0]
 8015778:	9304      	str	r3, [sp, #16]
 801577a:	4618      	mov	r0, r3
 801577c:	f7ea fd52 	bl	8000224 <strlen>
 8015780:	2300      	movs	r3, #0
 8015782:	930a      	str	r3, [sp, #40]	; 0x28
 8015784:	f8d8 3000 	ldr.w	r3, [r8]
 8015788:	9005      	str	r0, [sp, #20]
 801578a:	3307      	adds	r3, #7
 801578c:	f023 0307 	bic.w	r3, r3, #7
 8015790:	f103 0208 	add.w	r2, r3, #8
 8015794:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015798:	f8d4 b000 	ldr.w	fp, [r4]
 801579c:	f8c8 2000 	str.w	r2, [r8]
 80157a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80157a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80157ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80157b0:	9307      	str	r3, [sp, #28]
 80157b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80157b6:	f04f 32ff 	mov.w	r2, #4294967295
 80157ba:	4ba7      	ldr	r3, [pc, #668]	; (8015a58 <_printf_float+0x2f8>)
 80157bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157c0:	f7eb f9e4 	bl	8000b8c <__aeabi_dcmpun>
 80157c4:	bb70      	cbnz	r0, 8015824 <_printf_float+0xc4>
 80157c6:	f04f 32ff 	mov.w	r2, #4294967295
 80157ca:	4ba3      	ldr	r3, [pc, #652]	; (8015a58 <_printf_float+0x2f8>)
 80157cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157d0:	f7eb f9be 	bl	8000b50 <__aeabi_dcmple>
 80157d4:	bb30      	cbnz	r0, 8015824 <_printf_float+0xc4>
 80157d6:	2200      	movs	r2, #0
 80157d8:	2300      	movs	r3, #0
 80157da:	4640      	mov	r0, r8
 80157dc:	4649      	mov	r1, r9
 80157de:	f7eb f9ad 	bl	8000b3c <__aeabi_dcmplt>
 80157e2:	b110      	cbz	r0, 80157ea <_printf_float+0x8a>
 80157e4:	232d      	movs	r3, #45	; 0x2d
 80157e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157ea:	4a9c      	ldr	r2, [pc, #624]	; (8015a5c <_printf_float+0x2fc>)
 80157ec:	4b9c      	ldr	r3, [pc, #624]	; (8015a60 <_printf_float+0x300>)
 80157ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80157f2:	bf8c      	ite	hi
 80157f4:	4690      	movhi	r8, r2
 80157f6:	4698      	movls	r8, r3
 80157f8:	2303      	movs	r3, #3
 80157fa:	f02b 0204 	bic.w	r2, fp, #4
 80157fe:	6123      	str	r3, [r4, #16]
 8015800:	6022      	str	r2, [r4, #0]
 8015802:	f04f 0900 	mov.w	r9, #0
 8015806:	9700      	str	r7, [sp, #0]
 8015808:	4633      	mov	r3, r6
 801580a:	aa0b      	add	r2, sp, #44	; 0x2c
 801580c:	4621      	mov	r1, r4
 801580e:	4628      	mov	r0, r5
 8015810:	f000 f9e6 	bl	8015be0 <_printf_common>
 8015814:	3001      	adds	r0, #1
 8015816:	f040 808d 	bne.w	8015934 <_printf_float+0x1d4>
 801581a:	f04f 30ff 	mov.w	r0, #4294967295
 801581e:	b00d      	add	sp, #52	; 0x34
 8015820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015824:	4642      	mov	r2, r8
 8015826:	464b      	mov	r3, r9
 8015828:	4640      	mov	r0, r8
 801582a:	4649      	mov	r1, r9
 801582c:	f7eb f9ae 	bl	8000b8c <__aeabi_dcmpun>
 8015830:	b110      	cbz	r0, 8015838 <_printf_float+0xd8>
 8015832:	4a8c      	ldr	r2, [pc, #560]	; (8015a64 <_printf_float+0x304>)
 8015834:	4b8c      	ldr	r3, [pc, #560]	; (8015a68 <_printf_float+0x308>)
 8015836:	e7da      	b.n	80157ee <_printf_float+0x8e>
 8015838:	6861      	ldr	r1, [r4, #4]
 801583a:	1c4b      	adds	r3, r1, #1
 801583c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015840:	a80a      	add	r0, sp, #40	; 0x28
 8015842:	d13e      	bne.n	80158c2 <_printf_float+0x162>
 8015844:	2306      	movs	r3, #6
 8015846:	6063      	str	r3, [r4, #4]
 8015848:	2300      	movs	r3, #0
 801584a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801584e:	ab09      	add	r3, sp, #36	; 0x24
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	ec49 8b10 	vmov	d0, r8, r9
 8015856:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801585a:	6022      	str	r2, [r4, #0]
 801585c:	f8cd a004 	str.w	sl, [sp, #4]
 8015860:	6861      	ldr	r1, [r4, #4]
 8015862:	4628      	mov	r0, r5
 8015864:	f7ff fee8 	bl	8015638 <__cvt>
 8015868:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801586c:	2b47      	cmp	r3, #71	; 0x47
 801586e:	4680      	mov	r8, r0
 8015870:	d109      	bne.n	8015886 <_printf_float+0x126>
 8015872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015874:	1cd8      	adds	r0, r3, #3
 8015876:	db02      	blt.n	801587e <_printf_float+0x11e>
 8015878:	6862      	ldr	r2, [r4, #4]
 801587a:	4293      	cmp	r3, r2
 801587c:	dd47      	ble.n	801590e <_printf_float+0x1ae>
 801587e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015882:	fa5f fa8a 	uxtb.w	sl, sl
 8015886:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801588a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801588c:	d824      	bhi.n	80158d8 <_printf_float+0x178>
 801588e:	3901      	subs	r1, #1
 8015890:	4652      	mov	r2, sl
 8015892:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015896:	9109      	str	r1, [sp, #36]	; 0x24
 8015898:	f7ff ff2f 	bl	80156fa <__exponent>
 801589c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801589e:	1813      	adds	r3, r2, r0
 80158a0:	2a01      	cmp	r2, #1
 80158a2:	4681      	mov	r9, r0
 80158a4:	6123      	str	r3, [r4, #16]
 80158a6:	dc02      	bgt.n	80158ae <_printf_float+0x14e>
 80158a8:	6822      	ldr	r2, [r4, #0]
 80158aa:	07d1      	lsls	r1, r2, #31
 80158ac:	d501      	bpl.n	80158b2 <_printf_float+0x152>
 80158ae:	3301      	adds	r3, #1
 80158b0:	6123      	str	r3, [r4, #16]
 80158b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d0a5      	beq.n	8015806 <_printf_float+0xa6>
 80158ba:	232d      	movs	r3, #45	; 0x2d
 80158bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158c0:	e7a1      	b.n	8015806 <_printf_float+0xa6>
 80158c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80158c6:	f000 8177 	beq.w	8015bb8 <_printf_float+0x458>
 80158ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80158ce:	d1bb      	bne.n	8015848 <_printf_float+0xe8>
 80158d0:	2900      	cmp	r1, #0
 80158d2:	d1b9      	bne.n	8015848 <_printf_float+0xe8>
 80158d4:	2301      	movs	r3, #1
 80158d6:	e7b6      	b.n	8015846 <_printf_float+0xe6>
 80158d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80158dc:	d119      	bne.n	8015912 <_printf_float+0x1b2>
 80158de:	2900      	cmp	r1, #0
 80158e0:	6863      	ldr	r3, [r4, #4]
 80158e2:	dd0c      	ble.n	80158fe <_printf_float+0x19e>
 80158e4:	6121      	str	r1, [r4, #16]
 80158e6:	b913      	cbnz	r3, 80158ee <_printf_float+0x18e>
 80158e8:	6822      	ldr	r2, [r4, #0]
 80158ea:	07d2      	lsls	r2, r2, #31
 80158ec:	d502      	bpl.n	80158f4 <_printf_float+0x194>
 80158ee:	3301      	adds	r3, #1
 80158f0:	440b      	add	r3, r1
 80158f2:	6123      	str	r3, [r4, #16]
 80158f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80158f8:	f04f 0900 	mov.w	r9, #0
 80158fc:	e7d9      	b.n	80158b2 <_printf_float+0x152>
 80158fe:	b913      	cbnz	r3, 8015906 <_printf_float+0x1a6>
 8015900:	6822      	ldr	r2, [r4, #0]
 8015902:	07d0      	lsls	r0, r2, #31
 8015904:	d501      	bpl.n	801590a <_printf_float+0x1aa>
 8015906:	3302      	adds	r3, #2
 8015908:	e7f3      	b.n	80158f2 <_printf_float+0x192>
 801590a:	2301      	movs	r3, #1
 801590c:	e7f1      	b.n	80158f2 <_printf_float+0x192>
 801590e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015912:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015916:	4293      	cmp	r3, r2
 8015918:	db05      	blt.n	8015926 <_printf_float+0x1c6>
 801591a:	6822      	ldr	r2, [r4, #0]
 801591c:	6123      	str	r3, [r4, #16]
 801591e:	07d1      	lsls	r1, r2, #31
 8015920:	d5e8      	bpl.n	80158f4 <_printf_float+0x194>
 8015922:	3301      	adds	r3, #1
 8015924:	e7e5      	b.n	80158f2 <_printf_float+0x192>
 8015926:	2b00      	cmp	r3, #0
 8015928:	bfd4      	ite	le
 801592a:	f1c3 0302 	rsble	r3, r3, #2
 801592e:	2301      	movgt	r3, #1
 8015930:	4413      	add	r3, r2
 8015932:	e7de      	b.n	80158f2 <_printf_float+0x192>
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	055a      	lsls	r2, r3, #21
 8015938:	d407      	bmi.n	801594a <_printf_float+0x1ea>
 801593a:	6923      	ldr	r3, [r4, #16]
 801593c:	4642      	mov	r2, r8
 801593e:	4631      	mov	r1, r6
 8015940:	4628      	mov	r0, r5
 8015942:	47b8      	blx	r7
 8015944:	3001      	adds	r0, #1
 8015946:	d12b      	bne.n	80159a0 <_printf_float+0x240>
 8015948:	e767      	b.n	801581a <_printf_float+0xba>
 801594a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801594e:	f240 80dc 	bls.w	8015b0a <_printf_float+0x3aa>
 8015952:	2200      	movs	r2, #0
 8015954:	2300      	movs	r3, #0
 8015956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801595a:	f7eb f8e5 	bl	8000b28 <__aeabi_dcmpeq>
 801595e:	2800      	cmp	r0, #0
 8015960:	d033      	beq.n	80159ca <_printf_float+0x26a>
 8015962:	2301      	movs	r3, #1
 8015964:	4a41      	ldr	r2, [pc, #260]	; (8015a6c <_printf_float+0x30c>)
 8015966:	4631      	mov	r1, r6
 8015968:	4628      	mov	r0, r5
 801596a:	47b8      	blx	r7
 801596c:	3001      	adds	r0, #1
 801596e:	f43f af54 	beq.w	801581a <_printf_float+0xba>
 8015972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015976:	429a      	cmp	r2, r3
 8015978:	db02      	blt.n	8015980 <_printf_float+0x220>
 801597a:	6823      	ldr	r3, [r4, #0]
 801597c:	07d8      	lsls	r0, r3, #31
 801597e:	d50f      	bpl.n	80159a0 <_printf_float+0x240>
 8015980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015984:	4631      	mov	r1, r6
 8015986:	4628      	mov	r0, r5
 8015988:	47b8      	blx	r7
 801598a:	3001      	adds	r0, #1
 801598c:	f43f af45 	beq.w	801581a <_printf_float+0xba>
 8015990:	f04f 0800 	mov.w	r8, #0
 8015994:	f104 091a 	add.w	r9, r4, #26
 8015998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801599a:	3b01      	subs	r3, #1
 801599c:	4543      	cmp	r3, r8
 801599e:	dc09      	bgt.n	80159b4 <_printf_float+0x254>
 80159a0:	6823      	ldr	r3, [r4, #0]
 80159a2:	079b      	lsls	r3, r3, #30
 80159a4:	f100 8103 	bmi.w	8015bae <_printf_float+0x44e>
 80159a8:	68e0      	ldr	r0, [r4, #12]
 80159aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159ac:	4298      	cmp	r0, r3
 80159ae:	bfb8      	it	lt
 80159b0:	4618      	movlt	r0, r3
 80159b2:	e734      	b.n	801581e <_printf_float+0xbe>
 80159b4:	2301      	movs	r3, #1
 80159b6:	464a      	mov	r2, r9
 80159b8:	4631      	mov	r1, r6
 80159ba:	4628      	mov	r0, r5
 80159bc:	47b8      	blx	r7
 80159be:	3001      	adds	r0, #1
 80159c0:	f43f af2b 	beq.w	801581a <_printf_float+0xba>
 80159c4:	f108 0801 	add.w	r8, r8, #1
 80159c8:	e7e6      	b.n	8015998 <_printf_float+0x238>
 80159ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	dc2b      	bgt.n	8015a28 <_printf_float+0x2c8>
 80159d0:	2301      	movs	r3, #1
 80159d2:	4a26      	ldr	r2, [pc, #152]	; (8015a6c <_printf_float+0x30c>)
 80159d4:	4631      	mov	r1, r6
 80159d6:	4628      	mov	r0, r5
 80159d8:	47b8      	blx	r7
 80159da:	3001      	adds	r0, #1
 80159dc:	f43f af1d 	beq.w	801581a <_printf_float+0xba>
 80159e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e2:	b923      	cbnz	r3, 80159ee <_printf_float+0x28e>
 80159e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159e6:	b913      	cbnz	r3, 80159ee <_printf_float+0x28e>
 80159e8:	6823      	ldr	r3, [r4, #0]
 80159ea:	07d9      	lsls	r1, r3, #31
 80159ec:	d5d8      	bpl.n	80159a0 <_printf_float+0x240>
 80159ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159f2:	4631      	mov	r1, r6
 80159f4:	4628      	mov	r0, r5
 80159f6:	47b8      	blx	r7
 80159f8:	3001      	adds	r0, #1
 80159fa:	f43f af0e 	beq.w	801581a <_printf_float+0xba>
 80159fe:	f04f 0900 	mov.w	r9, #0
 8015a02:	f104 0a1a 	add.w	sl, r4, #26
 8015a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a08:	425b      	negs	r3, r3
 8015a0a:	454b      	cmp	r3, r9
 8015a0c:	dc01      	bgt.n	8015a12 <_printf_float+0x2b2>
 8015a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a10:	e794      	b.n	801593c <_printf_float+0x1dc>
 8015a12:	2301      	movs	r3, #1
 8015a14:	4652      	mov	r2, sl
 8015a16:	4631      	mov	r1, r6
 8015a18:	4628      	mov	r0, r5
 8015a1a:	47b8      	blx	r7
 8015a1c:	3001      	adds	r0, #1
 8015a1e:	f43f aefc 	beq.w	801581a <_printf_float+0xba>
 8015a22:	f109 0901 	add.w	r9, r9, #1
 8015a26:	e7ee      	b.n	8015a06 <_printf_float+0x2a6>
 8015a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	bfa8      	it	ge
 8015a30:	461a      	movge	r2, r3
 8015a32:	2a00      	cmp	r2, #0
 8015a34:	4691      	mov	r9, r2
 8015a36:	dd07      	ble.n	8015a48 <_printf_float+0x2e8>
 8015a38:	4613      	mov	r3, r2
 8015a3a:	4631      	mov	r1, r6
 8015a3c:	4642      	mov	r2, r8
 8015a3e:	4628      	mov	r0, r5
 8015a40:	47b8      	blx	r7
 8015a42:	3001      	adds	r0, #1
 8015a44:	f43f aee9 	beq.w	801581a <_printf_float+0xba>
 8015a48:	f104 031a 	add.w	r3, r4, #26
 8015a4c:	f04f 0b00 	mov.w	fp, #0
 8015a50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a54:	9306      	str	r3, [sp, #24]
 8015a56:	e015      	b.n	8015a84 <_printf_float+0x324>
 8015a58:	7fefffff 	.word	0x7fefffff
 8015a5c:	0801cdca 	.word	0x0801cdca
 8015a60:	0801cdc6 	.word	0x0801cdc6
 8015a64:	0801cdd2 	.word	0x0801cdd2
 8015a68:	0801cdce 	.word	0x0801cdce
 8015a6c:	0801d0e3 	.word	0x0801d0e3
 8015a70:	2301      	movs	r3, #1
 8015a72:	9a06      	ldr	r2, [sp, #24]
 8015a74:	4631      	mov	r1, r6
 8015a76:	4628      	mov	r0, r5
 8015a78:	47b8      	blx	r7
 8015a7a:	3001      	adds	r0, #1
 8015a7c:	f43f aecd 	beq.w	801581a <_printf_float+0xba>
 8015a80:	f10b 0b01 	add.w	fp, fp, #1
 8015a84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015a88:	ebaa 0309 	sub.w	r3, sl, r9
 8015a8c:	455b      	cmp	r3, fp
 8015a8e:	dcef      	bgt.n	8015a70 <_printf_float+0x310>
 8015a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a94:	429a      	cmp	r2, r3
 8015a96:	44d0      	add	r8, sl
 8015a98:	db15      	blt.n	8015ac6 <_printf_float+0x366>
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	07da      	lsls	r2, r3, #31
 8015a9e:	d412      	bmi.n	8015ac6 <_printf_float+0x366>
 8015aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015aa4:	eba3 020a 	sub.w	r2, r3, sl
 8015aa8:	eba3 0a01 	sub.w	sl, r3, r1
 8015aac:	4592      	cmp	sl, r2
 8015aae:	bfa8      	it	ge
 8015ab0:	4692      	movge	sl, r2
 8015ab2:	f1ba 0f00 	cmp.w	sl, #0
 8015ab6:	dc0e      	bgt.n	8015ad6 <_printf_float+0x376>
 8015ab8:	f04f 0800 	mov.w	r8, #0
 8015abc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ac0:	f104 091a 	add.w	r9, r4, #26
 8015ac4:	e019      	b.n	8015afa <_printf_float+0x39a>
 8015ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015aca:	4631      	mov	r1, r6
 8015acc:	4628      	mov	r0, r5
 8015ace:	47b8      	blx	r7
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	d1e5      	bne.n	8015aa0 <_printf_float+0x340>
 8015ad4:	e6a1      	b.n	801581a <_printf_float+0xba>
 8015ad6:	4653      	mov	r3, sl
 8015ad8:	4642      	mov	r2, r8
 8015ada:	4631      	mov	r1, r6
 8015adc:	4628      	mov	r0, r5
 8015ade:	47b8      	blx	r7
 8015ae0:	3001      	adds	r0, #1
 8015ae2:	d1e9      	bne.n	8015ab8 <_printf_float+0x358>
 8015ae4:	e699      	b.n	801581a <_printf_float+0xba>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	464a      	mov	r2, r9
 8015aea:	4631      	mov	r1, r6
 8015aec:	4628      	mov	r0, r5
 8015aee:	47b8      	blx	r7
 8015af0:	3001      	adds	r0, #1
 8015af2:	f43f ae92 	beq.w	801581a <_printf_float+0xba>
 8015af6:	f108 0801 	add.w	r8, r8, #1
 8015afa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015afe:	1a9b      	subs	r3, r3, r2
 8015b00:	eba3 030a 	sub.w	r3, r3, sl
 8015b04:	4543      	cmp	r3, r8
 8015b06:	dcee      	bgt.n	8015ae6 <_printf_float+0x386>
 8015b08:	e74a      	b.n	80159a0 <_printf_float+0x240>
 8015b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b0c:	2a01      	cmp	r2, #1
 8015b0e:	dc01      	bgt.n	8015b14 <_printf_float+0x3b4>
 8015b10:	07db      	lsls	r3, r3, #31
 8015b12:	d53a      	bpl.n	8015b8a <_printf_float+0x42a>
 8015b14:	2301      	movs	r3, #1
 8015b16:	4642      	mov	r2, r8
 8015b18:	4631      	mov	r1, r6
 8015b1a:	4628      	mov	r0, r5
 8015b1c:	47b8      	blx	r7
 8015b1e:	3001      	adds	r0, #1
 8015b20:	f43f ae7b 	beq.w	801581a <_printf_float+0xba>
 8015b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b28:	4631      	mov	r1, r6
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	47b8      	blx	r7
 8015b2e:	3001      	adds	r0, #1
 8015b30:	f108 0801 	add.w	r8, r8, #1
 8015b34:	f43f ae71 	beq.w	801581a <_printf_float+0xba>
 8015b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b44:	2300      	movs	r3, #0
 8015b46:	f7ea ffef 	bl	8000b28 <__aeabi_dcmpeq>
 8015b4a:	b9c8      	cbnz	r0, 8015b80 <_printf_float+0x420>
 8015b4c:	4653      	mov	r3, sl
 8015b4e:	4642      	mov	r2, r8
 8015b50:	4631      	mov	r1, r6
 8015b52:	4628      	mov	r0, r5
 8015b54:	47b8      	blx	r7
 8015b56:	3001      	adds	r0, #1
 8015b58:	d10e      	bne.n	8015b78 <_printf_float+0x418>
 8015b5a:	e65e      	b.n	801581a <_printf_float+0xba>
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	4652      	mov	r2, sl
 8015b60:	4631      	mov	r1, r6
 8015b62:	4628      	mov	r0, r5
 8015b64:	47b8      	blx	r7
 8015b66:	3001      	adds	r0, #1
 8015b68:	f43f ae57 	beq.w	801581a <_printf_float+0xba>
 8015b6c:	f108 0801 	add.w	r8, r8, #1
 8015b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b72:	3b01      	subs	r3, #1
 8015b74:	4543      	cmp	r3, r8
 8015b76:	dcf1      	bgt.n	8015b5c <_printf_float+0x3fc>
 8015b78:	464b      	mov	r3, r9
 8015b7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015b7e:	e6de      	b.n	801593e <_printf_float+0x1de>
 8015b80:	f04f 0800 	mov.w	r8, #0
 8015b84:	f104 0a1a 	add.w	sl, r4, #26
 8015b88:	e7f2      	b.n	8015b70 <_printf_float+0x410>
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	e7df      	b.n	8015b4e <_printf_float+0x3ee>
 8015b8e:	2301      	movs	r3, #1
 8015b90:	464a      	mov	r2, r9
 8015b92:	4631      	mov	r1, r6
 8015b94:	4628      	mov	r0, r5
 8015b96:	47b8      	blx	r7
 8015b98:	3001      	adds	r0, #1
 8015b9a:	f43f ae3e 	beq.w	801581a <_printf_float+0xba>
 8015b9e:	f108 0801 	add.w	r8, r8, #1
 8015ba2:	68e3      	ldr	r3, [r4, #12]
 8015ba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ba6:	1a9b      	subs	r3, r3, r2
 8015ba8:	4543      	cmp	r3, r8
 8015baa:	dcf0      	bgt.n	8015b8e <_printf_float+0x42e>
 8015bac:	e6fc      	b.n	80159a8 <_printf_float+0x248>
 8015bae:	f04f 0800 	mov.w	r8, #0
 8015bb2:	f104 0919 	add.w	r9, r4, #25
 8015bb6:	e7f4      	b.n	8015ba2 <_printf_float+0x442>
 8015bb8:	2900      	cmp	r1, #0
 8015bba:	f43f ae8b 	beq.w	80158d4 <_printf_float+0x174>
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015bc4:	ab09      	add	r3, sp, #36	; 0x24
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	ec49 8b10 	vmov	d0, r8, r9
 8015bcc:	6022      	str	r2, [r4, #0]
 8015bce:	f8cd a004 	str.w	sl, [sp, #4]
 8015bd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	f7ff fd2e 	bl	8015638 <__cvt>
 8015bdc:	4680      	mov	r8, r0
 8015bde:	e648      	b.n	8015872 <_printf_float+0x112>

08015be0 <_printf_common>:
 8015be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	4691      	mov	r9, r2
 8015be6:	461f      	mov	r7, r3
 8015be8:	688a      	ldr	r2, [r1, #8]
 8015bea:	690b      	ldr	r3, [r1, #16]
 8015bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	bfb8      	it	lt
 8015bf4:	4613      	movlt	r3, r2
 8015bf6:	f8c9 3000 	str.w	r3, [r9]
 8015bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015bfe:	4606      	mov	r6, r0
 8015c00:	460c      	mov	r4, r1
 8015c02:	b112      	cbz	r2, 8015c0a <_printf_common+0x2a>
 8015c04:	3301      	adds	r3, #1
 8015c06:	f8c9 3000 	str.w	r3, [r9]
 8015c0a:	6823      	ldr	r3, [r4, #0]
 8015c0c:	0699      	lsls	r1, r3, #26
 8015c0e:	bf42      	ittt	mi
 8015c10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015c14:	3302      	addmi	r3, #2
 8015c16:	f8c9 3000 	strmi.w	r3, [r9]
 8015c1a:	6825      	ldr	r5, [r4, #0]
 8015c1c:	f015 0506 	ands.w	r5, r5, #6
 8015c20:	d107      	bne.n	8015c32 <_printf_common+0x52>
 8015c22:	f104 0a19 	add.w	sl, r4, #25
 8015c26:	68e3      	ldr	r3, [r4, #12]
 8015c28:	f8d9 2000 	ldr.w	r2, [r9]
 8015c2c:	1a9b      	subs	r3, r3, r2
 8015c2e:	42ab      	cmp	r3, r5
 8015c30:	dc28      	bgt.n	8015c84 <_printf_common+0xa4>
 8015c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015c36:	6822      	ldr	r2, [r4, #0]
 8015c38:	3300      	adds	r3, #0
 8015c3a:	bf18      	it	ne
 8015c3c:	2301      	movne	r3, #1
 8015c3e:	0692      	lsls	r2, r2, #26
 8015c40:	d42d      	bmi.n	8015c9e <_printf_common+0xbe>
 8015c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c46:	4639      	mov	r1, r7
 8015c48:	4630      	mov	r0, r6
 8015c4a:	47c0      	blx	r8
 8015c4c:	3001      	adds	r0, #1
 8015c4e:	d020      	beq.n	8015c92 <_printf_common+0xb2>
 8015c50:	6823      	ldr	r3, [r4, #0]
 8015c52:	68e5      	ldr	r5, [r4, #12]
 8015c54:	f8d9 2000 	ldr.w	r2, [r9]
 8015c58:	f003 0306 	and.w	r3, r3, #6
 8015c5c:	2b04      	cmp	r3, #4
 8015c5e:	bf08      	it	eq
 8015c60:	1aad      	subeq	r5, r5, r2
 8015c62:	68a3      	ldr	r3, [r4, #8]
 8015c64:	6922      	ldr	r2, [r4, #16]
 8015c66:	bf0c      	ite	eq
 8015c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c6c:	2500      	movne	r5, #0
 8015c6e:	4293      	cmp	r3, r2
 8015c70:	bfc4      	itt	gt
 8015c72:	1a9b      	subgt	r3, r3, r2
 8015c74:	18ed      	addgt	r5, r5, r3
 8015c76:	f04f 0900 	mov.w	r9, #0
 8015c7a:	341a      	adds	r4, #26
 8015c7c:	454d      	cmp	r5, r9
 8015c7e:	d11a      	bne.n	8015cb6 <_printf_common+0xd6>
 8015c80:	2000      	movs	r0, #0
 8015c82:	e008      	b.n	8015c96 <_printf_common+0xb6>
 8015c84:	2301      	movs	r3, #1
 8015c86:	4652      	mov	r2, sl
 8015c88:	4639      	mov	r1, r7
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	47c0      	blx	r8
 8015c8e:	3001      	adds	r0, #1
 8015c90:	d103      	bne.n	8015c9a <_printf_common+0xba>
 8015c92:	f04f 30ff 	mov.w	r0, #4294967295
 8015c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c9a:	3501      	adds	r5, #1
 8015c9c:	e7c3      	b.n	8015c26 <_printf_common+0x46>
 8015c9e:	18e1      	adds	r1, r4, r3
 8015ca0:	1c5a      	adds	r2, r3, #1
 8015ca2:	2030      	movs	r0, #48	; 0x30
 8015ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ca8:	4422      	add	r2, r4
 8015caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015cb2:	3302      	adds	r3, #2
 8015cb4:	e7c5      	b.n	8015c42 <_printf_common+0x62>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	4622      	mov	r2, r4
 8015cba:	4639      	mov	r1, r7
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	47c0      	blx	r8
 8015cc0:	3001      	adds	r0, #1
 8015cc2:	d0e6      	beq.n	8015c92 <_printf_common+0xb2>
 8015cc4:	f109 0901 	add.w	r9, r9, #1
 8015cc8:	e7d8      	b.n	8015c7c <_printf_common+0x9c>
	...

08015ccc <_printf_i>:
 8015ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015cd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015cd4:	460c      	mov	r4, r1
 8015cd6:	7e09      	ldrb	r1, [r1, #24]
 8015cd8:	b085      	sub	sp, #20
 8015cda:	296e      	cmp	r1, #110	; 0x6e
 8015cdc:	4617      	mov	r7, r2
 8015cde:	4606      	mov	r6, r0
 8015ce0:	4698      	mov	r8, r3
 8015ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ce4:	f000 80b3 	beq.w	8015e4e <_printf_i+0x182>
 8015ce8:	d822      	bhi.n	8015d30 <_printf_i+0x64>
 8015cea:	2963      	cmp	r1, #99	; 0x63
 8015cec:	d036      	beq.n	8015d5c <_printf_i+0x90>
 8015cee:	d80a      	bhi.n	8015d06 <_printf_i+0x3a>
 8015cf0:	2900      	cmp	r1, #0
 8015cf2:	f000 80b9 	beq.w	8015e68 <_printf_i+0x19c>
 8015cf6:	2958      	cmp	r1, #88	; 0x58
 8015cf8:	f000 8083 	beq.w	8015e02 <_printf_i+0x136>
 8015cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015d04:	e032      	b.n	8015d6c <_printf_i+0xa0>
 8015d06:	2964      	cmp	r1, #100	; 0x64
 8015d08:	d001      	beq.n	8015d0e <_printf_i+0x42>
 8015d0a:	2969      	cmp	r1, #105	; 0x69
 8015d0c:	d1f6      	bne.n	8015cfc <_printf_i+0x30>
 8015d0e:	6820      	ldr	r0, [r4, #0]
 8015d10:	6813      	ldr	r3, [r2, #0]
 8015d12:	0605      	lsls	r5, r0, #24
 8015d14:	f103 0104 	add.w	r1, r3, #4
 8015d18:	d52a      	bpl.n	8015d70 <_printf_i+0xa4>
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	6011      	str	r1, [r2, #0]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	da03      	bge.n	8015d2a <_printf_i+0x5e>
 8015d22:	222d      	movs	r2, #45	; 0x2d
 8015d24:	425b      	negs	r3, r3
 8015d26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015d2a:	486f      	ldr	r0, [pc, #444]	; (8015ee8 <_printf_i+0x21c>)
 8015d2c:	220a      	movs	r2, #10
 8015d2e:	e039      	b.n	8015da4 <_printf_i+0xd8>
 8015d30:	2973      	cmp	r1, #115	; 0x73
 8015d32:	f000 809d 	beq.w	8015e70 <_printf_i+0x1a4>
 8015d36:	d808      	bhi.n	8015d4a <_printf_i+0x7e>
 8015d38:	296f      	cmp	r1, #111	; 0x6f
 8015d3a:	d020      	beq.n	8015d7e <_printf_i+0xb2>
 8015d3c:	2970      	cmp	r1, #112	; 0x70
 8015d3e:	d1dd      	bne.n	8015cfc <_printf_i+0x30>
 8015d40:	6823      	ldr	r3, [r4, #0]
 8015d42:	f043 0320 	orr.w	r3, r3, #32
 8015d46:	6023      	str	r3, [r4, #0]
 8015d48:	e003      	b.n	8015d52 <_printf_i+0x86>
 8015d4a:	2975      	cmp	r1, #117	; 0x75
 8015d4c:	d017      	beq.n	8015d7e <_printf_i+0xb2>
 8015d4e:	2978      	cmp	r1, #120	; 0x78
 8015d50:	d1d4      	bne.n	8015cfc <_printf_i+0x30>
 8015d52:	2378      	movs	r3, #120	; 0x78
 8015d54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d58:	4864      	ldr	r0, [pc, #400]	; (8015eec <_printf_i+0x220>)
 8015d5a:	e055      	b.n	8015e08 <_printf_i+0x13c>
 8015d5c:	6813      	ldr	r3, [r2, #0]
 8015d5e:	1d19      	adds	r1, r3, #4
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	6011      	str	r1, [r2, #0]
 8015d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	e08c      	b.n	8015e8a <_printf_i+0x1be>
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	6011      	str	r1, [r2, #0]
 8015d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d78:	bf18      	it	ne
 8015d7a:	b21b      	sxthne	r3, r3
 8015d7c:	e7cf      	b.n	8015d1e <_printf_i+0x52>
 8015d7e:	6813      	ldr	r3, [r2, #0]
 8015d80:	6825      	ldr	r5, [r4, #0]
 8015d82:	1d18      	adds	r0, r3, #4
 8015d84:	6010      	str	r0, [r2, #0]
 8015d86:	0628      	lsls	r0, r5, #24
 8015d88:	d501      	bpl.n	8015d8e <_printf_i+0xc2>
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	e002      	b.n	8015d94 <_printf_i+0xc8>
 8015d8e:	0668      	lsls	r0, r5, #25
 8015d90:	d5fb      	bpl.n	8015d8a <_printf_i+0xbe>
 8015d92:	881b      	ldrh	r3, [r3, #0]
 8015d94:	4854      	ldr	r0, [pc, #336]	; (8015ee8 <_printf_i+0x21c>)
 8015d96:	296f      	cmp	r1, #111	; 0x6f
 8015d98:	bf14      	ite	ne
 8015d9a:	220a      	movne	r2, #10
 8015d9c:	2208      	moveq	r2, #8
 8015d9e:	2100      	movs	r1, #0
 8015da0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015da4:	6865      	ldr	r5, [r4, #4]
 8015da6:	60a5      	str	r5, [r4, #8]
 8015da8:	2d00      	cmp	r5, #0
 8015daa:	f2c0 8095 	blt.w	8015ed8 <_printf_i+0x20c>
 8015dae:	6821      	ldr	r1, [r4, #0]
 8015db0:	f021 0104 	bic.w	r1, r1, #4
 8015db4:	6021      	str	r1, [r4, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d13d      	bne.n	8015e36 <_printf_i+0x16a>
 8015dba:	2d00      	cmp	r5, #0
 8015dbc:	f040 808e 	bne.w	8015edc <_printf_i+0x210>
 8015dc0:	4665      	mov	r5, ip
 8015dc2:	2a08      	cmp	r2, #8
 8015dc4:	d10b      	bne.n	8015dde <_printf_i+0x112>
 8015dc6:	6823      	ldr	r3, [r4, #0]
 8015dc8:	07db      	lsls	r3, r3, #31
 8015dca:	d508      	bpl.n	8015dde <_printf_i+0x112>
 8015dcc:	6923      	ldr	r3, [r4, #16]
 8015dce:	6862      	ldr	r2, [r4, #4]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	bfde      	ittt	le
 8015dd4:	2330      	movle	r3, #48	; 0x30
 8015dd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015dda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015dde:	ebac 0305 	sub.w	r3, ip, r5
 8015de2:	6123      	str	r3, [r4, #16]
 8015de4:	f8cd 8000 	str.w	r8, [sp]
 8015de8:	463b      	mov	r3, r7
 8015dea:	aa03      	add	r2, sp, #12
 8015dec:	4621      	mov	r1, r4
 8015dee:	4630      	mov	r0, r6
 8015df0:	f7ff fef6 	bl	8015be0 <_printf_common>
 8015df4:	3001      	adds	r0, #1
 8015df6:	d14d      	bne.n	8015e94 <_printf_i+0x1c8>
 8015df8:	f04f 30ff 	mov.w	r0, #4294967295
 8015dfc:	b005      	add	sp, #20
 8015dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e02:	4839      	ldr	r0, [pc, #228]	; (8015ee8 <_printf_i+0x21c>)
 8015e04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015e08:	6813      	ldr	r3, [r2, #0]
 8015e0a:	6821      	ldr	r1, [r4, #0]
 8015e0c:	1d1d      	adds	r5, r3, #4
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	6015      	str	r5, [r2, #0]
 8015e12:	060a      	lsls	r2, r1, #24
 8015e14:	d50b      	bpl.n	8015e2e <_printf_i+0x162>
 8015e16:	07ca      	lsls	r2, r1, #31
 8015e18:	bf44      	itt	mi
 8015e1a:	f041 0120 	orrmi.w	r1, r1, #32
 8015e1e:	6021      	strmi	r1, [r4, #0]
 8015e20:	b91b      	cbnz	r3, 8015e2a <_printf_i+0x15e>
 8015e22:	6822      	ldr	r2, [r4, #0]
 8015e24:	f022 0220 	bic.w	r2, r2, #32
 8015e28:	6022      	str	r2, [r4, #0]
 8015e2a:	2210      	movs	r2, #16
 8015e2c:	e7b7      	b.n	8015d9e <_printf_i+0xd2>
 8015e2e:	064d      	lsls	r5, r1, #25
 8015e30:	bf48      	it	mi
 8015e32:	b29b      	uxthmi	r3, r3
 8015e34:	e7ef      	b.n	8015e16 <_printf_i+0x14a>
 8015e36:	4665      	mov	r5, ip
 8015e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8015e40:	5cc3      	ldrb	r3, [r0, r3]
 8015e42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015e46:	460b      	mov	r3, r1
 8015e48:	2900      	cmp	r1, #0
 8015e4a:	d1f5      	bne.n	8015e38 <_printf_i+0x16c>
 8015e4c:	e7b9      	b.n	8015dc2 <_printf_i+0xf6>
 8015e4e:	6813      	ldr	r3, [r2, #0]
 8015e50:	6825      	ldr	r5, [r4, #0]
 8015e52:	6961      	ldr	r1, [r4, #20]
 8015e54:	1d18      	adds	r0, r3, #4
 8015e56:	6010      	str	r0, [r2, #0]
 8015e58:	0628      	lsls	r0, r5, #24
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	d501      	bpl.n	8015e62 <_printf_i+0x196>
 8015e5e:	6019      	str	r1, [r3, #0]
 8015e60:	e002      	b.n	8015e68 <_printf_i+0x19c>
 8015e62:	066a      	lsls	r2, r5, #25
 8015e64:	d5fb      	bpl.n	8015e5e <_printf_i+0x192>
 8015e66:	8019      	strh	r1, [r3, #0]
 8015e68:	2300      	movs	r3, #0
 8015e6a:	6123      	str	r3, [r4, #16]
 8015e6c:	4665      	mov	r5, ip
 8015e6e:	e7b9      	b.n	8015de4 <_printf_i+0x118>
 8015e70:	6813      	ldr	r3, [r2, #0]
 8015e72:	1d19      	adds	r1, r3, #4
 8015e74:	6011      	str	r1, [r2, #0]
 8015e76:	681d      	ldr	r5, [r3, #0]
 8015e78:	6862      	ldr	r2, [r4, #4]
 8015e7a:	2100      	movs	r1, #0
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	f7ea f9df 	bl	8000240 <memchr>
 8015e82:	b108      	cbz	r0, 8015e88 <_printf_i+0x1bc>
 8015e84:	1b40      	subs	r0, r0, r5
 8015e86:	6060      	str	r0, [r4, #4]
 8015e88:	6863      	ldr	r3, [r4, #4]
 8015e8a:	6123      	str	r3, [r4, #16]
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e92:	e7a7      	b.n	8015de4 <_printf_i+0x118>
 8015e94:	6923      	ldr	r3, [r4, #16]
 8015e96:	462a      	mov	r2, r5
 8015e98:	4639      	mov	r1, r7
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	47c0      	blx	r8
 8015e9e:	3001      	adds	r0, #1
 8015ea0:	d0aa      	beq.n	8015df8 <_printf_i+0x12c>
 8015ea2:	6823      	ldr	r3, [r4, #0]
 8015ea4:	079b      	lsls	r3, r3, #30
 8015ea6:	d413      	bmi.n	8015ed0 <_printf_i+0x204>
 8015ea8:	68e0      	ldr	r0, [r4, #12]
 8015eaa:	9b03      	ldr	r3, [sp, #12]
 8015eac:	4298      	cmp	r0, r3
 8015eae:	bfb8      	it	lt
 8015eb0:	4618      	movlt	r0, r3
 8015eb2:	e7a3      	b.n	8015dfc <_printf_i+0x130>
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	464a      	mov	r2, r9
 8015eb8:	4639      	mov	r1, r7
 8015eba:	4630      	mov	r0, r6
 8015ebc:	47c0      	blx	r8
 8015ebe:	3001      	adds	r0, #1
 8015ec0:	d09a      	beq.n	8015df8 <_printf_i+0x12c>
 8015ec2:	3501      	adds	r5, #1
 8015ec4:	68e3      	ldr	r3, [r4, #12]
 8015ec6:	9a03      	ldr	r2, [sp, #12]
 8015ec8:	1a9b      	subs	r3, r3, r2
 8015eca:	42ab      	cmp	r3, r5
 8015ecc:	dcf2      	bgt.n	8015eb4 <_printf_i+0x1e8>
 8015ece:	e7eb      	b.n	8015ea8 <_printf_i+0x1dc>
 8015ed0:	2500      	movs	r5, #0
 8015ed2:	f104 0919 	add.w	r9, r4, #25
 8015ed6:	e7f5      	b.n	8015ec4 <_printf_i+0x1f8>
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d1ac      	bne.n	8015e36 <_printf_i+0x16a>
 8015edc:	7803      	ldrb	r3, [r0, #0]
 8015ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ee6:	e76c      	b.n	8015dc2 <_printf_i+0xf6>
 8015ee8:	0801cdd6 	.word	0x0801cdd6
 8015eec:	0801cde7 	.word	0x0801cde7

08015ef0 <_scanf_float>:
 8015ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef4:	469a      	mov	sl, r3
 8015ef6:	688b      	ldr	r3, [r1, #8]
 8015ef8:	4616      	mov	r6, r2
 8015efa:	1e5a      	subs	r2, r3, #1
 8015efc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f00:	b087      	sub	sp, #28
 8015f02:	bf83      	ittte	hi
 8015f04:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015f08:	189b      	addhi	r3, r3, r2
 8015f0a:	9301      	strhi	r3, [sp, #4]
 8015f0c:	2300      	movls	r3, #0
 8015f0e:	bf86      	itte	hi
 8015f10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f14:	608b      	strhi	r3, [r1, #8]
 8015f16:	9301      	strls	r3, [sp, #4]
 8015f18:	680b      	ldr	r3, [r1, #0]
 8015f1a:	4688      	mov	r8, r1
 8015f1c:	f04f 0b00 	mov.w	fp, #0
 8015f20:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015f24:	f848 3b1c 	str.w	r3, [r8], #28
 8015f28:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015f2c:	4607      	mov	r7, r0
 8015f2e:	460c      	mov	r4, r1
 8015f30:	4645      	mov	r5, r8
 8015f32:	465a      	mov	r2, fp
 8015f34:	46d9      	mov	r9, fp
 8015f36:	f8cd b008 	str.w	fp, [sp, #8]
 8015f3a:	68a1      	ldr	r1, [r4, #8]
 8015f3c:	b181      	cbz	r1, 8015f60 <_scanf_float+0x70>
 8015f3e:	6833      	ldr	r3, [r6, #0]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	2b49      	cmp	r3, #73	; 0x49
 8015f44:	d071      	beq.n	801602a <_scanf_float+0x13a>
 8015f46:	d84d      	bhi.n	8015fe4 <_scanf_float+0xf4>
 8015f48:	2b39      	cmp	r3, #57	; 0x39
 8015f4a:	d840      	bhi.n	8015fce <_scanf_float+0xde>
 8015f4c:	2b31      	cmp	r3, #49	; 0x31
 8015f4e:	f080 8088 	bcs.w	8016062 <_scanf_float+0x172>
 8015f52:	2b2d      	cmp	r3, #45	; 0x2d
 8015f54:	f000 8090 	beq.w	8016078 <_scanf_float+0x188>
 8015f58:	d815      	bhi.n	8015f86 <_scanf_float+0x96>
 8015f5a:	2b2b      	cmp	r3, #43	; 0x2b
 8015f5c:	f000 808c 	beq.w	8016078 <_scanf_float+0x188>
 8015f60:	f1b9 0f00 	cmp.w	r9, #0
 8015f64:	d003      	beq.n	8015f6e <_scanf_float+0x7e>
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f6c:	6023      	str	r3, [r4, #0]
 8015f6e:	3a01      	subs	r2, #1
 8015f70:	2a01      	cmp	r2, #1
 8015f72:	f200 80ea 	bhi.w	801614a <_scanf_float+0x25a>
 8015f76:	4545      	cmp	r5, r8
 8015f78:	f200 80dc 	bhi.w	8016134 <_scanf_float+0x244>
 8015f7c:	2601      	movs	r6, #1
 8015f7e:	4630      	mov	r0, r6
 8015f80:	b007      	add	sp, #28
 8015f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f86:	2b2e      	cmp	r3, #46	; 0x2e
 8015f88:	f000 809f 	beq.w	80160ca <_scanf_float+0x1da>
 8015f8c:	2b30      	cmp	r3, #48	; 0x30
 8015f8e:	d1e7      	bne.n	8015f60 <_scanf_float+0x70>
 8015f90:	6820      	ldr	r0, [r4, #0]
 8015f92:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015f96:	d064      	beq.n	8016062 <_scanf_float+0x172>
 8015f98:	9b01      	ldr	r3, [sp, #4]
 8015f9a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015f9e:	6020      	str	r0, [r4, #0]
 8015fa0:	f109 0901 	add.w	r9, r9, #1
 8015fa4:	b11b      	cbz	r3, 8015fae <_scanf_float+0xbe>
 8015fa6:	3b01      	subs	r3, #1
 8015fa8:	3101      	adds	r1, #1
 8015faa:	9301      	str	r3, [sp, #4]
 8015fac:	60a1      	str	r1, [r4, #8]
 8015fae:	68a3      	ldr	r3, [r4, #8]
 8015fb0:	3b01      	subs	r3, #1
 8015fb2:	60a3      	str	r3, [r4, #8]
 8015fb4:	6923      	ldr	r3, [r4, #16]
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	6123      	str	r3, [r4, #16]
 8015fba:	6873      	ldr	r3, [r6, #4]
 8015fbc:	3b01      	subs	r3, #1
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	6073      	str	r3, [r6, #4]
 8015fc2:	f340 80ac 	ble.w	801611e <_scanf_float+0x22e>
 8015fc6:	6833      	ldr	r3, [r6, #0]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	6033      	str	r3, [r6, #0]
 8015fcc:	e7b5      	b.n	8015f3a <_scanf_float+0x4a>
 8015fce:	2b45      	cmp	r3, #69	; 0x45
 8015fd0:	f000 8085 	beq.w	80160de <_scanf_float+0x1ee>
 8015fd4:	2b46      	cmp	r3, #70	; 0x46
 8015fd6:	d06a      	beq.n	80160ae <_scanf_float+0x1be>
 8015fd8:	2b41      	cmp	r3, #65	; 0x41
 8015fda:	d1c1      	bne.n	8015f60 <_scanf_float+0x70>
 8015fdc:	2a01      	cmp	r2, #1
 8015fde:	d1bf      	bne.n	8015f60 <_scanf_float+0x70>
 8015fe0:	2202      	movs	r2, #2
 8015fe2:	e046      	b.n	8016072 <_scanf_float+0x182>
 8015fe4:	2b65      	cmp	r3, #101	; 0x65
 8015fe6:	d07a      	beq.n	80160de <_scanf_float+0x1ee>
 8015fe8:	d818      	bhi.n	801601c <_scanf_float+0x12c>
 8015fea:	2b54      	cmp	r3, #84	; 0x54
 8015fec:	d066      	beq.n	80160bc <_scanf_float+0x1cc>
 8015fee:	d811      	bhi.n	8016014 <_scanf_float+0x124>
 8015ff0:	2b4e      	cmp	r3, #78	; 0x4e
 8015ff2:	d1b5      	bne.n	8015f60 <_scanf_float+0x70>
 8015ff4:	2a00      	cmp	r2, #0
 8015ff6:	d146      	bne.n	8016086 <_scanf_float+0x196>
 8015ff8:	f1b9 0f00 	cmp.w	r9, #0
 8015ffc:	d145      	bne.n	801608a <_scanf_float+0x19a>
 8015ffe:	6821      	ldr	r1, [r4, #0]
 8016000:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016004:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016008:	d13f      	bne.n	801608a <_scanf_float+0x19a>
 801600a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801600e:	6021      	str	r1, [r4, #0]
 8016010:	2201      	movs	r2, #1
 8016012:	e02e      	b.n	8016072 <_scanf_float+0x182>
 8016014:	2b59      	cmp	r3, #89	; 0x59
 8016016:	d01e      	beq.n	8016056 <_scanf_float+0x166>
 8016018:	2b61      	cmp	r3, #97	; 0x61
 801601a:	e7de      	b.n	8015fda <_scanf_float+0xea>
 801601c:	2b6e      	cmp	r3, #110	; 0x6e
 801601e:	d0e9      	beq.n	8015ff4 <_scanf_float+0x104>
 8016020:	d815      	bhi.n	801604e <_scanf_float+0x15e>
 8016022:	2b66      	cmp	r3, #102	; 0x66
 8016024:	d043      	beq.n	80160ae <_scanf_float+0x1be>
 8016026:	2b69      	cmp	r3, #105	; 0x69
 8016028:	d19a      	bne.n	8015f60 <_scanf_float+0x70>
 801602a:	f1bb 0f00 	cmp.w	fp, #0
 801602e:	d138      	bne.n	80160a2 <_scanf_float+0x1b2>
 8016030:	f1b9 0f00 	cmp.w	r9, #0
 8016034:	d197      	bne.n	8015f66 <_scanf_float+0x76>
 8016036:	6821      	ldr	r1, [r4, #0]
 8016038:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801603c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016040:	d195      	bne.n	8015f6e <_scanf_float+0x7e>
 8016042:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016046:	6021      	str	r1, [r4, #0]
 8016048:	f04f 0b01 	mov.w	fp, #1
 801604c:	e011      	b.n	8016072 <_scanf_float+0x182>
 801604e:	2b74      	cmp	r3, #116	; 0x74
 8016050:	d034      	beq.n	80160bc <_scanf_float+0x1cc>
 8016052:	2b79      	cmp	r3, #121	; 0x79
 8016054:	d184      	bne.n	8015f60 <_scanf_float+0x70>
 8016056:	f1bb 0f07 	cmp.w	fp, #7
 801605a:	d181      	bne.n	8015f60 <_scanf_float+0x70>
 801605c:	f04f 0b08 	mov.w	fp, #8
 8016060:	e007      	b.n	8016072 <_scanf_float+0x182>
 8016062:	eb12 0f0b 	cmn.w	r2, fp
 8016066:	f47f af7b 	bne.w	8015f60 <_scanf_float+0x70>
 801606a:	6821      	ldr	r1, [r4, #0]
 801606c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016070:	6021      	str	r1, [r4, #0]
 8016072:	702b      	strb	r3, [r5, #0]
 8016074:	3501      	adds	r5, #1
 8016076:	e79a      	b.n	8015fae <_scanf_float+0xbe>
 8016078:	6821      	ldr	r1, [r4, #0]
 801607a:	0608      	lsls	r0, r1, #24
 801607c:	f57f af70 	bpl.w	8015f60 <_scanf_float+0x70>
 8016080:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016084:	e7f4      	b.n	8016070 <_scanf_float+0x180>
 8016086:	2a02      	cmp	r2, #2
 8016088:	d047      	beq.n	801611a <_scanf_float+0x22a>
 801608a:	f1bb 0f01 	cmp.w	fp, #1
 801608e:	d003      	beq.n	8016098 <_scanf_float+0x1a8>
 8016090:	f1bb 0f04 	cmp.w	fp, #4
 8016094:	f47f af64 	bne.w	8015f60 <_scanf_float+0x70>
 8016098:	f10b 0b01 	add.w	fp, fp, #1
 801609c:	fa5f fb8b 	uxtb.w	fp, fp
 80160a0:	e7e7      	b.n	8016072 <_scanf_float+0x182>
 80160a2:	f1bb 0f03 	cmp.w	fp, #3
 80160a6:	d0f7      	beq.n	8016098 <_scanf_float+0x1a8>
 80160a8:	f1bb 0f05 	cmp.w	fp, #5
 80160ac:	e7f2      	b.n	8016094 <_scanf_float+0x1a4>
 80160ae:	f1bb 0f02 	cmp.w	fp, #2
 80160b2:	f47f af55 	bne.w	8015f60 <_scanf_float+0x70>
 80160b6:	f04f 0b03 	mov.w	fp, #3
 80160ba:	e7da      	b.n	8016072 <_scanf_float+0x182>
 80160bc:	f1bb 0f06 	cmp.w	fp, #6
 80160c0:	f47f af4e 	bne.w	8015f60 <_scanf_float+0x70>
 80160c4:	f04f 0b07 	mov.w	fp, #7
 80160c8:	e7d3      	b.n	8016072 <_scanf_float+0x182>
 80160ca:	6821      	ldr	r1, [r4, #0]
 80160cc:	0588      	lsls	r0, r1, #22
 80160ce:	f57f af47 	bpl.w	8015f60 <_scanf_float+0x70>
 80160d2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80160d6:	6021      	str	r1, [r4, #0]
 80160d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80160dc:	e7c9      	b.n	8016072 <_scanf_float+0x182>
 80160de:	6821      	ldr	r1, [r4, #0]
 80160e0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80160e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80160e8:	d006      	beq.n	80160f8 <_scanf_float+0x208>
 80160ea:	0548      	lsls	r0, r1, #21
 80160ec:	f57f af38 	bpl.w	8015f60 <_scanf_float+0x70>
 80160f0:	f1b9 0f00 	cmp.w	r9, #0
 80160f4:	f43f af3b 	beq.w	8015f6e <_scanf_float+0x7e>
 80160f8:	0588      	lsls	r0, r1, #22
 80160fa:	bf58      	it	pl
 80160fc:	9802      	ldrpl	r0, [sp, #8]
 80160fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016102:	bf58      	it	pl
 8016104:	eba9 0000 	subpl.w	r0, r9, r0
 8016108:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801610c:	bf58      	it	pl
 801610e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016112:	6021      	str	r1, [r4, #0]
 8016114:	f04f 0900 	mov.w	r9, #0
 8016118:	e7ab      	b.n	8016072 <_scanf_float+0x182>
 801611a:	2203      	movs	r2, #3
 801611c:	e7a9      	b.n	8016072 <_scanf_float+0x182>
 801611e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016122:	9205      	str	r2, [sp, #20]
 8016124:	4631      	mov	r1, r6
 8016126:	4638      	mov	r0, r7
 8016128:	4798      	blx	r3
 801612a:	9a05      	ldr	r2, [sp, #20]
 801612c:	2800      	cmp	r0, #0
 801612e:	f43f af04 	beq.w	8015f3a <_scanf_float+0x4a>
 8016132:	e715      	b.n	8015f60 <_scanf_float+0x70>
 8016134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016138:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801613c:	4632      	mov	r2, r6
 801613e:	4638      	mov	r0, r7
 8016140:	4798      	blx	r3
 8016142:	6923      	ldr	r3, [r4, #16]
 8016144:	3b01      	subs	r3, #1
 8016146:	6123      	str	r3, [r4, #16]
 8016148:	e715      	b.n	8015f76 <_scanf_float+0x86>
 801614a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801614e:	2b06      	cmp	r3, #6
 8016150:	d80a      	bhi.n	8016168 <_scanf_float+0x278>
 8016152:	f1bb 0f02 	cmp.w	fp, #2
 8016156:	d968      	bls.n	801622a <_scanf_float+0x33a>
 8016158:	f1ab 0b03 	sub.w	fp, fp, #3
 801615c:	fa5f fb8b 	uxtb.w	fp, fp
 8016160:	eba5 0b0b 	sub.w	fp, r5, fp
 8016164:	455d      	cmp	r5, fp
 8016166:	d14b      	bne.n	8016200 <_scanf_float+0x310>
 8016168:	6823      	ldr	r3, [r4, #0]
 801616a:	05da      	lsls	r2, r3, #23
 801616c:	d51f      	bpl.n	80161ae <_scanf_float+0x2be>
 801616e:	055b      	lsls	r3, r3, #21
 8016170:	d468      	bmi.n	8016244 <_scanf_float+0x354>
 8016172:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016176:	6923      	ldr	r3, [r4, #16]
 8016178:	2965      	cmp	r1, #101	; 0x65
 801617a:	f103 33ff 	add.w	r3, r3, #4294967295
 801617e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016182:	6123      	str	r3, [r4, #16]
 8016184:	d00d      	beq.n	80161a2 <_scanf_float+0x2b2>
 8016186:	2945      	cmp	r1, #69	; 0x45
 8016188:	d00b      	beq.n	80161a2 <_scanf_float+0x2b2>
 801618a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801618e:	4632      	mov	r2, r6
 8016190:	4638      	mov	r0, r7
 8016192:	4798      	blx	r3
 8016194:	6923      	ldr	r3, [r4, #16]
 8016196:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801619a:	3b01      	subs	r3, #1
 801619c:	f1a5 0b02 	sub.w	fp, r5, #2
 80161a0:	6123      	str	r3, [r4, #16]
 80161a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161a6:	4632      	mov	r2, r6
 80161a8:	4638      	mov	r0, r7
 80161aa:	4798      	blx	r3
 80161ac:	465d      	mov	r5, fp
 80161ae:	6826      	ldr	r6, [r4, #0]
 80161b0:	f016 0610 	ands.w	r6, r6, #16
 80161b4:	d17a      	bne.n	80162ac <_scanf_float+0x3bc>
 80161b6:	702e      	strb	r6, [r5, #0]
 80161b8:	6823      	ldr	r3, [r4, #0]
 80161ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80161be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80161c2:	d142      	bne.n	801624a <_scanf_float+0x35a>
 80161c4:	9b02      	ldr	r3, [sp, #8]
 80161c6:	eba9 0303 	sub.w	r3, r9, r3
 80161ca:	425a      	negs	r2, r3
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d149      	bne.n	8016264 <_scanf_float+0x374>
 80161d0:	2200      	movs	r2, #0
 80161d2:	4641      	mov	r1, r8
 80161d4:	4638      	mov	r0, r7
 80161d6:	f000 ff93 	bl	8017100 <_strtod_r>
 80161da:	6825      	ldr	r5, [r4, #0]
 80161dc:	f8da 3000 	ldr.w	r3, [sl]
 80161e0:	f015 0f02 	tst.w	r5, #2
 80161e4:	f103 0204 	add.w	r2, r3, #4
 80161e8:	ec59 8b10 	vmov	r8, r9, d0
 80161ec:	f8ca 2000 	str.w	r2, [sl]
 80161f0:	d043      	beq.n	801627a <_scanf_float+0x38a>
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	e9c3 8900 	strd	r8, r9, [r3]
 80161f8:	68e3      	ldr	r3, [r4, #12]
 80161fa:	3301      	adds	r3, #1
 80161fc:	60e3      	str	r3, [r4, #12]
 80161fe:	e6be      	b.n	8015f7e <_scanf_float+0x8e>
 8016200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016204:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016208:	4632      	mov	r2, r6
 801620a:	4638      	mov	r0, r7
 801620c:	4798      	blx	r3
 801620e:	6923      	ldr	r3, [r4, #16]
 8016210:	3b01      	subs	r3, #1
 8016212:	6123      	str	r3, [r4, #16]
 8016214:	e7a6      	b.n	8016164 <_scanf_float+0x274>
 8016216:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801621a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801621e:	4632      	mov	r2, r6
 8016220:	4638      	mov	r0, r7
 8016222:	4798      	blx	r3
 8016224:	6923      	ldr	r3, [r4, #16]
 8016226:	3b01      	subs	r3, #1
 8016228:	6123      	str	r3, [r4, #16]
 801622a:	4545      	cmp	r5, r8
 801622c:	d8f3      	bhi.n	8016216 <_scanf_float+0x326>
 801622e:	e6a5      	b.n	8015f7c <_scanf_float+0x8c>
 8016230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016234:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016238:	4632      	mov	r2, r6
 801623a:	4638      	mov	r0, r7
 801623c:	4798      	blx	r3
 801623e:	6923      	ldr	r3, [r4, #16]
 8016240:	3b01      	subs	r3, #1
 8016242:	6123      	str	r3, [r4, #16]
 8016244:	4545      	cmp	r5, r8
 8016246:	d8f3      	bhi.n	8016230 <_scanf_float+0x340>
 8016248:	e698      	b.n	8015f7c <_scanf_float+0x8c>
 801624a:	9b03      	ldr	r3, [sp, #12]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d0bf      	beq.n	80161d0 <_scanf_float+0x2e0>
 8016250:	9904      	ldr	r1, [sp, #16]
 8016252:	230a      	movs	r3, #10
 8016254:	4632      	mov	r2, r6
 8016256:	3101      	adds	r1, #1
 8016258:	4638      	mov	r0, r7
 801625a:	f000 fff1 	bl	8017240 <_strtol_r>
 801625e:	9b03      	ldr	r3, [sp, #12]
 8016260:	9d04      	ldr	r5, [sp, #16]
 8016262:	1ac2      	subs	r2, r0, r3
 8016264:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016268:	429d      	cmp	r5, r3
 801626a:	bf28      	it	cs
 801626c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016270:	490f      	ldr	r1, [pc, #60]	; (80162b0 <_scanf_float+0x3c0>)
 8016272:	4628      	mov	r0, r5
 8016274:	f000 f888 	bl	8016388 <siprintf>
 8016278:	e7aa      	b.n	80161d0 <_scanf_float+0x2e0>
 801627a:	f015 0504 	ands.w	r5, r5, #4
 801627e:	d1b8      	bne.n	80161f2 <_scanf_float+0x302>
 8016280:	681f      	ldr	r7, [r3, #0]
 8016282:	ee10 2a10 	vmov	r2, s0
 8016286:	464b      	mov	r3, r9
 8016288:	ee10 0a10 	vmov	r0, s0
 801628c:	4649      	mov	r1, r9
 801628e:	f7ea fc7d 	bl	8000b8c <__aeabi_dcmpun>
 8016292:	b128      	cbz	r0, 80162a0 <_scanf_float+0x3b0>
 8016294:	4628      	mov	r0, r5
 8016296:	f000 f871 	bl	801637c <nanf>
 801629a:	ed87 0a00 	vstr	s0, [r7]
 801629e:	e7ab      	b.n	80161f8 <_scanf_float+0x308>
 80162a0:	4640      	mov	r0, r8
 80162a2:	4649      	mov	r1, r9
 80162a4:	f7ea fcd0 	bl	8000c48 <__aeabi_d2f>
 80162a8:	6038      	str	r0, [r7, #0]
 80162aa:	e7a5      	b.n	80161f8 <_scanf_float+0x308>
 80162ac:	2600      	movs	r6, #0
 80162ae:	e666      	b.n	8015f7e <_scanf_float+0x8e>
 80162b0:	0801cdf8 	.word	0x0801cdf8

080162b4 <iprintf>:
 80162b4:	b40f      	push	{r0, r1, r2, r3}
 80162b6:	4b0a      	ldr	r3, [pc, #40]	; (80162e0 <iprintf+0x2c>)
 80162b8:	b513      	push	{r0, r1, r4, lr}
 80162ba:	681c      	ldr	r4, [r3, #0]
 80162bc:	b124      	cbz	r4, 80162c8 <iprintf+0x14>
 80162be:	69a3      	ldr	r3, [r4, #24]
 80162c0:	b913      	cbnz	r3, 80162c8 <iprintf+0x14>
 80162c2:	4620      	mov	r0, r4
 80162c4:	f001 fe84 	bl	8017fd0 <__sinit>
 80162c8:	ab05      	add	r3, sp, #20
 80162ca:	9a04      	ldr	r2, [sp, #16]
 80162cc:	68a1      	ldr	r1, [r4, #8]
 80162ce:	9301      	str	r3, [sp, #4]
 80162d0:	4620      	mov	r0, r4
 80162d2:	f003 f9ab 	bl	801962c <_vfiprintf_r>
 80162d6:	b002      	add	sp, #8
 80162d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162dc:	b004      	add	sp, #16
 80162de:	4770      	bx	lr
 80162e0:	20000020 	.word	0x20000020

080162e4 <rand>:
 80162e4:	b538      	push	{r3, r4, r5, lr}
 80162e6:	4b13      	ldr	r3, [pc, #76]	; (8016334 <rand+0x50>)
 80162e8:	681c      	ldr	r4, [r3, #0]
 80162ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80162ec:	b97b      	cbnz	r3, 801630e <rand+0x2a>
 80162ee:	2018      	movs	r0, #24
 80162f0:	f7ff f89c 	bl	801542c <malloc>
 80162f4:	4a10      	ldr	r2, [pc, #64]	; (8016338 <rand+0x54>)
 80162f6:	4b11      	ldr	r3, [pc, #68]	; (801633c <rand+0x58>)
 80162f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80162fa:	e9c0 2300 	strd	r2, r3, [r0]
 80162fe:	4b10      	ldr	r3, [pc, #64]	; (8016340 <rand+0x5c>)
 8016300:	6083      	str	r3, [r0, #8]
 8016302:	230b      	movs	r3, #11
 8016304:	8183      	strh	r3, [r0, #12]
 8016306:	2201      	movs	r2, #1
 8016308:	2300      	movs	r3, #0
 801630a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801630e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016310:	480c      	ldr	r0, [pc, #48]	; (8016344 <rand+0x60>)
 8016312:	690a      	ldr	r2, [r1, #16]
 8016314:	694b      	ldr	r3, [r1, #20]
 8016316:	4c0c      	ldr	r4, [pc, #48]	; (8016348 <rand+0x64>)
 8016318:	4350      	muls	r0, r2
 801631a:	fb04 0003 	mla	r0, r4, r3, r0
 801631e:	fba2 2304 	umull	r2, r3, r2, r4
 8016322:	4403      	add	r3, r0
 8016324:	1c54      	adds	r4, r2, #1
 8016326:	f143 0500 	adc.w	r5, r3, #0
 801632a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801632e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016332:	bd38      	pop	{r3, r4, r5, pc}
 8016334:	20000020 	.word	0x20000020
 8016338:	abcd330e 	.word	0xabcd330e
 801633c:	e66d1234 	.word	0xe66d1234
 8016340:	0005deec 	.word	0x0005deec
 8016344:	5851f42d 	.word	0x5851f42d
 8016348:	4c957f2d 	.word	0x4c957f2d

0801634c <realloc>:
 801634c:	4b02      	ldr	r3, [pc, #8]	; (8016358 <realloc+0xc>)
 801634e:	460a      	mov	r2, r1
 8016350:	4601      	mov	r1, r0
 8016352:	6818      	ldr	r0, [r3, #0]
 8016354:	f002 be1d 	b.w	8018f92 <_realloc_r>
 8016358:	20000020 	.word	0x20000020

0801635c <_sbrk_r>:
 801635c:	b538      	push	{r3, r4, r5, lr}
 801635e:	4c06      	ldr	r4, [pc, #24]	; (8016378 <_sbrk_r+0x1c>)
 8016360:	2300      	movs	r3, #0
 8016362:	4605      	mov	r5, r0
 8016364:	4608      	mov	r0, r1
 8016366:	6023      	str	r3, [r4, #0]
 8016368:	f7ed ff5c 	bl	8004224 <_sbrk>
 801636c:	1c43      	adds	r3, r0, #1
 801636e:	d102      	bne.n	8016376 <_sbrk_r+0x1a>
 8016370:	6823      	ldr	r3, [r4, #0]
 8016372:	b103      	cbz	r3, 8016376 <_sbrk_r+0x1a>
 8016374:	602b      	str	r3, [r5, #0]
 8016376:	bd38      	pop	{r3, r4, r5, pc}
 8016378:	2000751c 	.word	0x2000751c

0801637c <nanf>:
 801637c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016384 <nanf+0x8>
 8016380:	4770      	bx	lr
 8016382:	bf00      	nop
 8016384:	7fc00000 	.word	0x7fc00000

08016388 <siprintf>:
 8016388:	b40e      	push	{r1, r2, r3}
 801638a:	b500      	push	{lr}
 801638c:	b09c      	sub	sp, #112	; 0x70
 801638e:	ab1d      	add	r3, sp, #116	; 0x74
 8016390:	9002      	str	r0, [sp, #8]
 8016392:	9006      	str	r0, [sp, #24]
 8016394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016398:	4809      	ldr	r0, [pc, #36]	; (80163c0 <siprintf+0x38>)
 801639a:	9107      	str	r1, [sp, #28]
 801639c:	9104      	str	r1, [sp, #16]
 801639e:	4909      	ldr	r1, [pc, #36]	; (80163c4 <siprintf+0x3c>)
 80163a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80163a4:	9105      	str	r1, [sp, #20]
 80163a6:	6800      	ldr	r0, [r0, #0]
 80163a8:	9301      	str	r3, [sp, #4]
 80163aa:	a902      	add	r1, sp, #8
 80163ac:	f002 fe72 	bl	8019094 <_svfiprintf_r>
 80163b0:	9b02      	ldr	r3, [sp, #8]
 80163b2:	2200      	movs	r2, #0
 80163b4:	701a      	strb	r2, [r3, #0]
 80163b6:	b01c      	add	sp, #112	; 0x70
 80163b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80163bc:	b003      	add	sp, #12
 80163be:	4770      	bx	lr
 80163c0:	20000020 	.word	0x20000020
 80163c4:	ffff0208 	.word	0xffff0208

080163c8 <siscanf>:
 80163c8:	b40e      	push	{r1, r2, r3}
 80163ca:	b530      	push	{r4, r5, lr}
 80163cc:	b09c      	sub	sp, #112	; 0x70
 80163ce:	ac1f      	add	r4, sp, #124	; 0x7c
 80163d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80163d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80163d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80163dc:	9002      	str	r0, [sp, #8]
 80163de:	9006      	str	r0, [sp, #24]
 80163e0:	f7e9 ff20 	bl	8000224 <strlen>
 80163e4:	4b0b      	ldr	r3, [pc, #44]	; (8016414 <siscanf+0x4c>)
 80163e6:	9003      	str	r0, [sp, #12]
 80163e8:	9007      	str	r0, [sp, #28]
 80163ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80163ec:	480a      	ldr	r0, [pc, #40]	; (8016418 <siscanf+0x50>)
 80163ee:	9401      	str	r4, [sp, #4]
 80163f0:	2300      	movs	r3, #0
 80163f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80163f4:	9314      	str	r3, [sp, #80]	; 0x50
 80163f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163fe:	462a      	mov	r2, r5
 8016400:	4623      	mov	r3, r4
 8016402:	a902      	add	r1, sp, #8
 8016404:	6800      	ldr	r0, [r0, #0]
 8016406:	f002 ff97 	bl	8019338 <__ssvfiscanf_r>
 801640a:	b01c      	add	sp, #112	; 0x70
 801640c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016410:	b003      	add	sp, #12
 8016412:	4770      	bx	lr
 8016414:	0801643f 	.word	0x0801643f
 8016418:	20000020 	.word	0x20000020

0801641c <__sread>:
 801641c:	b510      	push	{r4, lr}
 801641e:	460c      	mov	r4, r1
 8016420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016424:	f003 fb70 	bl	8019b08 <_read_r>
 8016428:	2800      	cmp	r0, #0
 801642a:	bfab      	itete	ge
 801642c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801642e:	89a3      	ldrhlt	r3, [r4, #12]
 8016430:	181b      	addge	r3, r3, r0
 8016432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016436:	bfac      	ite	ge
 8016438:	6563      	strge	r3, [r4, #84]	; 0x54
 801643a:	81a3      	strhlt	r3, [r4, #12]
 801643c:	bd10      	pop	{r4, pc}

0801643e <__seofread>:
 801643e:	2000      	movs	r0, #0
 8016440:	4770      	bx	lr

08016442 <__swrite>:
 8016442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016446:	461f      	mov	r7, r3
 8016448:	898b      	ldrh	r3, [r1, #12]
 801644a:	05db      	lsls	r3, r3, #23
 801644c:	4605      	mov	r5, r0
 801644e:	460c      	mov	r4, r1
 8016450:	4616      	mov	r6, r2
 8016452:	d505      	bpl.n	8016460 <__swrite+0x1e>
 8016454:	2302      	movs	r3, #2
 8016456:	2200      	movs	r2, #0
 8016458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801645c:	f002 f978 	bl	8018750 <_lseek_r>
 8016460:	89a3      	ldrh	r3, [r4, #12]
 8016462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801646a:	81a3      	strh	r3, [r4, #12]
 801646c:	4632      	mov	r2, r6
 801646e:	463b      	mov	r3, r7
 8016470:	4628      	mov	r0, r5
 8016472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016476:	f000 bf03 	b.w	8017280 <_write_r>

0801647a <__sseek>:
 801647a:	b510      	push	{r4, lr}
 801647c:	460c      	mov	r4, r1
 801647e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016482:	f002 f965 	bl	8018750 <_lseek_r>
 8016486:	1c43      	adds	r3, r0, #1
 8016488:	89a3      	ldrh	r3, [r4, #12]
 801648a:	bf15      	itete	ne
 801648c:	6560      	strne	r0, [r4, #84]	; 0x54
 801648e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016496:	81a3      	strheq	r3, [r4, #12]
 8016498:	bf18      	it	ne
 801649a:	81a3      	strhne	r3, [r4, #12]
 801649c:	bd10      	pop	{r4, pc}

0801649e <__sclose>:
 801649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164a2:	f000 beff 	b.w	80172a4 <_close_r>

080164a6 <strcpy>:
 80164a6:	4603      	mov	r3, r0
 80164a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80164ac:	f803 2b01 	strb.w	r2, [r3], #1
 80164b0:	2a00      	cmp	r2, #0
 80164b2:	d1f9      	bne.n	80164a8 <strcpy+0x2>
 80164b4:	4770      	bx	lr

080164b6 <strncmp>:
 80164b6:	b510      	push	{r4, lr}
 80164b8:	b16a      	cbz	r2, 80164d6 <strncmp+0x20>
 80164ba:	3901      	subs	r1, #1
 80164bc:	1884      	adds	r4, r0, r2
 80164be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80164c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80164c6:	4293      	cmp	r3, r2
 80164c8:	d103      	bne.n	80164d2 <strncmp+0x1c>
 80164ca:	42a0      	cmp	r0, r4
 80164cc:	d001      	beq.n	80164d2 <strncmp+0x1c>
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d1f5      	bne.n	80164be <strncmp+0x8>
 80164d2:	1a98      	subs	r0, r3, r2
 80164d4:	bd10      	pop	{r4, pc}
 80164d6:	4610      	mov	r0, r2
 80164d8:	e7fc      	b.n	80164d4 <strncmp+0x1e>

080164da <sulp>:
 80164da:	b570      	push	{r4, r5, r6, lr}
 80164dc:	4604      	mov	r4, r0
 80164de:	460d      	mov	r5, r1
 80164e0:	ec45 4b10 	vmov	d0, r4, r5
 80164e4:	4616      	mov	r6, r2
 80164e6:	f002 fc13 	bl	8018d10 <__ulp>
 80164ea:	ec51 0b10 	vmov	r0, r1, d0
 80164ee:	b17e      	cbz	r6, 8016510 <sulp+0x36>
 80164f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80164f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	dd09      	ble.n	8016510 <sulp+0x36>
 80164fc:	051b      	lsls	r3, r3, #20
 80164fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016502:	2400      	movs	r4, #0
 8016504:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016508:	4622      	mov	r2, r4
 801650a:	462b      	mov	r3, r5
 801650c:	f7ea f8a4 	bl	8000658 <__aeabi_dmul>
 8016510:	bd70      	pop	{r4, r5, r6, pc}
 8016512:	0000      	movs	r0, r0
 8016514:	0000      	movs	r0, r0
	...

08016518 <_strtod_l>:
 8016518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651c:	461f      	mov	r7, r3
 801651e:	b0a1      	sub	sp, #132	; 0x84
 8016520:	2300      	movs	r3, #0
 8016522:	4681      	mov	r9, r0
 8016524:	4638      	mov	r0, r7
 8016526:	460e      	mov	r6, r1
 8016528:	9217      	str	r2, [sp, #92]	; 0x5c
 801652a:	931c      	str	r3, [sp, #112]	; 0x70
 801652c:	f002 f900 	bl	8018730 <__localeconv_l>
 8016530:	4680      	mov	r8, r0
 8016532:	6800      	ldr	r0, [r0, #0]
 8016534:	f7e9 fe76 	bl	8000224 <strlen>
 8016538:	f04f 0a00 	mov.w	sl, #0
 801653c:	4604      	mov	r4, r0
 801653e:	f04f 0b00 	mov.w	fp, #0
 8016542:	961b      	str	r6, [sp, #108]	; 0x6c
 8016544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016546:	781a      	ldrb	r2, [r3, #0]
 8016548:	2a0d      	cmp	r2, #13
 801654a:	d832      	bhi.n	80165b2 <_strtod_l+0x9a>
 801654c:	2a09      	cmp	r2, #9
 801654e:	d236      	bcs.n	80165be <_strtod_l+0xa6>
 8016550:	2a00      	cmp	r2, #0
 8016552:	d03e      	beq.n	80165d2 <_strtod_l+0xba>
 8016554:	2300      	movs	r3, #0
 8016556:	930d      	str	r3, [sp, #52]	; 0x34
 8016558:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801655a:	782b      	ldrb	r3, [r5, #0]
 801655c:	2b30      	cmp	r3, #48	; 0x30
 801655e:	f040 80ac 	bne.w	80166ba <_strtod_l+0x1a2>
 8016562:	786b      	ldrb	r3, [r5, #1]
 8016564:	2b58      	cmp	r3, #88	; 0x58
 8016566:	d001      	beq.n	801656c <_strtod_l+0x54>
 8016568:	2b78      	cmp	r3, #120	; 0x78
 801656a:	d167      	bne.n	801663c <_strtod_l+0x124>
 801656c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801656e:	9301      	str	r3, [sp, #4]
 8016570:	ab1c      	add	r3, sp, #112	; 0x70
 8016572:	9300      	str	r3, [sp, #0]
 8016574:	9702      	str	r7, [sp, #8]
 8016576:	ab1d      	add	r3, sp, #116	; 0x74
 8016578:	4a88      	ldr	r2, [pc, #544]	; (801679c <_strtod_l+0x284>)
 801657a:	a91b      	add	r1, sp, #108	; 0x6c
 801657c:	4648      	mov	r0, r9
 801657e:	f001 fe00 	bl	8018182 <__gethex>
 8016582:	f010 0407 	ands.w	r4, r0, #7
 8016586:	4606      	mov	r6, r0
 8016588:	d005      	beq.n	8016596 <_strtod_l+0x7e>
 801658a:	2c06      	cmp	r4, #6
 801658c:	d12b      	bne.n	80165e6 <_strtod_l+0xce>
 801658e:	3501      	adds	r5, #1
 8016590:	2300      	movs	r3, #0
 8016592:	951b      	str	r5, [sp, #108]	; 0x6c
 8016594:	930d      	str	r3, [sp, #52]	; 0x34
 8016596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016598:	2b00      	cmp	r3, #0
 801659a:	f040 859a 	bne.w	80170d2 <_strtod_l+0xbba>
 801659e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165a0:	b1e3      	cbz	r3, 80165dc <_strtod_l+0xc4>
 80165a2:	4652      	mov	r2, sl
 80165a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80165a8:	ec43 2b10 	vmov	d0, r2, r3
 80165ac:	b021      	add	sp, #132	; 0x84
 80165ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b2:	2a2b      	cmp	r2, #43	; 0x2b
 80165b4:	d015      	beq.n	80165e2 <_strtod_l+0xca>
 80165b6:	2a2d      	cmp	r2, #45	; 0x2d
 80165b8:	d004      	beq.n	80165c4 <_strtod_l+0xac>
 80165ba:	2a20      	cmp	r2, #32
 80165bc:	d1ca      	bne.n	8016554 <_strtod_l+0x3c>
 80165be:	3301      	adds	r3, #1
 80165c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80165c2:	e7bf      	b.n	8016544 <_strtod_l+0x2c>
 80165c4:	2201      	movs	r2, #1
 80165c6:	920d      	str	r2, [sp, #52]	; 0x34
 80165c8:	1c5a      	adds	r2, r3, #1
 80165ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80165cc:	785b      	ldrb	r3, [r3, #1]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d1c2      	bne.n	8016558 <_strtod_l+0x40>
 80165d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80165d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	f040 8579 	bne.w	80170ce <_strtod_l+0xbb6>
 80165dc:	4652      	mov	r2, sl
 80165de:	465b      	mov	r3, fp
 80165e0:	e7e2      	b.n	80165a8 <_strtod_l+0x90>
 80165e2:	2200      	movs	r2, #0
 80165e4:	e7ef      	b.n	80165c6 <_strtod_l+0xae>
 80165e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80165e8:	b13a      	cbz	r2, 80165fa <_strtod_l+0xe2>
 80165ea:	2135      	movs	r1, #53	; 0x35
 80165ec:	a81e      	add	r0, sp, #120	; 0x78
 80165ee:	f002 fc87 	bl	8018f00 <__copybits>
 80165f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165f4:	4648      	mov	r0, r9
 80165f6:	f002 f8f3 	bl	80187e0 <_Bfree>
 80165fa:	3c01      	subs	r4, #1
 80165fc:	2c04      	cmp	r4, #4
 80165fe:	d806      	bhi.n	801660e <_strtod_l+0xf6>
 8016600:	e8df f004 	tbb	[pc, r4]
 8016604:	1714030a 	.word	0x1714030a
 8016608:	0a          	.byte	0x0a
 8016609:	00          	.byte	0x00
 801660a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801660e:	0730      	lsls	r0, r6, #28
 8016610:	d5c1      	bpl.n	8016596 <_strtod_l+0x7e>
 8016612:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016616:	e7be      	b.n	8016596 <_strtod_l+0x7e>
 8016618:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801661c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801661e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016622:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016626:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801662a:	e7f0      	b.n	801660e <_strtod_l+0xf6>
 801662c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80167a0 <_strtod_l+0x288>
 8016630:	e7ed      	b.n	801660e <_strtod_l+0xf6>
 8016632:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016636:	f04f 3aff 	mov.w	sl, #4294967295
 801663a:	e7e8      	b.n	801660e <_strtod_l+0xf6>
 801663c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801663e:	1c5a      	adds	r2, r3, #1
 8016640:	921b      	str	r2, [sp, #108]	; 0x6c
 8016642:	785b      	ldrb	r3, [r3, #1]
 8016644:	2b30      	cmp	r3, #48	; 0x30
 8016646:	d0f9      	beq.n	801663c <_strtod_l+0x124>
 8016648:	2b00      	cmp	r3, #0
 801664a:	d0a4      	beq.n	8016596 <_strtod_l+0x7e>
 801664c:	2301      	movs	r3, #1
 801664e:	2500      	movs	r5, #0
 8016650:	9306      	str	r3, [sp, #24]
 8016652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016654:	9308      	str	r3, [sp, #32]
 8016656:	9507      	str	r5, [sp, #28]
 8016658:	9505      	str	r5, [sp, #20]
 801665a:	220a      	movs	r2, #10
 801665c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801665e:	7807      	ldrb	r7, [r0, #0]
 8016660:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016664:	b2d9      	uxtb	r1, r3
 8016666:	2909      	cmp	r1, #9
 8016668:	d929      	bls.n	80166be <_strtod_l+0x1a6>
 801666a:	4622      	mov	r2, r4
 801666c:	f8d8 1000 	ldr.w	r1, [r8]
 8016670:	f7ff ff21 	bl	80164b6 <strncmp>
 8016674:	2800      	cmp	r0, #0
 8016676:	d031      	beq.n	80166dc <_strtod_l+0x1c4>
 8016678:	2000      	movs	r0, #0
 801667a:	9c05      	ldr	r4, [sp, #20]
 801667c:	9004      	str	r0, [sp, #16]
 801667e:	463b      	mov	r3, r7
 8016680:	4602      	mov	r2, r0
 8016682:	2b65      	cmp	r3, #101	; 0x65
 8016684:	d001      	beq.n	801668a <_strtod_l+0x172>
 8016686:	2b45      	cmp	r3, #69	; 0x45
 8016688:	d114      	bne.n	80166b4 <_strtod_l+0x19c>
 801668a:	b924      	cbnz	r4, 8016696 <_strtod_l+0x17e>
 801668c:	b910      	cbnz	r0, 8016694 <_strtod_l+0x17c>
 801668e:	9b06      	ldr	r3, [sp, #24]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d09e      	beq.n	80165d2 <_strtod_l+0xba>
 8016694:	2400      	movs	r4, #0
 8016696:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016698:	1c73      	adds	r3, r6, #1
 801669a:	931b      	str	r3, [sp, #108]	; 0x6c
 801669c:	7873      	ldrb	r3, [r6, #1]
 801669e:	2b2b      	cmp	r3, #43	; 0x2b
 80166a0:	d078      	beq.n	8016794 <_strtod_l+0x27c>
 80166a2:	2b2d      	cmp	r3, #45	; 0x2d
 80166a4:	d070      	beq.n	8016788 <_strtod_l+0x270>
 80166a6:	f04f 0c00 	mov.w	ip, #0
 80166aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80166ae:	2f09      	cmp	r7, #9
 80166b0:	d97c      	bls.n	80167ac <_strtod_l+0x294>
 80166b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80166b4:	f04f 0e00 	mov.w	lr, #0
 80166b8:	e09a      	b.n	80167f0 <_strtod_l+0x2d8>
 80166ba:	2300      	movs	r3, #0
 80166bc:	e7c7      	b.n	801664e <_strtod_l+0x136>
 80166be:	9905      	ldr	r1, [sp, #20]
 80166c0:	2908      	cmp	r1, #8
 80166c2:	bfdd      	ittte	le
 80166c4:	9907      	ldrle	r1, [sp, #28]
 80166c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80166ca:	9307      	strle	r3, [sp, #28]
 80166cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80166d0:	9b05      	ldr	r3, [sp, #20]
 80166d2:	3001      	adds	r0, #1
 80166d4:	3301      	adds	r3, #1
 80166d6:	9305      	str	r3, [sp, #20]
 80166d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80166da:	e7bf      	b.n	801665c <_strtod_l+0x144>
 80166dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166de:	191a      	adds	r2, r3, r4
 80166e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80166e2:	9a05      	ldr	r2, [sp, #20]
 80166e4:	5d1b      	ldrb	r3, [r3, r4]
 80166e6:	2a00      	cmp	r2, #0
 80166e8:	d037      	beq.n	801675a <_strtod_l+0x242>
 80166ea:	9c05      	ldr	r4, [sp, #20]
 80166ec:	4602      	mov	r2, r0
 80166ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80166f2:	2909      	cmp	r1, #9
 80166f4:	d913      	bls.n	801671e <_strtod_l+0x206>
 80166f6:	2101      	movs	r1, #1
 80166f8:	9104      	str	r1, [sp, #16]
 80166fa:	e7c2      	b.n	8016682 <_strtod_l+0x16a>
 80166fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166fe:	1c5a      	adds	r2, r3, #1
 8016700:	921b      	str	r2, [sp, #108]	; 0x6c
 8016702:	785b      	ldrb	r3, [r3, #1]
 8016704:	3001      	adds	r0, #1
 8016706:	2b30      	cmp	r3, #48	; 0x30
 8016708:	d0f8      	beq.n	80166fc <_strtod_l+0x1e4>
 801670a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801670e:	2a08      	cmp	r2, #8
 8016710:	f200 84e4 	bhi.w	80170dc <_strtod_l+0xbc4>
 8016714:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016716:	9208      	str	r2, [sp, #32]
 8016718:	4602      	mov	r2, r0
 801671a:	2000      	movs	r0, #0
 801671c:	4604      	mov	r4, r0
 801671e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016722:	f100 0101 	add.w	r1, r0, #1
 8016726:	d012      	beq.n	801674e <_strtod_l+0x236>
 8016728:	440a      	add	r2, r1
 801672a:	eb00 0c04 	add.w	ip, r0, r4
 801672e:	4621      	mov	r1, r4
 8016730:	270a      	movs	r7, #10
 8016732:	458c      	cmp	ip, r1
 8016734:	d113      	bne.n	801675e <_strtod_l+0x246>
 8016736:	1821      	adds	r1, r4, r0
 8016738:	2908      	cmp	r1, #8
 801673a:	f104 0401 	add.w	r4, r4, #1
 801673e:	4404      	add	r4, r0
 8016740:	dc19      	bgt.n	8016776 <_strtod_l+0x25e>
 8016742:	9b07      	ldr	r3, [sp, #28]
 8016744:	210a      	movs	r1, #10
 8016746:	fb01 e303 	mla	r3, r1, r3, lr
 801674a:	9307      	str	r3, [sp, #28]
 801674c:	2100      	movs	r1, #0
 801674e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016750:	1c58      	adds	r0, r3, #1
 8016752:	901b      	str	r0, [sp, #108]	; 0x6c
 8016754:	785b      	ldrb	r3, [r3, #1]
 8016756:	4608      	mov	r0, r1
 8016758:	e7c9      	b.n	80166ee <_strtod_l+0x1d6>
 801675a:	9805      	ldr	r0, [sp, #20]
 801675c:	e7d3      	b.n	8016706 <_strtod_l+0x1ee>
 801675e:	2908      	cmp	r1, #8
 8016760:	f101 0101 	add.w	r1, r1, #1
 8016764:	dc03      	bgt.n	801676e <_strtod_l+0x256>
 8016766:	9b07      	ldr	r3, [sp, #28]
 8016768:	437b      	muls	r3, r7
 801676a:	9307      	str	r3, [sp, #28]
 801676c:	e7e1      	b.n	8016732 <_strtod_l+0x21a>
 801676e:	2910      	cmp	r1, #16
 8016770:	bfd8      	it	le
 8016772:	437d      	mulle	r5, r7
 8016774:	e7dd      	b.n	8016732 <_strtod_l+0x21a>
 8016776:	2c10      	cmp	r4, #16
 8016778:	bfdc      	itt	le
 801677a:	210a      	movle	r1, #10
 801677c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016780:	e7e4      	b.n	801674c <_strtod_l+0x234>
 8016782:	2301      	movs	r3, #1
 8016784:	9304      	str	r3, [sp, #16]
 8016786:	e781      	b.n	801668c <_strtod_l+0x174>
 8016788:	f04f 0c01 	mov.w	ip, #1
 801678c:	1cb3      	adds	r3, r6, #2
 801678e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016790:	78b3      	ldrb	r3, [r6, #2]
 8016792:	e78a      	b.n	80166aa <_strtod_l+0x192>
 8016794:	f04f 0c00 	mov.w	ip, #0
 8016798:	e7f8      	b.n	801678c <_strtod_l+0x274>
 801679a:	bf00      	nop
 801679c:	0801ce00 	.word	0x0801ce00
 80167a0:	7ff00000 	.word	0x7ff00000
 80167a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167a6:	1c5f      	adds	r7, r3, #1
 80167a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80167aa:	785b      	ldrb	r3, [r3, #1]
 80167ac:	2b30      	cmp	r3, #48	; 0x30
 80167ae:	d0f9      	beq.n	80167a4 <_strtod_l+0x28c>
 80167b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80167b4:	2f08      	cmp	r7, #8
 80167b6:	f63f af7d 	bhi.w	80166b4 <_strtod_l+0x19c>
 80167ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80167be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167c0:	930a      	str	r3, [sp, #40]	; 0x28
 80167c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167c4:	1c5f      	adds	r7, r3, #1
 80167c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80167c8:	785b      	ldrb	r3, [r3, #1]
 80167ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80167ce:	f1b8 0f09 	cmp.w	r8, #9
 80167d2:	d937      	bls.n	8016844 <_strtod_l+0x32c>
 80167d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80167d6:	1a7f      	subs	r7, r7, r1
 80167d8:	2f08      	cmp	r7, #8
 80167da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80167de:	dc37      	bgt.n	8016850 <_strtod_l+0x338>
 80167e0:	45be      	cmp	lr, r7
 80167e2:	bfa8      	it	ge
 80167e4:	46be      	movge	lr, r7
 80167e6:	f1bc 0f00 	cmp.w	ip, #0
 80167ea:	d001      	beq.n	80167f0 <_strtod_l+0x2d8>
 80167ec:	f1ce 0e00 	rsb	lr, lr, #0
 80167f0:	2c00      	cmp	r4, #0
 80167f2:	d151      	bne.n	8016898 <_strtod_l+0x380>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	f47f aece 	bne.w	8016596 <_strtod_l+0x7e>
 80167fa:	9a06      	ldr	r2, [sp, #24]
 80167fc:	2a00      	cmp	r2, #0
 80167fe:	f47f aeca 	bne.w	8016596 <_strtod_l+0x7e>
 8016802:	9a04      	ldr	r2, [sp, #16]
 8016804:	2a00      	cmp	r2, #0
 8016806:	f47f aee4 	bne.w	80165d2 <_strtod_l+0xba>
 801680a:	2b4e      	cmp	r3, #78	; 0x4e
 801680c:	d027      	beq.n	801685e <_strtod_l+0x346>
 801680e:	dc21      	bgt.n	8016854 <_strtod_l+0x33c>
 8016810:	2b49      	cmp	r3, #73	; 0x49
 8016812:	f47f aede 	bne.w	80165d2 <_strtod_l+0xba>
 8016816:	49a0      	ldr	r1, [pc, #640]	; (8016a98 <_strtod_l+0x580>)
 8016818:	a81b      	add	r0, sp, #108	; 0x6c
 801681a:	f001 fee5 	bl	80185e8 <__match>
 801681e:	2800      	cmp	r0, #0
 8016820:	f43f aed7 	beq.w	80165d2 <_strtod_l+0xba>
 8016824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016826:	499d      	ldr	r1, [pc, #628]	; (8016a9c <_strtod_l+0x584>)
 8016828:	3b01      	subs	r3, #1
 801682a:	a81b      	add	r0, sp, #108	; 0x6c
 801682c:	931b      	str	r3, [sp, #108]	; 0x6c
 801682e:	f001 fedb 	bl	80185e8 <__match>
 8016832:	b910      	cbnz	r0, 801683a <_strtod_l+0x322>
 8016834:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016836:	3301      	adds	r3, #1
 8016838:	931b      	str	r3, [sp, #108]	; 0x6c
 801683a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016ab0 <_strtod_l+0x598>
 801683e:	f04f 0a00 	mov.w	sl, #0
 8016842:	e6a8      	b.n	8016596 <_strtod_l+0x7e>
 8016844:	210a      	movs	r1, #10
 8016846:	fb01 3e0e 	mla	lr, r1, lr, r3
 801684a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801684e:	e7b8      	b.n	80167c2 <_strtod_l+0x2aa>
 8016850:	46be      	mov	lr, r7
 8016852:	e7c8      	b.n	80167e6 <_strtod_l+0x2ce>
 8016854:	2b69      	cmp	r3, #105	; 0x69
 8016856:	d0de      	beq.n	8016816 <_strtod_l+0x2fe>
 8016858:	2b6e      	cmp	r3, #110	; 0x6e
 801685a:	f47f aeba 	bne.w	80165d2 <_strtod_l+0xba>
 801685e:	4990      	ldr	r1, [pc, #576]	; (8016aa0 <_strtod_l+0x588>)
 8016860:	a81b      	add	r0, sp, #108	; 0x6c
 8016862:	f001 fec1 	bl	80185e8 <__match>
 8016866:	2800      	cmp	r0, #0
 8016868:	f43f aeb3 	beq.w	80165d2 <_strtod_l+0xba>
 801686c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2b28      	cmp	r3, #40	; 0x28
 8016872:	d10e      	bne.n	8016892 <_strtod_l+0x37a>
 8016874:	aa1e      	add	r2, sp, #120	; 0x78
 8016876:	498b      	ldr	r1, [pc, #556]	; (8016aa4 <_strtod_l+0x58c>)
 8016878:	a81b      	add	r0, sp, #108	; 0x6c
 801687a:	f001 fec9 	bl	8018610 <__hexnan>
 801687e:	2805      	cmp	r0, #5
 8016880:	d107      	bne.n	8016892 <_strtod_l+0x37a>
 8016882:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016884:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016888:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801688c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016890:	e681      	b.n	8016596 <_strtod_l+0x7e>
 8016892:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016ab8 <_strtod_l+0x5a0>
 8016896:	e7d2      	b.n	801683e <_strtod_l+0x326>
 8016898:	ebae 0302 	sub.w	r3, lr, r2
 801689c:	9306      	str	r3, [sp, #24]
 801689e:	9b05      	ldr	r3, [sp, #20]
 80168a0:	9807      	ldr	r0, [sp, #28]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	bf08      	it	eq
 80168a6:	4623      	moveq	r3, r4
 80168a8:	2c10      	cmp	r4, #16
 80168aa:	9305      	str	r3, [sp, #20]
 80168ac:	46a0      	mov	r8, r4
 80168ae:	bfa8      	it	ge
 80168b0:	f04f 0810 	movge.w	r8, #16
 80168b4:	f7e9 fe56 	bl	8000564 <__aeabi_ui2d>
 80168b8:	2c09      	cmp	r4, #9
 80168ba:	4682      	mov	sl, r0
 80168bc:	468b      	mov	fp, r1
 80168be:	dc13      	bgt.n	80168e8 <_strtod_l+0x3d0>
 80168c0:	9b06      	ldr	r3, [sp, #24]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	f43f ae67 	beq.w	8016596 <_strtod_l+0x7e>
 80168c8:	9b06      	ldr	r3, [sp, #24]
 80168ca:	dd7a      	ble.n	80169c2 <_strtod_l+0x4aa>
 80168cc:	2b16      	cmp	r3, #22
 80168ce:	dc61      	bgt.n	8016994 <_strtod_l+0x47c>
 80168d0:	4a75      	ldr	r2, [pc, #468]	; (8016aa8 <_strtod_l+0x590>)
 80168d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80168d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80168da:	4652      	mov	r2, sl
 80168dc:	465b      	mov	r3, fp
 80168de:	f7e9 febb 	bl	8000658 <__aeabi_dmul>
 80168e2:	4682      	mov	sl, r0
 80168e4:	468b      	mov	fp, r1
 80168e6:	e656      	b.n	8016596 <_strtod_l+0x7e>
 80168e8:	4b6f      	ldr	r3, [pc, #444]	; (8016aa8 <_strtod_l+0x590>)
 80168ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80168ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80168f2:	f7e9 feb1 	bl	8000658 <__aeabi_dmul>
 80168f6:	4606      	mov	r6, r0
 80168f8:	4628      	mov	r0, r5
 80168fa:	460f      	mov	r7, r1
 80168fc:	f7e9 fe32 	bl	8000564 <__aeabi_ui2d>
 8016900:	4602      	mov	r2, r0
 8016902:	460b      	mov	r3, r1
 8016904:	4630      	mov	r0, r6
 8016906:	4639      	mov	r1, r7
 8016908:	f7e9 fcf0 	bl	80002ec <__adddf3>
 801690c:	2c0f      	cmp	r4, #15
 801690e:	4682      	mov	sl, r0
 8016910:	468b      	mov	fp, r1
 8016912:	ddd5      	ble.n	80168c0 <_strtod_l+0x3a8>
 8016914:	9b06      	ldr	r3, [sp, #24]
 8016916:	eba4 0808 	sub.w	r8, r4, r8
 801691a:	4498      	add	r8, r3
 801691c:	f1b8 0f00 	cmp.w	r8, #0
 8016920:	f340 8096 	ble.w	8016a50 <_strtod_l+0x538>
 8016924:	f018 030f 	ands.w	r3, r8, #15
 8016928:	d00a      	beq.n	8016940 <_strtod_l+0x428>
 801692a:	495f      	ldr	r1, [pc, #380]	; (8016aa8 <_strtod_l+0x590>)
 801692c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016930:	4652      	mov	r2, sl
 8016932:	465b      	mov	r3, fp
 8016934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016938:	f7e9 fe8e 	bl	8000658 <__aeabi_dmul>
 801693c:	4682      	mov	sl, r0
 801693e:	468b      	mov	fp, r1
 8016940:	f038 080f 	bics.w	r8, r8, #15
 8016944:	d073      	beq.n	8016a2e <_strtod_l+0x516>
 8016946:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801694a:	dd47      	ble.n	80169dc <_strtod_l+0x4c4>
 801694c:	2400      	movs	r4, #0
 801694e:	46a0      	mov	r8, r4
 8016950:	9407      	str	r4, [sp, #28]
 8016952:	9405      	str	r4, [sp, #20]
 8016954:	2322      	movs	r3, #34	; 0x22
 8016956:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016ab0 <_strtod_l+0x598>
 801695a:	f8c9 3000 	str.w	r3, [r9]
 801695e:	f04f 0a00 	mov.w	sl, #0
 8016962:	9b07      	ldr	r3, [sp, #28]
 8016964:	2b00      	cmp	r3, #0
 8016966:	f43f ae16 	beq.w	8016596 <_strtod_l+0x7e>
 801696a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801696c:	4648      	mov	r0, r9
 801696e:	f001 ff37 	bl	80187e0 <_Bfree>
 8016972:	9905      	ldr	r1, [sp, #20]
 8016974:	4648      	mov	r0, r9
 8016976:	f001 ff33 	bl	80187e0 <_Bfree>
 801697a:	4641      	mov	r1, r8
 801697c:	4648      	mov	r0, r9
 801697e:	f001 ff2f 	bl	80187e0 <_Bfree>
 8016982:	9907      	ldr	r1, [sp, #28]
 8016984:	4648      	mov	r0, r9
 8016986:	f001 ff2b 	bl	80187e0 <_Bfree>
 801698a:	4621      	mov	r1, r4
 801698c:	4648      	mov	r0, r9
 801698e:	f001 ff27 	bl	80187e0 <_Bfree>
 8016992:	e600      	b.n	8016596 <_strtod_l+0x7e>
 8016994:	9a06      	ldr	r2, [sp, #24]
 8016996:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801699a:	4293      	cmp	r3, r2
 801699c:	dbba      	blt.n	8016914 <_strtod_l+0x3fc>
 801699e:	4d42      	ldr	r5, [pc, #264]	; (8016aa8 <_strtod_l+0x590>)
 80169a0:	f1c4 040f 	rsb	r4, r4, #15
 80169a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80169a8:	4652      	mov	r2, sl
 80169aa:	465b      	mov	r3, fp
 80169ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169b0:	f7e9 fe52 	bl	8000658 <__aeabi_dmul>
 80169b4:	9b06      	ldr	r3, [sp, #24]
 80169b6:	1b1c      	subs	r4, r3, r4
 80169b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80169bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80169c0:	e78d      	b.n	80168de <_strtod_l+0x3c6>
 80169c2:	f113 0f16 	cmn.w	r3, #22
 80169c6:	dba5      	blt.n	8016914 <_strtod_l+0x3fc>
 80169c8:	4a37      	ldr	r2, [pc, #220]	; (8016aa8 <_strtod_l+0x590>)
 80169ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80169ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80169d2:	4650      	mov	r0, sl
 80169d4:	4659      	mov	r1, fp
 80169d6:	f7e9 ff69 	bl	80008ac <__aeabi_ddiv>
 80169da:	e782      	b.n	80168e2 <_strtod_l+0x3ca>
 80169dc:	2300      	movs	r3, #0
 80169de:	4e33      	ldr	r6, [pc, #204]	; (8016aac <_strtod_l+0x594>)
 80169e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80169e4:	4650      	mov	r0, sl
 80169e6:	4659      	mov	r1, fp
 80169e8:	461d      	mov	r5, r3
 80169ea:	f1b8 0f01 	cmp.w	r8, #1
 80169ee:	dc21      	bgt.n	8016a34 <_strtod_l+0x51c>
 80169f0:	b10b      	cbz	r3, 80169f6 <_strtod_l+0x4de>
 80169f2:	4682      	mov	sl, r0
 80169f4:	468b      	mov	fp, r1
 80169f6:	4b2d      	ldr	r3, [pc, #180]	; (8016aac <_strtod_l+0x594>)
 80169f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80169fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016a00:	4652      	mov	r2, sl
 8016a02:	465b      	mov	r3, fp
 8016a04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016a08:	f7e9 fe26 	bl	8000658 <__aeabi_dmul>
 8016a0c:	4b28      	ldr	r3, [pc, #160]	; (8016ab0 <_strtod_l+0x598>)
 8016a0e:	460a      	mov	r2, r1
 8016a10:	400b      	ands	r3, r1
 8016a12:	4928      	ldr	r1, [pc, #160]	; (8016ab4 <_strtod_l+0x59c>)
 8016a14:	428b      	cmp	r3, r1
 8016a16:	4682      	mov	sl, r0
 8016a18:	d898      	bhi.n	801694c <_strtod_l+0x434>
 8016a1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016a1e:	428b      	cmp	r3, r1
 8016a20:	bf86      	itte	hi
 8016a22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016abc <_strtod_l+0x5a4>
 8016a26:	f04f 3aff 	movhi.w	sl, #4294967295
 8016a2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016a2e:	2300      	movs	r3, #0
 8016a30:	9304      	str	r3, [sp, #16]
 8016a32:	e077      	b.n	8016b24 <_strtod_l+0x60c>
 8016a34:	f018 0f01 	tst.w	r8, #1
 8016a38:	d006      	beq.n	8016a48 <_strtod_l+0x530>
 8016a3a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a42:	f7e9 fe09 	bl	8000658 <__aeabi_dmul>
 8016a46:	2301      	movs	r3, #1
 8016a48:	3501      	adds	r5, #1
 8016a4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016a4e:	e7cc      	b.n	80169ea <_strtod_l+0x4d2>
 8016a50:	d0ed      	beq.n	8016a2e <_strtod_l+0x516>
 8016a52:	f1c8 0800 	rsb	r8, r8, #0
 8016a56:	f018 020f 	ands.w	r2, r8, #15
 8016a5a:	d00a      	beq.n	8016a72 <_strtod_l+0x55a>
 8016a5c:	4b12      	ldr	r3, [pc, #72]	; (8016aa8 <_strtod_l+0x590>)
 8016a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016a62:	4650      	mov	r0, sl
 8016a64:	4659      	mov	r1, fp
 8016a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6a:	f7e9 ff1f 	bl	80008ac <__aeabi_ddiv>
 8016a6e:	4682      	mov	sl, r0
 8016a70:	468b      	mov	fp, r1
 8016a72:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016a76:	d0da      	beq.n	8016a2e <_strtod_l+0x516>
 8016a78:	f1b8 0f1f 	cmp.w	r8, #31
 8016a7c:	dd20      	ble.n	8016ac0 <_strtod_l+0x5a8>
 8016a7e:	2400      	movs	r4, #0
 8016a80:	46a0      	mov	r8, r4
 8016a82:	9407      	str	r4, [sp, #28]
 8016a84:	9405      	str	r4, [sp, #20]
 8016a86:	2322      	movs	r3, #34	; 0x22
 8016a88:	f04f 0a00 	mov.w	sl, #0
 8016a8c:	f04f 0b00 	mov.w	fp, #0
 8016a90:	f8c9 3000 	str.w	r3, [r9]
 8016a94:	e765      	b.n	8016962 <_strtod_l+0x44a>
 8016a96:	bf00      	nop
 8016a98:	0801cdcb 	.word	0x0801cdcb
 8016a9c:	0801cf54 	.word	0x0801cf54
 8016aa0:	0801cdd3 	.word	0x0801cdd3
 8016aa4:	0801ce14 	.word	0x0801ce14
 8016aa8:	0801cfe8 	.word	0x0801cfe8
 8016aac:	0801cfc0 	.word	0x0801cfc0
 8016ab0:	7ff00000 	.word	0x7ff00000
 8016ab4:	7ca00000 	.word	0x7ca00000
 8016ab8:	fff80000 	.word	0xfff80000
 8016abc:	7fefffff 	.word	0x7fefffff
 8016ac0:	f018 0310 	ands.w	r3, r8, #16
 8016ac4:	bf18      	it	ne
 8016ac6:	236a      	movne	r3, #106	; 0x6a
 8016ac8:	4da0      	ldr	r5, [pc, #640]	; (8016d4c <_strtod_l+0x834>)
 8016aca:	9304      	str	r3, [sp, #16]
 8016acc:	4650      	mov	r0, sl
 8016ace:	4659      	mov	r1, fp
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	f1b8 0f00 	cmp.w	r8, #0
 8016ad6:	f300 810a 	bgt.w	8016cee <_strtod_l+0x7d6>
 8016ada:	b10b      	cbz	r3, 8016ae0 <_strtod_l+0x5c8>
 8016adc:	4682      	mov	sl, r0
 8016ade:	468b      	mov	fp, r1
 8016ae0:	9b04      	ldr	r3, [sp, #16]
 8016ae2:	b1bb      	cbz	r3, 8016b14 <_strtod_l+0x5fc>
 8016ae4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016ae8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	4659      	mov	r1, fp
 8016af0:	dd10      	ble.n	8016b14 <_strtod_l+0x5fc>
 8016af2:	2b1f      	cmp	r3, #31
 8016af4:	f340 8107 	ble.w	8016d06 <_strtod_l+0x7ee>
 8016af8:	2b34      	cmp	r3, #52	; 0x34
 8016afa:	bfde      	ittt	le
 8016afc:	3b20      	suble	r3, #32
 8016afe:	f04f 32ff 	movle.w	r2, #4294967295
 8016b02:	fa02 f303 	lslle.w	r3, r2, r3
 8016b06:	f04f 0a00 	mov.w	sl, #0
 8016b0a:	bfcc      	ite	gt
 8016b0c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016b10:	ea03 0b01 	andle.w	fp, r3, r1
 8016b14:	2200      	movs	r2, #0
 8016b16:	2300      	movs	r3, #0
 8016b18:	4650      	mov	r0, sl
 8016b1a:	4659      	mov	r1, fp
 8016b1c:	f7ea f804 	bl	8000b28 <__aeabi_dcmpeq>
 8016b20:	2800      	cmp	r0, #0
 8016b22:	d1ac      	bne.n	8016a7e <_strtod_l+0x566>
 8016b24:	9b07      	ldr	r3, [sp, #28]
 8016b26:	9300      	str	r3, [sp, #0]
 8016b28:	9a05      	ldr	r2, [sp, #20]
 8016b2a:	9908      	ldr	r1, [sp, #32]
 8016b2c:	4623      	mov	r3, r4
 8016b2e:	4648      	mov	r0, r9
 8016b30:	f001 fea8 	bl	8018884 <__s2b>
 8016b34:	9007      	str	r0, [sp, #28]
 8016b36:	2800      	cmp	r0, #0
 8016b38:	f43f af08 	beq.w	801694c <_strtod_l+0x434>
 8016b3c:	9a06      	ldr	r2, [sp, #24]
 8016b3e:	9b06      	ldr	r3, [sp, #24]
 8016b40:	2a00      	cmp	r2, #0
 8016b42:	f1c3 0300 	rsb	r3, r3, #0
 8016b46:	bfa8      	it	ge
 8016b48:	2300      	movge	r3, #0
 8016b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8016b4c:	2400      	movs	r4, #0
 8016b4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016b52:	9316      	str	r3, [sp, #88]	; 0x58
 8016b54:	46a0      	mov	r8, r4
 8016b56:	9b07      	ldr	r3, [sp, #28]
 8016b58:	4648      	mov	r0, r9
 8016b5a:	6859      	ldr	r1, [r3, #4]
 8016b5c:	f001 fe0c 	bl	8018778 <_Balloc>
 8016b60:	9005      	str	r0, [sp, #20]
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f43f aef6 	beq.w	8016954 <_strtod_l+0x43c>
 8016b68:	9b07      	ldr	r3, [sp, #28]
 8016b6a:	691a      	ldr	r2, [r3, #16]
 8016b6c:	3202      	adds	r2, #2
 8016b6e:	f103 010c 	add.w	r1, r3, #12
 8016b72:	0092      	lsls	r2, r2, #2
 8016b74:	300c      	adds	r0, #12
 8016b76:	f7fe fc8a 	bl	801548e <memcpy>
 8016b7a:	aa1e      	add	r2, sp, #120	; 0x78
 8016b7c:	a91d      	add	r1, sp, #116	; 0x74
 8016b7e:	ec4b ab10 	vmov	d0, sl, fp
 8016b82:	4648      	mov	r0, r9
 8016b84:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016b88:	f002 f938 	bl	8018dfc <__d2b>
 8016b8c:	901c      	str	r0, [sp, #112]	; 0x70
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	f43f aee0 	beq.w	8016954 <_strtod_l+0x43c>
 8016b94:	2101      	movs	r1, #1
 8016b96:	4648      	mov	r0, r9
 8016b98:	f001 ff00 	bl	801899c <__i2b>
 8016b9c:	4680      	mov	r8, r0
 8016b9e:	2800      	cmp	r0, #0
 8016ba0:	f43f aed8 	beq.w	8016954 <_strtod_l+0x43c>
 8016ba4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016ba6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016ba8:	2e00      	cmp	r6, #0
 8016baa:	bfab      	itete	ge
 8016bac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016bae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016bb0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016bb2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016bb4:	bfac      	ite	ge
 8016bb6:	18f7      	addge	r7, r6, r3
 8016bb8:	1b9d      	sublt	r5, r3, r6
 8016bba:	9b04      	ldr	r3, [sp, #16]
 8016bbc:	1af6      	subs	r6, r6, r3
 8016bbe:	4416      	add	r6, r2
 8016bc0:	4b63      	ldr	r3, [pc, #396]	; (8016d50 <_strtod_l+0x838>)
 8016bc2:	3e01      	subs	r6, #1
 8016bc4:	429e      	cmp	r6, r3
 8016bc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016bca:	f280 80af 	bge.w	8016d2c <_strtod_l+0x814>
 8016bce:	1b9b      	subs	r3, r3, r6
 8016bd0:	2b1f      	cmp	r3, #31
 8016bd2:	eba2 0203 	sub.w	r2, r2, r3
 8016bd6:	f04f 0101 	mov.w	r1, #1
 8016bda:	f300 809b 	bgt.w	8016d14 <_strtod_l+0x7fc>
 8016bde:	fa01 f303 	lsl.w	r3, r1, r3
 8016be2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016be4:	2300      	movs	r3, #0
 8016be6:	930a      	str	r3, [sp, #40]	; 0x28
 8016be8:	18be      	adds	r6, r7, r2
 8016bea:	9b04      	ldr	r3, [sp, #16]
 8016bec:	42b7      	cmp	r7, r6
 8016bee:	4415      	add	r5, r2
 8016bf0:	441d      	add	r5, r3
 8016bf2:	463b      	mov	r3, r7
 8016bf4:	bfa8      	it	ge
 8016bf6:	4633      	movge	r3, r6
 8016bf8:	42ab      	cmp	r3, r5
 8016bfa:	bfa8      	it	ge
 8016bfc:	462b      	movge	r3, r5
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	bfc2      	ittt	gt
 8016c02:	1af6      	subgt	r6, r6, r3
 8016c04:	1aed      	subgt	r5, r5, r3
 8016c06:	1aff      	subgt	r7, r7, r3
 8016c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c0a:	b1bb      	cbz	r3, 8016c3c <_strtod_l+0x724>
 8016c0c:	4641      	mov	r1, r8
 8016c0e:	461a      	mov	r2, r3
 8016c10:	4648      	mov	r0, r9
 8016c12:	f001 ff63 	bl	8018adc <__pow5mult>
 8016c16:	4680      	mov	r8, r0
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	f43f ae9b 	beq.w	8016954 <_strtod_l+0x43c>
 8016c1e:	4601      	mov	r1, r0
 8016c20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016c22:	4648      	mov	r0, r9
 8016c24:	f001 fec3 	bl	80189ae <__multiply>
 8016c28:	900c      	str	r0, [sp, #48]	; 0x30
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	f43f ae92 	beq.w	8016954 <_strtod_l+0x43c>
 8016c30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c32:	4648      	mov	r0, r9
 8016c34:	f001 fdd4 	bl	80187e0 <_Bfree>
 8016c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c3a:	931c      	str	r3, [sp, #112]	; 0x70
 8016c3c:	2e00      	cmp	r6, #0
 8016c3e:	dc7a      	bgt.n	8016d36 <_strtod_l+0x81e>
 8016c40:	9b06      	ldr	r3, [sp, #24]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	dd08      	ble.n	8016c58 <_strtod_l+0x740>
 8016c46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016c48:	9905      	ldr	r1, [sp, #20]
 8016c4a:	4648      	mov	r0, r9
 8016c4c:	f001 ff46 	bl	8018adc <__pow5mult>
 8016c50:	9005      	str	r0, [sp, #20]
 8016c52:	2800      	cmp	r0, #0
 8016c54:	f43f ae7e 	beq.w	8016954 <_strtod_l+0x43c>
 8016c58:	2d00      	cmp	r5, #0
 8016c5a:	dd08      	ble.n	8016c6e <_strtod_l+0x756>
 8016c5c:	462a      	mov	r2, r5
 8016c5e:	9905      	ldr	r1, [sp, #20]
 8016c60:	4648      	mov	r0, r9
 8016c62:	f001 ff89 	bl	8018b78 <__lshift>
 8016c66:	9005      	str	r0, [sp, #20]
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	f43f ae73 	beq.w	8016954 <_strtod_l+0x43c>
 8016c6e:	2f00      	cmp	r7, #0
 8016c70:	dd08      	ble.n	8016c84 <_strtod_l+0x76c>
 8016c72:	4641      	mov	r1, r8
 8016c74:	463a      	mov	r2, r7
 8016c76:	4648      	mov	r0, r9
 8016c78:	f001 ff7e 	bl	8018b78 <__lshift>
 8016c7c:	4680      	mov	r8, r0
 8016c7e:	2800      	cmp	r0, #0
 8016c80:	f43f ae68 	beq.w	8016954 <_strtod_l+0x43c>
 8016c84:	9a05      	ldr	r2, [sp, #20]
 8016c86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c88:	4648      	mov	r0, r9
 8016c8a:	f001 ffe3 	bl	8018c54 <__mdiff>
 8016c8e:	4604      	mov	r4, r0
 8016c90:	2800      	cmp	r0, #0
 8016c92:	f43f ae5f 	beq.w	8016954 <_strtod_l+0x43c>
 8016c96:	68c3      	ldr	r3, [r0, #12]
 8016c98:	930c      	str	r3, [sp, #48]	; 0x30
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	60c3      	str	r3, [r0, #12]
 8016c9e:	4641      	mov	r1, r8
 8016ca0:	f001 ffbe 	bl	8018c20 <__mcmp>
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	da55      	bge.n	8016d54 <_strtod_l+0x83c>
 8016ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016caa:	b9e3      	cbnz	r3, 8016ce6 <_strtod_l+0x7ce>
 8016cac:	f1ba 0f00 	cmp.w	sl, #0
 8016cb0:	d119      	bne.n	8016ce6 <_strtod_l+0x7ce>
 8016cb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016cb6:	b9b3      	cbnz	r3, 8016ce6 <_strtod_l+0x7ce>
 8016cb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016cbc:	0d1b      	lsrs	r3, r3, #20
 8016cbe:	051b      	lsls	r3, r3, #20
 8016cc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016cc4:	d90f      	bls.n	8016ce6 <_strtod_l+0x7ce>
 8016cc6:	6963      	ldr	r3, [r4, #20]
 8016cc8:	b913      	cbnz	r3, 8016cd0 <_strtod_l+0x7b8>
 8016cca:	6923      	ldr	r3, [r4, #16]
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	dd0a      	ble.n	8016ce6 <_strtod_l+0x7ce>
 8016cd0:	4621      	mov	r1, r4
 8016cd2:	2201      	movs	r2, #1
 8016cd4:	4648      	mov	r0, r9
 8016cd6:	f001 ff4f 	bl	8018b78 <__lshift>
 8016cda:	4641      	mov	r1, r8
 8016cdc:	4604      	mov	r4, r0
 8016cde:	f001 ff9f 	bl	8018c20 <__mcmp>
 8016ce2:	2800      	cmp	r0, #0
 8016ce4:	dc67      	bgt.n	8016db6 <_strtod_l+0x89e>
 8016ce6:	9b04      	ldr	r3, [sp, #16]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d171      	bne.n	8016dd0 <_strtod_l+0x8b8>
 8016cec:	e63d      	b.n	801696a <_strtod_l+0x452>
 8016cee:	f018 0f01 	tst.w	r8, #1
 8016cf2:	d004      	beq.n	8016cfe <_strtod_l+0x7e6>
 8016cf4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016cf8:	f7e9 fcae 	bl	8000658 <__aeabi_dmul>
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d02:	3508      	adds	r5, #8
 8016d04:	e6e5      	b.n	8016ad2 <_strtod_l+0x5ba>
 8016d06:	f04f 32ff 	mov.w	r2, #4294967295
 8016d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8016d0e:	ea03 0a0a 	and.w	sl, r3, sl
 8016d12:	e6ff      	b.n	8016b14 <_strtod_l+0x5fc>
 8016d14:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016d18:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016d1c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016d20:	36e2      	adds	r6, #226	; 0xe2
 8016d22:	fa01 f306 	lsl.w	r3, r1, r6
 8016d26:	930a      	str	r3, [sp, #40]	; 0x28
 8016d28:	910f      	str	r1, [sp, #60]	; 0x3c
 8016d2a:	e75d      	b.n	8016be8 <_strtod_l+0x6d0>
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d30:	2301      	movs	r3, #1
 8016d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d34:	e758      	b.n	8016be8 <_strtod_l+0x6d0>
 8016d36:	4632      	mov	r2, r6
 8016d38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d3a:	4648      	mov	r0, r9
 8016d3c:	f001 ff1c 	bl	8018b78 <__lshift>
 8016d40:	901c      	str	r0, [sp, #112]	; 0x70
 8016d42:	2800      	cmp	r0, #0
 8016d44:	f47f af7c 	bne.w	8016c40 <_strtod_l+0x728>
 8016d48:	e604      	b.n	8016954 <_strtod_l+0x43c>
 8016d4a:	bf00      	nop
 8016d4c:	0801ce28 	.word	0x0801ce28
 8016d50:	fffffc02 	.word	0xfffffc02
 8016d54:	465d      	mov	r5, fp
 8016d56:	f040 8086 	bne.w	8016e66 <_strtod_l+0x94e>
 8016d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d60:	b32a      	cbz	r2, 8016dae <_strtod_l+0x896>
 8016d62:	4aaf      	ldr	r2, [pc, #700]	; (8017020 <_strtod_l+0xb08>)
 8016d64:	4293      	cmp	r3, r2
 8016d66:	d153      	bne.n	8016e10 <_strtod_l+0x8f8>
 8016d68:	9b04      	ldr	r3, [sp, #16]
 8016d6a:	4650      	mov	r0, sl
 8016d6c:	b1d3      	cbz	r3, 8016da4 <_strtod_l+0x88c>
 8016d6e:	4aad      	ldr	r2, [pc, #692]	; (8017024 <_strtod_l+0xb0c>)
 8016d70:	402a      	ands	r2, r5
 8016d72:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016d76:	f04f 31ff 	mov.w	r1, #4294967295
 8016d7a:	d816      	bhi.n	8016daa <_strtod_l+0x892>
 8016d7c:	0d12      	lsrs	r2, r2, #20
 8016d7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016d82:	fa01 f303 	lsl.w	r3, r1, r3
 8016d86:	4298      	cmp	r0, r3
 8016d88:	d142      	bne.n	8016e10 <_strtod_l+0x8f8>
 8016d8a:	4ba7      	ldr	r3, [pc, #668]	; (8017028 <_strtod_l+0xb10>)
 8016d8c:	429d      	cmp	r5, r3
 8016d8e:	d102      	bne.n	8016d96 <_strtod_l+0x87e>
 8016d90:	3001      	adds	r0, #1
 8016d92:	f43f addf 	beq.w	8016954 <_strtod_l+0x43c>
 8016d96:	4ba3      	ldr	r3, [pc, #652]	; (8017024 <_strtod_l+0xb0c>)
 8016d98:	402b      	ands	r3, r5
 8016d9a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016d9e:	f04f 0a00 	mov.w	sl, #0
 8016da2:	e7a0      	b.n	8016ce6 <_strtod_l+0x7ce>
 8016da4:	f04f 33ff 	mov.w	r3, #4294967295
 8016da8:	e7ed      	b.n	8016d86 <_strtod_l+0x86e>
 8016daa:	460b      	mov	r3, r1
 8016dac:	e7eb      	b.n	8016d86 <_strtod_l+0x86e>
 8016dae:	bb7b      	cbnz	r3, 8016e10 <_strtod_l+0x8f8>
 8016db0:	f1ba 0f00 	cmp.w	sl, #0
 8016db4:	d12c      	bne.n	8016e10 <_strtod_l+0x8f8>
 8016db6:	9904      	ldr	r1, [sp, #16]
 8016db8:	4a9a      	ldr	r2, [pc, #616]	; (8017024 <_strtod_l+0xb0c>)
 8016dba:	465b      	mov	r3, fp
 8016dbc:	b1f1      	cbz	r1, 8016dfc <_strtod_l+0x8e4>
 8016dbe:	ea02 010b 	and.w	r1, r2, fp
 8016dc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016dc6:	dc19      	bgt.n	8016dfc <_strtod_l+0x8e4>
 8016dc8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016dcc:	f77f ae5b 	ble.w	8016a86 <_strtod_l+0x56e>
 8016dd0:	4a96      	ldr	r2, [pc, #600]	; (801702c <_strtod_l+0xb14>)
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016dd8:	4650      	mov	r0, sl
 8016dda:	4659      	mov	r1, fp
 8016ddc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016de0:	f7e9 fc3a 	bl	8000658 <__aeabi_dmul>
 8016de4:	4682      	mov	sl, r0
 8016de6:	468b      	mov	fp, r1
 8016de8:	2900      	cmp	r1, #0
 8016dea:	f47f adbe 	bne.w	801696a <_strtod_l+0x452>
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f47f adbb 	bne.w	801696a <_strtod_l+0x452>
 8016df4:	2322      	movs	r3, #34	; 0x22
 8016df6:	f8c9 3000 	str.w	r3, [r9]
 8016dfa:	e5b6      	b.n	801696a <_strtod_l+0x452>
 8016dfc:	4013      	ands	r3, r2
 8016dfe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016e02:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016e06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016e0a:	f04f 3aff 	mov.w	sl, #4294967295
 8016e0e:	e76a      	b.n	8016ce6 <_strtod_l+0x7ce>
 8016e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e12:	b193      	cbz	r3, 8016e3a <_strtod_l+0x922>
 8016e14:	422b      	tst	r3, r5
 8016e16:	f43f af66 	beq.w	8016ce6 <_strtod_l+0x7ce>
 8016e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e1c:	9a04      	ldr	r2, [sp, #16]
 8016e1e:	4650      	mov	r0, sl
 8016e20:	4659      	mov	r1, fp
 8016e22:	b173      	cbz	r3, 8016e42 <_strtod_l+0x92a>
 8016e24:	f7ff fb59 	bl	80164da <sulp>
 8016e28:	4602      	mov	r2, r0
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016e30:	f7e9 fa5c 	bl	80002ec <__adddf3>
 8016e34:	4682      	mov	sl, r0
 8016e36:	468b      	mov	fp, r1
 8016e38:	e755      	b.n	8016ce6 <_strtod_l+0x7ce>
 8016e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e3c:	ea13 0f0a 	tst.w	r3, sl
 8016e40:	e7e9      	b.n	8016e16 <_strtod_l+0x8fe>
 8016e42:	f7ff fb4a 	bl	80164da <sulp>
 8016e46:	4602      	mov	r2, r0
 8016e48:	460b      	mov	r3, r1
 8016e4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016e4e:	f7e9 fa4b 	bl	80002e8 <__aeabi_dsub>
 8016e52:	2200      	movs	r2, #0
 8016e54:	2300      	movs	r3, #0
 8016e56:	4682      	mov	sl, r0
 8016e58:	468b      	mov	fp, r1
 8016e5a:	f7e9 fe65 	bl	8000b28 <__aeabi_dcmpeq>
 8016e5e:	2800      	cmp	r0, #0
 8016e60:	f47f ae11 	bne.w	8016a86 <_strtod_l+0x56e>
 8016e64:	e73f      	b.n	8016ce6 <_strtod_l+0x7ce>
 8016e66:	4641      	mov	r1, r8
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f002 f816 	bl	8018e9a <__ratio>
 8016e6e:	ec57 6b10 	vmov	r6, r7, d0
 8016e72:	2200      	movs	r2, #0
 8016e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016e78:	ee10 0a10 	vmov	r0, s0
 8016e7c:	4639      	mov	r1, r7
 8016e7e:	f7e9 fe67 	bl	8000b50 <__aeabi_dcmple>
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d077      	beq.n	8016f76 <_strtod_l+0xa5e>
 8016e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d04a      	beq.n	8016f22 <_strtod_l+0xa0a>
 8016e8c:	4b68      	ldr	r3, [pc, #416]	; (8017030 <_strtod_l+0xb18>)
 8016e8e:	2200      	movs	r2, #0
 8016e90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016e94:	4f66      	ldr	r7, [pc, #408]	; (8017030 <_strtod_l+0xb18>)
 8016e96:	2600      	movs	r6, #0
 8016e98:	4b62      	ldr	r3, [pc, #392]	; (8017024 <_strtod_l+0xb0c>)
 8016e9a:	402b      	ands	r3, r5
 8016e9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ea0:	4b64      	ldr	r3, [pc, #400]	; (8017034 <_strtod_l+0xb1c>)
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	f040 80ce 	bne.w	8017044 <_strtod_l+0xb2c>
 8016ea8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016eac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016eb0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016eb4:	ec4b ab10 	vmov	d0, sl, fp
 8016eb8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016ebc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016ec0:	f001 ff26 	bl	8018d10 <__ulp>
 8016ec4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ec8:	ec53 2b10 	vmov	r2, r3, d0
 8016ecc:	f7e9 fbc4 	bl	8000658 <__aeabi_dmul>
 8016ed0:	4652      	mov	r2, sl
 8016ed2:	465b      	mov	r3, fp
 8016ed4:	f7e9 fa0a 	bl	80002ec <__adddf3>
 8016ed8:	460b      	mov	r3, r1
 8016eda:	4952      	ldr	r1, [pc, #328]	; (8017024 <_strtod_l+0xb0c>)
 8016edc:	4a56      	ldr	r2, [pc, #344]	; (8017038 <_strtod_l+0xb20>)
 8016ede:	4019      	ands	r1, r3
 8016ee0:	4291      	cmp	r1, r2
 8016ee2:	4682      	mov	sl, r0
 8016ee4:	d95b      	bls.n	8016f9e <_strtod_l+0xa86>
 8016ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ee8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016eec:	4293      	cmp	r3, r2
 8016eee:	d103      	bne.n	8016ef8 <_strtod_l+0x9e0>
 8016ef0:	9b08      	ldr	r3, [sp, #32]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	f43f ad2e 	beq.w	8016954 <_strtod_l+0x43c>
 8016ef8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017028 <_strtod_l+0xb10>
 8016efc:	f04f 3aff 	mov.w	sl, #4294967295
 8016f00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f02:	4648      	mov	r0, r9
 8016f04:	f001 fc6c 	bl	80187e0 <_Bfree>
 8016f08:	9905      	ldr	r1, [sp, #20]
 8016f0a:	4648      	mov	r0, r9
 8016f0c:	f001 fc68 	bl	80187e0 <_Bfree>
 8016f10:	4641      	mov	r1, r8
 8016f12:	4648      	mov	r0, r9
 8016f14:	f001 fc64 	bl	80187e0 <_Bfree>
 8016f18:	4621      	mov	r1, r4
 8016f1a:	4648      	mov	r0, r9
 8016f1c:	f001 fc60 	bl	80187e0 <_Bfree>
 8016f20:	e619      	b.n	8016b56 <_strtod_l+0x63e>
 8016f22:	f1ba 0f00 	cmp.w	sl, #0
 8016f26:	d11a      	bne.n	8016f5e <_strtod_l+0xa46>
 8016f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f2c:	b9eb      	cbnz	r3, 8016f6a <_strtod_l+0xa52>
 8016f2e:	2200      	movs	r2, #0
 8016f30:	4b3f      	ldr	r3, [pc, #252]	; (8017030 <_strtod_l+0xb18>)
 8016f32:	4630      	mov	r0, r6
 8016f34:	4639      	mov	r1, r7
 8016f36:	f7e9 fe01 	bl	8000b3c <__aeabi_dcmplt>
 8016f3a:	b9c8      	cbnz	r0, 8016f70 <_strtod_l+0xa58>
 8016f3c:	4630      	mov	r0, r6
 8016f3e:	4639      	mov	r1, r7
 8016f40:	2200      	movs	r2, #0
 8016f42:	4b3e      	ldr	r3, [pc, #248]	; (801703c <_strtod_l+0xb24>)
 8016f44:	f7e9 fb88 	bl	8000658 <__aeabi_dmul>
 8016f48:	4606      	mov	r6, r0
 8016f4a:	460f      	mov	r7, r1
 8016f4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016f50:	9618      	str	r6, [sp, #96]	; 0x60
 8016f52:	9319      	str	r3, [sp, #100]	; 0x64
 8016f54:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016f58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f5c:	e79c      	b.n	8016e98 <_strtod_l+0x980>
 8016f5e:	f1ba 0f01 	cmp.w	sl, #1
 8016f62:	d102      	bne.n	8016f6a <_strtod_l+0xa52>
 8016f64:	2d00      	cmp	r5, #0
 8016f66:	f43f ad8e 	beq.w	8016a86 <_strtod_l+0x56e>
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	4b34      	ldr	r3, [pc, #208]	; (8017040 <_strtod_l+0xb28>)
 8016f6e:	e78f      	b.n	8016e90 <_strtod_l+0x978>
 8016f70:	2600      	movs	r6, #0
 8016f72:	4f32      	ldr	r7, [pc, #200]	; (801703c <_strtod_l+0xb24>)
 8016f74:	e7ea      	b.n	8016f4c <_strtod_l+0xa34>
 8016f76:	4b31      	ldr	r3, [pc, #196]	; (801703c <_strtod_l+0xb24>)
 8016f78:	4630      	mov	r0, r6
 8016f7a:	4639      	mov	r1, r7
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	f7e9 fb6b 	bl	8000658 <__aeabi_dmul>
 8016f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f84:	4606      	mov	r6, r0
 8016f86:	460f      	mov	r7, r1
 8016f88:	b933      	cbnz	r3, 8016f98 <_strtod_l+0xa80>
 8016f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f8e:	9010      	str	r0, [sp, #64]	; 0x40
 8016f90:	9311      	str	r3, [sp, #68]	; 0x44
 8016f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016f96:	e7df      	b.n	8016f58 <_strtod_l+0xa40>
 8016f98:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016f9c:	e7f9      	b.n	8016f92 <_strtod_l+0xa7a>
 8016f9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016fa2:	9b04      	ldr	r3, [sp, #16]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d1ab      	bne.n	8016f00 <_strtod_l+0x9e8>
 8016fa8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016fac:	0d1b      	lsrs	r3, r3, #20
 8016fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fb0:	051b      	lsls	r3, r3, #20
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	465d      	mov	r5, fp
 8016fb6:	d1a3      	bne.n	8016f00 <_strtod_l+0x9e8>
 8016fb8:	4639      	mov	r1, r7
 8016fba:	4630      	mov	r0, r6
 8016fbc:	f7e9 fdfc 	bl	8000bb8 <__aeabi_d2iz>
 8016fc0:	f7e9 fae0 	bl	8000584 <__aeabi_i2d>
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	4639      	mov	r1, r7
 8016fca:	4630      	mov	r0, r6
 8016fcc:	f7e9 f98c 	bl	80002e8 <__aeabi_dsub>
 8016fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fd2:	4606      	mov	r6, r0
 8016fd4:	460f      	mov	r7, r1
 8016fd6:	b933      	cbnz	r3, 8016fe6 <_strtod_l+0xace>
 8016fd8:	f1ba 0f00 	cmp.w	sl, #0
 8016fdc:	d103      	bne.n	8016fe6 <_strtod_l+0xace>
 8016fde:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016fe2:	2d00      	cmp	r5, #0
 8016fe4:	d06d      	beq.n	80170c2 <_strtod_l+0xbaa>
 8016fe6:	a30a      	add	r3, pc, #40	; (adr r3, 8017010 <_strtod_l+0xaf8>)
 8016fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fec:	4630      	mov	r0, r6
 8016fee:	4639      	mov	r1, r7
 8016ff0:	f7e9 fda4 	bl	8000b3c <__aeabi_dcmplt>
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	f47f acb8 	bne.w	801696a <_strtod_l+0x452>
 8016ffa:	a307      	add	r3, pc, #28	; (adr r3, 8017018 <_strtod_l+0xb00>)
 8016ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017000:	4630      	mov	r0, r6
 8017002:	4639      	mov	r1, r7
 8017004:	f7e9 fdb8 	bl	8000b78 <__aeabi_dcmpgt>
 8017008:	2800      	cmp	r0, #0
 801700a:	f43f af79 	beq.w	8016f00 <_strtod_l+0x9e8>
 801700e:	e4ac      	b.n	801696a <_strtod_l+0x452>
 8017010:	94a03595 	.word	0x94a03595
 8017014:	3fdfffff 	.word	0x3fdfffff
 8017018:	35afe535 	.word	0x35afe535
 801701c:	3fe00000 	.word	0x3fe00000
 8017020:	000fffff 	.word	0x000fffff
 8017024:	7ff00000 	.word	0x7ff00000
 8017028:	7fefffff 	.word	0x7fefffff
 801702c:	39500000 	.word	0x39500000
 8017030:	3ff00000 	.word	0x3ff00000
 8017034:	7fe00000 	.word	0x7fe00000
 8017038:	7c9fffff 	.word	0x7c9fffff
 801703c:	3fe00000 	.word	0x3fe00000
 8017040:	bff00000 	.word	0xbff00000
 8017044:	9b04      	ldr	r3, [sp, #16]
 8017046:	b333      	cbz	r3, 8017096 <_strtod_l+0xb7e>
 8017048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801704a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801704e:	d822      	bhi.n	8017096 <_strtod_l+0xb7e>
 8017050:	a327      	add	r3, pc, #156	; (adr r3, 80170f0 <_strtod_l+0xbd8>)
 8017052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017056:	4630      	mov	r0, r6
 8017058:	4639      	mov	r1, r7
 801705a:	f7e9 fd79 	bl	8000b50 <__aeabi_dcmple>
 801705e:	b1a0      	cbz	r0, 801708a <_strtod_l+0xb72>
 8017060:	4639      	mov	r1, r7
 8017062:	4630      	mov	r0, r6
 8017064:	f7e9 fdd0 	bl	8000c08 <__aeabi_d2uiz>
 8017068:	2800      	cmp	r0, #0
 801706a:	bf08      	it	eq
 801706c:	2001      	moveq	r0, #1
 801706e:	f7e9 fa79 	bl	8000564 <__aeabi_ui2d>
 8017072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017074:	4606      	mov	r6, r0
 8017076:	460f      	mov	r7, r1
 8017078:	bb03      	cbnz	r3, 80170bc <_strtod_l+0xba4>
 801707a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801707e:	9012      	str	r0, [sp, #72]	; 0x48
 8017080:	9313      	str	r3, [sp, #76]	; 0x4c
 8017082:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017086:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801708a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801708c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801708e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017092:	1a9b      	subs	r3, r3, r2
 8017094:	930b      	str	r3, [sp, #44]	; 0x2c
 8017096:	ed9d 0b08 	vldr	d0, [sp, #32]
 801709a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801709e:	f001 fe37 	bl	8018d10 <__ulp>
 80170a2:	4650      	mov	r0, sl
 80170a4:	ec53 2b10 	vmov	r2, r3, d0
 80170a8:	4659      	mov	r1, fp
 80170aa:	f7e9 fad5 	bl	8000658 <__aeabi_dmul>
 80170ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80170b2:	f7e9 f91b 	bl	80002ec <__adddf3>
 80170b6:	4682      	mov	sl, r0
 80170b8:	468b      	mov	fp, r1
 80170ba:	e772      	b.n	8016fa2 <_strtod_l+0xa8a>
 80170bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80170c0:	e7df      	b.n	8017082 <_strtod_l+0xb6a>
 80170c2:	a30d      	add	r3, pc, #52	; (adr r3, 80170f8 <_strtod_l+0xbe0>)
 80170c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c8:	f7e9 fd38 	bl	8000b3c <__aeabi_dcmplt>
 80170cc:	e79c      	b.n	8017008 <_strtod_l+0xaf0>
 80170ce:	2300      	movs	r3, #0
 80170d0:	930d      	str	r3, [sp, #52]	; 0x34
 80170d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80170d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170d6:	6013      	str	r3, [r2, #0]
 80170d8:	f7ff ba61 	b.w	801659e <_strtod_l+0x86>
 80170dc:	2b65      	cmp	r3, #101	; 0x65
 80170de:	f04f 0200 	mov.w	r2, #0
 80170e2:	f43f ab4e 	beq.w	8016782 <_strtod_l+0x26a>
 80170e6:	2101      	movs	r1, #1
 80170e8:	4614      	mov	r4, r2
 80170ea:	9104      	str	r1, [sp, #16]
 80170ec:	f7ff bacb 	b.w	8016686 <_strtod_l+0x16e>
 80170f0:	ffc00000 	.word	0xffc00000
 80170f4:	41dfffff 	.word	0x41dfffff
 80170f8:	94a03595 	.word	0x94a03595
 80170fc:	3fcfffff 	.word	0x3fcfffff

08017100 <_strtod_r>:
 8017100:	4b05      	ldr	r3, [pc, #20]	; (8017118 <_strtod_r+0x18>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	b410      	push	{r4}
 8017106:	6a1b      	ldr	r3, [r3, #32]
 8017108:	4c04      	ldr	r4, [pc, #16]	; (801711c <_strtod_r+0x1c>)
 801710a:	2b00      	cmp	r3, #0
 801710c:	bf08      	it	eq
 801710e:	4623      	moveq	r3, r4
 8017110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017114:	f7ff ba00 	b.w	8016518 <_strtod_l>
 8017118:	20000020 	.word	0x20000020
 801711c:	20000084 	.word	0x20000084

08017120 <strtod>:
 8017120:	4b07      	ldr	r3, [pc, #28]	; (8017140 <strtod+0x20>)
 8017122:	4a08      	ldr	r2, [pc, #32]	; (8017144 <strtod+0x24>)
 8017124:	b410      	push	{r4}
 8017126:	681c      	ldr	r4, [r3, #0]
 8017128:	6a23      	ldr	r3, [r4, #32]
 801712a:	2b00      	cmp	r3, #0
 801712c:	bf08      	it	eq
 801712e:	4613      	moveq	r3, r2
 8017130:	460a      	mov	r2, r1
 8017132:	4601      	mov	r1, r0
 8017134:	4620      	mov	r0, r4
 8017136:	f85d 4b04 	ldr.w	r4, [sp], #4
 801713a:	f7ff b9ed 	b.w	8016518 <_strtod_l>
 801713e:	bf00      	nop
 8017140:	20000020 	.word	0x20000020
 8017144:	20000084 	.word	0x20000084

08017148 <_strtol_l.isra.0>:
 8017148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801714c:	4680      	mov	r8, r0
 801714e:	4689      	mov	r9, r1
 8017150:	4692      	mov	sl, r2
 8017152:	461e      	mov	r6, r3
 8017154:	460f      	mov	r7, r1
 8017156:	463d      	mov	r5, r7
 8017158:	9808      	ldr	r0, [sp, #32]
 801715a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801715e:	f7fe f953 	bl	8015408 <__locale_ctype_ptr_l>
 8017162:	4420      	add	r0, r4
 8017164:	7843      	ldrb	r3, [r0, #1]
 8017166:	f013 0308 	ands.w	r3, r3, #8
 801716a:	d132      	bne.n	80171d2 <_strtol_l.isra.0+0x8a>
 801716c:	2c2d      	cmp	r4, #45	; 0x2d
 801716e:	d132      	bne.n	80171d6 <_strtol_l.isra.0+0x8e>
 8017170:	787c      	ldrb	r4, [r7, #1]
 8017172:	1cbd      	adds	r5, r7, #2
 8017174:	2201      	movs	r2, #1
 8017176:	2e00      	cmp	r6, #0
 8017178:	d05d      	beq.n	8017236 <_strtol_l.isra.0+0xee>
 801717a:	2e10      	cmp	r6, #16
 801717c:	d109      	bne.n	8017192 <_strtol_l.isra.0+0x4a>
 801717e:	2c30      	cmp	r4, #48	; 0x30
 8017180:	d107      	bne.n	8017192 <_strtol_l.isra.0+0x4a>
 8017182:	782b      	ldrb	r3, [r5, #0]
 8017184:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017188:	2b58      	cmp	r3, #88	; 0x58
 801718a:	d14f      	bne.n	801722c <_strtol_l.isra.0+0xe4>
 801718c:	786c      	ldrb	r4, [r5, #1]
 801718e:	2610      	movs	r6, #16
 8017190:	3502      	adds	r5, #2
 8017192:	2a00      	cmp	r2, #0
 8017194:	bf14      	ite	ne
 8017196:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801719a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801719e:	2700      	movs	r7, #0
 80171a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80171a4:	4638      	mov	r0, r7
 80171a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80171aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80171ae:	2b09      	cmp	r3, #9
 80171b0:	d817      	bhi.n	80171e2 <_strtol_l.isra.0+0x9a>
 80171b2:	461c      	mov	r4, r3
 80171b4:	42a6      	cmp	r6, r4
 80171b6:	dd23      	ble.n	8017200 <_strtol_l.isra.0+0xb8>
 80171b8:	1c7b      	adds	r3, r7, #1
 80171ba:	d007      	beq.n	80171cc <_strtol_l.isra.0+0x84>
 80171bc:	4584      	cmp	ip, r0
 80171be:	d31c      	bcc.n	80171fa <_strtol_l.isra.0+0xb2>
 80171c0:	d101      	bne.n	80171c6 <_strtol_l.isra.0+0x7e>
 80171c2:	45a6      	cmp	lr, r4
 80171c4:	db19      	blt.n	80171fa <_strtol_l.isra.0+0xb2>
 80171c6:	fb00 4006 	mla	r0, r0, r6, r4
 80171ca:	2701      	movs	r7, #1
 80171cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171d0:	e7eb      	b.n	80171aa <_strtol_l.isra.0+0x62>
 80171d2:	462f      	mov	r7, r5
 80171d4:	e7bf      	b.n	8017156 <_strtol_l.isra.0+0xe>
 80171d6:	2c2b      	cmp	r4, #43	; 0x2b
 80171d8:	bf04      	itt	eq
 80171da:	1cbd      	addeq	r5, r7, #2
 80171dc:	787c      	ldrbeq	r4, [r7, #1]
 80171de:	461a      	mov	r2, r3
 80171e0:	e7c9      	b.n	8017176 <_strtol_l.isra.0+0x2e>
 80171e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80171e6:	2b19      	cmp	r3, #25
 80171e8:	d801      	bhi.n	80171ee <_strtol_l.isra.0+0xa6>
 80171ea:	3c37      	subs	r4, #55	; 0x37
 80171ec:	e7e2      	b.n	80171b4 <_strtol_l.isra.0+0x6c>
 80171ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80171f2:	2b19      	cmp	r3, #25
 80171f4:	d804      	bhi.n	8017200 <_strtol_l.isra.0+0xb8>
 80171f6:	3c57      	subs	r4, #87	; 0x57
 80171f8:	e7dc      	b.n	80171b4 <_strtol_l.isra.0+0x6c>
 80171fa:	f04f 37ff 	mov.w	r7, #4294967295
 80171fe:	e7e5      	b.n	80171cc <_strtol_l.isra.0+0x84>
 8017200:	1c7b      	adds	r3, r7, #1
 8017202:	d108      	bne.n	8017216 <_strtol_l.isra.0+0xce>
 8017204:	2322      	movs	r3, #34	; 0x22
 8017206:	f8c8 3000 	str.w	r3, [r8]
 801720a:	4608      	mov	r0, r1
 801720c:	f1ba 0f00 	cmp.w	sl, #0
 8017210:	d107      	bne.n	8017222 <_strtol_l.isra.0+0xda>
 8017212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017216:	b102      	cbz	r2, 801721a <_strtol_l.isra.0+0xd2>
 8017218:	4240      	negs	r0, r0
 801721a:	f1ba 0f00 	cmp.w	sl, #0
 801721e:	d0f8      	beq.n	8017212 <_strtol_l.isra.0+0xca>
 8017220:	b10f      	cbz	r7, 8017226 <_strtol_l.isra.0+0xde>
 8017222:	f105 39ff 	add.w	r9, r5, #4294967295
 8017226:	f8ca 9000 	str.w	r9, [sl]
 801722a:	e7f2      	b.n	8017212 <_strtol_l.isra.0+0xca>
 801722c:	2430      	movs	r4, #48	; 0x30
 801722e:	2e00      	cmp	r6, #0
 8017230:	d1af      	bne.n	8017192 <_strtol_l.isra.0+0x4a>
 8017232:	2608      	movs	r6, #8
 8017234:	e7ad      	b.n	8017192 <_strtol_l.isra.0+0x4a>
 8017236:	2c30      	cmp	r4, #48	; 0x30
 8017238:	d0a3      	beq.n	8017182 <_strtol_l.isra.0+0x3a>
 801723a:	260a      	movs	r6, #10
 801723c:	e7a9      	b.n	8017192 <_strtol_l.isra.0+0x4a>
	...

08017240 <_strtol_r>:
 8017240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017242:	4c06      	ldr	r4, [pc, #24]	; (801725c <_strtol_r+0x1c>)
 8017244:	4d06      	ldr	r5, [pc, #24]	; (8017260 <_strtol_r+0x20>)
 8017246:	6824      	ldr	r4, [r4, #0]
 8017248:	6a24      	ldr	r4, [r4, #32]
 801724a:	2c00      	cmp	r4, #0
 801724c:	bf08      	it	eq
 801724e:	462c      	moveq	r4, r5
 8017250:	9400      	str	r4, [sp, #0]
 8017252:	f7ff ff79 	bl	8017148 <_strtol_l.isra.0>
 8017256:	b003      	add	sp, #12
 8017258:	bd30      	pop	{r4, r5, pc}
 801725a:	bf00      	nop
 801725c:	20000020 	.word	0x20000020
 8017260:	20000084 	.word	0x20000084

08017264 <__ascii_wctomb>:
 8017264:	b149      	cbz	r1, 801727a <__ascii_wctomb+0x16>
 8017266:	2aff      	cmp	r2, #255	; 0xff
 8017268:	bf85      	ittet	hi
 801726a:	238a      	movhi	r3, #138	; 0x8a
 801726c:	6003      	strhi	r3, [r0, #0]
 801726e:	700a      	strbls	r2, [r1, #0]
 8017270:	f04f 30ff 	movhi.w	r0, #4294967295
 8017274:	bf98      	it	ls
 8017276:	2001      	movls	r0, #1
 8017278:	4770      	bx	lr
 801727a:	4608      	mov	r0, r1
 801727c:	4770      	bx	lr
	...

08017280 <_write_r>:
 8017280:	b538      	push	{r3, r4, r5, lr}
 8017282:	4c07      	ldr	r4, [pc, #28]	; (80172a0 <_write_r+0x20>)
 8017284:	4605      	mov	r5, r0
 8017286:	4608      	mov	r0, r1
 8017288:	4611      	mov	r1, r2
 801728a:	2200      	movs	r2, #0
 801728c:	6022      	str	r2, [r4, #0]
 801728e:	461a      	mov	r2, r3
 8017290:	f7ec ff77 	bl	8004182 <_write>
 8017294:	1c43      	adds	r3, r0, #1
 8017296:	d102      	bne.n	801729e <_write_r+0x1e>
 8017298:	6823      	ldr	r3, [r4, #0]
 801729a:	b103      	cbz	r3, 801729e <_write_r+0x1e>
 801729c:	602b      	str	r3, [r5, #0]
 801729e:	bd38      	pop	{r3, r4, r5, pc}
 80172a0:	2000751c 	.word	0x2000751c

080172a4 <_close_r>:
 80172a4:	b538      	push	{r3, r4, r5, lr}
 80172a6:	4c06      	ldr	r4, [pc, #24]	; (80172c0 <_close_r+0x1c>)
 80172a8:	2300      	movs	r3, #0
 80172aa:	4605      	mov	r5, r0
 80172ac:	4608      	mov	r0, r1
 80172ae:	6023      	str	r3, [r4, #0]
 80172b0:	f7ec ff83 	bl	80041ba <_close>
 80172b4:	1c43      	adds	r3, r0, #1
 80172b6:	d102      	bne.n	80172be <_close_r+0x1a>
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	b103      	cbz	r3, 80172be <_close_r+0x1a>
 80172bc:	602b      	str	r3, [r5, #0]
 80172be:	bd38      	pop	{r3, r4, r5, pc}
 80172c0:	2000751c 	.word	0x2000751c

080172c4 <quorem>:
 80172c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c8:	6903      	ldr	r3, [r0, #16]
 80172ca:	690c      	ldr	r4, [r1, #16]
 80172cc:	42a3      	cmp	r3, r4
 80172ce:	4680      	mov	r8, r0
 80172d0:	f2c0 8082 	blt.w	80173d8 <quorem+0x114>
 80172d4:	3c01      	subs	r4, #1
 80172d6:	f101 0714 	add.w	r7, r1, #20
 80172da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80172de:	f100 0614 	add.w	r6, r0, #20
 80172e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80172e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80172ea:	eb06 030c 	add.w	r3, r6, ip
 80172ee:	3501      	adds	r5, #1
 80172f0:	eb07 090c 	add.w	r9, r7, ip
 80172f4:	9301      	str	r3, [sp, #4]
 80172f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80172fa:	b395      	cbz	r5, 8017362 <quorem+0x9e>
 80172fc:	f04f 0a00 	mov.w	sl, #0
 8017300:	4638      	mov	r0, r7
 8017302:	46b6      	mov	lr, r6
 8017304:	46d3      	mov	fp, sl
 8017306:	f850 2b04 	ldr.w	r2, [r0], #4
 801730a:	b293      	uxth	r3, r2
 801730c:	fb05 a303 	mla	r3, r5, r3, sl
 8017310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017314:	b29b      	uxth	r3, r3
 8017316:	ebab 0303 	sub.w	r3, fp, r3
 801731a:	0c12      	lsrs	r2, r2, #16
 801731c:	f8de b000 	ldr.w	fp, [lr]
 8017320:	fb05 a202 	mla	r2, r5, r2, sl
 8017324:	fa13 f38b 	uxtah	r3, r3, fp
 8017328:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801732c:	fa1f fb82 	uxth.w	fp, r2
 8017330:	f8de 2000 	ldr.w	r2, [lr]
 8017334:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801733c:	b29b      	uxth	r3, r3
 801733e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017342:	4581      	cmp	r9, r0
 8017344:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017348:	f84e 3b04 	str.w	r3, [lr], #4
 801734c:	d2db      	bcs.n	8017306 <quorem+0x42>
 801734e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017352:	b933      	cbnz	r3, 8017362 <quorem+0x9e>
 8017354:	9b01      	ldr	r3, [sp, #4]
 8017356:	3b04      	subs	r3, #4
 8017358:	429e      	cmp	r6, r3
 801735a:	461a      	mov	r2, r3
 801735c:	d330      	bcc.n	80173c0 <quorem+0xfc>
 801735e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017362:	4640      	mov	r0, r8
 8017364:	f001 fc5c 	bl	8018c20 <__mcmp>
 8017368:	2800      	cmp	r0, #0
 801736a:	db25      	blt.n	80173b8 <quorem+0xf4>
 801736c:	3501      	adds	r5, #1
 801736e:	4630      	mov	r0, r6
 8017370:	f04f 0c00 	mov.w	ip, #0
 8017374:	f857 2b04 	ldr.w	r2, [r7], #4
 8017378:	f8d0 e000 	ldr.w	lr, [r0]
 801737c:	b293      	uxth	r3, r2
 801737e:	ebac 0303 	sub.w	r3, ip, r3
 8017382:	0c12      	lsrs	r2, r2, #16
 8017384:	fa13 f38e 	uxtah	r3, r3, lr
 8017388:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801738c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017390:	b29b      	uxth	r3, r3
 8017392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017396:	45b9      	cmp	r9, r7
 8017398:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801739c:	f840 3b04 	str.w	r3, [r0], #4
 80173a0:	d2e8      	bcs.n	8017374 <quorem+0xb0>
 80173a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80173a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80173aa:	b92a      	cbnz	r2, 80173b8 <quorem+0xf4>
 80173ac:	3b04      	subs	r3, #4
 80173ae:	429e      	cmp	r6, r3
 80173b0:	461a      	mov	r2, r3
 80173b2:	d30b      	bcc.n	80173cc <quorem+0x108>
 80173b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80173b8:	4628      	mov	r0, r5
 80173ba:	b003      	add	sp, #12
 80173bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173c0:	6812      	ldr	r2, [r2, #0]
 80173c2:	3b04      	subs	r3, #4
 80173c4:	2a00      	cmp	r2, #0
 80173c6:	d1ca      	bne.n	801735e <quorem+0x9a>
 80173c8:	3c01      	subs	r4, #1
 80173ca:	e7c5      	b.n	8017358 <quorem+0x94>
 80173cc:	6812      	ldr	r2, [r2, #0]
 80173ce:	3b04      	subs	r3, #4
 80173d0:	2a00      	cmp	r2, #0
 80173d2:	d1ef      	bne.n	80173b4 <quorem+0xf0>
 80173d4:	3c01      	subs	r4, #1
 80173d6:	e7ea      	b.n	80173ae <quorem+0xea>
 80173d8:	2000      	movs	r0, #0
 80173da:	e7ee      	b.n	80173ba <quorem+0xf6>
 80173dc:	0000      	movs	r0, r0
	...

080173e0 <_dtoa_r>:
 80173e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e4:	ec57 6b10 	vmov	r6, r7, d0
 80173e8:	b097      	sub	sp, #92	; 0x5c
 80173ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80173ec:	9106      	str	r1, [sp, #24]
 80173ee:	4604      	mov	r4, r0
 80173f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80173f2:	9312      	str	r3, [sp, #72]	; 0x48
 80173f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80173f8:	e9cd 6700 	strd	r6, r7, [sp]
 80173fc:	b93d      	cbnz	r5, 801740e <_dtoa_r+0x2e>
 80173fe:	2010      	movs	r0, #16
 8017400:	f7fe f814 	bl	801542c <malloc>
 8017404:	6260      	str	r0, [r4, #36]	; 0x24
 8017406:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801740a:	6005      	str	r5, [r0, #0]
 801740c:	60c5      	str	r5, [r0, #12]
 801740e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017410:	6819      	ldr	r1, [r3, #0]
 8017412:	b151      	cbz	r1, 801742a <_dtoa_r+0x4a>
 8017414:	685a      	ldr	r2, [r3, #4]
 8017416:	604a      	str	r2, [r1, #4]
 8017418:	2301      	movs	r3, #1
 801741a:	4093      	lsls	r3, r2
 801741c:	608b      	str	r3, [r1, #8]
 801741e:	4620      	mov	r0, r4
 8017420:	f001 f9de 	bl	80187e0 <_Bfree>
 8017424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017426:	2200      	movs	r2, #0
 8017428:	601a      	str	r2, [r3, #0]
 801742a:	1e3b      	subs	r3, r7, #0
 801742c:	bfbb      	ittet	lt
 801742e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017432:	9301      	strlt	r3, [sp, #4]
 8017434:	2300      	movge	r3, #0
 8017436:	2201      	movlt	r2, #1
 8017438:	bfac      	ite	ge
 801743a:	f8c8 3000 	strge.w	r3, [r8]
 801743e:	f8c8 2000 	strlt.w	r2, [r8]
 8017442:	4baf      	ldr	r3, [pc, #700]	; (8017700 <_dtoa_r+0x320>)
 8017444:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017448:	ea33 0308 	bics.w	r3, r3, r8
 801744c:	d114      	bne.n	8017478 <_dtoa_r+0x98>
 801744e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017450:	f242 730f 	movw	r3, #9999	; 0x270f
 8017454:	6013      	str	r3, [r2, #0]
 8017456:	9b00      	ldr	r3, [sp, #0]
 8017458:	b923      	cbnz	r3, 8017464 <_dtoa_r+0x84>
 801745a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801745e:	2800      	cmp	r0, #0
 8017460:	f000 8542 	beq.w	8017ee8 <_dtoa_r+0xb08>
 8017464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017466:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017714 <_dtoa_r+0x334>
 801746a:	2b00      	cmp	r3, #0
 801746c:	f000 8544 	beq.w	8017ef8 <_dtoa_r+0xb18>
 8017470:	f10b 0303 	add.w	r3, fp, #3
 8017474:	f000 bd3e 	b.w	8017ef4 <_dtoa_r+0xb14>
 8017478:	e9dd 6700 	ldrd	r6, r7, [sp]
 801747c:	2200      	movs	r2, #0
 801747e:	2300      	movs	r3, #0
 8017480:	4630      	mov	r0, r6
 8017482:	4639      	mov	r1, r7
 8017484:	f7e9 fb50 	bl	8000b28 <__aeabi_dcmpeq>
 8017488:	4681      	mov	r9, r0
 801748a:	b168      	cbz	r0, 80174a8 <_dtoa_r+0xc8>
 801748c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801748e:	2301      	movs	r3, #1
 8017490:	6013      	str	r3, [r2, #0]
 8017492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017494:	2b00      	cmp	r3, #0
 8017496:	f000 8524 	beq.w	8017ee2 <_dtoa_r+0xb02>
 801749a:	4b9a      	ldr	r3, [pc, #616]	; (8017704 <_dtoa_r+0x324>)
 801749c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801749e:	f103 3bff 	add.w	fp, r3, #4294967295
 80174a2:	6013      	str	r3, [r2, #0]
 80174a4:	f000 bd28 	b.w	8017ef8 <_dtoa_r+0xb18>
 80174a8:	aa14      	add	r2, sp, #80	; 0x50
 80174aa:	a915      	add	r1, sp, #84	; 0x54
 80174ac:	ec47 6b10 	vmov	d0, r6, r7
 80174b0:	4620      	mov	r0, r4
 80174b2:	f001 fca3 	bl	8018dfc <__d2b>
 80174b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80174ba:	9004      	str	r0, [sp, #16]
 80174bc:	2d00      	cmp	r5, #0
 80174be:	d07c      	beq.n	80175ba <_dtoa_r+0x1da>
 80174c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80174c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80174c8:	46b2      	mov	sl, r6
 80174ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80174ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80174d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80174d6:	2200      	movs	r2, #0
 80174d8:	4b8b      	ldr	r3, [pc, #556]	; (8017708 <_dtoa_r+0x328>)
 80174da:	4650      	mov	r0, sl
 80174dc:	4659      	mov	r1, fp
 80174de:	f7e8 ff03 	bl	80002e8 <__aeabi_dsub>
 80174e2:	a381      	add	r3, pc, #516	; (adr r3, 80176e8 <_dtoa_r+0x308>)
 80174e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e8:	f7e9 f8b6 	bl	8000658 <__aeabi_dmul>
 80174ec:	a380      	add	r3, pc, #512	; (adr r3, 80176f0 <_dtoa_r+0x310>)
 80174ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174f2:	f7e8 fefb 	bl	80002ec <__adddf3>
 80174f6:	4606      	mov	r6, r0
 80174f8:	4628      	mov	r0, r5
 80174fa:	460f      	mov	r7, r1
 80174fc:	f7e9 f842 	bl	8000584 <__aeabi_i2d>
 8017500:	a37d      	add	r3, pc, #500	; (adr r3, 80176f8 <_dtoa_r+0x318>)
 8017502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017506:	f7e9 f8a7 	bl	8000658 <__aeabi_dmul>
 801750a:	4602      	mov	r2, r0
 801750c:	460b      	mov	r3, r1
 801750e:	4630      	mov	r0, r6
 8017510:	4639      	mov	r1, r7
 8017512:	f7e8 feeb 	bl	80002ec <__adddf3>
 8017516:	4606      	mov	r6, r0
 8017518:	460f      	mov	r7, r1
 801751a:	f7e9 fb4d 	bl	8000bb8 <__aeabi_d2iz>
 801751e:	2200      	movs	r2, #0
 8017520:	4682      	mov	sl, r0
 8017522:	2300      	movs	r3, #0
 8017524:	4630      	mov	r0, r6
 8017526:	4639      	mov	r1, r7
 8017528:	f7e9 fb08 	bl	8000b3c <__aeabi_dcmplt>
 801752c:	b148      	cbz	r0, 8017542 <_dtoa_r+0x162>
 801752e:	4650      	mov	r0, sl
 8017530:	f7e9 f828 	bl	8000584 <__aeabi_i2d>
 8017534:	4632      	mov	r2, r6
 8017536:	463b      	mov	r3, r7
 8017538:	f7e9 faf6 	bl	8000b28 <__aeabi_dcmpeq>
 801753c:	b908      	cbnz	r0, 8017542 <_dtoa_r+0x162>
 801753e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017542:	f1ba 0f16 	cmp.w	sl, #22
 8017546:	d859      	bhi.n	80175fc <_dtoa_r+0x21c>
 8017548:	4970      	ldr	r1, [pc, #448]	; (801770c <_dtoa_r+0x32c>)
 801754a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801754e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017556:	f7e9 fb0f 	bl	8000b78 <__aeabi_dcmpgt>
 801755a:	2800      	cmp	r0, #0
 801755c:	d050      	beq.n	8017600 <_dtoa_r+0x220>
 801755e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017562:	2300      	movs	r3, #0
 8017564:	930f      	str	r3, [sp, #60]	; 0x3c
 8017566:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017568:	1b5d      	subs	r5, r3, r5
 801756a:	f1b5 0801 	subs.w	r8, r5, #1
 801756e:	bf49      	itett	mi
 8017570:	f1c5 0301 	rsbmi	r3, r5, #1
 8017574:	2300      	movpl	r3, #0
 8017576:	9305      	strmi	r3, [sp, #20]
 8017578:	f04f 0800 	movmi.w	r8, #0
 801757c:	bf58      	it	pl
 801757e:	9305      	strpl	r3, [sp, #20]
 8017580:	f1ba 0f00 	cmp.w	sl, #0
 8017584:	db3e      	blt.n	8017604 <_dtoa_r+0x224>
 8017586:	2300      	movs	r3, #0
 8017588:	44d0      	add	r8, sl
 801758a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801758e:	9307      	str	r3, [sp, #28]
 8017590:	9b06      	ldr	r3, [sp, #24]
 8017592:	2b09      	cmp	r3, #9
 8017594:	f200 8090 	bhi.w	80176b8 <_dtoa_r+0x2d8>
 8017598:	2b05      	cmp	r3, #5
 801759a:	bfc4      	itt	gt
 801759c:	3b04      	subgt	r3, #4
 801759e:	9306      	strgt	r3, [sp, #24]
 80175a0:	9b06      	ldr	r3, [sp, #24]
 80175a2:	f1a3 0302 	sub.w	r3, r3, #2
 80175a6:	bfcc      	ite	gt
 80175a8:	2500      	movgt	r5, #0
 80175aa:	2501      	movle	r5, #1
 80175ac:	2b03      	cmp	r3, #3
 80175ae:	f200 808f 	bhi.w	80176d0 <_dtoa_r+0x2f0>
 80175b2:	e8df f003 	tbb	[pc, r3]
 80175b6:	7f7d      	.short	0x7f7d
 80175b8:	7131      	.short	0x7131
 80175ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80175be:	441d      	add	r5, r3
 80175c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80175c4:	2820      	cmp	r0, #32
 80175c6:	dd13      	ble.n	80175f0 <_dtoa_r+0x210>
 80175c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80175cc:	9b00      	ldr	r3, [sp, #0]
 80175ce:	fa08 f800 	lsl.w	r8, r8, r0
 80175d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80175d6:	fa23 f000 	lsr.w	r0, r3, r0
 80175da:	ea48 0000 	orr.w	r0, r8, r0
 80175de:	f7e8 ffc1 	bl	8000564 <__aeabi_ui2d>
 80175e2:	2301      	movs	r3, #1
 80175e4:	4682      	mov	sl, r0
 80175e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80175ea:	3d01      	subs	r5, #1
 80175ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80175ee:	e772      	b.n	80174d6 <_dtoa_r+0xf6>
 80175f0:	9b00      	ldr	r3, [sp, #0]
 80175f2:	f1c0 0020 	rsb	r0, r0, #32
 80175f6:	fa03 f000 	lsl.w	r0, r3, r0
 80175fa:	e7f0      	b.n	80175de <_dtoa_r+0x1fe>
 80175fc:	2301      	movs	r3, #1
 80175fe:	e7b1      	b.n	8017564 <_dtoa_r+0x184>
 8017600:	900f      	str	r0, [sp, #60]	; 0x3c
 8017602:	e7b0      	b.n	8017566 <_dtoa_r+0x186>
 8017604:	9b05      	ldr	r3, [sp, #20]
 8017606:	eba3 030a 	sub.w	r3, r3, sl
 801760a:	9305      	str	r3, [sp, #20]
 801760c:	f1ca 0300 	rsb	r3, sl, #0
 8017610:	9307      	str	r3, [sp, #28]
 8017612:	2300      	movs	r3, #0
 8017614:	930e      	str	r3, [sp, #56]	; 0x38
 8017616:	e7bb      	b.n	8017590 <_dtoa_r+0x1b0>
 8017618:	2301      	movs	r3, #1
 801761a:	930a      	str	r3, [sp, #40]	; 0x28
 801761c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801761e:	2b00      	cmp	r3, #0
 8017620:	dd59      	ble.n	80176d6 <_dtoa_r+0x2f6>
 8017622:	9302      	str	r3, [sp, #8]
 8017624:	4699      	mov	r9, r3
 8017626:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017628:	2200      	movs	r2, #0
 801762a:	6072      	str	r2, [r6, #4]
 801762c:	2204      	movs	r2, #4
 801762e:	f102 0014 	add.w	r0, r2, #20
 8017632:	4298      	cmp	r0, r3
 8017634:	6871      	ldr	r1, [r6, #4]
 8017636:	d953      	bls.n	80176e0 <_dtoa_r+0x300>
 8017638:	4620      	mov	r0, r4
 801763a:	f001 f89d 	bl	8018778 <_Balloc>
 801763e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017640:	6030      	str	r0, [r6, #0]
 8017642:	f1b9 0f0e 	cmp.w	r9, #14
 8017646:	f8d3 b000 	ldr.w	fp, [r3]
 801764a:	f200 80e6 	bhi.w	801781a <_dtoa_r+0x43a>
 801764e:	2d00      	cmp	r5, #0
 8017650:	f000 80e3 	beq.w	801781a <_dtoa_r+0x43a>
 8017654:	ed9d 7b00 	vldr	d7, [sp]
 8017658:	f1ba 0f00 	cmp.w	sl, #0
 801765c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017660:	dd74      	ble.n	801774c <_dtoa_r+0x36c>
 8017662:	4a2a      	ldr	r2, [pc, #168]	; (801770c <_dtoa_r+0x32c>)
 8017664:	f00a 030f 	and.w	r3, sl, #15
 8017668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801766c:	ed93 7b00 	vldr	d7, [r3]
 8017670:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017674:	06f0      	lsls	r0, r6, #27
 8017676:	ed8d 7b08 	vstr	d7, [sp, #32]
 801767a:	d565      	bpl.n	8017748 <_dtoa_r+0x368>
 801767c:	4b24      	ldr	r3, [pc, #144]	; (8017710 <_dtoa_r+0x330>)
 801767e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017682:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017686:	f7e9 f911 	bl	80008ac <__aeabi_ddiv>
 801768a:	e9cd 0100 	strd	r0, r1, [sp]
 801768e:	f006 060f 	and.w	r6, r6, #15
 8017692:	2503      	movs	r5, #3
 8017694:	4f1e      	ldr	r7, [pc, #120]	; (8017710 <_dtoa_r+0x330>)
 8017696:	e04c      	b.n	8017732 <_dtoa_r+0x352>
 8017698:	2301      	movs	r3, #1
 801769a:	930a      	str	r3, [sp, #40]	; 0x28
 801769c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801769e:	4453      	add	r3, sl
 80176a0:	f103 0901 	add.w	r9, r3, #1
 80176a4:	9302      	str	r3, [sp, #8]
 80176a6:	464b      	mov	r3, r9
 80176a8:	2b01      	cmp	r3, #1
 80176aa:	bfb8      	it	lt
 80176ac:	2301      	movlt	r3, #1
 80176ae:	e7ba      	b.n	8017626 <_dtoa_r+0x246>
 80176b0:	2300      	movs	r3, #0
 80176b2:	e7b2      	b.n	801761a <_dtoa_r+0x23a>
 80176b4:	2300      	movs	r3, #0
 80176b6:	e7f0      	b.n	801769a <_dtoa_r+0x2ba>
 80176b8:	2501      	movs	r5, #1
 80176ba:	2300      	movs	r3, #0
 80176bc:	9306      	str	r3, [sp, #24]
 80176be:	950a      	str	r5, [sp, #40]	; 0x28
 80176c0:	f04f 33ff 	mov.w	r3, #4294967295
 80176c4:	9302      	str	r3, [sp, #8]
 80176c6:	4699      	mov	r9, r3
 80176c8:	2200      	movs	r2, #0
 80176ca:	2312      	movs	r3, #18
 80176cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80176ce:	e7aa      	b.n	8017626 <_dtoa_r+0x246>
 80176d0:	2301      	movs	r3, #1
 80176d2:	930a      	str	r3, [sp, #40]	; 0x28
 80176d4:	e7f4      	b.n	80176c0 <_dtoa_r+0x2e0>
 80176d6:	2301      	movs	r3, #1
 80176d8:	9302      	str	r3, [sp, #8]
 80176da:	4699      	mov	r9, r3
 80176dc:	461a      	mov	r2, r3
 80176de:	e7f5      	b.n	80176cc <_dtoa_r+0x2ec>
 80176e0:	3101      	adds	r1, #1
 80176e2:	6071      	str	r1, [r6, #4]
 80176e4:	0052      	lsls	r2, r2, #1
 80176e6:	e7a2      	b.n	801762e <_dtoa_r+0x24e>
 80176e8:	636f4361 	.word	0x636f4361
 80176ec:	3fd287a7 	.word	0x3fd287a7
 80176f0:	8b60c8b3 	.word	0x8b60c8b3
 80176f4:	3fc68a28 	.word	0x3fc68a28
 80176f8:	509f79fb 	.word	0x509f79fb
 80176fc:	3fd34413 	.word	0x3fd34413
 8017700:	7ff00000 	.word	0x7ff00000
 8017704:	0801d0e4 	.word	0x0801d0e4
 8017708:	3ff80000 	.word	0x3ff80000
 801770c:	0801cfe8 	.word	0x0801cfe8
 8017710:	0801cfc0 	.word	0x0801cfc0
 8017714:	0801cf5a 	.word	0x0801cf5a
 8017718:	07f1      	lsls	r1, r6, #31
 801771a:	d508      	bpl.n	801772e <_dtoa_r+0x34e>
 801771c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017724:	f7e8 ff98 	bl	8000658 <__aeabi_dmul>
 8017728:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801772c:	3501      	adds	r5, #1
 801772e:	1076      	asrs	r6, r6, #1
 8017730:	3708      	adds	r7, #8
 8017732:	2e00      	cmp	r6, #0
 8017734:	d1f0      	bne.n	8017718 <_dtoa_r+0x338>
 8017736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801773a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801773e:	f7e9 f8b5 	bl	80008ac <__aeabi_ddiv>
 8017742:	e9cd 0100 	strd	r0, r1, [sp]
 8017746:	e01a      	b.n	801777e <_dtoa_r+0x39e>
 8017748:	2502      	movs	r5, #2
 801774a:	e7a3      	b.n	8017694 <_dtoa_r+0x2b4>
 801774c:	f000 80a0 	beq.w	8017890 <_dtoa_r+0x4b0>
 8017750:	f1ca 0600 	rsb	r6, sl, #0
 8017754:	4b9f      	ldr	r3, [pc, #636]	; (80179d4 <_dtoa_r+0x5f4>)
 8017756:	4fa0      	ldr	r7, [pc, #640]	; (80179d8 <_dtoa_r+0x5f8>)
 8017758:	f006 020f 	and.w	r2, r6, #15
 801775c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017764:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017768:	f7e8 ff76 	bl	8000658 <__aeabi_dmul>
 801776c:	e9cd 0100 	strd	r0, r1, [sp]
 8017770:	1136      	asrs	r6, r6, #4
 8017772:	2300      	movs	r3, #0
 8017774:	2502      	movs	r5, #2
 8017776:	2e00      	cmp	r6, #0
 8017778:	d17f      	bne.n	801787a <_dtoa_r+0x49a>
 801777a:	2b00      	cmp	r3, #0
 801777c:	d1e1      	bne.n	8017742 <_dtoa_r+0x362>
 801777e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017780:	2b00      	cmp	r3, #0
 8017782:	f000 8087 	beq.w	8017894 <_dtoa_r+0x4b4>
 8017786:	e9dd 6700 	ldrd	r6, r7, [sp]
 801778a:	2200      	movs	r2, #0
 801778c:	4b93      	ldr	r3, [pc, #588]	; (80179dc <_dtoa_r+0x5fc>)
 801778e:	4630      	mov	r0, r6
 8017790:	4639      	mov	r1, r7
 8017792:	f7e9 f9d3 	bl	8000b3c <__aeabi_dcmplt>
 8017796:	2800      	cmp	r0, #0
 8017798:	d07c      	beq.n	8017894 <_dtoa_r+0x4b4>
 801779a:	f1b9 0f00 	cmp.w	r9, #0
 801779e:	d079      	beq.n	8017894 <_dtoa_r+0x4b4>
 80177a0:	9b02      	ldr	r3, [sp, #8]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	dd35      	ble.n	8017812 <_dtoa_r+0x432>
 80177a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80177aa:	9308      	str	r3, [sp, #32]
 80177ac:	4639      	mov	r1, r7
 80177ae:	2200      	movs	r2, #0
 80177b0:	4b8b      	ldr	r3, [pc, #556]	; (80179e0 <_dtoa_r+0x600>)
 80177b2:	4630      	mov	r0, r6
 80177b4:	f7e8 ff50 	bl	8000658 <__aeabi_dmul>
 80177b8:	e9cd 0100 	strd	r0, r1, [sp]
 80177bc:	9f02      	ldr	r7, [sp, #8]
 80177be:	3501      	adds	r5, #1
 80177c0:	4628      	mov	r0, r5
 80177c2:	f7e8 fedf 	bl	8000584 <__aeabi_i2d>
 80177c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177ca:	f7e8 ff45 	bl	8000658 <__aeabi_dmul>
 80177ce:	2200      	movs	r2, #0
 80177d0:	4b84      	ldr	r3, [pc, #528]	; (80179e4 <_dtoa_r+0x604>)
 80177d2:	f7e8 fd8b 	bl	80002ec <__adddf3>
 80177d6:	4605      	mov	r5, r0
 80177d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80177dc:	2f00      	cmp	r7, #0
 80177de:	d15d      	bne.n	801789c <_dtoa_r+0x4bc>
 80177e0:	2200      	movs	r2, #0
 80177e2:	4b81      	ldr	r3, [pc, #516]	; (80179e8 <_dtoa_r+0x608>)
 80177e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177e8:	f7e8 fd7e 	bl	80002e8 <__aeabi_dsub>
 80177ec:	462a      	mov	r2, r5
 80177ee:	4633      	mov	r3, r6
 80177f0:	e9cd 0100 	strd	r0, r1, [sp]
 80177f4:	f7e9 f9c0 	bl	8000b78 <__aeabi_dcmpgt>
 80177f8:	2800      	cmp	r0, #0
 80177fa:	f040 8288 	bne.w	8017d0e <_dtoa_r+0x92e>
 80177fe:	462a      	mov	r2, r5
 8017800:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017808:	f7e9 f998 	bl	8000b3c <__aeabi_dcmplt>
 801780c:	2800      	cmp	r0, #0
 801780e:	f040 827c 	bne.w	8017d0a <_dtoa_r+0x92a>
 8017812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017816:	e9cd 2300 	strd	r2, r3, [sp]
 801781a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801781c:	2b00      	cmp	r3, #0
 801781e:	f2c0 8150 	blt.w	8017ac2 <_dtoa_r+0x6e2>
 8017822:	f1ba 0f0e 	cmp.w	sl, #14
 8017826:	f300 814c 	bgt.w	8017ac2 <_dtoa_r+0x6e2>
 801782a:	4b6a      	ldr	r3, [pc, #424]	; (80179d4 <_dtoa_r+0x5f4>)
 801782c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017830:	ed93 7b00 	vldr	d7, [r3]
 8017834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017836:	2b00      	cmp	r3, #0
 8017838:	ed8d 7b02 	vstr	d7, [sp, #8]
 801783c:	f280 80d8 	bge.w	80179f0 <_dtoa_r+0x610>
 8017840:	f1b9 0f00 	cmp.w	r9, #0
 8017844:	f300 80d4 	bgt.w	80179f0 <_dtoa_r+0x610>
 8017848:	f040 825e 	bne.w	8017d08 <_dtoa_r+0x928>
 801784c:	2200      	movs	r2, #0
 801784e:	4b66      	ldr	r3, [pc, #408]	; (80179e8 <_dtoa_r+0x608>)
 8017850:	ec51 0b17 	vmov	r0, r1, d7
 8017854:	f7e8 ff00 	bl	8000658 <__aeabi_dmul>
 8017858:	e9dd 2300 	ldrd	r2, r3, [sp]
 801785c:	f7e9 f982 	bl	8000b64 <__aeabi_dcmpge>
 8017860:	464f      	mov	r7, r9
 8017862:	464e      	mov	r6, r9
 8017864:	2800      	cmp	r0, #0
 8017866:	f040 8234 	bne.w	8017cd2 <_dtoa_r+0x8f2>
 801786a:	2331      	movs	r3, #49	; 0x31
 801786c:	f10b 0501 	add.w	r5, fp, #1
 8017870:	f88b 3000 	strb.w	r3, [fp]
 8017874:	f10a 0a01 	add.w	sl, sl, #1
 8017878:	e22f      	b.n	8017cda <_dtoa_r+0x8fa>
 801787a:	07f2      	lsls	r2, r6, #31
 801787c:	d505      	bpl.n	801788a <_dtoa_r+0x4aa>
 801787e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017882:	f7e8 fee9 	bl	8000658 <__aeabi_dmul>
 8017886:	3501      	adds	r5, #1
 8017888:	2301      	movs	r3, #1
 801788a:	1076      	asrs	r6, r6, #1
 801788c:	3708      	adds	r7, #8
 801788e:	e772      	b.n	8017776 <_dtoa_r+0x396>
 8017890:	2502      	movs	r5, #2
 8017892:	e774      	b.n	801777e <_dtoa_r+0x39e>
 8017894:	f8cd a020 	str.w	sl, [sp, #32]
 8017898:	464f      	mov	r7, r9
 801789a:	e791      	b.n	80177c0 <_dtoa_r+0x3e0>
 801789c:	4b4d      	ldr	r3, [pc, #308]	; (80179d4 <_dtoa_r+0x5f4>)
 801789e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80178a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80178a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d047      	beq.n	801793c <_dtoa_r+0x55c>
 80178ac:	4602      	mov	r2, r0
 80178ae:	460b      	mov	r3, r1
 80178b0:	2000      	movs	r0, #0
 80178b2:	494e      	ldr	r1, [pc, #312]	; (80179ec <_dtoa_r+0x60c>)
 80178b4:	f7e8 fffa 	bl	80008ac <__aeabi_ddiv>
 80178b8:	462a      	mov	r2, r5
 80178ba:	4633      	mov	r3, r6
 80178bc:	f7e8 fd14 	bl	80002e8 <__aeabi_dsub>
 80178c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80178c4:	465d      	mov	r5, fp
 80178c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178ca:	f7e9 f975 	bl	8000bb8 <__aeabi_d2iz>
 80178ce:	4606      	mov	r6, r0
 80178d0:	f7e8 fe58 	bl	8000584 <__aeabi_i2d>
 80178d4:	4602      	mov	r2, r0
 80178d6:	460b      	mov	r3, r1
 80178d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178dc:	f7e8 fd04 	bl	80002e8 <__aeabi_dsub>
 80178e0:	3630      	adds	r6, #48	; 0x30
 80178e2:	f805 6b01 	strb.w	r6, [r5], #1
 80178e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80178ea:	e9cd 0100 	strd	r0, r1, [sp]
 80178ee:	f7e9 f925 	bl	8000b3c <__aeabi_dcmplt>
 80178f2:	2800      	cmp	r0, #0
 80178f4:	d163      	bne.n	80179be <_dtoa_r+0x5de>
 80178f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178fa:	2000      	movs	r0, #0
 80178fc:	4937      	ldr	r1, [pc, #220]	; (80179dc <_dtoa_r+0x5fc>)
 80178fe:	f7e8 fcf3 	bl	80002e8 <__aeabi_dsub>
 8017902:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017906:	f7e9 f919 	bl	8000b3c <__aeabi_dcmplt>
 801790a:	2800      	cmp	r0, #0
 801790c:	f040 80b7 	bne.w	8017a7e <_dtoa_r+0x69e>
 8017910:	eba5 030b 	sub.w	r3, r5, fp
 8017914:	429f      	cmp	r7, r3
 8017916:	f77f af7c 	ble.w	8017812 <_dtoa_r+0x432>
 801791a:	2200      	movs	r2, #0
 801791c:	4b30      	ldr	r3, [pc, #192]	; (80179e0 <_dtoa_r+0x600>)
 801791e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017922:	f7e8 fe99 	bl	8000658 <__aeabi_dmul>
 8017926:	2200      	movs	r2, #0
 8017928:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801792c:	4b2c      	ldr	r3, [pc, #176]	; (80179e0 <_dtoa_r+0x600>)
 801792e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017932:	f7e8 fe91 	bl	8000658 <__aeabi_dmul>
 8017936:	e9cd 0100 	strd	r0, r1, [sp]
 801793a:	e7c4      	b.n	80178c6 <_dtoa_r+0x4e6>
 801793c:	462a      	mov	r2, r5
 801793e:	4633      	mov	r3, r6
 8017940:	f7e8 fe8a 	bl	8000658 <__aeabi_dmul>
 8017944:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017948:	eb0b 0507 	add.w	r5, fp, r7
 801794c:	465e      	mov	r6, fp
 801794e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017952:	f7e9 f931 	bl	8000bb8 <__aeabi_d2iz>
 8017956:	4607      	mov	r7, r0
 8017958:	f7e8 fe14 	bl	8000584 <__aeabi_i2d>
 801795c:	3730      	adds	r7, #48	; 0x30
 801795e:	4602      	mov	r2, r0
 8017960:	460b      	mov	r3, r1
 8017962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017966:	f7e8 fcbf 	bl	80002e8 <__aeabi_dsub>
 801796a:	f806 7b01 	strb.w	r7, [r6], #1
 801796e:	42ae      	cmp	r6, r5
 8017970:	e9cd 0100 	strd	r0, r1, [sp]
 8017974:	f04f 0200 	mov.w	r2, #0
 8017978:	d126      	bne.n	80179c8 <_dtoa_r+0x5e8>
 801797a:	4b1c      	ldr	r3, [pc, #112]	; (80179ec <_dtoa_r+0x60c>)
 801797c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017980:	f7e8 fcb4 	bl	80002ec <__adddf3>
 8017984:	4602      	mov	r2, r0
 8017986:	460b      	mov	r3, r1
 8017988:	e9dd 0100 	ldrd	r0, r1, [sp]
 801798c:	f7e9 f8f4 	bl	8000b78 <__aeabi_dcmpgt>
 8017990:	2800      	cmp	r0, #0
 8017992:	d174      	bne.n	8017a7e <_dtoa_r+0x69e>
 8017994:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017998:	2000      	movs	r0, #0
 801799a:	4914      	ldr	r1, [pc, #80]	; (80179ec <_dtoa_r+0x60c>)
 801799c:	f7e8 fca4 	bl	80002e8 <__aeabi_dsub>
 80179a0:	4602      	mov	r2, r0
 80179a2:	460b      	mov	r3, r1
 80179a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179a8:	f7e9 f8c8 	bl	8000b3c <__aeabi_dcmplt>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	f43f af30 	beq.w	8017812 <_dtoa_r+0x432>
 80179b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179b6:	2b30      	cmp	r3, #48	; 0x30
 80179b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80179bc:	d002      	beq.n	80179c4 <_dtoa_r+0x5e4>
 80179be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80179c2:	e04a      	b.n	8017a5a <_dtoa_r+0x67a>
 80179c4:	4615      	mov	r5, r2
 80179c6:	e7f4      	b.n	80179b2 <_dtoa_r+0x5d2>
 80179c8:	4b05      	ldr	r3, [pc, #20]	; (80179e0 <_dtoa_r+0x600>)
 80179ca:	f7e8 fe45 	bl	8000658 <__aeabi_dmul>
 80179ce:	e9cd 0100 	strd	r0, r1, [sp]
 80179d2:	e7bc      	b.n	801794e <_dtoa_r+0x56e>
 80179d4:	0801cfe8 	.word	0x0801cfe8
 80179d8:	0801cfc0 	.word	0x0801cfc0
 80179dc:	3ff00000 	.word	0x3ff00000
 80179e0:	40240000 	.word	0x40240000
 80179e4:	401c0000 	.word	0x401c0000
 80179e8:	40140000 	.word	0x40140000
 80179ec:	3fe00000 	.word	0x3fe00000
 80179f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80179f4:	465d      	mov	r5, fp
 80179f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179fa:	4630      	mov	r0, r6
 80179fc:	4639      	mov	r1, r7
 80179fe:	f7e8 ff55 	bl	80008ac <__aeabi_ddiv>
 8017a02:	f7e9 f8d9 	bl	8000bb8 <__aeabi_d2iz>
 8017a06:	4680      	mov	r8, r0
 8017a08:	f7e8 fdbc 	bl	8000584 <__aeabi_i2d>
 8017a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a10:	f7e8 fe22 	bl	8000658 <__aeabi_dmul>
 8017a14:	4602      	mov	r2, r0
 8017a16:	460b      	mov	r3, r1
 8017a18:	4630      	mov	r0, r6
 8017a1a:	4639      	mov	r1, r7
 8017a1c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017a20:	f7e8 fc62 	bl	80002e8 <__aeabi_dsub>
 8017a24:	f805 6b01 	strb.w	r6, [r5], #1
 8017a28:	eba5 060b 	sub.w	r6, r5, fp
 8017a2c:	45b1      	cmp	r9, r6
 8017a2e:	4602      	mov	r2, r0
 8017a30:	460b      	mov	r3, r1
 8017a32:	d139      	bne.n	8017aa8 <_dtoa_r+0x6c8>
 8017a34:	f7e8 fc5a 	bl	80002ec <__adddf3>
 8017a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a3c:	4606      	mov	r6, r0
 8017a3e:	460f      	mov	r7, r1
 8017a40:	f7e9 f89a 	bl	8000b78 <__aeabi_dcmpgt>
 8017a44:	b9c8      	cbnz	r0, 8017a7a <_dtoa_r+0x69a>
 8017a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	4639      	mov	r1, r7
 8017a4e:	f7e9 f86b 	bl	8000b28 <__aeabi_dcmpeq>
 8017a52:	b110      	cbz	r0, 8017a5a <_dtoa_r+0x67a>
 8017a54:	f018 0f01 	tst.w	r8, #1
 8017a58:	d10f      	bne.n	8017a7a <_dtoa_r+0x69a>
 8017a5a:	9904      	ldr	r1, [sp, #16]
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	f000 febf 	bl	80187e0 <_Bfree>
 8017a62:	2300      	movs	r3, #0
 8017a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a66:	702b      	strb	r3, [r5, #0]
 8017a68:	f10a 0301 	add.w	r3, sl, #1
 8017a6c:	6013      	str	r3, [r2, #0]
 8017a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	f000 8241 	beq.w	8017ef8 <_dtoa_r+0xb18>
 8017a76:	601d      	str	r5, [r3, #0]
 8017a78:	e23e      	b.n	8017ef8 <_dtoa_r+0xb18>
 8017a7a:	f8cd a020 	str.w	sl, [sp, #32]
 8017a7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017a82:	2a39      	cmp	r2, #57	; 0x39
 8017a84:	f105 33ff 	add.w	r3, r5, #4294967295
 8017a88:	d108      	bne.n	8017a9c <_dtoa_r+0x6bc>
 8017a8a:	459b      	cmp	fp, r3
 8017a8c:	d10a      	bne.n	8017aa4 <_dtoa_r+0x6c4>
 8017a8e:	9b08      	ldr	r3, [sp, #32]
 8017a90:	3301      	adds	r3, #1
 8017a92:	9308      	str	r3, [sp, #32]
 8017a94:	2330      	movs	r3, #48	; 0x30
 8017a96:	f88b 3000 	strb.w	r3, [fp]
 8017a9a:	465b      	mov	r3, fp
 8017a9c:	781a      	ldrb	r2, [r3, #0]
 8017a9e:	3201      	adds	r2, #1
 8017aa0:	701a      	strb	r2, [r3, #0]
 8017aa2:	e78c      	b.n	80179be <_dtoa_r+0x5de>
 8017aa4:	461d      	mov	r5, r3
 8017aa6:	e7ea      	b.n	8017a7e <_dtoa_r+0x69e>
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	4b9b      	ldr	r3, [pc, #620]	; (8017d18 <_dtoa_r+0x938>)
 8017aac:	f7e8 fdd4 	bl	8000658 <__aeabi_dmul>
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	4606      	mov	r6, r0
 8017ab6:	460f      	mov	r7, r1
 8017ab8:	f7e9 f836 	bl	8000b28 <__aeabi_dcmpeq>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d09a      	beq.n	80179f6 <_dtoa_r+0x616>
 8017ac0:	e7cb      	b.n	8017a5a <_dtoa_r+0x67a>
 8017ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ac4:	2a00      	cmp	r2, #0
 8017ac6:	f000 808b 	beq.w	8017be0 <_dtoa_r+0x800>
 8017aca:	9a06      	ldr	r2, [sp, #24]
 8017acc:	2a01      	cmp	r2, #1
 8017ace:	dc6e      	bgt.n	8017bae <_dtoa_r+0x7ce>
 8017ad0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017ad2:	2a00      	cmp	r2, #0
 8017ad4:	d067      	beq.n	8017ba6 <_dtoa_r+0x7c6>
 8017ad6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017ada:	9f07      	ldr	r7, [sp, #28]
 8017adc:	9d05      	ldr	r5, [sp, #20]
 8017ade:	9a05      	ldr	r2, [sp, #20]
 8017ae0:	2101      	movs	r1, #1
 8017ae2:	441a      	add	r2, r3
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	9205      	str	r2, [sp, #20]
 8017ae8:	4498      	add	r8, r3
 8017aea:	f000 ff57 	bl	801899c <__i2b>
 8017aee:	4606      	mov	r6, r0
 8017af0:	2d00      	cmp	r5, #0
 8017af2:	dd0c      	ble.n	8017b0e <_dtoa_r+0x72e>
 8017af4:	f1b8 0f00 	cmp.w	r8, #0
 8017af8:	dd09      	ble.n	8017b0e <_dtoa_r+0x72e>
 8017afa:	4545      	cmp	r5, r8
 8017afc:	9a05      	ldr	r2, [sp, #20]
 8017afe:	462b      	mov	r3, r5
 8017b00:	bfa8      	it	ge
 8017b02:	4643      	movge	r3, r8
 8017b04:	1ad2      	subs	r2, r2, r3
 8017b06:	9205      	str	r2, [sp, #20]
 8017b08:	1aed      	subs	r5, r5, r3
 8017b0a:	eba8 0803 	sub.w	r8, r8, r3
 8017b0e:	9b07      	ldr	r3, [sp, #28]
 8017b10:	b1eb      	cbz	r3, 8017b4e <_dtoa_r+0x76e>
 8017b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d067      	beq.n	8017be8 <_dtoa_r+0x808>
 8017b18:	b18f      	cbz	r7, 8017b3e <_dtoa_r+0x75e>
 8017b1a:	4631      	mov	r1, r6
 8017b1c:	463a      	mov	r2, r7
 8017b1e:	4620      	mov	r0, r4
 8017b20:	f000 ffdc 	bl	8018adc <__pow5mult>
 8017b24:	9a04      	ldr	r2, [sp, #16]
 8017b26:	4601      	mov	r1, r0
 8017b28:	4606      	mov	r6, r0
 8017b2a:	4620      	mov	r0, r4
 8017b2c:	f000 ff3f 	bl	80189ae <__multiply>
 8017b30:	9904      	ldr	r1, [sp, #16]
 8017b32:	9008      	str	r0, [sp, #32]
 8017b34:	4620      	mov	r0, r4
 8017b36:	f000 fe53 	bl	80187e0 <_Bfree>
 8017b3a:	9b08      	ldr	r3, [sp, #32]
 8017b3c:	9304      	str	r3, [sp, #16]
 8017b3e:	9b07      	ldr	r3, [sp, #28]
 8017b40:	1bda      	subs	r2, r3, r7
 8017b42:	d004      	beq.n	8017b4e <_dtoa_r+0x76e>
 8017b44:	9904      	ldr	r1, [sp, #16]
 8017b46:	4620      	mov	r0, r4
 8017b48:	f000 ffc8 	bl	8018adc <__pow5mult>
 8017b4c:	9004      	str	r0, [sp, #16]
 8017b4e:	2101      	movs	r1, #1
 8017b50:	4620      	mov	r0, r4
 8017b52:	f000 ff23 	bl	801899c <__i2b>
 8017b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b58:	4607      	mov	r7, r0
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	f000 81d0 	beq.w	8017f00 <_dtoa_r+0xb20>
 8017b60:	461a      	mov	r2, r3
 8017b62:	4601      	mov	r1, r0
 8017b64:	4620      	mov	r0, r4
 8017b66:	f000 ffb9 	bl	8018adc <__pow5mult>
 8017b6a:	9b06      	ldr	r3, [sp, #24]
 8017b6c:	2b01      	cmp	r3, #1
 8017b6e:	4607      	mov	r7, r0
 8017b70:	dc40      	bgt.n	8017bf4 <_dtoa_r+0x814>
 8017b72:	9b00      	ldr	r3, [sp, #0]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d139      	bne.n	8017bec <_dtoa_r+0x80c>
 8017b78:	9b01      	ldr	r3, [sp, #4]
 8017b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d136      	bne.n	8017bf0 <_dtoa_r+0x810>
 8017b82:	9b01      	ldr	r3, [sp, #4]
 8017b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b88:	0d1b      	lsrs	r3, r3, #20
 8017b8a:	051b      	lsls	r3, r3, #20
 8017b8c:	b12b      	cbz	r3, 8017b9a <_dtoa_r+0x7ba>
 8017b8e:	9b05      	ldr	r3, [sp, #20]
 8017b90:	3301      	adds	r3, #1
 8017b92:	9305      	str	r3, [sp, #20]
 8017b94:	f108 0801 	add.w	r8, r8, #1
 8017b98:	2301      	movs	r3, #1
 8017b9a:	9307      	str	r3, [sp, #28]
 8017b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d12a      	bne.n	8017bf8 <_dtoa_r+0x818>
 8017ba2:	2001      	movs	r0, #1
 8017ba4:	e030      	b.n	8017c08 <_dtoa_r+0x828>
 8017ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ba8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017bac:	e795      	b.n	8017ada <_dtoa_r+0x6fa>
 8017bae:	9b07      	ldr	r3, [sp, #28]
 8017bb0:	f109 37ff 	add.w	r7, r9, #4294967295
 8017bb4:	42bb      	cmp	r3, r7
 8017bb6:	bfbf      	itttt	lt
 8017bb8:	9b07      	ldrlt	r3, [sp, #28]
 8017bba:	9707      	strlt	r7, [sp, #28]
 8017bbc:	1afa      	sublt	r2, r7, r3
 8017bbe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017bc0:	bfbb      	ittet	lt
 8017bc2:	189b      	addlt	r3, r3, r2
 8017bc4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017bc6:	1bdf      	subge	r7, r3, r7
 8017bc8:	2700      	movlt	r7, #0
 8017bca:	f1b9 0f00 	cmp.w	r9, #0
 8017bce:	bfb5      	itete	lt
 8017bd0:	9b05      	ldrlt	r3, [sp, #20]
 8017bd2:	9d05      	ldrge	r5, [sp, #20]
 8017bd4:	eba3 0509 	sublt.w	r5, r3, r9
 8017bd8:	464b      	movge	r3, r9
 8017bda:	bfb8      	it	lt
 8017bdc:	2300      	movlt	r3, #0
 8017bde:	e77e      	b.n	8017ade <_dtoa_r+0x6fe>
 8017be0:	9f07      	ldr	r7, [sp, #28]
 8017be2:	9d05      	ldr	r5, [sp, #20]
 8017be4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017be6:	e783      	b.n	8017af0 <_dtoa_r+0x710>
 8017be8:	9a07      	ldr	r2, [sp, #28]
 8017bea:	e7ab      	b.n	8017b44 <_dtoa_r+0x764>
 8017bec:	2300      	movs	r3, #0
 8017bee:	e7d4      	b.n	8017b9a <_dtoa_r+0x7ba>
 8017bf0:	9b00      	ldr	r3, [sp, #0]
 8017bf2:	e7d2      	b.n	8017b9a <_dtoa_r+0x7ba>
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	9307      	str	r3, [sp, #28]
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017bfe:	6918      	ldr	r0, [r3, #16]
 8017c00:	f000 fe7e 	bl	8018900 <__hi0bits>
 8017c04:	f1c0 0020 	rsb	r0, r0, #32
 8017c08:	4440      	add	r0, r8
 8017c0a:	f010 001f 	ands.w	r0, r0, #31
 8017c0e:	d047      	beq.n	8017ca0 <_dtoa_r+0x8c0>
 8017c10:	f1c0 0320 	rsb	r3, r0, #32
 8017c14:	2b04      	cmp	r3, #4
 8017c16:	dd3b      	ble.n	8017c90 <_dtoa_r+0x8b0>
 8017c18:	9b05      	ldr	r3, [sp, #20]
 8017c1a:	f1c0 001c 	rsb	r0, r0, #28
 8017c1e:	4403      	add	r3, r0
 8017c20:	9305      	str	r3, [sp, #20]
 8017c22:	4405      	add	r5, r0
 8017c24:	4480      	add	r8, r0
 8017c26:	9b05      	ldr	r3, [sp, #20]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	dd05      	ble.n	8017c38 <_dtoa_r+0x858>
 8017c2c:	461a      	mov	r2, r3
 8017c2e:	9904      	ldr	r1, [sp, #16]
 8017c30:	4620      	mov	r0, r4
 8017c32:	f000 ffa1 	bl	8018b78 <__lshift>
 8017c36:	9004      	str	r0, [sp, #16]
 8017c38:	f1b8 0f00 	cmp.w	r8, #0
 8017c3c:	dd05      	ble.n	8017c4a <_dtoa_r+0x86a>
 8017c3e:	4639      	mov	r1, r7
 8017c40:	4642      	mov	r2, r8
 8017c42:	4620      	mov	r0, r4
 8017c44:	f000 ff98 	bl	8018b78 <__lshift>
 8017c48:	4607      	mov	r7, r0
 8017c4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c4c:	b353      	cbz	r3, 8017ca4 <_dtoa_r+0x8c4>
 8017c4e:	4639      	mov	r1, r7
 8017c50:	9804      	ldr	r0, [sp, #16]
 8017c52:	f000 ffe5 	bl	8018c20 <__mcmp>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	da24      	bge.n	8017ca4 <_dtoa_r+0x8c4>
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	220a      	movs	r2, #10
 8017c5e:	9904      	ldr	r1, [sp, #16]
 8017c60:	4620      	mov	r0, r4
 8017c62:	f000 fdd4 	bl	801880e <__multadd>
 8017c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c68:	9004      	str	r0, [sp, #16]
 8017c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	f000 814d 	beq.w	8017f0e <_dtoa_r+0xb2e>
 8017c74:	2300      	movs	r3, #0
 8017c76:	4631      	mov	r1, r6
 8017c78:	220a      	movs	r2, #10
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	f000 fdc7 	bl	801880e <__multadd>
 8017c80:	9b02      	ldr	r3, [sp, #8]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	4606      	mov	r6, r0
 8017c86:	dc4f      	bgt.n	8017d28 <_dtoa_r+0x948>
 8017c88:	9b06      	ldr	r3, [sp, #24]
 8017c8a:	2b02      	cmp	r3, #2
 8017c8c:	dd4c      	ble.n	8017d28 <_dtoa_r+0x948>
 8017c8e:	e011      	b.n	8017cb4 <_dtoa_r+0x8d4>
 8017c90:	d0c9      	beq.n	8017c26 <_dtoa_r+0x846>
 8017c92:	9a05      	ldr	r2, [sp, #20]
 8017c94:	331c      	adds	r3, #28
 8017c96:	441a      	add	r2, r3
 8017c98:	9205      	str	r2, [sp, #20]
 8017c9a:	441d      	add	r5, r3
 8017c9c:	4498      	add	r8, r3
 8017c9e:	e7c2      	b.n	8017c26 <_dtoa_r+0x846>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	e7f6      	b.n	8017c92 <_dtoa_r+0x8b2>
 8017ca4:	f1b9 0f00 	cmp.w	r9, #0
 8017ca8:	dc38      	bgt.n	8017d1c <_dtoa_r+0x93c>
 8017caa:	9b06      	ldr	r3, [sp, #24]
 8017cac:	2b02      	cmp	r3, #2
 8017cae:	dd35      	ble.n	8017d1c <_dtoa_r+0x93c>
 8017cb0:	f8cd 9008 	str.w	r9, [sp, #8]
 8017cb4:	9b02      	ldr	r3, [sp, #8]
 8017cb6:	b963      	cbnz	r3, 8017cd2 <_dtoa_r+0x8f2>
 8017cb8:	4639      	mov	r1, r7
 8017cba:	2205      	movs	r2, #5
 8017cbc:	4620      	mov	r0, r4
 8017cbe:	f000 fda6 	bl	801880e <__multadd>
 8017cc2:	4601      	mov	r1, r0
 8017cc4:	4607      	mov	r7, r0
 8017cc6:	9804      	ldr	r0, [sp, #16]
 8017cc8:	f000 ffaa 	bl	8018c20 <__mcmp>
 8017ccc:	2800      	cmp	r0, #0
 8017cce:	f73f adcc 	bgt.w	801786a <_dtoa_r+0x48a>
 8017cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cd4:	465d      	mov	r5, fp
 8017cd6:	ea6f 0a03 	mvn.w	sl, r3
 8017cda:	f04f 0900 	mov.w	r9, #0
 8017cde:	4639      	mov	r1, r7
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	f000 fd7d 	bl	80187e0 <_Bfree>
 8017ce6:	2e00      	cmp	r6, #0
 8017ce8:	f43f aeb7 	beq.w	8017a5a <_dtoa_r+0x67a>
 8017cec:	f1b9 0f00 	cmp.w	r9, #0
 8017cf0:	d005      	beq.n	8017cfe <_dtoa_r+0x91e>
 8017cf2:	45b1      	cmp	r9, r6
 8017cf4:	d003      	beq.n	8017cfe <_dtoa_r+0x91e>
 8017cf6:	4649      	mov	r1, r9
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	f000 fd71 	bl	80187e0 <_Bfree>
 8017cfe:	4631      	mov	r1, r6
 8017d00:	4620      	mov	r0, r4
 8017d02:	f000 fd6d 	bl	80187e0 <_Bfree>
 8017d06:	e6a8      	b.n	8017a5a <_dtoa_r+0x67a>
 8017d08:	2700      	movs	r7, #0
 8017d0a:	463e      	mov	r6, r7
 8017d0c:	e7e1      	b.n	8017cd2 <_dtoa_r+0x8f2>
 8017d0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017d12:	463e      	mov	r6, r7
 8017d14:	e5a9      	b.n	801786a <_dtoa_r+0x48a>
 8017d16:	bf00      	nop
 8017d18:	40240000 	.word	0x40240000
 8017d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	f000 80fa 	beq.w	8017f1c <_dtoa_r+0xb3c>
 8017d28:	2d00      	cmp	r5, #0
 8017d2a:	dd05      	ble.n	8017d38 <_dtoa_r+0x958>
 8017d2c:	4631      	mov	r1, r6
 8017d2e:	462a      	mov	r2, r5
 8017d30:	4620      	mov	r0, r4
 8017d32:	f000 ff21 	bl	8018b78 <__lshift>
 8017d36:	4606      	mov	r6, r0
 8017d38:	9b07      	ldr	r3, [sp, #28]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d04c      	beq.n	8017dd8 <_dtoa_r+0x9f8>
 8017d3e:	6871      	ldr	r1, [r6, #4]
 8017d40:	4620      	mov	r0, r4
 8017d42:	f000 fd19 	bl	8018778 <_Balloc>
 8017d46:	6932      	ldr	r2, [r6, #16]
 8017d48:	3202      	adds	r2, #2
 8017d4a:	4605      	mov	r5, r0
 8017d4c:	0092      	lsls	r2, r2, #2
 8017d4e:	f106 010c 	add.w	r1, r6, #12
 8017d52:	300c      	adds	r0, #12
 8017d54:	f7fd fb9b 	bl	801548e <memcpy>
 8017d58:	2201      	movs	r2, #1
 8017d5a:	4629      	mov	r1, r5
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	f000 ff0b 	bl	8018b78 <__lshift>
 8017d62:	9b00      	ldr	r3, [sp, #0]
 8017d64:	f8cd b014 	str.w	fp, [sp, #20]
 8017d68:	f003 0301 	and.w	r3, r3, #1
 8017d6c:	46b1      	mov	r9, r6
 8017d6e:	9307      	str	r3, [sp, #28]
 8017d70:	4606      	mov	r6, r0
 8017d72:	4639      	mov	r1, r7
 8017d74:	9804      	ldr	r0, [sp, #16]
 8017d76:	f7ff faa5 	bl	80172c4 <quorem>
 8017d7a:	4649      	mov	r1, r9
 8017d7c:	4605      	mov	r5, r0
 8017d7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017d82:	9804      	ldr	r0, [sp, #16]
 8017d84:	f000 ff4c 	bl	8018c20 <__mcmp>
 8017d88:	4632      	mov	r2, r6
 8017d8a:	9000      	str	r0, [sp, #0]
 8017d8c:	4639      	mov	r1, r7
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f000 ff60 	bl	8018c54 <__mdiff>
 8017d94:	68c3      	ldr	r3, [r0, #12]
 8017d96:	4602      	mov	r2, r0
 8017d98:	bb03      	cbnz	r3, 8017ddc <_dtoa_r+0x9fc>
 8017d9a:	4601      	mov	r1, r0
 8017d9c:	9008      	str	r0, [sp, #32]
 8017d9e:	9804      	ldr	r0, [sp, #16]
 8017da0:	f000 ff3e 	bl	8018c20 <__mcmp>
 8017da4:	9a08      	ldr	r2, [sp, #32]
 8017da6:	4603      	mov	r3, r0
 8017da8:	4611      	mov	r1, r2
 8017daa:	4620      	mov	r0, r4
 8017dac:	9308      	str	r3, [sp, #32]
 8017dae:	f000 fd17 	bl	80187e0 <_Bfree>
 8017db2:	9b08      	ldr	r3, [sp, #32]
 8017db4:	b9a3      	cbnz	r3, 8017de0 <_dtoa_r+0xa00>
 8017db6:	9a06      	ldr	r2, [sp, #24]
 8017db8:	b992      	cbnz	r2, 8017de0 <_dtoa_r+0xa00>
 8017dba:	9a07      	ldr	r2, [sp, #28]
 8017dbc:	b982      	cbnz	r2, 8017de0 <_dtoa_r+0xa00>
 8017dbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017dc2:	d029      	beq.n	8017e18 <_dtoa_r+0xa38>
 8017dc4:	9b00      	ldr	r3, [sp, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	dd01      	ble.n	8017dce <_dtoa_r+0x9ee>
 8017dca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017dce:	9b05      	ldr	r3, [sp, #20]
 8017dd0:	1c5d      	adds	r5, r3, #1
 8017dd2:	f883 8000 	strb.w	r8, [r3]
 8017dd6:	e782      	b.n	8017cde <_dtoa_r+0x8fe>
 8017dd8:	4630      	mov	r0, r6
 8017dda:	e7c2      	b.n	8017d62 <_dtoa_r+0x982>
 8017ddc:	2301      	movs	r3, #1
 8017dde:	e7e3      	b.n	8017da8 <_dtoa_r+0x9c8>
 8017de0:	9a00      	ldr	r2, [sp, #0]
 8017de2:	2a00      	cmp	r2, #0
 8017de4:	db04      	blt.n	8017df0 <_dtoa_r+0xa10>
 8017de6:	d125      	bne.n	8017e34 <_dtoa_r+0xa54>
 8017de8:	9a06      	ldr	r2, [sp, #24]
 8017dea:	bb1a      	cbnz	r2, 8017e34 <_dtoa_r+0xa54>
 8017dec:	9a07      	ldr	r2, [sp, #28]
 8017dee:	bb0a      	cbnz	r2, 8017e34 <_dtoa_r+0xa54>
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	ddec      	ble.n	8017dce <_dtoa_r+0x9ee>
 8017df4:	2201      	movs	r2, #1
 8017df6:	9904      	ldr	r1, [sp, #16]
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f000 febd 	bl	8018b78 <__lshift>
 8017dfe:	4639      	mov	r1, r7
 8017e00:	9004      	str	r0, [sp, #16]
 8017e02:	f000 ff0d 	bl	8018c20 <__mcmp>
 8017e06:	2800      	cmp	r0, #0
 8017e08:	dc03      	bgt.n	8017e12 <_dtoa_r+0xa32>
 8017e0a:	d1e0      	bne.n	8017dce <_dtoa_r+0x9ee>
 8017e0c:	f018 0f01 	tst.w	r8, #1
 8017e10:	d0dd      	beq.n	8017dce <_dtoa_r+0x9ee>
 8017e12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e16:	d1d8      	bne.n	8017dca <_dtoa_r+0x9ea>
 8017e18:	9b05      	ldr	r3, [sp, #20]
 8017e1a:	9a05      	ldr	r2, [sp, #20]
 8017e1c:	1c5d      	adds	r5, r3, #1
 8017e1e:	2339      	movs	r3, #57	; 0x39
 8017e20:	7013      	strb	r3, [r2, #0]
 8017e22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e26:	2b39      	cmp	r3, #57	; 0x39
 8017e28:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e2c:	d04f      	beq.n	8017ece <_dtoa_r+0xaee>
 8017e2e:	3301      	adds	r3, #1
 8017e30:	7013      	strb	r3, [r2, #0]
 8017e32:	e754      	b.n	8017cde <_dtoa_r+0x8fe>
 8017e34:	9a05      	ldr	r2, [sp, #20]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	f102 0501 	add.w	r5, r2, #1
 8017e3c:	dd06      	ble.n	8017e4c <_dtoa_r+0xa6c>
 8017e3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e42:	d0e9      	beq.n	8017e18 <_dtoa_r+0xa38>
 8017e44:	f108 0801 	add.w	r8, r8, #1
 8017e48:	9b05      	ldr	r3, [sp, #20]
 8017e4a:	e7c2      	b.n	8017dd2 <_dtoa_r+0x9f2>
 8017e4c:	9a02      	ldr	r2, [sp, #8]
 8017e4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017e52:	eba5 030b 	sub.w	r3, r5, fp
 8017e56:	4293      	cmp	r3, r2
 8017e58:	d021      	beq.n	8017e9e <_dtoa_r+0xabe>
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	220a      	movs	r2, #10
 8017e5e:	9904      	ldr	r1, [sp, #16]
 8017e60:	4620      	mov	r0, r4
 8017e62:	f000 fcd4 	bl	801880e <__multadd>
 8017e66:	45b1      	cmp	r9, r6
 8017e68:	9004      	str	r0, [sp, #16]
 8017e6a:	f04f 0300 	mov.w	r3, #0
 8017e6e:	f04f 020a 	mov.w	r2, #10
 8017e72:	4649      	mov	r1, r9
 8017e74:	4620      	mov	r0, r4
 8017e76:	d105      	bne.n	8017e84 <_dtoa_r+0xaa4>
 8017e78:	f000 fcc9 	bl	801880e <__multadd>
 8017e7c:	4681      	mov	r9, r0
 8017e7e:	4606      	mov	r6, r0
 8017e80:	9505      	str	r5, [sp, #20]
 8017e82:	e776      	b.n	8017d72 <_dtoa_r+0x992>
 8017e84:	f000 fcc3 	bl	801880e <__multadd>
 8017e88:	4631      	mov	r1, r6
 8017e8a:	4681      	mov	r9, r0
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	220a      	movs	r2, #10
 8017e90:	4620      	mov	r0, r4
 8017e92:	f000 fcbc 	bl	801880e <__multadd>
 8017e96:	4606      	mov	r6, r0
 8017e98:	e7f2      	b.n	8017e80 <_dtoa_r+0xaa0>
 8017e9a:	f04f 0900 	mov.w	r9, #0
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	9904      	ldr	r1, [sp, #16]
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	f000 fe68 	bl	8018b78 <__lshift>
 8017ea8:	4639      	mov	r1, r7
 8017eaa:	9004      	str	r0, [sp, #16]
 8017eac:	f000 feb8 	bl	8018c20 <__mcmp>
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	dcb6      	bgt.n	8017e22 <_dtoa_r+0xa42>
 8017eb4:	d102      	bne.n	8017ebc <_dtoa_r+0xadc>
 8017eb6:	f018 0f01 	tst.w	r8, #1
 8017eba:	d1b2      	bne.n	8017e22 <_dtoa_r+0xa42>
 8017ebc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ec0:	2b30      	cmp	r3, #48	; 0x30
 8017ec2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017ec6:	f47f af0a 	bne.w	8017cde <_dtoa_r+0x8fe>
 8017eca:	4615      	mov	r5, r2
 8017ecc:	e7f6      	b.n	8017ebc <_dtoa_r+0xadc>
 8017ece:	4593      	cmp	fp, r2
 8017ed0:	d105      	bne.n	8017ede <_dtoa_r+0xafe>
 8017ed2:	2331      	movs	r3, #49	; 0x31
 8017ed4:	f10a 0a01 	add.w	sl, sl, #1
 8017ed8:	f88b 3000 	strb.w	r3, [fp]
 8017edc:	e6ff      	b.n	8017cde <_dtoa_r+0x8fe>
 8017ede:	4615      	mov	r5, r2
 8017ee0:	e79f      	b.n	8017e22 <_dtoa_r+0xa42>
 8017ee2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017f48 <_dtoa_r+0xb68>
 8017ee6:	e007      	b.n	8017ef8 <_dtoa_r+0xb18>
 8017ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017eea:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017f4c <_dtoa_r+0xb6c>
 8017eee:	b11b      	cbz	r3, 8017ef8 <_dtoa_r+0xb18>
 8017ef0:	f10b 0308 	add.w	r3, fp, #8
 8017ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ef6:	6013      	str	r3, [r2, #0]
 8017ef8:	4658      	mov	r0, fp
 8017efa:	b017      	add	sp, #92	; 0x5c
 8017efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f00:	9b06      	ldr	r3, [sp, #24]
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	f77f ae35 	ble.w	8017b72 <_dtoa_r+0x792>
 8017f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f0a:	9307      	str	r3, [sp, #28]
 8017f0c:	e649      	b.n	8017ba2 <_dtoa_r+0x7c2>
 8017f0e:	9b02      	ldr	r3, [sp, #8]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	dc03      	bgt.n	8017f1c <_dtoa_r+0xb3c>
 8017f14:	9b06      	ldr	r3, [sp, #24]
 8017f16:	2b02      	cmp	r3, #2
 8017f18:	f73f aecc 	bgt.w	8017cb4 <_dtoa_r+0x8d4>
 8017f1c:	465d      	mov	r5, fp
 8017f1e:	4639      	mov	r1, r7
 8017f20:	9804      	ldr	r0, [sp, #16]
 8017f22:	f7ff f9cf 	bl	80172c4 <quorem>
 8017f26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017f2a:	f805 8b01 	strb.w	r8, [r5], #1
 8017f2e:	9a02      	ldr	r2, [sp, #8]
 8017f30:	eba5 030b 	sub.w	r3, r5, fp
 8017f34:	429a      	cmp	r2, r3
 8017f36:	ddb0      	ble.n	8017e9a <_dtoa_r+0xaba>
 8017f38:	2300      	movs	r3, #0
 8017f3a:	220a      	movs	r2, #10
 8017f3c:	9904      	ldr	r1, [sp, #16]
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f000 fc65 	bl	801880e <__multadd>
 8017f44:	9004      	str	r0, [sp, #16]
 8017f46:	e7ea      	b.n	8017f1e <_dtoa_r+0xb3e>
 8017f48:	0801d0e3 	.word	0x0801d0e3
 8017f4c:	0801cf51 	.word	0x0801cf51

08017f50 <std>:
 8017f50:	2300      	movs	r3, #0
 8017f52:	b510      	push	{r4, lr}
 8017f54:	4604      	mov	r4, r0
 8017f56:	e9c0 3300 	strd	r3, r3, [r0]
 8017f5a:	6083      	str	r3, [r0, #8]
 8017f5c:	8181      	strh	r1, [r0, #12]
 8017f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8017f60:	81c2      	strh	r2, [r0, #14]
 8017f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f66:	6183      	str	r3, [r0, #24]
 8017f68:	4619      	mov	r1, r3
 8017f6a:	2208      	movs	r2, #8
 8017f6c:	305c      	adds	r0, #92	; 0x5c
 8017f6e:	f7fd fab2 	bl	80154d6 <memset>
 8017f72:	4b05      	ldr	r3, [pc, #20]	; (8017f88 <std+0x38>)
 8017f74:	6263      	str	r3, [r4, #36]	; 0x24
 8017f76:	4b05      	ldr	r3, [pc, #20]	; (8017f8c <std+0x3c>)
 8017f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f7a:	4b05      	ldr	r3, [pc, #20]	; (8017f90 <std+0x40>)
 8017f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f7e:	4b05      	ldr	r3, [pc, #20]	; (8017f94 <std+0x44>)
 8017f80:	6224      	str	r4, [r4, #32]
 8017f82:	6323      	str	r3, [r4, #48]	; 0x30
 8017f84:	bd10      	pop	{r4, pc}
 8017f86:	bf00      	nop
 8017f88:	0801641d 	.word	0x0801641d
 8017f8c:	08016443 	.word	0x08016443
 8017f90:	0801647b 	.word	0x0801647b
 8017f94:	0801649f 	.word	0x0801649f

08017f98 <_cleanup_r>:
 8017f98:	4901      	ldr	r1, [pc, #4]	; (8017fa0 <_cleanup_r+0x8>)
 8017f9a:	f000 b885 	b.w	80180a8 <_fwalk_reent>
 8017f9e:	bf00      	nop
 8017fa0:	08019fa9 	.word	0x08019fa9

08017fa4 <__sfmoreglue>:
 8017fa4:	b570      	push	{r4, r5, r6, lr}
 8017fa6:	1e4a      	subs	r2, r1, #1
 8017fa8:	2568      	movs	r5, #104	; 0x68
 8017faa:	4355      	muls	r5, r2
 8017fac:	460e      	mov	r6, r1
 8017fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017fb2:	f7fd fae7 	bl	8015584 <_malloc_r>
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	b140      	cbz	r0, 8017fcc <__sfmoreglue+0x28>
 8017fba:	2100      	movs	r1, #0
 8017fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8017fc0:	300c      	adds	r0, #12
 8017fc2:	60a0      	str	r0, [r4, #8]
 8017fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017fc8:	f7fd fa85 	bl	80154d6 <memset>
 8017fcc:	4620      	mov	r0, r4
 8017fce:	bd70      	pop	{r4, r5, r6, pc}

08017fd0 <__sinit>:
 8017fd0:	6983      	ldr	r3, [r0, #24]
 8017fd2:	b510      	push	{r4, lr}
 8017fd4:	4604      	mov	r4, r0
 8017fd6:	bb33      	cbnz	r3, 8018026 <__sinit+0x56>
 8017fd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017fdc:	6503      	str	r3, [r0, #80]	; 0x50
 8017fde:	4b12      	ldr	r3, [pc, #72]	; (8018028 <__sinit+0x58>)
 8017fe0:	4a12      	ldr	r2, [pc, #72]	; (801802c <__sinit+0x5c>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	6282      	str	r2, [r0, #40]	; 0x28
 8017fe6:	4298      	cmp	r0, r3
 8017fe8:	bf04      	itt	eq
 8017fea:	2301      	moveq	r3, #1
 8017fec:	6183      	streq	r3, [r0, #24]
 8017fee:	f000 f81f 	bl	8018030 <__sfp>
 8017ff2:	6060      	str	r0, [r4, #4]
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f000 f81b 	bl	8018030 <__sfp>
 8017ffa:	60a0      	str	r0, [r4, #8]
 8017ffc:	4620      	mov	r0, r4
 8017ffe:	f000 f817 	bl	8018030 <__sfp>
 8018002:	2200      	movs	r2, #0
 8018004:	60e0      	str	r0, [r4, #12]
 8018006:	2104      	movs	r1, #4
 8018008:	6860      	ldr	r0, [r4, #4]
 801800a:	f7ff ffa1 	bl	8017f50 <std>
 801800e:	2201      	movs	r2, #1
 8018010:	2109      	movs	r1, #9
 8018012:	68a0      	ldr	r0, [r4, #8]
 8018014:	f7ff ff9c 	bl	8017f50 <std>
 8018018:	2202      	movs	r2, #2
 801801a:	2112      	movs	r1, #18
 801801c:	68e0      	ldr	r0, [r4, #12]
 801801e:	f7ff ff97 	bl	8017f50 <std>
 8018022:	2301      	movs	r3, #1
 8018024:	61a3      	str	r3, [r4, #24]
 8018026:	bd10      	pop	{r4, pc}
 8018028:	0801cdb8 	.word	0x0801cdb8
 801802c:	08017f99 	.word	0x08017f99

08018030 <__sfp>:
 8018030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018032:	4b1b      	ldr	r3, [pc, #108]	; (80180a0 <__sfp+0x70>)
 8018034:	681e      	ldr	r6, [r3, #0]
 8018036:	69b3      	ldr	r3, [r6, #24]
 8018038:	4607      	mov	r7, r0
 801803a:	b913      	cbnz	r3, 8018042 <__sfp+0x12>
 801803c:	4630      	mov	r0, r6
 801803e:	f7ff ffc7 	bl	8017fd0 <__sinit>
 8018042:	3648      	adds	r6, #72	; 0x48
 8018044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018048:	3b01      	subs	r3, #1
 801804a:	d503      	bpl.n	8018054 <__sfp+0x24>
 801804c:	6833      	ldr	r3, [r6, #0]
 801804e:	b133      	cbz	r3, 801805e <__sfp+0x2e>
 8018050:	6836      	ldr	r6, [r6, #0]
 8018052:	e7f7      	b.n	8018044 <__sfp+0x14>
 8018054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018058:	b16d      	cbz	r5, 8018076 <__sfp+0x46>
 801805a:	3468      	adds	r4, #104	; 0x68
 801805c:	e7f4      	b.n	8018048 <__sfp+0x18>
 801805e:	2104      	movs	r1, #4
 8018060:	4638      	mov	r0, r7
 8018062:	f7ff ff9f 	bl	8017fa4 <__sfmoreglue>
 8018066:	6030      	str	r0, [r6, #0]
 8018068:	2800      	cmp	r0, #0
 801806a:	d1f1      	bne.n	8018050 <__sfp+0x20>
 801806c:	230c      	movs	r3, #12
 801806e:	603b      	str	r3, [r7, #0]
 8018070:	4604      	mov	r4, r0
 8018072:	4620      	mov	r0, r4
 8018074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018076:	4b0b      	ldr	r3, [pc, #44]	; (80180a4 <__sfp+0x74>)
 8018078:	6665      	str	r5, [r4, #100]	; 0x64
 801807a:	e9c4 5500 	strd	r5, r5, [r4]
 801807e:	60a5      	str	r5, [r4, #8]
 8018080:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018084:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018088:	2208      	movs	r2, #8
 801808a:	4629      	mov	r1, r5
 801808c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018090:	f7fd fa21 	bl	80154d6 <memset>
 8018094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801809c:	e7e9      	b.n	8018072 <__sfp+0x42>
 801809e:	bf00      	nop
 80180a0:	0801cdb8 	.word	0x0801cdb8
 80180a4:	ffff0001 	.word	0xffff0001

080180a8 <_fwalk_reent>:
 80180a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180ac:	4680      	mov	r8, r0
 80180ae:	4689      	mov	r9, r1
 80180b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80180b4:	2600      	movs	r6, #0
 80180b6:	b914      	cbnz	r4, 80180be <_fwalk_reent+0x16>
 80180b8:	4630      	mov	r0, r6
 80180ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80180c2:	3f01      	subs	r7, #1
 80180c4:	d501      	bpl.n	80180ca <_fwalk_reent+0x22>
 80180c6:	6824      	ldr	r4, [r4, #0]
 80180c8:	e7f5      	b.n	80180b6 <_fwalk_reent+0xe>
 80180ca:	89ab      	ldrh	r3, [r5, #12]
 80180cc:	2b01      	cmp	r3, #1
 80180ce:	d907      	bls.n	80180e0 <_fwalk_reent+0x38>
 80180d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180d4:	3301      	adds	r3, #1
 80180d6:	d003      	beq.n	80180e0 <_fwalk_reent+0x38>
 80180d8:	4629      	mov	r1, r5
 80180da:	4640      	mov	r0, r8
 80180dc:	47c8      	blx	r9
 80180de:	4306      	orrs	r6, r0
 80180e0:	3568      	adds	r5, #104	; 0x68
 80180e2:	e7ee      	b.n	80180c2 <_fwalk_reent+0x1a>

080180e4 <rshift>:
 80180e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180e6:	6906      	ldr	r6, [r0, #16]
 80180e8:	114b      	asrs	r3, r1, #5
 80180ea:	429e      	cmp	r6, r3
 80180ec:	f100 0414 	add.w	r4, r0, #20
 80180f0:	dd30      	ble.n	8018154 <rshift+0x70>
 80180f2:	f011 011f 	ands.w	r1, r1, #31
 80180f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80180fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80180fe:	d108      	bne.n	8018112 <rshift+0x2e>
 8018100:	4621      	mov	r1, r4
 8018102:	42b2      	cmp	r2, r6
 8018104:	460b      	mov	r3, r1
 8018106:	d211      	bcs.n	801812c <rshift+0x48>
 8018108:	f852 3b04 	ldr.w	r3, [r2], #4
 801810c:	f841 3b04 	str.w	r3, [r1], #4
 8018110:	e7f7      	b.n	8018102 <rshift+0x1e>
 8018112:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018116:	f1c1 0c20 	rsb	ip, r1, #32
 801811a:	40cd      	lsrs	r5, r1
 801811c:	3204      	adds	r2, #4
 801811e:	4623      	mov	r3, r4
 8018120:	42b2      	cmp	r2, r6
 8018122:	4617      	mov	r7, r2
 8018124:	d30c      	bcc.n	8018140 <rshift+0x5c>
 8018126:	601d      	str	r5, [r3, #0]
 8018128:	b105      	cbz	r5, 801812c <rshift+0x48>
 801812a:	3304      	adds	r3, #4
 801812c:	1b1a      	subs	r2, r3, r4
 801812e:	42a3      	cmp	r3, r4
 8018130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018134:	bf08      	it	eq
 8018136:	2300      	moveq	r3, #0
 8018138:	6102      	str	r2, [r0, #16]
 801813a:	bf08      	it	eq
 801813c:	6143      	streq	r3, [r0, #20]
 801813e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018140:	683f      	ldr	r7, [r7, #0]
 8018142:	fa07 f70c 	lsl.w	r7, r7, ip
 8018146:	433d      	orrs	r5, r7
 8018148:	f843 5b04 	str.w	r5, [r3], #4
 801814c:	f852 5b04 	ldr.w	r5, [r2], #4
 8018150:	40cd      	lsrs	r5, r1
 8018152:	e7e5      	b.n	8018120 <rshift+0x3c>
 8018154:	4623      	mov	r3, r4
 8018156:	e7e9      	b.n	801812c <rshift+0x48>

08018158 <__hexdig_fun>:
 8018158:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801815c:	2b09      	cmp	r3, #9
 801815e:	d802      	bhi.n	8018166 <__hexdig_fun+0xe>
 8018160:	3820      	subs	r0, #32
 8018162:	b2c0      	uxtb	r0, r0
 8018164:	4770      	bx	lr
 8018166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801816a:	2b05      	cmp	r3, #5
 801816c:	d801      	bhi.n	8018172 <__hexdig_fun+0x1a>
 801816e:	3847      	subs	r0, #71	; 0x47
 8018170:	e7f7      	b.n	8018162 <__hexdig_fun+0xa>
 8018172:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018176:	2b05      	cmp	r3, #5
 8018178:	d801      	bhi.n	801817e <__hexdig_fun+0x26>
 801817a:	3827      	subs	r0, #39	; 0x27
 801817c:	e7f1      	b.n	8018162 <__hexdig_fun+0xa>
 801817e:	2000      	movs	r0, #0
 8018180:	4770      	bx	lr

08018182 <__gethex>:
 8018182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018186:	b08b      	sub	sp, #44	; 0x2c
 8018188:	468a      	mov	sl, r1
 801818a:	9002      	str	r0, [sp, #8]
 801818c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801818e:	9306      	str	r3, [sp, #24]
 8018190:	4690      	mov	r8, r2
 8018192:	f000 facd 	bl	8018730 <__localeconv_l>
 8018196:	6803      	ldr	r3, [r0, #0]
 8018198:	9303      	str	r3, [sp, #12]
 801819a:	4618      	mov	r0, r3
 801819c:	f7e8 f842 	bl	8000224 <strlen>
 80181a0:	9b03      	ldr	r3, [sp, #12]
 80181a2:	9001      	str	r0, [sp, #4]
 80181a4:	4403      	add	r3, r0
 80181a6:	f04f 0b00 	mov.w	fp, #0
 80181aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80181ae:	9307      	str	r3, [sp, #28]
 80181b0:	f8da 3000 	ldr.w	r3, [sl]
 80181b4:	3302      	adds	r3, #2
 80181b6:	461f      	mov	r7, r3
 80181b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80181bc:	2830      	cmp	r0, #48	; 0x30
 80181be:	d06c      	beq.n	801829a <__gethex+0x118>
 80181c0:	f7ff ffca 	bl	8018158 <__hexdig_fun>
 80181c4:	4604      	mov	r4, r0
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d16a      	bne.n	80182a0 <__gethex+0x11e>
 80181ca:	9a01      	ldr	r2, [sp, #4]
 80181cc:	9903      	ldr	r1, [sp, #12]
 80181ce:	4638      	mov	r0, r7
 80181d0:	f7fe f971 	bl	80164b6 <strncmp>
 80181d4:	2800      	cmp	r0, #0
 80181d6:	d166      	bne.n	80182a6 <__gethex+0x124>
 80181d8:	9b01      	ldr	r3, [sp, #4]
 80181da:	5cf8      	ldrb	r0, [r7, r3]
 80181dc:	18fe      	adds	r6, r7, r3
 80181de:	f7ff ffbb 	bl	8018158 <__hexdig_fun>
 80181e2:	2800      	cmp	r0, #0
 80181e4:	d062      	beq.n	80182ac <__gethex+0x12a>
 80181e6:	4633      	mov	r3, r6
 80181e8:	7818      	ldrb	r0, [r3, #0]
 80181ea:	2830      	cmp	r0, #48	; 0x30
 80181ec:	461f      	mov	r7, r3
 80181ee:	f103 0301 	add.w	r3, r3, #1
 80181f2:	d0f9      	beq.n	80181e8 <__gethex+0x66>
 80181f4:	f7ff ffb0 	bl	8018158 <__hexdig_fun>
 80181f8:	fab0 f580 	clz	r5, r0
 80181fc:	096d      	lsrs	r5, r5, #5
 80181fe:	4634      	mov	r4, r6
 8018200:	f04f 0b01 	mov.w	fp, #1
 8018204:	463a      	mov	r2, r7
 8018206:	4616      	mov	r6, r2
 8018208:	3201      	adds	r2, #1
 801820a:	7830      	ldrb	r0, [r6, #0]
 801820c:	f7ff ffa4 	bl	8018158 <__hexdig_fun>
 8018210:	2800      	cmp	r0, #0
 8018212:	d1f8      	bne.n	8018206 <__gethex+0x84>
 8018214:	9a01      	ldr	r2, [sp, #4]
 8018216:	9903      	ldr	r1, [sp, #12]
 8018218:	4630      	mov	r0, r6
 801821a:	f7fe f94c 	bl	80164b6 <strncmp>
 801821e:	b950      	cbnz	r0, 8018236 <__gethex+0xb4>
 8018220:	b954      	cbnz	r4, 8018238 <__gethex+0xb6>
 8018222:	9b01      	ldr	r3, [sp, #4]
 8018224:	18f4      	adds	r4, r6, r3
 8018226:	4622      	mov	r2, r4
 8018228:	4616      	mov	r6, r2
 801822a:	3201      	adds	r2, #1
 801822c:	7830      	ldrb	r0, [r6, #0]
 801822e:	f7ff ff93 	bl	8018158 <__hexdig_fun>
 8018232:	2800      	cmp	r0, #0
 8018234:	d1f8      	bne.n	8018228 <__gethex+0xa6>
 8018236:	b10c      	cbz	r4, 801823c <__gethex+0xba>
 8018238:	1ba4      	subs	r4, r4, r6
 801823a:	00a4      	lsls	r4, r4, #2
 801823c:	7833      	ldrb	r3, [r6, #0]
 801823e:	2b50      	cmp	r3, #80	; 0x50
 8018240:	d001      	beq.n	8018246 <__gethex+0xc4>
 8018242:	2b70      	cmp	r3, #112	; 0x70
 8018244:	d140      	bne.n	80182c8 <__gethex+0x146>
 8018246:	7873      	ldrb	r3, [r6, #1]
 8018248:	2b2b      	cmp	r3, #43	; 0x2b
 801824a:	d031      	beq.n	80182b0 <__gethex+0x12e>
 801824c:	2b2d      	cmp	r3, #45	; 0x2d
 801824e:	d033      	beq.n	80182b8 <__gethex+0x136>
 8018250:	1c71      	adds	r1, r6, #1
 8018252:	f04f 0900 	mov.w	r9, #0
 8018256:	7808      	ldrb	r0, [r1, #0]
 8018258:	f7ff ff7e 	bl	8018158 <__hexdig_fun>
 801825c:	1e43      	subs	r3, r0, #1
 801825e:	b2db      	uxtb	r3, r3
 8018260:	2b18      	cmp	r3, #24
 8018262:	d831      	bhi.n	80182c8 <__gethex+0x146>
 8018264:	f1a0 0210 	sub.w	r2, r0, #16
 8018268:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801826c:	f7ff ff74 	bl	8018158 <__hexdig_fun>
 8018270:	1e43      	subs	r3, r0, #1
 8018272:	b2db      	uxtb	r3, r3
 8018274:	2b18      	cmp	r3, #24
 8018276:	d922      	bls.n	80182be <__gethex+0x13c>
 8018278:	f1b9 0f00 	cmp.w	r9, #0
 801827c:	d000      	beq.n	8018280 <__gethex+0xfe>
 801827e:	4252      	negs	r2, r2
 8018280:	4414      	add	r4, r2
 8018282:	f8ca 1000 	str.w	r1, [sl]
 8018286:	b30d      	cbz	r5, 80182cc <__gethex+0x14a>
 8018288:	f1bb 0f00 	cmp.w	fp, #0
 801828c:	bf0c      	ite	eq
 801828e:	2706      	moveq	r7, #6
 8018290:	2700      	movne	r7, #0
 8018292:	4638      	mov	r0, r7
 8018294:	b00b      	add	sp, #44	; 0x2c
 8018296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829a:	f10b 0b01 	add.w	fp, fp, #1
 801829e:	e78a      	b.n	80181b6 <__gethex+0x34>
 80182a0:	2500      	movs	r5, #0
 80182a2:	462c      	mov	r4, r5
 80182a4:	e7ae      	b.n	8018204 <__gethex+0x82>
 80182a6:	463e      	mov	r6, r7
 80182a8:	2501      	movs	r5, #1
 80182aa:	e7c7      	b.n	801823c <__gethex+0xba>
 80182ac:	4604      	mov	r4, r0
 80182ae:	e7fb      	b.n	80182a8 <__gethex+0x126>
 80182b0:	f04f 0900 	mov.w	r9, #0
 80182b4:	1cb1      	adds	r1, r6, #2
 80182b6:	e7ce      	b.n	8018256 <__gethex+0xd4>
 80182b8:	f04f 0901 	mov.w	r9, #1
 80182bc:	e7fa      	b.n	80182b4 <__gethex+0x132>
 80182be:	230a      	movs	r3, #10
 80182c0:	fb03 0202 	mla	r2, r3, r2, r0
 80182c4:	3a10      	subs	r2, #16
 80182c6:	e7cf      	b.n	8018268 <__gethex+0xe6>
 80182c8:	4631      	mov	r1, r6
 80182ca:	e7da      	b.n	8018282 <__gethex+0x100>
 80182cc:	1bf3      	subs	r3, r6, r7
 80182ce:	3b01      	subs	r3, #1
 80182d0:	4629      	mov	r1, r5
 80182d2:	2b07      	cmp	r3, #7
 80182d4:	dc49      	bgt.n	801836a <__gethex+0x1e8>
 80182d6:	9802      	ldr	r0, [sp, #8]
 80182d8:	f000 fa4e 	bl	8018778 <_Balloc>
 80182dc:	9b01      	ldr	r3, [sp, #4]
 80182de:	f100 0914 	add.w	r9, r0, #20
 80182e2:	f04f 0b00 	mov.w	fp, #0
 80182e6:	f1c3 0301 	rsb	r3, r3, #1
 80182ea:	4605      	mov	r5, r0
 80182ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80182f0:	46da      	mov	sl, fp
 80182f2:	9308      	str	r3, [sp, #32]
 80182f4:	42b7      	cmp	r7, r6
 80182f6:	d33b      	bcc.n	8018370 <__gethex+0x1ee>
 80182f8:	9804      	ldr	r0, [sp, #16]
 80182fa:	f840 ab04 	str.w	sl, [r0], #4
 80182fe:	eba0 0009 	sub.w	r0, r0, r9
 8018302:	1080      	asrs	r0, r0, #2
 8018304:	6128      	str	r0, [r5, #16]
 8018306:	0147      	lsls	r7, r0, #5
 8018308:	4650      	mov	r0, sl
 801830a:	f000 faf9 	bl	8018900 <__hi0bits>
 801830e:	f8d8 6000 	ldr.w	r6, [r8]
 8018312:	1a3f      	subs	r7, r7, r0
 8018314:	42b7      	cmp	r7, r6
 8018316:	dd64      	ble.n	80183e2 <__gethex+0x260>
 8018318:	1bbf      	subs	r7, r7, r6
 801831a:	4639      	mov	r1, r7
 801831c:	4628      	mov	r0, r5
 801831e:	f000 fe09 	bl	8018f34 <__any_on>
 8018322:	4682      	mov	sl, r0
 8018324:	b178      	cbz	r0, 8018346 <__gethex+0x1c4>
 8018326:	1e7b      	subs	r3, r7, #1
 8018328:	1159      	asrs	r1, r3, #5
 801832a:	f003 021f 	and.w	r2, r3, #31
 801832e:	f04f 0a01 	mov.w	sl, #1
 8018332:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018336:	fa0a f202 	lsl.w	r2, sl, r2
 801833a:	420a      	tst	r2, r1
 801833c:	d003      	beq.n	8018346 <__gethex+0x1c4>
 801833e:	4553      	cmp	r3, sl
 8018340:	dc46      	bgt.n	80183d0 <__gethex+0x24e>
 8018342:	f04f 0a02 	mov.w	sl, #2
 8018346:	4639      	mov	r1, r7
 8018348:	4628      	mov	r0, r5
 801834a:	f7ff fecb 	bl	80180e4 <rshift>
 801834e:	443c      	add	r4, r7
 8018350:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018354:	42a3      	cmp	r3, r4
 8018356:	da52      	bge.n	80183fe <__gethex+0x27c>
 8018358:	4629      	mov	r1, r5
 801835a:	9802      	ldr	r0, [sp, #8]
 801835c:	f000 fa40 	bl	80187e0 <_Bfree>
 8018360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018362:	2300      	movs	r3, #0
 8018364:	6013      	str	r3, [r2, #0]
 8018366:	27a3      	movs	r7, #163	; 0xa3
 8018368:	e793      	b.n	8018292 <__gethex+0x110>
 801836a:	3101      	adds	r1, #1
 801836c:	105b      	asrs	r3, r3, #1
 801836e:	e7b0      	b.n	80182d2 <__gethex+0x150>
 8018370:	1e73      	subs	r3, r6, #1
 8018372:	9305      	str	r3, [sp, #20]
 8018374:	9a07      	ldr	r2, [sp, #28]
 8018376:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801837a:	4293      	cmp	r3, r2
 801837c:	d018      	beq.n	80183b0 <__gethex+0x22e>
 801837e:	f1bb 0f20 	cmp.w	fp, #32
 8018382:	d107      	bne.n	8018394 <__gethex+0x212>
 8018384:	9b04      	ldr	r3, [sp, #16]
 8018386:	f8c3 a000 	str.w	sl, [r3]
 801838a:	3304      	adds	r3, #4
 801838c:	f04f 0a00 	mov.w	sl, #0
 8018390:	9304      	str	r3, [sp, #16]
 8018392:	46d3      	mov	fp, sl
 8018394:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018398:	f7ff fede 	bl	8018158 <__hexdig_fun>
 801839c:	f000 000f 	and.w	r0, r0, #15
 80183a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80183a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80183a8:	f10b 0b04 	add.w	fp, fp, #4
 80183ac:	9b05      	ldr	r3, [sp, #20]
 80183ae:	e00d      	b.n	80183cc <__gethex+0x24a>
 80183b0:	9b05      	ldr	r3, [sp, #20]
 80183b2:	9a08      	ldr	r2, [sp, #32]
 80183b4:	4413      	add	r3, r2
 80183b6:	42bb      	cmp	r3, r7
 80183b8:	d3e1      	bcc.n	801837e <__gethex+0x1fc>
 80183ba:	4618      	mov	r0, r3
 80183bc:	9a01      	ldr	r2, [sp, #4]
 80183be:	9903      	ldr	r1, [sp, #12]
 80183c0:	9309      	str	r3, [sp, #36]	; 0x24
 80183c2:	f7fe f878 	bl	80164b6 <strncmp>
 80183c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183c8:	2800      	cmp	r0, #0
 80183ca:	d1d8      	bne.n	801837e <__gethex+0x1fc>
 80183cc:	461e      	mov	r6, r3
 80183ce:	e791      	b.n	80182f4 <__gethex+0x172>
 80183d0:	1eb9      	subs	r1, r7, #2
 80183d2:	4628      	mov	r0, r5
 80183d4:	f000 fdae 	bl	8018f34 <__any_on>
 80183d8:	2800      	cmp	r0, #0
 80183da:	d0b2      	beq.n	8018342 <__gethex+0x1c0>
 80183dc:	f04f 0a03 	mov.w	sl, #3
 80183e0:	e7b1      	b.n	8018346 <__gethex+0x1c4>
 80183e2:	da09      	bge.n	80183f8 <__gethex+0x276>
 80183e4:	1bf7      	subs	r7, r6, r7
 80183e6:	4629      	mov	r1, r5
 80183e8:	463a      	mov	r2, r7
 80183ea:	9802      	ldr	r0, [sp, #8]
 80183ec:	f000 fbc4 	bl	8018b78 <__lshift>
 80183f0:	1be4      	subs	r4, r4, r7
 80183f2:	4605      	mov	r5, r0
 80183f4:	f100 0914 	add.w	r9, r0, #20
 80183f8:	f04f 0a00 	mov.w	sl, #0
 80183fc:	e7a8      	b.n	8018350 <__gethex+0x1ce>
 80183fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018402:	42a0      	cmp	r0, r4
 8018404:	dd6a      	ble.n	80184dc <__gethex+0x35a>
 8018406:	1b04      	subs	r4, r0, r4
 8018408:	42a6      	cmp	r6, r4
 801840a:	dc2e      	bgt.n	801846a <__gethex+0x2e8>
 801840c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018410:	2b02      	cmp	r3, #2
 8018412:	d022      	beq.n	801845a <__gethex+0x2d8>
 8018414:	2b03      	cmp	r3, #3
 8018416:	d024      	beq.n	8018462 <__gethex+0x2e0>
 8018418:	2b01      	cmp	r3, #1
 801841a:	d115      	bne.n	8018448 <__gethex+0x2c6>
 801841c:	42a6      	cmp	r6, r4
 801841e:	d113      	bne.n	8018448 <__gethex+0x2c6>
 8018420:	2e01      	cmp	r6, #1
 8018422:	dc0b      	bgt.n	801843c <__gethex+0x2ba>
 8018424:	9a06      	ldr	r2, [sp, #24]
 8018426:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801842a:	6013      	str	r3, [r2, #0]
 801842c:	2301      	movs	r3, #1
 801842e:	612b      	str	r3, [r5, #16]
 8018430:	f8c9 3000 	str.w	r3, [r9]
 8018434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018436:	2762      	movs	r7, #98	; 0x62
 8018438:	601d      	str	r5, [r3, #0]
 801843a:	e72a      	b.n	8018292 <__gethex+0x110>
 801843c:	1e71      	subs	r1, r6, #1
 801843e:	4628      	mov	r0, r5
 8018440:	f000 fd78 	bl	8018f34 <__any_on>
 8018444:	2800      	cmp	r0, #0
 8018446:	d1ed      	bne.n	8018424 <__gethex+0x2a2>
 8018448:	4629      	mov	r1, r5
 801844a:	9802      	ldr	r0, [sp, #8]
 801844c:	f000 f9c8 	bl	80187e0 <_Bfree>
 8018450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018452:	2300      	movs	r3, #0
 8018454:	6013      	str	r3, [r2, #0]
 8018456:	2750      	movs	r7, #80	; 0x50
 8018458:	e71b      	b.n	8018292 <__gethex+0x110>
 801845a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801845c:	2b00      	cmp	r3, #0
 801845e:	d0e1      	beq.n	8018424 <__gethex+0x2a2>
 8018460:	e7f2      	b.n	8018448 <__gethex+0x2c6>
 8018462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018464:	2b00      	cmp	r3, #0
 8018466:	d1dd      	bne.n	8018424 <__gethex+0x2a2>
 8018468:	e7ee      	b.n	8018448 <__gethex+0x2c6>
 801846a:	1e67      	subs	r7, r4, #1
 801846c:	f1ba 0f00 	cmp.w	sl, #0
 8018470:	d131      	bne.n	80184d6 <__gethex+0x354>
 8018472:	b127      	cbz	r7, 801847e <__gethex+0x2fc>
 8018474:	4639      	mov	r1, r7
 8018476:	4628      	mov	r0, r5
 8018478:	f000 fd5c 	bl	8018f34 <__any_on>
 801847c:	4682      	mov	sl, r0
 801847e:	117a      	asrs	r2, r7, #5
 8018480:	2301      	movs	r3, #1
 8018482:	f007 071f 	and.w	r7, r7, #31
 8018486:	fa03 f707 	lsl.w	r7, r3, r7
 801848a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801848e:	4621      	mov	r1, r4
 8018490:	421f      	tst	r7, r3
 8018492:	4628      	mov	r0, r5
 8018494:	bf18      	it	ne
 8018496:	f04a 0a02 	orrne.w	sl, sl, #2
 801849a:	1b36      	subs	r6, r6, r4
 801849c:	f7ff fe22 	bl	80180e4 <rshift>
 80184a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80184a4:	2702      	movs	r7, #2
 80184a6:	f1ba 0f00 	cmp.w	sl, #0
 80184aa:	d048      	beq.n	801853e <__gethex+0x3bc>
 80184ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184b0:	2b02      	cmp	r3, #2
 80184b2:	d015      	beq.n	80184e0 <__gethex+0x35e>
 80184b4:	2b03      	cmp	r3, #3
 80184b6:	d017      	beq.n	80184e8 <__gethex+0x366>
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d109      	bne.n	80184d0 <__gethex+0x34e>
 80184bc:	f01a 0f02 	tst.w	sl, #2
 80184c0:	d006      	beq.n	80184d0 <__gethex+0x34e>
 80184c2:	f8d9 3000 	ldr.w	r3, [r9]
 80184c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80184ca:	f01a 0f01 	tst.w	sl, #1
 80184ce:	d10e      	bne.n	80184ee <__gethex+0x36c>
 80184d0:	f047 0710 	orr.w	r7, r7, #16
 80184d4:	e033      	b.n	801853e <__gethex+0x3bc>
 80184d6:	f04f 0a01 	mov.w	sl, #1
 80184da:	e7d0      	b.n	801847e <__gethex+0x2fc>
 80184dc:	2701      	movs	r7, #1
 80184de:	e7e2      	b.n	80184a6 <__gethex+0x324>
 80184e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184e2:	f1c3 0301 	rsb	r3, r3, #1
 80184e6:	9315      	str	r3, [sp, #84]	; 0x54
 80184e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d0f0      	beq.n	80184d0 <__gethex+0x34e>
 80184ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80184f2:	f105 0314 	add.w	r3, r5, #20
 80184f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80184fa:	eb03 010a 	add.w	r1, r3, sl
 80184fe:	f04f 0c00 	mov.w	ip, #0
 8018502:	4618      	mov	r0, r3
 8018504:	f853 2b04 	ldr.w	r2, [r3], #4
 8018508:	f1b2 3fff 	cmp.w	r2, #4294967295
 801850c:	d01c      	beq.n	8018548 <__gethex+0x3c6>
 801850e:	3201      	adds	r2, #1
 8018510:	6002      	str	r2, [r0, #0]
 8018512:	2f02      	cmp	r7, #2
 8018514:	f105 0314 	add.w	r3, r5, #20
 8018518:	d138      	bne.n	801858c <__gethex+0x40a>
 801851a:	f8d8 2000 	ldr.w	r2, [r8]
 801851e:	3a01      	subs	r2, #1
 8018520:	42b2      	cmp	r2, r6
 8018522:	d10a      	bne.n	801853a <__gethex+0x3b8>
 8018524:	1171      	asrs	r1, r6, #5
 8018526:	2201      	movs	r2, #1
 8018528:	f006 061f 	and.w	r6, r6, #31
 801852c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018530:	fa02 f606 	lsl.w	r6, r2, r6
 8018534:	421e      	tst	r6, r3
 8018536:	bf18      	it	ne
 8018538:	4617      	movne	r7, r2
 801853a:	f047 0720 	orr.w	r7, r7, #32
 801853e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018540:	601d      	str	r5, [r3, #0]
 8018542:	9b06      	ldr	r3, [sp, #24]
 8018544:	601c      	str	r4, [r3, #0]
 8018546:	e6a4      	b.n	8018292 <__gethex+0x110>
 8018548:	4299      	cmp	r1, r3
 801854a:	f843 cc04 	str.w	ip, [r3, #-4]
 801854e:	d8d8      	bhi.n	8018502 <__gethex+0x380>
 8018550:	68ab      	ldr	r3, [r5, #8]
 8018552:	4599      	cmp	r9, r3
 8018554:	db12      	blt.n	801857c <__gethex+0x3fa>
 8018556:	6869      	ldr	r1, [r5, #4]
 8018558:	9802      	ldr	r0, [sp, #8]
 801855a:	3101      	adds	r1, #1
 801855c:	f000 f90c 	bl	8018778 <_Balloc>
 8018560:	692a      	ldr	r2, [r5, #16]
 8018562:	3202      	adds	r2, #2
 8018564:	f105 010c 	add.w	r1, r5, #12
 8018568:	4683      	mov	fp, r0
 801856a:	0092      	lsls	r2, r2, #2
 801856c:	300c      	adds	r0, #12
 801856e:	f7fc ff8e 	bl	801548e <memcpy>
 8018572:	4629      	mov	r1, r5
 8018574:	9802      	ldr	r0, [sp, #8]
 8018576:	f000 f933 	bl	80187e0 <_Bfree>
 801857a:	465d      	mov	r5, fp
 801857c:	692b      	ldr	r3, [r5, #16]
 801857e:	1c5a      	adds	r2, r3, #1
 8018580:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018584:	612a      	str	r2, [r5, #16]
 8018586:	2201      	movs	r2, #1
 8018588:	615a      	str	r2, [r3, #20]
 801858a:	e7c2      	b.n	8018512 <__gethex+0x390>
 801858c:	692a      	ldr	r2, [r5, #16]
 801858e:	454a      	cmp	r2, r9
 8018590:	dd0b      	ble.n	80185aa <__gethex+0x428>
 8018592:	2101      	movs	r1, #1
 8018594:	4628      	mov	r0, r5
 8018596:	f7ff fda5 	bl	80180e4 <rshift>
 801859a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801859e:	3401      	adds	r4, #1
 80185a0:	42a3      	cmp	r3, r4
 80185a2:	f6ff aed9 	blt.w	8018358 <__gethex+0x1d6>
 80185a6:	2701      	movs	r7, #1
 80185a8:	e7c7      	b.n	801853a <__gethex+0x3b8>
 80185aa:	f016 061f 	ands.w	r6, r6, #31
 80185ae:	d0fa      	beq.n	80185a6 <__gethex+0x424>
 80185b0:	449a      	add	sl, r3
 80185b2:	f1c6 0620 	rsb	r6, r6, #32
 80185b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80185ba:	f000 f9a1 	bl	8018900 <__hi0bits>
 80185be:	42b0      	cmp	r0, r6
 80185c0:	dbe7      	blt.n	8018592 <__gethex+0x410>
 80185c2:	e7f0      	b.n	80185a6 <__gethex+0x424>

080185c4 <L_shift>:
 80185c4:	f1c2 0208 	rsb	r2, r2, #8
 80185c8:	0092      	lsls	r2, r2, #2
 80185ca:	b570      	push	{r4, r5, r6, lr}
 80185cc:	f1c2 0620 	rsb	r6, r2, #32
 80185d0:	6843      	ldr	r3, [r0, #4]
 80185d2:	6804      	ldr	r4, [r0, #0]
 80185d4:	fa03 f506 	lsl.w	r5, r3, r6
 80185d8:	432c      	orrs	r4, r5
 80185da:	40d3      	lsrs	r3, r2
 80185dc:	6004      	str	r4, [r0, #0]
 80185de:	f840 3f04 	str.w	r3, [r0, #4]!
 80185e2:	4288      	cmp	r0, r1
 80185e4:	d3f4      	bcc.n	80185d0 <L_shift+0xc>
 80185e6:	bd70      	pop	{r4, r5, r6, pc}

080185e8 <__match>:
 80185e8:	b530      	push	{r4, r5, lr}
 80185ea:	6803      	ldr	r3, [r0, #0]
 80185ec:	3301      	adds	r3, #1
 80185ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185f2:	b914      	cbnz	r4, 80185fa <__match+0x12>
 80185f4:	6003      	str	r3, [r0, #0]
 80185f6:	2001      	movs	r0, #1
 80185f8:	bd30      	pop	{r4, r5, pc}
 80185fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018602:	2d19      	cmp	r5, #25
 8018604:	bf98      	it	ls
 8018606:	3220      	addls	r2, #32
 8018608:	42a2      	cmp	r2, r4
 801860a:	d0f0      	beq.n	80185ee <__match+0x6>
 801860c:	2000      	movs	r0, #0
 801860e:	e7f3      	b.n	80185f8 <__match+0x10>

08018610 <__hexnan>:
 8018610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018614:	680b      	ldr	r3, [r1, #0]
 8018616:	6801      	ldr	r1, [r0, #0]
 8018618:	115f      	asrs	r7, r3, #5
 801861a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801861e:	f013 031f 	ands.w	r3, r3, #31
 8018622:	b087      	sub	sp, #28
 8018624:	bf18      	it	ne
 8018626:	3704      	addne	r7, #4
 8018628:	2500      	movs	r5, #0
 801862a:	1f3e      	subs	r6, r7, #4
 801862c:	4682      	mov	sl, r0
 801862e:	4690      	mov	r8, r2
 8018630:	9301      	str	r3, [sp, #4]
 8018632:	f847 5c04 	str.w	r5, [r7, #-4]
 8018636:	46b1      	mov	r9, r6
 8018638:	4634      	mov	r4, r6
 801863a:	9502      	str	r5, [sp, #8]
 801863c:	46ab      	mov	fp, r5
 801863e:	784a      	ldrb	r2, [r1, #1]
 8018640:	1c4b      	adds	r3, r1, #1
 8018642:	9303      	str	r3, [sp, #12]
 8018644:	b342      	cbz	r2, 8018698 <__hexnan+0x88>
 8018646:	4610      	mov	r0, r2
 8018648:	9105      	str	r1, [sp, #20]
 801864a:	9204      	str	r2, [sp, #16]
 801864c:	f7ff fd84 	bl	8018158 <__hexdig_fun>
 8018650:	2800      	cmp	r0, #0
 8018652:	d143      	bne.n	80186dc <__hexnan+0xcc>
 8018654:	9a04      	ldr	r2, [sp, #16]
 8018656:	9905      	ldr	r1, [sp, #20]
 8018658:	2a20      	cmp	r2, #32
 801865a:	d818      	bhi.n	801868e <__hexnan+0x7e>
 801865c:	9b02      	ldr	r3, [sp, #8]
 801865e:	459b      	cmp	fp, r3
 8018660:	dd13      	ble.n	801868a <__hexnan+0x7a>
 8018662:	454c      	cmp	r4, r9
 8018664:	d206      	bcs.n	8018674 <__hexnan+0x64>
 8018666:	2d07      	cmp	r5, #7
 8018668:	dc04      	bgt.n	8018674 <__hexnan+0x64>
 801866a:	462a      	mov	r2, r5
 801866c:	4649      	mov	r1, r9
 801866e:	4620      	mov	r0, r4
 8018670:	f7ff ffa8 	bl	80185c4 <L_shift>
 8018674:	4544      	cmp	r4, r8
 8018676:	d944      	bls.n	8018702 <__hexnan+0xf2>
 8018678:	2300      	movs	r3, #0
 801867a:	f1a4 0904 	sub.w	r9, r4, #4
 801867e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018682:	f8cd b008 	str.w	fp, [sp, #8]
 8018686:	464c      	mov	r4, r9
 8018688:	461d      	mov	r5, r3
 801868a:	9903      	ldr	r1, [sp, #12]
 801868c:	e7d7      	b.n	801863e <__hexnan+0x2e>
 801868e:	2a29      	cmp	r2, #41	; 0x29
 8018690:	d14a      	bne.n	8018728 <__hexnan+0x118>
 8018692:	3102      	adds	r1, #2
 8018694:	f8ca 1000 	str.w	r1, [sl]
 8018698:	f1bb 0f00 	cmp.w	fp, #0
 801869c:	d044      	beq.n	8018728 <__hexnan+0x118>
 801869e:	454c      	cmp	r4, r9
 80186a0:	d206      	bcs.n	80186b0 <__hexnan+0xa0>
 80186a2:	2d07      	cmp	r5, #7
 80186a4:	dc04      	bgt.n	80186b0 <__hexnan+0xa0>
 80186a6:	462a      	mov	r2, r5
 80186a8:	4649      	mov	r1, r9
 80186aa:	4620      	mov	r0, r4
 80186ac:	f7ff ff8a 	bl	80185c4 <L_shift>
 80186b0:	4544      	cmp	r4, r8
 80186b2:	d928      	bls.n	8018706 <__hexnan+0xf6>
 80186b4:	4643      	mov	r3, r8
 80186b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80186ba:	f843 2b04 	str.w	r2, [r3], #4
 80186be:	42a6      	cmp	r6, r4
 80186c0:	d2f9      	bcs.n	80186b6 <__hexnan+0xa6>
 80186c2:	2200      	movs	r2, #0
 80186c4:	f843 2b04 	str.w	r2, [r3], #4
 80186c8:	429e      	cmp	r6, r3
 80186ca:	d2fb      	bcs.n	80186c4 <__hexnan+0xb4>
 80186cc:	6833      	ldr	r3, [r6, #0]
 80186ce:	b91b      	cbnz	r3, 80186d8 <__hexnan+0xc8>
 80186d0:	4546      	cmp	r6, r8
 80186d2:	d127      	bne.n	8018724 <__hexnan+0x114>
 80186d4:	2301      	movs	r3, #1
 80186d6:	6033      	str	r3, [r6, #0]
 80186d8:	2005      	movs	r0, #5
 80186da:	e026      	b.n	801872a <__hexnan+0x11a>
 80186dc:	3501      	adds	r5, #1
 80186de:	2d08      	cmp	r5, #8
 80186e0:	f10b 0b01 	add.w	fp, fp, #1
 80186e4:	dd06      	ble.n	80186f4 <__hexnan+0xe4>
 80186e6:	4544      	cmp	r4, r8
 80186e8:	d9cf      	bls.n	801868a <__hexnan+0x7a>
 80186ea:	2300      	movs	r3, #0
 80186ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80186f0:	2501      	movs	r5, #1
 80186f2:	3c04      	subs	r4, #4
 80186f4:	6822      	ldr	r2, [r4, #0]
 80186f6:	f000 000f 	and.w	r0, r0, #15
 80186fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80186fe:	6020      	str	r0, [r4, #0]
 8018700:	e7c3      	b.n	801868a <__hexnan+0x7a>
 8018702:	2508      	movs	r5, #8
 8018704:	e7c1      	b.n	801868a <__hexnan+0x7a>
 8018706:	9b01      	ldr	r3, [sp, #4]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d0df      	beq.n	80186cc <__hexnan+0xbc>
 801870c:	f04f 32ff 	mov.w	r2, #4294967295
 8018710:	f1c3 0320 	rsb	r3, r3, #32
 8018714:	fa22 f303 	lsr.w	r3, r2, r3
 8018718:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801871c:	401a      	ands	r2, r3
 801871e:	f847 2c04 	str.w	r2, [r7, #-4]
 8018722:	e7d3      	b.n	80186cc <__hexnan+0xbc>
 8018724:	3e04      	subs	r6, #4
 8018726:	e7d1      	b.n	80186cc <__hexnan+0xbc>
 8018728:	2004      	movs	r0, #4
 801872a:	b007      	add	sp, #28
 801872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018730 <__localeconv_l>:
 8018730:	30f0      	adds	r0, #240	; 0xf0
 8018732:	4770      	bx	lr

08018734 <_localeconv_r>:
 8018734:	4b04      	ldr	r3, [pc, #16]	; (8018748 <_localeconv_r+0x14>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	6a18      	ldr	r0, [r3, #32]
 801873a:	4b04      	ldr	r3, [pc, #16]	; (801874c <_localeconv_r+0x18>)
 801873c:	2800      	cmp	r0, #0
 801873e:	bf08      	it	eq
 8018740:	4618      	moveq	r0, r3
 8018742:	30f0      	adds	r0, #240	; 0xf0
 8018744:	4770      	bx	lr
 8018746:	bf00      	nop
 8018748:	20000020 	.word	0x20000020
 801874c:	20000084 	.word	0x20000084

08018750 <_lseek_r>:
 8018750:	b538      	push	{r3, r4, r5, lr}
 8018752:	4c07      	ldr	r4, [pc, #28]	; (8018770 <_lseek_r+0x20>)
 8018754:	4605      	mov	r5, r0
 8018756:	4608      	mov	r0, r1
 8018758:	4611      	mov	r1, r2
 801875a:	2200      	movs	r2, #0
 801875c:	6022      	str	r2, [r4, #0]
 801875e:	461a      	mov	r2, r3
 8018760:	f7eb fd52 	bl	8004208 <_lseek>
 8018764:	1c43      	adds	r3, r0, #1
 8018766:	d102      	bne.n	801876e <_lseek_r+0x1e>
 8018768:	6823      	ldr	r3, [r4, #0]
 801876a:	b103      	cbz	r3, 801876e <_lseek_r+0x1e>
 801876c:	602b      	str	r3, [r5, #0]
 801876e:	bd38      	pop	{r3, r4, r5, pc}
 8018770:	2000751c 	.word	0x2000751c

08018774 <__malloc_lock>:
 8018774:	4770      	bx	lr

08018776 <__malloc_unlock>:
 8018776:	4770      	bx	lr

08018778 <_Balloc>:
 8018778:	b570      	push	{r4, r5, r6, lr}
 801877a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801877c:	4604      	mov	r4, r0
 801877e:	460e      	mov	r6, r1
 8018780:	b93d      	cbnz	r5, 8018792 <_Balloc+0x1a>
 8018782:	2010      	movs	r0, #16
 8018784:	f7fc fe52 	bl	801542c <malloc>
 8018788:	6260      	str	r0, [r4, #36]	; 0x24
 801878a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801878e:	6005      	str	r5, [r0, #0]
 8018790:	60c5      	str	r5, [r0, #12]
 8018792:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018794:	68eb      	ldr	r3, [r5, #12]
 8018796:	b183      	cbz	r3, 80187ba <_Balloc+0x42>
 8018798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801879a:	68db      	ldr	r3, [r3, #12]
 801879c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80187a0:	b9b8      	cbnz	r0, 80187d2 <_Balloc+0x5a>
 80187a2:	2101      	movs	r1, #1
 80187a4:	fa01 f506 	lsl.w	r5, r1, r6
 80187a8:	1d6a      	adds	r2, r5, #5
 80187aa:	0092      	lsls	r2, r2, #2
 80187ac:	4620      	mov	r0, r4
 80187ae:	f000 fbe2 	bl	8018f76 <_calloc_r>
 80187b2:	b160      	cbz	r0, 80187ce <_Balloc+0x56>
 80187b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80187b8:	e00e      	b.n	80187d8 <_Balloc+0x60>
 80187ba:	2221      	movs	r2, #33	; 0x21
 80187bc:	2104      	movs	r1, #4
 80187be:	4620      	mov	r0, r4
 80187c0:	f000 fbd9 	bl	8018f76 <_calloc_r>
 80187c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187c6:	60e8      	str	r0, [r5, #12]
 80187c8:	68db      	ldr	r3, [r3, #12]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d1e4      	bne.n	8018798 <_Balloc+0x20>
 80187ce:	2000      	movs	r0, #0
 80187d0:	bd70      	pop	{r4, r5, r6, pc}
 80187d2:	6802      	ldr	r2, [r0, #0]
 80187d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80187d8:	2300      	movs	r3, #0
 80187da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80187de:	e7f7      	b.n	80187d0 <_Balloc+0x58>

080187e0 <_Bfree>:
 80187e0:	b570      	push	{r4, r5, r6, lr}
 80187e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80187e4:	4606      	mov	r6, r0
 80187e6:	460d      	mov	r5, r1
 80187e8:	b93c      	cbnz	r4, 80187fa <_Bfree+0x1a>
 80187ea:	2010      	movs	r0, #16
 80187ec:	f7fc fe1e 	bl	801542c <malloc>
 80187f0:	6270      	str	r0, [r6, #36]	; 0x24
 80187f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80187f6:	6004      	str	r4, [r0, #0]
 80187f8:	60c4      	str	r4, [r0, #12]
 80187fa:	b13d      	cbz	r5, 801880c <_Bfree+0x2c>
 80187fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80187fe:	686a      	ldr	r2, [r5, #4]
 8018800:	68db      	ldr	r3, [r3, #12]
 8018802:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018806:	6029      	str	r1, [r5, #0]
 8018808:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801880c:	bd70      	pop	{r4, r5, r6, pc}

0801880e <__multadd>:
 801880e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018812:	690d      	ldr	r5, [r1, #16]
 8018814:	461f      	mov	r7, r3
 8018816:	4606      	mov	r6, r0
 8018818:	460c      	mov	r4, r1
 801881a:	f101 0c14 	add.w	ip, r1, #20
 801881e:	2300      	movs	r3, #0
 8018820:	f8dc 0000 	ldr.w	r0, [ip]
 8018824:	b281      	uxth	r1, r0
 8018826:	fb02 7101 	mla	r1, r2, r1, r7
 801882a:	0c0f      	lsrs	r7, r1, #16
 801882c:	0c00      	lsrs	r0, r0, #16
 801882e:	fb02 7000 	mla	r0, r2, r0, r7
 8018832:	b289      	uxth	r1, r1
 8018834:	3301      	adds	r3, #1
 8018836:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801883a:	429d      	cmp	r5, r3
 801883c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018840:	f84c 1b04 	str.w	r1, [ip], #4
 8018844:	dcec      	bgt.n	8018820 <__multadd+0x12>
 8018846:	b1d7      	cbz	r7, 801887e <__multadd+0x70>
 8018848:	68a3      	ldr	r3, [r4, #8]
 801884a:	42ab      	cmp	r3, r5
 801884c:	dc12      	bgt.n	8018874 <__multadd+0x66>
 801884e:	6861      	ldr	r1, [r4, #4]
 8018850:	4630      	mov	r0, r6
 8018852:	3101      	adds	r1, #1
 8018854:	f7ff ff90 	bl	8018778 <_Balloc>
 8018858:	6922      	ldr	r2, [r4, #16]
 801885a:	3202      	adds	r2, #2
 801885c:	f104 010c 	add.w	r1, r4, #12
 8018860:	4680      	mov	r8, r0
 8018862:	0092      	lsls	r2, r2, #2
 8018864:	300c      	adds	r0, #12
 8018866:	f7fc fe12 	bl	801548e <memcpy>
 801886a:	4621      	mov	r1, r4
 801886c:	4630      	mov	r0, r6
 801886e:	f7ff ffb7 	bl	80187e0 <_Bfree>
 8018872:	4644      	mov	r4, r8
 8018874:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018878:	3501      	adds	r5, #1
 801887a:	615f      	str	r7, [r3, #20]
 801887c:	6125      	str	r5, [r4, #16]
 801887e:	4620      	mov	r0, r4
 8018880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018884 <__s2b>:
 8018884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018888:	460c      	mov	r4, r1
 801888a:	4615      	mov	r5, r2
 801888c:	461f      	mov	r7, r3
 801888e:	2209      	movs	r2, #9
 8018890:	3308      	adds	r3, #8
 8018892:	4606      	mov	r6, r0
 8018894:	fb93 f3f2 	sdiv	r3, r3, r2
 8018898:	2100      	movs	r1, #0
 801889a:	2201      	movs	r2, #1
 801889c:	429a      	cmp	r2, r3
 801889e:	db20      	blt.n	80188e2 <__s2b+0x5e>
 80188a0:	4630      	mov	r0, r6
 80188a2:	f7ff ff69 	bl	8018778 <_Balloc>
 80188a6:	9b08      	ldr	r3, [sp, #32]
 80188a8:	6143      	str	r3, [r0, #20]
 80188aa:	2d09      	cmp	r5, #9
 80188ac:	f04f 0301 	mov.w	r3, #1
 80188b0:	6103      	str	r3, [r0, #16]
 80188b2:	dd19      	ble.n	80188e8 <__s2b+0x64>
 80188b4:	f104 0809 	add.w	r8, r4, #9
 80188b8:	46c1      	mov	r9, r8
 80188ba:	442c      	add	r4, r5
 80188bc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80188c0:	4601      	mov	r1, r0
 80188c2:	3b30      	subs	r3, #48	; 0x30
 80188c4:	220a      	movs	r2, #10
 80188c6:	4630      	mov	r0, r6
 80188c8:	f7ff ffa1 	bl	801880e <__multadd>
 80188cc:	45a1      	cmp	r9, r4
 80188ce:	d1f5      	bne.n	80188bc <__s2b+0x38>
 80188d0:	eb08 0405 	add.w	r4, r8, r5
 80188d4:	3c08      	subs	r4, #8
 80188d6:	1b2d      	subs	r5, r5, r4
 80188d8:	1963      	adds	r3, r4, r5
 80188da:	42bb      	cmp	r3, r7
 80188dc:	db07      	blt.n	80188ee <__s2b+0x6a>
 80188de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188e2:	0052      	lsls	r2, r2, #1
 80188e4:	3101      	adds	r1, #1
 80188e6:	e7d9      	b.n	801889c <__s2b+0x18>
 80188e8:	340a      	adds	r4, #10
 80188ea:	2509      	movs	r5, #9
 80188ec:	e7f3      	b.n	80188d6 <__s2b+0x52>
 80188ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80188f2:	4601      	mov	r1, r0
 80188f4:	3b30      	subs	r3, #48	; 0x30
 80188f6:	220a      	movs	r2, #10
 80188f8:	4630      	mov	r0, r6
 80188fa:	f7ff ff88 	bl	801880e <__multadd>
 80188fe:	e7eb      	b.n	80188d8 <__s2b+0x54>

08018900 <__hi0bits>:
 8018900:	0c02      	lsrs	r2, r0, #16
 8018902:	0412      	lsls	r2, r2, #16
 8018904:	4603      	mov	r3, r0
 8018906:	b9b2      	cbnz	r2, 8018936 <__hi0bits+0x36>
 8018908:	0403      	lsls	r3, r0, #16
 801890a:	2010      	movs	r0, #16
 801890c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018910:	bf04      	itt	eq
 8018912:	021b      	lsleq	r3, r3, #8
 8018914:	3008      	addeq	r0, #8
 8018916:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801891a:	bf04      	itt	eq
 801891c:	011b      	lsleq	r3, r3, #4
 801891e:	3004      	addeq	r0, #4
 8018920:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018924:	bf04      	itt	eq
 8018926:	009b      	lsleq	r3, r3, #2
 8018928:	3002      	addeq	r0, #2
 801892a:	2b00      	cmp	r3, #0
 801892c:	db06      	blt.n	801893c <__hi0bits+0x3c>
 801892e:	005b      	lsls	r3, r3, #1
 8018930:	d503      	bpl.n	801893a <__hi0bits+0x3a>
 8018932:	3001      	adds	r0, #1
 8018934:	4770      	bx	lr
 8018936:	2000      	movs	r0, #0
 8018938:	e7e8      	b.n	801890c <__hi0bits+0xc>
 801893a:	2020      	movs	r0, #32
 801893c:	4770      	bx	lr

0801893e <__lo0bits>:
 801893e:	6803      	ldr	r3, [r0, #0]
 8018940:	f013 0207 	ands.w	r2, r3, #7
 8018944:	4601      	mov	r1, r0
 8018946:	d00b      	beq.n	8018960 <__lo0bits+0x22>
 8018948:	07da      	lsls	r2, r3, #31
 801894a:	d423      	bmi.n	8018994 <__lo0bits+0x56>
 801894c:	0798      	lsls	r0, r3, #30
 801894e:	bf49      	itett	mi
 8018950:	085b      	lsrmi	r3, r3, #1
 8018952:	089b      	lsrpl	r3, r3, #2
 8018954:	2001      	movmi	r0, #1
 8018956:	600b      	strmi	r3, [r1, #0]
 8018958:	bf5c      	itt	pl
 801895a:	600b      	strpl	r3, [r1, #0]
 801895c:	2002      	movpl	r0, #2
 801895e:	4770      	bx	lr
 8018960:	b298      	uxth	r0, r3
 8018962:	b9a8      	cbnz	r0, 8018990 <__lo0bits+0x52>
 8018964:	0c1b      	lsrs	r3, r3, #16
 8018966:	2010      	movs	r0, #16
 8018968:	f013 0fff 	tst.w	r3, #255	; 0xff
 801896c:	bf04      	itt	eq
 801896e:	0a1b      	lsreq	r3, r3, #8
 8018970:	3008      	addeq	r0, #8
 8018972:	071a      	lsls	r2, r3, #28
 8018974:	bf04      	itt	eq
 8018976:	091b      	lsreq	r3, r3, #4
 8018978:	3004      	addeq	r0, #4
 801897a:	079a      	lsls	r2, r3, #30
 801897c:	bf04      	itt	eq
 801897e:	089b      	lsreq	r3, r3, #2
 8018980:	3002      	addeq	r0, #2
 8018982:	07da      	lsls	r2, r3, #31
 8018984:	d402      	bmi.n	801898c <__lo0bits+0x4e>
 8018986:	085b      	lsrs	r3, r3, #1
 8018988:	d006      	beq.n	8018998 <__lo0bits+0x5a>
 801898a:	3001      	adds	r0, #1
 801898c:	600b      	str	r3, [r1, #0]
 801898e:	4770      	bx	lr
 8018990:	4610      	mov	r0, r2
 8018992:	e7e9      	b.n	8018968 <__lo0bits+0x2a>
 8018994:	2000      	movs	r0, #0
 8018996:	4770      	bx	lr
 8018998:	2020      	movs	r0, #32
 801899a:	4770      	bx	lr

0801899c <__i2b>:
 801899c:	b510      	push	{r4, lr}
 801899e:	460c      	mov	r4, r1
 80189a0:	2101      	movs	r1, #1
 80189a2:	f7ff fee9 	bl	8018778 <_Balloc>
 80189a6:	2201      	movs	r2, #1
 80189a8:	6144      	str	r4, [r0, #20]
 80189aa:	6102      	str	r2, [r0, #16]
 80189ac:	bd10      	pop	{r4, pc}

080189ae <__multiply>:
 80189ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b2:	4614      	mov	r4, r2
 80189b4:	690a      	ldr	r2, [r1, #16]
 80189b6:	6923      	ldr	r3, [r4, #16]
 80189b8:	429a      	cmp	r2, r3
 80189ba:	bfb8      	it	lt
 80189bc:	460b      	movlt	r3, r1
 80189be:	4688      	mov	r8, r1
 80189c0:	bfbc      	itt	lt
 80189c2:	46a0      	movlt	r8, r4
 80189c4:	461c      	movlt	r4, r3
 80189c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80189ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80189ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80189d6:	eb07 0609 	add.w	r6, r7, r9
 80189da:	42b3      	cmp	r3, r6
 80189dc:	bfb8      	it	lt
 80189de:	3101      	addlt	r1, #1
 80189e0:	f7ff feca 	bl	8018778 <_Balloc>
 80189e4:	f100 0514 	add.w	r5, r0, #20
 80189e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80189ec:	462b      	mov	r3, r5
 80189ee:	2200      	movs	r2, #0
 80189f0:	4573      	cmp	r3, lr
 80189f2:	d316      	bcc.n	8018a22 <__multiply+0x74>
 80189f4:	f104 0214 	add.w	r2, r4, #20
 80189f8:	f108 0114 	add.w	r1, r8, #20
 80189fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018a00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018a04:	9300      	str	r3, [sp, #0]
 8018a06:	9b00      	ldr	r3, [sp, #0]
 8018a08:	9201      	str	r2, [sp, #4]
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	d80c      	bhi.n	8018a28 <__multiply+0x7a>
 8018a0e:	2e00      	cmp	r6, #0
 8018a10:	dd03      	ble.n	8018a1a <__multiply+0x6c>
 8018a12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d05d      	beq.n	8018ad6 <__multiply+0x128>
 8018a1a:	6106      	str	r6, [r0, #16]
 8018a1c:	b003      	add	sp, #12
 8018a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a22:	f843 2b04 	str.w	r2, [r3], #4
 8018a26:	e7e3      	b.n	80189f0 <__multiply+0x42>
 8018a28:	f8b2 b000 	ldrh.w	fp, [r2]
 8018a2c:	f1bb 0f00 	cmp.w	fp, #0
 8018a30:	d023      	beq.n	8018a7a <__multiply+0xcc>
 8018a32:	4689      	mov	r9, r1
 8018a34:	46ac      	mov	ip, r5
 8018a36:	f04f 0800 	mov.w	r8, #0
 8018a3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8018a3e:	f8dc a000 	ldr.w	sl, [ip]
 8018a42:	b2a3      	uxth	r3, r4
 8018a44:	fa1f fa8a 	uxth.w	sl, sl
 8018a48:	fb0b a303 	mla	r3, fp, r3, sl
 8018a4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018a50:	f8dc 4000 	ldr.w	r4, [ip]
 8018a54:	4443      	add	r3, r8
 8018a56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8018a5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018a62:	46e2      	mov	sl, ip
 8018a64:	b29b      	uxth	r3, r3
 8018a66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a6a:	454f      	cmp	r7, r9
 8018a6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a70:	f84a 3b04 	str.w	r3, [sl], #4
 8018a74:	d82b      	bhi.n	8018ace <__multiply+0x120>
 8018a76:	f8cc 8004 	str.w	r8, [ip, #4]
 8018a7a:	9b01      	ldr	r3, [sp, #4]
 8018a7c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018a80:	3204      	adds	r2, #4
 8018a82:	f1ba 0f00 	cmp.w	sl, #0
 8018a86:	d020      	beq.n	8018aca <__multiply+0x11c>
 8018a88:	682b      	ldr	r3, [r5, #0]
 8018a8a:	4689      	mov	r9, r1
 8018a8c:	46a8      	mov	r8, r5
 8018a8e:	f04f 0b00 	mov.w	fp, #0
 8018a92:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a96:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a9a:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a9e:	445c      	add	r4, fp
 8018aa0:	46c4      	mov	ip, r8
 8018aa2:	b29b      	uxth	r3, r3
 8018aa4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018aa8:	f84c 3b04 	str.w	r3, [ip], #4
 8018aac:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ab0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018ab4:	0c1b      	lsrs	r3, r3, #16
 8018ab6:	fb0a b303 	mla	r3, sl, r3, fp
 8018aba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018abe:	454f      	cmp	r7, r9
 8018ac0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018ac4:	d805      	bhi.n	8018ad2 <__multiply+0x124>
 8018ac6:	f8c8 3004 	str.w	r3, [r8, #4]
 8018aca:	3504      	adds	r5, #4
 8018acc:	e79b      	b.n	8018a06 <__multiply+0x58>
 8018ace:	46d4      	mov	ip, sl
 8018ad0:	e7b3      	b.n	8018a3a <__multiply+0x8c>
 8018ad2:	46e0      	mov	r8, ip
 8018ad4:	e7dd      	b.n	8018a92 <__multiply+0xe4>
 8018ad6:	3e01      	subs	r6, #1
 8018ad8:	e799      	b.n	8018a0e <__multiply+0x60>
	...

08018adc <__pow5mult>:
 8018adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ae0:	4615      	mov	r5, r2
 8018ae2:	f012 0203 	ands.w	r2, r2, #3
 8018ae6:	4606      	mov	r6, r0
 8018ae8:	460f      	mov	r7, r1
 8018aea:	d007      	beq.n	8018afc <__pow5mult+0x20>
 8018aec:	3a01      	subs	r2, #1
 8018aee:	4c21      	ldr	r4, [pc, #132]	; (8018b74 <__pow5mult+0x98>)
 8018af0:	2300      	movs	r3, #0
 8018af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018af6:	f7ff fe8a 	bl	801880e <__multadd>
 8018afa:	4607      	mov	r7, r0
 8018afc:	10ad      	asrs	r5, r5, #2
 8018afe:	d035      	beq.n	8018b6c <__pow5mult+0x90>
 8018b00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018b02:	b93c      	cbnz	r4, 8018b14 <__pow5mult+0x38>
 8018b04:	2010      	movs	r0, #16
 8018b06:	f7fc fc91 	bl	801542c <malloc>
 8018b0a:	6270      	str	r0, [r6, #36]	; 0x24
 8018b0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b10:	6004      	str	r4, [r0, #0]
 8018b12:	60c4      	str	r4, [r0, #12]
 8018b14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018b18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018b1c:	b94c      	cbnz	r4, 8018b32 <__pow5mult+0x56>
 8018b1e:	f240 2171 	movw	r1, #625	; 0x271
 8018b22:	4630      	mov	r0, r6
 8018b24:	f7ff ff3a 	bl	801899c <__i2b>
 8018b28:	2300      	movs	r3, #0
 8018b2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018b2e:	4604      	mov	r4, r0
 8018b30:	6003      	str	r3, [r0, #0]
 8018b32:	f04f 0800 	mov.w	r8, #0
 8018b36:	07eb      	lsls	r3, r5, #31
 8018b38:	d50a      	bpl.n	8018b50 <__pow5mult+0x74>
 8018b3a:	4639      	mov	r1, r7
 8018b3c:	4622      	mov	r2, r4
 8018b3e:	4630      	mov	r0, r6
 8018b40:	f7ff ff35 	bl	80189ae <__multiply>
 8018b44:	4639      	mov	r1, r7
 8018b46:	4681      	mov	r9, r0
 8018b48:	4630      	mov	r0, r6
 8018b4a:	f7ff fe49 	bl	80187e0 <_Bfree>
 8018b4e:	464f      	mov	r7, r9
 8018b50:	106d      	asrs	r5, r5, #1
 8018b52:	d00b      	beq.n	8018b6c <__pow5mult+0x90>
 8018b54:	6820      	ldr	r0, [r4, #0]
 8018b56:	b938      	cbnz	r0, 8018b68 <__pow5mult+0x8c>
 8018b58:	4622      	mov	r2, r4
 8018b5a:	4621      	mov	r1, r4
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	f7ff ff26 	bl	80189ae <__multiply>
 8018b62:	6020      	str	r0, [r4, #0]
 8018b64:	f8c0 8000 	str.w	r8, [r0]
 8018b68:	4604      	mov	r4, r0
 8018b6a:	e7e4      	b.n	8018b36 <__pow5mult+0x5a>
 8018b6c:	4638      	mov	r0, r7
 8018b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b72:	bf00      	nop
 8018b74:	0801d0b0 	.word	0x0801d0b0

08018b78 <__lshift>:
 8018b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b7c:	460c      	mov	r4, r1
 8018b7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b82:	6923      	ldr	r3, [r4, #16]
 8018b84:	6849      	ldr	r1, [r1, #4]
 8018b86:	eb0a 0903 	add.w	r9, sl, r3
 8018b8a:	68a3      	ldr	r3, [r4, #8]
 8018b8c:	4607      	mov	r7, r0
 8018b8e:	4616      	mov	r6, r2
 8018b90:	f109 0501 	add.w	r5, r9, #1
 8018b94:	42ab      	cmp	r3, r5
 8018b96:	db32      	blt.n	8018bfe <__lshift+0x86>
 8018b98:	4638      	mov	r0, r7
 8018b9a:	f7ff fded 	bl	8018778 <_Balloc>
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	4680      	mov	r8, r0
 8018ba2:	f100 0114 	add.w	r1, r0, #20
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	4553      	cmp	r3, sl
 8018baa:	db2b      	blt.n	8018c04 <__lshift+0x8c>
 8018bac:	6920      	ldr	r0, [r4, #16]
 8018bae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018bb2:	f104 0314 	add.w	r3, r4, #20
 8018bb6:	f016 021f 	ands.w	r2, r6, #31
 8018bba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018bbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018bc2:	d025      	beq.n	8018c10 <__lshift+0x98>
 8018bc4:	f1c2 0e20 	rsb	lr, r2, #32
 8018bc8:	2000      	movs	r0, #0
 8018bca:	681e      	ldr	r6, [r3, #0]
 8018bcc:	468a      	mov	sl, r1
 8018bce:	4096      	lsls	r6, r2
 8018bd0:	4330      	orrs	r0, r6
 8018bd2:	f84a 0b04 	str.w	r0, [sl], #4
 8018bd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8018bda:	459c      	cmp	ip, r3
 8018bdc:	fa20 f00e 	lsr.w	r0, r0, lr
 8018be0:	d814      	bhi.n	8018c0c <__lshift+0x94>
 8018be2:	6048      	str	r0, [r1, #4]
 8018be4:	b108      	cbz	r0, 8018bea <__lshift+0x72>
 8018be6:	f109 0502 	add.w	r5, r9, #2
 8018bea:	3d01      	subs	r5, #1
 8018bec:	4638      	mov	r0, r7
 8018bee:	f8c8 5010 	str.w	r5, [r8, #16]
 8018bf2:	4621      	mov	r1, r4
 8018bf4:	f7ff fdf4 	bl	80187e0 <_Bfree>
 8018bf8:	4640      	mov	r0, r8
 8018bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bfe:	3101      	adds	r1, #1
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	e7c7      	b.n	8018b94 <__lshift+0x1c>
 8018c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018c08:	3301      	adds	r3, #1
 8018c0a:	e7cd      	b.n	8018ba8 <__lshift+0x30>
 8018c0c:	4651      	mov	r1, sl
 8018c0e:	e7dc      	b.n	8018bca <__lshift+0x52>
 8018c10:	3904      	subs	r1, #4
 8018c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c16:	f841 2f04 	str.w	r2, [r1, #4]!
 8018c1a:	459c      	cmp	ip, r3
 8018c1c:	d8f9      	bhi.n	8018c12 <__lshift+0x9a>
 8018c1e:	e7e4      	b.n	8018bea <__lshift+0x72>

08018c20 <__mcmp>:
 8018c20:	6903      	ldr	r3, [r0, #16]
 8018c22:	690a      	ldr	r2, [r1, #16]
 8018c24:	1a9b      	subs	r3, r3, r2
 8018c26:	b530      	push	{r4, r5, lr}
 8018c28:	d10c      	bne.n	8018c44 <__mcmp+0x24>
 8018c2a:	0092      	lsls	r2, r2, #2
 8018c2c:	3014      	adds	r0, #20
 8018c2e:	3114      	adds	r1, #20
 8018c30:	1884      	adds	r4, r0, r2
 8018c32:	4411      	add	r1, r2
 8018c34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018c38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018c3c:	4295      	cmp	r5, r2
 8018c3e:	d003      	beq.n	8018c48 <__mcmp+0x28>
 8018c40:	d305      	bcc.n	8018c4e <__mcmp+0x2e>
 8018c42:	2301      	movs	r3, #1
 8018c44:	4618      	mov	r0, r3
 8018c46:	bd30      	pop	{r4, r5, pc}
 8018c48:	42a0      	cmp	r0, r4
 8018c4a:	d3f3      	bcc.n	8018c34 <__mcmp+0x14>
 8018c4c:	e7fa      	b.n	8018c44 <__mcmp+0x24>
 8018c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018c52:	e7f7      	b.n	8018c44 <__mcmp+0x24>

08018c54 <__mdiff>:
 8018c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c58:	460d      	mov	r5, r1
 8018c5a:	4607      	mov	r7, r0
 8018c5c:	4611      	mov	r1, r2
 8018c5e:	4628      	mov	r0, r5
 8018c60:	4614      	mov	r4, r2
 8018c62:	f7ff ffdd 	bl	8018c20 <__mcmp>
 8018c66:	1e06      	subs	r6, r0, #0
 8018c68:	d108      	bne.n	8018c7c <__mdiff+0x28>
 8018c6a:	4631      	mov	r1, r6
 8018c6c:	4638      	mov	r0, r7
 8018c6e:	f7ff fd83 	bl	8018778 <_Balloc>
 8018c72:	2301      	movs	r3, #1
 8018c74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c7c:	bfa4      	itt	ge
 8018c7e:	4623      	movge	r3, r4
 8018c80:	462c      	movge	r4, r5
 8018c82:	4638      	mov	r0, r7
 8018c84:	6861      	ldr	r1, [r4, #4]
 8018c86:	bfa6      	itte	ge
 8018c88:	461d      	movge	r5, r3
 8018c8a:	2600      	movge	r6, #0
 8018c8c:	2601      	movlt	r6, #1
 8018c8e:	f7ff fd73 	bl	8018778 <_Balloc>
 8018c92:	692b      	ldr	r3, [r5, #16]
 8018c94:	60c6      	str	r6, [r0, #12]
 8018c96:	6926      	ldr	r6, [r4, #16]
 8018c98:	f105 0914 	add.w	r9, r5, #20
 8018c9c:	f104 0214 	add.w	r2, r4, #20
 8018ca0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018ca4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018ca8:	f100 0514 	add.w	r5, r0, #20
 8018cac:	f04f 0e00 	mov.w	lr, #0
 8018cb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8018cb4:	f859 4b04 	ldr.w	r4, [r9], #4
 8018cb8:	fa1e f18a 	uxtah	r1, lr, sl
 8018cbc:	b2a3      	uxth	r3, r4
 8018cbe:	1ac9      	subs	r1, r1, r3
 8018cc0:	0c23      	lsrs	r3, r4, #16
 8018cc2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018cc6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018cca:	b289      	uxth	r1, r1
 8018ccc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018cd0:	45c8      	cmp	r8, r9
 8018cd2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018cd6:	4694      	mov	ip, r2
 8018cd8:	f845 3b04 	str.w	r3, [r5], #4
 8018cdc:	d8e8      	bhi.n	8018cb0 <__mdiff+0x5c>
 8018cde:	45bc      	cmp	ip, r7
 8018ce0:	d304      	bcc.n	8018cec <__mdiff+0x98>
 8018ce2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018ce6:	b183      	cbz	r3, 8018d0a <__mdiff+0xb6>
 8018ce8:	6106      	str	r6, [r0, #16]
 8018cea:	e7c5      	b.n	8018c78 <__mdiff+0x24>
 8018cec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018cf0:	fa1e f381 	uxtah	r3, lr, r1
 8018cf4:	141a      	asrs	r2, r3, #16
 8018cf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018cfa:	b29b      	uxth	r3, r3
 8018cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018d04:	f845 3b04 	str.w	r3, [r5], #4
 8018d08:	e7e9      	b.n	8018cde <__mdiff+0x8a>
 8018d0a:	3e01      	subs	r6, #1
 8018d0c:	e7e9      	b.n	8018ce2 <__mdiff+0x8e>
	...

08018d10 <__ulp>:
 8018d10:	4b12      	ldr	r3, [pc, #72]	; (8018d5c <__ulp+0x4c>)
 8018d12:	ee10 2a90 	vmov	r2, s1
 8018d16:	401a      	ands	r2, r3
 8018d18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	dd04      	ble.n	8018d2a <__ulp+0x1a>
 8018d20:	2000      	movs	r0, #0
 8018d22:	4619      	mov	r1, r3
 8018d24:	ec41 0b10 	vmov	d0, r0, r1
 8018d28:	4770      	bx	lr
 8018d2a:	425b      	negs	r3, r3
 8018d2c:	151b      	asrs	r3, r3, #20
 8018d2e:	2b13      	cmp	r3, #19
 8018d30:	f04f 0000 	mov.w	r0, #0
 8018d34:	f04f 0100 	mov.w	r1, #0
 8018d38:	dc04      	bgt.n	8018d44 <__ulp+0x34>
 8018d3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018d3e:	fa42 f103 	asr.w	r1, r2, r3
 8018d42:	e7ef      	b.n	8018d24 <__ulp+0x14>
 8018d44:	3b14      	subs	r3, #20
 8018d46:	2b1e      	cmp	r3, #30
 8018d48:	f04f 0201 	mov.w	r2, #1
 8018d4c:	bfda      	itte	le
 8018d4e:	f1c3 031f 	rsble	r3, r3, #31
 8018d52:	fa02 f303 	lslle.w	r3, r2, r3
 8018d56:	4613      	movgt	r3, r2
 8018d58:	4618      	mov	r0, r3
 8018d5a:	e7e3      	b.n	8018d24 <__ulp+0x14>
 8018d5c:	7ff00000 	.word	0x7ff00000

08018d60 <__b2d>:
 8018d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d62:	6905      	ldr	r5, [r0, #16]
 8018d64:	f100 0714 	add.w	r7, r0, #20
 8018d68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d6c:	1f2e      	subs	r6, r5, #4
 8018d6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d72:	4620      	mov	r0, r4
 8018d74:	f7ff fdc4 	bl	8018900 <__hi0bits>
 8018d78:	f1c0 0320 	rsb	r3, r0, #32
 8018d7c:	280a      	cmp	r0, #10
 8018d7e:	600b      	str	r3, [r1, #0]
 8018d80:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018df8 <__b2d+0x98>
 8018d84:	dc14      	bgt.n	8018db0 <__b2d+0x50>
 8018d86:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d8e:	42b7      	cmp	r7, r6
 8018d90:	ea41 030c 	orr.w	r3, r1, ip
 8018d94:	bf34      	ite	cc
 8018d96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d9a:	2100      	movcs	r1, #0
 8018d9c:	3015      	adds	r0, #21
 8018d9e:	fa04 f000 	lsl.w	r0, r4, r0
 8018da2:	fa21 f10e 	lsr.w	r1, r1, lr
 8018da6:	ea40 0201 	orr.w	r2, r0, r1
 8018daa:	ec43 2b10 	vmov	d0, r2, r3
 8018dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018db0:	42b7      	cmp	r7, r6
 8018db2:	bf3a      	itte	cc
 8018db4:	f1a5 0608 	subcc.w	r6, r5, #8
 8018db8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018dbc:	2100      	movcs	r1, #0
 8018dbe:	380b      	subs	r0, #11
 8018dc0:	d015      	beq.n	8018dee <__b2d+0x8e>
 8018dc2:	4084      	lsls	r4, r0
 8018dc4:	f1c0 0520 	rsb	r5, r0, #32
 8018dc8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018dcc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018dd0:	42be      	cmp	r6, r7
 8018dd2:	fa21 fc05 	lsr.w	ip, r1, r5
 8018dd6:	ea44 030c 	orr.w	r3, r4, ip
 8018dda:	bf8c      	ite	hi
 8018ddc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018de0:	2400      	movls	r4, #0
 8018de2:	fa01 f000 	lsl.w	r0, r1, r0
 8018de6:	40ec      	lsrs	r4, r5
 8018de8:	ea40 0204 	orr.w	r2, r0, r4
 8018dec:	e7dd      	b.n	8018daa <__b2d+0x4a>
 8018dee:	ea44 030c 	orr.w	r3, r4, ip
 8018df2:	460a      	mov	r2, r1
 8018df4:	e7d9      	b.n	8018daa <__b2d+0x4a>
 8018df6:	bf00      	nop
 8018df8:	3ff00000 	.word	0x3ff00000

08018dfc <__d2b>:
 8018dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e00:	460e      	mov	r6, r1
 8018e02:	2101      	movs	r1, #1
 8018e04:	ec59 8b10 	vmov	r8, r9, d0
 8018e08:	4615      	mov	r5, r2
 8018e0a:	f7ff fcb5 	bl	8018778 <_Balloc>
 8018e0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018e12:	4607      	mov	r7, r0
 8018e14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e18:	bb34      	cbnz	r4, 8018e68 <__d2b+0x6c>
 8018e1a:	9301      	str	r3, [sp, #4]
 8018e1c:	f1b8 0300 	subs.w	r3, r8, #0
 8018e20:	d027      	beq.n	8018e72 <__d2b+0x76>
 8018e22:	a802      	add	r0, sp, #8
 8018e24:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018e28:	f7ff fd89 	bl	801893e <__lo0bits>
 8018e2c:	9900      	ldr	r1, [sp, #0]
 8018e2e:	b1f0      	cbz	r0, 8018e6e <__d2b+0x72>
 8018e30:	9a01      	ldr	r2, [sp, #4]
 8018e32:	f1c0 0320 	rsb	r3, r0, #32
 8018e36:	fa02 f303 	lsl.w	r3, r2, r3
 8018e3a:	430b      	orrs	r3, r1
 8018e3c:	40c2      	lsrs	r2, r0
 8018e3e:	617b      	str	r3, [r7, #20]
 8018e40:	9201      	str	r2, [sp, #4]
 8018e42:	9b01      	ldr	r3, [sp, #4]
 8018e44:	61bb      	str	r3, [r7, #24]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	bf14      	ite	ne
 8018e4a:	2102      	movne	r1, #2
 8018e4c:	2101      	moveq	r1, #1
 8018e4e:	6139      	str	r1, [r7, #16]
 8018e50:	b1c4      	cbz	r4, 8018e84 <__d2b+0x88>
 8018e52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018e56:	4404      	add	r4, r0
 8018e58:	6034      	str	r4, [r6, #0]
 8018e5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e5e:	6028      	str	r0, [r5, #0]
 8018e60:	4638      	mov	r0, r7
 8018e62:	b003      	add	sp, #12
 8018e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e6c:	e7d5      	b.n	8018e1a <__d2b+0x1e>
 8018e6e:	6179      	str	r1, [r7, #20]
 8018e70:	e7e7      	b.n	8018e42 <__d2b+0x46>
 8018e72:	a801      	add	r0, sp, #4
 8018e74:	f7ff fd63 	bl	801893e <__lo0bits>
 8018e78:	9b01      	ldr	r3, [sp, #4]
 8018e7a:	617b      	str	r3, [r7, #20]
 8018e7c:	2101      	movs	r1, #1
 8018e7e:	6139      	str	r1, [r7, #16]
 8018e80:	3020      	adds	r0, #32
 8018e82:	e7e5      	b.n	8018e50 <__d2b+0x54>
 8018e84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018e88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e8c:	6030      	str	r0, [r6, #0]
 8018e8e:	6918      	ldr	r0, [r3, #16]
 8018e90:	f7ff fd36 	bl	8018900 <__hi0bits>
 8018e94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e98:	e7e1      	b.n	8018e5e <__d2b+0x62>

08018e9a <__ratio>:
 8018e9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e9e:	4688      	mov	r8, r1
 8018ea0:	4669      	mov	r1, sp
 8018ea2:	4681      	mov	r9, r0
 8018ea4:	f7ff ff5c 	bl	8018d60 <__b2d>
 8018ea8:	a901      	add	r1, sp, #4
 8018eaa:	4640      	mov	r0, r8
 8018eac:	ec57 6b10 	vmov	r6, r7, d0
 8018eb0:	f7ff ff56 	bl	8018d60 <__b2d>
 8018eb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018eb8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018ebc:	eba3 0c02 	sub.w	ip, r3, r2
 8018ec0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018ec4:	1a9b      	subs	r3, r3, r2
 8018ec6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018eca:	ec5b ab10 	vmov	sl, fp, d0
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	bfce      	itee	gt
 8018ed2:	463a      	movgt	r2, r7
 8018ed4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ed8:	465a      	movle	r2, fp
 8018eda:	4659      	mov	r1, fp
 8018edc:	463d      	mov	r5, r7
 8018ede:	bfd4      	ite	le
 8018ee0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018ee4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018ee8:	4630      	mov	r0, r6
 8018eea:	ee10 2a10 	vmov	r2, s0
 8018eee:	460b      	mov	r3, r1
 8018ef0:	4629      	mov	r1, r5
 8018ef2:	f7e7 fcdb 	bl	80008ac <__aeabi_ddiv>
 8018ef6:	ec41 0b10 	vmov	d0, r0, r1
 8018efa:	b003      	add	sp, #12
 8018efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f00 <__copybits>:
 8018f00:	3901      	subs	r1, #1
 8018f02:	b510      	push	{r4, lr}
 8018f04:	1149      	asrs	r1, r1, #5
 8018f06:	6914      	ldr	r4, [r2, #16]
 8018f08:	3101      	adds	r1, #1
 8018f0a:	f102 0314 	add.w	r3, r2, #20
 8018f0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018f12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018f16:	42a3      	cmp	r3, r4
 8018f18:	4602      	mov	r2, r0
 8018f1a:	d303      	bcc.n	8018f24 <__copybits+0x24>
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	428a      	cmp	r2, r1
 8018f20:	d305      	bcc.n	8018f2e <__copybits+0x2e>
 8018f22:	bd10      	pop	{r4, pc}
 8018f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f28:	f840 2b04 	str.w	r2, [r0], #4
 8018f2c:	e7f3      	b.n	8018f16 <__copybits+0x16>
 8018f2e:	f842 3b04 	str.w	r3, [r2], #4
 8018f32:	e7f4      	b.n	8018f1e <__copybits+0x1e>

08018f34 <__any_on>:
 8018f34:	f100 0214 	add.w	r2, r0, #20
 8018f38:	6900      	ldr	r0, [r0, #16]
 8018f3a:	114b      	asrs	r3, r1, #5
 8018f3c:	4298      	cmp	r0, r3
 8018f3e:	b510      	push	{r4, lr}
 8018f40:	db11      	blt.n	8018f66 <__any_on+0x32>
 8018f42:	dd0a      	ble.n	8018f5a <__any_on+0x26>
 8018f44:	f011 011f 	ands.w	r1, r1, #31
 8018f48:	d007      	beq.n	8018f5a <__any_on+0x26>
 8018f4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f4e:	fa24 f001 	lsr.w	r0, r4, r1
 8018f52:	fa00 f101 	lsl.w	r1, r0, r1
 8018f56:	428c      	cmp	r4, r1
 8018f58:	d10b      	bne.n	8018f72 <__any_on+0x3e>
 8018f5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f5e:	4293      	cmp	r3, r2
 8018f60:	d803      	bhi.n	8018f6a <__any_on+0x36>
 8018f62:	2000      	movs	r0, #0
 8018f64:	bd10      	pop	{r4, pc}
 8018f66:	4603      	mov	r3, r0
 8018f68:	e7f7      	b.n	8018f5a <__any_on+0x26>
 8018f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f6e:	2900      	cmp	r1, #0
 8018f70:	d0f5      	beq.n	8018f5e <__any_on+0x2a>
 8018f72:	2001      	movs	r0, #1
 8018f74:	e7f6      	b.n	8018f64 <__any_on+0x30>

08018f76 <_calloc_r>:
 8018f76:	b538      	push	{r3, r4, r5, lr}
 8018f78:	fb02 f401 	mul.w	r4, r2, r1
 8018f7c:	4621      	mov	r1, r4
 8018f7e:	f7fc fb01 	bl	8015584 <_malloc_r>
 8018f82:	4605      	mov	r5, r0
 8018f84:	b118      	cbz	r0, 8018f8e <_calloc_r+0x18>
 8018f86:	4622      	mov	r2, r4
 8018f88:	2100      	movs	r1, #0
 8018f8a:	f7fc faa4 	bl	80154d6 <memset>
 8018f8e:	4628      	mov	r0, r5
 8018f90:	bd38      	pop	{r3, r4, r5, pc}

08018f92 <_realloc_r>:
 8018f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f94:	4607      	mov	r7, r0
 8018f96:	4614      	mov	r4, r2
 8018f98:	460e      	mov	r6, r1
 8018f9a:	b921      	cbnz	r1, 8018fa6 <_realloc_r+0x14>
 8018f9c:	4611      	mov	r1, r2
 8018f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018fa2:	f7fc baef 	b.w	8015584 <_malloc_r>
 8018fa6:	b922      	cbnz	r2, 8018fb2 <_realloc_r+0x20>
 8018fa8:	f7fc fa9e 	bl	80154e8 <_free_r>
 8018fac:	4625      	mov	r5, r4
 8018fae:	4628      	mov	r0, r5
 8018fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fb2:	f001 f887 	bl	801a0c4 <_malloc_usable_size_r>
 8018fb6:	42a0      	cmp	r0, r4
 8018fb8:	d20f      	bcs.n	8018fda <_realloc_r+0x48>
 8018fba:	4621      	mov	r1, r4
 8018fbc:	4638      	mov	r0, r7
 8018fbe:	f7fc fae1 	bl	8015584 <_malloc_r>
 8018fc2:	4605      	mov	r5, r0
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d0f2      	beq.n	8018fae <_realloc_r+0x1c>
 8018fc8:	4631      	mov	r1, r6
 8018fca:	4622      	mov	r2, r4
 8018fcc:	f7fc fa5f 	bl	801548e <memcpy>
 8018fd0:	4631      	mov	r1, r6
 8018fd2:	4638      	mov	r0, r7
 8018fd4:	f7fc fa88 	bl	80154e8 <_free_r>
 8018fd8:	e7e9      	b.n	8018fae <_realloc_r+0x1c>
 8018fda:	4635      	mov	r5, r6
 8018fdc:	e7e7      	b.n	8018fae <_realloc_r+0x1c>

08018fde <__ssputs_r>:
 8018fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fe2:	688e      	ldr	r6, [r1, #8]
 8018fe4:	429e      	cmp	r6, r3
 8018fe6:	4682      	mov	sl, r0
 8018fe8:	460c      	mov	r4, r1
 8018fea:	4690      	mov	r8, r2
 8018fec:	4699      	mov	r9, r3
 8018fee:	d837      	bhi.n	8019060 <__ssputs_r+0x82>
 8018ff0:	898a      	ldrh	r2, [r1, #12]
 8018ff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ff6:	d031      	beq.n	801905c <__ssputs_r+0x7e>
 8018ff8:	6825      	ldr	r5, [r4, #0]
 8018ffa:	6909      	ldr	r1, [r1, #16]
 8018ffc:	1a6f      	subs	r7, r5, r1
 8018ffe:	6965      	ldr	r5, [r4, #20]
 8019000:	2302      	movs	r3, #2
 8019002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019006:	fb95 f5f3 	sdiv	r5, r5, r3
 801900a:	f109 0301 	add.w	r3, r9, #1
 801900e:	443b      	add	r3, r7
 8019010:	429d      	cmp	r5, r3
 8019012:	bf38      	it	cc
 8019014:	461d      	movcc	r5, r3
 8019016:	0553      	lsls	r3, r2, #21
 8019018:	d530      	bpl.n	801907c <__ssputs_r+0x9e>
 801901a:	4629      	mov	r1, r5
 801901c:	f7fc fab2 	bl	8015584 <_malloc_r>
 8019020:	4606      	mov	r6, r0
 8019022:	b950      	cbnz	r0, 801903a <__ssputs_r+0x5c>
 8019024:	230c      	movs	r3, #12
 8019026:	f8ca 3000 	str.w	r3, [sl]
 801902a:	89a3      	ldrh	r3, [r4, #12]
 801902c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019030:	81a3      	strh	r3, [r4, #12]
 8019032:	f04f 30ff 	mov.w	r0, #4294967295
 8019036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801903a:	463a      	mov	r2, r7
 801903c:	6921      	ldr	r1, [r4, #16]
 801903e:	f7fc fa26 	bl	801548e <memcpy>
 8019042:	89a3      	ldrh	r3, [r4, #12]
 8019044:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801904c:	81a3      	strh	r3, [r4, #12]
 801904e:	6126      	str	r6, [r4, #16]
 8019050:	6165      	str	r5, [r4, #20]
 8019052:	443e      	add	r6, r7
 8019054:	1bed      	subs	r5, r5, r7
 8019056:	6026      	str	r6, [r4, #0]
 8019058:	60a5      	str	r5, [r4, #8]
 801905a:	464e      	mov	r6, r9
 801905c:	454e      	cmp	r6, r9
 801905e:	d900      	bls.n	8019062 <__ssputs_r+0x84>
 8019060:	464e      	mov	r6, r9
 8019062:	4632      	mov	r2, r6
 8019064:	4641      	mov	r1, r8
 8019066:	6820      	ldr	r0, [r4, #0]
 8019068:	f7fc fa1c 	bl	80154a4 <memmove>
 801906c:	68a3      	ldr	r3, [r4, #8]
 801906e:	1b9b      	subs	r3, r3, r6
 8019070:	60a3      	str	r3, [r4, #8]
 8019072:	6823      	ldr	r3, [r4, #0]
 8019074:	441e      	add	r6, r3
 8019076:	6026      	str	r6, [r4, #0]
 8019078:	2000      	movs	r0, #0
 801907a:	e7dc      	b.n	8019036 <__ssputs_r+0x58>
 801907c:	462a      	mov	r2, r5
 801907e:	f7ff ff88 	bl	8018f92 <_realloc_r>
 8019082:	4606      	mov	r6, r0
 8019084:	2800      	cmp	r0, #0
 8019086:	d1e2      	bne.n	801904e <__ssputs_r+0x70>
 8019088:	6921      	ldr	r1, [r4, #16]
 801908a:	4650      	mov	r0, sl
 801908c:	f7fc fa2c 	bl	80154e8 <_free_r>
 8019090:	e7c8      	b.n	8019024 <__ssputs_r+0x46>
	...

08019094 <_svfiprintf_r>:
 8019094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019098:	461d      	mov	r5, r3
 801909a:	898b      	ldrh	r3, [r1, #12]
 801909c:	061f      	lsls	r7, r3, #24
 801909e:	b09d      	sub	sp, #116	; 0x74
 80190a0:	4680      	mov	r8, r0
 80190a2:	460c      	mov	r4, r1
 80190a4:	4616      	mov	r6, r2
 80190a6:	d50f      	bpl.n	80190c8 <_svfiprintf_r+0x34>
 80190a8:	690b      	ldr	r3, [r1, #16]
 80190aa:	b96b      	cbnz	r3, 80190c8 <_svfiprintf_r+0x34>
 80190ac:	2140      	movs	r1, #64	; 0x40
 80190ae:	f7fc fa69 	bl	8015584 <_malloc_r>
 80190b2:	6020      	str	r0, [r4, #0]
 80190b4:	6120      	str	r0, [r4, #16]
 80190b6:	b928      	cbnz	r0, 80190c4 <_svfiprintf_r+0x30>
 80190b8:	230c      	movs	r3, #12
 80190ba:	f8c8 3000 	str.w	r3, [r8]
 80190be:	f04f 30ff 	mov.w	r0, #4294967295
 80190c2:	e0c8      	b.n	8019256 <_svfiprintf_r+0x1c2>
 80190c4:	2340      	movs	r3, #64	; 0x40
 80190c6:	6163      	str	r3, [r4, #20]
 80190c8:	2300      	movs	r3, #0
 80190ca:	9309      	str	r3, [sp, #36]	; 0x24
 80190cc:	2320      	movs	r3, #32
 80190ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190d2:	2330      	movs	r3, #48	; 0x30
 80190d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190d8:	9503      	str	r5, [sp, #12]
 80190da:	f04f 0b01 	mov.w	fp, #1
 80190de:	4637      	mov	r7, r6
 80190e0:	463d      	mov	r5, r7
 80190e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80190e6:	b10b      	cbz	r3, 80190ec <_svfiprintf_r+0x58>
 80190e8:	2b25      	cmp	r3, #37	; 0x25
 80190ea:	d13e      	bne.n	801916a <_svfiprintf_r+0xd6>
 80190ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80190f0:	d00b      	beq.n	801910a <_svfiprintf_r+0x76>
 80190f2:	4653      	mov	r3, sl
 80190f4:	4632      	mov	r2, r6
 80190f6:	4621      	mov	r1, r4
 80190f8:	4640      	mov	r0, r8
 80190fa:	f7ff ff70 	bl	8018fde <__ssputs_r>
 80190fe:	3001      	adds	r0, #1
 8019100:	f000 80a4 	beq.w	801924c <_svfiprintf_r+0x1b8>
 8019104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019106:	4453      	add	r3, sl
 8019108:	9309      	str	r3, [sp, #36]	; 0x24
 801910a:	783b      	ldrb	r3, [r7, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	f000 809d 	beq.w	801924c <_svfiprintf_r+0x1b8>
 8019112:	2300      	movs	r3, #0
 8019114:	f04f 32ff 	mov.w	r2, #4294967295
 8019118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801911c:	9304      	str	r3, [sp, #16]
 801911e:	9307      	str	r3, [sp, #28]
 8019120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019124:	931a      	str	r3, [sp, #104]	; 0x68
 8019126:	462f      	mov	r7, r5
 8019128:	2205      	movs	r2, #5
 801912a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801912e:	4850      	ldr	r0, [pc, #320]	; (8019270 <_svfiprintf_r+0x1dc>)
 8019130:	f7e7 f886 	bl	8000240 <memchr>
 8019134:	9b04      	ldr	r3, [sp, #16]
 8019136:	b9d0      	cbnz	r0, 801916e <_svfiprintf_r+0xda>
 8019138:	06d9      	lsls	r1, r3, #27
 801913a:	bf44      	itt	mi
 801913c:	2220      	movmi	r2, #32
 801913e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019142:	071a      	lsls	r2, r3, #28
 8019144:	bf44      	itt	mi
 8019146:	222b      	movmi	r2, #43	; 0x2b
 8019148:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801914c:	782a      	ldrb	r2, [r5, #0]
 801914e:	2a2a      	cmp	r2, #42	; 0x2a
 8019150:	d015      	beq.n	801917e <_svfiprintf_r+0xea>
 8019152:	9a07      	ldr	r2, [sp, #28]
 8019154:	462f      	mov	r7, r5
 8019156:	2000      	movs	r0, #0
 8019158:	250a      	movs	r5, #10
 801915a:	4639      	mov	r1, r7
 801915c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019160:	3b30      	subs	r3, #48	; 0x30
 8019162:	2b09      	cmp	r3, #9
 8019164:	d94d      	bls.n	8019202 <_svfiprintf_r+0x16e>
 8019166:	b1b8      	cbz	r0, 8019198 <_svfiprintf_r+0x104>
 8019168:	e00f      	b.n	801918a <_svfiprintf_r+0xf6>
 801916a:	462f      	mov	r7, r5
 801916c:	e7b8      	b.n	80190e0 <_svfiprintf_r+0x4c>
 801916e:	4a40      	ldr	r2, [pc, #256]	; (8019270 <_svfiprintf_r+0x1dc>)
 8019170:	1a80      	subs	r0, r0, r2
 8019172:	fa0b f000 	lsl.w	r0, fp, r0
 8019176:	4318      	orrs	r0, r3
 8019178:	9004      	str	r0, [sp, #16]
 801917a:	463d      	mov	r5, r7
 801917c:	e7d3      	b.n	8019126 <_svfiprintf_r+0x92>
 801917e:	9a03      	ldr	r2, [sp, #12]
 8019180:	1d11      	adds	r1, r2, #4
 8019182:	6812      	ldr	r2, [r2, #0]
 8019184:	9103      	str	r1, [sp, #12]
 8019186:	2a00      	cmp	r2, #0
 8019188:	db01      	blt.n	801918e <_svfiprintf_r+0xfa>
 801918a:	9207      	str	r2, [sp, #28]
 801918c:	e004      	b.n	8019198 <_svfiprintf_r+0x104>
 801918e:	4252      	negs	r2, r2
 8019190:	f043 0302 	orr.w	r3, r3, #2
 8019194:	9207      	str	r2, [sp, #28]
 8019196:	9304      	str	r3, [sp, #16]
 8019198:	783b      	ldrb	r3, [r7, #0]
 801919a:	2b2e      	cmp	r3, #46	; 0x2e
 801919c:	d10c      	bne.n	80191b8 <_svfiprintf_r+0x124>
 801919e:	787b      	ldrb	r3, [r7, #1]
 80191a0:	2b2a      	cmp	r3, #42	; 0x2a
 80191a2:	d133      	bne.n	801920c <_svfiprintf_r+0x178>
 80191a4:	9b03      	ldr	r3, [sp, #12]
 80191a6:	1d1a      	adds	r2, r3, #4
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	9203      	str	r2, [sp, #12]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	bfb8      	it	lt
 80191b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80191b4:	3702      	adds	r7, #2
 80191b6:	9305      	str	r3, [sp, #20]
 80191b8:	4d2e      	ldr	r5, [pc, #184]	; (8019274 <_svfiprintf_r+0x1e0>)
 80191ba:	7839      	ldrb	r1, [r7, #0]
 80191bc:	2203      	movs	r2, #3
 80191be:	4628      	mov	r0, r5
 80191c0:	f7e7 f83e 	bl	8000240 <memchr>
 80191c4:	b138      	cbz	r0, 80191d6 <_svfiprintf_r+0x142>
 80191c6:	2340      	movs	r3, #64	; 0x40
 80191c8:	1b40      	subs	r0, r0, r5
 80191ca:	fa03 f000 	lsl.w	r0, r3, r0
 80191ce:	9b04      	ldr	r3, [sp, #16]
 80191d0:	4303      	orrs	r3, r0
 80191d2:	3701      	adds	r7, #1
 80191d4:	9304      	str	r3, [sp, #16]
 80191d6:	7839      	ldrb	r1, [r7, #0]
 80191d8:	4827      	ldr	r0, [pc, #156]	; (8019278 <_svfiprintf_r+0x1e4>)
 80191da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191de:	2206      	movs	r2, #6
 80191e0:	1c7e      	adds	r6, r7, #1
 80191e2:	f7e7 f82d 	bl	8000240 <memchr>
 80191e6:	2800      	cmp	r0, #0
 80191e8:	d038      	beq.n	801925c <_svfiprintf_r+0x1c8>
 80191ea:	4b24      	ldr	r3, [pc, #144]	; (801927c <_svfiprintf_r+0x1e8>)
 80191ec:	bb13      	cbnz	r3, 8019234 <_svfiprintf_r+0x1a0>
 80191ee:	9b03      	ldr	r3, [sp, #12]
 80191f0:	3307      	adds	r3, #7
 80191f2:	f023 0307 	bic.w	r3, r3, #7
 80191f6:	3308      	adds	r3, #8
 80191f8:	9303      	str	r3, [sp, #12]
 80191fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191fc:	444b      	add	r3, r9
 80191fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019200:	e76d      	b.n	80190de <_svfiprintf_r+0x4a>
 8019202:	fb05 3202 	mla	r2, r5, r2, r3
 8019206:	2001      	movs	r0, #1
 8019208:	460f      	mov	r7, r1
 801920a:	e7a6      	b.n	801915a <_svfiprintf_r+0xc6>
 801920c:	2300      	movs	r3, #0
 801920e:	3701      	adds	r7, #1
 8019210:	9305      	str	r3, [sp, #20]
 8019212:	4619      	mov	r1, r3
 8019214:	250a      	movs	r5, #10
 8019216:	4638      	mov	r0, r7
 8019218:	f810 2b01 	ldrb.w	r2, [r0], #1
 801921c:	3a30      	subs	r2, #48	; 0x30
 801921e:	2a09      	cmp	r2, #9
 8019220:	d903      	bls.n	801922a <_svfiprintf_r+0x196>
 8019222:	2b00      	cmp	r3, #0
 8019224:	d0c8      	beq.n	80191b8 <_svfiprintf_r+0x124>
 8019226:	9105      	str	r1, [sp, #20]
 8019228:	e7c6      	b.n	80191b8 <_svfiprintf_r+0x124>
 801922a:	fb05 2101 	mla	r1, r5, r1, r2
 801922e:	2301      	movs	r3, #1
 8019230:	4607      	mov	r7, r0
 8019232:	e7f0      	b.n	8019216 <_svfiprintf_r+0x182>
 8019234:	ab03      	add	r3, sp, #12
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	4622      	mov	r2, r4
 801923a:	4b11      	ldr	r3, [pc, #68]	; (8019280 <_svfiprintf_r+0x1ec>)
 801923c:	a904      	add	r1, sp, #16
 801923e:	4640      	mov	r0, r8
 8019240:	f7fc fa8e 	bl	8015760 <_printf_float>
 8019244:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019248:	4681      	mov	r9, r0
 801924a:	d1d6      	bne.n	80191fa <_svfiprintf_r+0x166>
 801924c:	89a3      	ldrh	r3, [r4, #12]
 801924e:	065b      	lsls	r3, r3, #25
 8019250:	f53f af35 	bmi.w	80190be <_svfiprintf_r+0x2a>
 8019254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019256:	b01d      	add	sp, #116	; 0x74
 8019258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801925c:	ab03      	add	r3, sp, #12
 801925e:	9300      	str	r3, [sp, #0]
 8019260:	4622      	mov	r2, r4
 8019262:	4b07      	ldr	r3, [pc, #28]	; (8019280 <_svfiprintf_r+0x1ec>)
 8019264:	a904      	add	r1, sp, #16
 8019266:	4640      	mov	r0, r8
 8019268:	f7fc fd30 	bl	8015ccc <_printf_i>
 801926c:	e7ea      	b.n	8019244 <_svfiprintf_r+0x1b0>
 801926e:	bf00      	nop
 8019270:	0801d0bc 	.word	0x0801d0bc
 8019274:	0801d0c2 	.word	0x0801d0c2
 8019278:	0801d0c6 	.word	0x0801d0c6
 801927c:	08015761 	.word	0x08015761
 8019280:	08018fdf 	.word	0x08018fdf

08019284 <_sungetc_r>:
 8019284:	b538      	push	{r3, r4, r5, lr}
 8019286:	1c4b      	adds	r3, r1, #1
 8019288:	4614      	mov	r4, r2
 801928a:	d103      	bne.n	8019294 <_sungetc_r+0x10>
 801928c:	f04f 35ff 	mov.w	r5, #4294967295
 8019290:	4628      	mov	r0, r5
 8019292:	bd38      	pop	{r3, r4, r5, pc}
 8019294:	8993      	ldrh	r3, [r2, #12]
 8019296:	f023 0320 	bic.w	r3, r3, #32
 801929a:	8193      	strh	r3, [r2, #12]
 801929c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801929e:	6852      	ldr	r2, [r2, #4]
 80192a0:	b2cd      	uxtb	r5, r1
 80192a2:	b18b      	cbz	r3, 80192c8 <_sungetc_r+0x44>
 80192a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80192a6:	4293      	cmp	r3, r2
 80192a8:	dd08      	ble.n	80192bc <_sungetc_r+0x38>
 80192aa:	6823      	ldr	r3, [r4, #0]
 80192ac:	1e5a      	subs	r2, r3, #1
 80192ae:	6022      	str	r2, [r4, #0]
 80192b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80192b4:	6863      	ldr	r3, [r4, #4]
 80192b6:	3301      	adds	r3, #1
 80192b8:	6063      	str	r3, [r4, #4]
 80192ba:	e7e9      	b.n	8019290 <_sungetc_r+0xc>
 80192bc:	4621      	mov	r1, r4
 80192be:	f000 fcf3 	bl	8019ca8 <__submore>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	d0f1      	beq.n	80192aa <_sungetc_r+0x26>
 80192c6:	e7e1      	b.n	801928c <_sungetc_r+0x8>
 80192c8:	6921      	ldr	r1, [r4, #16]
 80192ca:	6823      	ldr	r3, [r4, #0]
 80192cc:	b151      	cbz	r1, 80192e4 <_sungetc_r+0x60>
 80192ce:	4299      	cmp	r1, r3
 80192d0:	d208      	bcs.n	80192e4 <_sungetc_r+0x60>
 80192d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80192d6:	42a9      	cmp	r1, r5
 80192d8:	d104      	bne.n	80192e4 <_sungetc_r+0x60>
 80192da:	3b01      	subs	r3, #1
 80192dc:	3201      	adds	r2, #1
 80192de:	6023      	str	r3, [r4, #0]
 80192e0:	6062      	str	r2, [r4, #4]
 80192e2:	e7d5      	b.n	8019290 <_sungetc_r+0xc>
 80192e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80192e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192ec:	6363      	str	r3, [r4, #52]	; 0x34
 80192ee:	2303      	movs	r3, #3
 80192f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80192f2:	4623      	mov	r3, r4
 80192f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80192f8:	6023      	str	r3, [r4, #0]
 80192fa:	2301      	movs	r3, #1
 80192fc:	e7dc      	b.n	80192b8 <_sungetc_r+0x34>

080192fe <__ssrefill_r>:
 80192fe:	b510      	push	{r4, lr}
 8019300:	460c      	mov	r4, r1
 8019302:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019304:	b169      	cbz	r1, 8019322 <__ssrefill_r+0x24>
 8019306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801930a:	4299      	cmp	r1, r3
 801930c:	d001      	beq.n	8019312 <__ssrefill_r+0x14>
 801930e:	f7fc f8eb 	bl	80154e8 <_free_r>
 8019312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019314:	6063      	str	r3, [r4, #4]
 8019316:	2000      	movs	r0, #0
 8019318:	6360      	str	r0, [r4, #52]	; 0x34
 801931a:	b113      	cbz	r3, 8019322 <__ssrefill_r+0x24>
 801931c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801931e:	6023      	str	r3, [r4, #0]
 8019320:	bd10      	pop	{r4, pc}
 8019322:	6923      	ldr	r3, [r4, #16]
 8019324:	6023      	str	r3, [r4, #0]
 8019326:	2300      	movs	r3, #0
 8019328:	6063      	str	r3, [r4, #4]
 801932a:	89a3      	ldrh	r3, [r4, #12]
 801932c:	f043 0320 	orr.w	r3, r3, #32
 8019330:	81a3      	strh	r3, [r4, #12]
 8019332:	f04f 30ff 	mov.w	r0, #4294967295
 8019336:	e7f3      	b.n	8019320 <__ssrefill_r+0x22>

08019338 <__ssvfiscanf_r>:
 8019338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801933c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019340:	460c      	mov	r4, r1
 8019342:	2100      	movs	r1, #0
 8019344:	9144      	str	r1, [sp, #272]	; 0x110
 8019346:	9145      	str	r1, [sp, #276]	; 0x114
 8019348:	499f      	ldr	r1, [pc, #636]	; (80195c8 <__ssvfiscanf_r+0x290>)
 801934a:	91a0      	str	r1, [sp, #640]	; 0x280
 801934c:	f10d 0804 	add.w	r8, sp, #4
 8019350:	499e      	ldr	r1, [pc, #632]	; (80195cc <__ssvfiscanf_r+0x294>)
 8019352:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80195d0 <__ssvfiscanf_r+0x298>
 8019356:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801935a:	4606      	mov	r6, r0
 801935c:	4692      	mov	sl, r2
 801935e:	91a1      	str	r1, [sp, #644]	; 0x284
 8019360:	9300      	str	r3, [sp, #0]
 8019362:	270a      	movs	r7, #10
 8019364:	f89a 3000 	ldrb.w	r3, [sl]
 8019368:	2b00      	cmp	r3, #0
 801936a:	f000 812a 	beq.w	80195c2 <__ssvfiscanf_r+0x28a>
 801936e:	4655      	mov	r5, sl
 8019370:	f7fc f84e 	bl	8015410 <__locale_ctype_ptr>
 8019374:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019378:	4458      	add	r0, fp
 801937a:	7843      	ldrb	r3, [r0, #1]
 801937c:	f013 0308 	ands.w	r3, r3, #8
 8019380:	d01c      	beq.n	80193bc <__ssvfiscanf_r+0x84>
 8019382:	6863      	ldr	r3, [r4, #4]
 8019384:	2b00      	cmp	r3, #0
 8019386:	dd12      	ble.n	80193ae <__ssvfiscanf_r+0x76>
 8019388:	f7fc f842 	bl	8015410 <__locale_ctype_ptr>
 801938c:	6823      	ldr	r3, [r4, #0]
 801938e:	781a      	ldrb	r2, [r3, #0]
 8019390:	4410      	add	r0, r2
 8019392:	7842      	ldrb	r2, [r0, #1]
 8019394:	0712      	lsls	r2, r2, #28
 8019396:	d401      	bmi.n	801939c <__ssvfiscanf_r+0x64>
 8019398:	46aa      	mov	sl, r5
 801939a:	e7e3      	b.n	8019364 <__ssvfiscanf_r+0x2c>
 801939c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801939e:	3201      	adds	r2, #1
 80193a0:	9245      	str	r2, [sp, #276]	; 0x114
 80193a2:	6862      	ldr	r2, [r4, #4]
 80193a4:	3301      	adds	r3, #1
 80193a6:	3a01      	subs	r2, #1
 80193a8:	6062      	str	r2, [r4, #4]
 80193aa:	6023      	str	r3, [r4, #0]
 80193ac:	e7e9      	b.n	8019382 <__ssvfiscanf_r+0x4a>
 80193ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80193b0:	4621      	mov	r1, r4
 80193b2:	4630      	mov	r0, r6
 80193b4:	4798      	blx	r3
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d0e6      	beq.n	8019388 <__ssvfiscanf_r+0x50>
 80193ba:	e7ed      	b.n	8019398 <__ssvfiscanf_r+0x60>
 80193bc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80193c0:	f040 8082 	bne.w	80194c8 <__ssvfiscanf_r+0x190>
 80193c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80193c6:	9341      	str	r3, [sp, #260]	; 0x104
 80193c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80193cc:	2b2a      	cmp	r3, #42	; 0x2a
 80193ce:	d103      	bne.n	80193d8 <__ssvfiscanf_r+0xa0>
 80193d0:	2310      	movs	r3, #16
 80193d2:	9341      	str	r3, [sp, #260]	; 0x104
 80193d4:	f10a 0502 	add.w	r5, sl, #2
 80193d8:	46aa      	mov	sl, r5
 80193da:	f815 1b01 	ldrb.w	r1, [r5], #1
 80193de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80193e2:	2a09      	cmp	r2, #9
 80193e4:	d922      	bls.n	801942c <__ssvfiscanf_r+0xf4>
 80193e6:	2203      	movs	r2, #3
 80193e8:	4879      	ldr	r0, [pc, #484]	; (80195d0 <__ssvfiscanf_r+0x298>)
 80193ea:	f7e6 ff29 	bl	8000240 <memchr>
 80193ee:	b138      	cbz	r0, 8019400 <__ssvfiscanf_r+0xc8>
 80193f0:	eba0 0309 	sub.w	r3, r0, r9
 80193f4:	2001      	movs	r0, #1
 80193f6:	4098      	lsls	r0, r3
 80193f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80193fa:	4318      	orrs	r0, r3
 80193fc:	9041      	str	r0, [sp, #260]	; 0x104
 80193fe:	46aa      	mov	sl, r5
 8019400:	f89a 3000 	ldrb.w	r3, [sl]
 8019404:	2b67      	cmp	r3, #103	; 0x67
 8019406:	f10a 0501 	add.w	r5, sl, #1
 801940a:	d82b      	bhi.n	8019464 <__ssvfiscanf_r+0x12c>
 801940c:	2b65      	cmp	r3, #101	; 0x65
 801940e:	f080 809f 	bcs.w	8019550 <__ssvfiscanf_r+0x218>
 8019412:	2b47      	cmp	r3, #71	; 0x47
 8019414:	d810      	bhi.n	8019438 <__ssvfiscanf_r+0x100>
 8019416:	2b45      	cmp	r3, #69	; 0x45
 8019418:	f080 809a 	bcs.w	8019550 <__ssvfiscanf_r+0x218>
 801941c:	2b00      	cmp	r3, #0
 801941e:	d06c      	beq.n	80194fa <__ssvfiscanf_r+0x1c2>
 8019420:	2b25      	cmp	r3, #37	; 0x25
 8019422:	d051      	beq.n	80194c8 <__ssvfiscanf_r+0x190>
 8019424:	2303      	movs	r3, #3
 8019426:	9347      	str	r3, [sp, #284]	; 0x11c
 8019428:	9742      	str	r7, [sp, #264]	; 0x108
 801942a:	e027      	b.n	801947c <__ssvfiscanf_r+0x144>
 801942c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801942e:	fb07 1303 	mla	r3, r7, r3, r1
 8019432:	3b30      	subs	r3, #48	; 0x30
 8019434:	9343      	str	r3, [sp, #268]	; 0x10c
 8019436:	e7cf      	b.n	80193d8 <__ssvfiscanf_r+0xa0>
 8019438:	2b5b      	cmp	r3, #91	; 0x5b
 801943a:	d06a      	beq.n	8019512 <__ssvfiscanf_r+0x1da>
 801943c:	d80c      	bhi.n	8019458 <__ssvfiscanf_r+0x120>
 801943e:	2b58      	cmp	r3, #88	; 0x58
 8019440:	d1f0      	bne.n	8019424 <__ssvfiscanf_r+0xec>
 8019442:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019448:	9241      	str	r2, [sp, #260]	; 0x104
 801944a:	2210      	movs	r2, #16
 801944c:	9242      	str	r2, [sp, #264]	; 0x108
 801944e:	2b6e      	cmp	r3, #110	; 0x6e
 8019450:	bf8c      	ite	hi
 8019452:	2304      	movhi	r3, #4
 8019454:	2303      	movls	r3, #3
 8019456:	e010      	b.n	801947a <__ssvfiscanf_r+0x142>
 8019458:	2b63      	cmp	r3, #99	; 0x63
 801945a:	d065      	beq.n	8019528 <__ssvfiscanf_r+0x1f0>
 801945c:	2b64      	cmp	r3, #100	; 0x64
 801945e:	d1e1      	bne.n	8019424 <__ssvfiscanf_r+0xec>
 8019460:	9742      	str	r7, [sp, #264]	; 0x108
 8019462:	e7f4      	b.n	801944e <__ssvfiscanf_r+0x116>
 8019464:	2b70      	cmp	r3, #112	; 0x70
 8019466:	d04b      	beq.n	8019500 <__ssvfiscanf_r+0x1c8>
 8019468:	d826      	bhi.n	80194b8 <__ssvfiscanf_r+0x180>
 801946a:	2b6e      	cmp	r3, #110	; 0x6e
 801946c:	d062      	beq.n	8019534 <__ssvfiscanf_r+0x1fc>
 801946e:	d84c      	bhi.n	801950a <__ssvfiscanf_r+0x1d2>
 8019470:	2b69      	cmp	r3, #105	; 0x69
 8019472:	d1d7      	bne.n	8019424 <__ssvfiscanf_r+0xec>
 8019474:	2300      	movs	r3, #0
 8019476:	9342      	str	r3, [sp, #264]	; 0x108
 8019478:	2303      	movs	r3, #3
 801947a:	9347      	str	r3, [sp, #284]	; 0x11c
 801947c:	6863      	ldr	r3, [r4, #4]
 801947e:	2b00      	cmp	r3, #0
 8019480:	dd68      	ble.n	8019554 <__ssvfiscanf_r+0x21c>
 8019482:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019484:	0659      	lsls	r1, r3, #25
 8019486:	d407      	bmi.n	8019498 <__ssvfiscanf_r+0x160>
 8019488:	f7fb ffc2 	bl	8015410 <__locale_ctype_ptr>
 801948c:	6823      	ldr	r3, [r4, #0]
 801948e:	781a      	ldrb	r2, [r3, #0]
 8019490:	4410      	add	r0, r2
 8019492:	7842      	ldrb	r2, [r0, #1]
 8019494:	0712      	lsls	r2, r2, #28
 8019496:	d464      	bmi.n	8019562 <__ssvfiscanf_r+0x22a>
 8019498:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801949a:	2b02      	cmp	r3, #2
 801949c:	dc73      	bgt.n	8019586 <__ssvfiscanf_r+0x24e>
 801949e:	466b      	mov	r3, sp
 80194a0:	4622      	mov	r2, r4
 80194a2:	a941      	add	r1, sp, #260	; 0x104
 80194a4:	4630      	mov	r0, r6
 80194a6:	f000 f9d7 	bl	8019858 <_scanf_chars>
 80194aa:	2801      	cmp	r0, #1
 80194ac:	f000 8089 	beq.w	80195c2 <__ssvfiscanf_r+0x28a>
 80194b0:	2802      	cmp	r0, #2
 80194b2:	f47f af71 	bne.w	8019398 <__ssvfiscanf_r+0x60>
 80194b6:	e01d      	b.n	80194f4 <__ssvfiscanf_r+0x1bc>
 80194b8:	2b75      	cmp	r3, #117	; 0x75
 80194ba:	d0d1      	beq.n	8019460 <__ssvfiscanf_r+0x128>
 80194bc:	2b78      	cmp	r3, #120	; 0x78
 80194be:	d0c0      	beq.n	8019442 <__ssvfiscanf_r+0x10a>
 80194c0:	2b73      	cmp	r3, #115	; 0x73
 80194c2:	d1af      	bne.n	8019424 <__ssvfiscanf_r+0xec>
 80194c4:	2302      	movs	r3, #2
 80194c6:	e7d8      	b.n	801947a <__ssvfiscanf_r+0x142>
 80194c8:	6863      	ldr	r3, [r4, #4]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	dd0c      	ble.n	80194e8 <__ssvfiscanf_r+0x1b0>
 80194ce:	6823      	ldr	r3, [r4, #0]
 80194d0:	781a      	ldrb	r2, [r3, #0]
 80194d2:	455a      	cmp	r2, fp
 80194d4:	d175      	bne.n	80195c2 <__ssvfiscanf_r+0x28a>
 80194d6:	3301      	adds	r3, #1
 80194d8:	6862      	ldr	r2, [r4, #4]
 80194da:	6023      	str	r3, [r4, #0]
 80194dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80194de:	3a01      	subs	r2, #1
 80194e0:	3301      	adds	r3, #1
 80194e2:	6062      	str	r2, [r4, #4]
 80194e4:	9345      	str	r3, [sp, #276]	; 0x114
 80194e6:	e757      	b.n	8019398 <__ssvfiscanf_r+0x60>
 80194e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80194ea:	4621      	mov	r1, r4
 80194ec:	4630      	mov	r0, r6
 80194ee:	4798      	blx	r3
 80194f0:	2800      	cmp	r0, #0
 80194f2:	d0ec      	beq.n	80194ce <__ssvfiscanf_r+0x196>
 80194f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80194f6:	2800      	cmp	r0, #0
 80194f8:	d159      	bne.n	80195ae <__ssvfiscanf_r+0x276>
 80194fa:	f04f 30ff 	mov.w	r0, #4294967295
 80194fe:	e05c      	b.n	80195ba <__ssvfiscanf_r+0x282>
 8019500:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019502:	f042 0220 	orr.w	r2, r2, #32
 8019506:	9241      	str	r2, [sp, #260]	; 0x104
 8019508:	e79b      	b.n	8019442 <__ssvfiscanf_r+0x10a>
 801950a:	2308      	movs	r3, #8
 801950c:	9342      	str	r3, [sp, #264]	; 0x108
 801950e:	2304      	movs	r3, #4
 8019510:	e7b3      	b.n	801947a <__ssvfiscanf_r+0x142>
 8019512:	4629      	mov	r1, r5
 8019514:	4640      	mov	r0, r8
 8019516:	f000 fb09 	bl	8019b2c <__sccl>
 801951a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801951c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019520:	9341      	str	r3, [sp, #260]	; 0x104
 8019522:	4605      	mov	r5, r0
 8019524:	2301      	movs	r3, #1
 8019526:	e7a8      	b.n	801947a <__ssvfiscanf_r+0x142>
 8019528:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801952a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801952e:	9341      	str	r3, [sp, #260]	; 0x104
 8019530:	2300      	movs	r3, #0
 8019532:	e7a2      	b.n	801947a <__ssvfiscanf_r+0x142>
 8019534:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019536:	06c3      	lsls	r3, r0, #27
 8019538:	f53f af2e 	bmi.w	8019398 <__ssvfiscanf_r+0x60>
 801953c:	9b00      	ldr	r3, [sp, #0]
 801953e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019540:	1d19      	adds	r1, r3, #4
 8019542:	9100      	str	r1, [sp, #0]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	07c0      	lsls	r0, r0, #31
 8019548:	bf4c      	ite	mi
 801954a:	801a      	strhmi	r2, [r3, #0]
 801954c:	601a      	strpl	r2, [r3, #0]
 801954e:	e723      	b.n	8019398 <__ssvfiscanf_r+0x60>
 8019550:	2305      	movs	r3, #5
 8019552:	e792      	b.n	801947a <__ssvfiscanf_r+0x142>
 8019554:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019556:	4621      	mov	r1, r4
 8019558:	4630      	mov	r0, r6
 801955a:	4798      	blx	r3
 801955c:	2800      	cmp	r0, #0
 801955e:	d090      	beq.n	8019482 <__ssvfiscanf_r+0x14a>
 8019560:	e7c8      	b.n	80194f4 <__ssvfiscanf_r+0x1bc>
 8019562:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019564:	3201      	adds	r2, #1
 8019566:	9245      	str	r2, [sp, #276]	; 0x114
 8019568:	6862      	ldr	r2, [r4, #4]
 801956a:	3a01      	subs	r2, #1
 801956c:	2a00      	cmp	r2, #0
 801956e:	6062      	str	r2, [r4, #4]
 8019570:	dd02      	ble.n	8019578 <__ssvfiscanf_r+0x240>
 8019572:	3301      	adds	r3, #1
 8019574:	6023      	str	r3, [r4, #0]
 8019576:	e787      	b.n	8019488 <__ssvfiscanf_r+0x150>
 8019578:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801957a:	4621      	mov	r1, r4
 801957c:	4630      	mov	r0, r6
 801957e:	4798      	blx	r3
 8019580:	2800      	cmp	r0, #0
 8019582:	d081      	beq.n	8019488 <__ssvfiscanf_r+0x150>
 8019584:	e7b6      	b.n	80194f4 <__ssvfiscanf_r+0x1bc>
 8019586:	2b04      	cmp	r3, #4
 8019588:	dc06      	bgt.n	8019598 <__ssvfiscanf_r+0x260>
 801958a:	466b      	mov	r3, sp
 801958c:	4622      	mov	r2, r4
 801958e:	a941      	add	r1, sp, #260	; 0x104
 8019590:	4630      	mov	r0, r6
 8019592:	f000 f9c5 	bl	8019920 <_scanf_i>
 8019596:	e788      	b.n	80194aa <__ssvfiscanf_r+0x172>
 8019598:	4b0e      	ldr	r3, [pc, #56]	; (80195d4 <__ssvfiscanf_r+0x29c>)
 801959a:	2b00      	cmp	r3, #0
 801959c:	f43f aefc 	beq.w	8019398 <__ssvfiscanf_r+0x60>
 80195a0:	466b      	mov	r3, sp
 80195a2:	4622      	mov	r2, r4
 80195a4:	a941      	add	r1, sp, #260	; 0x104
 80195a6:	4630      	mov	r0, r6
 80195a8:	f7fc fca2 	bl	8015ef0 <_scanf_float>
 80195ac:	e77d      	b.n	80194aa <__ssvfiscanf_r+0x172>
 80195ae:	89a3      	ldrh	r3, [r4, #12]
 80195b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80195b4:	bf18      	it	ne
 80195b6:	f04f 30ff 	movne.w	r0, #4294967295
 80195ba:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80195be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80195c4:	e7f9      	b.n	80195ba <__ssvfiscanf_r+0x282>
 80195c6:	bf00      	nop
 80195c8:	08019285 	.word	0x08019285
 80195cc:	080192ff 	.word	0x080192ff
 80195d0:	0801d0c2 	.word	0x0801d0c2
 80195d4:	08015ef1 	.word	0x08015ef1

080195d8 <__sfputc_r>:
 80195d8:	6893      	ldr	r3, [r2, #8]
 80195da:	3b01      	subs	r3, #1
 80195dc:	2b00      	cmp	r3, #0
 80195de:	b410      	push	{r4}
 80195e0:	6093      	str	r3, [r2, #8]
 80195e2:	da08      	bge.n	80195f6 <__sfputc_r+0x1e>
 80195e4:	6994      	ldr	r4, [r2, #24]
 80195e6:	42a3      	cmp	r3, r4
 80195e8:	db01      	blt.n	80195ee <__sfputc_r+0x16>
 80195ea:	290a      	cmp	r1, #10
 80195ec:	d103      	bne.n	80195f6 <__sfputc_r+0x1e>
 80195ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195f2:	f000 bb93 	b.w	8019d1c <__swbuf_r>
 80195f6:	6813      	ldr	r3, [r2, #0]
 80195f8:	1c58      	adds	r0, r3, #1
 80195fa:	6010      	str	r0, [r2, #0]
 80195fc:	7019      	strb	r1, [r3, #0]
 80195fe:	4608      	mov	r0, r1
 8019600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019604:	4770      	bx	lr

08019606 <__sfputs_r>:
 8019606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019608:	4606      	mov	r6, r0
 801960a:	460f      	mov	r7, r1
 801960c:	4614      	mov	r4, r2
 801960e:	18d5      	adds	r5, r2, r3
 8019610:	42ac      	cmp	r4, r5
 8019612:	d101      	bne.n	8019618 <__sfputs_r+0x12>
 8019614:	2000      	movs	r0, #0
 8019616:	e007      	b.n	8019628 <__sfputs_r+0x22>
 8019618:	463a      	mov	r2, r7
 801961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801961e:	4630      	mov	r0, r6
 8019620:	f7ff ffda 	bl	80195d8 <__sfputc_r>
 8019624:	1c43      	adds	r3, r0, #1
 8019626:	d1f3      	bne.n	8019610 <__sfputs_r+0xa>
 8019628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801962c <_vfiprintf_r>:
 801962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019630:	460c      	mov	r4, r1
 8019632:	b09d      	sub	sp, #116	; 0x74
 8019634:	4617      	mov	r7, r2
 8019636:	461d      	mov	r5, r3
 8019638:	4606      	mov	r6, r0
 801963a:	b118      	cbz	r0, 8019644 <_vfiprintf_r+0x18>
 801963c:	6983      	ldr	r3, [r0, #24]
 801963e:	b90b      	cbnz	r3, 8019644 <_vfiprintf_r+0x18>
 8019640:	f7fe fcc6 	bl	8017fd0 <__sinit>
 8019644:	4b7c      	ldr	r3, [pc, #496]	; (8019838 <_vfiprintf_r+0x20c>)
 8019646:	429c      	cmp	r4, r3
 8019648:	d158      	bne.n	80196fc <_vfiprintf_r+0xd0>
 801964a:	6874      	ldr	r4, [r6, #4]
 801964c:	89a3      	ldrh	r3, [r4, #12]
 801964e:	0718      	lsls	r0, r3, #28
 8019650:	d55e      	bpl.n	8019710 <_vfiprintf_r+0xe4>
 8019652:	6923      	ldr	r3, [r4, #16]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d05b      	beq.n	8019710 <_vfiprintf_r+0xe4>
 8019658:	2300      	movs	r3, #0
 801965a:	9309      	str	r3, [sp, #36]	; 0x24
 801965c:	2320      	movs	r3, #32
 801965e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019662:	2330      	movs	r3, #48	; 0x30
 8019664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019668:	9503      	str	r5, [sp, #12]
 801966a:	f04f 0b01 	mov.w	fp, #1
 801966e:	46b8      	mov	r8, r7
 8019670:	4645      	mov	r5, r8
 8019672:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019676:	b10b      	cbz	r3, 801967c <_vfiprintf_r+0x50>
 8019678:	2b25      	cmp	r3, #37	; 0x25
 801967a:	d154      	bne.n	8019726 <_vfiprintf_r+0xfa>
 801967c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019680:	d00b      	beq.n	801969a <_vfiprintf_r+0x6e>
 8019682:	4653      	mov	r3, sl
 8019684:	463a      	mov	r2, r7
 8019686:	4621      	mov	r1, r4
 8019688:	4630      	mov	r0, r6
 801968a:	f7ff ffbc 	bl	8019606 <__sfputs_r>
 801968e:	3001      	adds	r0, #1
 8019690:	f000 80c2 	beq.w	8019818 <_vfiprintf_r+0x1ec>
 8019694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019696:	4453      	add	r3, sl
 8019698:	9309      	str	r3, [sp, #36]	; 0x24
 801969a:	f898 3000 	ldrb.w	r3, [r8]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	f000 80ba 	beq.w	8019818 <_vfiprintf_r+0x1ec>
 80196a4:	2300      	movs	r3, #0
 80196a6:	f04f 32ff 	mov.w	r2, #4294967295
 80196aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196ae:	9304      	str	r3, [sp, #16]
 80196b0:	9307      	str	r3, [sp, #28]
 80196b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80196b6:	931a      	str	r3, [sp, #104]	; 0x68
 80196b8:	46a8      	mov	r8, r5
 80196ba:	2205      	movs	r2, #5
 80196bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80196c0:	485e      	ldr	r0, [pc, #376]	; (801983c <_vfiprintf_r+0x210>)
 80196c2:	f7e6 fdbd 	bl	8000240 <memchr>
 80196c6:	9b04      	ldr	r3, [sp, #16]
 80196c8:	bb78      	cbnz	r0, 801972a <_vfiprintf_r+0xfe>
 80196ca:	06d9      	lsls	r1, r3, #27
 80196cc:	bf44      	itt	mi
 80196ce:	2220      	movmi	r2, #32
 80196d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80196d4:	071a      	lsls	r2, r3, #28
 80196d6:	bf44      	itt	mi
 80196d8:	222b      	movmi	r2, #43	; 0x2b
 80196da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80196de:	782a      	ldrb	r2, [r5, #0]
 80196e0:	2a2a      	cmp	r2, #42	; 0x2a
 80196e2:	d02a      	beq.n	801973a <_vfiprintf_r+0x10e>
 80196e4:	9a07      	ldr	r2, [sp, #28]
 80196e6:	46a8      	mov	r8, r5
 80196e8:	2000      	movs	r0, #0
 80196ea:	250a      	movs	r5, #10
 80196ec:	4641      	mov	r1, r8
 80196ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80196f2:	3b30      	subs	r3, #48	; 0x30
 80196f4:	2b09      	cmp	r3, #9
 80196f6:	d969      	bls.n	80197cc <_vfiprintf_r+0x1a0>
 80196f8:	b360      	cbz	r0, 8019754 <_vfiprintf_r+0x128>
 80196fa:	e024      	b.n	8019746 <_vfiprintf_r+0x11a>
 80196fc:	4b50      	ldr	r3, [pc, #320]	; (8019840 <_vfiprintf_r+0x214>)
 80196fe:	429c      	cmp	r4, r3
 8019700:	d101      	bne.n	8019706 <_vfiprintf_r+0xda>
 8019702:	68b4      	ldr	r4, [r6, #8]
 8019704:	e7a2      	b.n	801964c <_vfiprintf_r+0x20>
 8019706:	4b4f      	ldr	r3, [pc, #316]	; (8019844 <_vfiprintf_r+0x218>)
 8019708:	429c      	cmp	r4, r3
 801970a:	bf08      	it	eq
 801970c:	68f4      	ldreq	r4, [r6, #12]
 801970e:	e79d      	b.n	801964c <_vfiprintf_r+0x20>
 8019710:	4621      	mov	r1, r4
 8019712:	4630      	mov	r0, r6
 8019714:	f000 fb54 	bl	8019dc0 <__swsetup_r>
 8019718:	2800      	cmp	r0, #0
 801971a:	d09d      	beq.n	8019658 <_vfiprintf_r+0x2c>
 801971c:	f04f 30ff 	mov.w	r0, #4294967295
 8019720:	b01d      	add	sp, #116	; 0x74
 8019722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019726:	46a8      	mov	r8, r5
 8019728:	e7a2      	b.n	8019670 <_vfiprintf_r+0x44>
 801972a:	4a44      	ldr	r2, [pc, #272]	; (801983c <_vfiprintf_r+0x210>)
 801972c:	1a80      	subs	r0, r0, r2
 801972e:	fa0b f000 	lsl.w	r0, fp, r0
 8019732:	4318      	orrs	r0, r3
 8019734:	9004      	str	r0, [sp, #16]
 8019736:	4645      	mov	r5, r8
 8019738:	e7be      	b.n	80196b8 <_vfiprintf_r+0x8c>
 801973a:	9a03      	ldr	r2, [sp, #12]
 801973c:	1d11      	adds	r1, r2, #4
 801973e:	6812      	ldr	r2, [r2, #0]
 8019740:	9103      	str	r1, [sp, #12]
 8019742:	2a00      	cmp	r2, #0
 8019744:	db01      	blt.n	801974a <_vfiprintf_r+0x11e>
 8019746:	9207      	str	r2, [sp, #28]
 8019748:	e004      	b.n	8019754 <_vfiprintf_r+0x128>
 801974a:	4252      	negs	r2, r2
 801974c:	f043 0302 	orr.w	r3, r3, #2
 8019750:	9207      	str	r2, [sp, #28]
 8019752:	9304      	str	r3, [sp, #16]
 8019754:	f898 3000 	ldrb.w	r3, [r8]
 8019758:	2b2e      	cmp	r3, #46	; 0x2e
 801975a:	d10e      	bne.n	801977a <_vfiprintf_r+0x14e>
 801975c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019760:	2b2a      	cmp	r3, #42	; 0x2a
 8019762:	d138      	bne.n	80197d6 <_vfiprintf_r+0x1aa>
 8019764:	9b03      	ldr	r3, [sp, #12]
 8019766:	1d1a      	adds	r2, r3, #4
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	9203      	str	r2, [sp, #12]
 801976c:	2b00      	cmp	r3, #0
 801976e:	bfb8      	it	lt
 8019770:	f04f 33ff 	movlt.w	r3, #4294967295
 8019774:	f108 0802 	add.w	r8, r8, #2
 8019778:	9305      	str	r3, [sp, #20]
 801977a:	4d33      	ldr	r5, [pc, #204]	; (8019848 <_vfiprintf_r+0x21c>)
 801977c:	f898 1000 	ldrb.w	r1, [r8]
 8019780:	2203      	movs	r2, #3
 8019782:	4628      	mov	r0, r5
 8019784:	f7e6 fd5c 	bl	8000240 <memchr>
 8019788:	b140      	cbz	r0, 801979c <_vfiprintf_r+0x170>
 801978a:	2340      	movs	r3, #64	; 0x40
 801978c:	1b40      	subs	r0, r0, r5
 801978e:	fa03 f000 	lsl.w	r0, r3, r0
 8019792:	9b04      	ldr	r3, [sp, #16]
 8019794:	4303      	orrs	r3, r0
 8019796:	f108 0801 	add.w	r8, r8, #1
 801979a:	9304      	str	r3, [sp, #16]
 801979c:	f898 1000 	ldrb.w	r1, [r8]
 80197a0:	482a      	ldr	r0, [pc, #168]	; (801984c <_vfiprintf_r+0x220>)
 80197a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80197a6:	2206      	movs	r2, #6
 80197a8:	f108 0701 	add.w	r7, r8, #1
 80197ac:	f7e6 fd48 	bl	8000240 <memchr>
 80197b0:	2800      	cmp	r0, #0
 80197b2:	d037      	beq.n	8019824 <_vfiprintf_r+0x1f8>
 80197b4:	4b26      	ldr	r3, [pc, #152]	; (8019850 <_vfiprintf_r+0x224>)
 80197b6:	bb1b      	cbnz	r3, 8019800 <_vfiprintf_r+0x1d4>
 80197b8:	9b03      	ldr	r3, [sp, #12]
 80197ba:	3307      	adds	r3, #7
 80197bc:	f023 0307 	bic.w	r3, r3, #7
 80197c0:	3308      	adds	r3, #8
 80197c2:	9303      	str	r3, [sp, #12]
 80197c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197c6:	444b      	add	r3, r9
 80197c8:	9309      	str	r3, [sp, #36]	; 0x24
 80197ca:	e750      	b.n	801966e <_vfiprintf_r+0x42>
 80197cc:	fb05 3202 	mla	r2, r5, r2, r3
 80197d0:	2001      	movs	r0, #1
 80197d2:	4688      	mov	r8, r1
 80197d4:	e78a      	b.n	80196ec <_vfiprintf_r+0xc0>
 80197d6:	2300      	movs	r3, #0
 80197d8:	f108 0801 	add.w	r8, r8, #1
 80197dc:	9305      	str	r3, [sp, #20]
 80197de:	4619      	mov	r1, r3
 80197e0:	250a      	movs	r5, #10
 80197e2:	4640      	mov	r0, r8
 80197e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197e8:	3a30      	subs	r2, #48	; 0x30
 80197ea:	2a09      	cmp	r2, #9
 80197ec:	d903      	bls.n	80197f6 <_vfiprintf_r+0x1ca>
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d0c3      	beq.n	801977a <_vfiprintf_r+0x14e>
 80197f2:	9105      	str	r1, [sp, #20]
 80197f4:	e7c1      	b.n	801977a <_vfiprintf_r+0x14e>
 80197f6:	fb05 2101 	mla	r1, r5, r1, r2
 80197fa:	2301      	movs	r3, #1
 80197fc:	4680      	mov	r8, r0
 80197fe:	e7f0      	b.n	80197e2 <_vfiprintf_r+0x1b6>
 8019800:	ab03      	add	r3, sp, #12
 8019802:	9300      	str	r3, [sp, #0]
 8019804:	4622      	mov	r2, r4
 8019806:	4b13      	ldr	r3, [pc, #76]	; (8019854 <_vfiprintf_r+0x228>)
 8019808:	a904      	add	r1, sp, #16
 801980a:	4630      	mov	r0, r6
 801980c:	f7fb ffa8 	bl	8015760 <_printf_float>
 8019810:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019814:	4681      	mov	r9, r0
 8019816:	d1d5      	bne.n	80197c4 <_vfiprintf_r+0x198>
 8019818:	89a3      	ldrh	r3, [r4, #12]
 801981a:	065b      	lsls	r3, r3, #25
 801981c:	f53f af7e 	bmi.w	801971c <_vfiprintf_r+0xf0>
 8019820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019822:	e77d      	b.n	8019720 <_vfiprintf_r+0xf4>
 8019824:	ab03      	add	r3, sp, #12
 8019826:	9300      	str	r3, [sp, #0]
 8019828:	4622      	mov	r2, r4
 801982a:	4b0a      	ldr	r3, [pc, #40]	; (8019854 <_vfiprintf_r+0x228>)
 801982c:	a904      	add	r1, sp, #16
 801982e:	4630      	mov	r0, r6
 8019830:	f7fc fa4c 	bl	8015ccc <_printf_i>
 8019834:	e7ec      	b.n	8019810 <_vfiprintf_r+0x1e4>
 8019836:	bf00      	nop
 8019838:	0801cf80 	.word	0x0801cf80
 801983c:	0801d0bc 	.word	0x0801d0bc
 8019840:	0801cfa0 	.word	0x0801cfa0
 8019844:	0801cf60 	.word	0x0801cf60
 8019848:	0801d0c2 	.word	0x0801d0c2
 801984c:	0801d0c6 	.word	0x0801d0c6
 8019850:	08015761 	.word	0x08015761
 8019854:	08019607 	.word	0x08019607

08019858 <_scanf_chars>:
 8019858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801985c:	4615      	mov	r5, r2
 801985e:	688a      	ldr	r2, [r1, #8]
 8019860:	4680      	mov	r8, r0
 8019862:	460c      	mov	r4, r1
 8019864:	b932      	cbnz	r2, 8019874 <_scanf_chars+0x1c>
 8019866:	698a      	ldr	r2, [r1, #24]
 8019868:	2a00      	cmp	r2, #0
 801986a:	bf14      	ite	ne
 801986c:	f04f 32ff 	movne.w	r2, #4294967295
 8019870:	2201      	moveq	r2, #1
 8019872:	608a      	str	r2, [r1, #8]
 8019874:	6822      	ldr	r2, [r4, #0]
 8019876:	06d1      	lsls	r1, r2, #27
 8019878:	bf5f      	itttt	pl
 801987a:	681a      	ldrpl	r2, [r3, #0]
 801987c:	1d11      	addpl	r1, r2, #4
 801987e:	6019      	strpl	r1, [r3, #0]
 8019880:	6817      	ldrpl	r7, [r2, #0]
 8019882:	2600      	movs	r6, #0
 8019884:	69a3      	ldr	r3, [r4, #24]
 8019886:	b1db      	cbz	r3, 80198c0 <_scanf_chars+0x68>
 8019888:	2b01      	cmp	r3, #1
 801988a:	d107      	bne.n	801989c <_scanf_chars+0x44>
 801988c:	682b      	ldr	r3, [r5, #0]
 801988e:	6962      	ldr	r2, [r4, #20]
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	5cd3      	ldrb	r3, [r2, r3]
 8019894:	b9a3      	cbnz	r3, 80198c0 <_scanf_chars+0x68>
 8019896:	2e00      	cmp	r6, #0
 8019898:	d132      	bne.n	8019900 <_scanf_chars+0xa8>
 801989a:	e006      	b.n	80198aa <_scanf_chars+0x52>
 801989c:	2b02      	cmp	r3, #2
 801989e:	d007      	beq.n	80198b0 <_scanf_chars+0x58>
 80198a0:	2e00      	cmp	r6, #0
 80198a2:	d12d      	bne.n	8019900 <_scanf_chars+0xa8>
 80198a4:	69a3      	ldr	r3, [r4, #24]
 80198a6:	2b01      	cmp	r3, #1
 80198a8:	d12a      	bne.n	8019900 <_scanf_chars+0xa8>
 80198aa:	2001      	movs	r0, #1
 80198ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198b0:	f7fb fdae 	bl	8015410 <__locale_ctype_ptr>
 80198b4:	682b      	ldr	r3, [r5, #0]
 80198b6:	781b      	ldrb	r3, [r3, #0]
 80198b8:	4418      	add	r0, r3
 80198ba:	7843      	ldrb	r3, [r0, #1]
 80198bc:	071b      	lsls	r3, r3, #28
 80198be:	d4ef      	bmi.n	80198a0 <_scanf_chars+0x48>
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	06da      	lsls	r2, r3, #27
 80198c4:	bf5e      	ittt	pl
 80198c6:	682b      	ldrpl	r3, [r5, #0]
 80198c8:	781b      	ldrbpl	r3, [r3, #0]
 80198ca:	703b      	strbpl	r3, [r7, #0]
 80198cc:	682a      	ldr	r2, [r5, #0]
 80198ce:	686b      	ldr	r3, [r5, #4]
 80198d0:	f102 0201 	add.w	r2, r2, #1
 80198d4:	602a      	str	r2, [r5, #0]
 80198d6:	68a2      	ldr	r2, [r4, #8]
 80198d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80198dc:	f102 32ff 	add.w	r2, r2, #4294967295
 80198e0:	606b      	str	r3, [r5, #4]
 80198e2:	f106 0601 	add.w	r6, r6, #1
 80198e6:	bf58      	it	pl
 80198e8:	3701      	addpl	r7, #1
 80198ea:	60a2      	str	r2, [r4, #8]
 80198ec:	b142      	cbz	r2, 8019900 <_scanf_chars+0xa8>
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	dcc8      	bgt.n	8019884 <_scanf_chars+0x2c>
 80198f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80198f6:	4629      	mov	r1, r5
 80198f8:	4640      	mov	r0, r8
 80198fa:	4798      	blx	r3
 80198fc:	2800      	cmp	r0, #0
 80198fe:	d0c1      	beq.n	8019884 <_scanf_chars+0x2c>
 8019900:	6823      	ldr	r3, [r4, #0]
 8019902:	f013 0310 	ands.w	r3, r3, #16
 8019906:	d105      	bne.n	8019914 <_scanf_chars+0xbc>
 8019908:	68e2      	ldr	r2, [r4, #12]
 801990a:	3201      	adds	r2, #1
 801990c:	60e2      	str	r2, [r4, #12]
 801990e:	69a2      	ldr	r2, [r4, #24]
 8019910:	b102      	cbz	r2, 8019914 <_scanf_chars+0xbc>
 8019912:	703b      	strb	r3, [r7, #0]
 8019914:	6923      	ldr	r3, [r4, #16]
 8019916:	441e      	add	r6, r3
 8019918:	6126      	str	r6, [r4, #16]
 801991a:	2000      	movs	r0, #0
 801991c:	e7c6      	b.n	80198ac <_scanf_chars+0x54>
	...

08019920 <_scanf_i>:
 8019920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019924:	469a      	mov	sl, r3
 8019926:	4b74      	ldr	r3, [pc, #464]	; (8019af8 <_scanf_i+0x1d8>)
 8019928:	460c      	mov	r4, r1
 801992a:	4683      	mov	fp, r0
 801992c:	4616      	mov	r6, r2
 801992e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019932:	b087      	sub	sp, #28
 8019934:	ab03      	add	r3, sp, #12
 8019936:	68a7      	ldr	r7, [r4, #8]
 8019938:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801993c:	4b6f      	ldr	r3, [pc, #444]	; (8019afc <_scanf_i+0x1dc>)
 801993e:	69a1      	ldr	r1, [r4, #24]
 8019940:	4a6f      	ldr	r2, [pc, #444]	; (8019b00 <_scanf_i+0x1e0>)
 8019942:	2903      	cmp	r1, #3
 8019944:	bf08      	it	eq
 8019946:	461a      	moveq	r2, r3
 8019948:	1e7b      	subs	r3, r7, #1
 801994a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801994e:	bf84      	itt	hi
 8019950:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019954:	60a3      	strhi	r3, [r4, #8]
 8019956:	6823      	ldr	r3, [r4, #0]
 8019958:	9200      	str	r2, [sp, #0]
 801995a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801995e:	bf88      	it	hi
 8019960:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019964:	f104 091c 	add.w	r9, r4, #28
 8019968:	6023      	str	r3, [r4, #0]
 801996a:	bf8c      	ite	hi
 801996c:	197f      	addhi	r7, r7, r5
 801996e:	2700      	movls	r7, #0
 8019970:	464b      	mov	r3, r9
 8019972:	f04f 0800 	mov.w	r8, #0
 8019976:	9301      	str	r3, [sp, #4]
 8019978:	6831      	ldr	r1, [r6, #0]
 801997a:	ab03      	add	r3, sp, #12
 801997c:	2202      	movs	r2, #2
 801997e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019982:	7809      	ldrb	r1, [r1, #0]
 8019984:	f7e6 fc5c 	bl	8000240 <memchr>
 8019988:	9b01      	ldr	r3, [sp, #4]
 801998a:	b330      	cbz	r0, 80199da <_scanf_i+0xba>
 801998c:	f1b8 0f01 	cmp.w	r8, #1
 8019990:	d15a      	bne.n	8019a48 <_scanf_i+0x128>
 8019992:	6862      	ldr	r2, [r4, #4]
 8019994:	b92a      	cbnz	r2, 80199a2 <_scanf_i+0x82>
 8019996:	6822      	ldr	r2, [r4, #0]
 8019998:	2108      	movs	r1, #8
 801999a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801999e:	6061      	str	r1, [r4, #4]
 80199a0:	6022      	str	r2, [r4, #0]
 80199a2:	6822      	ldr	r2, [r4, #0]
 80199a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80199a8:	6022      	str	r2, [r4, #0]
 80199aa:	68a2      	ldr	r2, [r4, #8]
 80199ac:	1e51      	subs	r1, r2, #1
 80199ae:	60a1      	str	r1, [r4, #8]
 80199b0:	b19a      	cbz	r2, 80199da <_scanf_i+0xba>
 80199b2:	6832      	ldr	r2, [r6, #0]
 80199b4:	1c51      	adds	r1, r2, #1
 80199b6:	6031      	str	r1, [r6, #0]
 80199b8:	7812      	ldrb	r2, [r2, #0]
 80199ba:	701a      	strb	r2, [r3, #0]
 80199bc:	1c5d      	adds	r5, r3, #1
 80199be:	6873      	ldr	r3, [r6, #4]
 80199c0:	3b01      	subs	r3, #1
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	6073      	str	r3, [r6, #4]
 80199c6:	dc07      	bgt.n	80199d8 <_scanf_i+0xb8>
 80199c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80199cc:	4631      	mov	r1, r6
 80199ce:	4658      	mov	r0, fp
 80199d0:	4798      	blx	r3
 80199d2:	2800      	cmp	r0, #0
 80199d4:	f040 8086 	bne.w	8019ae4 <_scanf_i+0x1c4>
 80199d8:	462b      	mov	r3, r5
 80199da:	f108 0801 	add.w	r8, r8, #1
 80199de:	f1b8 0f03 	cmp.w	r8, #3
 80199e2:	d1c8      	bne.n	8019976 <_scanf_i+0x56>
 80199e4:	6862      	ldr	r2, [r4, #4]
 80199e6:	b90a      	cbnz	r2, 80199ec <_scanf_i+0xcc>
 80199e8:	220a      	movs	r2, #10
 80199ea:	6062      	str	r2, [r4, #4]
 80199ec:	6862      	ldr	r2, [r4, #4]
 80199ee:	4945      	ldr	r1, [pc, #276]	; (8019b04 <_scanf_i+0x1e4>)
 80199f0:	6960      	ldr	r0, [r4, #20]
 80199f2:	9301      	str	r3, [sp, #4]
 80199f4:	1a89      	subs	r1, r1, r2
 80199f6:	f000 f899 	bl	8019b2c <__sccl>
 80199fa:	9b01      	ldr	r3, [sp, #4]
 80199fc:	f04f 0800 	mov.w	r8, #0
 8019a00:	461d      	mov	r5, r3
 8019a02:	68a3      	ldr	r3, [r4, #8]
 8019a04:	6822      	ldr	r2, [r4, #0]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d03a      	beq.n	8019a80 <_scanf_i+0x160>
 8019a0a:	6831      	ldr	r1, [r6, #0]
 8019a0c:	6960      	ldr	r0, [r4, #20]
 8019a0e:	f891 c000 	ldrb.w	ip, [r1]
 8019a12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019a16:	2800      	cmp	r0, #0
 8019a18:	d032      	beq.n	8019a80 <_scanf_i+0x160>
 8019a1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019a1e:	d121      	bne.n	8019a64 <_scanf_i+0x144>
 8019a20:	0510      	lsls	r0, r2, #20
 8019a22:	d51f      	bpl.n	8019a64 <_scanf_i+0x144>
 8019a24:	f108 0801 	add.w	r8, r8, #1
 8019a28:	b117      	cbz	r7, 8019a30 <_scanf_i+0x110>
 8019a2a:	3301      	adds	r3, #1
 8019a2c:	3f01      	subs	r7, #1
 8019a2e:	60a3      	str	r3, [r4, #8]
 8019a30:	6873      	ldr	r3, [r6, #4]
 8019a32:	3b01      	subs	r3, #1
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	6073      	str	r3, [r6, #4]
 8019a38:	dd1b      	ble.n	8019a72 <_scanf_i+0x152>
 8019a3a:	6833      	ldr	r3, [r6, #0]
 8019a3c:	3301      	adds	r3, #1
 8019a3e:	6033      	str	r3, [r6, #0]
 8019a40:	68a3      	ldr	r3, [r4, #8]
 8019a42:	3b01      	subs	r3, #1
 8019a44:	60a3      	str	r3, [r4, #8]
 8019a46:	e7dc      	b.n	8019a02 <_scanf_i+0xe2>
 8019a48:	f1b8 0f02 	cmp.w	r8, #2
 8019a4c:	d1ad      	bne.n	80199aa <_scanf_i+0x8a>
 8019a4e:	6822      	ldr	r2, [r4, #0]
 8019a50:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019a54:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019a58:	d1bf      	bne.n	80199da <_scanf_i+0xba>
 8019a5a:	2110      	movs	r1, #16
 8019a5c:	6061      	str	r1, [r4, #4]
 8019a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019a62:	e7a1      	b.n	80199a8 <_scanf_i+0x88>
 8019a64:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019a68:	6022      	str	r2, [r4, #0]
 8019a6a:	780b      	ldrb	r3, [r1, #0]
 8019a6c:	702b      	strb	r3, [r5, #0]
 8019a6e:	3501      	adds	r5, #1
 8019a70:	e7de      	b.n	8019a30 <_scanf_i+0x110>
 8019a72:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a76:	4631      	mov	r1, r6
 8019a78:	4658      	mov	r0, fp
 8019a7a:	4798      	blx	r3
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	d0df      	beq.n	8019a40 <_scanf_i+0x120>
 8019a80:	6823      	ldr	r3, [r4, #0]
 8019a82:	05d9      	lsls	r1, r3, #23
 8019a84:	d50c      	bpl.n	8019aa0 <_scanf_i+0x180>
 8019a86:	454d      	cmp	r5, r9
 8019a88:	d908      	bls.n	8019a9c <_scanf_i+0x17c>
 8019a8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019a8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019a92:	4632      	mov	r2, r6
 8019a94:	4658      	mov	r0, fp
 8019a96:	4798      	blx	r3
 8019a98:	1e6f      	subs	r7, r5, #1
 8019a9a:	463d      	mov	r5, r7
 8019a9c:	454d      	cmp	r5, r9
 8019a9e:	d029      	beq.n	8019af4 <_scanf_i+0x1d4>
 8019aa0:	6822      	ldr	r2, [r4, #0]
 8019aa2:	f012 0210 	ands.w	r2, r2, #16
 8019aa6:	d113      	bne.n	8019ad0 <_scanf_i+0x1b0>
 8019aa8:	702a      	strb	r2, [r5, #0]
 8019aaa:	6863      	ldr	r3, [r4, #4]
 8019aac:	9e00      	ldr	r6, [sp, #0]
 8019aae:	4649      	mov	r1, r9
 8019ab0:	4658      	mov	r0, fp
 8019ab2:	47b0      	blx	r6
 8019ab4:	f8da 3000 	ldr.w	r3, [sl]
 8019ab8:	6821      	ldr	r1, [r4, #0]
 8019aba:	1d1a      	adds	r2, r3, #4
 8019abc:	f8ca 2000 	str.w	r2, [sl]
 8019ac0:	f011 0f20 	tst.w	r1, #32
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	d010      	beq.n	8019aea <_scanf_i+0x1ca>
 8019ac8:	6018      	str	r0, [r3, #0]
 8019aca:	68e3      	ldr	r3, [r4, #12]
 8019acc:	3301      	adds	r3, #1
 8019ace:	60e3      	str	r3, [r4, #12]
 8019ad0:	eba5 0509 	sub.w	r5, r5, r9
 8019ad4:	44a8      	add	r8, r5
 8019ad6:	6925      	ldr	r5, [r4, #16]
 8019ad8:	4445      	add	r5, r8
 8019ada:	6125      	str	r5, [r4, #16]
 8019adc:	2000      	movs	r0, #0
 8019ade:	b007      	add	sp, #28
 8019ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ae4:	f04f 0800 	mov.w	r8, #0
 8019ae8:	e7ca      	b.n	8019a80 <_scanf_i+0x160>
 8019aea:	07ca      	lsls	r2, r1, #31
 8019aec:	bf4c      	ite	mi
 8019aee:	8018      	strhmi	r0, [r3, #0]
 8019af0:	6018      	strpl	r0, [r3, #0]
 8019af2:	e7ea      	b.n	8019aca <_scanf_i+0x1aa>
 8019af4:	2001      	movs	r0, #1
 8019af6:	e7f2      	b.n	8019ade <_scanf_i+0x1be>
 8019af8:	0801ccb0 	.word	0x0801ccb0
 8019afc:	08017241 	.word	0x08017241
 8019b00:	08019c85 	.word	0x08019c85
 8019b04:	0801d0dd 	.word	0x0801d0dd

08019b08 <_read_r>:
 8019b08:	b538      	push	{r3, r4, r5, lr}
 8019b0a:	4c07      	ldr	r4, [pc, #28]	; (8019b28 <_read_r+0x20>)
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	4608      	mov	r0, r1
 8019b10:	4611      	mov	r1, r2
 8019b12:	2200      	movs	r2, #0
 8019b14:	6022      	str	r2, [r4, #0]
 8019b16:	461a      	mov	r2, r3
 8019b18:	f7ea fb16 	bl	8004148 <_read>
 8019b1c:	1c43      	adds	r3, r0, #1
 8019b1e:	d102      	bne.n	8019b26 <_read_r+0x1e>
 8019b20:	6823      	ldr	r3, [r4, #0]
 8019b22:	b103      	cbz	r3, 8019b26 <_read_r+0x1e>
 8019b24:	602b      	str	r3, [r5, #0]
 8019b26:	bd38      	pop	{r3, r4, r5, pc}
 8019b28:	2000751c 	.word	0x2000751c

08019b2c <__sccl>:
 8019b2c:	b570      	push	{r4, r5, r6, lr}
 8019b2e:	780b      	ldrb	r3, [r1, #0]
 8019b30:	2b5e      	cmp	r3, #94	; 0x5e
 8019b32:	bf13      	iteet	ne
 8019b34:	1c4a      	addne	r2, r1, #1
 8019b36:	1c8a      	addeq	r2, r1, #2
 8019b38:	784b      	ldrbeq	r3, [r1, #1]
 8019b3a:	2100      	movne	r1, #0
 8019b3c:	bf08      	it	eq
 8019b3e:	2101      	moveq	r1, #1
 8019b40:	1e44      	subs	r4, r0, #1
 8019b42:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019b46:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019b4a:	42ac      	cmp	r4, r5
 8019b4c:	d1fb      	bne.n	8019b46 <__sccl+0x1a>
 8019b4e:	b913      	cbnz	r3, 8019b56 <__sccl+0x2a>
 8019b50:	3a01      	subs	r2, #1
 8019b52:	4610      	mov	r0, r2
 8019b54:	bd70      	pop	{r4, r5, r6, pc}
 8019b56:	f081 0401 	eor.w	r4, r1, #1
 8019b5a:	54c4      	strb	r4, [r0, r3]
 8019b5c:	1c51      	adds	r1, r2, #1
 8019b5e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019b62:	2d2d      	cmp	r5, #45	; 0x2d
 8019b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8019b68:	460a      	mov	r2, r1
 8019b6a:	d006      	beq.n	8019b7a <__sccl+0x4e>
 8019b6c:	2d5d      	cmp	r5, #93	; 0x5d
 8019b6e:	d0f0      	beq.n	8019b52 <__sccl+0x26>
 8019b70:	b90d      	cbnz	r5, 8019b76 <__sccl+0x4a>
 8019b72:	4632      	mov	r2, r6
 8019b74:	e7ed      	b.n	8019b52 <__sccl+0x26>
 8019b76:	462b      	mov	r3, r5
 8019b78:	e7ef      	b.n	8019b5a <__sccl+0x2e>
 8019b7a:	780e      	ldrb	r6, [r1, #0]
 8019b7c:	2e5d      	cmp	r6, #93	; 0x5d
 8019b7e:	d0fa      	beq.n	8019b76 <__sccl+0x4a>
 8019b80:	42b3      	cmp	r3, r6
 8019b82:	dcf8      	bgt.n	8019b76 <__sccl+0x4a>
 8019b84:	3301      	adds	r3, #1
 8019b86:	429e      	cmp	r6, r3
 8019b88:	54c4      	strb	r4, [r0, r3]
 8019b8a:	dcfb      	bgt.n	8019b84 <__sccl+0x58>
 8019b8c:	3102      	adds	r1, #2
 8019b8e:	e7e6      	b.n	8019b5e <__sccl+0x32>

08019b90 <_strtoul_l.isra.0>:
 8019b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b94:	4680      	mov	r8, r0
 8019b96:	4689      	mov	r9, r1
 8019b98:	4692      	mov	sl, r2
 8019b9a:	461e      	mov	r6, r3
 8019b9c:	460f      	mov	r7, r1
 8019b9e:	463d      	mov	r5, r7
 8019ba0:	9808      	ldr	r0, [sp, #32]
 8019ba2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ba6:	f7fb fc2f 	bl	8015408 <__locale_ctype_ptr_l>
 8019baa:	4420      	add	r0, r4
 8019bac:	7843      	ldrb	r3, [r0, #1]
 8019bae:	f013 0308 	ands.w	r3, r3, #8
 8019bb2:	d130      	bne.n	8019c16 <_strtoul_l.isra.0+0x86>
 8019bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8019bb6:	d130      	bne.n	8019c1a <_strtoul_l.isra.0+0x8a>
 8019bb8:	787c      	ldrb	r4, [r7, #1]
 8019bba:	1cbd      	adds	r5, r7, #2
 8019bbc:	2101      	movs	r1, #1
 8019bbe:	2e00      	cmp	r6, #0
 8019bc0:	d05c      	beq.n	8019c7c <_strtoul_l.isra.0+0xec>
 8019bc2:	2e10      	cmp	r6, #16
 8019bc4:	d109      	bne.n	8019bda <_strtoul_l.isra.0+0x4a>
 8019bc6:	2c30      	cmp	r4, #48	; 0x30
 8019bc8:	d107      	bne.n	8019bda <_strtoul_l.isra.0+0x4a>
 8019bca:	782b      	ldrb	r3, [r5, #0]
 8019bcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019bd0:	2b58      	cmp	r3, #88	; 0x58
 8019bd2:	d14e      	bne.n	8019c72 <_strtoul_l.isra.0+0xe2>
 8019bd4:	786c      	ldrb	r4, [r5, #1]
 8019bd6:	2610      	movs	r6, #16
 8019bd8:	3502      	adds	r5, #2
 8019bda:	f04f 32ff 	mov.w	r2, #4294967295
 8019bde:	2300      	movs	r3, #0
 8019be0:	fbb2 f2f6 	udiv	r2, r2, r6
 8019be4:	fb06 fc02 	mul.w	ip, r6, r2
 8019be8:	ea6f 0c0c 	mvn.w	ip, ip
 8019bec:	4618      	mov	r0, r3
 8019bee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019bf2:	2f09      	cmp	r7, #9
 8019bf4:	d817      	bhi.n	8019c26 <_strtoul_l.isra.0+0x96>
 8019bf6:	463c      	mov	r4, r7
 8019bf8:	42a6      	cmp	r6, r4
 8019bfa:	dd23      	ble.n	8019c44 <_strtoul_l.isra.0+0xb4>
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	db1e      	blt.n	8019c3e <_strtoul_l.isra.0+0xae>
 8019c00:	4282      	cmp	r2, r0
 8019c02:	d31c      	bcc.n	8019c3e <_strtoul_l.isra.0+0xae>
 8019c04:	d101      	bne.n	8019c0a <_strtoul_l.isra.0+0x7a>
 8019c06:	45a4      	cmp	ip, r4
 8019c08:	db19      	blt.n	8019c3e <_strtoul_l.isra.0+0xae>
 8019c0a:	fb00 4006 	mla	r0, r0, r6, r4
 8019c0e:	2301      	movs	r3, #1
 8019c10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019c14:	e7eb      	b.n	8019bee <_strtoul_l.isra.0+0x5e>
 8019c16:	462f      	mov	r7, r5
 8019c18:	e7c1      	b.n	8019b9e <_strtoul_l.isra.0+0xe>
 8019c1a:	2c2b      	cmp	r4, #43	; 0x2b
 8019c1c:	bf04      	itt	eq
 8019c1e:	1cbd      	addeq	r5, r7, #2
 8019c20:	787c      	ldrbeq	r4, [r7, #1]
 8019c22:	4619      	mov	r1, r3
 8019c24:	e7cb      	b.n	8019bbe <_strtoul_l.isra.0+0x2e>
 8019c26:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019c2a:	2f19      	cmp	r7, #25
 8019c2c:	d801      	bhi.n	8019c32 <_strtoul_l.isra.0+0xa2>
 8019c2e:	3c37      	subs	r4, #55	; 0x37
 8019c30:	e7e2      	b.n	8019bf8 <_strtoul_l.isra.0+0x68>
 8019c32:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019c36:	2f19      	cmp	r7, #25
 8019c38:	d804      	bhi.n	8019c44 <_strtoul_l.isra.0+0xb4>
 8019c3a:	3c57      	subs	r4, #87	; 0x57
 8019c3c:	e7dc      	b.n	8019bf8 <_strtoul_l.isra.0+0x68>
 8019c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8019c42:	e7e5      	b.n	8019c10 <_strtoul_l.isra.0+0x80>
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	da09      	bge.n	8019c5c <_strtoul_l.isra.0+0xcc>
 8019c48:	2322      	movs	r3, #34	; 0x22
 8019c4a:	f8c8 3000 	str.w	r3, [r8]
 8019c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c52:	f1ba 0f00 	cmp.w	sl, #0
 8019c56:	d107      	bne.n	8019c68 <_strtoul_l.isra.0+0xd8>
 8019c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c5c:	b101      	cbz	r1, 8019c60 <_strtoul_l.isra.0+0xd0>
 8019c5e:	4240      	negs	r0, r0
 8019c60:	f1ba 0f00 	cmp.w	sl, #0
 8019c64:	d0f8      	beq.n	8019c58 <_strtoul_l.isra.0+0xc8>
 8019c66:	b10b      	cbz	r3, 8019c6c <_strtoul_l.isra.0+0xdc>
 8019c68:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c6c:	f8ca 9000 	str.w	r9, [sl]
 8019c70:	e7f2      	b.n	8019c58 <_strtoul_l.isra.0+0xc8>
 8019c72:	2430      	movs	r4, #48	; 0x30
 8019c74:	2e00      	cmp	r6, #0
 8019c76:	d1b0      	bne.n	8019bda <_strtoul_l.isra.0+0x4a>
 8019c78:	2608      	movs	r6, #8
 8019c7a:	e7ae      	b.n	8019bda <_strtoul_l.isra.0+0x4a>
 8019c7c:	2c30      	cmp	r4, #48	; 0x30
 8019c7e:	d0a4      	beq.n	8019bca <_strtoul_l.isra.0+0x3a>
 8019c80:	260a      	movs	r6, #10
 8019c82:	e7aa      	b.n	8019bda <_strtoul_l.isra.0+0x4a>

08019c84 <_strtoul_r>:
 8019c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c86:	4c06      	ldr	r4, [pc, #24]	; (8019ca0 <_strtoul_r+0x1c>)
 8019c88:	4d06      	ldr	r5, [pc, #24]	; (8019ca4 <_strtoul_r+0x20>)
 8019c8a:	6824      	ldr	r4, [r4, #0]
 8019c8c:	6a24      	ldr	r4, [r4, #32]
 8019c8e:	2c00      	cmp	r4, #0
 8019c90:	bf08      	it	eq
 8019c92:	462c      	moveq	r4, r5
 8019c94:	9400      	str	r4, [sp, #0]
 8019c96:	f7ff ff7b 	bl	8019b90 <_strtoul_l.isra.0>
 8019c9a:	b003      	add	sp, #12
 8019c9c:	bd30      	pop	{r4, r5, pc}
 8019c9e:	bf00      	nop
 8019ca0:	20000020 	.word	0x20000020
 8019ca4:	20000084 	.word	0x20000084

08019ca8 <__submore>:
 8019ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cac:	460c      	mov	r4, r1
 8019cae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019cb4:	4299      	cmp	r1, r3
 8019cb6:	d11d      	bne.n	8019cf4 <__submore+0x4c>
 8019cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019cbc:	f7fb fc62 	bl	8015584 <_malloc_r>
 8019cc0:	b918      	cbnz	r0, 8019cca <__submore+0x22>
 8019cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8019cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019cce:	63a3      	str	r3, [r4, #56]	; 0x38
 8019cd0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8019cd6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019cda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019cde:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019ce2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019ce6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019cea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019cee:	6020      	str	r0, [r4, #0]
 8019cf0:	2000      	movs	r0, #0
 8019cf2:	e7e8      	b.n	8019cc6 <__submore+0x1e>
 8019cf4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019cf6:	0077      	lsls	r7, r6, #1
 8019cf8:	463a      	mov	r2, r7
 8019cfa:	f7ff f94a 	bl	8018f92 <_realloc_r>
 8019cfe:	4605      	mov	r5, r0
 8019d00:	2800      	cmp	r0, #0
 8019d02:	d0de      	beq.n	8019cc2 <__submore+0x1a>
 8019d04:	eb00 0806 	add.w	r8, r0, r6
 8019d08:	4601      	mov	r1, r0
 8019d0a:	4632      	mov	r2, r6
 8019d0c:	4640      	mov	r0, r8
 8019d0e:	f7fb fbbe 	bl	801548e <memcpy>
 8019d12:	f8c4 8000 	str.w	r8, [r4]
 8019d16:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019d1a:	e7e9      	b.n	8019cf0 <__submore+0x48>

08019d1c <__swbuf_r>:
 8019d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d1e:	460e      	mov	r6, r1
 8019d20:	4614      	mov	r4, r2
 8019d22:	4605      	mov	r5, r0
 8019d24:	b118      	cbz	r0, 8019d2e <__swbuf_r+0x12>
 8019d26:	6983      	ldr	r3, [r0, #24]
 8019d28:	b90b      	cbnz	r3, 8019d2e <__swbuf_r+0x12>
 8019d2a:	f7fe f951 	bl	8017fd0 <__sinit>
 8019d2e:	4b21      	ldr	r3, [pc, #132]	; (8019db4 <__swbuf_r+0x98>)
 8019d30:	429c      	cmp	r4, r3
 8019d32:	d12a      	bne.n	8019d8a <__swbuf_r+0x6e>
 8019d34:	686c      	ldr	r4, [r5, #4]
 8019d36:	69a3      	ldr	r3, [r4, #24]
 8019d38:	60a3      	str	r3, [r4, #8]
 8019d3a:	89a3      	ldrh	r3, [r4, #12]
 8019d3c:	071a      	lsls	r2, r3, #28
 8019d3e:	d52e      	bpl.n	8019d9e <__swbuf_r+0x82>
 8019d40:	6923      	ldr	r3, [r4, #16]
 8019d42:	b363      	cbz	r3, 8019d9e <__swbuf_r+0x82>
 8019d44:	6923      	ldr	r3, [r4, #16]
 8019d46:	6820      	ldr	r0, [r4, #0]
 8019d48:	1ac0      	subs	r0, r0, r3
 8019d4a:	6963      	ldr	r3, [r4, #20]
 8019d4c:	b2f6      	uxtb	r6, r6
 8019d4e:	4283      	cmp	r3, r0
 8019d50:	4637      	mov	r7, r6
 8019d52:	dc04      	bgt.n	8019d5e <__swbuf_r+0x42>
 8019d54:	4621      	mov	r1, r4
 8019d56:	4628      	mov	r0, r5
 8019d58:	f000 f926 	bl	8019fa8 <_fflush_r>
 8019d5c:	bb28      	cbnz	r0, 8019daa <__swbuf_r+0x8e>
 8019d5e:	68a3      	ldr	r3, [r4, #8]
 8019d60:	3b01      	subs	r3, #1
 8019d62:	60a3      	str	r3, [r4, #8]
 8019d64:	6823      	ldr	r3, [r4, #0]
 8019d66:	1c5a      	adds	r2, r3, #1
 8019d68:	6022      	str	r2, [r4, #0]
 8019d6a:	701e      	strb	r6, [r3, #0]
 8019d6c:	6963      	ldr	r3, [r4, #20]
 8019d6e:	3001      	adds	r0, #1
 8019d70:	4283      	cmp	r3, r0
 8019d72:	d004      	beq.n	8019d7e <__swbuf_r+0x62>
 8019d74:	89a3      	ldrh	r3, [r4, #12]
 8019d76:	07db      	lsls	r3, r3, #31
 8019d78:	d519      	bpl.n	8019dae <__swbuf_r+0x92>
 8019d7a:	2e0a      	cmp	r6, #10
 8019d7c:	d117      	bne.n	8019dae <__swbuf_r+0x92>
 8019d7e:	4621      	mov	r1, r4
 8019d80:	4628      	mov	r0, r5
 8019d82:	f000 f911 	bl	8019fa8 <_fflush_r>
 8019d86:	b190      	cbz	r0, 8019dae <__swbuf_r+0x92>
 8019d88:	e00f      	b.n	8019daa <__swbuf_r+0x8e>
 8019d8a:	4b0b      	ldr	r3, [pc, #44]	; (8019db8 <__swbuf_r+0x9c>)
 8019d8c:	429c      	cmp	r4, r3
 8019d8e:	d101      	bne.n	8019d94 <__swbuf_r+0x78>
 8019d90:	68ac      	ldr	r4, [r5, #8]
 8019d92:	e7d0      	b.n	8019d36 <__swbuf_r+0x1a>
 8019d94:	4b09      	ldr	r3, [pc, #36]	; (8019dbc <__swbuf_r+0xa0>)
 8019d96:	429c      	cmp	r4, r3
 8019d98:	bf08      	it	eq
 8019d9a:	68ec      	ldreq	r4, [r5, #12]
 8019d9c:	e7cb      	b.n	8019d36 <__swbuf_r+0x1a>
 8019d9e:	4621      	mov	r1, r4
 8019da0:	4628      	mov	r0, r5
 8019da2:	f000 f80d 	bl	8019dc0 <__swsetup_r>
 8019da6:	2800      	cmp	r0, #0
 8019da8:	d0cc      	beq.n	8019d44 <__swbuf_r+0x28>
 8019daa:	f04f 37ff 	mov.w	r7, #4294967295
 8019dae:	4638      	mov	r0, r7
 8019db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019db2:	bf00      	nop
 8019db4:	0801cf80 	.word	0x0801cf80
 8019db8:	0801cfa0 	.word	0x0801cfa0
 8019dbc:	0801cf60 	.word	0x0801cf60

08019dc0 <__swsetup_r>:
 8019dc0:	4b32      	ldr	r3, [pc, #200]	; (8019e8c <__swsetup_r+0xcc>)
 8019dc2:	b570      	push	{r4, r5, r6, lr}
 8019dc4:	681d      	ldr	r5, [r3, #0]
 8019dc6:	4606      	mov	r6, r0
 8019dc8:	460c      	mov	r4, r1
 8019dca:	b125      	cbz	r5, 8019dd6 <__swsetup_r+0x16>
 8019dcc:	69ab      	ldr	r3, [r5, #24]
 8019dce:	b913      	cbnz	r3, 8019dd6 <__swsetup_r+0x16>
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f7fe f8fd 	bl	8017fd0 <__sinit>
 8019dd6:	4b2e      	ldr	r3, [pc, #184]	; (8019e90 <__swsetup_r+0xd0>)
 8019dd8:	429c      	cmp	r4, r3
 8019dda:	d10f      	bne.n	8019dfc <__swsetup_r+0x3c>
 8019ddc:	686c      	ldr	r4, [r5, #4]
 8019dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019de2:	b29a      	uxth	r2, r3
 8019de4:	0715      	lsls	r5, r2, #28
 8019de6:	d42c      	bmi.n	8019e42 <__swsetup_r+0x82>
 8019de8:	06d0      	lsls	r0, r2, #27
 8019dea:	d411      	bmi.n	8019e10 <__swsetup_r+0x50>
 8019dec:	2209      	movs	r2, #9
 8019dee:	6032      	str	r2, [r6, #0]
 8019df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019df4:	81a3      	strh	r3, [r4, #12]
 8019df6:	f04f 30ff 	mov.w	r0, #4294967295
 8019dfa:	e03e      	b.n	8019e7a <__swsetup_r+0xba>
 8019dfc:	4b25      	ldr	r3, [pc, #148]	; (8019e94 <__swsetup_r+0xd4>)
 8019dfe:	429c      	cmp	r4, r3
 8019e00:	d101      	bne.n	8019e06 <__swsetup_r+0x46>
 8019e02:	68ac      	ldr	r4, [r5, #8]
 8019e04:	e7eb      	b.n	8019dde <__swsetup_r+0x1e>
 8019e06:	4b24      	ldr	r3, [pc, #144]	; (8019e98 <__swsetup_r+0xd8>)
 8019e08:	429c      	cmp	r4, r3
 8019e0a:	bf08      	it	eq
 8019e0c:	68ec      	ldreq	r4, [r5, #12]
 8019e0e:	e7e6      	b.n	8019dde <__swsetup_r+0x1e>
 8019e10:	0751      	lsls	r1, r2, #29
 8019e12:	d512      	bpl.n	8019e3a <__swsetup_r+0x7a>
 8019e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e16:	b141      	cbz	r1, 8019e2a <__swsetup_r+0x6a>
 8019e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e1c:	4299      	cmp	r1, r3
 8019e1e:	d002      	beq.n	8019e26 <__swsetup_r+0x66>
 8019e20:	4630      	mov	r0, r6
 8019e22:	f7fb fb61 	bl	80154e8 <_free_r>
 8019e26:	2300      	movs	r3, #0
 8019e28:	6363      	str	r3, [r4, #52]	; 0x34
 8019e2a:	89a3      	ldrh	r3, [r4, #12]
 8019e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019e30:	81a3      	strh	r3, [r4, #12]
 8019e32:	2300      	movs	r3, #0
 8019e34:	6063      	str	r3, [r4, #4]
 8019e36:	6923      	ldr	r3, [r4, #16]
 8019e38:	6023      	str	r3, [r4, #0]
 8019e3a:	89a3      	ldrh	r3, [r4, #12]
 8019e3c:	f043 0308 	orr.w	r3, r3, #8
 8019e40:	81a3      	strh	r3, [r4, #12]
 8019e42:	6923      	ldr	r3, [r4, #16]
 8019e44:	b94b      	cbnz	r3, 8019e5a <__swsetup_r+0x9a>
 8019e46:	89a3      	ldrh	r3, [r4, #12]
 8019e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019e50:	d003      	beq.n	8019e5a <__swsetup_r+0x9a>
 8019e52:	4621      	mov	r1, r4
 8019e54:	4630      	mov	r0, r6
 8019e56:	f000 f8f5 	bl	801a044 <__smakebuf_r>
 8019e5a:	89a2      	ldrh	r2, [r4, #12]
 8019e5c:	f012 0301 	ands.w	r3, r2, #1
 8019e60:	d00c      	beq.n	8019e7c <__swsetup_r+0xbc>
 8019e62:	2300      	movs	r3, #0
 8019e64:	60a3      	str	r3, [r4, #8]
 8019e66:	6963      	ldr	r3, [r4, #20]
 8019e68:	425b      	negs	r3, r3
 8019e6a:	61a3      	str	r3, [r4, #24]
 8019e6c:	6923      	ldr	r3, [r4, #16]
 8019e6e:	b953      	cbnz	r3, 8019e86 <__swsetup_r+0xc6>
 8019e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019e78:	d1ba      	bne.n	8019df0 <__swsetup_r+0x30>
 8019e7a:	bd70      	pop	{r4, r5, r6, pc}
 8019e7c:	0792      	lsls	r2, r2, #30
 8019e7e:	bf58      	it	pl
 8019e80:	6963      	ldrpl	r3, [r4, #20]
 8019e82:	60a3      	str	r3, [r4, #8]
 8019e84:	e7f2      	b.n	8019e6c <__swsetup_r+0xac>
 8019e86:	2000      	movs	r0, #0
 8019e88:	e7f7      	b.n	8019e7a <__swsetup_r+0xba>
 8019e8a:	bf00      	nop
 8019e8c:	20000020 	.word	0x20000020
 8019e90:	0801cf80 	.word	0x0801cf80
 8019e94:	0801cfa0 	.word	0x0801cfa0
 8019e98:	0801cf60 	.word	0x0801cf60

08019e9c <__sflush_r>:
 8019e9c:	898a      	ldrh	r2, [r1, #12]
 8019e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ea2:	4605      	mov	r5, r0
 8019ea4:	0710      	lsls	r0, r2, #28
 8019ea6:	460c      	mov	r4, r1
 8019ea8:	d458      	bmi.n	8019f5c <__sflush_r+0xc0>
 8019eaa:	684b      	ldr	r3, [r1, #4]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	dc05      	bgt.n	8019ebc <__sflush_r+0x20>
 8019eb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	dc02      	bgt.n	8019ebc <__sflush_r+0x20>
 8019eb6:	2000      	movs	r0, #0
 8019eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ebe:	2e00      	cmp	r6, #0
 8019ec0:	d0f9      	beq.n	8019eb6 <__sflush_r+0x1a>
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019ec8:	682f      	ldr	r7, [r5, #0]
 8019eca:	6a21      	ldr	r1, [r4, #32]
 8019ecc:	602b      	str	r3, [r5, #0]
 8019ece:	d032      	beq.n	8019f36 <__sflush_r+0x9a>
 8019ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019ed2:	89a3      	ldrh	r3, [r4, #12]
 8019ed4:	075a      	lsls	r2, r3, #29
 8019ed6:	d505      	bpl.n	8019ee4 <__sflush_r+0x48>
 8019ed8:	6863      	ldr	r3, [r4, #4]
 8019eda:	1ac0      	subs	r0, r0, r3
 8019edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019ede:	b10b      	cbz	r3, 8019ee4 <__sflush_r+0x48>
 8019ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ee2:	1ac0      	subs	r0, r0, r3
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	4602      	mov	r2, r0
 8019ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019eea:	6a21      	ldr	r1, [r4, #32]
 8019eec:	4628      	mov	r0, r5
 8019eee:	47b0      	blx	r6
 8019ef0:	1c43      	adds	r3, r0, #1
 8019ef2:	89a3      	ldrh	r3, [r4, #12]
 8019ef4:	d106      	bne.n	8019f04 <__sflush_r+0x68>
 8019ef6:	6829      	ldr	r1, [r5, #0]
 8019ef8:	291d      	cmp	r1, #29
 8019efa:	d848      	bhi.n	8019f8e <__sflush_r+0xf2>
 8019efc:	4a29      	ldr	r2, [pc, #164]	; (8019fa4 <__sflush_r+0x108>)
 8019efe:	40ca      	lsrs	r2, r1
 8019f00:	07d6      	lsls	r6, r2, #31
 8019f02:	d544      	bpl.n	8019f8e <__sflush_r+0xf2>
 8019f04:	2200      	movs	r2, #0
 8019f06:	6062      	str	r2, [r4, #4]
 8019f08:	04d9      	lsls	r1, r3, #19
 8019f0a:	6922      	ldr	r2, [r4, #16]
 8019f0c:	6022      	str	r2, [r4, #0]
 8019f0e:	d504      	bpl.n	8019f1a <__sflush_r+0x7e>
 8019f10:	1c42      	adds	r2, r0, #1
 8019f12:	d101      	bne.n	8019f18 <__sflush_r+0x7c>
 8019f14:	682b      	ldr	r3, [r5, #0]
 8019f16:	b903      	cbnz	r3, 8019f1a <__sflush_r+0x7e>
 8019f18:	6560      	str	r0, [r4, #84]	; 0x54
 8019f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f1c:	602f      	str	r7, [r5, #0]
 8019f1e:	2900      	cmp	r1, #0
 8019f20:	d0c9      	beq.n	8019eb6 <__sflush_r+0x1a>
 8019f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f26:	4299      	cmp	r1, r3
 8019f28:	d002      	beq.n	8019f30 <__sflush_r+0x94>
 8019f2a:	4628      	mov	r0, r5
 8019f2c:	f7fb fadc 	bl	80154e8 <_free_r>
 8019f30:	2000      	movs	r0, #0
 8019f32:	6360      	str	r0, [r4, #52]	; 0x34
 8019f34:	e7c0      	b.n	8019eb8 <__sflush_r+0x1c>
 8019f36:	2301      	movs	r3, #1
 8019f38:	4628      	mov	r0, r5
 8019f3a:	47b0      	blx	r6
 8019f3c:	1c41      	adds	r1, r0, #1
 8019f3e:	d1c8      	bne.n	8019ed2 <__sflush_r+0x36>
 8019f40:	682b      	ldr	r3, [r5, #0]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d0c5      	beq.n	8019ed2 <__sflush_r+0x36>
 8019f46:	2b1d      	cmp	r3, #29
 8019f48:	d001      	beq.n	8019f4e <__sflush_r+0xb2>
 8019f4a:	2b16      	cmp	r3, #22
 8019f4c:	d101      	bne.n	8019f52 <__sflush_r+0xb6>
 8019f4e:	602f      	str	r7, [r5, #0]
 8019f50:	e7b1      	b.n	8019eb6 <__sflush_r+0x1a>
 8019f52:	89a3      	ldrh	r3, [r4, #12]
 8019f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f58:	81a3      	strh	r3, [r4, #12]
 8019f5a:	e7ad      	b.n	8019eb8 <__sflush_r+0x1c>
 8019f5c:	690f      	ldr	r7, [r1, #16]
 8019f5e:	2f00      	cmp	r7, #0
 8019f60:	d0a9      	beq.n	8019eb6 <__sflush_r+0x1a>
 8019f62:	0793      	lsls	r3, r2, #30
 8019f64:	680e      	ldr	r6, [r1, #0]
 8019f66:	bf08      	it	eq
 8019f68:	694b      	ldreq	r3, [r1, #20]
 8019f6a:	600f      	str	r7, [r1, #0]
 8019f6c:	bf18      	it	ne
 8019f6e:	2300      	movne	r3, #0
 8019f70:	eba6 0807 	sub.w	r8, r6, r7
 8019f74:	608b      	str	r3, [r1, #8]
 8019f76:	f1b8 0f00 	cmp.w	r8, #0
 8019f7a:	dd9c      	ble.n	8019eb6 <__sflush_r+0x1a>
 8019f7c:	4643      	mov	r3, r8
 8019f7e:	463a      	mov	r2, r7
 8019f80:	6a21      	ldr	r1, [r4, #32]
 8019f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019f84:	4628      	mov	r0, r5
 8019f86:	47b0      	blx	r6
 8019f88:	2800      	cmp	r0, #0
 8019f8a:	dc06      	bgt.n	8019f9a <__sflush_r+0xfe>
 8019f8c:	89a3      	ldrh	r3, [r4, #12]
 8019f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f92:	81a3      	strh	r3, [r4, #12]
 8019f94:	f04f 30ff 	mov.w	r0, #4294967295
 8019f98:	e78e      	b.n	8019eb8 <__sflush_r+0x1c>
 8019f9a:	4407      	add	r7, r0
 8019f9c:	eba8 0800 	sub.w	r8, r8, r0
 8019fa0:	e7e9      	b.n	8019f76 <__sflush_r+0xda>
 8019fa2:	bf00      	nop
 8019fa4:	20400001 	.word	0x20400001

08019fa8 <_fflush_r>:
 8019fa8:	b538      	push	{r3, r4, r5, lr}
 8019faa:	690b      	ldr	r3, [r1, #16]
 8019fac:	4605      	mov	r5, r0
 8019fae:	460c      	mov	r4, r1
 8019fb0:	b1db      	cbz	r3, 8019fea <_fflush_r+0x42>
 8019fb2:	b118      	cbz	r0, 8019fbc <_fflush_r+0x14>
 8019fb4:	6983      	ldr	r3, [r0, #24]
 8019fb6:	b90b      	cbnz	r3, 8019fbc <_fflush_r+0x14>
 8019fb8:	f7fe f80a 	bl	8017fd0 <__sinit>
 8019fbc:	4b0c      	ldr	r3, [pc, #48]	; (8019ff0 <_fflush_r+0x48>)
 8019fbe:	429c      	cmp	r4, r3
 8019fc0:	d109      	bne.n	8019fd6 <_fflush_r+0x2e>
 8019fc2:	686c      	ldr	r4, [r5, #4]
 8019fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fc8:	b17b      	cbz	r3, 8019fea <_fflush_r+0x42>
 8019fca:	4621      	mov	r1, r4
 8019fcc:	4628      	mov	r0, r5
 8019fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019fd2:	f7ff bf63 	b.w	8019e9c <__sflush_r>
 8019fd6:	4b07      	ldr	r3, [pc, #28]	; (8019ff4 <_fflush_r+0x4c>)
 8019fd8:	429c      	cmp	r4, r3
 8019fda:	d101      	bne.n	8019fe0 <_fflush_r+0x38>
 8019fdc:	68ac      	ldr	r4, [r5, #8]
 8019fde:	e7f1      	b.n	8019fc4 <_fflush_r+0x1c>
 8019fe0:	4b05      	ldr	r3, [pc, #20]	; (8019ff8 <_fflush_r+0x50>)
 8019fe2:	429c      	cmp	r4, r3
 8019fe4:	bf08      	it	eq
 8019fe6:	68ec      	ldreq	r4, [r5, #12]
 8019fe8:	e7ec      	b.n	8019fc4 <_fflush_r+0x1c>
 8019fea:	2000      	movs	r0, #0
 8019fec:	bd38      	pop	{r3, r4, r5, pc}
 8019fee:	bf00      	nop
 8019ff0:	0801cf80 	.word	0x0801cf80
 8019ff4:	0801cfa0 	.word	0x0801cfa0
 8019ff8:	0801cf60 	.word	0x0801cf60

08019ffc <__swhatbuf_r>:
 8019ffc:	b570      	push	{r4, r5, r6, lr}
 8019ffe:	460e      	mov	r6, r1
 801a000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a004:	2900      	cmp	r1, #0
 801a006:	b096      	sub	sp, #88	; 0x58
 801a008:	4614      	mov	r4, r2
 801a00a:	461d      	mov	r5, r3
 801a00c:	da07      	bge.n	801a01e <__swhatbuf_r+0x22>
 801a00e:	2300      	movs	r3, #0
 801a010:	602b      	str	r3, [r5, #0]
 801a012:	89b3      	ldrh	r3, [r6, #12]
 801a014:	061a      	lsls	r2, r3, #24
 801a016:	d410      	bmi.n	801a03a <__swhatbuf_r+0x3e>
 801a018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a01c:	e00e      	b.n	801a03c <__swhatbuf_r+0x40>
 801a01e:	466a      	mov	r2, sp
 801a020:	f000 f858 	bl	801a0d4 <_fstat_r>
 801a024:	2800      	cmp	r0, #0
 801a026:	dbf2      	blt.n	801a00e <__swhatbuf_r+0x12>
 801a028:	9a01      	ldr	r2, [sp, #4]
 801a02a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a02e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a032:	425a      	negs	r2, r3
 801a034:	415a      	adcs	r2, r3
 801a036:	602a      	str	r2, [r5, #0]
 801a038:	e7ee      	b.n	801a018 <__swhatbuf_r+0x1c>
 801a03a:	2340      	movs	r3, #64	; 0x40
 801a03c:	2000      	movs	r0, #0
 801a03e:	6023      	str	r3, [r4, #0]
 801a040:	b016      	add	sp, #88	; 0x58
 801a042:	bd70      	pop	{r4, r5, r6, pc}

0801a044 <__smakebuf_r>:
 801a044:	898b      	ldrh	r3, [r1, #12]
 801a046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a048:	079d      	lsls	r5, r3, #30
 801a04a:	4606      	mov	r6, r0
 801a04c:	460c      	mov	r4, r1
 801a04e:	d507      	bpl.n	801a060 <__smakebuf_r+0x1c>
 801a050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a054:	6023      	str	r3, [r4, #0]
 801a056:	6123      	str	r3, [r4, #16]
 801a058:	2301      	movs	r3, #1
 801a05a:	6163      	str	r3, [r4, #20]
 801a05c:	b002      	add	sp, #8
 801a05e:	bd70      	pop	{r4, r5, r6, pc}
 801a060:	ab01      	add	r3, sp, #4
 801a062:	466a      	mov	r2, sp
 801a064:	f7ff ffca 	bl	8019ffc <__swhatbuf_r>
 801a068:	9900      	ldr	r1, [sp, #0]
 801a06a:	4605      	mov	r5, r0
 801a06c:	4630      	mov	r0, r6
 801a06e:	f7fb fa89 	bl	8015584 <_malloc_r>
 801a072:	b948      	cbnz	r0, 801a088 <__smakebuf_r+0x44>
 801a074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a078:	059a      	lsls	r2, r3, #22
 801a07a:	d4ef      	bmi.n	801a05c <__smakebuf_r+0x18>
 801a07c:	f023 0303 	bic.w	r3, r3, #3
 801a080:	f043 0302 	orr.w	r3, r3, #2
 801a084:	81a3      	strh	r3, [r4, #12]
 801a086:	e7e3      	b.n	801a050 <__smakebuf_r+0xc>
 801a088:	4b0d      	ldr	r3, [pc, #52]	; (801a0c0 <__smakebuf_r+0x7c>)
 801a08a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a08c:	89a3      	ldrh	r3, [r4, #12]
 801a08e:	6020      	str	r0, [r4, #0]
 801a090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a094:	81a3      	strh	r3, [r4, #12]
 801a096:	9b00      	ldr	r3, [sp, #0]
 801a098:	6163      	str	r3, [r4, #20]
 801a09a:	9b01      	ldr	r3, [sp, #4]
 801a09c:	6120      	str	r0, [r4, #16]
 801a09e:	b15b      	cbz	r3, 801a0b8 <__smakebuf_r+0x74>
 801a0a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0a4:	4630      	mov	r0, r6
 801a0a6:	f000 f827 	bl	801a0f8 <_isatty_r>
 801a0aa:	b128      	cbz	r0, 801a0b8 <__smakebuf_r+0x74>
 801a0ac:	89a3      	ldrh	r3, [r4, #12]
 801a0ae:	f023 0303 	bic.w	r3, r3, #3
 801a0b2:	f043 0301 	orr.w	r3, r3, #1
 801a0b6:	81a3      	strh	r3, [r4, #12]
 801a0b8:	89a3      	ldrh	r3, [r4, #12]
 801a0ba:	431d      	orrs	r5, r3
 801a0bc:	81a5      	strh	r5, [r4, #12]
 801a0be:	e7cd      	b.n	801a05c <__smakebuf_r+0x18>
 801a0c0:	08017f99 	.word	0x08017f99

0801a0c4 <_malloc_usable_size_r>:
 801a0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a0c8:	1f18      	subs	r0, r3, #4
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	bfbc      	itt	lt
 801a0ce:	580b      	ldrlt	r3, [r1, r0]
 801a0d0:	18c0      	addlt	r0, r0, r3
 801a0d2:	4770      	bx	lr

0801a0d4 <_fstat_r>:
 801a0d4:	b538      	push	{r3, r4, r5, lr}
 801a0d6:	4c07      	ldr	r4, [pc, #28]	; (801a0f4 <_fstat_r+0x20>)
 801a0d8:	2300      	movs	r3, #0
 801a0da:	4605      	mov	r5, r0
 801a0dc:	4608      	mov	r0, r1
 801a0de:	4611      	mov	r1, r2
 801a0e0:	6023      	str	r3, [r4, #0]
 801a0e2:	f7ea f876 	bl	80041d2 <_fstat>
 801a0e6:	1c43      	adds	r3, r0, #1
 801a0e8:	d102      	bne.n	801a0f0 <_fstat_r+0x1c>
 801a0ea:	6823      	ldr	r3, [r4, #0]
 801a0ec:	b103      	cbz	r3, 801a0f0 <_fstat_r+0x1c>
 801a0ee:	602b      	str	r3, [r5, #0]
 801a0f0:	bd38      	pop	{r3, r4, r5, pc}
 801a0f2:	bf00      	nop
 801a0f4:	2000751c 	.word	0x2000751c

0801a0f8 <_isatty_r>:
 801a0f8:	b538      	push	{r3, r4, r5, lr}
 801a0fa:	4c06      	ldr	r4, [pc, #24]	; (801a114 <_isatty_r+0x1c>)
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	4605      	mov	r5, r0
 801a100:	4608      	mov	r0, r1
 801a102:	6023      	str	r3, [r4, #0]
 801a104:	f7ea f875 	bl	80041f2 <_isatty>
 801a108:	1c43      	adds	r3, r0, #1
 801a10a:	d102      	bne.n	801a112 <_isatty_r+0x1a>
 801a10c:	6823      	ldr	r3, [r4, #0]
 801a10e:	b103      	cbz	r3, 801a112 <_isatty_r+0x1a>
 801a110:	602b      	str	r3, [r5, #0]
 801a112:	bd38      	pop	{r3, r4, r5, pc}
 801a114:	2000751c 	.word	0x2000751c

0801a118 <sqrtf>:
 801a118:	b510      	push	{r4, lr}
 801a11a:	ed2d 8b02 	vpush	{d8}
 801a11e:	b08a      	sub	sp, #40	; 0x28
 801a120:	eeb0 8a40 	vmov.f32	s16, s0
 801a124:	f000 f848 	bl	801a1b8 <__ieee754_sqrtf>
 801a128:	4b21      	ldr	r3, [pc, #132]	; (801a1b0 <sqrtf+0x98>)
 801a12a:	f993 4000 	ldrsb.w	r4, [r3]
 801a12e:	1c63      	adds	r3, r4, #1
 801a130:	d02c      	beq.n	801a18c <sqrtf+0x74>
 801a132:	eeb4 8a48 	vcmp.f32	s16, s16
 801a136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a13a:	d627      	bvs.n	801a18c <sqrtf+0x74>
 801a13c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a144:	d522      	bpl.n	801a18c <sqrtf+0x74>
 801a146:	2301      	movs	r3, #1
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	4b1a      	ldr	r3, [pc, #104]	; (801a1b4 <sqrtf+0x9c>)
 801a14c:	9301      	str	r3, [sp, #4]
 801a14e:	ee18 0a10 	vmov	r0, s16
 801a152:	2300      	movs	r3, #0
 801a154:	9308      	str	r3, [sp, #32]
 801a156:	f7e6 fa27 	bl	80005a8 <__aeabi_f2d>
 801a15a:	2200      	movs	r2, #0
 801a15c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a164:	2300      	movs	r3, #0
 801a166:	b9ac      	cbnz	r4, 801a194 <sqrtf+0x7c>
 801a168:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a16c:	4668      	mov	r0, sp
 801a16e:	f000 f826 	bl	801a1be <matherr>
 801a172:	b1b8      	cbz	r0, 801a1a4 <sqrtf+0x8c>
 801a174:	9b08      	ldr	r3, [sp, #32]
 801a176:	b11b      	cbz	r3, 801a180 <sqrtf+0x68>
 801a178:	f000 f824 	bl	801a1c4 <__errno>
 801a17c:	9b08      	ldr	r3, [sp, #32]
 801a17e:	6003      	str	r3, [r0, #0]
 801a180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a184:	f7e6 fd60 	bl	8000c48 <__aeabi_d2f>
 801a188:	ee00 0a10 	vmov	s0, r0
 801a18c:	b00a      	add	sp, #40	; 0x28
 801a18e:	ecbd 8b02 	vpop	{d8}
 801a192:	bd10      	pop	{r4, pc}
 801a194:	4610      	mov	r0, r2
 801a196:	4619      	mov	r1, r3
 801a198:	f7e6 fb88 	bl	80008ac <__aeabi_ddiv>
 801a19c:	2c02      	cmp	r4, #2
 801a19e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a1a2:	d1e3      	bne.n	801a16c <sqrtf+0x54>
 801a1a4:	f000 f80e 	bl	801a1c4 <__errno>
 801a1a8:	2321      	movs	r3, #33	; 0x21
 801a1aa:	6003      	str	r3, [r0, #0]
 801a1ac:	e7e2      	b.n	801a174 <sqrtf+0x5c>
 801a1ae:	bf00      	nop
 801a1b0:	200001f0 	.word	0x200001f0
 801a1b4:	0801d0e8 	.word	0x0801d0e8

0801a1b8 <__ieee754_sqrtf>:
 801a1b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a1bc:	4770      	bx	lr

0801a1be <matherr>:
 801a1be:	2000      	movs	r0, #0
 801a1c0:	4770      	bx	lr
	...

0801a1c4 <__errno>:
 801a1c4:	4b01      	ldr	r3, [pc, #4]	; (801a1cc <__errno+0x8>)
 801a1c6:	6818      	ldr	r0, [r3, #0]
 801a1c8:	4770      	bx	lr
 801a1ca:	bf00      	nop
 801a1cc:	20000020 	.word	0x20000020

0801a1d0 <_init>:
 801a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1d2:	bf00      	nop
 801a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1d6:	bc08      	pop	{r3}
 801a1d8:	469e      	mov	lr, r3
 801a1da:	4770      	bx	lr

0801a1dc <_fini>:
 801a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1de:	bf00      	nop
 801a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1e2:	bc08      	pop	{r3}
 801a1e4:	469e      	mov	lr, r3
 801a1e6:	4770      	bx	lr
